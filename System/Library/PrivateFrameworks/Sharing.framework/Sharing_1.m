uint64_t sub_1A29CAA84(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  int v40;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unint64_t v48;

  v3 = *(_QWORD *)(a3[4] - 8);
  v4 = (((*(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64)
      + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  v48 = v7 + v4;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v15 = ((v9 + 8) & ~v9) + (v11 | 7) + *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v15;
  v16 = (v15 + 1) & ~(v11 | 7);
  v17 = ((v11 + 8) & ~v11) + v14 + *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v17;
  v18 = (v17 + v16 + 1) & ~v14;
  v19 = *(_DWORD *)(v12 + 84);
  v20 = ((v13 + 8) & ~v13)
      + *(_QWORD *)(v12 + 64)
      + (((v11 | v9 | v13) & 0xF8 ^ 0x1F8) & ((v11 | v9 | v13) + 8));
  if (!v19)
    ++v20;
  v21 = (v20 + v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;
  if (v21 + 8 <= v48)
    v22 = v48;
  v23 = ((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v23 <= v22)
    v23 = v22;
  if (v23 <= 8)
    v23 = 8;
  if (v23 > 3)
  {
    v24 = 6;
    goto LABEL_20;
  }
  v25 = ((1 << (8 * v23)) + 1) >> (8 * v23);
  if (v25 <= 0xFFFA)
  {
    v24 = v25 + 5;
    if (v25 > 0xFA)
    {
      v27 = 16;
      v26 = a2;
LABEL_21:
      v28 = (1 << v27) - v24;
      if ((v28 & 0x80000000) != 0)
        v28 = 0x7FFFFFFF;
      if (v23 > 3)
        goto LABEL_29;
LABEL_26:
      v29 = ((1 << (8 * v23)) + 1) >> (8 * v23);
      v30 = 2;
      if (v29 > 0xFFFA)
        v30 = 4;
      if (v29 > 0xFA)
        goto LABEL_30;
      goto LABEL_29;
    }
LABEL_20:
    v26 = a2;
    v27 = 8;
    goto LABEL_21;
  }
  v28 = 0x7FFFFFFF;
  v26 = a2;
  if (v23 <= 3)
    goto LABEL_26;
LABEL_29:
  v30 = 1;
LABEL_30:
  if (!v26)
    return 0;
  if (v26 <= v28)
    goto LABEL_48;
  v31 = v30 + v23;
  v32 = 8 * v31;
  if (v31 <= 3)
  {
    v34 = ((v26 - v28 + ~(-1 << v32)) >> v32) + 1;
    if (HIWORD(v34))
    {
      v33 = *(_DWORD *)(a1 + v31);
      if (!v33)
        goto LABEL_48;
      goto LABEL_41;
    }
    if (v34 > 0xFF)
    {
      v33 = *(unsigned __int16 *)(a1 + v31);
      if (!*(_WORD *)(a1 + v31))
        goto LABEL_48;
      goto LABEL_41;
    }
    if (v34 < 2)
    {
LABEL_48:
      if (v28)
      {
        if (v23 <= 3)
        {
          v42 = ((1 << (8 * v23)) + 1) >> (8 * v23);
          if (v42 > 0xFFFA)
          {
            v37 = *(_DWORD *)(a1 + v23);
            v38 = ~v37;
LABEL_58:
            v45 = 0x7FFFFFFF;
LABEL_59:
            if (v45 > v38)
              return -v37;
            else
              return 0;
          }
          v40 = v42 + 5;
          if (v42 > 0xFA)
          {
            v44 = *(unsigned __int16 *)(a1 + v23);
            v37 = v44 | 0xFFFF0000;
            v38 = v44 ^ 0xFFFF;
            v39 = 16;
          }
          else
          {
            v43 = *(unsigned __int8 *)(a1 + v23);
            v37 = v43 | 0xFFFFFF00;
            v38 = v43 ^ 0xFF;
            v39 = 8;
          }
        }
        else
        {
          v36 = *(unsigned __int8 *)(a1 + v23);
          v37 = v36 | 0xFFFFFF00;
          v38 = v36 ^ 0xFF;
          v39 = 8;
          v40 = 6;
        }
        v45 = (1 << v39) - v40;
        if ((v45 & 0x80000000) == 0)
          goto LABEL_59;
        goto LABEL_58;
      }
      return 0;
    }
  }
  v33 = *(unsigned __int8 *)(a1 + v31);
  if (!*(_BYTE *)(a1 + v31))
    goto LABEL_48;
LABEL_41:
  v35 = (v33 - 1) << v32;
  if (v31 > 3)
    v35 = 0;
  if ((_DWORD)v31)
  {
    if (v31 > 3)
      LODWORD(v31) = 4;
    __asm { BR              X12 }
  }
  return v28 + v35 + 1;
}

void sub_1A29CAEBC(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  size_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;

  v4 = *(_QWORD *)(a4[4] - 8);
  v5 = (((*(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64)
      + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  v40 = v8 + v5;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | 7;
  v16 = ((v10 + 8) & ~v10) + (v12 | 7) + *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v16;
  v17 = (v16 + 1) & ~(v12 | 7);
  v18 = ((v12 + 8) & ~v12) + v15 + *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v18;
  v19 = (v18 + v17 + 1) & ~v15;
  v20 = *(_DWORD *)(v13 + 84);
  v21 = ((v14 + 8) & ~v14)
      + *(_QWORD *)(v13 + 64)
      + (((v12 | v10 | v14) & 0xF8 ^ 0x1F8) & ((v12 | v10 | v14) + 8));
  if (!v20)
    ++v21;
  v22 = (v21 + v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = v22 + 8;
  if (v22 + 8 <= v40)
    v23 = v40;
  v24 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v24 <= v23)
    v24 = v23;
  if (v24 <= 8)
    v24 = 8;
  v25 = 8 * v24;
  if (v24 <= 3)
  {
    v34 = ((1 << v25) + 1) >> v25;
    if (v34 > 0xFFFA)
    {
      v31 = 0x7FFFFFFF;
      v27 = a1;
      v29 = a3;
      v28 = a2;
      if (v24 > 3)
        goto LABEL_30;
      goto LABEL_22;
    }
    v26 = v34 + 5;
    if (v34 > 0xFA)
    {
      v30 = 16;
      v27 = a1;
      v29 = a3;
      v28 = a2;
LABEL_19:
      v31 = (1 << v30) - v26;
      if ((v31 & 0x80000000) != 0)
        v31 = 0x7FFFFFFF;
      if (v24 > 3)
        goto LABEL_30;
LABEL_22:
      v32 = ((1 << v25) + 1) >> v25;
      v33 = 2;
      if (v32 > 0xFFFA)
        v33 = 4;
      if (v32 > 0xFA)
      {
LABEL_31:
        v35 = v33 + v24;
        if (v29 <= v31)
        {
          v36 = 0u;
        }
        else if (v35 <= 3)
        {
          v38 = ((v29 - v31 + ~(-1 << (8 * v35))) >> (8 * v35)) + 1;
          if (HIWORD(v38))
          {
            v36 = 4u;
          }
          else if (v38 >= 0x100)
          {
            v36 = 2;
          }
          else
          {
            v36 = v38 > 1;
          }
        }
        else
        {
          v36 = 1u;
        }
        if (v31 < v28)
        {
          v37 = ~v31 + v28;
          if (v35 < 4)
          {
            if ((_DWORD)v35)
            {
              v39 = v37 & ~(-1 << (8 * v35));
              bzero(v27, v35);
              if ((_DWORD)v35 == 3)
              {
                *(_WORD *)v27 = v39;
                v27[2] = BYTE2(v39);
              }
              else if ((_DWORD)v35 == 2)
              {
                *(_WORD *)v27 = v39;
              }
              else
              {
                *v27 = v39;
              }
            }
          }
          else
          {
            bzero(v27, v35);
            *(_DWORD *)v27 = v37;
          }
          __asm { BR              X10 }
        }
        __asm { BR              X12 }
      }
LABEL_30:
      v33 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    v26 = 6;
  }
  v27 = a1;
  v29 = a3;
  v28 = a2;
  v30 = 8;
  goto LABEL_19;
}

uint64_t sub_1A29CB2E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;

  v2 = *(_QWORD *)(a2[4] - 8);
  v3 = (((*(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a2[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64)
      + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_DWORD *)(v2 + 84);
  v5 = *(_QWORD *)(v2 + 64);
  if (v4)
    v6 = v5;
  else
    v6 = v5 + 1;
  v26 = v6 + v3;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v12 | 7;
  v14 = ((v8 + 8) & ~v8) + (v10 | 7) + *(_QWORD *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84))
    ++v14;
  v15 = (v14 + 1) & ~(v10 | 7);
  v16 = ((v10 + 8) & ~v10) + v13 + *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v16;
  v17 = (v16 + v15 + 1) & ~v13;
  v18 = *(_DWORD *)(v11 + 84);
  v19 = ((v12 + 8) & ~v12)
      + *(_QWORD *)(v11 + 64)
      + (((v10 | v8 | v12) & 0xF8 ^ 0x1F8) & ((v10 | v8 | v12) + 8));
  if (!v18)
    ++v19;
  v20 = (v19 + v17 + 8) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  if (v20 + 8 <= v26)
    v21 = v26;
  v22 = ((v20 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v22 <= v21)
    v22 = v21;
  if (v22 <= 8)
    v22 = 8;
  if (v22 > 3)
    goto LABEL_17;
  v24 = ((1 << (8 * v22)) + 1) >> (8 * v22);
  if (v24 > 0xFFFA)
  {
    result = *(unsigned int *)(a1 + v22);
  }
  else
  {
    if (v24 <= 0xFA)
    {
LABEL_17:
      result = *(unsigned __int8 *)(a1 + v22);
      goto LABEL_22;
    }
    result = *(unsigned __int16 *)(a1 + v22);
  }
LABEL_22:
  if (result >= 5)
  {
    if (v22 <= 3)
      v25 = v22;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1A29CB580(char *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unint64_t v33;

  v3 = *(_QWORD *)(a3[4] - 8);
  v4 = (((*(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64)
      + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  v33 = v7 + v4;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  result = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(result - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | 7;
  v16 = ((v9 + 8) & ~v9) + (v11 | 7) + *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v16;
  v17 = (v16 + 1) & ~(v11 | 7);
  v18 = ((v11 + 8) & ~v11) + v15 + *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v18;
  v19 = (v18 + v17 + 1) & ~v15;
  v20 = *(_DWORD *)(v13 + 84);
  v21 = ((v14 + 8) & ~v14)
      + *(_QWORD *)(v13 + 64)
      + (((v11 | v9 | v14) & 0xF8 ^ 0x1F8) & ((v11 | v9 | v14) + 8));
  if (!v20)
    ++v21;
  v22 = (v21 + v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = v22 + 8;
  if (v22 + 8 <= v33)
    v23 = v33;
  v24 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v24 <= v23)
    v24 = v23;
  if (v24 <= 8)
    v25 = 8;
  else
    v25 = v24;
  if (a2 > 4)
  {
    if (v25 < 4)
    {
      v28 = ((a2 - 5) >> (8 * v25)) + 5;
      v26 = a1;
      v29 = (unsigned int *)&a1[v25];
      v30 = ((1 << (8 * v25)) + 1) >> (8 * v25);
      if (v30 > 0xFFFA)
      {
        *v29 = v28;
      }
      else if (v30 > 0xFA)
      {
        *(_WORD *)v29 = v28;
      }
      else
      {
        *(_BYTE *)v29 = v28;
      }
    }
    else
    {
      v26 = a1;
      a1[v25] = 5;
    }
    if (v25 >= 4)
      v31 = 4;
    else
      v31 = v25;
    bzero(v26, v25);
    __asm { BR              X10 }
  }
  if (v25 > 3)
    goto LABEL_19;
  v27 = ((1 << (8 * v25)) + 1) >> (8 * v25);
  if (v27 > 0xFFFA)
  {
    *(_DWORD *)&a1[v25] = a2;
  }
  else
  {
    if (v27 <= 0xFA)
    {
LABEL_19:
      a1[v25] = a2;
      return result;
    }
    *(_WORD *)&a1[v25] = a2;
  }
  return result;
}

void type metadata accessor for CombineLatestStateMachine.State.Upstream()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29CB888()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A29CB890()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE39F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A29CB910(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  const void *v14;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || v8 + ((v7 + 8) & ~v7) + 1 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    v14 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
    *((_BYTE *)v13 + v8) = *((_BYTE *)v14 + v8);
  }
  return v3;
}

uint64_t sub_1A29CBA28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_QWORD *sub_1A29CBA94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *((_BYTE *)v7 + v12) = *((_BYTE *)v8 + v12);
  return a1;
}

_QWORD *sub_1A29CBB68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  *((_BYTE *)v7 + v13) = *((_BYTE *)v8 + v13);
  return a1;
}

_QWORD *sub_1A29CBC88(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  *((_BYTE *)v7 + v12) = *((_BYTE *)v8 + v12);
  return a1;
}

_QWORD *sub_1A29CBD5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  *((_BYTE *)v7 + v13) = *((_BYTE *)v8 + v13);
  return a1;
}

uint64_t sub_1A29CBE7C(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = 1;
  else
    v8 = 2;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + *(_QWORD *)(v4 + 64) + ((v9 + 8) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0x7FFFFFFE)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v17) = -1;
        if ((v17 + 1) >= 2)
          return v17;
        else
          return 0;
      }
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1A29CC010(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 1;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80)) != -1)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1A29CC27C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1A29CC284()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1A29CC2A4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1A29CC2B4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1A29CC2BC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_1A29CC2C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

uint64_t sub_1A29CC314(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = v3 + *(int *)(a1 + 76);
  v6 = sub_1A2AE39F4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v2, v6);
  *(_BYTE *)(v3 + *(int *)(a1 + 80)) = v1;
  return result;
}

void sub_1A29CC364(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t TupleTypeMetadata3;
  uint64_t v12;
  uint64_t v13;

  v10 = sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v12 = a6 + *(int *)(TupleTypeMetadata3 + 48);
  v13 = a6 + *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v12, a2, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v13, a3, v10);
  type metadata accessor for CombineLatestStateMachine.State();
}

void sub_1A29CC450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  swift_storeEnumTagMultiPayload();
  v4 = v0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v0, 1, v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  if (v5 == 1)
    type metadata accessor for CombineLatestStateMachine();
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A29CC50C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CC588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 128) = v0;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 224) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CC5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 128) = v0;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CC600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v17 - 184) = v15;
  *(_QWORD *)(v17 - 176) = v14;
  *(_QWORD *)(v17 - 200) = a1;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v17 - 168) = TupleTypeMetadata3;
  *(_QWORD *)(v17 - 232) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  *(_QWORD *)(v17 - 208) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v17 - 192) = (char *)&a9 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  MEMORY[0x1E0C80A78](v23);
  *(_QWORD *)(v17 - 160) = (char *)&a9 - v24;
  *(_QWORD *)(v17 - 144) = v16;
  *(_QWORD *)(v17 - 136) = v10;
  *(_QWORD *)(v17 - 128) = v9;
  *(_QWORD *)(v17 - 120) = v12;
  *(_QWORD *)(v17 - 112) = v13;
  *(_QWORD *)(v17 - 104) = v11;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29CC6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&a9 - v12, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29CC730 + dword_1A29CCCAC[EnumCaseMultiPayload]))();
}

uint64_t sub_1A29CC744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata3;
  uint64_t v5;

  v3 = sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v5 = v1 + *(int *)(TupleTypeMetadata3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1 + *(int *)(TupleTypeMetadata3 + 64), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return 0;
}

void sub_1A29CCCC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[20];
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v15[13] = a2;
  v15[18] = a1;
  v4 = a3[7];
  v5 = a3[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v16);
  v15[12] = (char *)v15 - v6;
  v7 = a3[6];
  v8 = a3[3];
  v17 = swift_getAssociatedTypeWitness();
  v9 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v9);
  v15[11] = (char *)v15 - v10;
  v11 = a3[5];
  v12 = a3[2];
  swift_getAssociatedTypeWitness();
  v13 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v13);
  v15[10] = (char *)v15 - v14;
  v19 = v12;
  v20 = v8;
  v21 = v5;
  v22 = v11;
  v23 = v7;
  v24 = v4;
  type metadata accessor for CombineLatestStateMachine.State();
}

void sub_1A29CCE48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t TupleTypeMetadata3;
  _BYTE v17[80];

  v10 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v8 - 296) = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v13 = &v17[-v12];
  *(_QWORD *)(v8 - 240) = v14;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v14 + 16))(&v17[-v12], *(_QWORD *)(v8 - 200), a1);
  *(_QWORD *)(v8 - 232) = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)(v8 - 256) = v1;
  *(_QWORD *)(v8 - 248) = v13;
  *(_QWORD *)(v8 - 216) = v3;
  if (!EnumCaseMultiPayload)
  {
    *(_QWORD *)(v8 - 312) = sub_1A2AE39F4();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    *(_QWORD *)(v8 - 328) = v17;
    *(_QWORD *)(v8 - 304) = &v13[*(int *)(TupleTypeMetadata3 + 48)];
    *(_QWORD *)(v8 - 320) = &v13[*(int *)(TupleTypeMetadata3 + 64)];
    MEMORY[0x1E0C80A78](TupleTypeMetadata3);
    *(_QWORD *)(v8 - 336) = &v17[-64];
    strcpy(&v17[-64], "task upstreams downstreamContinuation buffer ");
    *(_QWORD *)(v8 - 176) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE675118);
    *(_QWORD *)(v8 - 144) = v1;
    *(_QWORD *)(v8 - 136) = v4;
    *(_QWORD *)(v8 - 128) = v6;
    *(_QWORD *)(v8 - 120) = v3;
    *(_QWORD *)(v8 - 112) = v2;
    *(_QWORD *)(v8 - 104) = v5;
    *(_QWORD *)(v8 - 96) = v7;
    type metadata accessor for CombineLatestStateMachine.State.Upstream();
  }
  __asm { BR              X10 }
}

void sub_1A29CD428()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 8))(v0);
  __break(1u);
  JUMPOUT(0x1A29CD7B0);
}

void sub_1A29CD7CC()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CD84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 192) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v0;
  *(_QWORD *)(v6 - 88) = v1;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CD888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v0;
  *(_QWORD *)(v6 - 88) = v1;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CD8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata3;

  *(_QWORD *)(v8 - 176) = v4;
  *(_QWORD *)(v8 - 168) = v2;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v8 - 160) = TupleTypeMetadata3;
  MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  *(_QWORD *)(v8 - 136) = v6;
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v3;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v0;
  *(_QWORD *)(v8 - 96) = v1;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29CD930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 144), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29CD988 + *((int *)qword_1A29CDD88 + EnumCaseMultiPayload)))();
}

unint64_t sub_1A29CD998()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void (*v18)(_QWORD *);
  void (*v19)(_QWORD *, char *);
  _QWORD *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(_QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(void);
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  *(_QWORD *)(v5 - 208) = *v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE675118);
  sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  type metadata accessor for Deque(255, TupleTypeMetadata3, v7, v8);
  v9 = *(_QWORD *)(v5 - 160);
  v10 = swift_getTupleTypeMetadata3();
  v11 = (char *)v4 + *(int *)(v10 + 48);
  *(_QWORD *)(v5 - 192) = *(_QWORD *)((char *)v4 + *(int *)(v10 + 64));
  v12 = *(int *)(v9 + 48);
  v13 = (_QWORD *)((char *)v0 + v12);
  v14 = *(int *)(v9 + 64);
  v15 = (char *)v0 + v14;
  v16 = &v11[v12];
  v17 = &v11[v14];
  v18 = *(void (**)(_QWORD *))(*(_QWORD *)(*(_QWORD *)(v5 - 168) - 8) + 32);
  *(_QWORD *)(v5 - 216) = v18;
  v18(v0);
  v19 = *(void (**)(_QWORD *, char *))(*(_QWORD *)(*(_QWORD *)(v5 - 176) - 8) + 32);
  v20 = v13;
  *(_QWORD *)(v5 - 224) = v19;
  v19(v13, v16);
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v2 - 8) + 32);
  *(_QWORD *)(v5 - 184) = v15;
  v21(v15, v17, v2);
  v22 = *(void (**)(_QWORD *, uint64_t))(v1 + 8);
  v22(*(_QWORD **)(v5 - 144), v3);
  swift_storeEnumTagMultiPayload();
  v23 = *(_QWORD *)(v5 - 200);
  if (v23 == 2)
  {
    v26 = v2;
    **(_QWORD **)(v5 - 184) = *(_QWORD *)(v5 - 152);
    v24 = *(_QWORD *)(v5 - 208);
    v25 = v20;
  }
  else if (v23 == 1)
  {
    v26 = v2;
    v25 = v20;
    *v20 = *(_QWORD *)(v5 - 152);
    v24 = *(_QWORD *)(v5 - 208);
  }
  else
  {
    v24 = *(_QWORD *)(v5 - 208);
    if (v23)
    {
      swift_release();
      swift_release();
      __break(1u);
      JUMPOUT(0x1A29CDD88);
    }
    v25 = v20;
    v26 = v2;
    *v0 = *(_QWORD *)(v5 - 152);
  }
  v27 = *(void (**)(void))(v5 - 216);
  v28 = *(_QWORD **)(v5 - 144);
  v22(v28, v3);
  v29 = (char *)v28 + *(int *)(v10 + 48);
  v30 = *(int *)(v10 + 64);
  *v28 = v24;
  v31 = *(_QWORD *)(v5 - 160);
  v32 = &v29[*(int *)(v31 + 48)];
  v33 = &v29[*(int *)(v31 + 64)];
  v27();
  (*(void (**)(char *, _QWORD *, _QWORD))(v5 - 224))(v32, v25, *(_QWORD *)(v5 - 176));
  v21(v33, *(char **)(v5 - 184), v26);
  *(_QWORD *)((char *)v28 + v30) = *(_QWORD *)(v5 - 192);
  swift_storeEnumTagMultiPayload();
  return 0xF00000000000000FLL;
}

void sub_1A29CDDA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[37];
  uint64_t TupleTypeMetadata3;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v69 = a3;
  v73 = a2;
  v72 = a1;
  v68 = a5;
  v77 = a4[7];
  v6 = a4[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = AssociatedTypeWitness;
  v8 = sub_1A2AE39F4();
  v71 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v64[6] = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v64[31] = (char *)v64 - v12;
  v64[36] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v64[4] = (char *)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v64[15] = (char *)v64 - v15;
  v16 = a4[6];
  v17 = a4[3];
  v18 = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v64[11] = (char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v64[12] = (char *)v64 - v22;
  MEMORY[0x1E0C80A78](v21);
  v64[18] = (char *)v64 - v23;
  v24 = a4[5];
  v64[5] = a4;
  v25 = a4[2];
  v26 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v64[32] = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v64[29] = (char *)v64 - v27;
  v28 = sub_1A2AE39F4();
  v75 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v28);
  v64[23] = (char *)v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v64[25] = (char *)v64 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v64[13] = (char *)v64 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v64[7] = (char *)v64 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v64[9] = (char *)v64 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v64[10] = (char *)v64 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v64[17] = (char *)v64 - v42;
  v70 = *(_QWORD *)(v26 - 8);
  v43 = MEMORY[0x1E0C80A78](v41);
  v64[20] = (char *)v64 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v64[21] = (char *)v64 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v64[16] = (char *)v64 - v48;
  MEMORY[0x1E0C80A78](v47);
  v64[30] = (char *)v64 - v49;
  v50 = sub_1A2AE39F4();
  v74 = *(_QWORD *)(v50 - 8);
  v51 = MEMORY[0x1E0C80A78](v50);
  v64[22] = (char *)v64 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x1E0C80A78](v51);
  v64[24] = (char *)v64 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v64[27] = (char *)v64 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v64[28] = (char *)v64 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v64[14] = (char *)v64 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v64[8] = (char *)v64 - v62;
  MEMORY[0x1E0C80A78](v61);
  v64[19] = (char *)v64 - v63;
  v79 = v25;
  v80 = v17;
  v81 = v6;
  v82 = v26;
  v67 = v26;
  v83 = v24;
  v84 = v16;
  v85 = v77;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CE330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v3;
  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 288) = v6;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 104) = v2;
  *(_QWORD *)(v7 - 96) = v0;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CE35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v2;
  v7 = *(_QWORD *)(v6 - 184);
  *(_QWORD *)(v6 - 128) = v0;
  *(_QWORD *)(v6 - 120) = v7;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v5;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29CE380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v17 - 240) = a1;
  *(_QWORD *)(v17 - 232) = v12;
  *(_QWORD *)(v17 - 192) = v9;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v17 - 264) = TupleTypeMetadata3;
  *(_QWORD *)(v17 - 424) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  *(_QWORD *)(v17 - 360) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v17 - 408) = (char *)&a9 - v21;
  *(_QWORD *)(v17 - 344) = v15;
  *(_QWORD *)(v17 - 144) = v15;
  *(_QWORD *)(v17 - 136) = v13;
  *(_QWORD *)(v17 - 328) = v13;
  *(_QWORD *)(v17 - 312) = v10;
  *(_QWORD *)(v17 - 128) = v10;
  *(_QWORD *)(v17 - 120) = v14;
  *(_QWORD *)(v17 - 336) = v14;
  *(_QWORD *)(v17 - 320) = v11;
  *(_QWORD *)(v17 - 112) = v11;
  *(_QWORD *)(v17 - 104) = v16;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29CE44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata3;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD *)(v11 - 168);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v11 - 352) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v18 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v19 = MEMORY[0x1E0C80A78](v18);
  *(_QWORD *)(v11 - 416) = (char *)&a9 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&a9 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 208) + 16);
  v24 = *(_QWORD *)(v11 - 248);
  *(_QWORD *)(v11 - 256) = v9;
  v23((char *)&a9 - v21, v24, v9);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 200) + 16);
  v26 = &v22[*(int *)(TupleTypeMetadata3 + 48)];
  v27 = *(_QWORD *)(v11 - 224);
  *(_QWORD *)(v11 - 224) = v10;
  *(_QWORD *)(v11 - 248) = v25;
  v25(v26, v27, v10);
  v28 = *(int *)(TupleTypeMetadata3 + 64);
  *(_QWORD *)(v11 - 216) = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 272) + 16))(&v22[v28], *(_QWORD *)(v11 - 296), v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 16))(v15, *(_QWORD *)(v11 - 160), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29CE5B0 + dword_1A29D0274[EnumCaseMultiPayload]))();
}

void sub_1A29CE5C0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata3;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  *(_QWORD *)(v8 - 464) = *v4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE675118);
  *(_QWORD *)(v8 - 296) = v0;
  *(_QWORD *)(v8 - 664) = v1;
  v9 = v3;
  v12 = type metadata accessor for Deque(255, *(_QWORD *)(v8 - 384), v10, v11);
  v13 = *(_QWORD *)(v8 - 264);
  *(_QWORD *)(v8 - 584) = v12;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v15 = (char *)v4 + *(int *)(TupleTypeMetadata3 + 48);
  *(_QWORD *)(v8 - 488) = TupleTypeMetadata3;
  v16 = *(int *)(TupleTypeMetadata3 + 64);
  *(_QWORD *)(v8 - 392) = v5;
  v17 = *(_QWORD *)((char *)v4 + v16);
  v18 = *(int *)(v13 + 48);
  v19 = *(_QWORD *)(v8 - 408);
  v20 = v19 + v18;
  v21 = *(int *)(v13 + 64);
  v22 = v19 + v21;
  v23 = &v15[v18];
  v24 = &v15[v21];
  v25 = *(_QWORD *)(*(_QWORD *)(v8 - 232) - 8);
  *(_QWORD *)(v8 - 496) = v25;
  (*(void (**)(void))(v25 + 32))();
  v26 = *(_QWORD *)(*(_QWORD *)(v8 - 192) - 8);
  *(_QWORD *)(v8 - 504) = v26;
  v27 = *(void (**)(uint64_t, char *))(v26 + 32);
  *(_QWORD *)(v8 - 360) = v20;
  v28 = *(_QWORD *)(v8 - 216);
  v27(v20, v23);
  v29 = *(_QWORD *)(v8 - 240);
  v30 = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v8 - 512) = v30;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  *(_QWORD *)(v8 - 472) = v22;
  v31(v22, v24, v29);
  *(_QWORD *)(v8 - 152) = v17;
  v32 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v33 = *(_QWORD *)(v8 - 160);
  v34 = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 520) = v32;
  v32(v33, v34);
  swift_storeEnumTagMultiPayload();
  v35 = *(_QWORD *)(v8 - 416);
  v36 = v35 + *(int *)(v9 + 48);
  *(_QWORD *)(v8 - 480) = v9;
  v37 = v35 + *(int *)(v9 + 64);
  v38 = v28;
  v39 = *(_QWORD *)(v8 - 256);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 296);
  v40(v35, v38, v39);
  v41 = *(_QWORD *)(v8 - 224);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 - 248))(v36, *(_QWORD *)(v8 - 664), v41);
  v42 = v35;
  v43 = *(_QWORD *)(v8 - 168);
  *(_QWORD *)(v8 - 664) = v2;
  v2(v37, v7, v43);
  v44 = *(_QWORD *)(v8 - 280);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v42, 1, *(_QWORD *)(v8 - 368));
  *(_QWORD *)(v8 - 528) = v36;
  if (v46 == 1)
  {
    v47 = v36;
    v48 = v40;
    v49 = *(_QWORD *)(v8 - 376);
    v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    v51 = *(_QWORD *)(v8 - 288);
    if (v50(v47, 1, v51) == 1)
    {
      v52 = *(_QWORD *)(v8 - 400);
      v53 = *(_QWORD *)(v8 - 184);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v37, 1, v53) == 1)
      {
        swift_release();
        __break(1u);
      }
      else
      {
        v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
        v55 = *(_QWORD *)(v8 - 568);
        *(_QWORD *)(v8 - 448) = v54;
        v54(v55, v37, v53);
        v56 = *(_QWORD *)(v8 - 576);
        v48(v56, *(_QWORD *)(v8 - 408) + *(int *)(*(_QWORD *)(v8 - 232) + 76), *(_QWORD *)(v8 - 256));
        v57 = v45(v56, 1, *(_QWORD *)(v8 - 368));
        v58 = *(_QWORD *)(v8 - 616);
        if (v57 != 1)
        {
          (*(void (**)(_QWORD, _QWORD, uint64_t))(v8 - 248))(*(_QWORD *)(v8 - 616), *(_QWORD *)(v8 - 360) + *(int *)(*(_QWORD *)(v8 - 192) + 76), v41);
          if (v50(v58, 1, v51) != 1)
          {
            v59 = *(_QWORD *)(v8 - 400);
            v60 = *(_QWORD *)(v8 - 440);
            v61 = *(_QWORD *)(v8 - 568);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v60, v61, v53);
            v62 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56);
            *(_QWORD *)(v8 - 248) = v62;
            v62(v60, 0, 1, v53);
            v63 = *(_QWORD *)(v8 - 384);
            v64 = *(_QWORD *)(v8 - 456);
            v65 = v64 + *(int *)(v63 + 48);
            v66 = v64 + *(int *)(v63 + 64);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v8 - 280) + 32))(v64, *(_QWORD *)(v8 - 576), *(_QWORD *)(v8 - 368));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 376) + 32))(v65, v58, v51);
            v67 = *(_QWORD *)(v8 - 272);
            v68 = v66;
            v69 = *(_QWORD *)(v8 - 168);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v68, v60, v69);
            Deque.append(_:)(v64, *(_QWORD *)(v8 - 584));
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 432) + 8))(v64, v63);
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 - 352) + 8))(*(_QWORD *)(v8 - 216), *(_QWORD *)(v8 - 480));
            v70 = *(_QWORD *)(v8 - 472);
            v71 = v70 + *(int *)(*(_QWORD *)(v8 - 240) + 76);
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v71, v69);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 448))(v71, v61, v53);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 - 248))(v71, 0, 1, v53);
            v72 = *(_QWORD *)(v8 - 224);
            v73 = *(_QWORD *)(v8 - 256);
            v75 = *(_QWORD *)(v8 - 208);
            v74 = *(_QWORD *)(v8 - 200);
            v76 = *(_QWORD *)(v8 - 392);
            goto LABEL_14;
          }
LABEL_20:
          swift_release();
          __break(1u);
          JUMPOUT(0x1A29D01ECLL);
        }
      }
      swift_release();
      __break(1u);
      goto LABEL_20;
    }
    v96 = *(_QWORD *)(v8 - 608);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 248))(v96, v47, v41);
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 400) + 48))(v37, 1, *(_QWORD *)(v8 - 184)) == 1)
    {
      v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
      v98 = *(_QWORD *)(v8 - 544);
      v99 = *(_QWORD *)(v8 - 288);
      *(_QWORD *)(v8 - 184) = v97;
      v97(v98, v96, v99);
      v100 = *(_QWORD *)(v8 - 624);
      v48(v100, *(_QWORD *)(v8 - 408) + *(int *)(*(_QWORD *)(v8 - 232) + 76), *(_QWORD *)(v8 - 256));
      v101 = *(_QWORD *)(v8 - 368);
      if (v45(v100, 1, v101) != 1)
      {
        v102 = *(_QWORD *)(v8 - 472);
        v103 = v102 + *(int *)(*(_QWORD *)(v8 - 240) + 76);
        v104 = *(_QWORD *)(v8 - 384);
        v105 = *(_QWORD *)(v8 - 456);
        v106 = v105 + *(int *)(v104 + 48);
        v107 = v105 + *(int *)(v104 + 64);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 32))(v105, v100, v101);
        v108 = *(_QWORD *)(v8 - 376);
        v109 = v106;
        v110 = *(_QWORD *)(v8 - 544);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v109, v110, v99);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v8 - 664))(v107, v103, *(_QWORD *)(v8 - 168));
        Deque.append(_:)(v105, *(_QWORD *)(v8 - 584));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 432) + 8))(v105, v104);
        v70 = v102;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 - 352) + 8))(*(_QWORD *)(v8 - 216), *(_QWORD *)(v8 - 480));
        v74 = *(_QWORD *)(v8 - 200);
        v111 = *(_QWORD *)(v8 - 360) + *(int *)(*(_QWORD *)(v8 - 192) + 76);
        v72 = *(_QWORD *)(v8 - 224);
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v111, v72);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 184))(v111, v110, v99);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v111, 0, 1, v99);
        v73 = *(_QWORD *)(v8 - 256);
        v75 = *(_QWORD *)(v8 - 208);
        v76 = *(_QWORD *)(v8 - 392);
LABEL_14:
        (*(void (**)(_QWORD, uint64_t))(v74 + 8))(*(_QWORD *)(v8 - 528), v72);
        (*(void (**)(_QWORD, uint64_t))(v75 + 8))(*(_QWORD *)(v8 - 416), v73);
        v112 = *(_QWORD **)(v8 - 160);
        (*(void (**)(_QWORD *, uint64_t))(v8 - 520))(v112, v76);
        v113 = *(_QWORD *)(v8 - 488);
        v114 = (char *)v112 + *(int *)(v113 + 48);
        v115 = *(int *)(v113 + 64);
        *v112 = *(_QWORD *)(v8 - 464);
        v116 = *(_QWORD *)(v8 - 264);
        v117 = &v114[*(int *)(v116 + 48)];
        v118 = &v114[*(int *)(v116 + 64)];
        (*(void (**)(void))(*(_QWORD *)(v8 - 496) + 16))();
        (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v8 - 504) + 16))(v117, *(_QWORD *)(v8 - 360), *(_QWORD *)(v8 - 192));
        (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v8 - 512) + 16))(v118, v70, *(_QWORD *)(v8 - 240));
        *(_QWORD *)((char *)v112 + v115) = *(_QWORD *)(v8 - 152);
        swift_storeEnumTagMultiPayload();
        v119 = *(_QWORD *)(v8 - 328);
        *(_QWORD *)(v8 - 144) = *(_QWORD *)(v8 - 344);
        *(_QWORD *)(v8 - 136) = v119;
        v120 = *(_QWORD *)(v8 - 336);
        *(_QWORD *)(v8 - 128) = *(_QWORD *)(v8 - 312);
        *(_QWORD *)(v8 - 120) = v120;
        v121 = *(_QWORD *)(v8 - 176);
        *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 320);
        *(_QWORD *)(v8 - 104) = v121;
        type metadata accessor for CombineLatestStateMachine.ElementProducedAction();
      }
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, _QWORD))(v49 + 8))(v96, *(_QWORD *)(v8 - 288));
      __break(1u);
    }
    swift_release();
    __break(1u);
    JUMPOUT(0x1A29D023CLL);
  }
  v77 = *(_QWORD *)(v8 - 536);
  v40(v77, v42, v39);
  v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 376) + 48);
  v79 = *(_QWORD *)(v8 - 288);
  if (v78(v36, 1, v79) == 1)
  {
    v80 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 400) + 48))(v37, 1, *(_QWORD *)(v8 - 184));
    v81 = *(_QWORD *)(v8 - 448);
    v82 = *(_QWORD *)(v8 - 552);
    v83 = *(_QWORD *)(v8 - 560);
    if (v80 == 1)
    {
      v84 = v44;
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v86 = *(_QWORD *)(v8 - 368);
      v85(*(_QWORD *)(v8 - 448), v77, v86);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v83, v81, v86);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v8 - 248))(v82, *(_QWORD *)(v8 - 360) + *(int *)(*(_QWORD *)(v8 - 192) + 76), *(_QWORD *)(v8 - 224));
      if (v78(v82, 1, v79) != 1)
      {
        v87 = v82;
        v88 = v83;
        v89 = *(_QWORD *)(v8 - 472);
        v90 = v89 + *(int *)(v29 + 76);
        v91 = *(_QWORD *)(v8 - 384);
        v92 = *(_QWORD *)(v8 - 456);
        v93 = v92 + *(int *)(v91 + 48);
        v94 = v92 + *(int *)(v91 + 64);
        v85(v92, v88, v86);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 376) + 32))(v93, v87, v79);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v8 - 664))(v94, v90, *(_QWORD *)(v8 - 168));
        Deque.append(_:)(v92, *(_QWORD *)(v8 - 584));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 432) + 8))(v92, v91);
        v70 = v89;
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 - 352) + 8))(*(_QWORD *)(v8 - 216), *(_QWORD *)(v8 - 480));
        v95 = *(_QWORD *)(v8 - 408) + *(int *)(*(_QWORD *)(v8 - 232) + 76);
        v75 = *(_QWORD *)(v8 - 208);
        v73 = *(_QWORD *)(v8 - 256);
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v95, v73);
        v85(v95, *(_QWORD *)(v8 - 448), v86);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 56))(v95, 0, 1, v86);
        v72 = *(_QWORD *)(v8 - 224);
        v76 = *(_QWORD *)(v8 - 392);
        v74 = *(_QWORD *)(v8 - 200);
        goto LABEL_14;
      }
LABEL_17:
      swift_release();
      __break(1u);
      JUMPOUT(0x1A29D014CLL);
    }
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, _QWORD))(v44 + 8))(v77, *(_QWORD *)(v8 - 368));
    __break(1u);
  }
  swift_release();
  (*(void (**)(uint64_t, _QWORD))(v44 + 8))(v77, *(_QWORD *)(v8 - 368));
  __break(1u);
  goto LABEL_17;
}

void sub_1A29D0290(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  _QWORD v13[10];
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = a1;
  v3 = a2[7];
  v4 = a2[4];
  swift_getAssociatedTypeWitness();
  v20 = sub_1A2AE39F4();
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v18 = (char *)v13 - v5;
  v6 = a2[6];
  v7 = a2[3];
  swift_getAssociatedTypeWitness();
  v17 = sub_1A2AE39F4();
  v16 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v15 = (char *)v13 - v8;
  v9 = a2[5];
  v13[7] = a2;
  v10 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_1A2AE39F4();
  v13[9] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v13[8] = (char *)v13 - v12;
  v23 = v10;
  v24 = v7;
  v25 = v4;
  v26 = AssociatedTypeWitness;
  v22 = AssociatedTypeWitness;
  v27 = v9;
  v28 = v6;
  v29 = v3;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D0438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v0;
  *(_QWORD *)(v7 - 128) = v4;
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 232) = v3;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v6;
  *(_QWORD *)(v7 - 96) = v1;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D045C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v0;
  *(_QWORD *)(v7 - 128) = v4;
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 240) = v3;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v6;
  *(_QWORD *)(v7 - 96) = v1;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D0480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v17 - 168) = v13;
  *(_QWORD *)(v17 - 160) = v12;
  *(_QWORD *)(v17 - 176) = a1;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v17 - 184) = TupleTypeMetadata3;
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  *(_QWORD *)(v17 - 200) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v17 - 144) = v15;
  *(_QWORD *)(v17 - 136) = v9;
  *(_QWORD *)(v17 - 128) = v14;
  *(_QWORD *)(v17 - 120) = v11;
  *(_QWORD *)(v17 - 112) = v16;
  *(_QWORD *)(v17 - 104) = v10;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29D0510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 152), a1);
  *(_QWORD *)(v9 - 208) = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29D0574 + *((int *)qword_1A29D13A8 + EnumCaseMultiPayload)))();
}

unint64_t sub_1A29D0588()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(_QWORD *);
  void (*v22)(char *, char *);
  void (*v23)(_QWORD *, char *);
  void (*v24)(_QWORD *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;

  *(_QWORD *)(v4 - 320) = v1;
  *(_QWORD *)(v4 - 200) = *v3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE675118);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v8 = type metadata accessor for Deque(255, TupleTypeMetadata3, v6, v7);
  v9 = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v4 - 240) = v8;
  v10 = swift_getTupleTypeMetadata3();
  v11 = (char *)v3 + *(int *)(v10 + 48);
  v12 = *(_QWORD *)((char *)v3 + *(int *)(v10 + 64));
  v13 = *(int *)(v9 + 48);
  v14 = v0;
  v15 = (char *)v0 + v13;
  v16 = *(int *)(v9 + 64);
  v17 = (_QWORD *)((char *)v0 + v16);
  v18 = &v11[v13];
  v19 = &v11[v16];
  v20 = *(_QWORD *)(v4 - 160);
  v21 = *(void (**)(_QWORD *))(*(_QWORD *)(v20 - 8) + 32);
  *(_QWORD *)(v4 - 232) = v21;
  *(_QWORD *)(v4 - 224) = v12;
  v21(v0);
  v22 = *(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v4 - 168) - 8) + 32);
  *(_QWORD *)(v4 - 192) = v15;
  v22(v15, v18);
  v23 = *(void (**)(_QWORD *, char *))(*(_QWORD *)(*(_QWORD *)(v4 - 176) - 8) + 32);
  v23(v17, v19);
  v24 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v25 = *(_QWORD **)(v4 - 152);
  v26 = *(_QWORD *)(v4 - 208);
  v24(v25, v26);
  swift_storeEnumTagMultiPayload();
  v27 = v14;
  v28 = *(_QWORD *)(v4 - 216);
  if (v28)
  {
    v20 = *(_QWORD *)(v4 - 176);
    v27 = v17;
    if (v28 != 2)
    {
      v20 = *(_QWORD *)(v4 - 168);
      v27 = *(_QWORD **)(v4 - 192);
      if (v28 != 1)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1A29D138CLL);
      }
    }
  }
  *((_BYTE *)v27 + *(int *)(v20 + 80)) = 1;
  if (*((_BYTE *)v14 + *(int *)(*(_QWORD *)(v4 - 160) + 80)) == 1
    && *(_BYTE *)(*(_QWORD *)(v4 - 192) + *(int *)(*(_QWORD *)(v4 - 168) + 80)) == 1)
  {
    if (*((_BYTE *)v17 + *(int *)(*(_QWORD *)(v4 - 176) + 80)) == 1)
    {
      v29 = v17;
      v30 = *(_QWORD *)(v4 - 224);
      *(_QWORD *)(v4 - 144) = v30;
      MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, *(_QWORD *)(v4 - 240));
      v31 = sub_1A2AE38F8();
      v24(v25, v26);
      if ((v31 & 1) != 0)
      {
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        *v25 = v30;
        swift_storeEnumTagMultiPayload();
        swift_retain();
      }
      v40 = *(_QWORD *)(v4 - 320);
      v41 = *v14;
      v42 = **(_QWORD **)(v4 - 192);
      v43 = *v29;
      v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*v14)
      {
        v44 = sub_1A296D308(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v46 = v44[2];
        v45 = v44[3];
        if (v46 >= v45 >> 1)
          v44 = sub_1A296D308((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
        v44[2] = v46 + 1;
        v44[v46 + 4] = v41;
        v40 = *(_QWORD *)(v4 - 320);
      }
      if (v42)
      {
        v47 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = sub_1A296D308(0, v47[2] + 1, 1, v47);
        v44 = v47;
        v49 = v47[2];
        v48 = v47[3];
        if (v49 >= v48 >> 1)
          v44 = sub_1A296D308((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
        v44[2] = v49 + 1;
        v44[v49 + 4] = v42;
      }
      if (!v43)
        goto LABEL_43;
      goto LABEL_25;
    }
    if (*(_QWORD *)((char *)v25 + *(int *)(*(_QWORD *)(v4 - 312) + 68)) == 2)
    {
      v32 = v17;
      v33 = *(_QWORD *)(v4 - 224);
      *(_QWORD *)(v4 - 144) = v33;
      MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, *(_QWORD *)(v4 - 240));
      v34 = sub_1A2AE38F8();
      v24(v25, v26);
      if ((v34 & 1) != 0)
      {
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        *v25 = v33;
        swift_storeEnumTagMultiPayload();
        swift_retain();
      }
      v40 = *(_QWORD *)(v4 - 320);
      v56 = *v14;
      v57 = **(_QWORD **)(v4 - 192);
      v43 = *v32;
      v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*v14)
      {
        v44 = sub_1A296D308(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v59 = v44[2];
        v58 = v44[3];
        if (v59 >= v58 >> 1)
          v44 = sub_1A296D308((_QWORD *)(v58 > 1), v59 + 1, 1, v44);
        v44[2] = v59 + 1;
        v44[v59 + 4] = v56;
        v40 = *(_QWORD *)(v4 - 320);
      }
      if (v57)
      {
        v60 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v60 = sub_1A296D308(0, v60[2] + 1, 1, v60);
        v44 = v60;
        v62 = v60[2];
        v61 = v60[3];
        if (v62 >= v61 >> 1)
          v44 = sub_1A296D308((_QWORD *)(v61 > 1), v62 + 1, 1, v60);
        v44[2] = v62 + 1;
        v44[v62 + 4] = v57;
      }
      if (!v43)
        goto LABEL_43;
LABEL_25:
      v50 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = sub_1A296D308(0, v50[2] + 1, 1, v50);
      v51 = v50;
      v53 = v50[2];
      v52 = v50[3];
      if (v53 >= v52 >> 1)
        v51 = sub_1A296D308((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
      v51[2] = v53 + 1;
      v51[v53 + 4] = v43;
LABEL_43:
      swift_release();
      (*(void (**)(_QWORD *, _QWORD))(v40 + 8))(v14, *(_QWORD *)(v4 - 184));
      return *(_QWORD *)(v4 - 200);
    }
  }
  v24(v25, v26);
  v35 = (char *)v25 + *(int *)(v10 + 48);
  v36 = *(int *)(v10 + 64);
  *v25 = *(_QWORD *)(v4 - 200);
  v37 = *(_QWORD *)(v4 - 184);
  v38 = &v35[*(int *)(v37 + 48)];
  v39 = &v35[*(int *)(v37 + 64)];
  (*(void (**)(void))(v4 - 232))();
  ((void (*)(char *, _QWORD, _QWORD))v22)(v38, *(_QWORD *)(v4 - 192), *(_QWORD *)(v4 - 168));
  ((void (*)(char *, _QWORD *, _QWORD))v23)(v39, v17, *(_QWORD *)(v4 - 176));
  *(_QWORD *)((char *)v25 + v36) = *(_QWORD *)(v4 - 224);
  swift_storeEnumTagMultiPayload();
  return 0xF000000000000007;
}

void sub_1A29D13C4()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D1444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v0;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 232) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D1480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v0;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D14BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v17 - 176) = v14;
  *(_QWORD *)(v17 - 168) = v9;
  *(_QWORD *)(v17 - 208) = a1;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v17 - 160) = TupleTypeMetadata3;
  *(_QWORD *)(v17 - 240) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v20 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v17 - 216) = (char *)&a9 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  *(_QWORD *)(v17 - 192) = (char *)&a9 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)(v17 - 184) = (char *)&a9 - v25;
  *(_QWORD *)(v17 - 144) = v10;
  *(_QWORD *)(v17 - 136) = v13;
  *(_QWORD *)(v17 - 128) = v15;
  *(_QWORD *)(v17 - 120) = v16;
  *(_QWORD *)(v17 - 112) = v11;
  *(_QWORD *)(v17 - 104) = v12;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29D15A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 152), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29D1608 + *((int *)qword_1A29D20E8 + EnumCaseMultiPayload)))();
}

uint64_t sub_1A29D1620()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  id v33;
  void (*v34)(_QWORD *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t, uint64_t);
  void (*v44)(_QWORD *, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *, uint64_t);
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  *(_QWORD *)(v4 - 248) = *v3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE675118);
  sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  type metadata accessor for Deque(255, TupleTypeMetadata3, v6, v7);
  v8 = *(_QWORD *)(v4 - 160);
  v9 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata3() + 48);
  swift_release();
  v10 = *(int *)(v8 + 48);
  v11 = *(_QWORD *)(v4 - 184);
  v12 = v11 + v10;
  *(_QWORD *)(v4 - 256) = v11 + v10;
  v13 = *(int *)(v8 + 64);
  v14 = v11 + v13;
  *(_QWORD *)(v4 - 264) = v11 + v13;
  v15 = &v9[v10];
  v16 = &v9[v13];
  v17 = *(_QWORD *)(v4 - 168);
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v4 - 296) = v18;
  (*(void (**)(void))(v18 + 32))();
  v19 = *(_QWORD *)(v4 - 176);
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v4 - 232) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v12, v15, v19);
  v21 = *(_QWORD *)(v4 - 208);
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v4 - 224) = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v14, v16, v21);
  v23 = *(_QWORD **)(v4 - 152);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v23, v2);
  *v23 = *(_QWORD *)(v4 - 200);
  swift_storeEnumTagMultiPayload();
  v24 = (char *)v0 + *(int *)(v8 + 48);
  *(_QWORD *)(v4 - 272) = v24;
  v25 = (char *)v0 + *(int *)(v8 + 64);
  *(_QWORD *)(v4 - 280) = v25;
  v26 = *(_QWORD *)(v4 - 296);
  v27 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 16);
  *(_QWORD *)(v4 - 304) = v27;
  v27(v0, *(_QWORD *)(v4 - 184), v17);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 232) + 16);
  *(_QWORD *)(v4 - 312) = v28;
  v29 = *(_QWORD *)(v4 - 256);
  v28(v24, v29, v19);
  v30 = *(_QWORD *)(v4 - 192);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 224) + 16);
  *(_QWORD *)(v4 - 320) = v31;
  v32 = *(_QWORD *)(v4 - 264);
  v31(v25, v32, v21);
  *(_QWORD *)(v4 - 288) = *v0;
  v33 = *(id *)(v4 - 200);
  v34 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
  *(_QWORD *)(v4 - 200) = v34;
  v34(v0, v17);
  v35 = v30;
  v36 = (_QWORD *)(v30 + *(int *)(v8 + 48));
  v37 = v30 + *(int *)(v8 + 64);
  *(_QWORD *)(v4 - 296) = v37;
  v38 = *(_QWORD *)(v4 - 184);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 304);
  v39(v35, v38, v17);
  v40 = v29;
  v41 = *(_QWORD *)(v4 - 176);
  v42 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 - 312);
  v42(v36, v40, v41);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 - 320);
  v43(v37, v32, v21);
  *(_QWORD *)(v4 - 152) = *v36;
  v44 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 232) + 8);
  *(_QWORD *)(v4 - 232) = v44;
  v44(v36, v41);
  v45 = *(_QWORD *)(v4 - 216);
  v46 = (_QWORD *)(v45 + *(int *)(v8 + 48));
  v47 = (uint64_t *)(v45 + *(int *)(v8 + 64));
  v48 = *(_QWORD *)(v4 - 168);
  v39(v45, v38, v48);
  v42(v46, *(_QWORD *)(v4 - 256), v41);
  v43((uint64_t)v47, *(_QWORD *)(v4 - 264), v21);
  v49 = *v47;
  v50 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 224) + 8);
  v50(v47, v21);
  v51 = v46;
  v52 = *(_QWORD *)(v4 - 288);
  v53 = *(void (**)(uint64_t, uint64_t))(v4 - 232);
  v53((uint64_t)v51, v41);
  v54 = v45;
  v55 = v48;
  v56 = v48;
  v57 = *(void (**)(uint64_t, uint64_t))(v4 - 200);
  v57(v54, v56);
  v50(*(uint64_t **)(v4 - 296), v21);
  v57(*(_QWORD *)(v4 - 192), v55);
  v50(*(uint64_t **)(v4 - 280), v21);
  v53(*(_QWORD *)(v4 - 272), v41);
  if (!v52)
  {
    v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v61 = *(_QWORD *)(v4 - 240);
    v62 = *(_QWORD *)(v4 - 152);
    if (!v62)
      goto LABEL_12;
    goto LABEL_7;
  }
  v58 = sub_1A296D308(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v60 = v58[2];
  v59 = v58[3];
  v61 = *(_QWORD *)(v4 - 240);
  if (v60 >= v59 >> 1)
    v58 = sub_1A296D308((_QWORD *)(v59 > 1), v60 + 1, 1, v58);
  v62 = *(_QWORD *)(v4 - 152);
  v58[2] = v60 + 1;
  v58[v60 + 4] = v52;
  if (v62)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_1A296D308(0, v58[2] + 1, 1, v58);
    v64 = v58[2];
    v63 = v58[3];
    if (v64 >= v63 >> 1)
      v58 = sub_1A296D308((_QWORD *)(v63 > 1), v64 + 1, 1, v58);
    v58[2] = v64 + 1;
    v58[v64 + 4] = v62;
  }
LABEL_12:
  if (v49)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_1A296D308(0, v58[2] + 1, 1, v58);
    v66 = v58[2];
    v65 = v58[3];
    if (v66 >= v65 >> 1)
      v58 = sub_1A296D308((_QWORD *)(v65 > 1), v66 + 1, 1, v58);
    v58[2] = v66 + 1;
    v58[v66 + 4] = v49;
  }
  (*(void (**)(_QWORD, _QWORD))(v61 + 8))(*(_QWORD *)(v4 - 184), *(_QWORD *)(v4 - 160));
  return *(_QWORD *)(v4 - 248);
}

void sub_1A29D2104()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D2180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 232) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v0;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v4;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D21BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v5;
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v6 - 112) = v0;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v4;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D21F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v17 - 192) = v11;
  *(_QWORD *)(v17 - 184) = v9;
  *(_QWORD *)(v17 - 208) = a1;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v17 - 160) = TupleTypeMetadata3;
  *(_QWORD *)(v17 - 200) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v19 = MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v20 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v17 - 216) = (char *)&a9 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  *(_QWORD *)(v17 - 168) = (char *)&a9 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)(v17 - 176) = (char *)&a9 - v25;
  *(_QWORD *)(v17 - 144) = v14;
  *(_QWORD *)(v17 - 136) = v16;
  *(_QWORD *)(v17 - 128) = v12;
  *(_QWORD *)(v17 - 120) = v10;
  *(_QWORD *)(v17 - 112) = v13;
  *(_QWORD *)(v17 - 104) = v15;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29D22E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 152), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29D2344 + dword_1A29D2E84[EnumCaseMultiPayload]))();
}

unint64_t sub_1A29D2358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v8 = v3 + *(int *)(TupleTypeMetadata3 + 48);
  v9 = v3 + *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v5 - 152), v1);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  return 0xF000000000000007;
}

void sub_1A29D2EA0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[25];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = a3;
  v21 = a1;
  v4 = a2[5];
  v5 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = a2[6];
  v23 = a2[3];
  swift_getAssociatedTypeWitness();
  v8 = a2[7];
  v9 = a2[4];
  swift_getAssociatedTypeWitness();
  v19[16] = sub_1A2AE39F4();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v20 = sub_1A2AE39F4();
  v19[12] = *(_QWORD *)(v20 - 8);
  v11 = MEMORY[0x1E0C80A78](v20);
  v19[14] = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v19[15] = (char *)v19 - v14;
  v15 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  v19[23] = TupleTypeMetadata3;
  v19[24] = v15;
  v16 = MEMORY[0x1E0C80A78](v13);
  v19[11] = (char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19[13] = (char *)v19 - v18;
  v24 = v5;
  v25 = v23;
  v26 = v9;
  v27 = AssociatedTypeWitness;
  v19[19] = AssociatedTypeWitness;
  v28 = v4;
  v29 = v7;
  v30 = v8;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D3070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 128) = v6;
  *(_QWORD *)(v7 - 120) = v0;
  *(_QWORD *)(v7 - 280) = v0;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D3098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 128) = v6;
  *(_QWORD *)(v7 - 120) = v0;
  *(_QWORD *)(v7 - 112) = v4;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v2;
  type metadata accessor for CombineLatestStateMachine.State.Upstream();
}

void sub_1A29D30B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata3;
  uint64_t v18;

  *(_QWORD *)(v16 - 256) = a1;
  *(_QWORD *)(v16 - 248) = v9;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v16 - 240) = TupleTypeMetadata3;
  MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  *(_QWORD *)(v16 - 272) = (char *)&a9 - v18;
  *(_QWORD *)(v16 - 200) = v12;
  *(_QWORD *)(v16 - 192) = v14;
  *(_QWORD *)(v16 - 144) = v12;
  *(_QWORD *)(v16 - 136) = v10;
  *(_QWORD *)(v16 - 128) = v15;
  *(_QWORD *)(v16 - 120) = v13;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 112) = v14;
  *(_QWORD *)(v16 - 104) = v11;
  type metadata accessor for CombineLatestStateMachine.State();
}

uint64_t sub_1A29D3130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&a9 - v12, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_1A29D3188 + dword_1A29D3E64[EnumCaseMultiPayload]))();
}

void sub_1A29D3198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata3;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_1A2AE39F4();
  v5 = *(_QWORD *)(v3 - 160);
  v6 = *(_QWORD *)(v3 - 200);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v8 = v0 + *(int *)(TupleTypeMetadata3 + 48);
  v9 = v0 + *(int *)(TupleTypeMetadata3 + 64);
  v10 = *(_QWORD *)(v3 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, v0, v6);
  v11 = swift_getTupleTypeMetadata3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v10 + *(int *)(v11 + 48), v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v10 + *(int *)(v11 + 64), v9, v4);
  *(_QWORD *)(v3 - 144) = v6;
  *(_QWORD *)(v3 - 136) = v5;
  v12 = *(_QWORD *)(v3 - 184);
  *(_QWORD *)(v3 - 128) = v2;
  *(_QWORD *)(v3 - 120) = v12;
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 192);
  *(_QWORD *)(v3 - 104) = v1;
  type metadata accessor for CombineLatestStateMachine.NextAction();
}

uint64_t sub_1A29D3274()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata accessor for CombineLatestStateMachine.ElementProducedAction()
{
  JUMPOUT(0x1A8589544);
}

unint64_t sub_1A29D3E8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE67BCF8[0];
  if (!qword_1EE67BCF8[0])
  {
    v1 = sub_1A2AE36B8();
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, qword_1EE67BCF8);
  }
  return result;
}

void type metadata accessor for CombineLatestStateMachine.NextAction()
{
  JUMPOUT(0x1A8589544);
}

uint64_t *sub_1A29D3EE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1A29D3F1C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

id sub_1A29D3F1C(uint64_t a1, uint64_t a2)
{
  id result;

  if (a2 < 0)
    return (id)(a2 & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void sub_1A29D3F2C(uint64_t *a1)
{
  sub_1A29D3F38(*a1, a1[1]);
}

void sub_1A29D3F38(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)

}

uint64_t *sub_1A29D3F48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1A29D3F1C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1A29D3F38(v5, v6);
  return a1;
}

uint64_t *sub_1A29D3F8C(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1A29D3F38(v3, v4);
  return a1;
}

uint64_t sub_1A29D3FC4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFF);
  v3 = (((*(_QWORD *)(a1 + 8) >> 49) >> 14) | (2
                                                           * ((*(_QWORD *)(a1 + 8) >> 49) & 0x3800 | ((*(_QWORD *)(a1 + 8) & 7) << 8) | HIBYTE(*(_QWORD *)a1) & 0xF0 | *(_QWORD *)a1 & 0xF))) ^ 0x7FFF;
  if (v3 >= 0x7FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1A29D403C(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x7FFE)
  {
    *(_QWORD *)result = a2 - 0x7FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3FFF | ((-a2 & 0x7FFF) << 14);
      *(_QWORD *)result = (v3 | (v3 << 56)) & 0xF00000000000000FLL;
      *(_QWORD *)(result + 8) = ((v3 >> 8) | (v3 << 49)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A29D40A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 63;
}

uint64_t sub_1A29D40B4(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_1A29D40C4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF0uLL;
  result[1] = v2;
  return result;
}

void type metadata accessor for CombineLatestStateMachine.ChildTaskSuspendedAction()
{
  JUMPOUT(0x1A8589544);
}

_QWORD *sub_1A29D40E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A29D9F00(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1A29D40F4);
}

uint64_t sub_1A29D40F4()
{
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A29D4120()
{
  return sub_1A29D4130();
}

uint64_t sub_1A29D4130()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1A29D415C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A29D9F5C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1A29D40F4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A29D4130);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *sub_1A29D4184(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29D9FC8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A29D4130);
}

void type metadata accessor for CombineLatestStateMachine.UpstreamFinishedAction()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29D41A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  int v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  result = sub_1A2AE4084();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v4;
  }
  return result;
}

_QWORD *sub_1A29D42E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id *v37;
  unsigned int v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(id *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  const void *v59;
  _QWORD *v60;
  size_t __n;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v71;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 80) | v5;
  v10 = swift_getAssociatedTypeWitness();
  v11 = v7;
  v12 = v10;
  v13 = *(_QWORD *)(v10 - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = v9 | *(_DWORD *)(v13 + 80);
  v17 = v16 & 0xF8 | 7u;
  v18 = ~v17;
  v19 = *(unsigned int *)(v4 + 84);
  v20 = *(unsigned int *)(v7 + 84);
  if (v20 <= v19)
    v21 = *(_DWORD *)(v4 + 84);
  else
    v21 = *(_DWORD *)(v7 + 84);
  v22 = v14 - 1;
  if (!v14)
    v22 = 0;
  if (v22 <= v21)
    v23 = v21;
  else
    v23 = v22;
  v24 = *(_QWORD *)(v4 + 64) + v8;
  v25 = *(_QWORD *)(v7 + 64) + v15;
  if (v14)
    v27 = *(_QWORD *)(v13 + 64);
  else
    v27 = *(_QWORD *)(v13 + 64) + 1;
  v26 = (v25 + (v24 & ~v8)) & ~v15;
  v28 = v26 + v27;
  if (v23)
    v29 = v26 + v27;
  else
    v29 = v28 + 1;
  if (v29 <= 8)
    v30 = 8;
  else
    v30 = v29;
  if ((v16 & 0x1000F8) == 0 && v30 + ((v17 + 8) & (unint64_t)~v17) + 1 <= 0x18)
  {
    v34 = v8;
    v35 = v4;
    v68 = a1;
    v69 = v6;
    *a1 = *a2;
    v36 = (_QWORD *)(((unint64_t)a1 + v17 + 8) & v18);
    v37 = (id *)(((unint64_t)a2 + v17 + 8) & v18);
    v38 = *((unsigned __int8 *)v37 + v30);
    if (v38 >= 2)
    {
      if (v30 <= 3)
        v39 = v30;
      else
        v39 = 4;
      __asm { BR              X15 }
    }
    if (v38 == 1)
    {
      v40 = *v37;
      v41 = *v37;
      *v36 = v40;
      *((_BYTE *)v36 + v30) = 1;
      return v68;
    }
    v42 = ~v15;
    v66 = v25;
    v67 = v12;
    v63 = v23;
    __n = v27;
    v64 = ~v34;
    v65 = ~v15;
    if (v23)
    {
      if ((_DWORD)v19 == v23)
      {
        v43 = v11;
        v44 = *(uint64_t (**)(id *, uint64_t, uint64_t))(v4 + 48);
        v45 = AssociatedTypeWitness;
        v46 = v26 + v27;
        v47 = v44(v37, v19, v45);
        v28 = v46;
        v33 = v68;
        if (!v47)
          goto LABEL_47;
      }
      else
      {
        v50 = v23;
        v71 = v36;
        v51 = v26 + v27;
        v52 = ((unint64_t)v37 + v24) & ~v34;
        v45 = AssociatedTypeWitness;
        if ((_DWORD)v20 == v50)
        {
          v43 = v11;
          v53 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v52, v20, v69);
          v33 = v68;
          v28 = v51;
          v36 = v71;
          if (!v53)
          {
LABEL_47:
            v55 = v36;
            v56 = v28;
            (*(void (**)(_QWORD *, id *, uint64_t))(v35 + 16))(v55, v37, v45);
            v57 = ((unint64_t)v55 + v24) & v64;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 16))(v57, ((unint64_t)v37 + v24) & v64, v69);
            v58 = (void *)((v66 + v57) & v65);
            v59 = (const void *)((v66 + (((unint64_t)v37 + v24) & v64)) & v65);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v59, 1, v67))
            {
              memcpy(v58, v59, __n);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v58, v59, v67);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v58, 0, 1, v67);
            }
            v60 = v55;
            if (!v63)
              *((_BYTE *)v55 + v56) = 0;
            goto LABEL_54;
          }
        }
        else
        {
          v43 = v11;
          v54 = (*(uint64_t (**)(unint64_t))(v13 + 48))((v25 + v52) & v42);
          v33 = v68;
          v28 = v51;
          v36 = v71;
          if (v54 < 2)
            goto LABEL_47;
        }
      }
    }
    else
    {
      v43 = v11;
      v45 = AssociatedTypeWitness;
      v33 = v68;
      if (!*((_BYTE *)v37 + v28))
        goto LABEL_47;
      v48 = (*((unsigned __int8 *)v37 + v28) - 1) << (8 * v28);
      if (v28 > 3)
        v48 = 0;
      if ((_DWORD)v28)
      {
        if (v28 <= 3)
          v49 = v26 + v27;
        else
          v49 = 4;
        __asm { BR              X11 }
      }
      if (v48 == -1)
        goto LABEL_47;
    }
    memcpy(v36, v37, v29);
    v60 = v36;
LABEL_54:
    *((_BYTE *)v60 + v30) = 0;
    return v33;
  }
  v32 = *a2;
  *a1 = *a2;
  v33 = (_QWORD *)(v32 + ((v17 + 16) & v18));
  swift_retain();
  return v33;
}

void sub_1A29D477C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = ((v7 | v4) | *(_DWORD *)(v9 + 80)) & 0xF8 | 7u;
  v12 = *(_DWORD *)(v9 + 80);
  v13 = (id *)((a1 + v11 + 8) & ~v11);
  v14 = *(unsigned int *)(v3 + 84);
  v15 = *(unsigned int *)(v6 + 84);
  if (v15 <= v14)
    v16 = *(_DWORD *)(v3 + 84);
  else
    v16 = *(_DWORD *)(v6 + 84);
  v17 = v10 - 1;
  if (!v10)
    v17 = 0;
  if (v17 <= v16)
    v17 = v16;
  v18 = *(_QWORD *)(v3 + 64) + v7;
  v19 = *(_QWORD *)(v6 + 64) + v12;
  v20 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v20;
  v21 = v20 + ((v19 + (v18 & ~(unint64_t)v7)) & ~v12);
  if (v17)
    v22 = v20 + ((v19 + (v18 & ~(unint64_t)v7)) & ~v12);
  else
    v22 = v21 + 1;
  if (v22 <= 8)
    v22 = 8;
  v23 = *((unsigned __int8 *)v13 + v22);
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X2 }
  }
  if (v23 == 1)
  {

    return;
  }
  v25 = ~(unint64_t)v7;
  v26 = ~v12;
  v30 = v26;
  if (v17)
  {
    if ((_DWORD)v14 == v17)
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v3 + 48))(v13, v14, AssociatedTypeWitness))
        return;
    }
    else
    {
      v29 = ((unint64_t)v13 + v18) & v25;
      if ((_DWORD)v15 == v17)
      {
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v29, v15, v5))
          return;
      }
      else if ((*(unsigned int (**)(unint64_t))(v9 + 48))((v19 + v29) & v26) >= 2)
      {
        return;
      }
    }
    goto LABEL_40;
  }
  if (!*((_BYTE *)v13 + v21))
    goto LABEL_40;
  v27 = (*((unsigned __int8 *)v13 + v21) - 1) << (8 * v21);
  if (v21 > 3)
    v27 = 0;
  if ((_DWORD)v21)
  {
    if (v21 <= 3)
      v28 = v21;
    else
      v28 = 4;
    __asm { BR              X11 }
  }
  if (v27 == -1)
  {
LABEL_40:
    (*(void (**)(id *, uint64_t))(v3 + 8))(v13, AssociatedTypeWitness);
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v13 + v18) & v25, v5);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v19 + (((unint64_t)v13 + v18) & v25)) & v30, 1, v8))(*(void (**)(unint64_t, uint64_t))(v9 + 8))((v19 + (((unint64_t)v13 + v18) & v25)) & v30, v8);
  }
}

_QWORD *sub_1A29D4AD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  const void *v40;
  _QWORD *result;
  size_t __n;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  _QWORD *v49;
  _QWORD *__dst;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v47 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v47 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_DWORD *)(v6 + 80) | v5;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = (v8 | *(_DWORD *)(v10 + 80)) & 0xF8 | 7u;
  v49 = a1;
  __dst = (_QWORD *)(((unint64_t)a1 + v13 + 8) & ~v13);
  v14 = (id *)(((unint64_t)a2 + v13 + 8) & ~v13);
  v15 = *(unsigned int *)(v4 + 84);
  v16 = *(unsigned int *)(v6 + 84);
  if (v16 <= v15)
    v17 = *(_DWORD *)(v4 + 84);
  else
    v17 = *(_DWORD *)(v6 + 84);
  v18 = v11 - 1;
  if (!v11)
    v18 = 0;
  if (v18 <= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v4 + 64) + v7;
  v21 = *(_QWORD *)(v6 + 64) + v12;
  if (v11)
    v23 = *(_QWORD *)(v10 + 64);
  else
    v23 = *(_QWORD *)(v10 + 64) + 1;
  v22 = (v21 + (v20 & ~v7)) & ~v12;
  v24 = v22 + v23;
  if (v19)
    v25 = v22 + v23;
  else
    v25 = v24 + 1;
  if (v25 <= 8)
    v26 = 8;
  else
    v26 = v25;
  v27 = *((unsigned __int8 *)v14 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X15 }
  }
  if (v27 == 1)
  {
    v29 = *v14;
    v30 = *v14;
    v31 = __dst;
    *__dst = v29;
    v32 = 1;
LABEL_48:
    result = v49;
    goto LABEL_49;
  }
  v33 = ~v12;
  v45 = v33;
  v46 = v9;
  __n = v23;
  v43 = v22 + v23;
  v44 = ~v7;
  if (!v19)
  {
    v31 = __dst;
    if (!*((_BYTE *)v14 + v24))
      goto LABEL_41;
    v34 = (*((unsigned __int8 *)v14 + v24) - 1) << (8 * v24);
    if (v24 > 3)
      v34 = 0;
    if ((_DWORD)v24)
    {
      if (v24 <= 3)
        v35 = v22 + v23;
      else
        v35 = 4;
      __asm { BR              X11 }
    }
    if (v34 == -1)
      goto LABEL_41;
    goto LABEL_47;
  }
  if ((_DWORD)v15 == v19)
  {
    v31 = __dst;
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v4 + 48))(v14, v15, AssociatedTypeWitness))
      goto LABEL_41;
LABEL_47:
    memcpy(v31, v14, v25);
    v32 = 0;
    goto LABEL_48;
  }
  v36 = ((unint64_t)v14 + v20) & ~v7;
  v31 = __dst;
  if ((_DWORD)v16 != v19)
  {
    if ((*(unsigned int (**)(unint64_t))(v10 + 48))((v21 + v36) & v33) < 2)
      goto LABEL_41;
    goto LABEL_47;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v36, v16, v47))
    goto LABEL_47;
LABEL_41:
  (*(void (**)(void *, id *, uint64_t))(v4 + 16))(v31, v14, AssociatedTypeWitness);
  v37 = ((unint64_t)v31 + v20) & v44;
  v38 = ((unint64_t)v14 + v20) & v44;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v37, v38, v47);
  v39 = (void *)((v21 + v37) & v45);
  v40 = (const void *)((v21 + v38) & v45);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v40, 1, v46))
  {
    memcpy(v39, v40, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v39, v40, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v46);
  }
  result = v49;
  v31 = __dst;
  v32 = 0;
  if (!v19)
    *((_BYTE *)__dst + v43) = 0;
LABEL_49:
  *((_BYTE *)v31 + v26) = v32;
  return result;
}

_QWORD *sub_1A29D4EB4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  id v37;
  id v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  size_t v49;
  unsigned int v50;
  size_t __n;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v3 = a1;
  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v61 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v61 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = ((v8 | v6) | *(_DWORD *)(v10 + 80)) & 0xF8 | 7u;
  v12 = (id *)(((unint64_t)v3 + v11 + 8) & ~v11);
  v13 = (id *)(((unint64_t)a2 + v11 + 8) & ~v11);
  if (v12 != v13)
  {
    v58 = AssociatedTypeWitness;
    v59 = v9;
    v14 = v8;
    v15 = *(_DWORD *)(v10 + 80);
    v16 = *(unsigned int *)(v5 + 84);
    v17 = *(_DWORD *)(v7 + 84);
    v52 = v17;
    if (v17 <= v16)
      v17 = *(_DWORD *)(v5 + 84);
    v18 = *(_DWORD *)(v10 + 84);
    v19 = v18 - 1;
    if (!v18)
      v19 = 0;
    if (v19 <= v17)
      v20 = v17;
    else
      v20 = v19;
    v50 = *(_DWORD *)(v10 + 84);
    v57 = *(_QWORD *)(v5 + 64);
    v55 = *(_QWORD *)(v7 + 64) + v15;
    if (v18)
      v22 = *(_QWORD *)(v10 + 64);
    else
      v22 = *(_QWORD *)(v10 + 64) + 1;
    v21 = (v55 + ((v57 + v8) & ~(unint64_t)v8)) & ~v15;
    v23 = v21 + v22;
    if (v20)
      v24 = v21 + v22;
    else
      v24 = v23 + 1;
    if (v24 <= 8)
      v25 = 8;
    else
      v25 = v24;
    v26 = *((unsigned __int8 *)v12 + v25);
    if (v26 >= 2)
    {
      if (v25 <= 3)
        v27 = v25;
      else
        v27 = 4;
      __asm { BR              X13 }
    }
    v56 = ~(unint64_t)v8;
    v53 = v21 + v22;
    v54 = ~v15;
    v60 = v3;
    v49 = v22;
    __n = v24;
    if (v26 == 1)
    {
      v28 = v20;

      goto LABEL_45;
    }
    if (v20)
    {
      if ((_DWORD)v16 == v20)
      {
        v28 = v20;
        v29 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(v5 + 48))(v12, v16, v58);
      }
      else
      {
        v32 = ((unint64_t)v12 + v8 + v57) & v56;
        v28 = v20;
        if (v52 != v20)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))((v55 + v32) & v54, v18, v59) >= 2)goto LABEL_45;
          goto LABEL_43;
        }
        v29 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v7 + 48))(v32, v52, v61);
      }
      if (v29)
        goto LABEL_45;
    }
    else
    {
      v28 = 0;
      if (*((_BYTE *)v12 + v23))
      {
        v30 = (*((unsigned __int8 *)v12 + v23) - 1) << (8 * v23);
        if (v23 > 3)
          v30 = 0;
        if ((_DWORD)v23)
        {
          if (v23 <= 3)
            v31 = v21 + v22;
          else
            v31 = 4;
          __asm { BR              X11 }
        }
        if (v30 != -1)
        {
LABEL_45:
          v34 = *((unsigned __int8 *)v13 + v25);
          if (v34 >= 2)
          {
            if (v25 <= 3)
              v35 = v25;
            else
              v35 = 4;
            __asm { BR              X12 }
          }
          v36 = v28;
          v3 = v60;
          if (v34 == 1)
          {
            v37 = *v13;
            v38 = *v13;
            *v12 = v37;
            v39 = 1;
LABEL_73:
            *((_BYTE *)v12 + v25) = v39;
            return v3;
          }
          if (!v36)
          {
            v41 = v59;
            if (*((_BYTE *)v13 + v53))
            {
              v42 = (*((unsigned __int8 *)v13 + v53) - 1) << (8 * v53);
              if (v53 > 3)
                v42 = 0;
              if ((_DWORD)v53)
              {
                if (v53 <= 3)
                  v43 = v53;
                else
                  v43 = 4;
                __asm { BR              X11 }
              }
              if (v42 != -1)
                goto LABEL_66;
            }
            goto LABEL_70;
          }
          if ((_DWORD)v16 == v36)
          {
            v40 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(v5 + 48))(v13, v16, v58);
          }
          else
          {
            v44 = ((unint64_t)v13 + v14 + v57) & v56;
            if (v52 != v36)
            {
              v41 = v59;
              if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))((v55 + v44) & v54, v50, v59) >= 2)goto LABEL_66;
              goto LABEL_70;
            }
            v40 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v7 + 48))(v44, v52, v61);
          }
          v41 = v59;
          if (v40)
          {
LABEL_66:
            memcpy(v12, v13, __n);
            v39 = 0;
            goto LABEL_73;
          }
LABEL_70:
          (*(void (**)(id *, id *, uint64_t))(v5 + 16))(v12, v13, v58);
          v45 = ((unint64_t)v13 + v14 + v57) & v56;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v12 + v14 + v57) & v56, v45, v61);
          v46 = (void *)((v55 + (((unint64_t)v12 + v14 + v57) & v56)) & v54);
          v47 = (const void *)((v55 + v45) & v54);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v47, 1, v41))
          {
            memcpy(v46, v47, v49);
            v39 = 0;
            if (v36)
              goto LABEL_73;
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v46, v47, v41);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v46, 0, 1, v41);
            v39 = 0;
            if (v36)
              goto LABEL_73;
          }
          *((_BYTE *)v12 + v53) = 0;
          goto LABEL_73;
        }
      }
    }
LABEL_43:
    (*(void (**)(id *, uint64_t))(v5 + 8))(v12, v58);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v8 + v57) & v56, v61);
    v33 = (v55 + (((unint64_t)v12 + v8 + v57) & v56)) & v54;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v33, 1, v59))
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v33, v59);
    goto LABEL_45;
  }
  return v3;
}

_QWORD *sub_1A29D54E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  size_t __n;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *__dst;
  uint64_t v54;
  uint64_t AssociatedTypeWitness;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v54 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v54 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_DWORD *)(v6 + 80) | v5;
  v9 = swift_getAssociatedTypeWitness();
  result = a1;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_DWORD *)(v11 + 80);
  v14 = (v8 | *(_DWORD *)(v11 + 80)) & 0xF8 | 7u;
  v15 = (_QWORD *)(((unint64_t)a1 + v14 + 8) & ~v14);
  v16 = (_QWORD *)(((unint64_t)a2 + v14 + 8) & ~v14);
  v17 = *(unsigned int *)(v4 + 84);
  v18 = *(unsigned int *)(v6 + 84);
  if (v18 <= v17)
    v19 = *(_DWORD *)(v4 + 84);
  else
    v19 = *(_DWORD *)(v6 + 84);
  v20 = v12 - 1;
  if (!v12)
    v20 = 0;
  if (v20 <= v19)
    v21 = v19;
  else
    v21 = v20;
  v22 = *(_QWORD *)(v4 + 64) + v7;
  v23 = *(_QWORD *)(v6 + 64) + v13;
  if (v12)
    v25 = *(_QWORD *)(v11 + 64);
  else
    v25 = *(_QWORD *)(v11 + 64) + 1;
  v24 = (v23 + (v22 & ~v7)) & ~v13;
  v26 = v24 + v25;
  if (v21)
    v27 = v24 + v25;
  else
    v27 = v26 + 1;
  if (v27 <= 8)
    v28 = 8;
  else
    v28 = v27;
  v29 = *((unsigned __int8 *)v16 + v28);
  if (v29 >= 2)
  {
    if (v28 <= 3)
      v30 = v28;
    else
      v30 = 4;
    __asm { BR              X15 }
  }
  if (v29 == 1)
  {
    *v15 = *v16;
    v31 = 1;
    goto LABEL_48;
  }
  v32 = ~v7;
  v33 = ~v13;
  v52 = result;
  __dst = v15;
  v50 = v33;
  v51 = v9;
  __n = v25;
  v49 = ~v7;
  if (!v21)
  {
    if (!*((_BYTE *)v16 + v26))
      goto LABEL_41;
    v36 = (*((unsigned __int8 *)v16 + v26) - 1) << (8 * v26);
    if (v26 > 3)
      v36 = 0;
    if ((_DWORD)v26)
    {
      if (v26 <= 3)
        v37 = v26;
      else
        v37 = 4;
      __asm { BR              X11 }
    }
    if (v36 == -1)
      goto LABEL_41;
    goto LABEL_47;
  }
  if ((_DWORD)v17 == v21)
  {
    v34 = v26;
    v35 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v4 + 48))(v16, v17, AssociatedTypeWitness);
    v26 = v34;
    v15 = __dst;
    if (!v35)
      goto LABEL_41;
LABEL_47:
    memcpy(v15, v16, v27);
    result = v52;
    v15 = __dst;
    v31 = 0;
    goto LABEL_48;
  }
  v38 = v26;
  v39 = ((unint64_t)v16 + v22) & v32;
  if ((_DWORD)v18 != v21)
  {
    v41 = (*(uint64_t (**)(unint64_t))(v11 + 48))((v23 + v39) & v33);
    v15 = __dst;
    v26 = v38;
    if (v41 < 2)
      goto LABEL_41;
    goto LABEL_47;
  }
  v40 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v39, v18, v54);
  v15 = __dst;
  v26 = v38;
  if (v40)
    goto LABEL_47;
LABEL_41:
  v42 = v26;
  v43 = v15;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 32))(v15, v16, AssociatedTypeWitness);
  v44 = ((unint64_t)v43 + v22) & v49;
  v45 = ((unint64_t)v16 + v22) & v49;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v44, v45, v54);
  v46 = (void *)((v23 + v44) & v50);
  v47 = (const void *)((v23 + v45) & v50);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v47, 1, v51))
  {
    memcpy(v46, v47, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v46, v47, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v46, 0, 1, v51);
  }
  result = v52;
  v15 = __dst;
  v31 = 0;
  if (!v21)
    *((_BYTE *)__dst + v42) = 0;
LABEL_48:
  *((_BYTE *)v15 + v28) = v31;
  return result;
}

_QWORD *sub_1A29D58C4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  const void *v44;
  size_t v46;
  unsigned int v47;
  size_t __n;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t AssociatedTypeWitness;

  v3 = a1;
  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v57 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v57 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((v7 | v5) | *(_DWORD *)(v9 + 80)) & 0xF8 | 7u;
  v11 = (id *)(((unint64_t)v3 + v10 + 8) & ~v10);
  v12 = (id *)(((unint64_t)a2 + v10 + 8) & ~v10);
  if (v11 != v12)
  {
    v13 = v7;
    v14 = *(_DWORD *)(v9 + 80);
    v15 = *(unsigned int *)(v4 + 84);
    v16 = *(_DWORD *)(v6 + 84);
    v49 = v16;
    if (v16 <= v15)
      v16 = *(_DWORD *)(v4 + 84);
    v17 = *(_DWORD *)(v9 + 84);
    v18 = v17 - 1;
    if (!v17)
      v18 = 0;
    if (v18 <= v16)
      v19 = v16;
    else
      v19 = v18;
    v47 = *(_DWORD *)(v9 + 84);
    v54 = *(_QWORD *)(v4 + 64);
    v55 = v8;
    v52 = *(_QWORD *)(v6 + 64) + v14;
    if (v17)
      v21 = *(_QWORD *)(v9 + 64);
    else
      v21 = *(_QWORD *)(v9 + 64) + 1;
    v20 = (v52 + ((v54 + v7) & ~(unint64_t)v7)) & ~v14;
    v22 = v20 + v21;
    if (v19)
      v23 = v20 + v21;
    else
      v23 = v22 + 1;
    if (v23 <= 8)
      v24 = 8;
    else
      v24 = v23;
    v25 = *((unsigned __int8 *)v11 + v24);
    if (v25 >= 2)
    {
      if (v24 <= 3)
        v26 = v24;
      else
        v26 = 4;
      __asm { BR              X13 }
    }
    v53 = ~(unint64_t)v7;
    v50 = v20 + v21;
    v51 = ~v14;
    v56 = v3;
    v46 = v21;
    __n = v23;
    if (v25 == 1)
    {
      v27 = v19;

      goto LABEL_45;
    }
    if (v19)
    {
      if ((_DWORD)v15 == v19)
      {
        v27 = v19;
        v28 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(v4 + 48))(v11, v15, AssociatedTypeWitness);
      }
      else
      {
        v31 = ((unint64_t)v11 + v7 + v54) & v53;
        v27 = v19;
        if (v49 != v19)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v52 + v31) & v51, v17, v55) >= 2)goto LABEL_45;
          goto LABEL_43;
        }
        v28 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v6 + 48))(v31, v49, v57);
      }
      if (v28)
        goto LABEL_45;
    }
    else
    {
      v27 = 0;
      if (*((_BYTE *)v11 + v22))
      {
        v29 = (*((unsigned __int8 *)v11 + v22) - 1) << (8 * v22);
        if (v22 > 3)
          v29 = 0;
        if ((_DWORD)v22)
        {
          if (v22 <= 3)
            v30 = v20 + v21;
          else
            v30 = 4;
          __asm { BR              X11 }
        }
        if (v29 != -1)
        {
LABEL_45:
          v33 = *((unsigned __int8 *)v12 + v24);
          if (v33 >= 2)
          {
            if (v24 <= 3)
              v34 = v24;
            else
              v34 = 4;
            __asm { BR              X12 }
          }
          v35 = v27;
          v3 = v56;
          if (v33 == 1)
          {
            *v11 = *v12;
            v36 = 1;
LABEL_73:
            *((_BYTE *)v11 + v24) = v36;
            return v3;
          }
          if (!v35)
          {
            v38 = v55;
            if (*((_BYTE *)v12 + v50))
            {
              v39 = (*((unsigned __int8 *)v12 + v50) - 1) << (8 * v50);
              if (v50 > 3)
                v39 = 0;
              if ((_DWORD)v50)
              {
                if (v50 <= 3)
                  v40 = v50;
                else
                  v40 = 4;
                __asm { BR              X11 }
              }
              if (v39 != -1)
                goto LABEL_66;
            }
            goto LABEL_70;
          }
          if ((_DWORD)v15 == v35)
          {
            v37 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(v4 + 48))(v12, v15, AssociatedTypeWitness);
          }
          else
          {
            v41 = ((unint64_t)v12 + v13 + v54) & v53;
            if (v49 != v35)
            {
              v38 = v55;
              if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v52 + v41) & v51, v47, v55) >= 2)goto LABEL_66;
              goto LABEL_70;
            }
            v37 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v6 + 48))(v41, v49, v57);
          }
          v38 = v55;
          if (v37)
          {
LABEL_66:
            memcpy(v11, v12, __n);
            v36 = 0;
            goto LABEL_73;
          }
LABEL_70:
          (*(void (**)(id *, id *, uint64_t))(v4 + 32))(v11, v12, AssociatedTypeWitness);
          v42 = ((unint64_t)v12 + v13 + v54) & v53;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v13 + v54) & v53, v42, v57);
          v43 = (void *)((v52 + (((unint64_t)v11 + v13 + v54) & v53)) & v51);
          v44 = (const void *)((v52 + v42) & v51);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v44, 1, v38))
          {
            memcpy(v43, v44, v46);
            v36 = 0;
            if (v35)
              goto LABEL_73;
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v43, v44, v38);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, 0, 1, v38);
            v36 = 0;
            if (v35)
              goto LABEL_73;
          }
          *((_BYTE *)v11 + v50) = 0;
          goto LABEL_73;
        }
      }
    }
LABEL_43:
    (*(void (**)(id *, uint64_t))(v4 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v7 + v54) & v53, v57);
    v32 = (v52 + (((unint64_t)v11 + v7 + v54) & v53)) & v51;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v32, 1, v55))
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v32, v55);
    goto LABEL_45;
  }
  return v3;
}

uint64_t sub_1A29D5EE4(_QWORD *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) > v5)
    v5 = *(_DWORD *)(v6 + 84);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  v11 = (v10 | v5) == 0;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v9)
    ++v11;
  v13 = v11
      + v12
      + ((((*(_QWORD *)(v4 + 64) + *(_DWORD *)(v6 + 80)) & ~(unint64_t)*(_DWORD *)(v6 + 80))
        + *(_QWORD *)(v6 + 64)
        + v8) & ~(unint64_t)v8);
  if (v13 <= 8)
    v13 = 8;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_11;
  v16 = ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80)) | v8) & 0xF8 | 7u;
  v17 = v13 + ((v16 + 8) & ~v16) + 1;
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_16;
  v20 = (a2 - 0x7FFFFFFF + ~(-1 << v18)) >> v18;
  if (v20 > 0xFFFE)
  {
    v19 = *(_DWORD *)((char *)a1 + v17);
    if (!v19)
      goto LABEL_11;
    goto LABEL_25;
  }
  if (v20 <= 0xFE)
  {
    if (!v20)
      goto LABEL_11;
LABEL_16:
    v19 = *((unsigned __int8 *)a1 + v17);
    if (!*((_BYTE *)a1 + v17))
      goto LABEL_11;
    goto LABEL_25;
  }
  v19 = *(unsigned __int16 *)((char *)a1 + v17);
  if (!*(_WORD *)((char *)a1 + v17))
  {
LABEL_11:
    v14 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
LABEL_25:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 > 3)
      LODWORD(v17) = 4;
    __asm { BR              X11 }
  }
  return v21 ^ 0x80000000;
}

void sub_1A29D610C(_BYTE *a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  int v23;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = 0u;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v10 + 80);
  v11 = *(_DWORD *)(v10 + 84);
  v13 = v11 - 1;
  if (!v11)
    v13 = 0;
  v14 = (v13 | v7) == 0;
  v15 = v11 == 0;
  v16 = (((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v8 + 80)) & ~(unint64_t)*(_DWORD *)(v8 + 80))
       + *(_QWORD *)(v8 + 64)
       + *(_DWORD *)(v10 + 80)) & ~(unint64_t)*(_DWORD *)(v10 + 80);
  v17 = *(_QWORD *)(v10 + 64);
  v18 = ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) | v12) & 0xF8 | 7u;
  v19 = (v18 + 8) & ~v18;
  if (v15)
    ++v14;
  v20 = v14 + v17 + v16;
  if (v20 <= 8)
    v20 = 8;
  v21 = v20 + v19 + 1;
  if (a3 < 0)
  {
    if (v21 > 3)
    {
      v9 = 1u;
      if (a2 < 0)
      {
LABEL_20:
        if (v21 < 4)
        {
          if ((_DWORD)v21)
          {
            v23 = a2 & ~(-1 << (8 * v21));
            bzero(a1, v21);
            if ((_DWORD)v21 == 3)
            {
              *(_WORD *)a1 = v23;
              a1[2] = BYTE2(v23);
            }
            else if ((_DWORD)v21 == 2)
            {
              *(_WORD *)a1 = v23;
            }
            else
            {
              *a1 = v23;
            }
          }
        }
        else
        {
          bzero(a1, v21);
          *(_DWORD *)a1 = a2 ^ 0x80000000;
        }
        __asm { BR              X10 }
      }
LABEL_18:
      __asm { BR              X10 }
    }
    v22 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v21))) >> (8 * v21);
    if (v22 > 0xFFFE)
    {
      v9 = 4u;
      if (a2 < 0)
        goto LABEL_20;
      goto LABEL_18;
    }
    if (v22 >= 0xFF)
      v9 = 2;
    else
      v9 = v22 != 0;
  }
  if (a2 < 0)
    goto LABEL_20;
  goto LABEL_18;
}

void sub_1A29D638C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1A29D62C8);
}

void sub_1A29D6394()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A29D62C8);
}

void sub_1A29D639C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1A29D62C8);
}

uint64_t sub_1A29D63A8(int a1, id a2, uint64_t a3)
{
  id v3;

  if (a3 < 0)
    v3 = a2;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A29D63F4(uint64_t a1)
{
  return sub_1A29D6404(*(_QWORD *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_1A29D6404(int a1, id a2, uint64_t a3)
{
  if (a3 < 0)
  {

    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

_QWORD *sub_1A29D6460(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1A29D63A8(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *sub_1A29D64B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1A29D63A8(*a2, v4, v5);
  v7 = *a1;
  v8 = (void *)a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1A29D6404(v7, v8, v9);
  return a1;
}

_QWORD *sub_1A29D6514(_QWORD *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;

  v3 = *a1;
  v5 = (void *)a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  sub_1A29D6404(v3, v5, v4);
  return a1;
}

uint64_t sub_1A29D6550(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 16) >> 50) >> 13) | (2
                                                            * ((*(_QWORD *)(a1 + 16) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 16) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1A29D65CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x3FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1A29D6640(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t sub_1A29D664C(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_1A29D665C(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[2] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[2] = v2;
  return result;
}

void type metadata accessor for CombineLatestStateMachine.UpstreamThrewAction()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29D6688()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = sub_1A2AE39F4();
      if (v5 > 0x3F)
      {
        return v4;
      }
      else
      {
        swift_getTupleTypeLayout3();
        v10 = &v9;
        v11 = MEMORY[0x1E0DE9D18] + 64;
        swift_getAssociatedTypeWitness();
        swift_getAssociatedTypeWitness();
        swift_getAssociatedTypeWitness();
        sub_1A2AE39F4();
        swift_getTupleTypeMetadata3();
        sub_1A2AE39F4();
        __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
        v0 = sub_1A2AE4084();
        if (v6 <= 0x3F)
        {
          swift_getTupleTypeLayout2();
          v12 = &v8;
          v13 = "\b";
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return v0;
}

_QWORD *sub_1A29D6864(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *result;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  const void *v52;
  _QWORD *v53;
  void **v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  id v58;
  char v59;
  uint64_t v60;
  size_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  const void *v70;
  size_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;

  v4 = a3[2];
  v6 = a3[3];
  v5 = a3[4];
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v91 = *(_DWORD *)(v8 + 80);
  v80 = *(_QWORD *)(v7 + 64) + v91;
  v83 = v8;
  v9 = *(_QWORD *)(v5 - 8);
  v89 = *(_DWORD *)(v9 + 80);
  v82 = *(_QWORD *)(v8 + 64);
  v85 = v9;
  v10 = *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v10;
  __n = v10;
  v11 = v10
      + ((v82 + v89 + (v80 & ~(unint64_t)v91)) & ~(unint64_t)v89);
  v81 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v84 = v6;
  v76 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v76 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 80) | v13;
  v86 = v5;
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v20 = *(_DWORD *)(v18 + 80);
  v21 = v16 | *(_DWORD *)(v18 + 80);
  v22 = v21 & 0xF8 | 7u;
  v23 = *(unsigned int *)(v12 + 84);
  v24 = *(unsigned int *)(v14 + 84);
  if (v24 <= v23)
    v25 = *(_DWORD *)(v12 + 84);
  else
    v25 = *(_DWORD *)(v14 + 84);
  v26 = v19 - 1;
  if (!v19)
    v26 = 0;
  if (v26 <= v25)
    v27 = v25;
  else
    v27 = v26;
  v77 = v12;
  v28 = *(_QWORD *)(v12 + 64) + v15;
  v75 = v14;
  v29 = *(_QWORD *)(v14 + 64) + v20;
  if (v19)
    v31 = *(_QWORD *)(v18 + 64);
  else
    v31 = *(_QWORD *)(v18 + 64) + 1;
  v30 = (v29 + (v28 & ~v15)) & ~v20;
  v32 = v30 + v31;
  if (v27)
    v33 = v30 + v31;
  else
    v33 = v32 + 1;
  if (v33 <= 8)
    v34 = 8;
  else
    v34 = v33;
  v35 = v34 + ((v22 + 8) & ~v22);
  if (v11 <= v35 + 1)
    v36 = v35 + 1;
  else
    v36 = v11;
  if (v36 <= 8)
    v37 = 8;
  else
    v37 = v36;
  v38 = v21 | v89 | v91 | *(_DWORD *)(v7 + 80);
  if ((v38 & 0x1000F8) != 0 || (unint64_t)(v37 + 1) > 0x18)
  {
    v41 = *a2;
    *a1 = *a2;
    v42 = (_QWORD *)(v41 + (((v38 & 0xF8 | 7u) + 16) & ~(unint64_t)(v38 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v39 = v7;
    v44 = ~(unint64_t)v91;
    v45 = ~(unint64_t)v89;
    v46 = ~v22;
    v47 = ~v15;
    v48 = ~v20;
    v42 = a1;
    switch(*((_BYTE *)a2 + v37))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v39 + 16))(a1, a2, v81);
        v49 = ((unint64_t)a1 + v80) & v44;
        v50 = ((unint64_t)a2 + v80) & v44;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v83 + 16))(v49, v50, v84);
        v51 = (void *)((v49 + v82 + v89) & v45);
        v52 = (const void *)((v50 + v82 + v89) & v45);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v85 + 48))(v52, 1, v86))
        {
          memcpy(v51, v52, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v85 + 16))(v51, v52, v86);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v51, 0, 1, v86);
        }
        *((_BYTE *)a1 + v37) = 0;
        return v42;
      case 1:
        *a1 = *a2;
        *((_BYTE *)a1 + v37) = 1;
        swift_bridgeObjectRetain();
        return v42;
      case 2:
        *a1 = *a2;
        v53 = (_QWORD *)(((unint64_t)a1 + v22 + 8) & v46);
        v54 = (void **)(((unint64_t)a2 + v22 + 8) & v46);
        v55 = *((unsigned __int8 *)v54 + v34);
        if (v55 >= 2)
        {
          if (v34 <= 3)
            v56 = v34;
          else
            v56 = 4;
          __asm { BR              X14 }
        }
        if (v55 == 1)
        {
          v57 = *v54;
          v58 = v57;
          *v53 = v57;
          v59 = 1;
          goto LABEL_72;
        }
        v72 = v27;
        v73 = v29;
        v74 = v17;
        v90 = v47;
        v92 = v48;
        if (!v27)
        {
          v60 = v28;
          if (*((_BYTE *)v54 + v32))
          {
            v63 = (*((unsigned __int8 *)v54 + v32) - 1) << (8 * v32);
            if (v32 > 3)
              v63 = 0;
            if ((_DWORD)v32)
            {
              if (v32 <= 3)
                v64 = v30 + v31;
              else
                v64 = 4;
              __asm { BR              X11 }
            }
            if (v63 != -1)
              goto LABEL_63;
          }
          goto LABEL_67;
        }
        if ((_DWORD)v23 == v27)
        {
          v60 = v28;
          v61 = v30 + v31;
          v62 = (*(uint64_t (**)(void **, uint64_t, uint64_t))(v77 + 48))(v54, v23, AssociatedTypeWitness);
        }
        else
        {
          v65 = v27;
          v61 = v30 + v31;
          v60 = v28;
          v66 = ((unint64_t)v54 + v28) & v47;
          if ((_DWORD)v24 != v65)
          {
            v67 = (*(uint64_t (**)(unint64_t))(v18 + 48))((v29 + v66) & v48);
            v32 = v61;
            if (v67 >= 2)
              goto LABEL_63;
            goto LABEL_67;
          }
          v62 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v75 + 48))(v66, v24, v76);
        }
        v32 = v61;
        if (v62)
        {
LABEL_63:
          memcpy(v53, v54, v33);
          v59 = 0;
          goto LABEL_72;
        }
LABEL_67:
        v71 = v32;
        (*(void (**)(_QWORD *, void **, uint64_t))(v77 + 16))(v53, v54, AssociatedTypeWitness);
        v68 = ((unint64_t)v54 + v60) & v90;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v75 + 16))(((unint64_t)v53 + v60) & v90, v68, v76);
        v69 = (void *)((v73 + (((unint64_t)v53 + v60) & v90)) & v92);
        v70 = (const void *)((v73 + v68) & v92);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v70, 1, v74))
        {
          memcpy(v69, v70, v31);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v69, v70, v74);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v69, 0, 1, v74);
        }
        v59 = 0;
        if (!v72)
          *((_BYTE *)v53 + v71) = 0;
LABEL_72:
        *((_BYTE *)v53 + v34) = v59;
        *((_BYTE *)a1 + v37) = 2;
        break;
      case 3:
        *a1 = *a2;
        *((_BYTE *)a1 + v37) = 3;
        return v42;
      default:
        if (v37 <= 3)
          v40 = v37;
        else
          v40 = 4;
        __asm { BR              X16 }
        return result;
    }
  }
  return v42;
}

void sub_1A29D6F14(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(unint64_t, uint64_t);
  id *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t AssociatedTypeWitness;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = a2[3];
  v62 = *(_QWORD *)(a2[2] - 8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v63 = *(_QWORD *)(v62 + 64) + v5;
  v69 = v5;
  v6 = v63 & ~v5;
  v65 = v4;
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 8);
  v66 = *(_QWORD *)(v4 + 64);
  v70 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v66 + v70 + v6) & ~v70;
  v68 = v8;
  v10 = *(_QWORD *)(v8 + 64);
  if (!*(_DWORD *)(v8 + 84))
    ++v10;
  v11 = v10 + v9;
  v64 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v67 = v3;
  v60 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v60 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 80) | v13;
  v17 = v7;
  v18 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  v21 = *(_DWORD *)(v19 + 80);
  v22 = v16 | *(_DWORD *)(v19 + 80);
  v23 = v12;
  v24 = v22 & 0xF8 | 7u;
  v25 = *(unsigned int *)(v12 + 84);
  v26 = *(_DWORD *)(v14 + 84);
  if (v26 <= v25)
    v27 = *(_DWORD *)(v12 + 84);
  else
    v27 = *(_DWORD *)(v14 + 84);
  v28 = v20 - 1;
  if (!v20)
    v28 = 0;
  if (v28 <= v27)
    v28 = v27;
  v29 = *(_QWORD *)(v12 + 64) + v15;
  v30 = *(_QWORD *)(v14 + 64) + v21;
  v31 = *(_QWORD *)(v19 + 64);
  if (!v20)
    ++v31;
  v32 = v31 + ((v30 + (v29 & ~v15)) & ~v21);
  if (v28)
    v33 = v31 + ((v30 + (v29 & ~v15)) & ~v21);
  else
    v33 = v32 + 1;
  v34 = 8;
  if (v33 <= 8)
    v33 = 8;
  v35 = v33 + ((v24 + 8) & ~v24);
  if (v11 <= v35 + 1)
    v36 = v35 + 1;
  else
    v36 = v11;
  if (v36 > 8)
    v34 = v36;
  v37 = *(unsigned __int8 *)(a1 + v34);
  v39 = ~v24;
  v40 = ~v15;
  v41 = ~v21;
  switch(v37)
  {
    case 0:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 8))(a1, v64, v40);
      v42 = (v63 + a1) & ~v69;
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v42, v67);
      v43 = (v42 + v66 + v70) & ~v70;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v68 + 48))(v43, 1, v7))
        return;
      v44 = *(void (**)(unint64_t, uint64_t))(v68 + 8);
      goto LABEL_30;
    case 1:
      swift_bridgeObjectRelease();
      return;
    case 2:
      v45 = (id *)((a1 + v24 + 8) & v39);
      v46 = *((unsigned __int8 *)v45 + v33);
      if (v46 >= 2)
      {
        if (v33 <= 3)
          v47 = v33;
        else
          v47 = 4;
        __asm { BR              X17 }
      }
      if (v46 == 1)
      {

        return;
      }
      if (v28)
      {
        if ((_DWORD)v25 == v28)
        {
          v48 = v40;
          v49 = v18;
          v50 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(v23 + 48))(v45, v25, AssociatedTypeWitness);
          v40 = v48;
          v18 = v49;
        }
        else
        {
          v53 = v40;
          v54 = ((unint64_t)v45 + v29) & v40;
          if (v26 != v28)
          {
            v56 = v18;
            v57 = (*(uint64_t (**)(unint64_t))(v19 + 48))((v30 + v54) & v41);
            v18 = v56;
            v40 = v53;
            if (v57 >= 2)
              return;
            goto LABEL_56;
          }
          v55 = v18;
          v50 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v14 + 48))(v54, *(unsigned int *)(v14 + 84), v60);
          v18 = v55;
          v40 = v53;
        }
      }
      else
      {
        if (!*((_BYTE *)v45 + v32))
          goto LABEL_56;
        v51 = (*((unsigned __int8 *)v45 + v32) - 1) << (8 * v32);
        if (v32 > 3)
          v51 = 0;
        if ((_DWORD)v32)
        {
          if (v32 <= 3)
            v52 = v32;
          else
            v52 = 4;
          __asm { BR              X11 }
        }
        v50 = v51 + 1;
      }
      if (v50)
        return;
LABEL_56:
      v17 = v18;
      v58 = v40;
      (*(void (**)(id *, uint64_t))(v23 + 8))(v45, AssociatedTypeWitness);
      v59 = ((unint64_t)v45 + v29) & v58;
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v59, v60);
      v43 = (v30 + v59) & v41;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v43, 1, v17))
      {
        v44 = *(void (**)(unint64_t, uint64_t))(v19 + 8);
LABEL_30:
        v44(v43, v17);
      }
      return;
    case 3:
      return;
    default:
      if (v39 <= 3)
        v38 = v39;
      else
        v38 = 4;
      __asm { BR              X3 }
      return;
  }
}

_QWORD *sub_1A29D7474(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  const void *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void **v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  void *v58;
  uint64_t v59;
  id v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  void *v75;
  const void *v76;
  _QWORD *result;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v5 = a3[2];
  v7 = a3[3];
  v6 = a3[4];
  v88 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v89 = *(_QWORD *)(v88 + 64) + v9;
  v96 = v9;
  v10 = v89 & ~v9;
  v91 = v8;
  v11 = *(_QWORD *)(v6 - 8);
  v92 = *(_QWORD *)(v8 + 64);
  v97 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v92 + v97 + v10) & ~v97;
  v94 = v11;
  v13 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  __n = v13;
  v14 = v13 + v12;
  v90 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v93 = v7;
  v84 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v84 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = *(_DWORD *)(v17 + 80) | v16;
  v95 = v6;
  v20 = a2;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = (v19 | *(_DWORD *)(v22 + 80)) & 0xF8 | 7u;
  v26 = *(unsigned int *)(v15 + 84);
  v27 = *(unsigned int *)(v17 + 84);
  if (v27 <= v26)
    v28 = *(_DWORD *)(v15 + 84);
  else
    v28 = *(_DWORD *)(v17 + 84);
  v29 = v23 - 1;
  if (!v23)
    v29 = 0;
  if (v29 <= v28)
    v30 = v28;
  else
    v30 = v29;
  v85 = v15;
  v31 = *(_QWORD *)(v15 + 64) + v18;
  v83 = v17;
  v32 = *(_QWORD *)(v17 + 64) + v24;
  if (v23)
    v34 = *(_QWORD *)(v22 + 64);
  else
    v34 = *(_QWORD *)(v22 + 64) + 1;
  v33 = (v32 + (v31 & ~v18)) & ~v24;
  v35 = v33 + v34;
  if (v30)
    v36 = v33 + v34;
  else
    v36 = v35 + 1;
  if (v36 <= 8)
    v37 = 8;
  else
    v37 = v36;
  v38 = v37 + ((v25 + 8) & ~v25);
  if (v14 <= v38 + 1)
    v39 = v38 + 1;
  else
    v39 = v14;
  if (v39 <= 8)
    v40 = 8;
  else
    v40 = v39;
  v41 = *((unsigned __int8 *)a2 + v40);
  v43 = ~v96;
  v44 = ~v97;
  v45 = ~v25;
  v46 = ~v24;
  switch(v41)
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16))(a1, v20, v90);
      v47 = ((unint64_t)a1 + v89) & v43;
      v48 = ((unint64_t)v20 + v89) & v43;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v91 + 16))(v47, v48, v93);
      v49 = (void *)((v47 + v92 + v97) & v44);
      v50 = (const void *)((v48 + v92 + v97) & v44);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v94 + 48))(v50, 1, v95))
      {
        memcpy(v49, v50, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v94 + 16))(v49, v50, v95);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v49, 0, 1, v95);
      }
      *((_BYTE *)a1 + v40) = 0;
      return a1;
    case 1:
      *a1 = *v20;
      *((_BYTE *)a1 + v40) = 1;
      swift_bridgeObjectRetain();
      return a1;
    case 2:
      *a1 = *v20;
      v51 = (char *)a1 + v25;
      v52 = (char *)v20 + v25;
      v53 = (_QWORD *)((unint64_t)(v51 + 8) & v45);
      v54 = (void **)((unint64_t)(v52 + 8) & v45);
      v55 = *((unsigned __int8 *)v54 + v37);
      if (v55 >= 2)
      {
        if (v37 <= 3)
          v56 = v37;
        else
          v56 = 4;
        __asm { BR              X14 }
      }
      if (v55 == 1)
      {
        v58 = *v54;
        v59 = v37;
        v60 = v58;
        *v53 = v58;
        v61 = 1;
        goto LABEL_67;
      }
      v79 = v34;
      v81 = v21;
      v82 = v37;
      v98 = v46;
      v80 = v32;
      if (!v30)
      {
        v62 = ~v18;
        v63 = v31;
        if (!*((_BYTE *)v54 + v35))
          goto LABEL_59;
        v67 = (*((unsigned __int8 *)v54 + v35) - 1) << (8 * v35);
        if (v35 > 3)
          v67 = 0;
        if ((_DWORD)v35)
        {
          if (v35 <= 3)
            v68 = v35;
          else
            v68 = 4;
          __asm { BR              X11 }
        }
        v66 = v67 + 1;
        goto LABEL_65;
      }
      if ((_DWORD)v26 == v30)
      {
        v62 = ~v18;
        v63 = v31;
        v64 = v30;
        v65 = v35;
        v66 = (*(uint64_t (**)(void **, uint64_t, uint64_t))(v85 + 48))(v54, v26, AssociatedTypeWitness);
        v35 = v65;
        v30 = v64;
        goto LABEL_65;
      }
      v69 = v35;
      v63 = v31;
      v62 = ~v18;
      v70 = ((unint64_t)v54 + v31) & ~v18;
      v71 = v30;
      if ((_DWORD)v27 == v30)
      {
        v66 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v83 + 48))(v70, v27, v84);
        v30 = v71;
        v35 = v69;
LABEL_65:
        if (v66)
          goto LABEL_66;
        goto LABEL_59;
      }
      v72 = (*(uint64_t (**)(unint64_t))(v22 + 48))((v32 + v70) & v46);
      v30 = v71;
      v35 = v69;
      if (v72 >= 2)
      {
LABEL_66:
        memcpy(v53, v54, v36);
        v61 = 0;
        v59 = v82;
        goto LABEL_67;
      }
LABEL_59:
      v78 = v35;
      v73 = v30;
      (*(void (**)(_QWORD *, void **, uint64_t))(v85 + 16))(v53, v54, AssociatedTypeWitness);
      v74 = ((unint64_t)v54 + v63) & v62;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v83 + 16))(((unint64_t)v53 + v63) & v62, v74, v84);
      v75 = (void *)((v80 + (((unint64_t)v53 + v63) & v62)) & v98);
      v76 = (const void *)((v80 + v74) & v98);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v76, 1, v81))
      {
        memcpy(v75, v76, v79);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v75, v76, v81);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v75, 0, 1, v81);
      }
      v59 = v82;
      v61 = 0;
      if (!v73)
        *((_BYTE *)v53 + v78) = 0;
LABEL_67:
      *((_BYTE *)v53 + v59) = v61;
      v57 = 2;
LABEL_68:
      *((_BYTE *)a1 + v40) = v57;
      return a1;
    case 3:
      *a1 = *v20;
      v57 = 3;
      goto LABEL_68;
    default:
      if (v40 <= 3)
        v42 = v40;
      else
        v42 = 4;
      __asm { BR              X16 }
      return result;
  }
}

_QWORD *sub_1A29D7ADC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  size_t v52;
  uint64_t v53;
  _QWORD *v54;
  id *v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  id v60;
  id v61;
  char v62;
  int v63;
  int v64;
  unint64_t v65;
  void *v66;
  const void *v67;
  _QWORD *result;
  unsigned int v69;
  size_t v70;
  unsigned int v71;
  size_t __n;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t AssociatedTypeWitness;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = a3[2];
  v6 = a3[3];
  v7 = a3[4];
  v85 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v86 = *(_QWORD *)(v85 + 64) + v9;
  v93 = v9;
  v10 = v86 & ~v9;
  v88 = v8;
  v11 = *(_QWORD *)(v7 - 8);
  v89 = *(_QWORD *)(v8 + 64);
  v96 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v89 + v96 + v10) & ~v96;
  v91 = v11;
  v13 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  __n = v13;
  v14 = v13 + v12;
  v87 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v90 = v6;
  v76 = swift_getAssociatedTypeWitness();
  v17 = v3;
  v18 = *(_QWORD *)(v76 - 8);
  v19 = *(_DWORD *)(v18 + 80);
  v20 = *(_DWORD *)(v18 + 80) | v16;
  v92 = v7;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = (v20 | *(_DWORD *)(v22 + 80)) & 0xF8 | 7u;
  v26 = *(unsigned int *)(v15 + 84);
  v27 = *(_DWORD *)(v18 + 84);
  v71 = v27;
  if (v27 <= v26)
    v27 = *(_DWORD *)(v15 + 84);
  v28 = v23 - 1;
  if (!v23)
    v28 = 0;
  if (v28 <= v27)
    v29 = v27;
  else
    v29 = v28;
  v69 = *(_DWORD *)(v22 + 84);
  v30 = v18;
  v3 = v17;
  v80 = *(_QWORD *)(v15 + 64) + v19;
  v81 = v15;
  v73 = v30;
  v75 = *(_QWORD *)(v30 + 64) + v24;
  if (v23)
    v31 = *(_QWORD *)(v22 + 64);
  else
    v31 = *(_QWORD *)(v22 + 64) + 1;
  v83 = v29;
  v77 = ((v75 + (v80 & ~v19)) & ~v24) + v31;
  if (v29)
    v32 = ((v75 + (v80 & ~v19)) & ~v24) + v31;
  else
    v32 = ((v75 + (v80 & ~v19)) & ~v24) + v31 + 1;
  v70 = v32;
  if (v32 <= 8)
    v33 = 8;
  else
    v33 = v32;
  v34 = v33 + ((v25 + 8) & ~v25);
  if (v14 <= v34 + 1)
    v35 = v34 + 1;
  else
    v35 = v14;
  if (v35 <= 8)
    v36 = 8;
  else
    v36 = v35;
  v78 = v21;
  v84 = ~v93;
  v94 = ~v96;
  v38 = ~v25;
  v79 = ~v19;
  v74 = ~v24;
  switch(*((_BYTE *)v3 + v36))
  {
    case 0:
      (*(void (**)(_QWORD *, uint64_t))(v85 + 8))(v3, v87);
      (*(void (**)(unint64_t, uint64_t))(v88 + 8))(((unint64_t)v3 + v86) & v84, v90);
      v39 = ((((unint64_t)v3 + v86) & v84) + v89 + v96) & v94;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v91 + 48))(v39, 1, v92))
        (*(void (**)(unint64_t, uint64_t))(v91 + 8))(v39, v92);
      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 2:
      v40 = (id *)(((unint64_t)v3 + v25 + 8) & v38);
      v41 = *((unsigned __int8 *)v40 + v33);
      if (v41 >= 2)
      {
        if (v33 <= 3)
          v42 = v33;
        else
          v42 = 4;
        __asm { BR              X12 }
      }
      if (v41 == 1)
      {

        break;
      }
      if (v29)
      {
        if ((_DWORD)v26 == v29)
        {
          v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v81 + 48))(((unint64_t)v3 + v25 + 8) & v38, v26, AssociatedTypeWitness);
        }
        else
        {
          v46 = ((unint64_t)v40 + v80) & v79;
          if (v71 != v29)
          {
            if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v22 + 48))((v75 + v46) & v74, v23, v78) >= 2)break;
            goto LABEL_59;
          }
          v43 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v73 + 48))(v46, v71, v76);
        }
        if (v43)
          break;
LABEL_59:
        (*(void (**)(unint64_t, uint64_t))(v81 + 8))(((unint64_t)v3 + v25 + 8) & v38, AssociatedTypeWitness);
        v47 = ((unint64_t)v40 + v80) & v79;
        (*(void (**)(unint64_t, uint64_t))(v73 + 8))(v47, v76);
        v48 = (v75 + v47) & v74;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v22 + 48))(v48, 1, v78))
          (*(void (**)(unint64_t, uint64_t))(v22 + 8))(v48, v78);
        break;
      }
      if (!*((_BYTE *)v40 + v77))
        goto LABEL_59;
      v44 = (*((unsigned __int8 *)v40 + v77) - 1) << (8 * v77);
      if (v77 > 3)
        v44 = 0;
      if ((_DWORD)v77)
      {
        if (v77 <= 3)
          v45 = v77;
        else
          v45 = 4;
        __asm { BR              X11 }
      }
      if (v44 == -1)
        goto LABEL_59;
      break;
    case 3:
      break;
    default:
      if (v36 <= 3)
        v37 = v36;
      else
        v37 = 4;
      __asm { BR              X13 }
      return result;
  }
  switch(*((_BYTE *)a2 + v36))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v85 + 16))(v3, a2, v87);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 16))(((unint64_t)v3 + v86) & v84, ((unint64_t)a2 + v86) & v84, v90);
      v50 = (void *)(((((unint64_t)v3 + v86) & v84) + v89 + v96) & v94);
      v51 = (const void *)(((((unint64_t)a2 + v86) & v84) + v89 + v96) & v94);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48))(v51, 1, v92))
      {
        memcpy(v50, v51, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v91 + 16))(v50, v51, v92);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v50, 0, 1, v92);
      }
      *((_BYTE *)v3 + v36) = 0;
      return v3;
    case 1:
      *v3 = *a2;
      *((_BYTE *)v3 + v36) = 1;
      swift_bridgeObjectRetain();
      return v3;
    case 2:
      v52 = v31;
      *v3 = *a2;
      v53 = v33;
      v54 = (_QWORD *)(((unint64_t)v3 + v25 + 8) & v38);
      v55 = (id *)(((unint64_t)a2 + v25 + 8) & v38);
      v56 = *((unsigned __int8 *)v55 + v53);
      if (v56 >= 2)
      {
        if (v53 <= 3)
          v57 = v53;
        else
          v57 = 4;
        __asm { BR              X12 }
      }
      v59 = v53;
      if (v56 == 1)
      {
        v60 = *v55;
        v61 = *v55;
        *v54 = v60;
        v62 = 1;
        goto LABEL_104;
      }
      if (v83)
      {
        if ((_DWORD)v26 == v83)
        {
          if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v81 + 48))(v55, v26, AssociatedTypeWitness))
            goto LABEL_96;
LABEL_103:
          memcpy((void *)(((unint64_t)v3 + v25 + 8) & v38), v55, v70);
          v62 = 0;
          goto LABEL_104;
        }
        v65 = ((unint64_t)v55 + v80) & v79;
        if (v71 != v83)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v22 + 48))((v75 + v65) & v74, v69, v78) < 2)goto LABEL_96;
          goto LABEL_103;
        }
        if ((*(unsigned int (**)(unint64_t))(v73 + 48))(v65))
          goto LABEL_103;
      }
      else if (*((_BYTE *)v55 + v77))
      {
        v63 = (*((unsigned __int8 *)v55 + v77) - 1) << (8 * v77);
        if (v77 > 3)
          v63 = 0;
        if ((_DWORD)v77)
        {
          if (v77 <= 3)
            v64 = v77;
          else
            v64 = 4;
          __asm { BR              X11 }
        }
        if (v63 != -1)
          goto LABEL_103;
      }
LABEL_96:
      (*(void (**)(unint64_t, id *, uint64_t))(v81 + 16))(((unint64_t)v3 + v25 + 8) & v38, v55, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 16))(((unint64_t)v54 + v80) & v79, ((unint64_t)v55 + v80) & v79, v76);
      v66 = (void *)((v75 + (((unint64_t)v54 + v80) & v79)) & v74);
      v67 = (const void *)((v75 + (((unint64_t)v55 + v80) & v79)) & v74);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v67, 1, v78))
      {
        memcpy(v66, v67, v52);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v66, v67, v78);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v66, 0, 1, v78);
      }
      v62 = v83;
      if (v83)
        v62 = 0;
      else
        *((_BYTE *)v54 + v77) = 0;
LABEL_104:
      *((_BYTE *)v54 + v59) = v62;
      v58 = 2;
LABEL_105:
      *((_BYTE *)v3 + v36) = v58;
      return v3;
    case 3:
      *v3 = *a2;
      v58 = 3;
      goto LABEL_105;
    default:
      if (v36 <= 3)
        v49 = v36;
      else
        v49 = 4;
      __asm { BR              X12 }
      return result;
  }
}

_QWORD *sub_1A29D8498(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  const void *v50;
  char v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  size_t v69;
  unsigned int v70;
  unint64_t v71;
  void *v72;
  const void *v73;
  _QWORD *result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v5 = a3[2];
  v7 = a3[3];
  v6 = a3[4];
  v84 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v85 = *(_QWORD *)(v84 + 64) + v9;
  v92 = v9;
  v10 = v85 & ~v9;
  v87 = v8;
  v11 = *(_QWORD *)(v6 - 8);
  v88 = *(_QWORD *)(v8 + 64);
  v94 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v88 + v94 + v10) & ~v94;
  v90 = v11;
  v13 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  __n = v13;
  v14 = v13 + v12;
  v86 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v89 = v7;
  v80 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v80 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = *(_DWORD *)(v17 + 80) | v16;
  v91 = v6;
  v20 = a2;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = (v19 | *(_DWORD *)(v22 + 80)) & 0xF8 | 7u;
  v26 = *(unsigned int *)(v15 + 84);
  v27 = *(unsigned int *)(v17 + 84);
  if (v27 <= v26)
    v28 = *(_DWORD *)(v15 + 84);
  else
    v28 = *(_DWORD *)(v17 + 84);
  v29 = v23 - 1;
  if (!v23)
    v29 = 0;
  if (v29 <= v28)
    v30 = v28;
  else
    v30 = v29;
  v81 = v15;
  v31 = *(_QWORD *)(v15 + 64) + v18;
  v79 = v17;
  v32 = *(_QWORD *)(v17 + 64) + v24;
  if (v23)
    v34 = *(_QWORD *)(v22 + 64);
  else
    v34 = *(_QWORD *)(v22 + 64) + 1;
  v33 = (v32 + (v31 & ~v18)) & ~v24;
  v35 = v33 + v34;
  if (v30)
    v36 = v33 + v34;
  else
    v36 = v35 + 1;
  if (v36 <= 8)
    v37 = 8;
  else
    v37 = v36;
  v38 = v37 + ((v25 + 8) & ~v25);
  if (v14 <= v38 + 1)
    v39 = v38 + 1;
  else
    v39 = v14;
  if (v39 <= 8)
    v40 = 8;
  else
    v40 = v39;
  v41 = *((unsigned __int8 *)a2 + v40);
  v43 = ~v92;
  v44 = ~v94;
  v45 = ~v25;
  v46 = ~v24;
  switch(v41)
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v84 + 32))(a1, v20, v86);
      v47 = ((unint64_t)a1 + v85) & v43;
      v48 = ((unint64_t)v20 + v85) & v43;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v87 + 32))(v47, v48, v89);
      v49 = (void *)((v47 + v88 + v94) & v44);
      v50 = (const void *)((v48 + v88 + v94) & v44);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v90 + 48))(v50, 1, v91))
      {
        memcpy(v49, v50, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v90 + 32))(v49, v50, v91);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v49, 0, 1, v91);
      }
      v51 = 0;
      goto LABEL_68;
    case 1:
      *a1 = *v20;
      v51 = 1;
      goto LABEL_68;
    case 2:
      *a1 = *v20;
      v52 = (char *)a1 + v25;
      v53 = (char *)v20 + v25;
      v54 = (_QWORD *)((unint64_t)(v52 + 8) & v45);
      v55 = (_QWORD *)((unint64_t)(v53 + 8) & v45);
      v56 = *((unsigned __int8 *)v55 + v37);
      if (v56 >= 2)
      {
        if (v37 <= 3)
          v57 = v37;
        else
          v57 = 4;
        __asm { BR              X14 }
      }
      if (v56 == 1)
      {
        *v54 = *v55;
        v58 = 1;
        goto LABEL_67;
      }
      v77 = v21;
      v78 = v37;
      v76 = v32;
      v93 = ~v18;
      v95 = v46;
      if (!v30)
      {
        v59 = v31;
        if (!*((_BYTE *)v55 + v35))
          goto LABEL_59;
        v63 = (*((unsigned __int8 *)v55 + v35) - 1) << (8 * v35);
        if (v35 > 3)
          v63 = 0;
        if ((_DWORD)v35)
        {
          if (v35 <= 3)
            v64 = v35;
          else
            v64 = 4;
          __asm { BR              X11 }
        }
        v62 = v63 + 1;
        goto LABEL_65;
      }
      if ((_DWORD)v26 == v30)
      {
        v59 = v31;
        v60 = v30;
        v61 = v35;
        v62 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v81 + 48))(v55, v26, AssociatedTypeWitness);
        v35 = v61;
        v30 = v60;
        goto LABEL_65;
      }
      v65 = v35;
      v59 = v31;
      v66 = ((unint64_t)v55 + v31) & ~v18;
      v67 = v30;
      if ((_DWORD)v27 == v30)
      {
        v62 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v79 + 48))(v66, v27, v80);
        v30 = v67;
        v35 = v65;
LABEL_65:
        if (v62)
          goto LABEL_66;
        goto LABEL_59;
      }
      v68 = (*(uint64_t (**)(unint64_t))(v22 + 48))((v32 + v66) & v46);
      v30 = v67;
      v35 = v65;
      if (v68 >= 2)
      {
LABEL_66:
        memcpy(v54, v55, v36);
        v58 = 0;
        v37 = v78;
        goto LABEL_67;
      }
LABEL_59:
      v75 = v35;
      v69 = v34;
      v70 = v30;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v81 + 32))(v54, v55, AssociatedTypeWitness);
      v71 = ((unint64_t)v55 + v59) & v93;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v79 + 32))(((unint64_t)v54 + v59) & v93, v71, v80);
      v72 = (void *)((v76 + (((unint64_t)v54 + v59) & v93)) & v95);
      v73 = (const void *)((v76 + v71) & v95);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v73, 1, v77))
      {
        memcpy(v72, v73, v69);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v72, v73, v77);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v72, 0, 1, v77);
      }
      v37 = v78;
      v58 = 0;
      if (!v70)
        *((_BYTE *)v54 + v75) = 0;
LABEL_67:
      *((_BYTE *)v54 + v37) = v58;
      v51 = 2;
LABEL_68:
      *((_BYTE *)a1 + v40) = v51;
      return a1;
    case 3:
      *a1 = *v20;
      v51 = 3;
      goto LABEL_68;
    default:
      if (v40 <= 3)
        v42 = v40;
      else
        v42 = 4;
      __asm { BR              X16 }
      return result;
  }
}

_QWORD *sub_1A29D8AE8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  char v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  unint64_t v63;
  void *v64;
  const void *v65;
  _QWORD *result;
  unsigned int v67;
  size_t v68;
  unsigned int v69;
  size_t __n;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t AssociatedTypeWitness;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = a3[2];
  v6 = a3[3];
  v7 = a3[4];
  v83 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v84 = *(_QWORD *)(v83 + 64) + v9;
  v91 = v9;
  v10 = v84 & ~v9;
  v86 = v8;
  v11 = *(_QWORD *)(v7 - 8);
  v87 = *(_QWORD *)(v8 + 64);
  v94 = *(unsigned __int8 *)(v11 + 80);
  v12 = (v87 + v94 + v10) & ~v94;
  v89 = v11;
  v13 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  __n = v13;
  v14 = v13 + v12;
  v85 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v88 = v6;
  v74 = swift_getAssociatedTypeWitness();
  v17 = v3;
  v18 = *(_QWORD *)(v74 - 8);
  v19 = *(_DWORD *)(v18 + 80);
  v20 = *(_DWORD *)(v18 + 80) | v16;
  v90 = v7;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 84);
  v24 = *(_DWORD *)(v22 + 80);
  v25 = (v20 | *(_DWORD *)(v22 + 80)) & 0xF8 | 7u;
  v26 = *(unsigned int *)(v15 + 84);
  v27 = *(_DWORD *)(v18 + 84);
  v69 = v27;
  if (v27 <= v26)
    v27 = *(_DWORD *)(v15 + 84);
  v28 = v23 - 1;
  if (!v23)
    v28 = 0;
  if (v28 <= v27)
    v29 = v27;
  else
    v29 = v28;
  v67 = *(_DWORD *)(v22 + 84);
  v30 = v18;
  v3 = v17;
  v78 = *(_QWORD *)(v15 + 64) + v19;
  v79 = v15;
  v71 = v30;
  v73 = *(_QWORD *)(v30 + 64) + v24;
  if (v23)
    v31 = *(_QWORD *)(v22 + 64);
  else
    v31 = *(_QWORD *)(v22 + 64) + 1;
  v81 = v29;
  v75 = ((v73 + (v78 & ~v19)) & ~v24) + v31;
  if (v29)
    v32 = ((v73 + (v78 & ~v19)) & ~v24) + v31;
  else
    v32 = ((v73 + (v78 & ~v19)) & ~v24) + v31 + 1;
  v68 = v32;
  if (v32 <= 8)
    v33 = 8;
  else
    v33 = v32;
  v34 = v33 + ((v25 + 8) & ~v25);
  if (v14 <= v34 + 1)
    v35 = v34 + 1;
  else
    v35 = v14;
  if (v35 <= 8)
    v36 = 8;
  else
    v36 = v35;
  v76 = v21;
  v82 = ~v91;
  v92 = ~v94;
  v38 = ~v25;
  v77 = ~v19;
  v72 = ~v24;
  switch(*((_BYTE *)v3 + v36))
  {
    case 0:
      (*(void (**)(_QWORD *, uint64_t))(v83 + 8))(v3, v85);
      (*(void (**)(unint64_t, uint64_t))(v86 + 8))(((unint64_t)v3 + v84) & v82, v88);
      v39 = ((((unint64_t)v3 + v84) & v82) + v87 + v94) & v92;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v89 + 48))(v39, 1, v90))
        (*(void (**)(unint64_t, uint64_t))(v89 + 8))(v39, v90);
      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 2:
      v40 = (id *)(((unint64_t)v3 + v25 + 8) & v38);
      v41 = *((unsigned __int8 *)v40 + v33);
      if (v41 >= 2)
      {
        if (v33 <= 3)
          v42 = v33;
        else
          v42 = 4;
        __asm { BR              X12 }
      }
      if (v41 == 1)
      {

        break;
      }
      if (v29)
      {
        if ((_DWORD)v26 == v29)
        {
          v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v79 + 48))(((unint64_t)v3 + v25 + 8) & v38, v26, AssociatedTypeWitness);
        }
        else
        {
          v46 = ((unint64_t)v40 + v78) & v77;
          if (v69 != v29)
          {
            if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v22 + 48))((v73 + v46) & v72, v23, v76) >= 2)break;
            goto LABEL_59;
          }
          v43 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v71 + 48))(v46, v69, v74);
        }
        if (v43)
          break;
LABEL_59:
        (*(void (**)(unint64_t, uint64_t))(v79 + 8))(((unint64_t)v3 + v25 + 8) & v38, AssociatedTypeWitness);
        v47 = ((unint64_t)v40 + v78) & v77;
        (*(void (**)(unint64_t, uint64_t))(v71 + 8))(v47, v74);
        v48 = (v73 + v47) & v72;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v22 + 48))(v48, 1, v76))
          (*(void (**)(unint64_t, uint64_t))(v22 + 8))(v48, v76);
        break;
      }
      if (!*((_BYTE *)v40 + v75))
        goto LABEL_59;
      v44 = (*((unsigned __int8 *)v40 + v75) - 1) << (8 * v75);
      if (v75 > 3)
        v44 = 0;
      if ((_DWORD)v75)
      {
        if (v75 <= 3)
          v45 = v75;
        else
          v45 = 4;
        __asm { BR              X11 }
      }
      if (v44 == -1)
        goto LABEL_59;
      break;
    case 3:
      break;
    default:
      if (v36 <= 3)
        v37 = v36;
      else
        v37 = 4;
      __asm { BR              X13 }
      return result;
  }
  switch(*((_BYTE *)a2 + v36))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v83 + 32))(v3, a2, v85);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v86 + 32))(((unint64_t)v3 + v84) & v82, ((unint64_t)a2 + v84) & v82, v88);
      v50 = (void *)(((((unint64_t)v3 + v84) & v82) + v87 + v94) & v92);
      v51 = (const void *)(((((unint64_t)a2 + v84) & v82) + v87 + v94) & v92);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v89 + 48))(v51, 1, v90))
      {
        memcpy(v50, v51, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v89 + 32))(v50, v51, v90);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v90);
      }
      v52 = 0;
      goto LABEL_105;
    case 1:
      *v3 = *a2;
      v52 = 1;
      goto LABEL_105;
    case 2:
      v53 = v31;
      *v3 = *a2;
      v54 = v33;
      v55 = (_QWORD *)(((unint64_t)v3 + v25 + 8) & v38);
      v56 = (_QWORD *)(((unint64_t)a2 + v25 + 8) & v38);
      v57 = *((unsigned __int8 *)v56 + v54);
      if (v57 >= 2)
      {
        if (v54 <= 3)
          v58 = v54;
        else
          v58 = 4;
        __asm { BR              X12 }
      }
      v59 = v54;
      if (v57 == 1)
      {
        *v55 = *v56;
        v60 = 1;
        goto LABEL_104;
      }
      if (v81)
      {
        if ((_DWORD)v26 == v81)
        {
          if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v56, v26, AssociatedTypeWitness))
            goto LABEL_96;
LABEL_103:
          memcpy((void *)(((unint64_t)v3 + v25 + 8) & v38), v56, v68);
          v60 = 0;
          goto LABEL_104;
        }
        v63 = ((unint64_t)v56 + v78) & v77;
        if (v69 != v81)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v22 + 48))((v73 + v63) & v72, v67, v76) < 2)goto LABEL_96;
          goto LABEL_103;
        }
        if ((*(unsigned int (**)(unint64_t))(v71 + 48))(v63))
          goto LABEL_103;
      }
      else if (*((_BYTE *)v56 + v75))
      {
        v61 = (*((unsigned __int8 *)v56 + v75) - 1) << (8 * v75);
        if (v75 > 3)
          v61 = 0;
        if ((_DWORD)v75)
        {
          if (v75 <= 3)
            v62 = v75;
          else
            v62 = 4;
          __asm { BR              X11 }
        }
        if (v61 != -1)
          goto LABEL_103;
      }
LABEL_96:
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v79 + 32))(((unint64_t)v3 + v25 + 8) & v38, v56, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 32))(((unint64_t)v55 + v78) & v77, ((unint64_t)v56 + v78) & v77, v74);
      v64 = (void *)((v73 + (((unint64_t)v55 + v78) & v77)) & v72);
      v65 = (const void *)((v73 + (((unint64_t)v56 + v78) & v77)) & v72);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v65, 1, v76))
      {
        memcpy(v64, v65, v53);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v64, v65, v76);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v64, 0, 1, v76);
      }
      v60 = v81;
      if (v81)
        v60 = 0;
      else
        *((_BYTE *)v55 + v75) = 0;
LABEL_104:
      *((_BYTE *)v55 + v59) = v60;
      v52 = 2;
LABEL_105:
      *((_BYTE *)v3 + v36) = v52;
      return v3;
    case 3:
      *v3 = *a2;
      v52 = 3;
      goto LABEL_105;
    default:
      if (v36 <= 3)
        v49 = v36;
      else
        v49 = 4;
      __asm { BR              X12 }
      return result;
  }
}

uint64_t sub_1A29D9494(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  unint64_t v34;

  v4 = *(_QWORD *)(a3[4] - 8);
  v34 = (((*(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64)
       + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v5 = *(_DWORD *)(v4 + 84);
  v33 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v8 + 84) > v11)
    v11 = *(_DWORD *)(v8 + 84);
  v13 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 84);
  v14 = v12 - 1;
  if (!v12)
    v14 = 0;
  v15 = *(_QWORD *)(v10 + 64);
  if (!v12)
    ++v15;
  v16 = v13;
  v17 = ((v9 | v7) | v13) & 0xF8 | 7u;
  v18 = (v17 + 8) & ~v17;
  v19 = v14 | v11;
  v20 = v33;
  if (!v5)
    v20 = v33 + 1;
  if (!v19)
    ++v15;
  v21 = v15
      + ((*(_QWORD *)(v8 + 64)
        + v16
        + ((*(_QWORD *)(v6 + 64) + v9) & ~(unint64_t)v9)) & ~v16);
  if (v21 <= 8)
    v21 = 8;
  v22 = v21 + v18;
  if (v20 + v34 <= v22 + 1)
    v23 = v22 + 1;
  else
    v23 = v20 + v34;
  if (v23 <= 8)
    v24 = 8;
  else
    v24 = v23;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_37;
  v25 = v24 + 1;
  v26 = 8 * (v24 + 1);
  if ((v24 + 1) <= 3)
  {
    v29 = ((a2 + ~(-1 << v26) - 252) >> v26) + 1;
    if (HIWORD(v29))
    {
      v27 = *(_DWORD *)(a1 + v25);
      if (!v27)
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v29 > 0xFF)
    {
      v27 = *(unsigned __int16 *)(a1 + v25);
      if (!*(_WORD *)(a1 + v25))
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v29 < 2)
    {
LABEL_37:
      v31 = *(unsigned __int8 *)(a1 + v24);
      if (v31 >= 4)
        return (v31 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v27 = *(unsigned __int8 *)(a1 + v25);
  if (!*(_BYTE *)(a1 + v25))
    goto LABEL_37;
LABEL_30:
  v30 = (v27 - 1) << v26;
  if (v25 > 3)
    v30 = 0;
  if ((_DWORD)v25)
  {
    if (v25 > 3)
      LODWORD(v25) = 4;
    __asm { BR              X11 }
  }
  return (v30 + 253);
}

void sub_1A29D9730(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;

  v5 = *(_QWORD *)(a4[4] - 8);
  v31 = (((*(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a4[3] - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64)
       + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v6 = *(_DWORD *)(v5 + 84);
  v30 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = 0u;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v7 + 84);
  if (*(_DWORD *)(v9 + 84) > v13)
    v13 = *(_DWORD *)(v9 + 84);
  v15 = *(_DWORD *)(v12 + 80);
  v14 = *(_DWORD *)(v12 + 84);
  v16 = v14 - 1;
  if (!v14)
    v16 = 0;
  v17 = *(_QWORD *)(v12 + 64);
  if (!v14)
    ++v17;
  v18 = ((v10 | v8) | v15) & 0xF8 | 7u;
  v19 = (v18 + 8) & ~v18;
  v20 = (*(_QWORD *)(v9 + 64)
       + v15
       + ((*(_QWORD *)(v7 + 64) + v10) & ~(unint64_t)v10)) & ~(unint64_t)v15;
  v21 = v16 | v13;
  v22 = v30;
  if (!v6)
    v22 = v30 + 1;
  if (!v21)
    ++v17;
  v23 = v17 + v20;
  if (v23 <= 8)
    v23 = 8;
  v24 = v23 + v19;
  if (v22 + v31 <= v24 + 1)
    v25 = v24 + 1;
  else
    v25 = v22 + v31;
  if (v25 <= 8)
    v25 = 8;
  v26 = v25 + 1;
  if (a3 >= 0xFD)
  {
    if (v26 <= 3)
    {
      v27 = ((a3 + ~(-1 << (8 * v26)) - 252) >> (8 * v26)) + 1;
      if (HIWORD(v27))
      {
        v11 = 4u;
      }
      else if (v27 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v27 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v28 = a2 - 253;
  if (v26 < 4)
  {
    if ((_DWORD)v25 != -1)
    {
      v29 = v28 & ~(-1 << (8 * v26));
      bzero(a1, v26);
      if ((_DWORD)v26 == 3)
      {
        *(_WORD *)a1 = v29;
        a1[2] = BYTE2(v29);
      }
      else if ((_DWORD)v26 == 2)
      {
        *(_WORD *)a1 = v29;
      }
      else
      {
        *a1 = v29;
      }
    }
  }
  else
  {
    bzero(a1, v25 + 1);
    *(_DWORD *)a1 = v28;
  }
  __asm { BR              X10 }
}

void sub_1A29D9A0C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1A29D9A14()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_1A29D9A44(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v3 = *(_QWORD *)(a2[4] - 8);
  v4 = (((*(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a2[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64)
      + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_DWORD *)(v3 + 84);
  v6 = *(_QWORD *)(v3 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  v8 = v7 + v4;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 80) | v10;
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = (v13 | *(_DWORD *)(v14 + 80)) & 0xF8 | 7u;
  v18 = (v17 + 8) & ~v17;
  v19 = *(_DWORD *)(v9 + 84);
  if (*(_DWORD *)(v11 + 84) > v19)
    v19 = *(_DWORD *)(v11 + 84);
  v20 = v15 - 1;
  if (!v15)
    v20 = 0;
  v21 = *(_QWORD *)(v14 + 64);
  if (!v15)
    ++v21;
  if (!(v20 | v19))
    ++v21;
  v22 = v21 + ((*(_QWORD *)(v11 + 64) + v16 + ((*(_QWORD *)(v9 + 64) + v12) & ~v12)) & ~v16);
  if (v22 <= 8)
    v22 = 8;
  v23 = v22 + v18;
  if (v8 <= v23 + 1)
    v24 = v23 + 1;
  else
    v24 = v8;
  if (v24 <= 8)
    v24 = 8;
  result = *(unsigned __int8 *)(a1 + v24);
  if (result >= 4)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1A29D9C54(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unsigned int v28;
  int v29;

  v4 = *(_QWORD *)(a3[4] - 8);
  v5 = (((*(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3[3] - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64)
      + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  v9 = v8 + v5;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = *(_DWORD *)(v12 + 80) | v11;
  result = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(result - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v18 = *(_DWORD *)(v16 + 80);
  v19 = (v14 | *(_DWORD *)(v16 + 80)) & 0xF8 | 7u;
  v20 = (v19 + 8) & ~v19;
  v21 = *(_DWORD *)(v10 + 84);
  if (*(_DWORD *)(v12 + 84) > v21)
    v21 = *(_DWORD *)(v12 + 84);
  v22 = v17 - 1;
  if (!v17)
    v22 = 0;
  v23 = *(_QWORD *)(v16 + 64);
  if (!v17)
    ++v23;
  if (!(v22 | v21))
    ++v23;
  v24 = v23 + ((*(_QWORD *)(v12 + 64) + v18 + ((*(_QWORD *)(v10 + 64) + v13) & ~v13)) & ~v18);
  if (v24 <= 8)
    v24 = 8;
  v25 = v24 + v20;
  if (v9 <= v25 + 1)
    v26 = v25 + 1;
  else
    v26 = v9;
  if (v26 <= 8)
    v27 = 8;
  else
    v27 = v26;
  if (a2 > 3)
  {
    v28 = ((a2 - 4) >> (8 * v27)) + 4;
    if (v27 > 3)
      LOBYTE(v28) = 4;
    a1[v27] = v28;
    if (v27 >= 4)
      v29 = 4;
    else
      v29 = v27;
    bzero(a1, v27);
    __asm { BR              X10 }
  }
  a1[v27] = a2;
  return result;
}

_QWORD *sub_1A29D9E84(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A29D9F00(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1A29D9E90);
}

uint64_t sub_1A29D9E90()
{
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A29D9EC0()
{
  return sub_1A29D9ED0();
}

uint64_t sub_1A29D9ED0()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A29D9F00(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  a4(*a2, v6, v7);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  return a1;
}

uint64_t *sub_1A29D9F48(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A29D9F5C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_1A29D9E90, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A29D9ED0);
}

uint64_t *sub_1A29D9F5C(uint64_t *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *sub_1A29D9FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29D9FC8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1A29D9ED0);
}

uint64_t *sub_1A29D9FC8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *a1;
  v8 = a1[1];
  v7 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  a4(v6, v8, v7);
  return a1;
}

uint64_t sub_1A29DA008(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_1A29DA064(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A29DA0BC(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *sub_1A29DA0C8(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1A29DA0D8(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

void type metadata accessor for CombineLatestStateMachine.CancelledAction()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29DA0FC()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1A29DA124(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1A29DA158(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1A29DA1B4(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CombineLatestStateMachine.IteratorDeinitializedAction()
{
  JUMPOUT(0x1A8589544);
}

void combineLatest<A, B, C, D, E, F>(_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  v56 = a6;
  v51 = a4;
  v52 = a5;
  v46 = a2;
  v58 = a8;
  v57 = a13;
  v55 = a14;
  v53 = a16;
  v54 = a15;
  v43 = a10;
  v45 = a11;
  v48 = a12;
  v49 = a3;
  v50 = *(_QWORD *)(a12 - 8);
  v17 = MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v27;
  v28 = *(_QWORD *)(a9 - 8);
  v29 = MEMORY[0x1E0C80A78](v25);
  v31 = (char *)&v41 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v29);
  v36 = (char *)&v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v37;
  MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v40 + 16))(v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v46, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v49, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v51, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v22, v52, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v47, v56, v48);
  sub_1A29DA494((uint64_t)v39, v42, v58);
}

void sub_1A29DA494(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for AsyncCombineLatest6Sequence();
}

uint64_t sub_1A29DA52C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v3 + a1[29], v7, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3 + a1[30], v10, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + a1[31], v11, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3 + a1[32], v12, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3 + a1[33], v13, v2);
}

void AsyncCombineLatest6Sequence.Iterator.next()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[30] = a1;
  v12 = a2[8];
  v11 = a2[2];
  v2[31] = swift_getAssociatedTypeWitness();
  v9 = a2[3];
  v10 = a2[9];
  v2[32] = swift_getAssociatedTypeWitness();
  v7 = a2[4];
  v8 = a2[10];
  v2[33] = swift_getAssociatedTypeWitness();
  v2[34] = swift_getTupleTypeMetadata3();
  v2[35] = swift_getAssociatedTypeWitness();
  v2[36] = swift_getAssociatedTypeWitness();
  v2[37] = swift_getAssociatedTypeWitness();
  v2[38] = swift_getTupleTypeMetadata3();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v2[39] = TupleTypeMetadata2;
  v5 = sub_1A2AE39F4();
  v2[40] = v5;
  v2[41] = *(_QWORD *)(v5 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v6 = swift_task_alloc();
  v2[2] = v11;
  v2[51] = v6;
  v2[3] = v9;
  v2[4] = v7;
  v2[5] = v12;
  v2[6] = v10;
  v2[7] = v8;
  type metadata accessor for AsyncCombineLatest3Sequence();
}

void sub_1A29DA83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v13[8] = a9;
  v13[9] = v11;
  v13[10] = v14;
  v13[11] = a10;
  v13[12] = v10;
  v13[13] = v12;
  type metadata accessor for AsyncCombineLatest3Sequence();
}

void sub_1A29DA864(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x1A85895EC](&protocol conformance descriptor for AsyncCombineLatest3Sequence<A, B, C>, v2);
  v5 = MEMORY[0x1A85895EC](&protocol conformance descriptor for AsyncCombineLatest3Sequence<A, B, C>, a1);
  v1[26] = v2;
  v1[27] = a1;
  v1[28] = v4;
  v1[29] = v5;
  type metadata accessor for AsyncCombineLatest2Sequence.Iterator();
}

uint64_t sub_1A29DA8A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *v2 = v0;
  v2[1] = sub_1A29DA8E0;
  return AsyncCombineLatest2Sequence.Iterator.next()(v1);
}

uint64_t sub_1A29DA8E0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29DA944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(uint64_t, uint64_t);
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t, uint64_t);
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  void (*v90)(void);
  void (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 312);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 344) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 240);
    v112 = *(_OWORD *)(v0 + 248);
    v114 = *(_OWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(v1, *(_QWORD *)(v0 + 320));
    *(_OWORD *)(v0 + 112) = v112;
    *(_QWORD *)(v0 + 128) = v4;
    *(_OWORD *)(v0 + 136) = v114;
    *(_QWORD *)(v0 + 152) = v3;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(v5, 1, 1, TupleTypeMetadata);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 400);
    v85 = *(_QWORD *)(v0 + 384);
    v73 = *(_QWORD *)(v0 + 392);
    v75 = *(_QWORD *)(v0 + 376);
    v72 = *(_QWORD *)(v0 + 368);
    v76 = *(_QWORD *)(v0 + 360);
    v82 = *(_QWORD *)(v0 + 352);
    v8 = *(_QWORD *)(v0 + 304);
    v115 = *(_QWORD *)(v0 + 296);
    v113 = *(_QWORD *)(v0 + 280);
    v102 = *(_QWORD *)(v0 + 272);
    v107 = *(_QWORD *)(v0 + 264);
    v110 = *(_QWORD *)(v0 + 288);
    v111 = *(_QWORD *)(v0 + 256);
    v92 = *(_QWORD *)(v0 + 240);
    v9 = *(int *)(v102 + 48);
    v10 = v7 + v9;
    v11 = *(int *)(v102 + 64);
    v12 = v7 + v11;
    v104 = v7 + v11;
    v13 = *(int *)(v2 + 48);
    v14 = v7 + v13;
    v15 = v7 + v13 + *(int *)(v8 + 48);
    v106 = *(_QWORD *)(v0 + 248);
    v108 = v7 + v13 + *(int *)(v8 + 64);
    v97 = v7 + v13;
    v98 = v7 + v9;
    v96 = v2;
    v16 = v1 + v13;
    v17 = v1 + v9;
    v18 = v1 + v11;
    v88 = *(_QWORD **)(v106 - 8);
    v81 = (void (*)(uint64_t, uint64_t))v88[4];
    v81(v7, v1);
    v87 = *(_QWORD **)(v111 - 8);
    v80 = (void (*)(uint64_t, uint64_t))v87[4];
    v80(v10, v17);
    v77 = *(_QWORD **)(v107 - 8);
    v79 = (void (*)(uint64_t, uint64_t))v77[4];
    v79(v12, v18);
    v19 = v16 + *(int *)(v8 + 48);
    v20 = v16 + *(int *)(v8 + 64);
    v84 = *(_QWORD **)(v113 - 8);
    v78 = (void (*)(uint64_t, uint64_t))v84[4];
    v78(v14, v16);
    v83 = *(_QWORD **)(v110 - 8);
    v56 = (void (*)(uint64_t, uint64_t))v83[4];
    v56(v15, v19);
    v86 = *(_QWORD **)(v115 - 8);
    v62 = (void (*)(uint64_t, uint64_t))v86[4];
    v62(v108, v20);
    *(_QWORD *)(v0 + 160) = v106;
    *(_QWORD *)(v0 + 168) = v111;
    *(_QWORD *)(v0 + 176) = v107;
    *(_QWORD *)(v0 + 184) = v113;
    *(_QWORD *)(v0 + 192) = v110;
    *(_QWORD *)(v0 + 200) = v115;
    v60 = (int *)swift_getTupleTypeMetadata();
    v57 = v92 + v60[12];
    v51 = v92 + v60[16];
    v70 = v92 + v60[20];
    v54 = v92 + v60[24];
    v59 = v92 + v60[28];
    v21 = v73 + *(int *)(v96 + 48);
    v22 = v73 + *(int *)(v102 + 48);
    v23 = v73 + *(int *)(v102 + 64);
    v68 = v23;
    v69 = v22;
    v91 = (void (*)(void))v88[2];
    v91();
    v89 = (void (*)(uint64_t, uint64_t, uint64_t))v87[2];
    v89(v22, v98, v111);
    v94 = (void (*)(uint64_t, uint64_t, uint64_t))v77[2];
    v94(v23, v104, v107);
    v24 = v21 + *(int *)(v8 + 48);
    v66 = v24;
    v67 = v21;
    v25 = v21 + *(int *)(v8 + 64);
    v90 = (void (*)(void))v84[2];
    v90();
    v100 = (void (*)(uint64_t, uint64_t, uint64_t))v83[2];
    v100(v24, v15, v110);
    v99 = (void (*)(uint64_t, uint64_t, uint64_t))v86[2];
    v99(v25, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v81)(v92, v73, v106);
    v26 = v85 + *(int *)(v96 + 48);
    v27 = v85 + *(int *)(v102 + 48);
    v65 = v85 + *(int *)(v102 + 64);
    v91();
    ((void (*)(uint64_t, uint64_t))v89)(v27, v98);
    v94(v65, v104, v107);
    v93 = v8;
    v64 = v26;
    v63 = v26 + *(int *)(v8 + 48);
    v61 = v26 + *(int *)(v8 + 64);
    v90();
    v100(v63, v15, v110);
    v99(v61, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v80)(v57, v27, v111);
    v74 = v75 + *(int *)(v96 + 48);
    v28 = v75 + *(int *)(v102 + 48);
    v58 = v28;
    v29 = v75 + *(int *)(v102 + 64);
    v91();
    v89(v28, v98, v111);
    v94(v29, v104, v107);
    v55 = v74 + *(int *)(v8 + 48);
    v53 = v74 + *(int *)(v8 + 64);
    v90();
    v100(v55, v15, v110);
    v99(v53, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v79)(v51, v29, v107);
    v30 = v72 + *(int *)(v96 + 48);
    v31 = v72 + *(int *)(v102 + 48);
    v32 = v72 + *(int *)(v102 + 64);
    v50 = v32;
    v52 = v31;
    v91();
    v89(v31, v98, v111);
    v94(v32, v104, v107);
    v33 = v30 + *(int *)(v8 + 48);
    v49 = v30 + *(int *)(v8 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v30, v97, v113);
    v100(v33, v15, v110);
    v99(v49, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v78)(v70, v30, v113);
    v71 = v76 + *(int *)(v96 + 48);
    v34 = v76 + *(int *)(v102 + 48);
    v35 = v76 + *(int *)(v102 + 64);
    v47 = v35;
    v48 = v34;
    v91();
    v89(v34, v98, v111);
    v94(v35, v104, v107);
    v36 = v71 + *(int *)(v93 + 48);
    v37 = v71 + *(int *)(v93 + 64);
    v95 = v37;
    v90();
    v100(v36, v15, v110);
    v99(v37, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v54, v36, v110);
    v38 = v82 + *(int *)(v96 + 48);
    v39 = v82 + *(int *)(v102 + 48);
    v101 = v39;
    v103 = v82 + *(int *)(v102 + 64);
    ((void (*)(void))v81)();
    ((void (*)(uint64_t, uint64_t, uint64_t))v80)(v39, v98, v111);
    ((void (*)(uint64_t, uint64_t, uint64_t))v79)(v103, v104, v107);
    v40 = v38 + *(int *)(v93 + 48);
    v41 = v38 + *(int *)(v93 + 64);
    ((void (*)(uint64_t, uint64_t, uint64_t))v78)(v38, v97, v113);
    ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v40, v15, v110);
    ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v41, v108, v115);
    ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v59, v41, v115);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)v60 - 1) + 56))(v92, 0, 1);
    v105 = (void (*)(uint64_t, uint64_t))v83[1];
    v105(v40, v110);
    v42 = (void (*)(uint64_t, uint64_t))v84[1];
    v42(v38, v113);
    v43 = (void (*)(uint64_t, uint64_t))v77[1];
    v43(v103, v107);
    v44 = (void (*)(uint64_t, uint64_t))v87[1];
    v44(v101, v111);
    v109 = (void (*)(uint64_t, uint64_t))v88[1];
    v109(v82, v106);
    v45 = (void (*)(uint64_t, uint64_t))v86[1];
    v45(v95, v115);
    v42(v71, v113);
    v43(v47, v107);
    v44(v48, v111);
    v109(v76, v106);
    v45(v49, v115);
    v105(v33, v110);
    v43(v50, v107);
    v44(v52, v111);
    v109(v72, v106);
    v45(v53, v115);
    v105(v55, v110);
    v42(v74, v113);
    v44(v58, v111);
    v109(v75, v106);
    v45(v61, v115);
    v105(v63, v110);
    v42(v64, v113);
    v43(v65, v107);
    v109(v85, v106);
    v45(v25, v115);
    v105(v66, v110);
    v42(v67, v113);
    v43(v68, v107);
    v44(v69, v111);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29DB3C8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A29DB45C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2971EBC;
  AsyncCombineLatest6Sequence.Iterator.next()(a1, a2);
}

uint64_t sub_1A29DB4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  _QWORD *v6;

  v4[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[3] = AssociatedTypeWitness;
  v4[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4[5] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_1A29DB594;
  return sub_1A2AE36D0();
}

uint64_t sub_1A29DB594()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*v1;
  v3 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

void AsyncCombineLatest6Sequence.makeAsyncIterator()()
{
  type metadata accessor for AsyncCombineLatest3Sequence();
}

void sub_1A29DB66C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[5];
  v3 = v0[6];
  *(_QWORD *)(v1 - 200) = v3;
  *(_QWORD *)(v1 - 192) = v2;
  v4 = v0[7];
  v5 = v0[11];
  v6 = v0[12];
  *(_QWORD *)(v1 - 216) = v5;
  *(_QWORD *)(v1 - 208) = v4;
  *(_QWORD *)(v1 - 224) = v6;
  v7 = v0[13];
  *(_QWORD *)(v1 - 240) = v7;
  *(_QWORD *)(v1 - 136) = v2;
  *(_QWORD *)(v1 - 128) = v3;
  *(_QWORD *)(v1 - 120) = v4;
  *(_QWORD *)(v1 - 112) = v5;
  *(_QWORD *)(v1 - 104) = v6;
  *(_QWORD *)(v1 - 96) = v7;
  type metadata accessor for AsyncCombineLatest3Sequence();
}

void sub_1A29DB6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x1A85895EC](&protocol conformance descriptor for AsyncCombineLatest3Sequence<A, B, C>, v1);
  *(_QWORD *)(v2 - 248) = v4;
  v5 = MEMORY[0x1A85895EC](&protocol conformance descriptor for AsyncCombineLatest3Sequence<A, B, C>, a1);
  *(_QWORD *)(v2 - 256) = v5;
  *(_QWORD *)(v2 - 136) = v1;
  *(_QWORD *)(v2 - 128) = a1;
  *(_QWORD *)(v2 - 120) = v4;
  *(_QWORD *)(v2 - 112) = v5;
  type metadata accessor for AsyncCombineLatest2Sequence();
}

void sub_1A29DB6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v11 - 264) = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v13 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  combineLatest<A, B, C>(_:_:_:)(v9, v9 + *(int *)(v10 + 116), v9 + *(int *)(v10 + 120), *(_QWORD *)(v11 - 152), *(_QWORD *)(v11 - 160), *(_QWORD *)(v11 - 168), *(_QWORD *)(v11 - 176), *(_QWORD *)(v11 - 184), (uint64_t)&a9 - v14, *(_QWORD *)(v11 - 232));
}

void sub_1A29DB79C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;

  combineLatest<A, B, C>(_:_:_:)(v0 + v1[31], v0 + v1[32], v0 + v1[33], *(_QWORD *)(v3 - 192), *(_QWORD *)(v3 - 200), *(_QWORD *)(v3 - 208), *(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 224), v2, *(_QWORD *)(v3 - 240));
}

void sub_1A29DB7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  combineLatest<A, B>(_:_:)(v4, v3, v0, v1, *(_QWORD *)(v5 - 248), *(_QWORD *)(v5 - 256), v2);
}

void sub_1A29DB7F0()
{
  AsyncCombineLatest2Sequence.makeAsyncIterator()();
}

uint64_t sub_1A29DB800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 264) + 8))(v4, v0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v1);
  **(_QWORD **)(v8 - 144) = *(_QWORD *)(v8 - 136);
  return result;
}

uint64_t sub_1A29DB860()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

void sub_1A29DB8F0()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A29DB900()
{
  AsyncCombineLatest6Sequence.makeAsyncIterator()();
}

uint64_t sub_1A29DB914()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_1A29DB930()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A29DB938()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1A29DBA44(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 + 64) + v7;
  v9 = *(_QWORD *)(a3[4] - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v6 + 64) + v10;
  v12 = *(_QWORD *)(a3[5] - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v45 = *(_QWORD *)(v9 + 64) + v13;
  v14 = *(_QWORD *)(a3[6] - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v44 = *(_QWORD *)(v12 + 64) + v15;
  v16 = *(_QWORD *)(a3[7] - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = *(_QWORD *)(v14 + 64) + v17;
  v19 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v9 + 80) | *(_BYTE *)(v12 + 80) | *(_BYTE *)(v14 + 80) | v17);
  if (v19 <= 7
    && ((v18 + ((v44 + ((v45 + ((v11 + (v8 & ~v7)) & ~v10)) & ~v13)) & ~v15)) & ~(unint64_t)v17)
     + *(_QWORD *)(v16 + 64) <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v14 + 80) | v17) & 0x100000) == 0)
  {
    v35 = a3[4];
    v36 = a3[3];
    v24 = ~v7;
    v37 = ~v10;
    v38 = a3[5];
    v39 = ~v13;
    v40 = a3[6];
    v41 = ~v15;
    v42 = ~(unint64_t)v17;
    v43 = a3[7];
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v25 = a2;
    v26 = a1;
    v27 = ((unint64_t)a1 + v8) & v24;
    v28 = ((unint64_t)v25 + v8) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v27, v28, v36);
    v29 = v27 + v11;
    v23 = v26;
    v30 = v29 & v37;
    v31 = (v28 + v11) & v37;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v29 & v37, v31, v35);
    v32 = (v31 + v45) & v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((v30 + v45) & v39, v32, v38);
    v33 = (((v30 + v45) & v39) + v44) & v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v33, (v32 + v44) & v41, v40);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((v33 + v18) & v42, (((v32 + v44) & v41) + v18) & v42, v43);
  }
  else
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = (_QWORD *)(v22 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  return v23;
}

uint64_t sub_1A29DBC90(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2[4] - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a2[5] - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(a2[6] - 8);
  v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[7] - 8) + 8))((v16
                                                                                       + *(_QWORD *)(v15 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[7] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[7] - 8) + 80));
}

uint64_t sub_1A29DBD88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  v30 = *(_QWORD *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 16))((*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t sub_1A29DBECC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v28, v29);
  v30 = *(_QWORD *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 24))((*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t sub_1A29DC010(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v28, v29);
  v30 = *(_QWORD *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 32))((*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t sub_1A29DC154(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(a3[5] - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = *(_QWORD *)(a3[6] - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 + v26;
  v28 = (v27 + v22) & ~v26;
  v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v28, v29);
  v30 = *(_QWORD *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 40))((*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (*(_QWORD *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t sub_1A29DC298(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v13 = a3[4];
  v12 = a3[5];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  if (v15 > v11)
    v11 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v12 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  if (v17 <= v11)
    v18 = v11;
  else
    v18 = *(_DWORD *)(v16 + 84);
  v19 = a3[6];
  v20 = a3[7];
  v21 = *(_QWORD *)(v19 - 8);
  v22 = *(_DWORD *)(v21 + 84);
  if (v22 <= v18)
    v23 = v18;
  else
    v23 = *(_DWORD *)(v21 + 84);
  v24 = *(_QWORD *)(v20 - 8);
  if (*(_DWORD *)(v24 + 84) > v23)
    v23 = *(_DWORD *)(v24 + 84);
  if (!a2)
    return 0;
  v25 = *(unsigned __int8 *)(v9 + 80);
  v46 = *(_QWORD *)(v7 + 64) + v25;
  v45 = *(_QWORD *)(v9 + 64);
  v26 = *(unsigned __int8 *)(v14 + 80);
  v44 = *(_QWORD *)(v14 + 64);
  v27 = *(unsigned __int8 *)(v16 + 80);
  v28 = *(unsigned __int8 *)(v21 + 80);
  v43 = *(_QWORD *)(v16 + 64) + v28;
  v29 = *(unsigned __int8 *)(v24 + 80);
  v30 = *(_QWORD *)(v21 + 64) + v29;
  v31 = a2 - v23;
  if (a2 <= v23)
    goto LABEL_33;
  v32 = ((v30 + ((v43 + ((v44 + v27 + ((v45 + v26 + (v46 & ~v25)) & ~v26)) & ~v27)) & ~v28)) & ~v29)
      + *(_QWORD *)(v24 + 64);
  v33 = 8 * v32;
  if (v32 <= 3)
  {
    v35 = ((v31 + ~(-1 << v33)) >> v33) + 1;
    if (HIWORD(v35))
    {
      v34 = *(_DWORD *)(a1 + v32);
      v30 = *(_QWORD *)(v21 + 64) + v29;
      if (!v34)
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v35 > 0xFF)
    {
      v34 = *(unsigned __int16 *)(a1 + v32);
      v30 = *(_QWORD *)(v21 + 64) + v29;
      if (!*(_WORD *)(a1 + v32))
        goto LABEL_33;
      goto LABEL_24;
    }
    v30 = *(_QWORD *)(v21 + 64) + v29;
    if (v35 < 2)
    {
LABEL_33:
      if (v23)
      {
        if (v8 == v23)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        v38 = (v46 + a1) & ~v25;
        if (v10 == v23)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(v38, *(unsigned int *)(v9 + 84), v5);
        v39 = (v38 + v45 + v26) & ~v26;
        if (v15 == v23)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v14 + 48))(v39, *(unsigned int *)(v14 + 84), v13);
        v40 = (v39 + v44 + v27) & ~v27;
        if ((_DWORD)v17 == v23)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v40, v17, v12);
        v42 = (v43 + v40) & ~v28;
        if (v22 == v23)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v21 + 48))(v42, *(unsigned int *)(v21 + 84), v19);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v24 + 48))((v30 + v42) & ~v29, *(unsigned int *)(v24 + 84), v20);
      }
      return 0;
    }
  }
  v34 = *(unsigned __int8 *)(a1 + v32);
  if (!*(_BYTE *)(a1 + v32))
    goto LABEL_33;
LABEL_24:
  v36 = (v34 - 1) << v33;
  if (v32 > 3)
    v36 = 0;
  if ((_DWORD)v32)
  {
    if (v32 <= 3)
      v37 = v32;
    else
      v37 = 4;
    __asm { BR              X11 }
  }
  return v23 + v36 + 1;
}

void sub_1A29DC5B0(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(a4[2] - 8);
  v5 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v4 + 84))
    v6 = *(_DWORD *)(v4 + 84);
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v7 + 84) > v6)
    v6 = *(_DWORD *)(v7 + 84);
  v8 = *(_QWORD *)(a4[5] - 8);
  v9 = *(_QWORD *)(a4[6] - 8);
  v10 = *(_QWORD *)(a4[7] - 8);
  v11 = ((*(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(_QWORD *)(v8 + 64)
          + *(unsigned __int8 *)(v9 + 80)
          + ((*(_QWORD *)(v7 + 64)
            + *(unsigned __int8 *)(v8 + 80)
            + ((*(_QWORD *)(v5 + 64)
              + *(unsigned __int8 *)(v7 + 80)
              + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (*(_DWORD *)(v8 + 84) > v6)
    v6 = *(_DWORD *)(v8 + 84);
  if (*(_DWORD *)(v9 + 84) > v6)
    v6 = *(_DWORD *)(v9 + 84);
  if (*(_DWORD *)(v10 + 84) > v6)
    v6 = *(_DWORD *)(v10 + 84);
  if (a3 <= v6)
  {
    v12 = 0u;
    if (v6 >= a2)
      goto LABEL_29;
  }
  else if (v11 <= 3)
  {
    v15 = ((a3 - v6 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      v12 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v15 > 1;
    }
    if (v6 >= a2)
LABEL_29:
      __asm { BR              X11 }
  }
  else
  {
    v12 = 1u;
    if (v6 >= a2)
      goto LABEL_29;
  }
  v13 = ~v6 + a2;
  if (v11 < 4)
  {
    if ((_DWORD)v11)
    {
      v16 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_1A29DC880(uint64_t result)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(result + v1) = v2;
  return result;
}

uint64_t sub_1A29DC888(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(result + v1) = v2;
  return result;
}

void type metadata accessor for AsyncCombineLatest6Sequence()
{
  JUMPOUT(0x1A8589544);
}

uint64_t sub_1A29DC948()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for AsyncCombineLatest6Sequence.Iterator()
{
  JUMPOUT(0x1A8589544);
}

uint64_t SFAirDropNoticeNotificationsOptions.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A2AE3CD0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t SFAirDropNoticeNotificationsOptions.rawValue.getter()
{
  return 0x726566736E617274;
}

uint64_t sub_1A29DC9CC()
{
  sub_1A2AE400C();
  sub_1A2AE34C0();
  return sub_1A2AE4030();
}

uint64_t sub_1A29DCA20()
{
  return sub_1A2AE34C0();
}

uint64_t sub_1A29DCA3C()
{
  sub_1A2AE400C();
  sub_1A2AE34C0();
  return sub_1A2AE4030();
}

uint64_t sub_1A29DCA8C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A2AE3CD0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1A29DCADC(_QWORD *a1@<X8>)
{
  *a1 = 0x726566736E617274;
  a1[1] = 0xEA00000000004449;
}

unint64_t static SFAirDropNotice.hudSceneActivityType.getter()
{
  return 0xD000000000000012;
}

unint64_t static SFAirDropNotice.interventionSceneActivityType.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SFAirDropNoticeLaunchOptions.key.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t SFAirDropNoticeLaunchOptions.transferID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

Sharing::SFAirDropNoticeLaunchOptions __swiftcall SFAirDropNoticeLaunchOptions.init(transferID:)(Sharing::SFAirDropNoticeLaunchOptions transferID)
{
  Sharing::SFAirDropNoticeLaunchOptions *v1;

  *v1 = transferID;
  return transferID;
}

uint64_t sub_1A29DCB84()
{
  return 0x726566736E617274;
}

uint64_t sub_1A29DCBA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726566736E617274 && a2 == 0xEA00000000004449)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A29DCC40()
{
  sub_1A29DCD7C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29DCC68()
{
  sub_1A29DCD7C();
  return sub_1A2AE4108();
}

uint64_t SFAirDropNoticeLaunchOptions.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C018);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29DCD7C();
  sub_1A2AE40E4();
  sub_1A2AE3DF0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1A29DCD7C()
{
  unint64_t result;

  result = qword_1EE67C020;
  if (!qword_1EE67C020)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFE830, &type metadata for SFAirDropNoticeLaunchOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C020);
  }
  return result;
}

uint64_t SFAirDropNoticeLaunchOptions.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C028);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29DCD7C();
  sub_1A2AE40C0();
  if (!v2)
  {
    v9 = sub_1A2AE3D3C();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1A29DCEDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SFAirDropNoticeLaunchOptions.init(from:)(a1, a2);
}

uint64_t sub_1A29DCEF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C018);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29DCD7C();
  sub_1A2AE40E4();
  sub_1A2AE3DF0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Sharing::SFAirDropLaunchSettings_optional __swiftcall SFAirDropLaunchSettings.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x302010004uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 5)
    LOBYTE(v2) = 4;
  *v1 = v2;
  return (Sharing::SFAirDropLaunchSettings_optional)rawValue;
}

uint64_t SFAirDropLaunchSettings.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t sub_1A29DD010()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A29DD054()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A29DD080()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

Sharing::SFAirDropLaunchSettings_optional sub_1A29DD0C0(Swift::Int *a1)
{
  return SFAirDropLaunchSettings.init(rawValue:)(*a1);
}

void sub_1A29DD0C8(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

unint64_t static SFAirDropLaunchSettings.interventionIdentifier.getter()
{
  return 0xD000000000000021;
}

uint64_t static SFAirDropNoticeFailure.== infix(_:_:)()
{
  return 1;
}

uint64_t SFAirDropNoticeFailure.hash(into:)()
{
  return sub_1A2AE4018();
}

uint64_t SFAirDropNoticeFailure.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

unint64_t sub_1A29DD164()
{
  unint64_t result;

  result = qword_1EE67C030;
  if (!qword_1EE67C030)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropNoticeNotificationsOptions, &type metadata for SFAirDropNoticeNotificationsOptions);
    atomic_store(result, (unint64_t *)&qword_1EE67C030);
  }
  return result;
}

unint64_t sub_1A29DD1AC()
{
  unint64_t result;

  result = qword_1EE67C038;
  if (!qword_1EE67C038)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropLaunchSettings, &type metadata for SFAirDropLaunchSettings);
    atomic_store(result, (unint64_t *)&qword_1EE67C038);
  }
  return result;
}

unint64_t sub_1A29DD1F4()
{
  unint64_t result;

  result = qword_1EE67C040;
  if (!qword_1EE67C040)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropNoticeFailure, &type metadata for SFAirDropNoticeFailure);
    atomic_store(result, (unint64_t *)&qword_1EE67C040);
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropNoticeNotificationsOptions()
{
  return &type metadata for SFAirDropNoticeNotificationsOptions;
}

ValueMetadata *type metadata accessor for SFAirDropNotice()
{
  return &type metadata for SFAirDropNotice;
}

ValueMetadata *type metadata accessor for SFAirDropNoticeLaunchOptions()
{
  return &type metadata for SFAirDropNoticeLaunchOptions;
}

uint64_t storeEnumTagSinglePayload for SFAirDropLaunchSettings(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A29DD2B8 + 4 * byte_1A2AFE455[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A29DD2EC + 4 * byte_1A2AFE450[v4]))();
}

uint64_t sub_1A29DD2EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29DD2F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29DD2FCLL);
  return result;
}

uint64_t sub_1A29DD308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29DD310);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A29DD314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29DD31C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropLaunchSettings()
{
  return &type metadata for SFAirDropLaunchSettings;
}

ValueMetadata *type metadata accessor for SFAirDropNoticeFailure()
{
  return &type metadata for SFAirDropNoticeFailure;
}

uint64_t _s7Sharing35SFAirDropNoticeNotificationsOptionsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A29DD388 + 4 * byte_1A2AFE45A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A29DD3A8 + 4 * byte_1A2AFE45F[v4]))();
}

_BYTE *sub_1A29DD388(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A29DD3A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29DD3B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29DD3B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29DD3C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29DD3C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropNoticeLaunchOptions.CodingKeys()
{
  return &type metadata for SFAirDropNoticeLaunchOptions.CodingKeys;
}

unint64_t sub_1A29DD3E8()
{
  unint64_t result;

  result = qword_1EE67C048;
  if (!qword_1EE67C048)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFE808, &type metadata for SFAirDropNoticeLaunchOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C048);
  }
  return result;
}

unint64_t sub_1A29DD430()
{
  unint64_t result;

  result = qword_1EE67C050;
  if (!qword_1EE67C050)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFE778, &type metadata for SFAirDropNoticeLaunchOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C050);
  }
  return result;
}

unint64_t sub_1A29DD478()
{
  unint64_t result;

  result = qword_1EE67C058;
  if (!qword_1EE67C058)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFE7A0, &type metadata for SFAirDropNoticeLaunchOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C058);
  }
  return result;
}

uint64_t SFXPCResilientAsyncSequence.init(name:log:body:shouldRetry:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  _QWORD *v22;

  *a9 = a1;
  a9[1] = a2;
  v17 = (int *)type metadata accessor for SFXPCResilientAsyncSequence(0, a8, a10, a11);
  v18 = (char *)a9 + v17[11];
  v19 = sub_1A2AE31D8();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
  v21 = (_QWORD *)((char *)a9 + v17[12]);
  *v21 = a4;
  v21[1] = a5;
  v22 = (_QWORD *)((char *)a9 + v17[13]);
  *v22 = a6;
  v22[1] = a7;
  return result;
}

uint64_t type metadata accessor for SFXPCResilientAsyncSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCResilientAsyncSequence);
}

uint64_t sub_1A29DD568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  sub_1A29DD5EC(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t sub_1A29DD5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  swift_defaultActor_initialize();
  v15 = (_QWORD *)(v7 + qword_1EE6ADCE8);
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)(v7 + 112) = a1;
  *(_QWORD *)(v7 + 120) = a2;
  v16 = v7 + qword_1EE6ADCC0;
  v17 = sub_1A2AE31D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  v18 = (_QWORD *)(v7 + qword_1EE6ADCF8);
  *v18 = a4;
  v18[1] = a5;
  v19 = (_QWORD *)(v7 + qword_1EE6ADCF0);
  *v19 = a6;
  v19[1] = a7;
  return v7;
}

uint64_t SFXPCResilientAsyncSequence.AsyncIterator.next()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[33] = a1;
  v2[34] = v1;
  v2[35] = *v1;
  v3 = sub_1A2AE3BC8();
  v2[36] = v3;
  v2[37] = *(_QWORD *)(v3 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v4 = sub_1A2AE3BE0();
  v2[40] = v4;
  v2[41] = *(_QWORD *)(v4 - 8);
  v2[42] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29DD744()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD *);

  v1 = v0[34];
  v2 = (_QWORD *)v0[35];
  v0[43] = *(_QWORD *)(v1 + 112);
  v3 = qword_1EE6ADCE8;
  v0[44] = *(_QWORD *)(v1 + 120);
  v0[45] = v3;
  v4 = (_QWORD *)(v1 + v3);
  v5 = qword_1EE6ADCF8;
  v6 = qword_1EE6ADCC0;
  v0[46] = qword_1EE6ADCF8;
  v0[47] = v6;
  swift_bridgeObjectRetain();
  if (*v4)
  {
    v7 = v4[1];
    v0[17] = *v4;
    v0[18] = v7;
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[48] = v8;
    v9 = v2[10];
    v0[49] = v9;
    v10 = v2[11];
    v0[50] = v10;
    v11 = v2[12];
    v0[51] = v11;
    type metadata accessor for SFXPCAsyncSequence.AsyncIterator(0, v9, v10, v11);
    *v8 = v0;
    v8[1] = sub_1A29DD870;
    return SFXPCAsyncSequence.AsyncIterator.next()(v0[33]);
  }
  else
  {
    v14 = (uint64_t (*)(_QWORD *))(**(int **)(v1 + v5) + *(_QWORD *)(v1 + v5));
    v13 = (_QWORD *)swift_task_alloc();
    v0[53] = v13;
    *v13 = v0;
    v13[1] = sub_1A29DDE40;
    return v14(v0 + 5);
  }
}

uint64_t sub_1A29DD870()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29DD8D4()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 392) - 8) + 48))(*(_QWORD *)(v0 + 264), 1) == 1)
  {
    swift_bridgeObjectRetain();
    v1 = sub_1A2AE31C0();
    v2 = sub_1A2AE394C();
    v3 = os_log_type_enabled(v1, v2);
    v4 = *(_QWORD *)(v0 + 352);
    if (v3)
    {
      v5 = *(_QWORD *)(v0 + 344);
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 256) = sub_1A296DA00(v5, v4, &v9);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A2830000, v1, v2, "XPCResilientAsyncSequence[%s] END. Inner sequence finished", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v7, -1, -1);
      MEMORY[0x1A85896E8](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29DDAAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;

  v1 = *(void **)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = v1;
  v6 = sub_1A2AE31C0();
  v7 = sub_1A2AE3964();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 416);
    v33 = v2;
    v10 = *(_QWORD *)(v0 + 344);
    v9 = *(_QWORD *)(v0 + 352);
    v11 = swift_slowAlloc();
    v31 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v35 = v32;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 224) = sub_1A296DA00(v10, v9, &v35);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2112;
    v12 = v8;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 232) = v13;
    v2 = v33;
    sub_1A2AE3A60();
    *v31 = v13;

    _os_log_impl(&dword_1A2830000, v6, v7, "XPCResilientAsyncSequence[%s] CONTINUE. Recreated sequence after error {error: %@}", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v31, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v32, -1, -1);
    MEMORY[0x1A85896E8](v11, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 416);

    swift_bridgeObjectRelease_n();
  }
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(void **)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 400);
  v19 = (uint64_t *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 360));
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = v2;
  type metadata accessor for SFXPCAsyncSequence(0, v17, v18, v15);
  SFXPCAsyncSequence.makeAsyncIterator()();

  swift_release();
  swift_release();
  v20 = *v19;
  *(_OWORD *)v19 = *(_OWORD *)(v0 + 72);
  sub_1A297CC78(v20);
  v21 = *(_QWORD *)(v0 + 272);
  v22 = (_QWORD *)(v21 + *(_QWORD *)(v0 + 360));
  if (*v22)
  {
    v23 = *(_QWORD **)(v0 + 280);
    v24 = v22[1];
    *(_QWORD *)(v0 + 136) = *v22;
    *(_QWORD *)(v0 + 144) = v24;
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v25;
    v26 = v23[10];
    *(_QWORD *)(v0 + 392) = v26;
    v27 = v23[11];
    *(_QWORD *)(v0 + 400) = v27;
    v28 = v23[12];
    *(_QWORD *)(v0 + 408) = v28;
    type metadata accessor for SFXPCAsyncSequence.AsyncIterator(0, v26, v27, v28);
    *v25 = v0;
    v25[1] = sub_1A29DD870;
    return SFXPCAsyncSequence.AsyncIterator.next()(*(_QWORD *)(v0 + 264));
  }
  else
  {
    v34 = (uint64_t (*)(uint64_t))(**(int **)(v21 + *(_QWORD *)(v0 + 368))
                                          + *(_QWORD *)(v21 + *(_QWORD *)(v0 + 368)));
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v30;
    *v30 = v0;
    v30[1] = sub_1A29DDE40;
    return v34(v0 + 40);
  }
}

uint64_t sub_1A29DDE40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29DDEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain_n();
  v3 = sub_1A2AE31C0();
  v4 = sub_1A2AE3964();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 352);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 344);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 4) = sub_1A296DA00(v7, v6, &v24);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v3, v4, "XPCResilientAsyncSequence[%s] START. Created initial sequence.", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v9, -1, -1);
    MEMORY[0x1A85896E8](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v10 = *(uint64_t **)(v0 + 280);
  v11 = (uint64_t *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 360));
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 112) = v2;
  type metadata accessor for SFXPCAsyncSequence(0, v10[10], v10[11], v10[12]);
  SFXPCAsyncSequence.makeAsyncIterator()();
  swift_release();
  v12 = *v11;
  *(_OWORD *)v11 = *(_OWORD *)(v0 + 88);
  sub_1A297CC78(v12);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = (_QWORD *)(v13 + *(_QWORD *)(v0 + 360));
  if (*v14)
  {
    v15 = *(_QWORD **)(v0 + 280);
    v16 = v14[1];
    *(_QWORD *)(v0 + 136) = *v14;
    *(_QWORD *)(v0 + 144) = v16;
    swift_retain();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v17;
    v18 = v15[10];
    *(_QWORD *)(v0 + 392) = v18;
    v19 = v15[11];
    *(_QWORD *)(v0 + 400) = v19;
    v20 = v15[12];
    *(_QWORD *)(v0 + 408) = v20;
    type metadata accessor for SFXPCAsyncSequence.AsyncIterator(0, v18, v19, v20);
    *v17 = v0;
    v17[1] = sub_1A29DD870;
    return SFXPCAsyncSequence.AsyncIterator.next()(*(_QWORD *)(v0 + 264));
  }
  else
  {
    v23 = (uint64_t (*)(uint64_t))(**(int **)(v13 + *(_QWORD *)(v0 + 368))
                                          + *(_QWORD *)(v13 + *(_QWORD *)(v0 + 368)));
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v22;
    *v22 = v0;
    v22[1] = sub_1A29DDE40;
    return v23(v0 + 40);
  }
}

uint64_t sub_1A29DE140()
{
  uint64_t v0;
  char v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];

  v1 = sub_1A29DF0A8(*(void **)(v0 + 416));
  v2 = *(void **)(v0 + 416);
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    swift_bridgeObjectRetain();
    v4 = v2;
    v5 = sub_1A2AE31C0();
    v6 = sub_1A2AE394C();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void **)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 352);
    if (v7)
    {
      v28 = *(_QWORD *)(v0 + 344);
      v10 = swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v30[0] = v29;
      *(_DWORD *)v10 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 240) = sub_1A296DA00(v28, v9, v30);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 12) = 2112;
      v12 = v8;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 248) = v13;
      sub_1A2AE3A60();
      *v11 = v13;

      _os_log_impl(&dword_1A2830000, v5, v6, "XPCResilientAsyncSequence[%s] RETRY. Recreating sequence {error: %@}", (uint8_t *)v10, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v11, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v29, -1, -1);
      MEMORY[0x1A85896E8](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1A2AE3BD4();
    *(_OWORD *)(v0 + 152) = xmmword_1A2AFE880;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_BYTE *)(v0 + 32) = 1;
    return swift_task_switch();
  }
  else
  {
    v14 = v2;
    swift_bridgeObjectRetain();
    v15 = v2;
    v16 = sub_1A2AE31C0();
    v17 = sub_1A2AE394C();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void **)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 352);
    if (v18)
    {
      v21 = *(_QWORD *)(v0 + 344);
      v22 = swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v30[0] = v24;
      *(_DWORD *)v22 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 200) = sub_1A296DA00(v21, v20, v30);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2112;
      v25 = v19;
      v26 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 168) = v26;
      sub_1A2AE3A60();
      *v23 = v26;

      _os_log_impl(&dword_1A2830000, v16, v17, "XPCResilientAsyncSequence[%s] FAILED. Non retryable error {error: %@}", (uint8_t *)v22, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v23, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v24, -1, -1);
      MEMORY[0x1A85896E8](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A29DE5D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v2 = v0[37];
  v1 = v0[38];
  v3 = v0[36];
  sub_1A296E8A4(&qword_1EE675DB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_1A2AE3F58();
  sub_1A296E8A4(&qword_1EE675DA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_1A2AE3BEC();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[55] = v4;
  v4(v1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[56] = v5;
  *v5 = v0;
  v5[1] = sub_1A29DE6E0;
  return sub_1A2AE3F64();
}

uint64_t sub_1A29DE6E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 440))(*(_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 288));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 328);
    v3 = *(_QWORD *)(v2 + 336);
    v5 = *(_QWORD *)(v2 + 320);
    (*(void (**)(_QWORD, _QWORD))(v2 + 440))(*(_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 288));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_1A29DE788()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD *);

  v1 = (_QWORD *)(v0[34] + v0[46]);
  v4 = (uint64_t (*)(_QWORD *))(*(int *)*v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[58] = v2;
  *v2 = v0;
  v2[1] = sub_1A29DE7F8;
  return v4(v0 + 15);
}

uint64_t sub_1A29DE7F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29DE85C()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[42], v0[40]);
  return swift_task_switch();
}

uint64_t sub_1A29DE8A4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  os_log_type_t type;
  NSObject *log;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 456);
  v2 = *(void **)(v0 + 416);
  v3 = v2;
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = v1;
  v7 = sub_1A2AE31C0();
  v8 = sub_1A2AE394C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 416);
    log = v7;
    v11 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 352);
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23 = v22;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 176) = sub_1A296DA00(v11, v10, &v23);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    v14 = v1;
    type = v8;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 184) = v15;
    sub_1A2AE3A60();
    *v13 = v15;

    *(_WORD *)(v12 + 22) = 2112;
    v16 = v9;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 192) = v17;
    sub_1A2AE3A60();
    v13[1] = v17;

    _os_log_impl(&dword_1A2830000, log, type, "XPCResilientAsyncSequence[%s] FAILED. Unable to recreate sequence. Throwing iterationError {error: %@, iterationError: %@}", (uint8_t *)v12, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v22, -1, -1);
    MEMORY[0x1A85896E8](v12, -1, -1);

  }
  else
  {
    v18 = *(void **)(v0 + 416);

    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29DEB80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  os_log_type_t type;
  NSObject *log;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 472);
  v2 = *(void **)(v0 + 416);
  v3 = v2;
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = v1;
  v7 = sub_1A2AE31C0();
  v8 = sub_1A2AE394C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 416);
    log = v7;
    v11 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 352);
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23 = v22;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 176) = sub_1A296DA00(v11, v10, &v23);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    v14 = v1;
    type = v8;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 184) = v15;
    sub_1A2AE3A60();
    *v13 = v15;

    *(_WORD *)(v12 + 22) = 2112;
    v16 = v9;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 192) = v17;
    sub_1A2AE3A60();
    v13[1] = v17;

    _os_log_impl(&dword_1A2830000, log, type, "XPCResilientAsyncSequence[%s] FAILED. Unable to recreate sequence. Throwing iterationError {error: %@, iterationError: %@}", (uint8_t *)v12, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v22, -1, -1);
    MEMORY[0x1A85896E8](v12, -1, -1);

  }
  else
  {
    v18 = *(void **)(v0 + 416);

    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29DEE5C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v1 = *(void **)(v0 + 432);
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = sub_1A2AE31C0();
  v5 = sub_1A2AE394C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 432);
    v8 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 352);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16 = v11;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 216) = sub_1A296DA00(v8, v7, &v16);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2112;
    v12 = v6;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 208) = v13;
    sub_1A2AE3A60();
    *v10 = v13;

    _os_log_impl(&dword_1A2830000, v4, v5, "XPCResilientAsyncSequence[%s] FAILED. Failed to create initial sequence.  {error: %@}", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v11, -1, -1);
    MEMORY[0x1A85896E8](v9, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 432);

    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29DF0A8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  int v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(void *);
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  os_log_t v40;
  uint64_t v41;
  _BYTE v43[4];
  int v44;
  os_log_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D00);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1A2AE2DC4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = (uint64_t)a1;
  v11 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  v12 = swift_dynamicCast();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v12)
  {
    v13(v6, 0, 1, v7);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    v14 = sub_1A2AE2DB8();
    v15 = a1;
    v16 = a1;
    swift_retain();
    v17 = sub_1A2AE31C0();
    v18 = sub_1A2AE3964();
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc();
      v46 = (_QWORD *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v49 = v47;
      *(_DWORD *)v20 = 136315650;
      v45 = v17;
      v44 = v19;
      v21 = v14;
      v22 = *(_QWORD *)(v2 + 112);
      v23 = *(_QWORD *)(v2 + 120);
      swift_bridgeObjectRetain();
      v48 = sub_1A296DA00(v22, v23, &v49);
      sub_1A2AE3A60();
      swift_release();
      v14 = v21;
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 1024;
      LODWORD(v48) = v21 & 1;
      sub_1A2AE3A60();
      *(_WORD *)(v20 + 18) = 2112;
      v24 = a1;
      v25 = _swift_stdlib_bridgeErrorToNSError();
      v48 = v25;
      sub_1A2AE3A60();
      v26 = v46;
      *v46 = v25;

      v17 = v45;
      _os_log_impl(&dword_1A2830000, v45, (os_log_type_t)v44, "XPCResilientAsyncSequence[%s] Evaluated Cocoa Error {isXPCConnectionError: %{BOOL}d, error: %@}", (uint8_t *)v20, 0x1Cu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v26, -1, -1);
      v27 = v47;
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v27, -1, -1);
      MEMORY[0x1A85896E8](v20, -1, -1);
    }
    else
    {
      swift_release();

    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v13(v6, 1, 1, v7);
    sub_1A29E00D8((uint64_t)v6);
    v28 = *(uint64_t (**)(void *))(v1 + qword_1EE6ADCF0);
    if (v28)
    {
      swift_retain();
      v14 = v28(a1);
      v29 = a1;
      swift_retain();
      v30 = a1;
      swift_retain();
      v31 = sub_1A2AE31C0();
      v32 = sub_1A2AE3964();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v46 = (_QWORD *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v49 = v47;
        *(_DWORD *)v33 = 136315650;
        v45 = v31;
        v34 = v14;
        v35 = *(_QWORD *)(v2 + 112);
        v36 = *(_QWORD *)(v2 + 120);
        swift_bridgeObjectRetain();
        v48 = sub_1A296DA00(v35, v36, &v49);
        sub_1A2AE3A60();
        swift_release_n();
        v14 = v34;
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        LODWORD(v48) = v34 & 1;
        sub_1A2AE3A60();
        *(_WORD *)(v33 + 18) = 2112;
        v37 = a1;
        v38 = _swift_stdlib_bridgeErrorToNSError();
        v48 = v38;
        sub_1A2AE3A60();
        v39 = v46;
        *v46 = v38;

        v40 = v45;
        _os_log_impl(&dword_1A2830000, v45, v32, "XPCResilientAsyncSequence[%s] Evaluated shouldRetryBlock {shouldRetry: %{BOOL}d, error: %@}", (uint8_t *)v33, 0x1Cu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
        swift_arrayDestroy();
        MEMORY[0x1A85896E8](v39, -1, -1);
        v41 = v47;
        swift_arrayDestroy();
        MEMORY[0x1A85896E8](v41, -1, -1);
        MEMORY[0x1A85896E8](v33, -1, -1);
        sub_1A297CC78((uint64_t)v28);

      }
      else
      {
        sub_1A297CC78((uint64_t)v28);
        swift_release_n();

      }
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t SFXPCResilientAsyncSequence.AsyncIterator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + qword_1EE6ADCC0;
  v2 = sub_1A2AE31D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  sub_1A297CC78(*(_QWORD *)(v0 + qword_1EE6ADCF0));
  sub_1A297CC78(*(_QWORD *)(v0 + qword_1EE6ADCE8));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SFXPCResilientAsyncSequence.AsyncIterator.__deallocating_deinit()
{
  SFXPCResilientAsyncSequence.AsyncIterator.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t SFXPCResilientAsyncSequence.AsyncIterator.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1A29DF72C()
{
  return SFXPCResilientAsyncSequence.AsyncIterator.unownedExecutor.getter();
}

uint64_t sub_1A29DF744(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2971EBC;
  return SFXPCResilientAsyncSequence.AsyncIterator.next()(a1);
}

uint64_t SFXPCResilientAsyncSequence.makeAsyncIterator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_1A2AE31D8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SFXPCResilientAsyncSequence.AsyncIterator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v7 = *v1;
  v8 = v1[1];
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, (char *)v1 + *(int *)(a1 + 44), v3);
  v9 = *(int *)(a1 + 52);
  v10 = (uint64_t *)((char *)v1 + *(int *)(a1 + 48));
  v11 = *v10;
  v12 = v10[1];
  v13 = (char *)v1 + v9;
  v14 = *(uint64_t *)((char *)v1 + v9);
  v15 = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A29DF9C8(v14);
  v16 = swift_allocObject();
  sub_1A29DD5EC(v7, v8, (uint64_t)v6, v11, v12, v14, v15);
  return v16;
}

uint64_t sub_1A29DF8A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = SFXPCResilientAsyncSequence.makeAsyncIterator()(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  *a2 = v5;
  return result;
}

uint64_t sub_1A29DF8EC(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void sub_1A29DF90C(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_1A2AE3A60();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t type metadata accessor for SFXPCResilientAsyncSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCResilientAsyncSequence.AsyncIterator);
}

uint64_t sub_1A29DF9C8(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void sub_1A29DF9D8()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29DF9E8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A29DF9F0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE31D8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A29DFA7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[11];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A2AE31D8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[12];
    v14 = a3[13];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v4 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = *v19;
    swift_retain();
    if (v20)
    {
      v21 = v19[1];
      *v18 = v20;
      v18[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
  }
  return v4;
}

uint64_t sub_1A29DFB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_1A2AE31D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = swift_release();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 52)))
    return swift_release();
  return result;
}

_QWORD *sub_1A29DFBF0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[11];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A2AE31D8();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[12];
  v13 = a3[13];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = *v18;
  swift_retain();
  if (v19)
  {
    v20 = v18[1];
    *v17 = v19;
    v17[1] = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  return a1;
}

_QWORD *sub_1A29DFCB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A2AE31D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[12];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  v14 = a3[13];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a1 + v14);
  v18 = *(_QWORD *)((char *)a2 + v14);
  if (!v17)
  {
    if (v18)
    {
      v20 = *((_QWORD *)v16 + 1);
      *v15 = v18;
      v15[1] = v20;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    return a1;
  }
  if (!v18)
  {
    swift_release();
    goto LABEL_7;
  }
  v19 = *((_QWORD *)v16 + 1);
  *v15 = v18;
  v15[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1A29DFDB4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[11];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A2AE31D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12[1];
    *v11 = v13;
    v11[1] = v14;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  return a1;
}

_QWORD *sub_1A29DFE50(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[11];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A2AE31D8();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  swift_release();
  v11 = a3[13];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = *(_QWORD *)((char *)a1 + v11);
  v15 = *v13;
  if (!v14)
  {
    if (v15)
    {
      v17 = v13[1];
      *v12 = v15;
      v12[1] = v17;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  if (!v15)
  {
    swift_release();
    goto LABEL_7;
  }
  v16 = v13[1];
  *v12 = v15;
  v12[1] = v16;
  swift_release();
  return a1;
}

uint64_t sub_1A29DFF2C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29DFF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A2AE31D8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_1A29DFFB4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29DFFC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A2AE31D8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A29E0034()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE31D8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SFXPCResilientAsyncSequence.AsyncIterator()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1A29E00D8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A29E0118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE67C078);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67C078);
  if (qword_1EE676030 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE676010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t SFAirDropSend.ItemMetadata.fileName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.fileType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.fileSubType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.fileSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SFAirDropSend.ItemMetadata.fileBOMPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.fileIsDirectory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t SFAirDropSend.ItemMetadata.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.previewImageData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  sub_1A297CF68(v1, *(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t SFAirDropSend.ItemMetadata.wasString.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

__n128 SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unsigned __int8 a11, __n128 a12, unint64_t a13, unint64_t a14, unsigned __int8 a15)
{
  __n128 result;

  result = a12;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4].n128_u64[0] = a10;
  a9[4].n128_u8[8] = a11;
  a9[5] = a12;
  a9[6].n128_u64[0] = a13;
  a9[6].n128_u64[1] = a14;
  a9[7].n128_u8[0] = a15;
  return result;
}

uint64_t sub_1A29E030C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A29E0340 + 4 * byte_1A2AFEA00[a1]))(0x656D614E656C6966, 0xE800000000000000);
}

uint64_t sub_1A29E0340()
{
  return 0x65707954656C6966;
}

uint64_t sub_1A29E0354()
{
  return 0x54627553656C6966;
}

uint64_t sub_1A29E0374()
{
  return 0x657A6953656C6966;
}

uint64_t sub_1A29E0388()
{
  return 0x504D4F42656C6966;
}

uint64_t sub_1A29E03A8()
{
  return 0x69447349656C6966;
}

uint64_t sub_1A29E03CC()
{
  return 0x7470697263736564;
}

unint64_t sub_1A29E03EC()
{
  return 0xD000000000000010;
}

uint64_t sub_1A29E0408()
{
  return 0x6E69727453736177;
}

uint64_t sub_1A29E0424()
{
  unsigned __int8 *v0;

  return sub_1A29E030C(*v0);
}

uint64_t sub_1A29E042C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29E568C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A29E0450(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1A29E045C()
{
  sub_1A29E5540();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E0484()
{
  sub_1A29E5540();
  return sub_1A2AE4108();
}

uint64_t SFAirDropSend.ItemMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C090);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = *(_QWORD *)(v1 + 16);
  v25 = *(_QWORD *)(v1 + 24);
  v26 = v6;
  v7 = *(_QWORD *)(v1 + 32);
  v23 = *(_QWORD *)(v1 + 40);
  v24 = v7;
  v8 = *(_QWORD *)(v1 + 48);
  v21 = *(_QWORD *)(v1 + 56);
  v22 = v8;
  v9 = *(_QWORD *)(v1 + 64);
  v30 = *(unsigned __int8 *)(v1 + 72);
  v10 = *(_QWORD *)(v1 + 80);
  v19 = *(_QWORD *)(v1 + 88);
  v20 = v9;
  v16 = *(_QWORD *)(v1 + 96);
  v17 = *(_QWORD *)(v1 + 104);
  v18 = v10;
  v11 = a1[3];
  v12 = a1;
  v13 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_1A29E5540();
  sub_1A2AE40E4();
  LOBYTE(v28) = 0;
  v14 = v27;
  sub_1A2AE3DF0();
  if (!v14)
  {
    LOBYTE(v28) = 1;
    sub_1A2AE3DC0();
    LOBYTE(v28) = 2;
    sub_1A2AE3DC0();
    LOBYTE(v28) = 3;
    sub_1A2AE3E14();
    LOBYTE(v28) = 4;
    sub_1A2AE3DC0();
    LOBYTE(v28) = 5;
    sub_1A2AE3DFC();
    LOBYTE(v28) = 6;
    sub_1A2AE3DC0();
    v28 = v16;
    v29 = v17;
    v31 = 7;
    sub_1A29735F8();
    sub_1A2AE3DE4();
    LOBYTE(v28) = 8;
    sub_1A2AE3DFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t SFAirDropSend.ItemMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  char v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C0A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E5540();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v49) = 0;
  v9 = sub_1A2AE3D3C();
  LOBYTE(v49) = 1;
  v11 = v10;
  swift_bridgeObjectRetain();
  v12 = sub_1A2AE3D00();
  v48 = v11;
  v45 = v12;
  v46 = v9;
  LOBYTE(v49) = 2;
  v14 = v13;
  swift_bridgeObjectRetain();
  v15 = sub_1A2AE3D00();
  v47 = v14;
  v16 = v15;
  LOBYTE(v49) = 3;
  v18 = v17;
  swift_bridgeObjectRetain();
  v43 = sub_1A2AE3D60();
  v44 = v16;
  v19 = v18;
  LOBYTE(v49) = 4;
  v20 = sub_1A2AE3D00();
  v22 = v21;
  v42 = v20;
  LOBYTE(v49) = 5;
  swift_bridgeObjectRetain();
  v51 = sub_1A2AE3D48();
  LOBYTE(v49) = 6;
  v39 = sub_1A2AE3D00();
  v52 = 7;
  v25 = v24;
  sub_1A2973680();
  v41 = v25;
  swift_bridgeObjectRetain();
  sub_1A2AE3D30();
  v26 = v49;
  LOBYTE(v49) = 8;
  v40 = v26;
  v38 = v50;
  sub_1A297CF68(v26, v50);
  LOBYTE(v25) = sub_1A2AE3D48();
  v51 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v37 = v25 & 1;
  v36 = v22;
  v27 = v48;
  swift_bridgeObjectRetain();
  v28 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = v41;
  swift_bridgeObjectRetain();
  v30 = v40;
  v31 = v38;
  sub_1A297CF68(v40, v38);
  sub_1A29B98D8(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v45;
  *(_QWORD *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 32) = v44;
  *(_QWORD *)(a2 + 40) = v19;
  v33 = v42;
  *(_QWORD *)(a2 + 48) = v43;
  *(_QWORD *)(a2 + 56) = v33;
  *(_QWORD *)(a2 + 64) = v32;
  *(_BYTE *)(a2 + 72) = v51;
  v34 = v40;
  *(_QWORD *)(a2 + 80) = v39;
  *(_QWORD *)(a2 + 88) = v29;
  *(_QWORD *)(a2 + 96) = v34;
  *(_QWORD *)(a2 + 104) = v31;
  *(_BYTE *)(a2 + 112) = v37;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1A29B98D8(v34, v31);
}

uint64_t sub_1A29E0D74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropSend.ItemMetadata.init(from:)(a1, a2);
}

uint64_t sub_1A29E0D88(_QWORD *a1)
{
  return SFAirDropSend.ItemMetadata.encode(to:)(a1);
}

uint64_t SFAirDropSend.Item.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, type metadata accessor for SFSecurityScopedURL);
}

uint64_t SFAirDropSend.Item.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropSend.Item() + 20);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 56);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_BYTE *)(v3 + 72);
  v10 = *(_QWORD *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 88);
  v11 = *(_QWORD *)(v3 + 96);
  v12 = *(_QWORD *)(v3 + 104);
  v13 = *(_BYTE *)(v3 + 112);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  *(_BYTE *)(a1 + 112) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1A297CF68(v11, v12);
}

__n128 SFAirDropSend.Item.init(url:metadata:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __n128 result;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = a2[1];
  v15 = *a2;
  v12 = a2[3];
  v13 = a2[2];
  v4 = *((_QWORD *)a2 + 8);
  v5 = *((_BYTE *)a2 + 72);
  v11 = (__n128)a2[5];
  v6 = *((_QWORD *)a2 + 12);
  v7 = *((_QWORD *)a2 + 13);
  v8 = *((_BYTE *)a2 + 112);
  sub_1A297EB48(a1, a3, type metadata accessor for SFSecurityScopedURL);
  v9 = a3 + *(int *)(type metadata accessor for SFAirDropSend.Item() + 20);
  *(_OWORD *)v9 = v15;
  *(_OWORD *)(v9 + 16) = v14;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 64) = v4;
  *(_BYTE *)(v9 + 72) = v5;
  result = v11;
  *(__n128 *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 96) = v6;
  *(_QWORD *)(v9 + 104) = v7;
  *(_BYTE *)(v9 + 112) = v8;
  return result;
}

uint64_t sub_1A29E0F38()
{
  _BYTE *v0;

  if (*v0)
    return 0x617461646174656DLL;
  else
    return 7107189;
}

uint64_t sub_1A29E0F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29E5AA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29E0F90()
{
  sub_1A29E55C0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E0FB8()
{
  sub_1A29E55C0();
  return sub_1A2AE4108();
}

uint64_t SFAirDropSend.Item.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C0A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E55C0();
  sub_1A2AE40E4();
  LOBYTE(v18) = 0;
  type metadata accessor for SFSecurityScopedURL(0);
  sub_1A296E8A4(&qword_1EE67C0B8, type metadata accessor for SFSecurityScopedURL, (uint64_t)&protocol conformance descriptor for SFSecurityScopedURL);
  sub_1A2AE3E2C();
  if (!v2)
  {
    v9 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SFAirDropSend.Item() + 20));
    v10 = v9[1];
    v11 = v9[8];
    v12 = *((_BYTE *)v9 + 72);
    v13 = *((_BYTE *)v9 + 112);
    v18 = *v9;
    v19 = v10;
    v14 = *((_OWORD *)v9 + 2);
    v20 = *((_OWORD *)v9 + 1);
    v21 = v14;
    v22 = *((_OWORD *)v9 + 3);
    v23 = v11;
    v24 = v12;
    v15 = *((_OWORD *)v9 + 6);
    v25 = *((_OWORD *)v9 + 5);
    v26 = v15;
    v27 = v13;
    v17[7] = 1;
    sub_1A29E5604();
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SFAirDropSend.Item.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;

  v24 = a2;
  v25 = type metadata accessor for SFSecurityScopedURL(0);
  MEMORY[0x1E0C80A78](v25);
  v26 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C0C8);
  v5 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDropSend.Item();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E55C0();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v23 = a1;
  v11 = (uint64_t)v10;
  LOBYTE(v28) = 0;
  sub_1A296E8A4(&qword_1EE67C0D0, type metadata accessor for SFSecurityScopedURL, (uint64_t)&protocol conformance descriptor for SFSecurityScopedURL);
  v12 = (uint64_t)v26;
  v13 = v27;
  sub_1A2AE3D78();
  sub_1A297EB48(v12, v11, type metadata accessor for SFSecurityScopedURL);
  v38 = 1;
  sub_1A29E5648();
  sub_1A2AE3D78();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v29;
  v15 = v33;
  v16 = v34;
  v17 = v37;
  v18 = v11 + *(int *)(v8 + 20);
  *(_QWORD *)v18 = v28;
  *(_QWORD *)(v18 + 8) = v14;
  v19 = v31;
  *(_OWORD *)(v18 + 16) = v30;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = v32;
  *(_QWORD *)(v18 + 64) = v15;
  *(_BYTE *)(v18 + 72) = v16;
  v20 = v36;
  *(_OWORD *)(v18 + 80) = v35;
  *(_OWORD *)(v18 + 96) = v20;
  *(_BYTE *)(v18 + 112) = v17;
  sub_1A2990388(v11, v24, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  return sub_1A297DA3C(v11, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
}

uint64_t sub_1A29E1428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropSend.Item.init(from:)(a1, a2);
}

uint64_t sub_1A29E143C(_QWORD *a1)
{
  return SFAirDropSend.Item.encode(to:)(a1);
}

uint64_t SFAirDropSend.ItemPromise.task.getter()
{
  return swift_retain();
}

uint64_t SFAirDropSend.ItemPromise.loadHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A29DF9C8(v1);
  return v1;
}

uint64_t SFAirDropSend.ItemPromise.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_BYTE *)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 112);
  v9 = *(_QWORD *)(v1 + 120);
  v10 = *(_QWORD *)(v1 + 128);
  v11 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  v12 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_BYTE *)(a1 + 112) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1A297CF68(v9, v10);
}

__n128 SFAirDropSend.ItemPromise.init(task:metadata:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a3 + 40) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a3 + 56) = v3;
  *(_OWORD *)(a3 + 72) = *((_OWORD *)a2 + 3);
  result = *((__n128 *)a2 + 5);
  v5 = *((_OWORD *)a2 + 6);
  *(__n128 *)(a3 + 104) = result;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[8];
  v9 = *((_BYTE *)a2 + 72);
  v10 = *((_BYTE *)a2 + 112);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 88) = v8;
  *(_BYTE *)(a3 + 96) = v9;
  *(_OWORD *)(a3 + 120) = v5;
  *(_BYTE *)(a3 + 136) = v10;
  return result;
}

__n128 SFAirDropSend.ItemPromise.init(loadHandler:metadata:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a4 + 40) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a4 + 56) = v4;
  *(_OWORD *)(a4 + 72) = *((_OWORD *)a3 + 3);
  result = *((__n128 *)a3 + 5);
  v6 = *((_OWORD *)a3 + 6);
  *(__n128 *)(a4 + 104) = result;
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[8];
  v10 = *((_BYTE *)a3 + 72);
  v11 = *((_BYTE *)a3 + 112);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = v7;
  *(_QWORD *)(a4 + 32) = v8;
  *(_QWORD *)(a4 + 88) = v9;
  *(_BYTE *)(a4 + 96) = v10;
  *(_OWORD *)(a4 + 120) = v6;
  *(_BYTE *)(a4 + 136) = v11;
  return result;
}

uint64_t static SFAirDropSend.convertItemPromises(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  CGImageRef v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[25];
  uint64_t v59;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  swift_bridgeObjectRetain();
  sub_1A2AE3124();
  v5 = (_QWORD *)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658) + 68));
  *v5 = &unk_1EE67C0E8;
  v5[1] = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v47 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v59 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE3C4(0, v6, 0);
    v47 = v59;
    v7 = (_OWORD *)(a2 + 32);
    do
    {
      v8 = v7[3];
      v53 = v7[2];
      v54 = v8;
      v9 = v7[5];
      v55 = v7[4];
      v56 = v9;
      v10 = v7[7];
      v57 = v7[6];
      *(_OWORD *)v58 = v10;
      *(_OWORD *)&v58[9] = *(_OWORD *)((char *)v7 + 121);
      v11 = v7[1];
      v52[0] = *v7;
      v52[1] = v11;
      v51 = v53;
      v12 = *((_QWORD *)&v56 + 1);
      v14 = *(_QWORD *)&v58[8];
      v13 = *(_QWORD *)&v58[16];
      v15 = v58[24];
      v49 = v55;
      v50 = v54;
      v45 = *((_QWORD *)&v53 + 1);
      v46 = *((_QWORD *)&v11 + 1);
      v44 = v56;
      v43 = v57;
      v42 = *((_QWORD *)&v57 + 1);
      v48 = v10;
      if (*(_QWORD *)&v58[16] >> 60 == 15)
      {
        sub_1A29E5E84(v52);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v17 = objc_allocWithZone(MEMORY[0x1E0C9DDC8]);
        sub_1A29E5E84(v52);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297CF68(v14, v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A297CF68(v14, v13);
        v18 = (void *)sub_1A2AE2F74();
        v19 = objc_msgSend(v17, sel_initWithData_, v18);

        if (!v19)
          goto LABEL_12;
        v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
        objc_msgSend(v19, sel_extent);
        v21 = objc_msgSend(v20, sel_createCGImage_fromRect_, v19);

        if (!v21)
        {
          v21 = v19;
LABEL_11:

LABEL_12:
          v27 = (void *)sub_1A2AE2F74();
          v28 = SFCreateCGImageFromData(v27);

          if (v28 && (v29 = (void *)SFResizedCGImage(v28, 0x100000), v28, v29))
          {
            v30 = sub_1A2AE2F80();
            v32 = v31;

            sub_1A29B98D8(v14, v13);
            swift_bridgeObjectRelease();
            v16 = v41;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1A29B98D8(v14, v13);
            v14 = v30;
            v13 = v32;
          }
          else
          {
            if (qword_1EE67AA38 != -1)
              swift_once();
            v33 = sub_1A2AE31D8();
            __swift_project_value_buffer(v33, (uint64_t)qword_1EE67C078);
            v34 = sub_1A2AE31C0();
            v35 = sub_1A2AE394C();
            if (os_log_type_enabled(v34, v35))
            {
              v36 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v36 = 0;
              _os_log_impl(&dword_1A2830000, v34, v35, "Unable to parse itemPreview data", v36, 2u);
              MEMORY[0x1A85896E8](v36, -1, -1);

              sub_1A29B98D8(v14, v13);
              swift_bridgeObjectRelease();
              v16 = v41;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              sub_1A29B98D8(v14, v13);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v16 = v41;
            }
            sub_1A29B98D8(v14, v13);
            v14 = 0;
            v13 = 0xF000000000000000;
          }
          goto LABEL_21;
        }
        v22 = SFResizedCGImage(v21, 0x100000);
        if (!v22)
        {

          goto LABEL_11;
        }
        v23 = (void *)v22;
        v24 = sub_1A2AE2F80();
        v26 = v25;

        sub_1A29B98D8(v14, v13);
        swift_bridgeObjectRelease();
        v16 = v41;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1A29B98D8(v14, v13);
        v14 = v24;
        v13 = v26;
      }
LABEL_21:
      sub_1A29E5F28(v52);
      v59 = v47;
      v38 = *(_QWORD *)(v47 + 16);
      v37 = *(_QWORD *)(v47 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_1A29BE3C4(v37 > 1, v38 + 1, 1);
        v47 = v59;
      }
      *(_QWORD *)(v47 + 16) = v38 + 1;
      v39 = v47 + 120 * v38;
      *(_QWORD *)(v39 + 32) = v46;
      *(_QWORD *)(v39 + 40) = v51;
      *(_QWORD *)(v39 + 48) = v45;
      *(_OWORD *)(v39 + 56) = v50;
      *(_OWORD *)(v39 + 72) = v49;
      *(_QWORD *)(v39 + 88) = v44;
      *(_QWORD *)(v39 + 96) = v16;
      *(_BYTE *)(v39 + 104) = v43;
      *(_QWORD *)(v39 + 112) = v42;
      *(_QWORD *)(v39 + 120) = v48;
      *(_QWORD *)(v39 + 128) = v14;
      *(_QWORD *)(v39 + 136) = v13;
      v7 += 9;
      *(_BYTE *)(v39 + 144) = v15;
      --v6;
    }
    while (v6);
  }
  return v47;
}

uint64_t sub_1A29E1BAC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  v5 = type metadata accessor for SFAirDropSend.Item();
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(type metadata accessor for SFSecurityScopedURL(0) - 8);
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  *(_OWORD *)(v3 + 80) = *a2;
  return swift_task_switch();
}

uint64_t sub_1A29E1C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C108);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_1A29E1CF4;
  return sub_1A2AE3CDC();
}

uint64_t sub_1A29E1CF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29E1D60()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 48);
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE398(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    v7 = v14;
    do
    {
      v8 = *(_QWORD *)(v0 + 72);
      v9 = *(_QWORD *)(v0 + 56);
      sub_1A2990388(v5, v9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
      sub_1A2990388(v9, v8, type metadata accessor for SFSecurityScopedURL);
      sub_1A297DA3C(v9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A29BE398(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v14;
      }
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1A29BE398(v10 > 1, v11 + 1, 1);
        v7 = v14;
      }
      v12 = *(_QWORD *)(v0 + 72);
      *(_QWORD *)(v7 + 16) = v11 + 1;
      sub_1A297EB48(v12, v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v11, type metadata accessor for SFSecurityScopedURL);
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  **(_QWORD **)(v0 + 24) = v7;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E1F08()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static SFAirDropSend.loadItemPromises(_:customPayload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t sub_1A29E1F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for SFAirDropSend.Item();
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C108);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_1A29E203C;
  return sub_1A2AE3CDC();
}

uint64_t sub_1A29E203C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29E20A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A29E20B4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E20EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[96] = a5;
  v5[95] = a4;
  v5[94] = a3;
  v5[93] = a2;
  v5[92] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C150);
  v5[97] = swift_task_alloc();
  v6 = type metadata accessor for SFAirDropSend.Item();
  v5[98] = v6;
  v5[99] = *(_QWORD *)(v6 - 8);
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  v5[103] = swift_task_alloc();
  v5[104] = swift_task_alloc();
  v5[105] = swift_task_alloc();
  v5[106] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29E21E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t (*v21)(void);
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _OWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    if (qword_1EE67AA38 != -1)
      swift_once();
    v17 = sub_1A2AE31D8();
    __swift_project_value_buffer(v17, (uint64_t)qword_1EE67C078);
    v18 = sub_1A2AE31C0();
    v19 = sub_1A2AE394C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1A2830000, v18, v19, "No item promises provided", v20, 2u);
      MEMORY[0x1A85896E8](v20, -1, -1);
    }

    type metadata accessor for SFAirDropSend.Failure();
    sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v1 + 32);
    v3 = *(_OWORD *)(v1 + 48);
    v4 = *(_OWORD *)(v1 + 64);
    v5 = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 368) = v5;
    *(_OWORD *)(v0 + 320) = v3;
    *(_OWORD *)(v0 + 336) = v4;
    v6 = *(_OWORD *)(v1 + 112);
    v7 = *(_OWORD *)(v1 + 128);
    v8 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 425) = *(_OWORD *)(v1 + 153);
    *(_OWORD *)(v0 + 400) = v7;
    *(_OWORD *)(v0 + 416) = v8;
    *(_OWORD *)(v0 + 384) = v6;
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v1 + 32);
    v9 = *(_OWORD *)(v1 + 48);
    v10 = *(_OWORD *)(v1 + 64);
    v11 = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v0 + 512) = v11;
    *(_OWORD *)(v0 + 464) = v9;
    *(_OWORD *)(v0 + 480) = v10;
    v12 = *(_OWORD *)(v1 + 112);
    v13 = *(_OWORD *)(v1 + 128);
    v14 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v0 + 569) = *(_OWORD *)(v1 + 153);
    *(_OWORD *)(v0 + 544) = v13;
    *(_OWORD *)(v0 + 560) = v14;
    *(_OWORD *)(v0 + 528) = v12;
    sub_1A29E5E84((_QWORD *)(v0 + 304));
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 880) = v15;
    *v15 = v0;
    v15[1] = sub_1A29E345C;
    return sub_1A29E3CB0(*(_QWORD *)(v0 + 800), (_OWORD *)(v0 + 448), *(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 760));
  }
  v22 = (_OWORD *)(v0 + 16);
  v97 = (_QWORD *)(v0 + 160);
  v23 = (_OWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  v24 = 0;
  v96 = v23;
  v98 = v2;
  do
  {
    *v22 = *v23;
    v26 = v23[1];
    v27 = v23[2];
    v28 = v23[4];
    *(_OWORD *)(v0 + 64) = v23[3];
    *(_OWORD *)(v0 + 80) = v28;
    *(_OWORD *)(v0 + 32) = v26;
    *(_OWORD *)(v0 + 48) = v27;
    v29 = v23[5];
    v30 = v23[6];
    v31 = v23[7];
    *(_OWORD *)(v0 + 137) = *(_OWORD *)((char *)v23 + 121);
    *(_OWORD *)(v0 + 112) = v30;
    *(_OWORD *)(v0 + 128) = v31;
    *(_OWORD *)(v0 + 96) = v29;
    if (v24 < 5)
    {
      v32 = *(_QWORD *)(v0 + 848);
      v101 = *(_QWORD *)(v0 + 840);
      v33 = *(_QWORD *)(v0 + 760);
      v99 = v32;
      v34 = *(_QWORD *)(v0 + 752);
      v35 = sub_1A2AE36E8();
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v32, 1, 1, v35);
      v37 = swift_allocObject();
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = v34;
      *(_QWORD *)(v37 + 40) = v33;
      v38 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v37 + 144) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v37 + 160) = v38;
      *(_OWORD *)(v37 + 169) = *(_OWORD *)(v0 + 137);
      v39 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v37 + 80) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v37 + 96) = v39;
      v40 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v37 + 128) = v40;
      v41 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v37 + 48) = *v22;
      *(_OWORD *)(v37 + 64) = v41;
      sub_1A297CDE4(v99, v101, &qword_1ECEFB6D0);
      v100 = v36;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v101, 1, v35);
      sub_1A29E5E84((_QWORD *)(v0 + 16));
      sub_1A29E5E84((_QWORD *)(v0 + 16));
      sub_1A297CF68(v34, v33);
      v43 = *(_QWORD *)(v0 + 840);
      if (v42 == 1)
      {
        sub_1A296F108(*(_QWORD *)(v0 + 840), &qword_1ECEFB6D0);
      }
      else
      {
        sub_1A2AE36DC();
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v43, v35);
      }
      if (*(_QWORD *)(v37 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v44 = sub_1A2AE3688();
        v46 = v45;
        swift_unknownObjectRelease();
      }
      else
      {
        v44 = 0;
        v46 = 0;
      }
      v47 = **(_QWORD **)(v0 + 744);
      v48 = v46 | v44;
      if (v46 | v44)
      {
        v48 = v0 + 656;
        *(_QWORD *)(v0 + 656) = 0;
        *(_QWORD *)(v0 + 664) = 0;
        *(_QWORD *)(v0 + 672) = v44;
        *(_QWORD *)(v0 + 680) = v46;
      }
      v25 = *(_QWORD *)(v0 + 848);
      *(_QWORD *)(v0 + 712) = 1;
      *(_QWORD *)(v0 + 720) = v48;
      *(_QWORD *)(v0 + 728) = v47;
      swift_task_create();
      swift_release();
      sub_1A296F108(v25, &qword_1ECEFB6D0);
      sub_1A29E5F28((_QWORD *)(v0 + 16));
      v2 = v98;
    }
    ++v24;
    v23 += 9;
  }
  while (v2 != v24);
  swift_bridgeObjectRelease();
  v49 = MEMORY[0x1E0DEE9D8];
  if (v2 <= 5)
  {
    v52 = 0;
    v53 = MEMORY[0x1E0DEE9D8] + 32;
    v50 = 1;
    v51 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v50 = (2 * v2) | 1;
    v51 = swift_bridgeObjectRetain();
    v52 = 5;
    v53 = (uint64_t)v96;
  }
  *(_QWORD *)(v0 + 592) = v51;
  *(_QWORD *)(v0 + 600) = v53;
  *(_QWORD *)(v0 + 608) = v52;
  *(_QWORD *)(v0 + 616) = v50;
  *(_QWORD *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  if ((sub_1A2AE37A8() & 1) != 0)
  {
    if (*(_QWORD *)(v49 + 16))
    {
      v54 = *(_QWORD **)(v0 + 736);
      swift_unknownObjectRelease();
      *v54 = v49;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
    swift_bridgeObjectRelease();
    if (qword_1EE67AA38 == -1)
      goto LABEL_37;
    goto LABEL_64;
  }
  *(_QWORD *)(v0 + 864) = v49;
  v55 = *(_QWORD *)(v0 + 608);
  v56 = *(_QWORD *)(v0 + 616);
  v57 = v56 >> 1;
  if (v55 == v56 >> 1)
    goto LABEL_58;
  v58 = v57 - v55;
  if (__OFSUB__(v57, v55))
  {
    __break(1u);
    goto LABEL_61;
  }
  if (v58 < 1)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v57 <= v55)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v59 = *(_QWORD *)(v0 + 600);
  v60 = (_OWORD *)(v59 + 144 * (v57 - 1));
  *(_OWORD *)v97 = *v60;
  v61 = v60[1];
  v62 = v60[2];
  v63 = v60[4];
  *(_OWORD *)(v0 + 208) = v60[3];
  *(_OWORD *)(v0 + 224) = v63;
  *(_OWORD *)(v0 + 176) = v61;
  *(_OWORD *)(v0 + 192) = v62;
  v64 = v60[5];
  v65 = v60[6];
  v66 = v60[7];
  *(_OWORD *)(v0 + 281) = *(_OWORD *)((char *)v60 + 121);
  *(_OWORD *)(v0 + 256) = v65;
  *(_OWORD *)(v0 + 272) = v66;
  *(_OWORD *)(v0 + 240) = v64;
  if (__OFSUB__(v57, v57 - 1))
  {
LABEL_63:
    __break(1u);
    __break(1u);
LABEL_64:
    swift_once();
LABEL_37:
    v67 = sub_1A2AE31D8();
    __swift_project_value_buffer(v67, (uint64_t)qword_1EE67C078);
    v68 = sub_1A2AE31C0();
    v69 = sub_1A2AE394C();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_1A2830000, v68, v69, "Failed to load any items", v70, 2u);
      MEMORY[0x1A85896E8](v70, -1, -1);
    }

    type metadata accessor for SFAirDropSend.Failure();
    sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  if ((v56 & 1) == 0)
  {
    sub_1A29E5E84(v97);
    goto LABEL_48;
  }
  sub_1A29E5E84(v97);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    goto LABEL_48;
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v71 = swift_dynamicCastClass();
  if (!v71)
  {
    swift_unknownObjectRelease();
    v71 = MEMORY[0x1E0DEE9D8];
  }
  v72 = *(_QWORD *)(v71 + 16);
  if (v59 + 144 * v55 + 144 * v58 == v71 + 144 * v72 + 32)
  {
    v74 = *(_QWORD *)(v71 + 24);
    result = swift_release();
    v75 = (v74 >> 1) - v72;
    v76 = __OFADD__(v58, v75);
    v73 = v58 + v75;
    if (v76)
      goto LABEL_66;
  }
  else
  {
    result = swift_release();
    v73 = v57 - v55;
  }
  if (!__OFADD__(v58, -1))
  {
    if (v73 >= v58 - 1)
    {
      sub_1A29E785C(v57 - 1, v57, 0);
      goto LABEL_49;
    }
LABEL_48:
    sub_1A29E4A54(v57 - 1, v57, 0);
LABEL_49:
    v77 = *(_QWORD *)(v0 + 832);
    v78 = *(_QWORD *)(v0 + 824);
    v79 = *(_QWORD *)(v0 + 760);
    v80 = *(_QWORD *)(v0 + 752);
    v81 = sub_1A2AE36E8();
    v82 = *(_QWORD *)(v81 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v77, 1, 1, v81);
    v83 = swift_allocObject();
    *(_QWORD *)(v83 + 16) = 0;
    *(_QWORD *)(v83 + 24) = 0;
    *(_QWORD *)(v83 + 32) = v80;
    *(_QWORD *)(v83 + 40) = v79;
    v84 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v83 + 144) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v83 + 160) = v84;
    *(_OWORD *)(v83 + 169) = *(_OWORD *)(v0 + 281);
    v85 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v83 + 80) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v83 + 96) = v85;
    v86 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v83 + 112) = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v83 + 128) = v86;
    v87 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v83 + 48) = *(_OWORD *)v97;
    *(_OWORD *)(v83 + 64) = v87;
    sub_1A297CDE4(v77, v78, &qword_1ECEFB6D0);
    LODWORD(v78) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v78, 1, v81);
    sub_1A297CF68(v80, v79);
    sub_1A29E5E84(v97);
    v88 = *(_QWORD *)(v0 + 824);
    if ((_DWORD)v78 == 1)
    {
      sub_1A296F108(*(_QWORD *)(v0 + 824), &qword_1ECEFB6D0);
      v89 = 0;
      v90 = 0;
    }
    else
    {
      sub_1A2AE36DC();
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v88, v81);
      if (*(_QWORD *)(v83 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v89 = sub_1A2AE3688();
        v90 = v91;
        swift_unknownObjectRelease();
      }
      else
      {
        v89 = 0;
        v90 = 0;
      }
    }
    v92 = v0 + 624;
    v93 = **(_QWORD **)(v0 + 744);
    if (v90 | v89)
    {
      *(_QWORD *)(v0 + 624) = 0;
      *(_QWORD *)(v0 + 632) = 0;
      *(_QWORD *)(v0 + 640) = v89;
      *(_QWORD *)(v0 + 648) = v90;
    }
    else
    {
      v92 = 0;
    }
    v94 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v0 + 688) = 1;
    *(_QWORD *)(v0 + 696) = v92;
    *(_QWORD *)(v0 + 704) = v93;
    swift_task_create();
    swift_release();
    sub_1A296F108(v94, &qword_1ECEFB6D0);
    sub_1A29E5F28(v97);
LABEL_58:
    v95 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 872) = v95;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C170);
    *v95 = v0;
    v95[1] = sub_1A29E2CC8;
    return sub_1A2AE379C();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1A29E2CC8()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_1A29E2D34()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v1 = *(_QWORD *)(v0 + 776);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 792) + 48))(v1, 1, *(_QWORD *)(v0 + 784)) == 1)
  {
    sub_1A296F108(v1, &qword_1EE67C150);
    v2 = *(_QWORD *)(v0 + 864);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 816);
    v4 = *(_QWORD *)(v0 + 808);
    sub_1A297EB48(v1, v3, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
    sub_1A2990388(v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD *)(v0 + 864);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v2 = sub_1A296D414(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 864));
    v7 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    if (v7 >= v6 >> 1)
      v2 = sub_1A296D414(v6 > 1, v7 + 1, 1, v2);
    v8 = *(_QWORD *)(v0 + 816);
    v9 = *(_QWORD *)(v0 + 808);
    v10 = *(_QWORD *)(v0 + 792);
    *(_QWORD *)(v2 + 16) = v7 + 1;
    sub_1A297EB48(v9, v2+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v7, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
    sub_1A297DA3C(v8, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
  }
  if ((sub_1A2AE37A8() & 1) != 0)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      v11 = *(unint64_t **)(v0 + 736);
      swift_unknownObjectRelease();
      *v11 = v2;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
    swift_bridgeObjectRelease();
    if (qword_1EE67AA38 == -1)
    {
LABEL_19:
      v25 = sub_1A2AE31D8();
      __swift_project_value_buffer(v25, (uint64_t)qword_1EE67C078);
      v26 = sub_1A2AE31C0();
      v27 = sub_1A2AE394C();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1A2830000, v26, v27, "Failed to load any items", v28, 2u);
        MEMORY[0x1A85896E8](v28, -1, -1);
      }

      type metadata accessor for SFAirDropSend.Failure();
      sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_unknownObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
LABEL_46:
    swift_once();
    goto LABEL_19;
  }
  *(_QWORD *)(v0 + 864) = v2;
  v13 = *(_QWORD *)(v0 + 608);
  v14 = *(_QWORD *)(v0 + 616);
  v15 = v14 >> 1;
  if (v13 == v14 >> 1)
    goto LABEL_40;
  v16 = v15 - v13;
  if (__OFSUB__(v15, v13))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v16 < 1)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 <= v13)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v17 = *(_QWORD *)(v0 + 600);
  v18 = (_OWORD *)(v17 + 144 * (v15 - 1));
  *(_OWORD *)(v0 + 160) = *v18;
  v19 = v18[1];
  v20 = v18[2];
  v21 = v18[4];
  *(_OWORD *)(v0 + 208) = v18[3];
  *(_OWORD *)(v0 + 224) = v21;
  *(_OWORD *)(v0 + 176) = v19;
  *(_OWORD *)(v0 + 192) = v20;
  v22 = v18[5];
  v23 = v18[6];
  v24 = v18[7];
  *(_OWORD *)(v0 + 281) = *(_OWORD *)((char *)v18 + 121);
  *(_OWORD *)(v0 + 256) = v23;
  *(_OWORD *)(v0 + 272) = v24;
  *(_OWORD *)(v0 + 240) = v22;
  if (__OFSUB__(v15, v15 - 1))
  {
LABEL_45:
    __break(1u);
    __break(1u);
    goto LABEL_46;
  }
  if ((v14 & 1) == 0)
  {
    sub_1A29E5E84((_QWORD *)(v0 + 160));
    goto LABEL_31;
  }
  sub_1A29E5E84((_QWORD *)(v0 + 160));
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    goto LABEL_31;
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v30 = swift_dynamicCastClass();
  if (!v30)
  {
    swift_unknownObjectRelease();
    v30 = MEMORY[0x1E0DEE9D8];
  }
  v31 = *(_QWORD *)(v30 + 16);
  if (v17 + 144 * v13 + 144 * v16 == v30 + 144 * v31 + 32)
  {
    v33 = *(_QWORD *)(v30 + 24);
    result = swift_release();
    v34 = (v33 >> 1) - v31;
    v35 = __OFADD__(v16, v34);
    v32 = v16 + v34;
    if (v35)
      goto LABEL_48;
  }
  else
  {
    result = swift_release();
    v32 = v15 - v13;
  }
  if (!__OFADD__(v16, -1))
  {
    if (v32 >= v16 - 1)
    {
      sub_1A29E785C(v15 - 1, v15, 0);
      goto LABEL_32;
    }
LABEL_31:
    sub_1A29E4A54(v15 - 1, v15, 0);
LABEL_32:
    v36 = *(_QWORD *)(v0 + 832);
    v37 = *(_QWORD *)(v0 + 824);
    v38 = *(_QWORD *)(v0 + 760);
    v39 = *(_QWORD *)(v0 + 752);
    v40 = sub_1A2AE36E8();
    v41 = *(_QWORD *)(v40 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v36, 1, 1, v40);
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = v39;
    *(_QWORD *)(v42 + 40) = v38;
    v43 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v42 + 144) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v42 + 160) = v43;
    *(_OWORD *)(v42 + 169) = *(_OWORD *)(v0 + 281);
    v44 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v42 + 80) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v42 + 96) = v44;
    v45 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v42 + 112) = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v42 + 128) = v45;
    v46 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v42 + 48) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v42 + 64) = v46;
    sub_1A297CDE4(v36, v37, &qword_1ECEFB6D0);
    LODWORD(v37) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v37, 1, v40);
    sub_1A297CF68(v39, v38);
    sub_1A29E5E84((_QWORD *)(v0 + 160));
    v47 = *(_QWORD *)(v0 + 824);
    if ((_DWORD)v37 == 1)
    {
      sub_1A296F108(*(_QWORD *)(v0 + 824), &qword_1ECEFB6D0);
      v48 = 0;
      v49 = 0;
    }
    else
    {
      sub_1A2AE36DC();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v47, v40);
      if (*(_QWORD *)(v42 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v48 = sub_1A2AE3688();
        v49 = v50;
        swift_unknownObjectRelease();
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
    }
    v51 = **(_QWORD **)(v0 + 744);
    v52 = v49 | v48;
    if (v49 | v48)
    {
      v52 = v0 + 624;
      *(_QWORD *)(v0 + 624) = 0;
      *(_QWORD *)(v0 + 632) = 0;
      *(_QWORD *)(v0 + 640) = v48;
      *(_QWORD *)(v0 + 648) = v49;
    }
    v53 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v0 + 688) = 1;
    *(_QWORD *)(v0 + 696) = v52;
    *(_QWORD *)(v0 + 704) = v51;
    swift_task_create();
    swift_release();
    sub_1A296F108(v53, &qword_1ECEFB6D0);
    sub_1A29E5F28((_QWORD *)(v0 + 160));
LABEL_40:
    v54 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 872) = v54;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C170);
    *v54 = v0;
    v54[1] = sub_1A29E2CC8;
    return sub_1A2AE379C();
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1A29E345C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 888) = v0;
  swift_task_dealloc();
  sub_1A29E5F28(v2);
  return swift_task_switch();
}

uint64_t sub_1A29E34D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 792);
  v3 = *(uint64_t **)(v0 + 736);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67AF88);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1A2AFED80;
  sub_1A297EB48(v1, v5 + v4, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
  *v3 = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E35CC()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E366C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 792) + 56))(*(_QWORD *)(v0 + 776), 1, 1, *(_QWORD *)(v0 + 784));
  sub_1A296F108(*(_QWORD *)(v0 + 776), &qword_1EE67C150);
  v1 = *(_QWORD *)(v0 + 864);
  if ((sub_1A2AE37A8() & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v2 = *(_QWORD **)(v0 + 736);
      swift_unknownObjectRelease();
      *v2 = v1;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v3 = *(uint64_t (**)(void))(v0 + 8);
      return v3();
    }
    swift_bridgeObjectRelease();
    if (qword_1EE67AA38 == -1)
    {
LABEL_12:
      v16 = sub_1A2AE31D8();
      __swift_project_value_buffer(v16, (uint64_t)qword_1EE67C078);
      v17 = sub_1A2AE31C0();
      v18 = sub_1A2AE394C();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1A2830000, v17, v18, "Failed to load any items", v19, 2u);
        MEMORY[0x1A85896E8](v19, -1, -1);
      }

      type metadata accessor for SFAirDropSend.Failure();
      sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_unknownObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v3 = *(uint64_t (**)(void))(v0 + 8);
      return v3();
    }
LABEL_39:
    swift_once();
    goto LABEL_12;
  }
  *(_QWORD *)(v0 + 864) = v1;
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = v5 >> 1;
  if (v4 == v5 >> 1)
    goto LABEL_33;
  v7 = v6 - v4;
  if (__OFSUB__(v6, v4))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v7 < 1)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v6 <= v4)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = *(_QWORD *)(v0 + 600);
  v9 = (_OWORD *)(v8 + 144 * (v6 - 1));
  *(_OWORD *)(v0 + 160) = *v9;
  v10 = v9[1];
  v11 = v9[2];
  v12 = v9[4];
  *(_OWORD *)(v0 + 208) = v9[3];
  *(_OWORD *)(v0 + 224) = v12;
  *(_OWORD *)(v0 + 176) = v10;
  *(_OWORD *)(v0 + 192) = v11;
  v13 = v9[5];
  v14 = v9[6];
  v15 = v9[7];
  *(_OWORD *)(v0 + 281) = *(_OWORD *)((char *)v9 + 121);
  *(_OWORD *)(v0 + 256) = v14;
  *(_OWORD *)(v0 + 272) = v15;
  *(_OWORD *)(v0 + 240) = v13;
  if (__OFSUB__(v6, v6 - 1))
  {
LABEL_38:
    __break(1u);
    __break(1u);
    goto LABEL_39;
  }
  if ((v5 & 1) == 0)
  {
    sub_1A29E5E84((_QWORD *)(v0 + 160));
    goto LABEL_24;
  }
  sub_1A29E5E84((_QWORD *)(v0 + 160));
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    goto LABEL_24;
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v22 = *(_QWORD *)(v21 + 16);
  if (v8 + 144 * v4 + 144 * v7 == v21 + 144 * v22 + 32)
  {
    v24 = *(_QWORD *)(v21 + 24);
    result = swift_release();
    v25 = (v24 >> 1) - v22;
    v26 = __OFADD__(v7, v25);
    v23 = v7 + v25;
    if (v26)
      goto LABEL_41;
  }
  else
  {
    result = swift_release();
    v23 = v6 - v4;
  }
  if (!__OFADD__(v7, -1))
  {
    if (v23 >= v7 - 1)
    {
      sub_1A29E785C(v6 - 1, v6, 0);
      goto LABEL_25;
    }
LABEL_24:
    sub_1A29E4A54(v6 - 1, v6, 0);
LABEL_25:
    v27 = *(_QWORD *)(v0 + 832);
    v28 = *(_QWORD *)(v0 + 824);
    v29 = *(_QWORD *)(v0 + 760);
    v30 = *(_QWORD *)(v0 + 752);
    v31 = sub_1A2AE36E8();
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v27, 1, 1, v31);
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = v30;
    *(_QWORD *)(v33 + 40) = v29;
    v34 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v33 + 144) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v33 + 160) = v34;
    *(_OWORD *)(v33 + 169) = *(_OWORD *)(v0 + 281);
    v35 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v33 + 80) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v33 + 96) = v35;
    v36 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v33 + 112) = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v33 + 128) = v36;
    v37 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v33 + 48) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v33 + 64) = v37;
    sub_1A297CDE4(v27, v28, &qword_1ECEFB6D0);
    LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31);
    sub_1A297CF68(v30, v29);
    sub_1A29E5E84((_QWORD *)(v0 + 160));
    v38 = *(_QWORD *)(v0 + 824);
    if ((_DWORD)v28 == 1)
    {
      sub_1A296F108(*(_QWORD *)(v0 + 824), &qword_1ECEFB6D0);
      v39 = 0;
      v40 = 0;
    }
    else
    {
      sub_1A2AE36DC();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v31);
      if (*(_QWORD *)(v33 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        v39 = sub_1A2AE3688();
        v40 = v41;
        swift_unknownObjectRelease();
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
    v42 = **(_QWORD **)(v0 + 744);
    v43 = v40 | v39;
    if (v40 | v39)
    {
      v43 = v0 + 624;
      *(_QWORD *)(v0 + 624) = 0;
      *(_QWORD *)(v0 + 632) = 0;
      *(_QWORD *)(v0 + 640) = v39;
      *(_QWORD *)(v0 + 648) = v40;
    }
    v44 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v0 + 688) = 1;
    *(_QWORD *)(v0 + 696) = v43;
    *(_QWORD *)(v0 + 704) = v42;
    swift_task_create();
    swift_release();
    sub_1A296F108(v44, &qword_1ECEFB6D0);
    sub_1A29E5F28((_QWORD *)(v0 + 160));
LABEL_33:
    v45 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 872) = v45;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C170);
    *v45 = v0;
    v45[1] = sub_1A29E2CC8;
    return sub_1A2AE379C();
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A29E3CB0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)(v4 + 176) = a3;
  *(_QWORD *)(v4 + 184) = a4;
  *(_QWORD *)(v4 + 168) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C150);
  *(_QWORD *)(v4 + 192) = swift_task_alloc();
  *(_QWORD *)(v4 + 200) = swift_task_alloc();
  *(_QWORD *)(v4 + 208) = swift_task_alloc();
  *(_QWORD *)(v4 + 216) = swift_task_alloc();
  v6 = a2[7];
  *(_OWORD *)(v4 + 112) = a2[6];
  *(_OWORD *)(v4 + 128) = v6;
  *(_OWORD *)(v4 + 137) = *(_OWORD *)((char *)a2 + 121);
  v7 = a2[3];
  *(_OWORD *)(v4 + 48) = a2[2];
  *(_OWORD *)(v4 + 64) = v7;
  v8 = a2[5];
  *(_OWORD *)(v4 + 80) = a2[4];
  *(_OWORD *)(v4 + 96) = v8;
  v9 = a2[1];
  *(_OWORD *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 32) = v9;
  return swift_task_switch();
}

uint64_t sub_1A29E3D64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  int *v25;
  uint64_t v26;

  v1 = v0[27];
  v2 = type metadata accessor for SFAirDropSend.Item();
  v0[28] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[29] = v3;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v0[30] = v4;
  v4(v1, 1, 1, v2);
  v5 = v0[2];
  v0[31] = v5;
  if (v5)
  {
    swift_retain();
    v6 = (_QWORD *)swift_task_alloc();
    v0[32] = v6;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    *v6 = v0;
    v6[1] = sub_1A29E4170;
    return sub_1A2AE3760();
  }
  else
  {
    v8 = (int *)v0[3];
    v9 = v0[4];
    v0[34] = v8;
    v0[35] = v9;
    if (v8)
    {
      v25 = (int *)((char *)v8 + *v8);
      swift_retain();
      v10 = (_QWORD *)swift_task_alloc();
      v0[36] = v10;
      *v10 = v0;
      v10[1] = sub_1A29E44F0;
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v25)(v0[25], v0[22], v0[23]);
    }
    else
    {
      v11 = v0[28];
      v12 = v0[29];
      v13 = v0[24];
      sub_1A297CDE4(v0[27], v13, &qword_1EE67C150);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
      {
        sub_1A296F108(v0[24], &qword_1EE67C150);
        if (qword_1EE67AA38 != -1)
          swift_once();
        v14 = sub_1A2AE31D8();
        __swift_project_value_buffer(v14, (uint64_t)qword_1EE67C078);
        sub_1A29E5E84(v0 + 2);
        v15 = sub_1A2AE31C0();
        v16 = sub_1A2AE394C();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          v18 = swift_slowAlloc();
          v26 = v18;
          *(_DWORD *)v17 = 136315138;
          v20 = v0[5];
          v19 = v0[6];
          swift_bridgeObjectRetain();
          v0[20] = sub_1A296DA00(v20, v19, &v26);
          sub_1A2AE3A60();
          swift_bridgeObjectRelease();
          sub_1A29E5F28(v0 + 2);
          _os_log_impl(&dword_1A2830000, v15, v16, "Failed to load item promise %s", v17, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1A85896E8](v18, -1, -1);
          MEMORY[0x1A85896E8](v17, -1, -1);
        }
        else
        {
          sub_1A29E5F28(v0 + 2);
        }

        v24 = v0[27];
        type metadata accessor for SFAirDropSend.Failure();
        sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_1A296F108(v24, &qword_1EE67C150);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v23 = (uint64_t (*)(void))v0[1];
      }
      else
      {
        v21 = v0[24];
        v22 = v0[21];
        sub_1A296F108(v0[27], &qword_1EE67C150);
        sub_1A297EB48(v21, v22, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v23 = (uint64_t (*)(void))v0[1];
      }
      return v23();
    }
  }
}

uint64_t sub_1A29E4170()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29E41D4()
{
  _QWORD *v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v20;

  v1 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[30];
  v2 = v0[27];
  v3 = v0[28];
  v4 = v0[26];
  swift_release();
  sub_1A296F108(v2, &qword_1EE67C150);
  v1(v4, 0, 1, v3);
  sub_1A29E7C10(v0[26], v0[27]);
  v5 = v0[28];
  v6 = v0[29];
  v7 = v0[24];
  sub_1A297CDE4(v0[27], v7, &qword_1EE67C150);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    sub_1A296F108(v0[24], &qword_1EE67C150);
    if (qword_1EE67AA38 != -1)
      swift_once();
    v8 = sub_1A2AE31D8();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EE67C078);
    sub_1A29E5E84(v0 + 2);
    v9 = sub_1A2AE31C0();
    v10 = sub_1A2AE394C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v20 = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = v0[5];
      v13 = v0[6];
      swift_bridgeObjectRetain();
      v0[20] = sub_1A296DA00(v14, v13, &v20);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease();
      sub_1A29E5F28(v0 + 2);
      _os_log_impl(&dword_1A2830000, v9, v10, "Failed to load item promise %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v12, -1, -1);
      MEMORY[0x1A85896E8](v11, -1, -1);
    }
    else
    {
      sub_1A29E5F28(v0 + 2);
    }

    v18 = v0[27];
    type metadata accessor for SFAirDropSend.Failure();
    sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_1A296F108(v18, &qword_1EE67C150);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v17 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[24];
    v16 = v0[21];
    sub_1A296F108(v0[27], &qword_1EE67C150);
    sub_1A297EB48(v15, v16, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v17 = (uint64_t (*)(void))v0[1];
  }
  return v17();
}

uint64_t sub_1A29E44F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29E4554()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v17;

  v1 = v0[27];
  sub_1A297CC78(v0[34]);
  sub_1A296F108(v1, &qword_1EE67C150);
  sub_1A29E7C10(v0[25], v0[27]);
  v2 = v0[28];
  v3 = v0[29];
  v4 = v0[24];
  sub_1A297CDE4(v0[27], v4, &qword_1EE67C150);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_1A296F108(v0[24], &qword_1EE67C150);
    if (qword_1EE67AA38 != -1)
      swift_once();
    v5 = sub_1A2AE31D8();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EE67C078);
    sub_1A29E5E84(v0 + 2);
    v6 = sub_1A2AE31C0();
    v7 = sub_1A2AE394C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136315138;
      v11 = v0[5];
      v10 = v0[6];
      swift_bridgeObjectRetain();
      v0[20] = sub_1A296DA00(v11, v10, &v17);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease();
      sub_1A29E5F28(v0 + 2);
      _os_log_impl(&dword_1A2830000, v6, v7, "Failed to load item promise %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v9, -1, -1);
      MEMORY[0x1A85896E8](v8, -1, -1);
    }
    else
    {
      sub_1A29E5F28(v0 + 2);
    }

    v15 = v0[27];
    type metadata accessor for SFAirDropSend.Failure();
    sub_1A296E8A4(&qword_1EE67BBA8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_1A296F108(v15, &qword_1EE67C150);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v12 = v0[24];
    v13 = v0[21];
    sub_1A296F108(v0[27], &qword_1EE67C150);
    sub_1A297EB48(v12, v13, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Item);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = (uint64_t (*)(void))v0[1];
  }
  return v14();
}

uint64_t sub_1A29E485C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  sub_1A296F108(v1, &qword_1EE67C150);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E48D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  sub_1A297CC78(*(_QWORD *)(v0 + 272));
  sub_1A296F108(v1, &qword_1EE67C150);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E4944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v6;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  v10 = a6[7];
  *(_OWORD *)(v6 + 112) = a6[6];
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 137) = *(_OWORD *)((char *)a6 + 121);
  v11 = a6[3];
  *(_OWORD *)(v6 + 48) = a6[2];
  *(_OWORD *)(v6 + 64) = v11;
  v12 = a6[5];
  *(_OWORD *)(v6 + 80) = a6[4];
  *(_OWORD *)(v6 + 96) = v12;
  v13 = a6[1];
  *(_OWORD *)(v6 + 16) = *a6;
  *(_OWORD *)(v6 + 32) = v13;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 160) = v14;
  *v14 = v6;
  v14[1] = sub_1A29E49DC;
  return sub_1A29E3CB0(a1, (_OWORD *)(v6 + 16), a4, a5);
}

uint64_t sub_1A29E49DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A29E4A48()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29E4A54(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = __OFSUB__(a3, v4);
  v7 = a3 - v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v9 = v3[2];
  v8 = v3[3];
  v10 = (v8 >> 1) - v9;
  if (__OFSUB__(v8 >> 1, v9))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = result;
  result = v10 + v7;
  if (__OFADD__(v10, v7))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_1A29E4B18(result, v10 + v7, *v3, v3[1], v3[2], v8);
  v13 = result;
  if (!__OFSUB__(v11, v9))
  {
    MEMORY[0x1E0C80A78](result);
    sub_1A29E4B34(&v13, v12, a3, sub_1A29E7BFC);
    return swift_release();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A29E4B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_1A29E4E64(a1, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1A29E4B34(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *__dst;

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v11 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v11)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v34 = v16;
  v17 = 144 * a2;
  __dst = (char *)(v9 + 32);
  v18 = v9 + 32 + 144 * a2;
  v33 = (char *)(v18 + 144 * a3);
  v19 = sub_1A29E5090(v7);
  if (v19)
  {
    v20 = v19;
    v32 = v9;
    v21 = v4[2];
    v22 = (char *)(v4[1] + 144 * v21);
    swift_arrayDestroy();
    if (a2 < 0)
      goto LABEL_43;
    v23 = &v22[v17];
    if (__dst != v22 || __dst >= v23)
      memmove(__dst, v22, v17);
    swift_arrayDestroy();
    a4(v18, a3);
    if (v14 < 0)
      goto LABEL_43;
    v24 = &v23[144 * v34];
    v25 = 144 * v14;
    if (v33 != v24 || v33 >= &v24[v25])
      memmove(v33, v24, v25);
    swift_arrayDestroy();
    *(_QWORD *)(v20 + 16) = 0;
    swift_release();
    v9 = v32;
LABEL_23:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v21))
    {
      v30 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v21, v30);
      v31 = v21 + v30;
      if (!v11)
      {
        if (v31 >= v21)
        {
          if ((v31 & 0x8000000000000000) == 0)
          {
            *v4 = v9;
            v4[1] = &__dst[-144 * v21];
            v4[2] = v21;
            v4[3] = (2 * v31) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v21 = v4[2];
  v26 = v21 + a2;
  if (__OFADD__(v21, a2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v26 < v21)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v26, v21))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[144 * a2], a3);
  v27 = v26 + v34;
  if (__OFADD__(v26, v34))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v28 = v4[3] >> 1;
  if (v28 < v27)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v28, v27))
  {
    swift_arrayInitWithCopy();
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t sub_1A29E4E64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;

  v10 = (a7 >> 1) - a6;
  if (__OFSUB__(a7 >> 1, a6))
  {
    __break(1u);
LABEL_32:
    if (v10 >= v9)
      goto LABEL_21;
LABEL_18:
    if (v10 + 0x4000000000000000 >= 0)
    {
      v10 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  v8 = a3;
  v9 = a2;
  v7 = result;
  if ((a7 & 1) == 0)
    goto LABEL_32;
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  v15 = a5 + 144 * a6 + 144 * v10;
  if (v15 == v13 + 144 * v14 + 32)
  {
    v17 = *(_QWORD *)(v13 + 24);
    result = swift_release();
    v18 = (v17 >> 1) - v14;
    v16 = v10 + v18;
    if (__OFADD__(v10, v18))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    v16 = v10;
  }
  swift_unknownObjectRetain();
  v19 = swift_dynamicCastClass();
  if (v16 < v9)
  {
    if (!v19)
    {
      swift_unknownObjectRelease();
      v19 = MEMORY[0x1E0DEE9D8];
    }
    v20 = *(_QWORD *)(v19 + 16);
    if (v15 == v19 + 144 * v20 + 32)
    {
      v22 = *(_QWORD *)(v19 + 24);
      result = swift_release();
      v23 = (v22 >> 1) - v20;
      v24 = __OFADD__(v10, v23);
      v10 += v23;
      if (v24)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  v21 = *(_QWORD *)(v19 + 16);
  if (v15 == v19 + 144 * v21 + 32)
  {
    v25 = *(_QWORD *)(v19 + 24);
    result = swift_release();
    v26 = (v25 >> 1) - v21;
    v24 = __OFADD__(v10, v26);
    v10 += v26;
    if (!v24)
      goto LABEL_21;
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v10 <= v8)
    v27 = v8;
  else
    v27 = v10;
  if (v27 <= v7)
    v28 = v7;
  else
    v28 = v27;
  if (!v28)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C180);
  v29 = (_QWORD *)swift_allocObject();
  v30 = _swift_stdlib_malloc_size(v29);
  v29[2] = v7;
  v29[3] = 2 * ((uint64_t)(v30 - 32) / 144);
  return (uint64_t)v29;
}

uint64_t sub_1A29E5090(uint64_t a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 144 * v6 + 144 * v7 != v9 + 144 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    sub_1A2AE3EF8();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = (v8 + 144 * v6 - a1 - 32) / 144;
    isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_19:
      sub_1A29E7734(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t _s7Sharing13SFAirDropSendO12ItemMetadataV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 56);
  v36 = *(_QWORD *)(a1 + 64);
  v34 = *(unsigned __int8 *)(a1 + 72);
  v32 = *(_QWORD *)(a1 + 88);
  v24 = *(_QWORD *)(a1 + 96);
  v22 = *(unsigned __int8 *)(a1 + 112);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 64);
  v33 = *(unsigned __int8 *)(a2 + 72);
  v26 = *(_QWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a2 + 80);
  v31 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 104);
  v21 = *(unsigned __int8 *)(a2 + 112);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_1A2AE3EE0(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v8)
        return 0;
      if (v2 != v7 || v4 != v8)
      {
        v14 = sub_1A2AE3EE0();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v8)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9)
        return 0;
      if (v3 == v10 && v5 == v9)
      {
        if (v6 != v11)
          return 0;
LABEL_21:
        if (v36)
        {
          if (!v35)
            return 0;
          if (v30 == v29 && v36 == v35)
          {
            if (v34 != v33)
              return 0;
            goto LABEL_31;
          }
          v16 = sub_1A2AE3EE0();
          result = 0;
          if ((v16 & 1) == 0)
            return result;
        }
        else
        {
          result = 0;
          if (v35)
            return result;
        }
        if (((v34 ^ v33) & 1) != 0)
          return result;
LABEL_31:
        if (v32)
        {
          if (!v31)
            return 0;
          if (v28 != v27 || v32 != v31)
          {
            v17 = sub_1A2AE3EE0();
            result = 0;
            if ((v17 & 1) == 0)
              return result;
          }
        }
        else if (v31)
        {
          return 0;
        }
        if (v26 >> 60 == 15)
        {
          v18 = v25;
          if (v25 >> 60 == 15)
            return v22 ^ v21 ^ 1u;
          goto LABEL_42;
        }
        v18 = v25;
        if (v25 >> 60 == 15)
        {
LABEL_42:
          sub_1A297CF68(v24, v26);
          sub_1A297CF68(v23, v18);
          sub_1A29B98D8(v24, v26);
          sub_1A29B98D8(v23, v18);
          return 0;
        }
        sub_1A297CF68(v24, v26);
        sub_1A297CF68(v23, v25);
        sub_1A2A10E0C(v24, v26);
        v20 = v19;
        sub_1A29B98D8(v23, v25);
        sub_1A29B98D8(v24, v26);
        if ((v20 & 1) != 0)
          return v22 ^ v21 ^ 1u;
        return 0;
      }
      v15 = sub_1A2AE3EE0();
      result = 0;
      if ((v15 & 1) == 0)
        return result;
    }
    else
    {
      result = 0;
      if (v9)
        return result;
    }
    if (v6 != v11)
      return result;
    goto LABEL_21;
  }
  return result;
}

unint64_t sub_1A29E5540()
{
  unint64_t result;

  result = qword_1EE67C098;
  if (!qword_1EE67C098)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFED30, &_s12ItemMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C098);
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropSend.Item()
{
  uint64_t result;

  result = qword_1EE67C110;
  if (!qword_1EE67C110)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1A29E55C0()
{
  unint64_t result;

  result = qword_1EE67C0B0;
  if (!qword_1EE67C0B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFECE0, &_s4ItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C0B0);
  }
  return result;
}

unint64_t sub_1A29E5604()
{
  unint64_t result;

  result = qword_1EE67C0C0;
  if (!qword_1EE67C0C0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropSend.ItemMetadata, &type metadata for SFAirDropSend.ItemMetadata);
    atomic_store(result, (unint64_t *)&qword_1EE67C0C0);
  }
  return result;
}

unint64_t sub_1A29E5648()
{
  unint64_t result;

  result = qword_1EE67C0D8;
  if (!qword_1EE67C0D8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropSend.ItemMetadata, &type metadata for SFAirDropSend.ItemMetadata);
    atomic_store(result, &qword_1EE67C0D8);
  }
  return result;
}

uint64_t sub_1A29E568C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65707954656C6966 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x54627553656C6966 && a2 == 0xEB00000000657079 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x504D4F42656C6966 && a2 == 0xEB00000000687461 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x69447349656C6966 && a2 == 0xEF79726F74636572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B46190 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E69727453736177 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_1A29E5AA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t _s7Sharing13SFAirDropSendO4ItemV26compressedPreviewImageData4data10Foundation0I0VSgAK_tFZ_0(uint64_t a1, unint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  CGImageRef v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  if (a2 >> 60 != 15)
  {
    v4 = objc_allocWithZone(MEMORY[0x1E0C9DDC8]);
    sub_1A2973524(a1, a2);
    v5 = (void *)sub_1A2AE2F74();
    v6 = objc_msgSend(v4, sel_initWithData_, v5);

    if (v6)
    {
      v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
      objc_msgSend(v6, sel_extent);
      v8 = objc_msgSend(v7, sel_createCGImage_fromRect_, v6);

      if (v8)
      {
        v9 = SFResizedCGImage(v8, 0x100000);
        if (v9)
        {
          v10 = (void *)v9;
          v11 = sub_1A2AE2F80();

          sub_1A29B98D8(a1, a2);
          return v11;
        }

      }
      else
      {
        v8 = v6;
      }

    }
    v12 = (void *)sub_1A2AE2F74();
    v13 = SFCreateCGImageFromData(v12);

    if (v13 && (v14 = (void *)SFResizedCGImage(v13, 0x100000), v13, v14))
    {
      v15 = sub_1A2AE2F80();

      sub_1A29B98D8(a1, a2);
      return v15;
    }
    else
    {
      if (qword_1EE67AA38 != -1)
        swift_once();
      v16 = sub_1A2AE31D8();
      __swift_project_value_buffer(v16, (uint64_t)qword_1EE67C078);
      v17 = sub_1A2AE31C0();
      v18 = sub_1A2AE394C();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1A2830000, v17, v18, "Unable to parse itemPreview data", v19, 2u);
        MEMORY[0x1A85896E8](v19, -1, -1);

        sub_1A29B98D8(a1, a2);
      }
      else
      {
        sub_1A29B98D8(a1, a2);

      }
      return 0;
    }
  }
  return a1;
}

uint64_t sub_1A29E5DF8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A29E5E1C(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A2972038;
  return sub_1A29E1BAC(a1, a2, v6);
}

_QWORD *sub_1A29E5E84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = a1[15];
  v4 = a1[16];
  swift_retain();
  sub_1A29DF9C8(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A297CF68(v3, v4);
  return a1;
}

_QWORD *sub_1A29E5F28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = a1[15];
  v4 = a1[16];
  swift_release();
  sub_1A297CC78(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A29B98D8(v3, v4);
  return a1;
}

uint64_t sub_1A29E5FCC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1A2972038;
  return sub_1A29E20EC(a1, a2, v6, v7, v8);
}

uint64_t _s12ItemMetadataVwxx(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >> 60 != 15)
    return sub_1A29736C4(*(_QWORD *)(a1 + 96), v3);
  return result;
}

uint64_t _s12ItemMetadataVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = (uint64_t *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_1A2973524(*v8, v9);
    *(_QWORD *)(a1 + 96) = v10;
    *(_QWORD *)(a1 + 104) = v9;
  }
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t _s12ItemMetadataVwca(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1A2973524(*v4, *(_QWORD *)(a2 + 104));
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a1 + 104) = v5;
      sub_1A29736C4(v8, v9);
      goto LABEL_8;
    }
    sub_1A299C970(a1 + 96);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1A2973524(*v4, *(_QWORD *)(a2 + 104));
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v5;
LABEL_8:
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t _s12ItemMetadataVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 104);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *v8;
      *(_QWORD *)(a1 + 104) = v10;
      sub_1A29736C4(v11, v9);
      goto LABEL_6;
    }
    sub_1A299C970(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v8;
LABEL_6:
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t _s12ItemMetadataVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s12ItemMetadataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropSend.ItemMetadata()
{
  return &type metadata for SFAirDropSend.ItemMetadata;
}

_QWORD *_s4ItemVwCP(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE2F44();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = *(_QWORD *)((char *)a2 + v12 + 8);
    *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
    *((_QWORD *)v13 + 1) = v15;
    v16 = *(_QWORD *)((char *)a2 + v12 + 24);
    *((_QWORD *)v13 + 2) = *(_QWORD *)((char *)a2 + v12 + 16);
    *((_QWORD *)v13 + 3) = v16;
    v17 = *(_QWORD *)((char *)a2 + v12 + 40);
    *((_QWORD *)v13 + 4) = *(_QWORD *)((char *)a2 + v12 + 32);
    *((_QWORD *)v13 + 5) = v17;
    *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)a2 + v12 + 48);
    *((_QWORD *)v13 + 8) = *(_QWORD *)((char *)a2 + v12 + 64);
    v13[72] = *((_BYTE *)a2 + v12 + 72);
    v18 = *(_QWORD *)((char *)a2 + v12 + 88);
    *((_QWORD *)v13 + 10) = *(_QWORD *)((char *)a2 + v12 + 80);
    *((_QWORD *)v13 + 11) = v18;
    v19 = (_QWORD *)((char *)a2 + v12 + 96);
    v20 = *(_QWORD *)((char *)a2 + v12 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v13 + 6) = *(_OWORD *)v19;
    }
    else
    {
      v22 = *v19;
      sub_1A2973524(*v19, v20);
      *((_QWORD *)v13 + 12) = v22;
      *((_QWORD *)v13 + 13) = v20;
    }
    v13[112] = v14[112];
  }
  return a1;
}

uint64_t _s4ItemVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v4 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for SFSecurityScopedURL(0);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v5 + 104);
  if (v7 >> 60 != 15)
    return sub_1A29736C4(*(_QWORD *)(v5 + 96), v7);
  return result;
}

uint64_t _s4ItemVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a2 + v11);
  v15 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  v16 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v12 + 24) = v16;
  v17 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v12 + 40) = v17;
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  *(_BYTE *)(v12 + 72) = *(_BYTE *)(v13 + 72);
  v18 = *(_QWORD *)(v13 + 88);
  *(_QWORD *)(v12 + 80) = *(_QWORD *)(v13 + 80);
  *(_QWORD *)(v12 + 88) = v18;
  v19 = (uint64_t *)(v13 + 96);
  v20 = *(_QWORD *)(v13 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 96) = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_1A2973524(*v19, v20);
    *(_QWORD *)(v12 + 96) = v21;
    *(_QWORD *)(v12 + 104) = v20;
  }
  *(_BYTE *)(v12 + 112) = *(_BYTE *)(v13 + 112);
  return a1;
}

uint64_t _s4ItemVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v12 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 72) = *(_BYTE *)(v12 + 72);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(v12 + 80);
  *(_QWORD *)(v11 + 88) = *(_QWORD *)(v12 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)(v12 + 96);
  v14 = *(_QWORD *)(v12 + 104);
  if (*(_QWORD *)(v11 + 104) >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      v16 = *v13;
      sub_1A2973524(*v13, *(_QWORD *)(v12 + 104));
      v17 = *(_QWORD *)(v11 + 96);
      v18 = *(_QWORD *)(v11 + 104);
      *(_QWORD *)(v11 + 96) = v16;
      *(_QWORD *)(v11 + 104) = v14;
      sub_1A29736C4(v17, v18);
      goto LABEL_8;
    }
    sub_1A299C970(v11 + 96);
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(v11 + 96) = *(_OWORD *)v13;
    goto LABEL_8;
  }
  v15 = *v13;
  sub_1A2973524(*v13, *(_QWORD *)(v12 + 104));
  *(_QWORD *)(v11 + 96) = v15;
  *(_QWORD *)(v11 + 104) = v14;
LABEL_8:
  *(_BYTE *)(v11 + 112) = *(_BYTE *)(v12 + 112);
  return a1;
}

uint64_t _s4ItemVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for SFSecurityScopedURL(0);
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v11;
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v12;
  *(_BYTE *)(v9 + 112) = *(_BYTE *)(v10 + 112);
  v13 = *(_OWORD *)(v10 + 96);
  v14 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 96) = v13;
  *(_OWORD *)(v9 + 64) = v14;
  return a1;
}

uint64_t _s4ItemVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = sub_1A2AE2F44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(type metadata accessor for SFSecurityScopedURL(0) + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 20);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = v17;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v14 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v13 + 72) = *(_BYTE *)(v14 + 72);
  v18 = *(_QWORD *)(v14 + 88);
  *(_QWORD *)(v13 + 80) = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v13 + 88) = v18;
  swift_bridgeObjectRelease();
  v19 = (_QWORD *)(v14 + 96);
  v20 = *(_QWORD *)(v13 + 104);
  if (v20 >> 60 != 15)
  {
    v21 = *(_QWORD *)(v14 + 104);
    if (v21 >> 60 != 15)
    {
      v22 = *(_QWORD *)(v13 + 96);
      *(_QWORD *)(v13 + 96) = *v19;
      *(_QWORD *)(v13 + 104) = v21;
      sub_1A29736C4(v22, v20);
      goto LABEL_6;
    }
    sub_1A299C970(v13 + 96);
  }
  *(_OWORD *)(v13 + 96) = *(_OWORD *)v19;
LABEL_6:
  *(_BYTE *)(v13 + 112) = *(_BYTE *)(v14 + 112);
  return a1;
}

uint64_t _s4ItemVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29E6B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SFSecurityScopedURL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s4ItemVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29E6C20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SFSecurityScopedURL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1A29E6C9C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SFSecurityScopedURL(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s11ItemPromiseVwxx(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_release();
  if (a1[1])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = a1[16];
  if (v3 >> 60 != 15)
    return sub_1A29736C4(a1[15], v3);
  return result;
}

uint64_t _s11ItemPromiseVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  swift_retain();
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v5;
  }
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = (uint64_t *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_1A2973524(*v11, v12);
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = v12;
  }
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t _s11ItemPromiseVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128) >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      v10 = *v7;
      sub_1A2973524(*v7, *(_QWORD *)(a2 + 128));
      v11 = *(_QWORD *)(a1 + 120);
      v12 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v10;
      *(_QWORD *)(a1 + 128) = v8;
      sub_1A29736C4(v11, v12);
      goto LABEL_15;
    }
    sub_1A299C970(a1 + 120);
    goto LABEL_13;
  }
  if (v8 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v7;
    goto LABEL_15;
  }
  v9 = *v7;
  sub_1A2973524(*v7, *(_QWORD *)(a2 + 128));
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 128) = v8;
LABEL_15:
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t _s11ItemPromiseVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  v11 = (_QWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  if (v12 >> 60 != 15)
  {
    v13 = *(_QWORD *)(a2 + 128);
    if (v13 >> 60 != 15)
    {
      v14 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = *v11;
      *(_QWORD *)(a1 + 128) = v13;
      sub_1A29736C4(v14, v12);
      goto LABEL_13;
    }
    sub_1A299C970(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)v11;
LABEL_13:
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t _s11ItemPromiseVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11ItemPromiseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropSend.ItemPromise()
{
  return &type metadata for SFAirDropSend.ItemPromise;
}

uint64_t _s4ItemV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A29E72E4 + 4 * byte_1A2AFEA0E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A29E7318 + 4 * byte_1A2AFEA09[v4]))();
}

uint64_t sub_1A29E7318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29E7320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29E7328);
  return result;
}

uint64_t sub_1A29E7334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29E733CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A29E7340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29E7348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4ItemV10CodingKeysOMa()
{
  return &_s4ItemV10CodingKeysON;
}

uint64_t _s12ItemMetadataV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12ItemMetadataV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1A29E7440 + 4 * byte_1A2AFEA18[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1A29E7474 + 4 * byte_1A2AFEA13[v4]))();
}

uint64_t sub_1A29E7474(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29E747C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29E7484);
  return result;
}

uint64_t sub_1A29E7490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29E7498);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1A29E749C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29E74A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s12ItemMetadataV10CodingKeysOMa()
{
  return &_s12ItemMetadataV10CodingKeysON;
}

unint64_t sub_1A29E74C4()
{
  unint64_t result;

  result = qword_1EE67C120;
  if (!qword_1EE67C120)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEC00, &_s12ItemMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C120);
  }
  return result;
}

unint64_t sub_1A29E750C()
{
  unint64_t result;

  result = qword_1EE67C128;
  if (!qword_1EE67C128)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFECB8, &_s4ItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C128);
  }
  return result;
}

unint64_t sub_1A29E7554()
{
  unint64_t result;

  result = qword_1EE67C130;
  if (!qword_1EE67C130)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEC28, &_s4ItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C130);
  }
  return result;
}

unint64_t sub_1A29E759C()
{
  unint64_t result;

  result = qword_1EE67C138;
  if (!qword_1EE67C138)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEC50, &_s4ItemV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C138);
  }
  return result;
}

unint64_t sub_1A29E75E4()
{
  unint64_t result;

  result = qword_1EE67C140;
  if (!qword_1EE67C140)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEB70, &_s12ItemMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C140);
  }
  return result;
}

unint64_t sub_1A29E762C()
{
  unint64_t result;

  result = qword_1EE67C148;
  if (!qword_1EE67C148)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEB98, &_s12ItemMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C148);
  }
  return result;
}

uint64_t sub_1A29E7674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1A2972038;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 112);
  v9 = *(_OWORD *)(v1 + 64);
  v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v6 + 80) = v7;
  *(_OWORD *)(v6 + 32) = v9;
  *(_OWORD *)(v6 + 48) = v8;
  v11 = *(_OWORD *)(v1 + 144);
  v10 = *(_OWORD *)(v1 + 160);
  v12 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v6 + 137) = *(_OWORD *)(v1 + 169);
  *(_OWORD *)(v6 + 112) = v11;
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 96) = v12;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 160) = v13;
  *v13 = v6;
  v13[1] = sub_1A29E49DC;
  return sub_1A29E3CB0(a1, (_OWORD *)(v6 + 16), v4, v5);
}

char *sub_1A29E7734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v7 = *v3;
  v8 = v7 + 32 + 144 * a1;
  result = (char *)swift_arrayDestroy();
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v11)
    goto LABEL_11;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_15;
  if (v13 < 0)
  {
LABEL_18:
    result = (char *)sub_1A2AE3C88();
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 144 * a3);
  v14 = (char *)(v7 + 32 + 144 * a2);
  v15 = 144 * v13;
  if (result != v14 || result >= &v14[v15])
    result = (char *)memmove(result, v14, v15);
  v16 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v16, v11);
  v17 = v16 + v11;
  if (v10)
    goto LABEL_16;
  *(_QWORD *)(v7 + 16) = v17;
LABEL_11:
  if (a3 > 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1A29E785C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_30;
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v8 = v3[2];
  v7 = v3[3];
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sub_1A2AE3EF8();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = a1 - v8;
  if (__OFSUB__(a1, v8))
    goto LABEL_33;
  v13 = v11 + 32;
  v14 = (v3[1] + 144 * v8 - (v11 + 32)) / 144;
  v15 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  if (v15)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v17 = a2 - v8;
  if (__OFSUB__(a2, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v18 = v17 + v14;
  if (__OFADD__(v17, v14))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v18 < v16)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v19 = v18 - v16;
  if (__OFSUB__(v18, v16))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v20 = v13 + 144 * v16;
  swift_arrayDestroy();
  v15 = __OFSUB__(a3, v19);
  v21 = a3 - v19;
  if (v15)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v21)
  {
    result = swift_release();
    v31 = (v7 >> 1) - v8;
    if (a3 <= 0)
      goto LABEL_24;
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v22 = *(_QWORD *)(v11 + 16);
  v15 = __OFSUB__(v22, v18);
  v23 = v22 - v18;
  if (v15)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (char *)(v20 + 144 * a3);
    v25 = (char *)(v13 + 144 * v18);
    v26 = 144 * v23;
    v27 = &v25[144 * v23];
    if (v24 != v25 || v24 >= v27)
      memmove(v24, v25, v26);
    v29 = *(_QWORD *)(v11 + 16);
    v15 = __OFADD__(v29, v21);
    v30 = v29 + v21;
    v31 = (v7 >> 1) - v8;
    if (v15)
      goto LABEL_44;
    *(_QWORD *)(v11 + 16) = v30;
    result = swift_release();
    if (a3 <= 0)
    {
LABEL_24:
      v33 = v8 + v31;
      if (!__OFADD__(v8, v31))
      {
        v15 = __OFADD__(v33, v6);
        v34 = v33 + v6;
        if (!v15)
        {
          if ((v34 & 0x8000000000000000) == 0)
          {
            v3[3] = v7 & 1 | (2 * v34);
            return result;
          }
          goto LABEL_42;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    goto LABEL_29;
  }
LABEL_45:
  result = sub_1A2AE3C88();
  __break(1u);
  return result;
}

uint64_t objectdestroy_8Tm()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;

  swift_unknownObjectRelease();
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_1A29736C4(v0[4], v1);
  swift_release();
  if (v0[7])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = v0[22];
  if (v2 >> 60 != 15)
    sub_1A29736C4(v0[21], v2);
  return swift_deallocObject();
}

uint64_t sub_1A29E7B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1A2971EBC;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 112);
  v9 = *(_OWORD *)(v1 + 64);
  v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v6 + 80) = v7;
  *(_OWORD *)(v6 + 32) = v9;
  *(_OWORD *)(v6 + 48) = v8;
  v11 = *(_OWORD *)(v1 + 144);
  v10 = *(_OWORD *)(v1 + 160);
  v12 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v6 + 137) = *(_OWORD *)(v1 + 169);
  *(_OWORD *)(v6 + 112) = v11;
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 96) = v12;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 160) = v13;
  *v13 = v6;
  v13[1] = sub_1A29E49DC;
  return sub_1A29E3CB0(a1, (_OWORD *)(v6 + 16), v4, v5);
}

void sub_1A29E7BFC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    __break(1u);
}

uint64_t sub_1A29E7C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SFAirDropReceive.AcceptContext.shouldExtractMedia.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SFAirDropReceive.AcceptContext.customPayload.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A297CF68(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t SFAirDropReceive.AcceptContext.customPayload.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1A29B98D8(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SFAirDropReceive.AcceptContext.customPayload.modify())()
{
  return nullsub_1;
}

uint64_t SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_1A29E7CE4()
{
  _BYTE *v0;

  if (*v0)
    return 0x61506D6F74737563;
  else
    return 0xD000000000000012;
}

uint64_t sub_1A29E7D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29EADA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29E7D54()
{
  sub_1A29E9208();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E7D7C()
{
  sub_1A29E9208();
  return sub_1A2AE4108();
}

uint64_t SFAirDropReceive.AcceptContext.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C190);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E9208();
  sub_1A2AE40E4();
  LOBYTE(v12) = 0;
  sub_1A2AE3DFC();
  if (!v2)
  {
    v12 = v11;
    v13 = v10;
    v14 = 1;
    sub_1A29735F8();
    sub_1A2AE3DE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SFAirDropReceive.AcceptContext.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E9208();
  sub_1A2AE40C0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    v13 = 0;
    v14 = 0xF000000000000000;
  }
  else
  {
    LOBYTE(v15) = 0;
    v9 = sub_1A2AE3D48();
    v17 = 1;
    sub_1A2973680();
    sub_1A2AE3D30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v15;
    v12 = v16;
    sub_1A297CF68(v15, v16);
    sub_1A29B98D8(0, 0xF000000000000000);
    *(_BYTE *)a2 = v9 & 1;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    v13 = v11;
    v14 = v12;
  }
  return sub_1A29B98D8(v13, v14);
}

uint64_t sub_1A29E808C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.AcceptContext.init(from:)(a1, a2);
}

uint64_t sub_1A29E80A0(_QWORD *a1)
{
  return SFAirDropReceive.AcceptContext.encode(to:)(a1);
}

void SFAirDropReceive.AskResponse.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDropReceive.AskResponse();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A29E9288(v0, (uint64_t)v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v5 = (char *)sub_1A29E815C
     + 4
     * byte_1A2AFED90[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 3, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1A29E815C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A29B98D8(*(_QWORD *)(v0 + *(int *)(v1 + 48) + 8), *(_QWORD *)(v0 + *(int *)(v1 + 48) + 16));
  sub_1A297DA3C(v0, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  return 0x747065636361;
}

uint64_t sub_1A29E81D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43747065636361;
  else
    return 0x74616E6974736564;
}

uint64_t sub_1A29E8220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29EAEB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29E8244()
{
  sub_1A29E9758();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E826C()
{
  sub_1A29E9758();
  return sub_1A2AE4108();
}

uint64_t sub_1A29E8294()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A29E82C0 + 4 * byte_1A2AFED94[*v0]))(0x747065636361, 0xE600000000000000);
}

uint64_t sub_1A29E82C0()
{
  return 0x656E696C636564;
}

uint64_t sub_1A29E82D8()
{
  return 0x726F727265;
}

uint64_t sub_1A29E82EC()
{
  return 0x707954646578696DLL;
}

uint64_t sub_1A29E8308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29EAFDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A29E832C()
{
  sub_1A29E9648();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E8354()
{
  sub_1A29E9648();
  return sub_1A2AE4108();
}

uint64_t sub_1A29E837C()
{
  sub_1A29E9714();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E83A4()
{
  sub_1A29E9714();
  return sub_1A2AE4108();
}

uint64_t sub_1A29E83CC()
{
  sub_1A29E96D0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E83F4()
{
  sub_1A29E96D0();
  return sub_1A2AE4108();
}

uint64_t sub_1A29E841C()
{
  sub_1A29E968C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29E8444()
{
  sub_1A29E968C();
  return sub_1A2AE4108();
}

void SFAirDropReceive.AskResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[18];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1A8);
  v16[7] = *(_QWORD *)(v2 - 8);
  v16[8] = v2;
  MEMORY[0x1E0C80A78](v2);
  v16[5] = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1B0);
  v16[3] = *(_QWORD *)(v4 - 8);
  v16[4] = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1B8);
  v16[1] = *(_QWORD *)(v5 - 8);
  v16[2] = v5;
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1C0);
  v16[10] = *(_QWORD *)(v6 - 8);
  v16[11] = v6;
  MEMORY[0x1E0C80A78](v6);
  v16[9] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDropReceive.ItemDestination();
  MEMORY[0x1E0C80A78](v8);
  v16[6] = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropReceive.AskResponse();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C1C8);
  v16[12] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29E9648();
  sub_1A2AE40E4();
  sub_1A29E9288(v16[14], (uint64_t)v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v15 = (char *)sub_1A29E86C4
      + 4
      * byte_1A2AFED98[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v12, 3, v14)];
  __asm { BR              X10 }
}

uint64_t sub_1A29E86C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (unsigned __int8 *)(v3 + *(int *)(v0 + 48));
  *(_DWORD *)(v4 - 112) = *v5;
  v7 = *((_QWORD *)v5 + 1);
  v6 = *((_QWORD *)v5 + 2);
  v8 = *(_QWORD *)(v4 - 176);
  sub_1A297EB48(v3, v8, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  *(_BYTE *)(v4 - 104) = 0;
  sub_1A29E9758();
  v9 = *(_QWORD *)(v4 - 152);
  sub_1A2AE3DB4();
  *(_BYTE *)(v4 - 104) = 0;
  sub_1A29E97E0(&qword_1EE674780, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v10 = *(_QWORD *)(v4 - 136);
  v11 = *(_QWORD *)(v4 - 120);
  sub_1A2AE3E2C();
  if (v11)
  {
    sub_1A29B98D8(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8))(v9, v10);
    sub_1A297DA3C(v8, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v2, v1);
  }
  else
  {
    *(_BYTE *)(v4 - 104) = *(_DWORD *)(v4 - 112);
    *(_QWORD *)(v4 - 96) = v7;
    *(_QWORD *)(v4 - 88) = v6;
    *(_BYTE *)(v4 - 65) = 1;
    sub_1A29E979C();
    sub_1A2AE3E2C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8))(v9, v10);
    sub_1A297DA3C(v8, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 128) + 8))(v2, v1);
    return sub_1A29B98D8(v7, v6);
  }
}

uint64_t SFAirDropReceive.AskResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD v32[14];
  _QWORD *v33;
  char *v34;

  v32[11] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C200);
  v32[5] = *(_QWORD *)(v3 - 8);
  v32[6] = v3;
  MEMORY[0x1E0C80A78](v3);
  v32[10] = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C208);
  v32[3] = *(_QWORD *)(v5 - 8);
  v32[4] = v5;
  MEMORY[0x1E0C80A78](v5);
  v32[13] = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C210);
  v32[1] = *(_QWORD *)(v7 - 8);
  v32[2] = v7;
  MEMORY[0x1E0C80A78](v7);
  v32[9] = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C218);
  v10 = *(_QWORD *)(v9 - 8);
  v32[7] = v9;
  v32[8] = v10;
  MEMORY[0x1E0C80A78](v9);
  v32[12] = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C220);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SFAirDropReceive.AskResponse();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v32 - v20;
  v22 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_1A29E9648();
  v23 = v34;
  sub_1A2AE40C0();
  if (!v23)
  {
    v32[0] = v19;
    v34 = v21;
    v24 = sub_1A2AE3D9C();
    v25 = v12;
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X10 }
    v26 = sub_1A2AE3B5C();
    swift_allocError();
    v27 = v25;
    v28 = v15;
    v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v30 = v16;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v30, *MEMORY[0x1E0DEC450], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v27);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
}

uint64_t sub_1A29E8FD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.AskResponse.init(from:)(a1, a2);
}

void sub_1A29E8FEC(_QWORD *a1)
{
  SFAirDropReceive.AskResponse.encode(to:)(a1);
}

void sub_1A29E9004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A29E9288(v1, (uint64_t)v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v5 = (char *)sub_1A29E90A4
     + 4
     * byte_1A2AFEDA0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 3, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1A29E90A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A29B98D8(*(_QWORD *)(v0 + *(int *)(v1 + 48) + 8), *(_QWORD *)(v0 + *(int *)(v1 + 48) + 16));
  sub_1A297DA3C(v0, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  return 0x747065636361;
}

BOOL _s7Sharing16SFAirDropReceiveO13AcceptContextV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  if (*a1 != *a2)
    return 0;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  if (v3 >> 60 == 15)
  {
    if (v5 >> 60 == 15)
      return 1;
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    sub_1A297CF68(*((_QWORD *)a1 + 1), v3);
    sub_1A297CF68(v4, v5);
    sub_1A29B98D8(v2, v3);
    sub_1A29B98D8(v4, v5);
    return 0;
  }
  sub_1A297CF68(*((_QWORD *)a1 + 1), v3);
  sub_1A297CF68(v4, v5);
  sub_1A2A10E0C(v2, v3);
  v7 = v6;
  sub_1A29B98D8(v4, v5);
  sub_1A29B98D8(v2, v3);
  return (v7 & 1) != 0;
}

unint64_t sub_1A29E9208()
{
  unint64_t result;

  result = qword_1EE67C198;
  if (!qword_1EE67C198)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF450, &_s13AcceptContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C198);
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropReceive.AskResponse()
{
  uint64_t result;

  result = qword_1EE675230;
  if (!qword_1EE675230)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A29E9288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _s7Sharing16SFAirDropReceiveO11AskResponseO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for SFAirDropReceive.AskResponse();
  MEMORY[0x1E0C80A78](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2A8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1A29E9288(a1, (uint64_t)v9);
  sub_1A29E9288(a2, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v12 = (char *)sub_1A29E93F8
      + 4
      * byte_1A2AFEDA4[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 3, v11)];
  __asm { BR              X10 }
}

uint64_t sub_1A29E93F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;

  sub_1A29E9288(v0, v4);
  v7 = *(int *)(v2 + 48);
  v8 = *(unsigned __int8 *)(v4 + v7);
  v10 = *(_QWORD *)(v4 + v7 + 8);
  v9 = *(_QWORD *)(v4 + v7 + 16);
  if (v3(v5, 3, v2))
  {
    sub_1A29B98D8(v10, v9);
    sub_1A297DA3C(v4, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    sub_1A296F108(v0, &qword_1EE67C2A8);
    return 0;
  }
  *(_DWORD *)(v6 - 84) = *(unsigned __int8 *)(v5 + v7);
  v13 = *(_QWORD *)(v5 + v7 + 8);
  v12 = *(_QWORD *)(v5 + v7 + 16);
  sub_1A297EB48(v5, v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  _s7Sharing16SFAirDropReceiveO15ItemDestinationO2eeoiySbAE_AEtFZ_0(v4, v1);
  v15 = v14;
  sub_1A297DA3C(v4, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  if ((v15 & 1) == 0 || v8 != *(_DWORD *)(v6 - 84))
  {
LABEL_13:
    sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    sub_1A29B98D8(v13, v12);
    sub_1A29B98D8(v10, v9);
    sub_1A297DA3C(v0, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.AskResponse);
    return 0;
  }
  if (v9 >> 60 == 15)
  {
    if (v12 >> 60 == 15)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (v12 >> 60 == 15)
  {
LABEL_10:
    sub_1A297CF68(v10, v9);
    sub_1A297CF68(v13, v12);
    sub_1A29B98D8(v10, v9);
    sub_1A29B98D8(v13, v12);
    goto LABEL_13;
  }
  sub_1A297CF68(v10, v9);
  sub_1A297CF68(v13, v12);
  sub_1A2A10E0C(v10, v9);
  v17 = v16;
  sub_1A29B98D8(v13, v12);
  sub_1A29B98D8(v10, v9);
  if ((v17 & 1) == 0)
    goto LABEL_13;
LABEL_12:
  sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
  sub_1A29B98D8(v13, v12);
  sub_1A29B98D8(v10, v9);
  sub_1A297DA3C(v0, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.AskResponse);
  return 1;
}

unint64_t sub_1A29E9648()
{
  unint64_t result;

  result = qword_1EE67C1D0;
  if (!qword_1EE67C1D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF400, &_s11AskResponseO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C1D0);
  }
  return result;
}

unint64_t sub_1A29E968C()
{
  unint64_t result;

  result = qword_1EE67C1D8;
  if (!qword_1EE67C1D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF3B0, &_s11AskResponseO20MixedTypesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C1D8);
  }
  return result;
}

unint64_t sub_1A29E96D0()
{
  unint64_t result;

  result = qword_1EE67C1E0;
  if (!qword_1EE67C1E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF360, &_s11AskResponseO15ErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C1E0);
  }
  return result;
}

unint64_t sub_1A29E9714()
{
  unint64_t result;

  result = qword_1EE67C1E8;
  if (!qword_1EE67C1E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF310, &_s11AskResponseO17DeclineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C1E8);
  }
  return result;
}

unint64_t sub_1A29E9758()
{
  unint64_t result;

  result = qword_1EE67C1F0;
  if (!qword_1EE67C1F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF2C0, &_s11AskResponseO16AcceptCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C1F0);
  }
  return result;
}

unint64_t sub_1A29E979C()
{
  unint64_t result;

  result = qword_1EE67C1F8;
  if (!qword_1EE67C1F8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AcceptContext, &type metadata for SFAirDropReceive.AcceptContext);
    atomic_store(result, (unint64_t *)&qword_1EE67C1F8);
  }
  return result;
}

uint64_t sub_1A29E97E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SFAirDropReceive.ItemDestination();
    result = MEMORY[0x1A85895EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A29E9820()
{
  unint64_t result;

  result = qword_1EE67C228;
  if (!qword_1EE67C228)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AcceptContext, &type metadata for SFAirDropReceive.AcceptContext);
    atomic_store(result, (unint64_t *)&qword_1EE67C228);
  }
  return result;
}

uint64_t _s13AcceptContextVwxx(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 60 != 15)
    return sub_1A29736C4(*(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t _s13AcceptContextVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (uint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
  }
  else
  {
    v5 = *v3;
    sub_1A2973524(*v3, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t _s13AcceptContextVwca(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1A2973524(*v4, *(_QWORD *)(a2 + 16));
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v5;
      sub_1A29736C4(v8, v9);
      return a1;
    }
    sub_1A299C970(a1 + 8);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *v3 = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_1A2973524(*v4, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s13AcceptContextVwta(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v5;
      *(_QWORD *)(a1 + 16) = v7;
      sub_1A29736C4(v8, v6);
      return a1;
    }
    sub_1A299C970(a1 + 8);
  }
  *v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t _s13AcceptContextVwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s13AcceptContextVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropReceive.AcceptContext()
{
  return &type metadata for SFAirDropReceive.AcceptContext;
}

unint64_t *_s11AskResponseOwCP(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (unint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
    return a1;
  }
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    return a1;
  }
  v10 = type metadata accessor for SFAirDropReceive.ItemDestination();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v14 = a2[1];
      if (v14 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v15 = *a2;
        sub_1A2973524(*a2, a2[1]);
        *a1 = v15;
        a1[1] = v14;
      }
      goto LABEL_14;
    case 1:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 0:
      v12 = sub_1A2AE2F44();
      (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_14:
      swift_storeEnumTagMultiPayload();
      goto LABEL_15;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_15:
  v16 = *(int *)(v7 + 48);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  v19 = (_OWORD *)((char *)a1 + v16 + 8);
  v20 = (uint64_t *)((char *)a2 + v16 + 8);
  v21 = *((_QWORD *)v18 + 2);
  if (v21 >> 60 == 15)
  {
    *v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = *v20;
    sub_1A2973524(*v20, v21);
    *((_QWORD *)v17 + 1) = v22;
    *((_QWORD *)v17 + 2) = v21;
  }
  (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
  return a1;
}

uint64_t _s11AskResponseOwxx(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
  if (!(_DWORD)result)
  {
    type metadata accessor for SFAirDropReceive.ItemDestination();
    result = swift_getEnumCaseMultiPayload();
    switch((_DWORD)result)
    {
      case 2:
        v5 = a1[1];
        if (v5 >> 60 != 15)
          result = sub_1A29736C4(*a1, v5);
        break;
      case 1:
        result = swift_bridgeObjectRelease();
        break;
      case 0:
        v4 = sub_1A2AE2F44();
        result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        break;
    }
    v6 = (char *)a1 + *(int *)(v2 + 48);
    v7 = *((_QWORD *)v6 + 2);
    if (v7 >> 60 != 15)
      return sub_1A29736C4(*((_QWORD *)v6 + 1), v7);
  }
  return result;
}

unint64_t *_s11AskResponseOwcp(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v8 = type metadata accessor for SFAirDropReceive.ItemDestination();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v12 = a2[1];
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v13 = *a2;
        sub_1A2973524(*a2, a2[1]);
        *a1 = v13;
        a1[1] = v12;
      }
      goto LABEL_12;
    case 1:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 0:
      v10 = sub_1A2AE2F44();
      (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_12:
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
LABEL_13:
  v14 = *(int *)(v6 + 48);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v17 = (_OWORD *)((char *)a1 + v14 + 8);
  v18 = (uint64_t *)((char *)a2 + v14 + 8);
  v19 = *((_QWORD *)v16 + 2);
  if (v19 >> 60 == 15)
  {
    *v17 = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_1A2973524(*v18, v19);
    *((_QWORD *)v15 + 1) = v20;
    *((_QWORD *)v15 + 2) = v19;
  }
  (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t *_s11AskResponseOwca(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8((uint64_t *)a2, 3, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1A296F108((uint64_t)a1, &qword_1EE67B7E0);
      goto LABEL_9;
    }
    if (a1 != (uint64_t *)a2)
    {
      sub_1A297DA3C((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
      v14 = type metadata accessor for SFAirDropReceive.ItemDestination();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v26 = *(_QWORD *)(a2 + 8);
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v27 = *(_QWORD *)a2;
          sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
          *a1 = v27;
          a1[1] = v26;
        }
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *a1 = *(_QWORD *)a2;
        a1[1] = *(_QWORD *)(a2 + 8);
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
          goto LABEL_31;
        }
        v16 = sub_1A2AE2F44();
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_31:
    v28 = *(int *)(v6 + 48);
    v29 = (char *)a1 + v28;
    v30 = (char *)(a2 + v28);
    *v29 = *v30;
    v31 = (uint64_t *)(v30 + 8);
    v32 = *((_QWORD *)v30 + 2);
    if (*((_QWORD *)v29 + 2) >> 60 == 15)
    {
      if (v32 >> 60 != 15)
      {
        v33 = *v31;
        sub_1A2973524(*v31, v32);
        *((_QWORD *)v29 + 1) = v33;
        *((_QWORD *)v29 + 2) = v32;
        return a1;
      }
    }
    else
    {
      if (v32 >> 60 != 15)
      {
        v34 = *v31;
        sub_1A2973524(*v31, v32);
        v35 = *((_QWORD *)v29 + 1);
        v36 = *((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 1) = v34;
        *((_QWORD *)v29 + 2) = v32;
        sub_1A29736C4(v35, v36);
        return a1;
      }
      sub_1A299C970((uint64_t)(v29 + 8));
    }
    *(_OWORD *)(v29 + 8) = *(_OWORD *)v31;
    return a1;
  }
  if (v10)
  {
LABEL_9:
    memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v12 = swift_getEnumCaseMultiPayload();
  switch(v12)
  {
    case 2:
      v17 = *(_QWORD *)(a2 + 8);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v18 = *(_QWORD *)a2;
        sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *a1 = v18;
        a1[1] = v17;
      }
      goto LABEL_20;
    case 1:
      *a1 = *(_QWORD *)a2;
      a1[1] = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_20;
    case 0:
      v13 = sub_1A2AE2F44();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_20:
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
  }
  memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_21:
  v19 = *(int *)(v6 + 48);
  v20 = (char *)a1 + v19;
  v21 = a2 + v19;
  *((_BYTE *)a1 + v19) = *(_BYTE *)(a2 + v19);
  v22 = (_OWORD *)((char *)a1 + v19 + 8);
  v23 = (uint64_t *)(a2 + v19 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  if (v24 >> 60 == 15)
  {
    *v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = *v23;
    sub_1A2973524(*v23, v24);
    *((_QWORD *)v20 + 1) = v25;
    *((_QWORD *)v20 + 2) = v24;
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

char *_s11AskResponseOwtk(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for SFAirDropReceive.ItemDestination();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v9 = sub_1A2AE2F44();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    v10 = *(int *)(v6 + 48);
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

char *_s11AskResponseOwta(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v13 = sub_1A2AE2F44();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
      }
      v14 = *(int *)(v6 + 48);
      v15 = &a1[v14];
      v16 = &a2[v14];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      return a1;
    }
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_1A296F108((uint64_t)a1, &qword_1EE67B7E0);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropReceive.ItemDestination);
    v12 = type metadata accessor for SFAirDropReceive.ItemDestination();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v17 = sub_1A2AE2F44();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
      swift_storeEnumTagMultiPayload();
    }
  }
  v18 = *(int *)(v6 + 48);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v21 = v19 + 8;
  v22 = v20 + 8;
  v23 = *((_QWORD *)v19 + 2);
  if (v23 >> 60 != 15)
  {
    v24 = *((_QWORD *)v20 + 2);
    if (v24 >> 60 != 15)
    {
      v25 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = *v22;
      *((_QWORD *)v19 + 2) = v24;
      sub_1A29736C4(v25, v23);
      return a1;
    }
    sub_1A299C970((uint64_t)(v19 + 8));
  }
  *v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t _s11AskResponseOwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29EA5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t _s11AskResponseOwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A29EA644(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1A29EA69C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t sub_1A29EA6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

uint64_t sub_1A29EA71C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SFAirDropReceive.ItemDestination();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t _s11AskResponseO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A29EA7D8 + 4 * byte_1A2AFEDAD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A29EA80C + 4 * byte_1A2AFEDA8[v4]))();
}

uint64_t sub_1A29EA80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EA814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29EA81CLL);
  return result;
}

uint64_t sub_1A29EA828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29EA830);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A29EA834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EA83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11AskResponseO10CodingKeysOMa()
{
  return &_s11AskResponseO10CodingKeysON;
}

ValueMetadata *_s11AskResponseO16AcceptCodingKeysOMa()
{
  return &_s11AskResponseO16AcceptCodingKeysON;
}

ValueMetadata *_s11AskResponseO17DeclineCodingKeysOMa()
{
  return &_s11AskResponseO17DeclineCodingKeysON;
}

ValueMetadata *_s11AskResponseO15ErrorCodingKeysOMa()
{
  return &_s11AskResponseO15ErrorCodingKeysON;
}

ValueMetadata *_s11AskResponseO20MixedTypesCodingKeysOMa()
{
  return &_s11AskResponseO20MixedTypesCodingKeysON;
}

uint64_t _s11AskResponseO16AcceptCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A29EA8E8 + 4 * byte_1A2AFEDB7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A29EA91C + 4 * byte_1A2AFEDB2[v4]))();
}

uint64_t sub_1A29EA91C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EA924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29EA92CLL);
  return result;
}

uint64_t sub_1A29EA938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29EA940);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A29EA944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EA94C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s13AcceptContextV10CodingKeysOMa()
{
  return &_s13AcceptContextV10CodingKeysON;
}

unint64_t sub_1A29EA96C()
{
  unint64_t result;

  result = qword_1EE67C230;
  if (!qword_1EE67C230)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF038, &_s13AcceptContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C230);
  }
  return result;
}

unint64_t sub_1A29EA9B4()
{
  unint64_t result;

  result = qword_1EE67C238;
  if (!qword_1EE67C238)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF1E0, &_s11AskResponseO16AcceptCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C238);
  }
  return result;
}

unint64_t sub_1A29EA9FC()
{
  unint64_t result;

  result = qword_1EE67C240;
  if (!qword_1EE67C240)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF298, &_s11AskResponseO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C240);
  }
  return result;
}

unint64_t sub_1A29EAA44()
{
  unint64_t result;

  result = qword_1EE67C248;
  if (!qword_1EE67C248)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF150, &_s11AskResponseO16AcceptCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C248);
  }
  return result;
}

unint64_t sub_1A29EAA8C()
{
  unint64_t result;

  result = qword_1EE67C250;
  if (!qword_1EE67C250)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF178, &_s11AskResponseO16AcceptCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C250);
  }
  return result;
}

unint64_t sub_1A29EAAD4()
{
  unint64_t result;

  result = qword_1EE67C258;
  if (!qword_1EE67C258)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF100, &_s11AskResponseO17DeclineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C258);
  }
  return result;
}

unint64_t sub_1A29EAB1C()
{
  unint64_t result;

  result = qword_1EE67C260;
  if (!qword_1EE67C260)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF128, &_s11AskResponseO17DeclineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C260);
  }
  return result;
}

unint64_t sub_1A29EAB64()
{
  unint64_t result;

  result = qword_1EE67C268;
  if (!qword_1EE67C268)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF0B0, &_s11AskResponseO15ErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C268);
  }
  return result;
}

unint64_t sub_1A29EABAC()
{
  unint64_t result;

  result = qword_1EE67C270;
  if (!qword_1EE67C270)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF0D8, &_s11AskResponseO15ErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C270);
  }
  return result;
}

unint64_t sub_1A29EABF4()
{
  unint64_t result;

  result = qword_1EE67C278;
  if (!qword_1EE67C278)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF060, &_s11AskResponseO20MixedTypesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C278);
  }
  return result;
}

unint64_t sub_1A29EAC3C()
{
  unint64_t result;

  result = qword_1EE67C280;
  if (!qword_1EE67C280)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF088, &_s11AskResponseO20MixedTypesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C280);
  }
  return result;
}

unint64_t sub_1A29EAC84()
{
  unint64_t result;

  result = qword_1EE67C288;
  if (!qword_1EE67C288)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF208, &_s11AskResponseO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C288);
  }
  return result;
}

unint64_t sub_1A29EACCC()
{
  unint64_t result;

  result = qword_1EE67C290;
  if (!qword_1EE67C290)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF230, &_s11AskResponseO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C290);
  }
  return result;
}

unint64_t sub_1A29EAD14()
{
  unint64_t result;

  result = qword_1EE67C298;
  if (!qword_1EE67C298)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEFA8, &_s13AcceptContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C298);
  }
  return result;
}

unint64_t sub_1A29EAD5C()
{
  unint64_t result;

  result = qword_1EE67C2A0;
  if (!qword_1EE67C2A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFEFD0, &_s13AcceptContextV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C2A0);
  }
  return result;
}

uint64_t sub_1A29EADA0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B461F0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61506D6F74737563 && a2 == 0xED000064616F6C79)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29EAEB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43747065636361 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A29EAFDC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x747065636361 && a2 == 0xE600000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E696C636564 && a2 == 0xE700000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x707954646578696DLL && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t SFTempPairingStateUpdate.isNearbyDeviceClose.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SFTempPairingStateUpdate.isNearbyDeviceClose.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*SFTempPairingStateUpdate.isNearbyDeviceClose.modify())()
{
  return nullsub_1;
}

uint64_t SFTempPairingStateUpdate.nearbyDeviceNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SFTempPairingStateUpdate.nearbyDeviceNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SFTempPairingStateUpdate.nearbyDeviceNames.modify())()
{
  return nullsub_1;
}

uint64_t SFTempPairingStateUpdate.connectedDeviceNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SFTempPairingStateUpdate.connectedDeviceNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SFTempPairingStateUpdate.connectedDeviceNames.modify())()
{
  return nullsub_1;
}

uint64_t SFTempPairingStateUpdate.connectionState.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SFTempPairingStateUpdate.connectionState.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*SFTempPairingStateUpdate.connectionState.modify())()
{
  return nullsub_1;
}

uint64_t SFTempPairingStateUpdate.sharingName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFTempPairingStateUpdate.sharingName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*SFTempPairingStateUpdate.sharingName.modify())()
{
  return nullsub_1;
}

void SFTempPairingStateUpdate.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)a1 = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
}

uint64_t sub_1A29EB2E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A29EB31C + 4 * byte_1A2AFF4A0[a1]))(0xD000000000000013, 0x80000001A2B46210);
}

unint64_t sub_1A29EB31C()
{
  return 0xD000000000000011;
}

uint64_t sub_1A29EB338()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_1A29EB350()
{
  return 0x697463656E6E6F63;
}

uint64_t sub_1A29EB374()
{
  return 0x4E676E6972616873;
}

uint64_t sub_1A29EB394()
{
  unsigned __int8 *v0;

  return sub_1A29EB2E0(*v0);
}

uint64_t sub_1A29EB39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29EC348(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A29EB3C0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1A29EB3CC()
{
  sub_1A29EB634();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29EB3F4()
{
  sub_1A29EB634();
  return sub_1A2AE4108();
}

uint64_t SFTempPairingStateUpdate.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DD8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v14 = v1[2];
  v15 = v8;
  v9 = v1[3];
  v12[0] = v1[4];
  v12[1] = v1[5];
  v13 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29EB634();
  sub_1A2AE40E4();
  LOBYTE(v17) = 0;
  sub_1A2AE3DFC();
  if (!v2)
  {
    v10 = v14;
    v17 = v15;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
    sub_1A296E6F0(&qword_1EE675DD0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1A2AE3E2C();
    v17 = v10;
    v16 = 2;
    sub_1A2AE3E2C();
    v17 = v13;
    v16 = 3;
    sub_1A29EB678();
    sub_1A2AE3E2C();
    LOBYTE(v17) = 4;
    sub_1A2AE3DF0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1A29EB634()
{
  unint64_t result;

  result = qword_1EE676498;
  if (!qword_1EE676498)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF78C, &type metadata for SFTempPairingStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE676498);
  }
  return result;
}

unint64_t sub_1A29EB678()
{
  unint64_t result;

  result = qword_1EE675DC8;
  if (!qword_1EE675DC8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for AskToAirDropReceiverController.ConnectionState, &type metadata for AskToAirDropReceiverController.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1EE675DC8);
  }
  return result;
}

uint64_t SFTempPairingStateUpdate.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DB8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29EB634();
  sub_1A2AE40C0();
  if (!v2)
  {
    LOBYTE(v21) = 0;
    v9 = sub_1A2AE3D48();
    v19 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6764B8);
    v20 = 1;
    sub_1A296E6F0(&qword_1EE675D90, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1A2AE3D78();
    v18 = v9;
    v11 = v21;
    v20 = 2;
    swift_bridgeObjectRetain();
    sub_1A2AE3D78();
    v12 = v21;
    v20 = 3;
    sub_1A29EB9B8();
    swift_bridgeObjectRetain();
    sub_1A2AE3D78();
    v17 = v21;
    LOBYTE(v21) = 4;
    v13 = sub_1A2AE3D3C();
    v15 = v14;
    v18 &= 1u;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = v19;
    *v19 = v18;
    v16[1] = v11;
    v16[2] = v12;
    v16[3] = v17;
    v16[4] = v13;
    v16[5] = v15;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1A29EB9B8()
{
  unint64_t result;

  result = qword_1EE675D48;
  if (!qword_1EE675D48)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for AskToAirDropReceiverController.ConnectionState, &type metadata for AskToAirDropReceiverController.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1EE675D48);
  }
  return result;
}

uint64_t sub_1A29EB9FC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SFTempPairingStateUpdate.init(from:)(a1, a2);
}

uint64_t sub_1A29EBA10(_QWORD *a1)
{
  return SFTempPairingStateUpdate.encode(to:)(a1);
}

uint64_t SFTempPairingSenderStateUpdate.nearbyDeviceCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SFTempPairingSenderStateUpdate.nearbyDeviceCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SFTempPairingSenderStateUpdate.nearbyDeviceCount.modify())()
{
  return nullsub_1;
}

Sharing::SFTempPairingSenderStateUpdate __swiftcall SFTempPairingSenderStateUpdate.init()()
{
  _QWORD *v0;
  Sharing::SFTempPairingSenderStateUpdate result;

  *v0 = 0;
  return result;
}

unint64_t sub_1A29EBA4C()
{
  return 0xD000000000000011;
}

uint64_t sub_1A29EBA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A29EC588(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1A29EBA90()
{
  sub_1A29EBBC8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29EBAB8()
{
  sub_1A29EBBC8();
  return sub_1A2AE4108();
}

uint64_t SFTempPairingSenderStateUpdate.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29EBBC8();
  sub_1A2AE40E4();
  sub_1A2AE3E14();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1A29EBBC8()
{
  unint64_t result;

  result = qword_1EE67C2B8;
  if (!qword_1EE67C2B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF73C, &type metadata for SFTempPairingSenderStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C2B8);
  }
  return result;
}

uint64_t SFTempPairingSenderStateUpdate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29EBBC8();
  sub_1A2AE40C0();
  if (!v2)
  {
    v9 = sub_1A2AE3D60();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1A29EBD10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SFTempPairingSenderStateUpdate.init(from:)(a1, a2);
}

uint64_t sub_1A29EBD24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A29EBBC8();
  sub_1A2AE40E4();
  sub_1A2AE3E14();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t destroy for SFTempPairingStateUpdate()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SFTempPairingStateUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SFTempPairingStateUpdate(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SFTempPairingStateUpdate(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SFTempPairingStateUpdate()
{
  return &type metadata for SFTempPairingStateUpdate;
}

ValueMetadata *type metadata accessor for SFTempPairingSenderStateUpdate()
{
  return &type metadata for SFTempPairingSenderStateUpdate;
}

uint64_t storeEnumTagSinglePayload for SFTempPairingSenderStateUpdate.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A29EBFE0 + 4 * byte_1A2AFF4A5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A29EC000 + 4 * byte_1A2AFF4AA[v4]))();
}

_BYTE *sub_1A29EBFE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A29EC000(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29EC008(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29EC010(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A29EC018(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A29EC020(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SFTempPairingSenderStateUpdate.CodingKeys()
{
  return &type metadata for SFTempPairingSenderStateUpdate.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SFTempPairingStateUpdate.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SFTempPairingStateUpdate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A29EC118 + 4 * byte_1A2AFF4B4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A29EC14C + 4 * byte_1A2AFF4AF[v4]))();
}

uint64_t sub_1A29EC14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EC154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A29EC15CLL);
  return result;
}

uint64_t sub_1A29EC168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A29EC170);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A29EC174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A29EC17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFTempPairingStateUpdate.CodingKeys()
{
  return &type metadata for SFTempPairingStateUpdate.CodingKeys;
}

unint64_t sub_1A29EC19C()
{
  unint64_t result;

  result = qword_1EE67C2C8;
  if (!qword_1EE67C2C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF65C, &type metadata for SFTempPairingStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C2C8);
  }
  return result;
}

unint64_t sub_1A29EC1E4()
{
  unint64_t result;

  result = qword_1EE67C2D0;
  if (!qword_1EE67C2D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF714, &type metadata for SFTempPairingSenderStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C2D0);
  }
  return result;
}

unint64_t sub_1A29EC22C()
{
  unint64_t result;

  result = qword_1EE67C2D8;
  if (!qword_1EE67C2D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF684, &type metadata for SFTempPairingSenderStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C2D8);
  }
  return result;
}

unint64_t sub_1A29EC274()
{
  unint64_t result;

  result = qword_1EE67C2E0;
  if (!qword_1EE67C2E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF6AC, &type metadata for SFTempPairingSenderStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C2E0);
  }
  return result;
}

unint64_t sub_1A29EC2BC()
{
  unint64_t result;

  result = qword_1EE6764A8;
  if (!qword_1EE6764A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF5CC, &type metadata for SFTempPairingStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6764A8);
  }
  return result;
}

unint64_t sub_1A29EC304()
{
  unint64_t result;

  result = qword_1EE6764A0;
  if (!qword_1EE6764A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2AFF5F4, &type metadata for SFTempPairingStateUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6764A0);
  }
  return result;
}

uint64_t sub_1A29EC348(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B46210 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46230 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A2B46250 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x697463656E6E6F63 && a2 == 0xEF65746174536E6FLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4E676E6972616873 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A29EC588(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46270)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_QWORD *_SFXPCContainerRegistry.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[14] = sub_1A2978BA0(MEMORY[0x1E0DEE9D8]);
  v0[15] = sub_1A2978BA0(v1);
  v0[16] = sub_1A2978BA0(v1);
  return v0;
}

_QWORD *_SFXPCContainerRegistry.init()()
{
  _QWORD *v0;
  uint64_t v1;

  swift_defaultActor_initialize();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[14] = sub_1A2978BA0(MEMORY[0x1E0DEE9D8]);
  v0[15] = sub_1A2978BA0(v1);
  v0[16] = sub_1A2978BA0(v1);
  return v0;
}

BOOL _SFXPCContainerRegistry.isEmpty.getter()
{
  _QWORD *v0;

  swift_beginAccess();
  if (*(_QWORD *)(v0[14] + 16))
    return 0;
  swift_beginAccess();
  if (*(_QWORD *)(v0[15] + 16))
    return 0;
  swift_beginAccess();
  return *(_QWORD *)(v0[16] + 16) == 0;
}

uint64_t _SFXPCContainerRegistry.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  int64_t v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2E8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v93 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v89 - v6;
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v89 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v89 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v89 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v89 - v17;
  v100 = 0xA3A736B636F6C42;
  v101 = 0xE800000000000000;
  swift_beginAccess();
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v19 + 16);
  v90 = v0;
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 64);
    v91 = v19 + 64;
    v22 = 1 << *(_BYTE *)(v19 + 32);
    v23 = -1;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    v24 = v23 & v21;
    v92 = (unint64_t)(v22 + 63) >> 6;
    v89 = v92 - 1;
    result = swift_bridgeObjectRetain();
    v26 = 0;
    if (!v24)
      goto LABEL_9;
LABEL_7:
    v28 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    v29 = v28 | (v26 << 6);
LABEL_8:
    v30 = *(_QWORD *)(v19 + 48);
    v31 = sub_1A2AE3130();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v16, v30 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v29, v31);
    v32 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v29);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
    v34 = &v16[*(int *)(v33 + 48)];
    v35 = *v32;
    v36 = v32[1];
    *(_QWORD *)v34 = v35;
    *((_QWORD *)v34 + 1) = v36;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v16, 0, 1, v33);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1A29ED138((uint64_t)v16, (uint64_t)v18);
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v18, 1, v41) == 1)
        break;
      v98 = 9;
      v99 = 0xE100000000000000;
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      sub_1A2AE34F0();
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      v27 = sub_1A2AE3130();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v18, v27);
      if (v24)
        goto LABEL_7;
LABEL_9:
      v37 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      if (v37 < v92)
      {
        v38 = *(_QWORD *)(v91 + 8 * v37);
        if (v38)
          goto LABEL_12;
        v39 = v26 + 2;
        ++v26;
        if (v37 + 1 < v92)
        {
          v38 = *(_QWORD *)(v91 + 8 * v39);
          if (v38)
            goto LABEL_15;
          v26 = v37 + 1;
          if (v37 + 2 < v92)
          {
            v38 = *(_QWORD *)(v91 + 8 * (v37 + 2));
            if (v38)
            {
              v37 += 2;
              goto LABEL_12;
            }
            v39 = v37 + 3;
            v26 = v37 + 2;
            if (v37 + 3 < v92)
            {
              v38 = *(_QWORD *)(v91 + 8 * v39);
              if (v38)
              {
LABEL_15:
                v37 = v39;
LABEL_12:
                v24 = (v38 - 1) & v38;
                v29 = __clz(__rbit64(v38)) + (v37 << 6);
                v26 = v37;
                goto LABEL_8;
              }
              while (1)
              {
                v37 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_92;
                if (v37 >= v92)
                  break;
                v38 = *(_QWORD *)(v91 + 8 * v37);
                ++v39;
                if (v38)
                  goto LABEL_12;
              }
              v26 = v89;
            }
          }
        }
      }
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v16, 1, 1, v40);
      v24 = 0;
    }
    swift_release();
    v1 = v90;
  }
  else
  {
    sub_1A2AE34F0();
  }
  sub_1A2AE34F0();
  swift_beginAccess();
  v42 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v42 + 16))
  {
    v43 = *(_QWORD *)(v42 + 64);
    v92 = v42 + 64;
    v44 = 1 << *(_BYTE *)(v42 + 32);
    v45 = -1;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    v46 = v45 & v43;
    v47 = (unint64_t)(v44 + 63) >> 6;
    v91 = v47 - 1;
    result = swift_bridgeObjectRetain();
    v48 = 0;
    if (!v46)
      goto LABEL_38;
LABEL_36:
    v50 = __clz(__rbit64(v46));
    v46 &= v46 - 1;
    v51 = v50 | (v48 << 6);
LABEL_37:
    v52 = *(_QWORD *)(v42 + 48);
    v53 = sub_1A2AE3130();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v10, v52 + *(_QWORD *)(*(_QWORD *)(v53 - 8) + 72) * v51, v53);
    v54 = (uint64_t *)(*(_QWORD *)(v42 + 56) + 16 * v51);
    v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
    v56 = &v10[*(int *)(v55 + 48)];
    v57 = *v54;
    v58 = v54[1];
    *(_QWORD *)v56 = v57;
    *((_QWORD *)v56 + 1) = v58;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v10, 0, 1, v55);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1A29ED138((uint64_t)v10, (uint64_t)v13);
      v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v13, 1, v63) == 1)
        break;
      v96 = 9;
      v97 = 0xE100000000000000;
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      sub_1A2AE34F0();
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      v49 = sub_1A2AE3130();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v13, v49);
      if (v46)
        goto LABEL_36;
LABEL_38:
      v59 = v48 + 1;
      if (__OFADD__(v48, 1))
        goto LABEL_90;
      if (v59 < v47)
      {
        v60 = *(_QWORD *)(v92 + 8 * v59);
        if (v60)
          goto LABEL_41;
        v61 = v48 + 2;
        ++v48;
        if (v59 + 1 < v47)
        {
          v60 = *(_QWORD *)(v92 + 8 * v61);
          if (v60)
            goto LABEL_44;
          v48 = v59 + 1;
          if (v59 + 2 < v47)
          {
            v60 = *(_QWORD *)(v92 + 8 * (v59 + 2));
            if (v60)
            {
              v59 += 2;
              goto LABEL_41;
            }
            v61 = v59 + 3;
            v48 = v59 + 2;
            if (v59 + 3 < v47)
            {
              v60 = *(_QWORD *)(v92 + 8 * v61);
              if (v60)
              {
LABEL_44:
                v59 = v61;
LABEL_41:
                v46 = (v60 - 1) & v60;
                v51 = __clz(__rbit64(v60)) + (v59 << 6);
                v48 = v59;
                goto LABEL_37;
              }
              while (1)
              {
                v59 = v61 + 1;
                if (__OFADD__(v61, 1))
                  goto LABEL_93;
                if (v59 >= v47)
                  break;
                v60 = *(_QWORD *)(v92 + 8 * v59);
                ++v61;
                if (v60)
                  goto LABEL_41;
              }
              v48 = v91;
            }
          }
        }
      }
      v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v10, 1, 1, v62);
      v46 = 0;
    }
    swift_release();
    v1 = v90;
  }
  else
  {
    sub_1A2AE34F0();
  }
  sub_1A2AE34F0();
  swift_beginAccess();
  v64 = *(_QWORD *)(v1 + 128);
  if (!*(_QWORD *)(v64 + 16))
  {
    sub_1A2AE34F0();
    return v100;
  }
  v65 = *(_QWORD *)(v64 + 64);
  v92 = v64 + 64;
  v66 = 1 << *(_BYTE *)(v64 + 32);
  v67 = -1;
  if (v66 < 64)
    v67 = ~(-1 << v66);
  v68 = v67 & v65;
  v69 = (unint64_t)(v66 + 63) >> 6;
  v91 = v69 - 1;
  result = swift_bridgeObjectRetain();
  v70 = 0;
  if (!v68)
    goto LABEL_67;
LABEL_65:
  v72 = __clz(__rbit64(v68));
  v68 &= v68 - 1;
  v73 = v72 | (v70 << 6);
  while (2)
  {
    v74 = *(_QWORD *)(v64 + 48);
    v75 = sub_1A2AE3130();
    v76 = *(_QWORD *)(v75 - 8);
    v77 = v74 + *(_QWORD *)(v76 + 72) * v73;
    v78 = (uint64_t)v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v93, v77, v75);
    v79 = (uint64_t *)(*(_QWORD *)(v64 + 56) + 16 * v73);
    v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
    v81 = (_QWORD *)(v78 + *(int *)(v80 + 48));
    v82 = *v79;
    v83 = v79[1];
    *v81 = v82;
    v81[1] = v83;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v78, 0, 1, v80);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1A29ED138(v78, (uint64_t)v7);
      v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v7, 1, v88) == 1)
      {
        swift_release();
        return v100;
      }
      v94 = 9;
      v95 = 0xE100000000000000;
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      sub_1A2AE34F0();
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      v71 = sub_1A2AE3130();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v7, v71);
      if (v68)
        goto LABEL_65;
LABEL_67:
      v84 = v70 + 1;
      if (__OFADD__(v70, 1))
        goto LABEL_91;
      v78 = (uint64_t)v93;
      if (v84 < v69)
      {
        v85 = *(_QWORD *)(v92 + 8 * v84);
        if (v85)
          goto LABEL_70;
        v86 = v70 + 2;
        ++v70;
        if (v84 + 1 < v69)
        {
          v85 = *(_QWORD *)(v92 + 8 * v86);
          if (v85)
            goto LABEL_73;
          v70 = v84 + 1;
          if (v84 + 2 < v69)
          {
            v85 = *(_QWORD *)(v92 + 8 * (v84 + 2));
            if (v85)
            {
              v84 += 2;
              goto LABEL_70;
            }
            v86 = v84 + 3;
            v70 = v84 + 2;
            if (v84 + 3 < v69)
              break;
          }
        }
      }
LABEL_84:
      v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2F0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v78, 1, 1, v87);
      v68 = 0;
    }
    v85 = *(_QWORD *)(v92 + 8 * v86);
    if (v85)
    {
LABEL_73:
      v84 = v86;
LABEL_70:
      v68 = (v85 - 1) & v85;
      v73 = __clz(__rbit64(v85)) + (v84 << 6);
      v70 = v84;
      continue;
    }
    break;
  }
  while (1)
  {
    v84 = v86 + 1;
    if (__OFADD__(v86, 1))
      break;
    if (v84 >= v69)
    {
      v70 = v91;
      goto LABEL_84;
    }
    v85 = *(_QWORD *)(v92 + 8 * v84);
    ++v86;
    if (v85)
      goto LABEL_70;
  }
LABEL_94:
  __break(1u);
  return result;
}

uint64_t sub_1A29ED138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A29ED180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = sub_1A2AE3130();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29ED1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 48), v3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v6 + 112);
  *(_QWORD *)(v6 + 112) = 0x8000000000000000;
  sub_1A2A23200(v5, v4, v1, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 112) = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29ED2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = sub_1A2AE3130();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29ED338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 48), v3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v6 + 120);
  *(_QWORD *)(v6 + 120) = 0x8000000000000000;
  sub_1A2A23200(v5, v4, v1, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 120) = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29ED420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = sub_1A2AE3130();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29ED488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 48), v3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v6 + 128) = 0x8000000000000000;
  sub_1A2A23200(v5, v4, v1, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 128) = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29ED570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch();
}

uint64_t sub_1A29ED588()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess();
  sub_1A29B7BD4(v1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1A29B7BD4(v1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1A29B7BD4(v1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _SFXPCContainerRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t _SFXPCContainerRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t _SFXPCContainerRegistry.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1A29ED6D0()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for _SFXPCContainerRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for _SFXPCContainerRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _SFXPCContainerRegistry.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1A29ED710@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t Deque._UnsafeHandle._elements.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 Deque._UnsafeHandle.header.getter@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t Deque._UnsafeHandle.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t Deque._UnsafeHandle.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t Deque._UnsafeHandle.count.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

_QWORD *(*Deque._UnsafeHandle.count.modify(_QWORD *a1, uint64_t a2))(_QWORD *result)
{
  *a1 = *(_QWORD *)(a2 + 8);
  a1[1] = a2;
  return sub_1A29ED8FC;
}

_QWORD *sub_1A29ED8FC(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *result;
  return result;
}

uint64_t Deque._UnsafeHandle.startSlot.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t Deque._UnsafeHandle.startSlot.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

_QWORD *(*Deque._UnsafeHandle.startSlot.modify(_QWORD *a1, uint64_t a2))(_QWORD *result)
{
  *a1 = *(_QWORD *)(a2 + 16);
  a1[1] = a2;
  return sub_1A29ED934;
}

_QWORD *sub_1A29ED934(_QWORD *result)
{
  *(_QWORD *)(result[1] + 16) = *result;
  return result;
}

uint64_t Deque._UnsafeHandle.ptr(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a1;
}

uint64_t Deque._UnsafeHandle.mutableBuffer.getter()
{
  return sub_1A2AE3A0C();
}

uint64_t Deque._UnsafeHandle.buffer(for:)(uint64_t result, uint64_t a2)
{
  if (!__OFSUB__(a2, result))
    return sub_1A2AE33E8();
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableBuffer(for:)(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    sub_1A2AE33E8();
    return sub_1A2AE3A24();
  }
  return result;
}

uint64_t Deque._UnsafeHandle.limSlot.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

Sharing::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(after:)(Sharing::_DequeSlot after)
{
  _QWORD *v1;

  if (__OFADD__(after.position, 1))
  {
    __break(1u);
  }
  else if (after.position + 1 >= *v1)
  {
    return 0;
  }
  else
  {
    ++after.position;
  }
  return after;
}

Sharing::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(before:)(Sharing::_DequeSlot before)
{
  _QWORD *v1;
  BOOL v2;
  Sharing::_DequeSlot result;

  if (before.position)
  {
    v2 = __OFSUB__(before.position, 1);
    result.position = before.position - 1;
    if (!v2)
      return result;
    __break(1u);
  }
  result.position = *v1 - 1;
  if (__OFSUB__(*v1, 1))
    __break(1u);
  return result;
}

Sharing::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(_:offsetBy:)(Sharing::_DequeSlot _, Swift::Int offsetBy)
{
  Swift::Int *v2;
  Sharing::_DequeSlot result;
  BOOL v4;

  v4 = __OFADD__(_.position, offsetBy);
  result.position = _.position + offsetBy;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (offsetBy < 0)
  {
LABEL_7:
    if ((result.position & 0x8000000000000000) == 0)
      return result;
    v4 = __OFADD__(result.position, *v2);
    result.position += *v2;
    if (!v4)
      return result;
LABEL_11:
    __break(1u);
    return result;
  }
  v4 = __OFSUB__(result.position, *v2);
  if (result.position >= *v2)
  {
    result.position -= *v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

Sharing::_DequeSlot Deque._UnsafeHandle.endSlot.getter(Sharing::_DequeSlot *a1)
{
  return Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position);
}

Sharing::_DequeSlot __swiftcall Deque._UnsafeHandle.slot(forOffset:)(Swift::Int forOffset)
{
  Swift::Int *v1;
  Swift::Int v2;
  Swift::Int v3;

  v2 = v1[2] + forOffset;
  v3 = *v1;
  if (v2 < *v1)
    v3 = 0;
  return (Sharing::_DequeSlot)(v2 - v3);
}

_QWORD *Deque._UnsafeHandle.segments()@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  v3 = result[2];
  v4 = *result - v3;
  if (__OFSUB__(*result, v3))
  {
    __break(1u);
  }
  else
  {
    v5 = result[1];
    if (v4 >= v5)
    {
      result = (_QWORD *)_UnsafeWrappedBuffer.init(start:count:)((uint64_t)v8);
      goto LABEL_6;
    }
    if (!__OFSUB__(v5, v4))
    {
      result = (_QWORD *)_UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v8);
LABEL_6:
      v6 = v9;
      v7 = v8[1];
      *(_OWORD *)a2 = v8[0];
      *(_OWORD *)(a2 + 16) = v7;
      *(_BYTE *)(a2 + 32) = v6;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.segments(forOffsets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;

  v5 = a3[2];
  v6 = v5 + result;
  v7 = *a3;
  if (v5 + result >= *a3)
    v8 = *a3;
  else
    v8 = 0;
  v9 = v5 + a2;
  if (v9 >= v7)
    v10 = *a3;
  else
    v10 = 0;
  v11 = __OFSUB__(a2, result);
  v12 = a2 - result;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    v13 = v6 - v8;
    if (!v12 || v13 < v9 - v10)
    {
      result = _UnsafeWrappedBuffer.init(start:count:)((uint64_t)v16);
      goto LABEL_13;
    }
    if (!__OFSUB__(v7, v13))
    {
      result = _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)v16);
LABEL_13:
      v14 = v17;
      v15 = v16[1];
      *(_OWORD *)a4 = v16[0];
      *(_OWORD *)(a4 + 16) = v15;
      *(_BYTE *)(a4 + 32) = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[4];
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v22);
  v5 = sub_1A2AE3A24();
  v7 = v6;
  sub_1A2AE33F4();
  v8 = sub_1A2AE39F4();
  v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v24, &v23, v8);
  v9((uint64_t *)v18, v24, v8);
  v17[2] = a2;
  v10 = sub_1A2AE3A3C();
  result = sub_1A29ED710((void (*)(char *, char *))sub_1A29F02A0, (uint64_t)v17, MEMORY[0x1E0DEDCE8], v10, v11, (uint64_t)&v19);
  v13 = v19;
  v14 = v20;
  if (v20)
    v15 = v19;
  else
    v15 = 0;
  if (v20)
    v16 = v21;
  else
    v16 = 1;
  if (!v21)
    v13 = v15;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v14;
  *(_BYTE *)(a3 + 32) = v16;
  return result;
}

uint64_t Deque._UnsafeHandle.mutableSegments(forOffsets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a3, (uint64_t)&v24);
  v7 = sub_1A2AE3A24();
  v9 = v8;
  sub_1A2AE33F4();
  v10 = sub_1A2AE39F4();
  v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v26, &v25, v10);
  v11((uint64_t *)v20, v26, v10);
  v19[2] = a4;
  v12 = sub_1A2AE3A3C();
  result = sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v19, MEMORY[0x1E0DEDCE8], v12, v13, (uint64_t)&v21);
  v15 = v21;
  v16 = v22;
  if (v22)
    v17 = v21;
  else
    v17 = 0;
  if (v22)
    v18 = v23;
  else
    v18 = 1;
  if (!v23)
    v15 = v17;
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v16;
  *(_BYTE *)(a5 + 32) = v18;
  return result;
}

Sharing::_DequeSlot Deque._UnsafeHandle.availableSegments()@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v4;
  Swift::Int v5;
  Sharing::_DequeSlot result;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int position;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = a1[2];
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v4, v5).position;
  v7 = *a1;
  if (v5 >= *a1)
  {
    result.position = sub_1A2AE3A0C();
    goto LABEL_6;
  }
  if (result.position < v4)
  {
    if (!__OFSUB__(v4, result.position))
    {
      sub_1A2AE33E8();
      result.position = sub_1A2AE3A24();
LABEL_6:
      position = result.position;
      v10 = v8;
      v11 = 0;
      v12 = 0;
      v13 = 1;
LABEL_13:
      *(_QWORD *)a2 = position;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v12;
      *(_BYTE *)(a2 + 32) = v13;
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v7 < result.position)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (__OFSUB__(v7, result.position))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_1A2AE33E8();
  result.position = sub_1A2AE3A24();
  v10 = v14;
  if ((a1[2] & 0x8000000000000000) == 0)
  {
    position = result.position;
    sub_1A2AE33E8();
    result.position = sub_1A2AE3A24();
    v13 = v12 == 0;
    if (v12)
      v11 = result.position;
    else
      v11 = 0;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.initialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A29EDF54(a1, a2, a3, a4, a5, a6, MEMORY[0x1E0DEA578], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8D0]);
}

uint64_t Deque._UnsafeHandle.moveInitialize(at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A29EDF54(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB980], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB8F0]);
}

uint64_t sub_1A29EDF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  BOOL v14;

  if (a3 < 1)
    return a1;
  result = a7(a2, a3, a6);
  if (result)
  {
    result = a8(result, a3, a5 + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a1, a6);
    v14 = __OFADD__(a1, a3);
    a1 += a3;
    if (!v14)
      return a1;
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_source_Sharing__DequeSlot_target_Sharing__DequeSlot __swiftcall Deque._UnsafeHandle.move(from:to:count:)(Sharing::_DequeSlot from, Sharing::_DequeSlot to, Swift::Int count)
{
  Swift::Int position;
  Swift::Int v7;
  Swift::tuple_source_Sharing__DequeSlot_target_Sharing__DequeSlot result;

  if (count >= 1)
  {
    sub_1A2AE39DC();
    from.position = Deque._UnsafeHandle.slot(_:offsetBy:)(from, count).position;
    to.position = Deque._UnsafeHandle.slot(_:offsetBy:)(to, count).position;
  }
  position = from.position;
  v7 = to.position;
  result.target.position = v7;
  result.source.position = position;
  return result;
}

uint64_t Deque._UnsafeHandle.copyElements()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[16];
  _BYTE v14[16];

  type metadata accessor for _DequeBuffer(0, a3, a3, a4);
  v13[14] = a1;
  v13[15] = a2;
  sub_1A2AE3B68();
  swift_retain();
  v7 = sub_1A2AE3C94();
  v8 = v7;
  if (*(uint64_t *)(a1 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    v9 = MEMORY[0x1E0C80A78](v7);
    v13[8] = a3;
    v13[9] = a1;
    v13[10] = a2;
    MEMORY[0x1E0C80A78](v9);
    v13[2] = a3;
    v13[3] = sub_1A29F02D4;
    v13[4] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F02F0, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, a3, v11, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v14);
    swift_release();
  }
  return v8;
}

uint64_t sub_1A29EE1B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16[2];
  char v17;

  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  Deque._UnsafeHandle.initialize(at:from:)(a3[2], v13[0], v13[1], v8, a2, a5);
  sub_1A2AE33F4();
  v9 = sub_1A2AE39F4();
  v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  result = v10(v16, v15, v9);
  if ((v17 & 1) == 0)
    return Deque._UnsafeHandle.initialize(at:from:)(0, v16[0], v16[1], v12, a2, a5);
  return result;
}

uint64_t Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[16];
  _BYTE v14[16];

  type metadata accessor for _DequeBuffer(0, a4, a3, a4);
  v13[14] = a2;
  v13[15] = a3;
  sub_1A2AE3B68();
  swift_retain();
  v7 = sub_1A2AE3C94();
  v8 = v7;
  if (*(uint64_t *)(a2 + 8) < 1)
  {
    swift_release();
  }
  else
  {
    v9 = MEMORY[0x1E0C80A78](v7);
    v13[8] = a4;
    v13[9] = a2;
    v13[10] = a3;
    MEMORY[0x1E0C80A78](v9);
    v13[2] = a4;
    v13[3] = sub_1A29F0360;
    v13[4] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, a4, v11, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v14);
    swift_release();
  }
  return v8;
}

uint64_t sub_1A29EE3E8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16[2];
  char v17;

  Deque._UnsafeHandle.segments()(a3, (uint64_t)v13);
  v8 = Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v7, a2, a5);
  sub_1A2AE33F4();
  v9 = sub_1A2AE39F4();
  v10 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v15, &v14, v9);
  result = v10(v16, v15, v9);
  if ((v17 & 1) == 0)
    return Deque._UnsafeHandle.initialize(at:from:)(v8, v16[0], v16[1], v12, a2, a5);
  return result;
}

uint64_t Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[16];
  _BYTE v15[16];

  v7 = *(_QWORD *)(a2 + 8);
  type metadata accessor for _DequeBuffer(0, a4, a3, a4);
  v14[14] = v7;
  sub_1A2AE3B68();
  swift_retain();
  v8 = sub_1A2AE3C94();
  v9 = v8;
  if (v7 < 1)
  {
    swift_release();
  }
  else
  {
    v10 = MEMORY[0x1E0C80A78](v8);
    v14[8] = a4;
    v14[9] = a2;
    v14[10] = a3;
    MEMORY[0x1E0C80A78](v10);
    v14[2] = a4;
    v14[3] = sub_1A29F03BC;
    v14[4] = v11;
    v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v14, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v12, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v15);
    swift_release();
    *(_QWORD *)(a2 + 8) = 0;
  }
  return v9;
}

uint64_t sub_1A29EE628(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD v16[4];
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  Deque._UnsafeHandle.segments()(a3, (uint64_t)&v21);
  sub_1A2AE3A24();
  v7 = v6;
  sub_1A2AE33F4();
  v8 = sub_1A2AE39F4();
  v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v23, &v22, v8);
  v9((uint64_t *)v17, v23, v8);
  v16[2] = a5;
  v10 = sub_1A2AE3A3C();
  result = sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v16, MEMORY[0x1E0DEDCE8], v10, v11, (uint64_t)&v18);
  v13 = v19;
  if (v19)
    v14 = v20;
  else
    v14 = 1;
  if (v7 >= 1)
  {
    result = sub_1A2AE3A00();
    if (!result)
    {
      __break(1u);
      goto LABEL_15;
    }
    result = sub_1A2AE39DC();
  }
  if (v13 < 1)
    v15 = 1;
  else
    v15 = v14;
  if ((v15 & 1) == 0)
  {
    result = sub_1A2AE3A00();
    if (result)
      return sub_1A2AE39DC();
LABEL_15:
    __break(1u);
  }
  return result;
}

Sharing::_DequeSlot Deque._UnsafeHandle.withUnsafeSegment<A>(startingAt:maximumCount:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, Sharing::_DequeSlot *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  Sharing::_DequeSlot result;
  Swift::Int v26;
  Swift::Int position;
  Swift::Int v28;
  Swift::Int v29;
  BOOL v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a10;
  v39 = *(_QWORD *)(a10 - 8);
  v40 = a1;
  v14 = MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v21 = (char *)&v35 - v20;
  v23 = *(_QWORD *)(v22 + 8);
  if (v23 <= v24)
    goto LABEL_17;
  v16 = v18;
  v36 = v17;
  v37 = v19;
  v38 = a5;
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a7[2], v23).position;
  v26 = a7[2].position + a2;
  position = a7->position;
  if (v26 >= a7->position)
    v28 = a7->position;
  else
    v28 = 0;
  v29 = v26 - v28;
  if (v29 < result.position)
    position = result.position;
  v30 = __OFSUB__(position, v29);
  v31 = (void (*)(uint64_t))(position - v29);
  if (!v30)
  {
    v32 = 0x7FFFFFFFFFFFFFFFLL;
    if ((v16 & 1) == 0)
      v32 = v36;
    if ((uint64_t)v31 >= v32)
      a5 = (void (*)(uint64_t))v32;
    else
      a5 = v31;
    v33 = sub_1A2AE33E8();
    v38(v33);
    if (v10)
      return (Sharing::_DequeSlot)v23;
    v23 = (Swift::Int)a5 + a2;
    if (!__OFADD__(a2, a5))
    {
LABEL_19:
      (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v21, v41);
      return (Sharing::_DequeSlot)v23;
    }
    __break(1u);
LABEL_17:
    v34 = sub_1A2AE33E8();
    a5(v34);
    v21 = v16;
    if (v10)
      return (Sharing::_DequeSlot)v23;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[6];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _QWORD v35[4];
  char v36;
  uint64_t v37;
  uint64_t v38;

  if (result != a2)
  {
    v37 = v8;
    v38 = v9;
    Deque._UnsafeHandle.segments(forOffsets:)(result, a2, a4, (uint64_t)&v32);
    v14 = sub_1A2AE3A24();
    v16 = v15;
    sub_1A2AE33F4();
    v17 = sub_1A2AE39F4();
    v18 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v34, &v33, v17);
    v19 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v18)(v35, v34, v17);
    MEMORY[0x1E0C80A78](v19);
    v28[2] = a6;
    v20 = sub_1A2AE3A3C();
    sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v28, MEMORY[0x1E0DEDCE8], v20, v21, (uint64_t)&v29);
    v24 = v29;
    if (v30)
      v25 = v29;
    else
      v25 = 0;
    if (v30)
      v26 = v31;
    else
      v26 = 1;
    if (!v31)
      v24 = v25;
    v35[0] = v14;
    v35[1] = v16;
    v35[2] = v24;
    v35[3] = v30;
    v36 = v26;
    v27 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v22, v23);
    return _UnsafeMutableWrappedBuffer.assign<A>(from:)(a3, v27, a7, a8);
  }
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Sharing::_DequeSlot *v11;
  Swift::Int v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3 + *(_QWORD *)(v8 + 72) * Deque._UnsafeHandle.slot(_:offsetBy:)(v11[2], v11[1].position).position;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  result = (*(uint64_t (**)(Swift::Int, char *, uint64_t))(v8 + 32))(v12, v10, a4);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(a2 + 8) = v16;
  return result;
}

uint64_t sub_1A29EEB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
}

uint64_t Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _QWORD v33[4];
  char v34;

  if (a2 < 1)
    return result;
  v6 = result;
  result = a3[1];
  v7 = __OFADD__(result, a2);
  v8 = result + a2;
  if (v7)
  {
    __break(1u);
    goto LABEL_15;
  }
  a3[1] = v8;
  if (v8 < result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  Deque._UnsafeHandle.segments(forOffsets:)(result, v8, a3, (uint64_t)&v30);
  v10 = sub_1A2AE3A24();
  v12 = v11;
  v13 = sub_1A2AE33F4();
  v14 = sub_1A2AE39F4();
  v15 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v32, &v31, v14);
  v16 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v15)(v33, v32, v14);
  MEMORY[0x1E0C80A78](v16);
  v26[2] = a5;
  v17 = sub_1A2AE3A3C();
  sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v26, MEMORY[0x1E0DEDCE8], v17, v18, (uint64_t)&v27);
  v21 = v27;
  if (v28)
    v22 = v27;
  else
    v22 = 0;
  if (v28)
    v23 = v29;
  else
    v23 = 1;
  if (!v29)
    v21 = v22;
  v33[0] = v10;
  v33[1] = v12;
  v33[2] = v21;
  v33[3] = v28;
  v34 = v23;
  v27 = v6;
  v28 = a2;
  v24 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v19, v20);
  v25 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEA5E8], v13);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)&v27, v24, v13, v25);
}

uint64_t Deque._UnsafeHandle.uncheckedPrepend(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a4 - 8);
  result = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  if (!v11)
  {
LABEL_5:
    v12 = *a2 - 1;
    if (__OFSUB__(*a2, 1))
      goto LABEL_9;
    goto LABEL_6;
  }
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  v13 = v8 + v12 * *(_QWORD *)(v6 + 72);
  (*(void (**)(char *))(v6 + 16))(v10);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v13, v10, a4);
  a2[2] = v12;
  v14 = a2[1];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (!v15)
  {
    a2[1] = v16;
    return result;
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

Swift::Int Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(Swift::Int result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[40];

  if (a2 >= 1)
  {
    v8 = result;
    v9 = a3[2];
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v9, -a2).position;
    a3[2] = result;
    v10 = a3[1];
    v11 = __OFADD__(v10, a2);
    v12 = v10 + a2;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      a3[1] = v12;
      Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(result, v9, a3, (uint64_t)v19);
      v18[0] = v8;
      v18[1] = a2;
      v15 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v13, v14);
      v16 = sub_1A2AE33F4();
      v17 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEA5E8], v16);
      return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v18, v15, v16, v17);
    }
  }
  return result;
}

uint64_t Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (result >= a2)
  {
    if (!__OFSUB__(*a3, result))
    {
      v5 = sub_1A2AE3A0C();
      v7 = v11;
      result = sub_1A2AE3A0C();
      v10 = v9 == 0;
      if (v9)
        v8 = result;
      else
        v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    if (!__OFSUB__(a2, result))
    {
      result = sub_1A2AE3A0C();
      v5 = result;
      v7 = v6;
      v8 = 0;
      v9 = 0;
      v10 = 1;
LABEL_8:
      *(_QWORD *)a4 = v5;
      *(_QWORD *)(a4 + 8) = v7;
      *(_QWORD *)(a4 + 16) = v8;
      *(_QWORD *)(a4 + 24) = v9;
      *(_BYTE *)(a4 + 32) = v10;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[40];

  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v13 >= 1)
  {
    Deque._UnsafeHandle.openGap(ofSize:atOffset:)(v13, v14, v15, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a1, a7);
    v20 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a6, v18, v19);
    _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v17, v20, a7, a8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a7);
}

uint64_t Deque._UnsafeHandle.openGap(ofSize:atOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t position;
  Swift::Int v10;
  Sharing::_DequeSlot v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  Sharing::_DequeSlot v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;
  BOOL v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  char v39;
  __int128 v40;
  _OWORD v42[2];
  char v43;

  v4 = a3[1];
  v5 = v4 - a2;
  if (__OFSUB__(v4, a2))
  {
    __break(1u);
    goto LABEL_81;
  }
  v7 = a2;
  v8 = result;
  position = a3[2];
  if (v5 <= a2)
  {
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v4).position;
    if (__OFADD__(v4, v8))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v10 = result;
    position = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v4 + v8).position;
    v22 = a3[2] + v7;
    v23 = *a3;
    if (v22 < *a3)
      v23 = 0;
    v14 = v22 - v23;
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)(v22 - v23), v8).position;
    v11.position = result;
    v18 = *a3;
    if (v10 <= 0)
      v24 = *a3;
    else
      v24 = v10;
    if (position <= 0)
      v25 = *a3;
    else
      v25 = position;
    if (v24 >= v14)
    {
      if (v25 < result)
      {
        if (__OFSUB__(0, v8))
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        if (position >= 1)
        {
          v7 = v18 - v8;
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v7, position);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, position).position;
        }
        v31 = __OFSUB__(v5, position);
        v5 -= position;
        if (v31)
        {
          __break(1u);
          goto LABEL_56;
        }
      }
    }
    else
    {
      if (v25 < result)
      {
        if (v10 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v8, v10).position;
        }
        if (__OFSUB__(0, v8))
          goto LABEL_86;
        if (v8 >= 1)
        {
          v26.position = *a3 - v8;
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v26, v8);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8).position;
        }
        v27 = v5 - v8;
        if (__OFSUB__(v5, v8))
          goto LABEL_87;
        v5 = v27 - v10;
        if (__OFSUB__(v27, v10))
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        if (v5 < 1)
          goto LABEL_66;
LABEL_65:
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v14, v5);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v5).position;
LABEL_66:
        v33 = a3[1];
        v31 = __OFADD__(v33, v8);
        v34 = v33 + v8;
        if (!v31)
        {
          a3[1] = v34;
          if (v11.position <= 0)
            v35 = *a3;
          else
            v35 = v11.position;
          v36 = v14;
          goto LABEL_79;
        }
        goto LABEL_83;
      }
      if (v10 >= 1)
      {
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v10);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v8, v10).position;
        v18 = *a3;
      }
      v5 = v18 - v14;
      if (__OFSUB__(v18, v14))
        goto LABEL_92;
    }
    if (v5 <= 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  v10 = -result;
  if (__OFSUB__(0, result))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v11.position = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, -result).position;
  v12 = a3[2] + v7;
  v13 = *a3;
  if (v12 < *a3)
    v13 = 0;
  v14 = v12 - v13;
  result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)(v12 - v13), -v8).position;
  v5 = result;
  v15 = *a3;
  if (v14 <= 0)
    v16 = *a3;
  else
    v16 = v14;
  if (result <= 0)
    v17 = *a3;
  else
    v17 = result;
  if (v16 >= position)
  {
    if (v17 >= v11.position)
    {
      if (v7 < 1)
        goto LABEL_74;
      sub_1A2AE39DC();
      Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v7);
      v29 = v11.position;
      v30 = v7;
      goto LABEL_73;
    }
    v28 = v15 - v11.position;
    if (__OFSUB__(v15, v11.position))
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v28 < 1)
      goto LABEL_47;
    sub_1A2AE39DC();
    Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v28);
    v20 = v11.position;
    v21 = v28;
    goto LABEL_46;
  }
  v7 = v15 - position;
  LOBYTE(v18) = __OFSUB__(v15, position);
  if (v17 < v11.position)
  {
    if ((v18 & 1) != 0)
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v7 >= 1)
    {
      sub_1A2AE39DC();
      Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v7);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v8 < 1)
      goto LABEL_47;
    v19 = *a3 - v8;
    sub_1A2AE39DC();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v8);
    v20 = v19;
    v21 = v8;
LABEL_46:
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v20, v21).position;
LABEL_47:
    if (v5 < 1)
      goto LABEL_74;
    sub_1A2AE39DC();
    Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v8, v5);
    v29 = 0;
    v30 = v5;
    goto LABEL_73;
  }
LABEL_56:
  if ((v18 & 1) == 0)
  {
    if (v7 >= 1)
    {
      sub_1A2AE39DC();
      Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)position, v7);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(v11, v7).position;
    }
    if (v14 < 1)
    {
LABEL_74:
      a3[2] = v11.position;
      v37 = a3[1];
      v31 = __OFADD__(v37, v8);
      v38 = v37 + v8;
      if (!v31)
      {
        a3[1] = v38;
        if (v14 <= 0)
          v35 = *a3;
        else
          v35 = v14;
        v36 = v5;
LABEL_79:
        result = Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v36, v35, a3, (uint64_t)v42);
        v39 = v43;
        v40 = v42[1];
        *(_OWORD *)a4 = v42[0];
        *(_OWORD *)(a4 + 16) = v40;
        *(_BYTE *)(a4 + 32) = v39;
        return result;
      }
      goto LABEL_84;
    }
    v32 = *a3 + v10;
    sub_1A2AE39DC();
    Deque._UnsafeHandle.slot(_:offsetBy:)(0, v14);
    v29 = v32;
    v30 = v14;
LABEL_73:
    result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v29, v30).position;
    goto LABEL_74;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveFirst()(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1A2AE39E8();
  v3 = a1[2];
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    v6 = a1[1];
    if (v5 >= *a1)
      v5 = 0;
    a1[2] = v5;
    if (!__OFSUB__(v6, 1))
    {
      a1[1] = v6 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque._UnsafeHandle.uncheckedRemoveLast()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (__OFSUB__(*(_QWORD *)(result + 8), 1))
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    result = sub_1A2AE39E8();
    v2 = *(_QWORD *)(v1 + 8);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (!v3)
    {
      *(_QWORD *)(v1 + 8) = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Sharing::_DequeSlot *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::Int position;
  BOOL v20;
  Swift::Int v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _QWORD v29[4];
  char v30;

  if (a1 >= 1)
  {
    v3 = v2;
    v4 = (Sharing::_DequeSlot *)v1;
    Deque._UnsafeHandle.segments(forOffsets:)(0, a1, v1, (uint64_t)&v26);
    v6 = sub_1A2AE3A24();
    v8 = v7;
    sub_1A2AE33F4();
    v9 = sub_1A2AE39F4();
    v10 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v28, &v27, v9);
    v11 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v10)(v29, v28, v9);
    MEMORY[0x1E0C80A78](v11);
    v22[2] = v3;
    v12 = sub_1A2AE3A3C();
    sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v22, MEMORY[0x1E0DEDCE8], v12, v13, (uint64_t)&v23);
    v16 = v23;
    if (v24)
      v17 = v23;
    else
      v17 = 0;
    if (v24)
      v18 = v25;
    else
      v18 = 1;
    if (!v25)
      v16 = v17;
    v29[0] = v6;
    v29[1] = v8;
    v29[2] = v16;
    v29[3] = v24;
    v30 = v18;
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, v3, v14, v15);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    v4[2].position = Deque._UnsafeHandle.slot(_:offsetBy:)(v4[2], a1).position;
    position = v4[1].position;
    v20 = __OFSUB__(position, a1);
    v21 = position - a1;
    if (v20)
      __break(1u);
    else
      v4[1].position = v21;
  }
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveLast(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _QWORD v31[4];
  char v32;

  if (a1 >= 1)
  {
    v3 = v1;
    v5 = v1[1];
    v6 = __OFSUB__(v5, a1);
    v7 = v5 - a1;
    if (v6)
    {
      __break(1u);
    }
    else if (v5 >= v7)
    {
      v8 = v2;
      Deque._UnsafeHandle.segments(forOffsets:)(v7, v5, v3, (uint64_t)&v28);
      v9 = sub_1A2AE3A24();
      v11 = v10;
      sub_1A2AE33F4();
      v12 = sub_1A2AE39F4();
      v13 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(v30, &v29, v12);
      v14 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v13)(v31, v30, v12);
      MEMORY[0x1E0C80A78](v14);
      v24[2] = v8;
      v15 = sub_1A2AE3A3C();
      sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v24, MEMORY[0x1E0DEDCE8], v15, v16, (uint64_t)&v25);
      v19 = v25;
      if (v26)
        v20 = v25;
      else
        v20 = 0;
      if (v26)
        v21 = v27;
      else
        v21 = 1;
      if (!v27)
        v19 = v20;
      v31[0] = v9;
      v31[1] = v11;
      v31[2] = v19;
      v31[3] = v26;
      v32 = v21;
      type metadata accessor for _UnsafeMutableWrappedBuffer(0, v8, v17, v18);
      _UnsafeMutableWrappedBuffer.deinitialize()();
      v22 = v3[1];
      v6 = __OFSUB__(v22, a1);
      v23 = v22 - a1;
      if (!v6)
      {
        v3[1] = v23;
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_17;
  }
}

Swift::Void __swiftcall Deque._UnsafeHandle.uncheckedRemoveAll()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD v24[4];
  char v25;

  v2 = v0 + 1;
  if ((uint64_t)v0[1] >= 1)
  {
    v3 = v1;
    Deque._UnsafeHandle.segments()(v0, (uint64_t)&v21);
    v4 = sub_1A2AE3A24();
    v6 = v5;
    sub_1A2AE33F4();
    v7 = sub_1A2AE39F4();
    v8 = *(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(v23, &v22, v7);
    v9 = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))v8)(v24, v23, v7);
    MEMORY[0x1E0C80A78](v9);
    v17[2] = v3;
    v10 = sub_1A2AE3A3C();
    sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v17, MEMORY[0x1E0DEDCE8], v10, v11, (uint64_t)&v18);
    v14 = v18;
    if (v19)
      v15 = v18;
    else
      v15 = 0;
    if (v19)
      v16 = v20;
    else
      v16 = 1;
    if (!v20)
      v14 = v15;
    v24[0] = v4;
    v24[1] = v6;
    v24[2] = v14;
    v24[3] = v19;
    v25 = v16;
    type metadata accessor for _UnsafeMutableWrappedBuffer(0, v3, v12, v13);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    *v2 = 0;
    v2[1] = 0;
  }
}

Swift::Int Deque._UnsafeHandle.uncheckedRemove(offsets:)(uint64_t a1, uint64_t a2, Sharing::_DequeSlot *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[4];
  char v30;

  Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, &a3->position, (uint64_t)&v26);
  v9 = sub_1A2AE3A24();
  v11 = v10;
  sub_1A2AE33F4();
  v12 = sub_1A2AE39F4();
  v13 = *(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v28, &v27, v12);
  v13(v29, v28, v12);
  v22[2] = a5;
  v14 = sub_1A2AE3A3C();
  sub_1A29ED710((void (*)(char *, char *))sub_1A29F04D0, (uint64_t)v22, MEMORY[0x1E0DEDCE8], v14, v15, (uint64_t)&v23);
  v18 = v23;
  if (v24)
    v19 = v23;
  else
    v19 = 0;
  if (v24)
    v20 = v25;
  else
    v20 = 1;
  if (!v25)
    v18 = v19;
  v29[0] = v9;
  v29[1] = v11;
  v29[2] = v18;
  v29[3] = v24;
  v30 = v20;
  type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v16, v17);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  return Deque._UnsafeHandle.closeGap(offsets:)(a1, a2, a3);
}

Swift::Int Deque._UnsafeHandle.closeGap(offsets:)(Swift::Int result, uint64_t a2, Sharing::_DequeSlot *a3)
{
  Swift::Int v3;
  Swift::Int v5;
  Sharing::_DequeSlot v6;
  Swift::Int position;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  Sharing::_DequeSlot v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  Swift::Int v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Int v24;
  Sharing::_DequeSlot v25;
  Swift::Int v26;
  Sharing::_DequeSlot v27;
  Swift::Int v28;
  BOOL v29;
  Sharing::_DequeSlot v30;
  Sharing::_DequeSlot v31;
  Swift::Int v32;
  BOOL v33;
  Swift::Int v34;
  Swift::Int v35;
  Swift::Int v36;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v3 < 1)
    return result;
  v5 = result;
  position = a3[1].position;
  v6.position = a3[2].position;
  v8 = a3->position;
  if (v6.position + result >= a3->position)
    v9 = a3->position;
  else
    v9 = 0;
  if (v6.position + a2 < v8)
    v8 = 0;
  v10 = position - a2;
  if (__OFSUB__(position, a2))
    goto LABEL_83;
  v11 = v6.position + result - v9;
  v12 = v6.position + a2 - v8;
  if (v10 > result)
  {
    result = Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v3).position;
    v10 = result;
    if (!v5)
      goto LABEL_68;
    v13 = a3->position;
    if (v12 <= 0)
      v14 = a3->position;
    else
      v14 = v12;
    if (v11 <= 0)
      v15 = a3->position;
    else
      v15 = v11;
    if (v6.position >= v15)
    {
      if (v14 < result)
      {
        if (v11 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
          Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v3, v11);
          v13 = a3->position;
        }
        v27.position = v13 - v3;
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v27, v3);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        v11 = v5 - v12;
        if (__OFSUB__(v5, v12))
          goto LABEL_88;
        if (v11 < 1)
          goto LABEL_68;
        v12 = a3[2].position;
        goto LABEL_66;
      }
      if (__OFSUB__(0, v11))
      {
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v11 >= 1)
      {
        v12 -= v11;
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)(0, v11);
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v11).position;
      }
      v33 = __OFSUB__(v5, v11);
      v11 = v5 - v11;
      if (v33)
        goto LABEL_91;
      goto LABEL_64;
    }
    if (v14 >= result)
    {
      if (v5 >= 1)
      {
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)(v6, v5);
        v31.position = v10;
        v32 = v5;
LABEL_67:
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v31, v32).position;
        goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v12 >= 1)
    {
      v16.position = v13 - v3;
      sub_1A2AE39DC();
      Deque._UnsafeHandle.slot(_:offsetBy:)(v16, v12);
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v12).position;
    }
    v11 = v5 - v12;
    if (!__OFSUB__(v5, v12))
    {
LABEL_64:
      if (v11 >= 1)
      {
        v12 = a3[2].position;
LABEL_66:
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v11);
        v31.position = v10;
        v32 = v11;
        goto LABEL_67;
      }
LABEL_68:
      a3[2].position = v10;
      v34 = a3[1].position;
      v33 = __OFSUB__(v34, v3);
      v35 = v34 - v3;
      if (!v33)
        goto LABEL_80;
      __break(1u);
      goto LABEL_71;
    }
    __break(1u);
  }
  result = Deque._UnsafeHandle.slot(_:offsetBy:)(v6, position).position;
  if (__OFSUB__(position, v3))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v17 = a3[2].position + position - v3;
  v18 = a3->position;
  if (v17 >= a3->position)
    v19 = a3->position;
  else
    v19 = 0;
  if (v10)
  {
    v20 = result;
    v21 = v17 - v19;
    if (v17 - v19 <= 0)
      v22 = a3->position;
    else
      v22 = v17 - v19;
    if (result <= 0)
      v23 = a3->position;
    else
      v23 = result;
    if (v12 >= v23)
    {
      v28 = v18 - v12;
      v29 = __OFSUB__(v18, v12);
      if (v22 >= v11)
      {
        if (v29)
        {
LABEL_92:
          __break(1u);
          return result;
        }
        if (v28 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v28);
          result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v11, v28).position;
          v11 = result;
        }
        if (v20 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)(0, v20);
          v25.position = v11;
          v26 = v20;
          goto LABEL_78;
        }
      }
      else
      {
        if (v29)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v28 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v28);
          v11 = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v11, v28).position;
        }
        sub_1A2AE39DC();
        v30.position = Deque._UnsafeHandle.slot(_:offsetBy:)(0, v3).position;
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v11, v3).position;
        if (v21 >= 1)
        {
          sub_1A2AE39DC();
          Deque._UnsafeHandle.slot(_:offsetBy:)(v30, v21);
          v25.position = 0;
          v26 = v21;
          goto LABEL_78;
        }
      }
    }
    else
    {
      if (v22 >= v11)
      {
LABEL_71:
        if (v10 < 1)
          goto LABEL_79;
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v10);
        v25.position = v11;
        v26 = v10;
        goto LABEL_78;
      }
      v24 = v18 - v11;
      if (__OFSUB__(v18, v11))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (v24 >= 1)
      {
        sub_1A2AE39DC();
        v12 = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v24).position;
        result = Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v11, v24).position;
      }
      if (__OFSUB__(v10, v24))
        goto LABEL_87;
      if (v10 - v24 >= 1)
      {
        sub_1A2AE39DC();
        Deque._UnsafeHandle.slot(_:offsetBy:)((Sharing::_DequeSlot)v12, v10 - v24);
        v25.position = 0;
        v26 = v10 - v24;
LABEL_78:
        result = Deque._UnsafeHandle.slot(_:offsetBy:)(v25, v26).position;
      }
    }
  }
LABEL_79:
  v36 = a3[1].position;
  v33 = __OFSUB__(v36, v3);
  v35 = v36 - v3;
  if (v33)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
LABEL_80:
  a3[1].position = v35;
  return result;
}

uint64_t sub_1A29F02A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A29FA2F0(a1);
}

__n128 sub_1A29F02BC@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  __n128 result;

  v2 = *(__n128 **)(v1 + 16);
  v3 = v2[1].n128_u64[0];
  result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t sub_1A29F02D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29EE1B4(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F02F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1A29F0994(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 16), MEMORY[0x1E0DEE9C0] + 8, a3);
}

uint64_t sub_1A29F031C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = sub_1A2AE3B74();
  v5 = *(_QWORD *)(v3 + 8);
  *a1 = result;
  a1[1] = v5;
  a1[2] = 0;
  return result;
}

uint64_t sub_1A29F0360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29EE3E8(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F037C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  result = sub_1A2AE3B74();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t sub_1A29F03BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29EE628(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F03D8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 8);
  return result;
}

_QWORD *sub_1A29F03E8(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 8) = *result;
  return result;
}

uint64_t sub_1A29F03F8()
{
  return 8;
}

_QWORD *sub_1A29F0404(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A29F0410@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

_QWORD *sub_1A29F0420(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 16) = *result;
  return result;
}

uint64_t sub_1A29F0430()
{
  return 8;
}

uint64_t sub_1A29F043C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A29F0444(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_1A29F0488(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t type metadata accessor for Deque._UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque._UnsafeHandle);
}

uint64_t sub_1A29F04D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A29F02A0(a1);
}

uint64_t sub_1A29F04E8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1A29F02F0(a1, a2, a3);
}

uint64_t Deque.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v4 = type metadata accessor for Deque(0, a2, a3, a4);
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, v4);
  return _arrayDescription<A>(for:)((uint64_t)&v6, v4);
}

uint64_t sub_1A29F054C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Deque.description.getter(*v4, *(_QWORD *)(a1 + 16), a3, a4);
}

uint64_t sub_1A29F0560(uint64_t a1)
{
  _QWORD *v1;

  return Deque.debugDescription.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t Deque._Storage.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A29F08F4(a1, a2, a3, a4, a5, (uint64_t)sub_1A29F09D8);
}

uint64_t Deque._Storage._buffer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Deque._Storage._buffer.modify())()
{
  return nullsub_1;
}

uint64_t Deque._Storage.description.getter()
{
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  sub_1A2AE412C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  _DequeBufferHeader.description.getter();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 0x3C6575716544;
}

uint64_t sub_1A29F069C()
{
  return Deque._Storage.description.getter();
}

uint64_t Deque._Storage.init()()
{
  if (qword_1EE675250 != -1)
    swift_once();
  swift_retain();
  return sub_1A2AE3C94();
}

uint64_t Deque._Storage.init(_:)()
{
  return sub_1A2AE3C94();
}

uint64_t Deque._Storage.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _DequeBuffer(0, a2, a3, a4);
  sub_1A2AE3B68();
  return sub_1A2AE3C94();
}

uint64_t Deque._Storage.capacity.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A296C624, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t Deque._Storage.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t sub_1A29F085C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

uint64_t Deque._Storage.startSlot.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A29F08CC, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for _DequeSlot, MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t sub_1A29F08CC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 16);
  return result;
}

uint64_t Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A29F08F4(a1, a2, a3, a4, a5, (uint64_t)sub_1A29F09D8);
}

uint64_t sub_1A29F08F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a4;
  v14 = a5;
  v15 = a1;
  v16 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC(a6, (uint64_t)v12, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, a5, MEMORY[0x1E0DEDB38], (uint64_t)&v17);
}

uint64_t sub_1A29F0994(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  return sub_1A29F09A8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1A29F09A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t result;

  result = a3();
  if (v7)
    *a7 = v7;
  return result;
}

uint64_t sub_1A29F09D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1A29F0F5C(a1, a2, a3);
}

Swift::Bool __swiftcall Deque._Storage.isUnique()()
{
  sub_1A2AE3CAC();
  return sub_1A2AE3CA0();
}

Swift::Void __swiftcall Deque._Storage.ensureUnique()()
{
  sub_1A2AE3CAC();
  if ((sub_1A2AE3CA0() & 1) == 0)
    Deque._Storage._makeUniqueCopy()();
}

Swift::Void __swiftcall Deque._Storage._makeUniqueCopy()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X3>, uint64_t *@<X8>);
  char *v10;
  char v11;
  uint64_t v12;
  char v13[8];
  uint64_t v14;

  v2 = v0;
  v3 = *v1;
  v4 = *(_QWORD *)(v0 + 16);
  v12 = v4;
  v7 = v4;
  v8 = v0;
  v9 = sub_1A29F103C;
  v10 = &v11;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F09D8, (uint64_t)v6, v3, (uint64_t)&type metadata for _DequeBufferHeader, v4, v5, v2, MEMORY[0x1E0DEDB38], (uint64_t)v13);
  swift_release();
  *v1 = v14;
}

double static Deque._Storage.growthFactor.getter()
{
  return 1.5;
}

Swift::Int __swiftcall Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  Swift::Int result;
  double v7;
  uint64_t v8;
  uint64_t v9;

  if (linearly)
  {
    sub_1A29F2738((uint64_t)sub_1A296C624, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
    v5 = v9;
    goto LABEL_7;
  }
  result = sub_1A29F2738((uint64_t)sub_1A296C624, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
  v7 = ceil((double)v9 * 1.5);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v5 = (uint64_t)v7;
LABEL_7:
  if (v5 <= to)
    return to;
  else
    return v5;
}

Swift::Void __swiftcall Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;

  v6 = *(_QWORD *)(v2 + 16);
  sub_1A2AE3CAC();
  v7 = sub_1A2AE3CA0();
  sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
  if (v9 < minimumCapacity || (v7 & 1) == 0)
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(minimumCapacity, linearGrowth);
}

Swift::Void __swiftcall Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  Swift::Int v28;

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(v2 + 16);
  v9 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v25);
  if (v28 >= minimumCapacity)
  {
    v15 = MEMORY[0x1E0C80A78](v9);
    v25 = v8;
    MEMORY[0x1E0C80A78](v15);
    v21 = v8;
    v22 = v4;
    v23 = sub_1A29F0F8C;
    v24 = v16;
    v17 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F09D8, (uint64_t)v20, v7, (uint64_t)&type metadata for _DequeBufferHeader, v8, v17, v4, MEMORY[0x1E0DEDB38], (uint64_t)v27);
  }
  else
  {
    sub_1A2AE3CAC();
    v10 = sub_1A2AE3CA0();
    v11 = *v3;
    v12 = Deque._Storage._growCapacity(to:linearly:)(minimumCapacity, linearGrowth);
    v25 = v8;
    v26 = MEMORY[0x1E0C80A78](v12);
    MEMORY[0x1E0C80A78](v26);
    v21 = v8;
    v22 = v4;
    if ((v10 & 1) != 0)
    {
      v23 = sub_1A29F0FD8;
      v24 = v13;
      v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      sub_1A29F27CC((uint64_t)sub_1A29F09D8, (uint64_t)v20, v11, (uint64_t)&type metadata for _DequeBufferHeader, v8, v14, v4, MEMORY[0x1E0DEDB38], (uint64_t)v27);
    }
    else
    {
      v23 = sub_1A29F0FBC;
      v24 = v13;
      v18 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      sub_1A29F27CC((uint64_t)sub_1A29F09D8, (uint64_t)v20, v11, (uint64_t)&type metadata for _DequeBufferHeader, v8, v18, v4, MEMORY[0x1E0DEDB38], (uint64_t)v27);
    }
  }
  v19 = v28;
  swift_release();
  *v3 = v19;
}

BOOL Deque._Storage.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t sub_1A29F0F20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1A2AE3B74();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1A29F0F5C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v3 + 32))();
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1A29F0F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = Deque._UnsafeHandle.copyElements()(a1, a2, *(_QWORD *)(v4 + 16), a3);
  *a4 = result;
  return result;
}

uint64_t sub_1A29F0FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A29F0FF4(a1, a2, Deque._UnsafeHandle.copyElements(minimumCapacity:), a3);
}

uint64_t sub_1A29F0FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1A29F0FF4(a1, a2, Deque._UnsafeHandle.moveElements(minimumCapacity:), a3);
}

uint64_t sub_1A29F0FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, _QWORD)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = a3(*(_QWORD *)(v4 + 24), a1, a2, *(_QWORD *)(v4 + 16));
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for Deque._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque._Storage);
}

uint64_t sub_1A29F103C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_1A29F0F8C(a1, a2, a3, a4);
}

uint64_t Deque<A>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[5];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v21[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v21 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v7;
  sub_1A2AE40CC();
  v21[2] = Deque.makeIterator()(a2, a3);
  v21[3] = v14;
  v21[4] = v15;
  v17 = type metadata accessor for Deque.Iterator(0, a3, v15, v16);
  Deque.Iterator.next()(v17, (uint64_t)v12);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v12, 1, a3) != 1)
  {
    v21[0] = *(_QWORD *)(v13 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v21[0])(v9, v12, a3);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      v19 = v24;
      sub_1A2AE3EA4();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v9, a3);
      if (v19)
        break;
      v24 = 0;
      Deque.Iterator.next()(v17, (uint64_t)v12);
    }
    while (v18(v12, 1, a3) != 1);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1A29F126C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Deque<A>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

_QWORD *Deque<A>.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v20 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = Deque.init()(v9);
  v10 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2AE40A8();
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v11 = sub_1A2AE3E80();
    if ((v14 & 1) == 0)
    {
      v15 = v11;
      type metadata accessor for Deque(0, a2, v12, v13);
      Deque.reserveCapacity(_:)(v15);
    }
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v21, v22);
      if ((sub_1A2AE3E98() & 1) != 0)
        break;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
      sub_1A2AE3E8C();
      v18 = type metadata accessor for Deque(0, a2, v16, v17);
      Deque.append(_:)((uint64_t)v8, v18);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    }
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
    v10 = (_QWORD *)v23;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  return v10;
}

_QWORD *sub_1A29F1468@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  result = Deque<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_1A29F1498(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1A29F14B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v18 - v11;
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1A29FBE8C(a1, (uint64_t)v12, a2);
  if (v2)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v9, v12, v5);
    if (sub_1A2AE3EB0())
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    else
    {
      swift_allocError();
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v17, v9, v5);
    }
  }
  return result;
}

uint64_t Deque.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
  if (v16 < 1)
  {
    v12 = 1;
  }
  else
  {
    sub_1A2AE3CAC();
    v5 = sub_1A2AE3CA0();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v6, v7);
      Deque._Storage._makeUniqueCopy()();
    }
    v8 = *v2;
    v9 = MEMORY[0x1E0C80A78](v5);
    v15 = v4;
    MEMORY[0x1E0C80A78](v9);
    v14[2] = v4;
    v14[3] = v4;
    v14[4] = sub_1A29F19F0;
    v14[5] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F1A18, (uint64_t)v14, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, v4, MEMORY[0x1E0DEDB38], (uint64_t)&v16);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, v12, 1, v4);
}

uint64_t Deque.init(unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t *(*v14)(uint64_t *, uint64_t);
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = Deque._Storage.init(minimumCapacity:)(a1, a4, a3, a4);
  v17 = a4;
  v18 = a1;
  v19 = a2;
  v20 = a3;
  v13 = a4;
  v14 = sub_1A29F1A3C;
  v15 = &v16;
  swift_retain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F02F0, (uint64_t)v12, v9, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v21);
  swift_release();
  if (v4)
    swift_release();
  return v9;
}

uint64_t *sub_1A29F1870(uint64_t *result, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t *))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;

  result[2] = 0;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (uint64_t)result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    v9[0] = sub_1A2AE3A24();
    v9[1] = v8;
    a4(v9, &v10);
    return sub_1A29F1928(&v10, a3, v7, a2, (uint64_t)v9);
  }
  return result;
}

uint64_t *sub_1A29F1928(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*result > a2)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a2 < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = result;
  Deque._UnsafeHandle.buffer(for:)(0, a2);
  sub_1A2AE3A24();
  v9 = v8;
  v10 = sub_1A2AE3A00();
  result = (uint64_t *)sub_1A2AE3A00();
  if (v10)
  {
    if (!result)
      goto LABEL_13;
    if ((uint64_t *)v10 == result)
      goto LABEL_8;
    __break(1u);
  }
  if (!result)
  {
LABEL_8:
    if (*(_QWORD *)(a5 + 8) == v9)
    {
      *(_QWORD *)(a3 + 8) = *v7;
      return result;
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1A29F19F0(_QWORD *a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveFirst()(a1);
}

uint64_t sub_1A29F1A18(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1A29F0994(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 24), a3);
}

uint64_t *sub_1A29F1A3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F1870(a1, a2, *(_QWORD *)(v2 + 24), *(void (**)(_QWORD *, uint64_t *))(v2 + 32));
}

uint64_t Deque.prepend(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  Swift::Int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
  v6 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1A2AE3CAC();
    v7 = sub_1A2AE3CA0();
    v8 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
    if (v18 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v9, v10);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    v11 = *v2;
    v12 = MEMORY[0x1E0C80A78](v8);
    v16 = v4;
    v17 = a1;
    MEMORY[0x1E0C80A78](v12);
    v15[2] = v4;
    v15[3] = sub_1A29F1C1C;
    v15[4] = v13;
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    return sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v4, v14, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v18);
  }
  return result;
}

uint64_t sub_1A29F1C1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return Deque._UnsafeHandle.uncheckedPrepend(_:)(*(_QWORD *)(v2 + 24), a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t Deque.prepend<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[12];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27[2];

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v24 = v9;
  v25 = a3;
  v26 = a4;
  result = sub_1A2AE35A4();
  if (LOBYTE(v27[0]) == 1)
  {
    result = sub_1A2AE388C();
    if (result >= 1)
    {
      v11 = result;
      v12 = *v4;
      swift_retain();
      sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v23);
      result = swift_release();
      v13 = v27[0] + v11;
      if (__OFADD__(v27[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_1A2AE3CAC();
        v14 = sub_1A2AE3CA0();
        v15 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v23);
        if (v27[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v9, v16, v17);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        v18 = *v5;
        v19 = MEMORY[0x1E0C80A78](v15);
        v22[8] = v9;
        v22[9] = a3;
        v22[10] = a4;
        v22[11] = v11;
        v23 = a1;
        MEMORY[0x1E0C80A78](v19);
        v22[2] = v9;
        v22[3] = sub_1A29F2220;
        v22[4] = v20;
        swift_retain();
        v21 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
        sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v22, v18, (uint64_t)&type metadata for _DequeBufferHeader, v9, v21, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v27);
        return swift_release();
      }
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[12];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a2 + 16);
  v23 = v10;
  v24 = a3;
  v25 = a4;
  v26 = v5;
  result = sub_1A2AE35A4();
  if (v27 == 1)
  {
    v12 = *v5;
    swift_retain();
    sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v21);
    swift_release();
    Deque.append<A>(contentsOf:)(a1, a2, a3, a4);
    v13 = *v5;
    swift_retain();
    sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v21);
    v14 = swift_release();
    v15 = MEMORY[0x1E0C80A78](v14);
    v20[8] = v10;
    v20[9] = a3;
    v20[10] = a4;
    v20[11] = v27;
    v21 = v17;
    v22 = v16;
    MEMORY[0x1E0C80A78](v15);
    v20[2] = v10;
    v20[3] = sub_1A29F2508;
    v20[4] = v18;
    swift_retain();
    v19 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v20, v13, (uint64_t)&type metadata for _DequeBufferHeader, v10, v19, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v27);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29F1EBC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;

  v12 = *a3;
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
  result = swift_release();
  v14 = v26 + a2;
  if (__OFADD__(v26, a2))
  {
    __break(1u);
  }
  else
  {
    v25 = a1;
    sub_1A2AE3CAC();
    v15 = sub_1A2AE3CA0();
    v16 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
    if (v26 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, a4, v17, v18);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    v19 = *a3;
    v20 = MEMORY[0x1E0C80A78](v16);
    v23[8] = a4;
    v23[9] = a5;
    v23[10] = a6;
    v23[11] = v25;
    v24 = a2;
    MEMORY[0x1E0C80A78](v20);
    v23[2] = a4;
    v23[3] = sub_1A29F2528;
    v23[4] = v21;
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, a4, v22, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29F20E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F1EBC(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1A29F2100(Sharing::_DequeSlot *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  Swift::Int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Int position;
  BOOL v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];
  uint64_t v26;

  v23 = a4;
  v26 = a7;
  v11 = *(_QWORD *)(a6 - 8);
  v12 = (Swift::Int *)MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Deque._UnsafeHandle.availableSegments()(v12, (uint64_t)v24);
  v17 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v15, v16);
  _UnsafeMutableWrappedBuffer.suffix(_:)(a3, (uint64_t)v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, a6);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v14, v17, a6, v26);
  position = a1[1].position;
  v20 = __OFADD__(position, a3);
  v21 = position + a3;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    a1[1].position = v21;
    if (!__OFSUB__(0, a3))
    {
      result = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], -a3).position;
      a1[2].position = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A29F2220(Sharing::_DequeSlot *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F2100(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t sub_1A29F2470(Sharing::_DequeSlot *a1, int a2, Swift::Int forOffset, Swift::Int a4, uint64_t a5)
{
  uint64_t result;
  Sharing::_DequeSlot v9;
  BOOL v10;
  Swift::Int v11;
  uint64_t v12;

  result = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  v9.position = a1->position;
  a1[1].position = a1->position;
  a1[2].position = result;
  v10 = __OFSUB__(v9.position, a5);
  v11 = v9.position - a5;
  if (v10)
  {
    __break(1u);
    goto LABEL_6;
  }
  v12 = a4 + v11;
  if (__OFADD__(a4, v11))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 >= a4)
    return Deque._UnsafeHandle.closeGap(offsets:)(a4, v12, a1);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A29F2508(Sharing::_DequeSlot *a1, int a2)
{
  Swift::Int *v2;

  return sub_1A29F2470(a1, a2, v2[5], v2[6], v2[7]);
}

Swift::Int sub_1A29F2528(_QWORD *a1, uint64_t a2)
{
  return sub_1A29F253C(a1, a2);
}

Swift::Int sub_1A29F253C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedPrepend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

uint64_t Deque.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  Swift::Int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
  v6 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1A2AE3CAC();
    v7 = sub_1A2AE3CA0();
    v8 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
    if (v18 < v6 || (v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v9, v10);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v6, 0);
    }
    v11 = *v2;
    v12 = MEMORY[0x1E0C80A78](v8);
    v16 = v4;
    v17 = a1;
    MEMORY[0x1E0C80A78](v12);
    v15[2] = v4;
    v15[3] = sub_1A29F5B28;
    v15[4] = v13;
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    return sub_1A29F27CC((uint64_t)sub_1A29F02F0, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v4, v14, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v18);
  }
  return result;
}

uint64_t sub_1A29F2738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, char *);
  uint64_t result;
  uint64_t v19;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80);
  result = v17(v16 + ((v15 + 16) & ~v15), v13);
  if (v9)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  return result;
}

uint64_t sub_1A29F27CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(unint64_t, uint64_t, char *);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(_QWORD *)(a6 - 8);
  result = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v19 + 64);
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_7;
  }
  v23 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 1;
  v24 = __CFADD__(v22, v23);
  v25 = v22 + v23;
  if (v24)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  result = v15(v13 + v20, v13 + ((v25 - 1) & -v23), (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v9)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  return result;
}

uint64_t Deque.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = swift_retain();
  v6 = sub_1A29F74A4(v3, a2, v4, v5);
  swift_release();
  return v6;
}

uint64_t Deque.Iterator.next()@<X0>(_BOOL8 a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];

  v3 = a1;
  v5 = v2[1];
  if (v5 != v2[2])
    goto LABEL_4;
  a1 = Deque.Iterator._swapSegment()();
  if (a1)
  {
    v5 = v2[1];
LABEL_4:
    v2[1] = v5 + 1;
    v6 = *v2;
    v7 = MEMORY[0x1E0C80A78](a1);
    v18 = *(_QWORD *)(v3 + 16);
    v8 = v18;
    v19 = v9;
    MEMORY[0x1E0C80A78](v7);
    v14 = v18;
    v15 = v18;
    v16 = sub_1A29F7550;
    v17 = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F1A18, (uint64_t)&v13, v6, (uint64_t)&type metadata for _DequeBufferHeader, v14, v11, v14, MEMORY[0x1E0DEDB38], (uint64_t)v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 56))(a2, 1, 1);
}

Swift::Void __swiftcall Deque.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;

  v4 = *(_QWORD *)(v1 + 16);
  sub_1A2AE3CAC();
  v5 = sub_1A2AE3CA0();
  sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v8);
  if (v9 < a1 || (v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, 1);
  }
}

uint64_t Deque.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t AssociatedTypeWitness;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned __int8 v68[24];

  v7 = *(_QWORD *)(a2 + 16);
  v8 = sub_1A2AE39F4();
  v49 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v46 - v10;
  v60 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v9);
  v59 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v46 - v13;
  v64 = v7;
  v65 = a3;
  v66 = a4;
  v67 = v4;
  v63 = v4;
  result = sub_1A2AE35A4();
  if (v68[0] == 1)
  {
    v47 = v8;
    v15 = sub_1A2AE3598();
    v16 = *v63;
    swift_retain();
    sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v44);
    result = swift_release();
    v17 = *(_QWORD *)v68 + v15;
    if (!__OFADD__(*(_QWORD *)v68, v15))
    {
      v58 = a3;
      v56 = sub_1A2AE3CAC();
      v18 = v63;
      v19 = sub_1A2AE3CA0();
      v20 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v18, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v44);
      if (*(uint64_t *)v68 < v17 || (v19 & 1) == 0)
      {
        type metadata accessor for Deque._Storage(0, v7, v21, v22);
        Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v17, 0);
      }
      v23 = *v63;
      v24 = MEMORY[0x1E0C80A78](v20);
      v25 = v58;
      *(&v46 - 4) = v7;
      *(&v46 - 3) = v25;
      MEMORY[0x1E0C80A78](v24);
      v26 = AssociatedTypeWitness;
      *(&v46 - 4) = v7;
      *(&v46 - 3) = v26;
      v45 = v27;
      swift_retain();
      v55 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      sub_1A29F27CC((uint64_t)sub_1A29F75C4, (uint64_t)(&v46 - 6), v23, (uint64_t)&type metadata for _DequeBufferHeader, v7, v55, v26, MEMORY[0x1E0DEDB38], (uint64_t)v68);
      swift_release();
      v57 = a4;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      sub_1A2AE3A54();
      v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
      if (v53(v11, 1, v7) == 1)
      {
LABEL_7:
        (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v47);
        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v61, AssociatedTypeWitness);
      }
      v28 = MEMORY[0x1E0DEDCE8];
      v29 = MEMORY[0x1E0DEB418];
      v30 = MEMORY[0x1E0DEDD18];
      v52 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
      v50 = MEMORY[0x1E0DEE9C0] + 8;
      v51 = v11;
      v52(v59, v11, v7);
      while (1)
      {
        v37 = v63;
        v38 = *v63;
        swift_retain();
        sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v38, (uint64_t)&type metadata for _DequeBufferHeader, v7, v28, v29, v30, v44);
        result = swift_release();
        v39 = *(_QWORD *)v68 + 1;
        if (__OFADD__(*(_QWORD *)v68, 1))
          break;
        v40 = v37;
        v41 = sub_1A2AE3CA0();
        v31 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v40, (uint64_t)&type metadata for _DequeBufferHeader, v7, v28, v29, v30, v44);
        if (*(uint64_t *)v68 < v39 || (v41 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v7, v42, v43);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v39, 0);
        }
        v32 = *v40;
        v33 = MEMORY[0x1E0C80A78](v31);
        v34 = v58;
        v35 = v59;
        *(&v46 - 6) = v7;
        *(&v46 - 5) = v34;
        *(&v46 - 4) = v57;
        *(&v46 - 3) = (uint64_t)v35;
        MEMORY[0x1E0C80A78](v33);
        *(&v46 - 4) = v7;
        *(&v46 - 3) = (uint64_t)sub_1A29F75E4;
        swift_retain();
        sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)(&v46 - 6), v32, (uint64_t)&type metadata for _DequeBufferHeader, v7, v55, v50, MEMORY[0x1E0DEDB38], (uint64_t)v68);
        swift_release();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v7);
        v11 = v51;
        sub_1A2AE3A54();
        v36 = v53(v11, 1, v7);
        v29 = MEMORY[0x1E0DEB418];
        v30 = MEMORY[0x1E0DEDD18];
        if (v36 == 1)
          goto LABEL_7;
        v52(v35, v11, v7);
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[12];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27[2];

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v24 = v9;
  v25 = a3;
  v26 = a4;
  result = sub_1A2AE35A4();
  if (LOBYTE(v27[0]) == 1)
  {
    result = sub_1A2AE388C();
    if (result >= 1)
    {
      v11 = result;
      v12 = *v4;
      swift_retain();
      sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v23);
      result = swift_release();
      v13 = v27[0] + v11;
      if (__OFADD__(v27[0], v11))
      {
        __break(1u);
      }
      else
      {
        sub_1A2AE3CAC();
        v14 = sub_1A2AE3CA0();
        v15 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v23);
        if (v27[0] < v13 || (v14 & 1) == 0)
        {
          type metadata accessor for Deque._Storage(0, v9, v16, v17);
          Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v13, 0);
        }
        v18 = *v5;
        v19 = MEMORY[0x1E0C80A78](v15);
        v22[8] = v9;
        v22[9] = a3;
        v22[10] = a4;
        v22[11] = v11;
        v23 = a1;
        MEMORY[0x1E0C80A78](v19);
        v22[2] = v9;
        v22[3] = sub_1A29F84C8;
        v22[4] = v20;
        swift_retain();
        v21 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
        sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v22, v18, (uint64_t)&type metadata for _DequeBufferHeader, v9, v21, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v27);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t Deque.Iterator._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Deque.Iterator._storage.modify())()
{
  return nullsub_1;
}

uint64_t Deque.Iterator._nextSlot.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Deque.Iterator._nextSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Deque.Iterator._nextSlot.modify())()
{
  return nullsub_1;
}

uint64_t Deque.Iterator._endSlot.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t Deque.Iterator._endSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Deque.Iterator._endSlot.modify())()
{
  return nullsub_1;
}

uint64_t Deque.Iterator.init(_base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_1A29F74A4(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t Deque.Iterator.init(_base:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_1A29F7AE8(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_1A29F32B0@<X0>(Swift::Int forOffset@<X2>, Sharing::_DequeSlot *a2@<X0>, Swift::Int a3@<X3>, Sharing::_DequeSlot *a4@<X8>)
{
  Sharing::_DequeSlot v8;
  Swift::Int position;
  Swift::Int v10;

  v8.position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  position = v8.position;
  v10 = a2[1].position;
  if (v10 != forOffset)
  {
    v8.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a2[2], v10).position;
    if (position >= v8.position)
      v8.position = a2->position;
  }
  a4->position = a3;
  a4[1].position = position;
  a4[2].position = v8.position;
  return swift_retain();
}

Swift::Bool __swiftcall Deque.Iterator._swapSegment()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[16];
  uint64_t v6;
  Sharing::_DequeSlot (*v7)@<X0>(Sharing::_DequeSlot *@<X0>, char *@<X8>);
  char *v8;
  char v9;
  _BYTE v10[16];

  v2 = *v1;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = sub_1A29F7B9C;
  v8 = &v9;
  swift_retain();
  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F7C04, (uint64_t)v5, v2, (uint64_t)&type metadata for _DequeBufferHeader, v6, v3, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDB38], (uint64_t)v10);
  swift_release();
  return v10[15];
}

uint64_t Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1A29F7A08(a1, a2);
  swift_release();
  return v2;
}

uint64_t sub_1A29F3434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t);
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v13 = a4;
  v14 = a1;
  v15 = a2;
  v9 = a4;
  v10 = sub_1A29F8E98;
  v11 = &v12;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F02F0, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v16);
}

uint64_t sub_1A29F34D4(_QWORD *a1, uint64_t a2, _OWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(_OWORD *, uint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  _QWORD *v31;

  v31 = a4;
  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v27);
  v7 = v27;
  v8 = v28;
  v30[0] = *a3;
  v22[0] = v28;
  v9 = sub_1A2AE3A3C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C4A0);
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9E0], v9);
  sub_1A29F8E34();
  sub_1A2AE33C4();
  *(_QWORD *)&v30[0] = v7;
  *((_QWORD *)&v30[0] + 1) = v8;
  v10 = sub_1A2AE33F4();
  v11 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEA5E8], v10);
  v12 = v31;
  result = sub_1A2ABB498((uint64_t)v30, v23, v24, v25, v26, a5, v10, v11);
  if (__OFADD__(*v12, v8))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *v12 += v8;
  v14 = sub_1A2AE39F4();
  v15 = *(void (**)(_OWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v30, &v29, v14);
  result = ((uint64_t (*)(uint64_t *, _OWORD *, uint64_t))v15)(&v23, v30, v14);
  if ((v25 & 1) != 0)
    return result;
  v16 = v24;
  if (__OFADD__(v8, v24))
    goto LABEL_9;
  if (v8 + v24 < v8)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v17 = v23;
  v18 = sub_1A2AE3A48();
  v22[0] = v17;
  v22[1] = v16;
  result = sub_1A2ABB498((uint64_t)v22, v18, v19, v20, v21, a5, v10, v11);
  if (__OFADD__(*v12, v16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *v12 += v16;
  return result;
}

uint64_t sub_1A29F36D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1A2AE364C();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    v1 = sub_1A2AE3B44();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      v2 = sub_1A2AE3670();
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF50], v2);
      v1 = sub_1A2AE3F1C();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t Deque._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_1A29F7938(a1, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t sub_1A29F37CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(__int128 *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[32];
  uint64_t v48;

  Deque._UnsafeHandle.segments()(a1, (uint64_t)&v44);
  v8 = v45;
  if (v45 >= a3)
    v9 = a3;
  else
    v9 = v45;
  *(_QWORD *)&v40 = a2;
  *((_QWORD *)&v40 + 1) = a3;
  v10 = sub_1A2AE3A3C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C4A0);
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9E0], v10);
  sub_1A29F8E34();
  sub_1A2AE33C4();
  v48 = *((_QWORD *)&v42 + 1);
  v11 = sub_1A2AE33F4();
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEA5E8], v11);
  sub_1A2AE38EC();
  v38 = v40;
  v39 = v41;
  v12 = sub_1A2AE3FF4();
  v13 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE48], v12);
  v14 = v48;
  v15 = a4;
  v48 = v12;
  v37 = v13;
  sub_1A2ABB498((uint64_t)&v38, v42, v14, v43, *((uint64_t *)&v43 + 1), a4, v12, v13);
  if (v8 >= a3)
    goto LABEL_13;
  v16 = sub_1A2AE39F4();
  v17 = *(uint64_t (**)(__int128 *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17((__int128 *)v47, &v46, v16);
  result = v17(&v38, (uint64_t *)v47, v16);
  if ((v39 & 1) != 0)
    goto LABEL_13;
  if (__OFSUB__(a3, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v19 = *((_QWORD *)&v38 + 1);
  if (a3 - v9 >= *((uint64_t *)&v38 + 1))
    v20 = *((_QWORD *)&v38 + 1);
  else
    v20 = a3 - v9;
  if (__OFADD__(v9, v20))
    goto LABEL_15;
  if (v9 + v20 >= v9)
  {
    v21 = v38;
    v9 += v20;
    v35 = sub_1A2AE3A48();
    v23 = v22;
    v25 = v24;
    v27 = v26;
    *(_QWORD *)&v40 = v21;
    *((_QWORD *)&v40 + 1) = v19;
    sub_1A2AE38EC();
    v40 = v42;
    v41 = v43;
    sub_1A2ABB498((uint64_t)&v40, v35, v23, v25, v27, v15, v48, v37);
LABEL_13:
    v28 = swift_retain();
    v30 = sub_1A29F7AE8(v28, v9, v15, v29);
    v32 = v31;
    v34 = v33;
    result = swift_release();
    *a5 = v30;
    a5[1] = v32;
    a5[2] = v34;
    a5[3] = v9;
    return result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t Deque.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = a4;
  v16 = a5;
  v17 = a1;
  v10 = a4;
  v11 = sub_1A2AE39F4();
  v12 = sub_1A29F7C2C;
  v13 = &v14;
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F75C4, (uint64_t)v9, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v7, v11, MEMORY[0x1E0DEDB38], (uint64_t)&v19);
}

uint64_t sub_1A29F3B40@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = a1[2];
  v10 = a1[1] + result;
  if (*a1 < v10)
  {
    v11 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  if (v10 < result)
  {
    __break(1u);
    return result;
  }
  v12 = Deque._UnsafeHandle.buffer(for:)(result, v10);
  result = a2(v12);
  if (!v4)
  {
    v11 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
  }
  return result;
}

uint64_t sub_1A29F3BE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = Deque.makeIterator()(*v2, *(_QWORD *)(a1 + 16));
  v6 = v5;
  v8 = v7;
  result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

uint64_t sub_1A29F3C3C(uint64_t a1)
{
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a1);
  return sub_1A2AE38C8();
}

uint64_t sub_1A29F3C70()
{
  return 2;
}

uint64_t sub_1A29F3C78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = sub_1A29F7A08(*v1, *(_QWORD *)(a1 + 16));
  swift_release();
  return v2;
}

uint64_t sub_1A29F3CB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1A29F7938(a2, a3, *v4, *(_QWORD *)(a4 + 16));
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  return v12;
}

uint64_t sub_1A29F3D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Deque.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v4, *(_QWORD *)(a4 + 16), a3);
}

uint64_t Deque.startIndex.getter()
{
  return 0;
}

uint64_t Deque.endIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

uint64_t Deque.indices.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  if ((v4 & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

Swift::Int __swiftcall Deque.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall Deque.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Int __swiftcall Deque.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall Deque.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall Deque.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall Deque.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  char v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v3 = sub_1A29F7A94(_, offsetBy, limitedBy);
  v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall Deque.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v10);
    if (v12 > v5)
    {
      v6 = MEMORY[0x1E0C80A78](result);
      v10 = a3;
      v11 = v5;
      MEMORY[0x1E0C80A78](v6);
      v9[2] = a3;
      v9[3] = a3;
      v9[4] = sub_1A29F7C48;
      v9[5] = v7;
      v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      return sub_1A29F27CC((uint64_t)sub_1A29F8F60, (uint64_t)v9, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, v8, a3, MEMORY[0x1E0DEDB38], (uint64_t)&v12);
    }
  }
  __break(1u);
  return result;
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1A29F7CA8(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*Deque.subscript.modify(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  result = (void (*)(uint64_t))malloc(*(_QWORD *)(v9 + 64));
  v7[5] = (uint64_t)result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = (uint64_t)result;
    result = (void (*)(uint64_t))sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v12);
    if (*v7 > a2)
    {
      v7[1] = Deque._prepareForModify(at:)(v11, a2, a3);
      return sub_1A29F40F4;
    }
  }
  __break(1u);
  return result;
}

void sub_1A29F40F4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v2 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  sub_1A29F42D0(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)a1 + 8, (uint64_t)v2, v4);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v2, v4);
  free(v2);
  free(v1);
}

uint64_t Deque._prepareForModify(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20[8];

  v5 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v8 = &v20[-v7 - 8];
  sub_1A2AE3CAC();
  v9 = sub_1A2AE3CA0();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v5, v10, v11);
    Deque._Storage._makeUniqueCopy()();
  }
  v12 = *v3;
  v13 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v13);
  *(&v19 - 4) = v5;
  *(&v19 - 3) = TupleTypeMetadata2;
  v18 = v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F8F40, (uint64_t)(&v19 - 6), v12, (uint64_t)&type metadata for _DequeBufferHeader, v5, v15, TupleTypeMetadata2, MEMORY[0x1E0DEDB38], (uint64_t)v20);
  v16 = *(_QWORD *)v8;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, &v8[*(int *)(TupleTypeMetadata2 + 48)], v5);
  return v16;
}

uint64_t sub_1A29F42D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v11);
  v14 = type metadata accessor for Deque(0, a4, v12, v13);
  Deque._finalizeModify(_:_:)(v9, (uint64_t)v7, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a4);
}

uint64_t sub_1A29F4374@<X0>(Swift::Int forOffset@<X2>, Swift::Int *a2@<X8>)
{
  Swift::Int position;

  position = Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  swift_getTupleTypeMetadata2();
  *a2 = position;
  return sub_1A2AE39E8();
}

uint64_t Deque._finalizeModify(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];

  v4 = *v3;
  v5 = *(_QWORD *)(a3 + 16);
  v13 = v5;
  v14 = a1;
  v15 = a2;
  v9 = v5;
  v10 = sub_1A29F7E30;
  v11 = &v12;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v8, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v16);
}

uint64_t sub_1A29F449C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v9 + *(_QWORD *)(v8 + 72) * v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v12, v13);
  return sub_1A29EEB8C((uint64_t)v7, v11, a5);
}

uint64_t Deque.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v9);
    if (v10 >= a2)
    {
      v8 = type metadata accessor for Deque(0, a4, v6, v7);
      swift_retain();
      MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, v8);
      sub_1A2AE3FDC();
      return v10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A29F4608(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a3;
  v5 = a3[1];
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = type metadata accessor for Deque(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  swift_retain();
  sub_1A29F8208(v6, v7, v8, v4, v5, v9);
  return swift_release();
}

uint64_t Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  sub_1A29F8208(a1, a2, a3, a4, a5, a6);
  return swift_release();
}

uint64_t Deque.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1A29F7E4C(a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
}

void (*Deque.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[5] = a4;
  v9[6] = v4;
  v9[3] = a2;
  v9[4] = a3;
  *v9 = Deque.subscript.getter(a2, a3, *v4, *(_QWORD *)(a4 + 16));
  v9[1] = v10;
  v9[2] = v11;
  return sub_1A29F475C;
}

void sub_1A29F475C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[5];
  v7 = (*a1)[3];
  v6 = (*a1)[4];
  v8 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1A29F8208(v3, v4, v8, v7, v6, v5);
    swift_release();
  }
  else
  {
    sub_1A29F8208(**a1, v4, v8, v7, v6, v5);
  }
  swift_release();
  free(v2);
}

_QWORD *sub_1A29F4808@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_1A29F4820(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t sub_1A29F4838(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_1A29F4850@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v5);
  *a2 = v6;
  return result;
}

void (*sub_1A29F48C4(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)sub_1A29F4950(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  return sub_1A29F4924;
}

void sub_1A29F4924(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1A29F4950(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a4 - 8);
  *a1 = a4;
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v7 + 64));
  Deque.subscript.getter(a2, a3, a4);
  return sub_1A29F49C0;
}

void sub_1A29F49C0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1A29F49F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = Deque.subscript.getter(*a1, a1[1], *v3, *(_QWORD *)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_1A29F4A2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v5);
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = 0;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_1A29F4AAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v1, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a1 + 16), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return v4;
}

void sub_1A29F4B10(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_1A29F4B20@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

uint64_t sub_1A29F4B38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_1A29F7A94(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1A29F4B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A29F778C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1A29F4B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A29F778C(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

_QWORD *sub_1A29F4BB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1A29F4BD0(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

Swift::Void __swiftcall Deque.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[10];
  Swift::Int v16;
  Swift::Int v17;

  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *v3;
  v7 = *(_QWORD *)(v2 + 16);
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
  if (a2 < 0 || v17 <= a1)
    goto LABEL_9;
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v16);
  if (v17 <= a2)
  {
LABEL_10:
    __break(1u);
    return;
  }
  sub_1A2AE3CAC();
  v8 = sub_1A2AE3CA0();
  if ((v8 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v7, v9, v10);
    Deque._Storage._makeUniqueCopy()();
  }
  v11 = *v3;
  v12 = MEMORY[0x1E0C80A78](v8);
  v15[8] = v7;
  v15[9] = a1;
  v16 = a2;
  MEMORY[0x1E0C80A78](v12);
  v15[2] = v7;
  v15[3] = sub_1A29F8308;
  v15[4] = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v15, v11, (uint64_t)&type metadata for _DequeBufferHeader, v7, v14, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v17);
}

uint64_t sub_1A29F4DB0(int a1, int a2, Swift::Int forOffset, Swift::Int a4)
{
  Deque._UnsafeHandle.slot(forOffset:)(forOffset);
  Deque._UnsafeHandle.slot(forOffset:)(a4);
  sub_1A2AE3A0C();
  return sub_1A2AE3A18();
}

uint64_t Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  _QWORD *v19;
  _QWORD v20[6];
  uint64_t v21;

  v8 = *(_QWORD *)(a3 + 16);
  sub_1A2AE3CAC();
  v9 = sub_1A2AE3CA0();
  if ((v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v8, v10, v11);
    Deque._Storage._makeUniqueCopy()();
  }
  v12 = *v4;
  v13 = MEMORY[0x1E0C80A78](v9);
  v20[2] = v8;
  v20[3] = a4;
  v20[4] = a1;
  v20[5] = a2;
  MEMORY[0x1E0C80A78](v13);
  v16[2] = v8;
  v17 = sub_1A2AE39F4();
  v18 = sub_1A29F8324;
  v19 = v20;
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F8F40, (uint64_t)v16, v12, (uint64_t)&type metadata for _DequeBufferHeader, v8, v14, v17, MEMORY[0x1E0DEDB38], (uint64_t)&v21);
}

uint64_t sub_1A29F4F90@<X0>(uint64_t *a1@<X0>, void (*a2)(_QWORD *)@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  result = a1[2];
  v10 = a1[1] + result;
  if (*a1 < v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 1, 1, a3);
  if (v10 < result)
  {
    __break(1u);
  }
  else
  {
    Deque._UnsafeHandle.buffer(for:)(result, v10);
    v11 = sub_1A2AE3A24();
    v13 = v12;
    v14[0] = v11;
    v14[1] = v12;
    a2(v14);
    if (!v4)
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 0, 1, a3);
    return sub_1A29F5094((uint64_t)v14, v11, v13);
  }
  return result;
}

uint64_t sub_1A29F5094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = sub_1A2AE3A00();
  result = sub_1A2AE3A00();
  if (!v5)
  {
LABEL_5:
    if (result)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (!result)
    goto LABEL_8;
  if (v5 != result)
  {
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  if (*(_QWORD *)(a1 + 8) == a3)
    return result;
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_1A29F5130(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A29F736C(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD))sub_1A29F7CA8);
}

void (*sub_1A29F513C(uint64_t **a1, uint64_t *a2, uint64_t a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*result)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[2] = (uint64_t)v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  result = (void (*)(uint64_t))malloc(*(_QWORD *)(v9 + 64));
  v7[5] = (uint64_t)result;
  v11 = *a2;
  if (v11 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = (uint64_t)result;
    result = (void (*)(uint64_t))sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13);
    if (v11 < *v7)
    {
      v7[1] = Deque._prepareForModify(at:)(v12, v11, a3);
      return sub_1A29F40F4;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1A29F5224(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_1A29F8208(*a1, a1[1], a1[2], *a2, a2[1], a3);
  return swift_release();
}

void (*sub_1A29F5260(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  v8 = *a2;
  v9 = a2[1];
  v7[5] = *a2;
  v7[6] = v9;
  *v7 = Deque.subscript.getter(v8, v9, *v3, *(_QWORD *)(a3 + 16));
  v7[1] = v10;
  v7[2] = v11;
  return sub_1A29F52D0;
}

void sub_1A29F52D0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[5];
  v5 = (*a1)[6];
  v7 = (*a1)[4];
  v8 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_1A29F8208(v3, v4, v8, v6, v5, v7);
    swift_release();
  }
  else
  {
    sub_1A29F8208(**a1, v4, v8, v6, v5, v7);
  }
  swift_release();
  free(v2);
}

uint64_t sub_1A29F5374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a3);
  return sub_1A2AE33D0();
}

void sub_1A29F53E4(Swift::Int *a1, Swift::Int *a2)
{
  Deque.swapAt(_:_:)(*a1, *a2);
}

uint64_t sub_1A29F53F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_1A29F5410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

Swift::Int sub_1A29F5430(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Sharing::_DequeSlot *v50;
  uint64_t v51;

  v48 = a6;
  v49 = a8;
  v51 = a5;
  v36 = a4;
  v46 = a2;
  v50 = (Sharing::_DequeSlot *)a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = sub_1A2AE3C1C();
  v41 = *(_QWORD *)(v17 - 8);
  v42 = v17;
  MEMORY[0x1E0C80A78](v17);
  v40 = (char *)&v35 - v18;
  v44 = a13;
  v47 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v20 = (char *)&v35 - v19;
  v21 = sub_1A2AE3C28();
  v22 = *(_QWORD *)(v21 - 8);
  result = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v35 - v24;
  v45 = a3;
  if (v51 < a3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v26 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  result = sub_1A2AE33DC();
  if ((result & 1) == 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v38 = v26;
  v39 = a7;
  v37 = *(void (**)(char *))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
  v37(v25);
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEC940], v21);
  sub_1A2AE3904();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v27 = v47;
  v28 = swift_getAssociatedConformanceWitness();
  v29 = v45;
  v30 = v46;
  v31 = v51;
  v45 = a11;
  Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(v29, v51, (uint64_t)v20, &v50->position, v46, a11, v27, v28);
  result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v27);
  if (v49 < 0)
  {
    if (v36 < v31)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v31, v36, v50, v30, v45);
  }
  else if (v49)
  {
    v43 = v28;
    v32 = v39;
    result = sub_1A2AE33DC();
    if ((result & 1) != 0)
    {
      v33 = v40;
      ((void (*)(char *, uint64_t, uint64_t))v37)(v40, v32, AssociatedTypeWitness);
      v34 = v42;
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEC928], v42);
      sub_1A2AE3904();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v34);
      return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v20, v49, v31, (uint64_t)v50, v30, v45, v47, v43);
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t Deque.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_1A29F8340(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_1A29F8440(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v6;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[15];
  _BYTE v19[8];

  v8 = sub_1A2AE388C();
  if (v8 < 1)
  {
    v17 = Deque._Storage.init()();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v17;
  }
  else
  {
    v11 = v8;
    v12 = Deque._Storage.init(minimumCapacity:)(v8, a2, v9, v10);
    v13 = MEMORY[0x1E0C80A78](v12);
    v18[8] = a2;
    v18[9] = a3;
    v18[10] = a4;
    v18[11] = v11;
    v18[12] = a1;
    MEMORY[0x1E0C80A78](v13);
    v18[2] = a2;
    v18[3] = sub_1A29F84AC;
    v18[4] = v14;
    swift_retain();
    v15 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v18, v12, (uint64_t)&type metadata for _DequeBufferHeader, a2, v15, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v19);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v12;
  }
}

uint64_t sub_1A29F5988(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v15 = result;
    Deque._UnsafeHandle.buffer(for:)(0, a3);
    v12 = sub_1A2AE3A24();
    v14 = v13;
    MEMORY[0x1E0C80A78](v12);
    result = sub_1A2AE35A4();
    if (v16 == 1)
      result = _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0(a4, v12, v14, a5, a6, a7);
    *(_QWORD *)(v15 + 8) = a3;
  }
  return result;
}

uint64_t sub_1A29F5AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[1] = a2;
  v11[0] = a1;
  v8 = sub_1A2AE33F4();
  v9 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEA5E8], v8);
  return _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0((uint64_t)v11, a3, a4, a5, v8, v9);
}

uint64_t sub_1A29F5B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Deque._UnsafeHandle.uncheckedAppend(_:)(*(_QWORD *)(v2 + 24), a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F5B58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;

  v12 = *a3;
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
  result = swift_release();
  v14 = v26 + a2;
  if (__OFADD__(v26, a2))
  {
    __break(1u);
  }
  else
  {
    v25 = a1;
    sub_1A2AE3CAC();
    v15 = sub_1A2AE3CA0();
    v16 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
    if (v26 < v14 || (v15 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, a4, v17, v18);
      Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
    }
    v19 = *a3;
    v20 = MEMORY[0x1E0C80A78](v16);
    v23[8] = a4;
    v23[9] = a5;
    v23[10] = a6;
    v23[11] = v25;
    v24 = a2;
    MEMORY[0x1E0C80A78](v20);
    v23[2] = a4;
    v23[3] = sub_1A29F8CF8;
    v23[4] = v21;
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, a4, v22, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v26);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29F5D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE v24[40];

  v12 = *(_QWORD *)(a4 - 8);
  v13 = (Swift::Int *)MEMORY[0x1E0C80A78](a1);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Deque._UnsafeHandle.availableSegments()(v13, (uint64_t)v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
  v18 = (void (*)(_QWORD, _QWORD))type metadata accessor for _UnsafeMutableWrappedBuffer(0, a3, v16, v17);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(a6, v15, v18, a4, a5);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = __OFADD__(v20, result);
  v22 = v20 + result;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(a1 + 8) = v22;
  return result;
}

uint64_t sub_1A29F5E68(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  Swift::Int v14;
  BOOL v15;
  Swift::Int v16;
  _BYTE v17[40];

  Deque._UnsafeHandle.uncheckedAppend(_:)(a3, (uint64_t)a1, a2, a5);
  Deque._UnsafeHandle.availableSegments()(a1, (uint64_t)v17);
  v10 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v8, v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(a4, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = a1[1];
  v15 = __OFADD__(v14, result);
  v16 = v14 + result;
  if (v15)
    __break(1u);
  else
    a1[1] = v16;
  return result;
}

uint64_t sub_1A29F61D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  Swift::Int *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];

  v13 = *(_QWORD *)(a6 - 8);
  v14 = (Swift::Int *)MEMORY[0x1E0C80A78](a1);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Deque._UnsafeHandle.availableSegments()(v14, (uint64_t)v24);
  v19 = type metadata accessor for _UnsafeMutableWrappedBuffer(0, a5, v17, v18);
  _UnsafeMutableWrappedBuffer.prefix(_:)(a3, (uint64_t)v25);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, a4, a6);
  result = _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v16, v19, a6, a7);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = __OFADD__(v21, a3);
  v23 = v21 + a3;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(a1 + 8) = v23;
  return result;
}

uint64_t Deque.insert(_:at:)(uint64_t result, Swift::Int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  uint64_t v18;
  uint64_t *v19;
  Swift::Int v20;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  v6 = *v3;
  v7 = *(_QWORD *)(a3 + 16);
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
  result = swift_release();
  if (v20 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
  result = swift_release();
  v8 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  sub_1A2AE3CAC();
  v9 = sub_1A2AE3CA0();
  v10 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
  if (v20 < v8 || (v9 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v7, v11, v12);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v8, 0);
  }
  v13 = *v3;
  v14 = MEMORY[0x1E0C80A78](v10);
  v17[8] = v7;
  v17[9] = a2;
  v18 = v5;
  v19 = v3;
  MEMORY[0x1E0C80A78](v14);
  v17[2] = v7;
  v17[3] = sub_1A29F8508;
  v17[4] = v15;
  swift_retain();
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v17, v13, (uint64_t)&type metadata for _DequeBufferHeader, v7, v16, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v20);
  return swift_release();
}

uint64_t sub_1A29F6530(Swift::Int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
    return Deque._UnsafeHandle.uncheckedPrepend(_:)(a4, a1, a2, a6);
  v16 = *v12;
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, a6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v19);
  swift_release();
  if (v21 == a3)
    return Deque._UnsafeHandle.uncheckedAppend(_:)(a4, (uint64_t)a1, a2, a6);
  Deque._UnsafeHandle.openGap(ofSize:atOffset:)(1, a3, a1, (uint64_t)&v21);
  result = sub_1A2AE3A00();
  if (result)
  {
    v18 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, a6);
    return sub_1A29EEB8C((uint64_t)v14, v18, a6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Deque.insert<A>(contentsOf:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A29F8524(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_1A29F66EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  return Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v16, a4, a5, a1, a2, a6, a7, a8);
}

uint64_t Deque.remove(at:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result;
  v4 = *v2;
  v5 = *(_QWORD *)(a2 + 16);
  swift_retain();
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v14);
  result = swift_release();
  if (v15 <= v3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_1A2AE3CAC();
  v6 = sub_1A2AE3CA0();
  if ((v6 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v5, v7, v8);
    Deque._Storage._makeUniqueCopy()();
  }
  v9 = *v2;
  v10 = MEMORY[0x1E0C80A78](v6);
  v13[8] = v5;
  v13[9] = v2;
  v14 = v3;
  MEMORY[0x1E0C80A78](v10);
  v13[2] = v5;
  v13[3] = v5;
  v13[4] = sub_1A29F8788;
  v13[5] = v11;
  swift_retain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F1A18, (uint64_t)v13, v9, (uint64_t)&type metadata for _DequeBufferHeader, v5, v12, v5, MEMORY[0x1E0DEDB38], (uint64_t)&v15);
  return swift_release();
}

Swift::Int sub_1A29F693C(Sharing::_DequeSlot *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int result;
  uint64_t v10;

  result = Deque.subscript.getter(a4, *a3, a5);
  v10 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
    __break(1u);
  }
  else if (v10 >= a4)
  {
    return Deque._UnsafeHandle.uncheckedRemove(offsets:)(a4, v10, a1, a2, a5);
  }
  __break(1u);
  return result;
}

uint64_t Deque.removeSubrange(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = result;
  v6 = *(_QWORD *)(a3 + 16);
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
  if (v16 < a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_1A2AE3CAC();
  v7 = sub_1A2AE3CA0();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v6, v8, v9);
    Deque._Storage._makeUniqueCopy()();
  }
  v10 = *v3;
  v11 = MEMORY[0x1E0C80A78](v7);
  v14[8] = v6;
  v14[9] = v5;
  v15 = a2;
  MEMORY[0x1E0C80A78](v11);
  v14[2] = v6;
  v14[3] = sub_1A29F87A4;
  v14[4] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v16);
}

uint64_t Deque._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[11];
  uint64_t v15;

  v15 = *v2;
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a1);
  result = sub_1A2AE38F8();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    sub_1A2AE3CAC();
    v7 = sub_1A2AE3CA0();
    if ((v7 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v6, v8, v9);
      Deque._Storage._makeUniqueCopy()();
    }
    v10 = *v2;
    v11 = MEMORY[0x1E0C80A78](v7);
    v14[8] = v6;
    MEMORY[0x1E0C80A78](v11);
    v14[2] = v6;
    v14[3] = v6;
    v14[4] = sub_1A29F87D8;
    v14[5] = v12;
    v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F8F60, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, v6, MEMORY[0x1E0DEDB38], (uint64_t)&v15);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
  }
  return result;
}

Swift::Bool __swiftcall Deque._customRemoveLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = a1;
  v4 = *(_QWORD *)(v1 + 16);
  LOBYTE(a1) = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v14);
  if (v16 < v3)
  {
LABEL_7:
    __break(1u);
    return a1;
  }
  sub_1A2AE3CAC();
  v5 = sub_1A2AE3CA0();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._makeUniqueCopy()();
  }
  v8 = *v2;
  v9 = MEMORY[0x1E0C80A78](v5);
  v14 = v4;
  v15 = v3;
  MEMORY[0x1E0C80A78](v9);
  v13[2] = v4;
  v13[3] = sub_1A29F8800;
  v13[4] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v13, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v16);
  LOBYTE(a1) = 1;
  return a1;
}

uint64_t Deque.removeFirst()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[11];
  uint64_t v13;

  v13 = *v1;
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a1);
  result = sub_1A2AE38F8();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    sub_1A2AE3CAC();
    v5 = sub_1A2AE3CA0();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v4, v6, v7);
      Deque._Storage._makeUniqueCopy()();
    }
    v8 = *v1;
    v9 = MEMORY[0x1E0C80A78](v5);
    v12[8] = v4;
    MEMORY[0x1E0C80A78](v9);
    v12[2] = v4;
    v12[3] = v4;
    v12[4] = sub_1A29F19F0;
    v12[5] = v10;
    v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    return sub_1A29F27CC((uint64_t)sub_1A29F8F60, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, v4, MEMORY[0x1E0DEDB38], (uint64_t)&v13);
  }
  return result;
}

Swift::Void __swiftcall Deque.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[8];
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v1 + 16);
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v13);
  if (v15 < a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  sub_1A2AE3CAC();
  v5 = sub_1A2AE3CA0();
  if ((v5 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v4, v6, v7);
    Deque._Storage._makeUniqueCopy()();
  }
  v8 = *v2;
  v9 = MEMORY[0x1E0C80A78](v5);
  v13 = v4;
  v14 = a1;
  MEMORY[0x1E0C80A78](v9);
  v12[2] = v4;
  v12[3] = sub_1A29F8830;
  v12[4] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v12, v8, (uint64_t)&type metadata for _DequeBufferHeader, v4, v11, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v15);
}

Swift::Void __swiftcall Deque.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[11];
  _BYTE v12[8];

  if (keepingCapacity)
  {
    v3 = *(_QWORD *)(v1 + 16);
    sub_1A2AE3CAC();
    v4 = sub_1A2AE3CA0();
    if ((v4 & 1) == 0)
    {
      type metadata accessor for Deque._Storage(0, v3, v5, v6);
      Deque._Storage._makeUniqueCopy()();
    }
    v7 = *v2;
    v8 = MEMORY[0x1E0C80A78](v4);
    v11[8] = v3;
    MEMORY[0x1E0C80A78](v8);
    v11[2] = v3;
    v11[3] = sub_1A29F8860;
    v11[4] = v9;
    v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v11, v7, (uint64_t)&type metadata for _DequeBufferHeader, v3, v10, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v12);
  }
  else
  {
    swift_release();
    *v2 = Deque._Storage.init()();
  }
}

uint64_t sub_1A29F71AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = Deque.init()(*(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1A29F71D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A29F7E4C(*a1, a1[1], a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t sub_1A29F722C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = sub_1A29F8340(a1, a2, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t sub_1A29F727C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = sub_1A29F8440(a1, *(_QWORD *)(a4 + 16), a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a5 = v8;
  return result;
}

uint64_t sub_1A29F72D8(uint64_t a1, uint64_t a2)
{
  Deque.append(_:)(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t sub_1A29F7314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Deque.append<A>(contentsOf:)(a1, a4, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_1A29F7360(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A29F736C(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD))Deque.insert(_:at:));
}

uint64_t sub_1A29F736C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD))
{
  a5(a1, *a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t sub_1A29F73AC(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1A29F8524(a1, *a2, a5, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t sub_1A29F73FC(uint64_t *a1, uint64_t a2)
{
  return Deque.remove(at:)(*a1, a2);
}

uint64_t sub_1A29F7404(uint64_t *a1, uint64_t a2)
{
  return Deque.removeSubrange(_:)(*a1, a1[1], a2);
}

uint64_t sub_1A29F7418(Swift::Int a1)
{
  Deque._customRemoveLast(_:)(a1);
  return 1;
}

uint64_t sub_1A29F743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a3);
  return sub_1A2AE3928();
}

uint64_t sub_1A29F74A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)@<X0>(uint64_t *@<X0>, _QWORD *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  v14 = a2;
  v15 = a1;
  v9 = a2;
  v10 = type metadata accessor for Deque.Iterator(0, a2, a3, a4);
  v11 = sub_1A29F8F04;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F8F40, (uint64_t)v8, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, v6, v10, MEMORY[0x1E0DEDB38], (uint64_t)v16);
  return v17;
}

uint64_t sub_1A29F7550@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 72) * *(_QWORD *)(v2 + 24));
}

uint64_t sub_1A29F758C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F5B58(a1, a2, *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1A29F75A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1A29F5D80(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_1A29F75C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1A29F0994(a1, a2, *(uint64_t (**)(void))(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_1A29F75E4(Swift::Int *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F5E68(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_1A29F7604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1A2AE3940();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = sub_1A2AE33B8();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_1A2AE33B8();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1A29F778C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v22 - v17;
  v19 = sub_1A2AE33B8();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1A29F7938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v11)@<X0>(_QWORD *@<X0>, uint64_t *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;

  v14 = a4;
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v9 = a4;
  type metadata accessor for Deque.Iterator(255, a4, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = sub_1A29F8E18;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F75C4, (uint64_t)v8, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v6, TupleTypeMetadata2, MEMORY[0x1E0DEDB38], (uint64_t)v18);
  return v19;
}

uint64_t sub_1A29F7A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v3);
  return sub_1A29F36D4();
}

uint64_t sub_1A29F7A94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2)
      goto LABEL_9;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_9:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t sub_1A29F7AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)@<X0>(Sharing::_DequeSlot *@<X0>, Sharing::_DequeSlot *@<X8>);
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;

  v14 = a3;
  v15 = a2;
  v16 = a1;
  v9 = a3;
  v10 = type metadata accessor for Deque.Iterator(0, a3, a3, a4);
  v11 = sub_1A29F8EB4;
  v12 = &v13;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29F27CC((uint64_t)sub_1A29F75C4, (uint64_t)v8, a1, (uint64_t)&type metadata for _DequeBufferHeader, a3, v6, v10, MEMORY[0x1E0DEDB38], (uint64_t)v17);
  return v18;
}

Sharing::_DequeSlot sub_1A29F7B9C@<X0>(Sharing::_DequeSlot *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  Sharing::_DequeSlot *v4;
  Sharing::_DequeSlot result;
  char v6;

  v4 = *(Sharing::_DequeSlot **)(v2 + 24);
  result.position = Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1].position).position;
  if (result.position && result.position != v4[1].position)
  {
    v4[1].position = 0;
    v4[2].position = result.position;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1A29F7C04(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_1A29F0994(a1, a2, *(uint64_t (**)(void))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 16), MEMORY[0x1E0DEAFA0], a3);
}

uint64_t sub_1A29F7C2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A29F3B40(a1, *(uint64_t (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1A29F7C48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  Sharing::_DequeSlot v6;

  v5 = *(_QWORD *)(v2 + 16);
  v6.position = Deque._UnsafeHandle.slot(forOffset:)(*(_QWORD *)(v2 + 24)).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1 + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v6.position, v5);
}

uint64_t sub_1A29F7CA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = result;
  v6 = *(_QWORD *)(a3 + 16);
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
  if (v16 <= a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_1A2AE3CAC();
  v7 = sub_1A2AE3CA0();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v6, v8, v9);
    Deque._Storage._makeUniqueCopy()();
  }
  v10 = *v3;
  v11 = MEMORY[0x1E0C80A78](v7);
  v14[8] = v6;
  v14[9] = a2;
  v15 = v5;
  MEMORY[0x1E0C80A78](v11);
  v14[2] = v6;
  v14[3] = sub_1A29F8DB8;
  v14[4] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v14, v10, (uint64_t)&type metadata for _DequeBufferHeader, v6, v13, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v16);
}

uint64_t sub_1A29F7E18@<X0>(Swift::Int *a1@<X8>)
{
  uint64_t v1;

  return sub_1A29F4374(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1A29F7E30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F449C(a1, a2, v2[3], v2[4], v2[2]);
}

void sub_1A29F7E4C(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  Swift::Int v50;
  Swift::Int v51;

  v50 = a2;
  v47 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v39 - v16;
  v48 = a1;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v46 = v15;
  v49 = v6;
  v18 = *v6;
  v19 = *(_QWORD *)(a4 + 16);
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v38);
  if (v51 < v50)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v50 - v48;
  if (__OFSUB__(v50, v48))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v44 = a3;
  v45 = v17;
  v21 = sub_1A2AE388C();
  v22 = v21 - v20;
  if (__OFSUB__(v21, v20))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23 = v21;
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v18, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v38);
  v24 = v51 + v22;
  if (__OFADD__(v51, v22))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v42 = v22;
  v43 = AssociatedTypeWitness;
  sub_1A2AE3CAC();
  v25 = v49;
  v26 = sub_1A2AE3CA0();
  sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v25, (uint64_t)&type metadata for _DequeBufferHeader, v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v38);
  if (v51 < v24 || (v26 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v19, v27, v28);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v24, 0);
  }
  if (v23 >= v20)
    v23 = v20;
  v29 = v48;
  if (!__OFADD__(v48, v23))
  {
    v41 = 0;
    v30 = v44;
    v31 = v47;
    sub_1A2AE3880();
    v32 = v45;
    sub_1A2AE3898();
    v40 = (uint64_t (*)(char *, uint64_t))v46[1];
    v33 = v14;
    v34 = v43;
    v35 = v40(v33, v43);
    v46 = &v39;
    v49 = (uint64_t *)*v49;
    v36 = MEMORY[0x1E0C80A78](v35);
    *(&v39 - 12) = v19;
    *(&v39 - 11) = a5;
    *(&v39 - 10) = v31;
    *(&v39 - 9) = v29;
    *(&v39 - 8) = v50;
    *(&v39 - 7) = v29 + v23;
    *(&v39 - 6) = v30;
    *(&v39 - 5) = (uint64_t)v32;
    *(&v39 - 4) = v42;
    *(&v39 - 3) = v23;
    MEMORY[0x1E0C80A78](v36);
    *(&v39 - 4) = v19;
    *(&v39 - 3) = (uint64_t)sub_1A29F8D7C;
    v37 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)(&v39 - 6), (uint64_t)v49, (uint64_t)&type metadata for _DequeBufferHeader, v19, v37, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v51);
    v40(v32, v34);
    return;
  }
LABEL_18:
  __break(1u);
}

void sub_1A29F8208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, *(_QWORD *)(a6 + 16), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
    if (v16[0] >= a5)
    {
      v16[0] = a1;
      v16[1] = a2;
      v16[2] = a3;
      MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, a6);
      v13 = sub_1A2AE3FF4();
      v14 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE48], v13);
      sub_1A29F7E4C(a4, a5, (uint64_t)v16, a6, v13, v14);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1A29F8308(int a1, int a2)
{
  uint64_t v2;

  return sub_1A29F4DB0(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1A29F8324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A29F4F90(a1, *(void (**)(_QWORD *))(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1A29F8340(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[13];
  char v11[8];

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v6 = Deque.init(minimumCapacity:)(a2, a3);
    v7 = MEMORY[0x1E0C80A78](v6);
    v10[8] = a3;
    v10[9] = a2;
    v10[10] = v5;
    MEMORY[0x1E0C80A78](v7);
    v10[2] = a3;
    v10[3] = sub_1A29F8D2C;
    v10[4] = v8;
    swift_retain();
    v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v10, v6, (uint64_t)&type metadata for _DequeBufferHeader, a3, v9, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)v11);
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_1A29F8440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = Deque._Storage.init()();
  v10 = type metadata accessor for Deque(0, a2, v8, v9);
  Deque.append<A>(contentsOf:)(a1, v10, a3, a4);
  return v12;
}

uint64_t sub_1A29F84AC(uint64_t a1, uint64_t a2)
{
  return sub_1A29F84E4(a1, a2, sub_1A29F5988);
}

uint64_t sub_1A29F84C8(uint64_t a1, uint64_t a2)
{
  return sub_1A29F84E4(a1, a2, sub_1A29F61D8);
}

uint64_t sub_1A29F84E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[5], v3[6], v3[2], v3[3], v3[4]);
}

uint64_t sub_1A29F8508(Swift::Int *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F6530(a1, a2, v2[3], v2[4], v2[5], v2[2]);
}

uint64_t sub_1A29F8524(uint64_t result, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[12];
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;

  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  v10 = result;
  v11 = *v6;
  v12 = *(_QWORD *)(a3 + 16);
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
  if (v27 < a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = sub_1A2AE388C();
  result = sub_1A29F2738((uint64_t)sub_1A29F085C, 0, v11, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
  v14 = v27 + v13;
  if (__OFADD__(v27, v13))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v26 = v10;
  sub_1A2AE3CAC();
  v15 = sub_1A2AE3CA0();
  v16 = sub_1A29F2738((uint64_t)sub_1A296C624, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v24);
  if (v27 < v14 || (v15 & 1) == 0)
  {
    type metadata accessor for Deque._Storage(0, v12, v17, v18);
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v14, 0);
  }
  v19 = *v6;
  v20 = MEMORY[0x1E0C80A78](v16);
  v23[8] = v12;
  v23[9] = a4;
  v23[10] = a5;
  v23[11] = v26;
  v24 = v13;
  v25 = a2;
  MEMORY[0x1E0C80A78](v20);
  v23[2] = v12;
  v23[3] = sub_1A29F8CD8;
  v23[4] = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  return sub_1A29F27CC((uint64_t)sub_1A29F04E8, (uint64_t)v23, v19, (uint64_t)&type metadata for _DequeBufferHeader, v12, v22, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v27);
}

Swift::Int sub_1A29F8788(Sharing::_DequeSlot *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F693C(a1, a2, *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

Swift::Int sub_1A29F87A4(Sharing::_DequeSlot *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedRemove(offsets:)(v2[3], v2[4], a1, a2, v2[2]);
}

uint64_t sub_1A29F87D8(uint64_t a1)
{
  return Deque._UnsafeHandle.uncheckedRemoveLast()(a1);
}

void sub_1A29F8800()
{
  uint64_t v0;

  Deque._UnsafeHandle.uncheckedRemoveLast(_:)(*(_QWORD *)(v0 + 24));
}

void sub_1A29F8830()
{
  uint64_t v0;

  Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(*(_QWORD *)(v0 + 24));
}

void sub_1A29F8860()
{
  Deque._UnsafeHandle.uncheckedRemoveAll()();
}

void sub_1A29F8888()
{
  JUMPOUT(0x1A85895ECLL);
}

void sub_1A29F8898()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29F88A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29F89CC(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

unint64_t sub_1A29F88B4()
{
  unint64_t result;

  result = qword_1EE67C418[0];
  if (!qword_1EE67C418[0])
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, qword_1EE67C418);
  }
  return result;
}

uint64_t sub_1A29F88F8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void sub_1A29F8940()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29F8950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29F89CC(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1A29F895C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1A29F89A4()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29F89B4()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1A29F89C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29F89CC(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1A29F89CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_1A29F88B4();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x1A85895EC](a4, a1, v8);
}

void sub_1A29F8A14()
{
  JUMPOUT(0x1A85895ECLL);
}

uint64_t sub_1A29F8A24(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE30], a1, &v3);
}

uint64_t sub_1A29F8A6C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>);
  return MEMORY[0x1A85895EC](MEMORY[0x1E0DEDE50], a1, &v3);
}

uint64_t sub_1A29F8AB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return Deque.subscript.getter(*a2, *a1, *(uint64_t *)((char *)a2 + a3 - 8));
}

uint64_t sub_1A29F8ACC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for Deque(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return sub_1A29F7CA8(a1, v5, v6);
}

uint64_t sub_1A29F8B18()
{
  return 8;
}

_QWORD *sub_1A29F8B24(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1A29F8B30@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = Deque.subscript.getter(*a2, a2[1], *a1, *(uint64_t *)((char *)a2 + a3 - 8));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  return result;
}

uint64_t sub_1A29F8B6C()
{
  return 8;
}

uint64_t sub_1A29F8B78(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1A29F8BAC()
{
  return swift_release();
}

_QWORD *sub_1A29F8BB4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_1A29F8C08(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t sub_1A29F8C44(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A29F8C8C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Deque.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque.Iterator);
}

uint64_t sub_1A29F8CD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F66EC(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t sub_1A29F8CF8(uint64_t *a1, uint64_t a2)
{
  return sub_1A29F8ED0(a1, a2);
}

uint64_t sub_1A29F8D0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F5AA4(a1, a2, v2[5], v2[6], v2[2]);
}

uint64_t sub_1A29F8D2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >= 1)
    result = sub_1A2AE39C4();
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

Swift::Int sub_1A29F8D7C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1A29F5430(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3], v2[4]);
}

uint64_t sub_1A29F8DB8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  Sharing::_DequeSlot v7;

  v5 = v2[2];
  v4 = v2[3];
  v6 = v2[4];
  v7.position = Deque._UnsafeHandle.slot(forOffset:)(v4).position;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2 + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * v7.position, v6, v5);
}

uint64_t sub_1A29F8E18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_1A29F37CC(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t sub_1A29F8E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE67C4A8[0];
  if (!qword_1EE67C4A8[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67C4A0);
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEC940], v1);
    atomic_store(result, qword_1EE67C4A8);
  }
  return result;
}

uint64_t sub_1A29F8E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F3434(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F8E98(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A29F34D4(a1, a2, *(_OWORD **)(v2 + 24), *(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_1A29F8EB4@<X0>(Sharing::_DequeSlot *a1@<X0>, Sharing::_DequeSlot *a2@<X8>)
{
  uint64_t v2;

  return sub_1A29F32B0(*(_QWORD *)(v2 + 24), a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1A29F8ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

uint64_t sub_1A29F8F04@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1[2];
  v4 = a1[1] + v3;
  if (*a1 < v4)
    v4 = *a1;
  *a2 = *(_QWORD *)(v2 + 24);
  a2[1] = v3;
  a2[2] = v4;
  return swift_retain();
}

uint64_t sub_1A29F8F40(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1A29F75C4(a1, a2, a3);
}

uint64_t sub_1A29F8F60(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1A29F1A18(a1, a2, a3);
}

uint64_t _UnsafeWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_1A29F9100(MEMORY[0x1E0DEA588], a1);
}

uint64_t _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = sub_1A2AE33E8();
  v4 = v3;
  result = sub_1A2AE33E8();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];

  v6 = sub_1A2AE3A24();
  v8 = v7;
  sub_1A2AE33F4();
  v9 = sub_1A2AE39F4();
  v10 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v23, a1 + 16, v9);
  v10(v19, (uint64_t)v23, v9);
  v18[2] = a2;
  v11 = sub_1A2AE3A3C();
  result = sub_1A29ED710((void (*)(char *, char *))sub_1A29FA328, (uint64_t)v18, MEMORY[0x1E0DEDCE8], v11, v12, (uint64_t)&v20);
  v14 = v20;
  v15 = v21;
  if (v21)
    v16 = v20;
  else
    v16 = 0;
  if (v21)
    v17 = v22;
  else
    v17 = 1;
  if (!v22)
    v14 = v16;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = v15;
  *(_BYTE *)(a3 + 32) = v17;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_1A29F9100(MEMORY[0x1E0DEB988], a1);
}

uint64_t sub_1A29F9100@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  if ((a5 & 1) == 0 && a4 == 0)
    v6 = 0;
  else
    v6 = a3;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v6;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1 | (a4 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.assign<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v10, a2, a3, a4);
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];
  _QWORD v63[2];
  char v64;

  v5 = v4;
  v61 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = sub_1A2AE3C1C();
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  MEMORY[0x1E0C80A78](v11);
  v50 = (char *)&v45 - v12;
  v60 = a4;
  v58 = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v57 = (char *)&v45 - v13;
  v59 = (void (*)(uint64_t, uint64_t))AssociatedConformanceWitness;
  v14 = sub_1A2AE3C28();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v53 = (char *)&v45 - v16;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v45 - v21;
  v23 = *(_QWORD *)(a2 + 16);
  sub_1A2AE3A3C();
  v24 = sub_1A2AE39F4();
  v25 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v62, v5 + 2, v24);
  v25(v63, v62, v24);
  if ((v64 & 1) != 0)
  {
    v26 = v61;
    _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0(v61, *v5, v5[1], v23, a3, v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v26, a3);
  }
  v28 = v63[0];
  v48 = v63[1];
  sub_1A2AE3880();
  v29 = *v5;
  v30 = v5[1];
  v49 = v29;
  sub_1A2AE3898();
  v31 = *(void (**)(char *, uint64_t))(v17 + 8);
  v31(v20, AssociatedTypeWitness);
  v32 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v59 + 1);
  result = sub_1A2AE33DC();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v46 = v28;
  v47 = (uint64_t (*)(char *, uint64_t))v31;
  v33 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v34 = v53;
  v45 = v33;
  v33(v53, v22, AssociatedTypeWitness);
  v59 = v32;
  v35 = v55;
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEC940], v55);
  v36 = (uint64_t)v57;
  sub_1A2AE3904();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v35);
  v37 = v58;
  v38 = swift_getAssociatedConformanceWitness();
  v39 = v30;
  v40 = v37;
  _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0(v36, v49, v39, v23, v37, v38);
  v41 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v41(v36, v37);
  result = sub_1A2AE33DC();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v42 = v50;
  v45(v50, v22, AssociatedTypeWitness);
  v59 = v41;
  v43 = v52;
  MEMORY[0x1A85895EC](MEMORY[0x1E0DEC928], v52);
  v44 = v61;
  sub_1A2AE3904();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v43);
  _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0(v36, v46, v48, v23, v40, v38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v44, a3);
  v59(v36, v40);
  return v47(v22, AssociatedTypeWitness);
}

uint64_t _UnsafeMutableWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1A2AE3A0C();
  v4 = v3;
  result = sub_1A2AE3A0C();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v6)
    v7 = result;
  else
    v7 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v6 == 0;
  return result;
}

Swift::Void __swiftcall _UnsafeMutableWrappedBuffer.deinitialize()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t *, uint64_t);
  _BYTE v5[24];
  uint64_t v6[2];
  char v7;

  v2 = *(_QWORD *)(v0 + 16);
  sub_1A29FA400(*v1, v1[1], v2);
  sub_1A2AE3A3C();
  v3 = sub_1A2AE39F4();
  v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 32);
  v4((uint64_t *)v5, v1 + 2, v3);
  v4(v6, (uint64_t *)v5, v3);
  if ((v7 & 1) == 0)
    sub_1A29FA400(v6[0], v6[1], v2);
}

uint64_t _UnsafeMutableWrappedBuffer.suffix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_BYTE *)(v2 + 32) & 1;
  if (v6)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v2 + 24);
  v8 = __OFADD__(v4, v7);
  v9 = v4 + v7;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    result = *(_QWORD *)v2;
    v11 = *(_QWORD *)(v2 + 16);
    if (v9 <= v10)
    {
LABEL_15:
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v4;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v5;
      *(_BYTE *)(a2 + 32) = v6 & 1;
      return result;
    }
    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    {
      v12 = sub_1A2AE3A3C();
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9D8], v12);
      sub_1A2AE33A0();
      result = sub_1A2AE3A30();
LABEL_14:
      v6 = 1;
      goto LABEL_15;
    }
    if (v5 >= v10)
    {
      v14 = sub_1A2AE3A3C();
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9D8], v14);
      sub_1A2AE33A0();
      result = sub_1A2AE3A30();
      v11 = 0;
      v5 = 0;
      goto LABEL_14;
    }
    if (!__OFSUB__(v10, v5))
    {
      v13 = sub_1A2AE3A3C();
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9D8], v13);
      sub_1A2AE33A0();
      result = sub_1A2AE3A30();
      v6 = v5 == 0;
      if (!v5)
        v11 = 0;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(uint64_t a1, char *a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char **, _BYTE *, uint64_t);
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  uint64_t v36;
  void (*v37)(char **, _BYTE *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char **, _BYTE *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t AssociatedTypeWitness;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  _BYTE v62[24];
  char *v63;
  uint64_t v64;
  char v65;
  _BYTE v66[32];

  v54 = a1;
  v52 = (void (*)(char *, uint64_t))a3;
  v9 = *((_QWORD *)a3 + 2);
  v49 = sub_1A2AE39F4();
  v48 = *(_QWORD *)(v49 - 8);
  v10 = MEMORY[0x1E0C80A78](v49);
  v60 = (char *)&v46 - v11;
  v12 = *(_QWORD *)(v9 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v58 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v59 = (char *)&v46 - v15;
  v57 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v46 - v17;
  v18 = *(_QWORD *)(a4 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v56 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v46 - v21;
  sub_1A2AE3A3C();
  v23 = sub_1A2AE39F4();
  v24 = *(void (**)(char **, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
  v25 = a2;
  v24((char **)v62, (_BYTE *)(v5 + 16), v23);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v26(v22, (uint64_t)v25, a4);
  v51 = v24;
  v24((char **)v66, v62, v23);
  if (v66[16] == 1)
  {
    v27 = v5;
    v52 = *(void (**)(char *, uint64_t))(v18 + 8);
    v52(v22, a4);
    v28 = a4;
  }
  else
  {
    v50 = v25;
    v27 = v5;
    v47 = *(_QWORD *)(v5 + 8);
    v29 = sub_1A2AE3598();
    v30 = *(void (**)(char *, uint64_t))(v18 + 8);
    v30(v22, a4);
    v28 = a4;
    if (v47 < v29)
    {
      v31 = v50;
      v26(v56, (uint64_t)v50, a4);
      v32 = v54;
      v33 = (void (*)(uint64_t, uint64_t))v30;
      sub_1A2AE3580();
      v34 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v36 = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v32, (uint64_t)v52, v34, AssociatedConformanceWitness);
      v33((uint64_t)v31, v28);
      return v36;
    }
    v52 = v30;
    v25 = v50;
  }
  v26(v56, (uint64_t)v25, v28);
  v37 = *(void (**)(char **, _BYTE *, uint64_t))(v27 + 8);
  v36 = sub_1A2AE358C();
  if ((void (*)(char **, _BYTE *, uint64_t))v36 != v37
    || (v51(&v63, v62, v23), v36 = (uint64_t)v37, (v65 & 1) != 0))
  {
    v52(v25, v28);
    v38 = AssociatedTypeWitness;
LABEL_17:
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v54, v61, v38);
    return v36;
  }
  v39 = v64;
  v38 = AssociatedTypeWitness;
  if (v64 < 1)
  {
    v39 = 0;
LABEL_16:
    result = ((uint64_t (*)(char *, uint64_t))v52)(v25, v28);
    v36 = (uint64_t)v37 + v39;
    if (!__OFADD__(v37, v39))
      goto LABEL_17;
  }
  else
  {
    v50 = v25;
    v51 = v37;
    v56 = v63;
    swift_getAssociatedConformanceWitness();
    v40 = 0;
    v41 = v59;
    while (1)
    {
      v42 = v60;
      sub_1A2AE3A54();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v42, 1, v9) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v41, v42, v9);
      result = sub_1A2AE3A00();
      if (!result)
        goto LABEL_22;
      v44 = result + *(_QWORD *)(v12 + 72) * v40;
      v45 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v41, v9);
      sub_1A29EEB8C(v45, v44, v9);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v41, v9);
      if (v39 == ++v40)
      {
        v25 = v50;
        v37 = v51;
        goto LABEL_16;
      }
    }
    v52(v50, v28);
    result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v42, v49);
    v36 = (uint64_t)v51 + v40;
    if (!__OFADD__(v51, v40))
      goto LABEL_17;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;
  char v34;

  v28 = a3;
  v29 = a4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = sub_1A2AE39F4();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - v8;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v23 - v15;
  v30 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(v4 + 8);
  v26 = v18;
  v27 = v4 + 16;
  do
  {
    if (v17 == v18)
    {
      if ((v30 & 1) != 0)
      {
        v17 = v18;
        goto LABEL_15;
      }
      sub_1A2AE3A3C();
      v19 = sub_1A2AE39F4();
      v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v20(v31, v27, v19);
      v20(&v32, (uint64_t)v31, v19);
      if ((v34 & 1) != 0 || v33 < 1)
        return v18;
      v17 = 0;
      v30 = 1;
      v18 = v33;
    }
    sub_1A2AE3A54();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
      goto LABEL_12;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v9, v5);
    result = sub_1A2AE3A00();
    if (!result)
      goto LABEL_18;
    v21 = result + *(_QWORD *)(v10 + 72) * v17;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v5);
    sub_1A29EEB8C((uint64_t)v13, v21, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v5);
  }
  while (!__OFADD__(v17++, 1));
  __break(1u);
LABEL_12:
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  v18 = v17;
  if ((v30 & 1) == 0)
    return v18;
LABEL_15:
  v18 = v26 + v17;
  if (!__OFADD__(v26, v17))
    return v18;
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, _BYTE *, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[2];
  char v24;
  char v25[8];
  uint64_t v26;
  char v27;

  v20 = *(_QWORD *)(v2 + 8);
  v21 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  v8 = sub_1A2AE3A3C();
  v9 = sub_1A2AE39F4();
  v10 = *(uint64_t (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v22, (_BYTE *)(v2 + 16), v9);
  result = v10(v25, v22, v9);
  if (v27)
    v12 = 0;
  else
    v12 = v26;
  v13 = *(_QWORD *)(v2 + 8);
  v14 = __OFADD__(v13, v12);
  v15 = v13 + v12;
  if (v14)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v15 <= a1)
  {
    v18 = v7 & 1;
    v13 = v20;
    v16 = v21;
LABEL_14:
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = v18;
    return result;
  }
  v16 = *(_QWORD *)v2;
  if (v13 >= a1)
  {
    v23[0] = *(_QWORD *)v2;
    v23[1] = v13;
    MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9F0], v8);
    sub_1A2AE38EC();
    result = sub_1A2AE3A30();
    v16 = result;
    v13 = v19;
    v5 = 0;
    v6 = 0;
    v18 = 1;
    goto LABEL_14;
  }
  result = v10((char *)v23, v22, v9);
  if ((v24 & 1) == 0)
  {
    if (!__OFSUB__(a1, v13))
    {
      MEMORY[0x1A85895EC](MEMORY[0x1E0DEB9F0], v8);
      sub_1A2AE38EC();
      result = sub_1A2AE3A30();
      v6 = v17;
      v18 = v17 == 0;
      if (v17)
        v5 = result;
      else
        v5 = 0;
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t _UnsafeWrappedBuffer.first.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _UnsafeWrappedBuffer.second.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _UnsafeWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t _UnsafeWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_1A29FA36C(a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0DEA5B8]);
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X8>)
{
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v8 = (a3 & 1) == 0;
  result = sub_1A2AE3A30();
  if (v8 && a2 == 0)
    v11 = 0;
  else
    v11 = a1;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 24) = a2;
  *(_BYTE *)(a4 + 32) = a3 & 1 | (a2 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = sub_1A2AE3A30();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  if (v7)
    v8 = result;
  else
    v8 = 0;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v7;
  *(_BYTE *)(a3 + 32) = v7 == 0;
  return result;
}

uint64_t sub_1A29FA2F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A2AE3A24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A29FA328@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A2AE3A24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_1A29FA36C(a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0DEB9C0]);
}

uint64_t sub_1A29FA36C(uint64_t a1, void (*a2)(uint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_BYTE *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[24];
  _BYTE v9[8];
  uint64_t v10;
  char v11;

  a2(255, *(_QWORD *)(a1 + 16));
  v3 = sub_1A2AE39F4();
  v4 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32);
  v4(v8, v2 + 16, v3);
  v4(v9, (uint64_t)v8, v3);
  if (v11)
    v5 = 0;
  else
    v5 = v10;
  v6 = *(_QWORD *)(v2 + 8);
  result = v6 + v5;
  if (__OFADD__(v6, v5))
    __break(1u);
  return result;
}

uint64_t sub_1A29FA400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return a1;
  result = swift_arrayDestroy();
  if ((unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(_QWORD *)(a3 - 8) + 72)) >> 64 == (a2
                                                                                            * *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72)) >> 63)
    return a1;
  __break(1u);
  return result;
}

uint64_t _sSr7SharingE13initializeAll14fromContentsOfyqd___t7ElementQyd__RszSlRd__lF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v32 = a1;
  v11 = sub_1A2AE39F4();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v29 = (char *)&v25 - v13;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v25 - v18;
  v26 = a4;
  v27 = a2;
  v33 = a4;
  v34 = a5;
  v35 = a6;
  v36 = a2;
  v20 = v32;
  v28 = a3;
  v37 = a3;
  sub_1A2AE35A4();
  if (v39 != 1)
    return v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v20, a5);
  v21 = sub_1A2AE358C();
  swift_getAssociatedConformanceWitness();
  v22 = v29;
  sub_1A2AE3A54();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, AssociatedTypeWitness);
  v23 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v22, 1);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v31);
  if (v23 != 1)
  {
    __break(1u);
    return v38;
  }
  return v21;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1A29FA694(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A29FA6B4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t type metadata accessor for _UnsafeWrappedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UnsafeWrappedBuffer);
}

uint64_t type metadata accessor for _UnsafeMutableWrappedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UnsafeMutableWrappedBuffer);
}

uint64_t sub_1A29FA6FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  if (!result)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return result;
  }
  if (*(_QWORD *)(v3 + 48) >= a2)
  {
    if (*(_QWORD *)(v3 + 40))
      result = sub_1A2AE39B8();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t _emptyDequeStorage.getter()
{
  if (qword_1EE675250 != -1)
    swift_once();
  return swift_retain();
}

void _DequeBuffer.deinit()
{
  uint64_t v0;

  sub_1A29FA804((uint64_t *)(v0 + 16));
  JUMPOUT(0x1A8587228);
}

uint64_t *sub_1A29FA804(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (__OFADD__(v1, v2))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = *result;
  if (*result >= v1 + v2)
    return (uint64_t *)sub_1A2AE39D0();
  v4 = v3 - v1;
  if (__OFSUB__(v3, v1))
    goto LABEL_7;
  sub_1A2AE39D0();
  result = (uint64_t *)(v2 - v4);
  if (!__OFSUB__(v2, v4))
    return (uint64_t *)sub_1A2AE39D0();
LABEL_8:
  __break(1u);
  return result;
}

void _DequeBuffer.__deallocating_deinit()
{
  _DequeBuffer.deinit();
}

uint64_t sub_1A29FA8B4()
{
  return swift_deallocClassInstance();
}

uint64_t _DequeBuffer.description.getter()
{
  uint64_t v1;

  sub_1A29FA908(&v1);
  return v1;
}

uint64_t sub_1A29FA908@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[2];

  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "_DequeStorage<");
  HIBYTE(v4[1]) = -18;
  sub_1A2AE412C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  _DequeBufferHeader.description.getter();
  sub_1A2AE34F0();
  result = swift_bridgeObjectRelease();
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_1A29FA9F0()
{
  return _DequeBuffer.description.getter();
}

_QWORD *sub_1A29FAA10()
{
  _QWORD *result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675228);
  result = (_QWORD *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  qword_1EE675258 = (uint64_t)result;
  return result;
}

uint64_t sub_1A29FAA48()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _DequeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DequeBuffer);
}

uint64_t Deque.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v4 = sub_1A2AE4060();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C5B0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = a1;
  v18[1] = a1;
  v11 = *MEMORY[0x1E0DEDF98];
  v12 = sub_1A2AE4054();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  v16 = type metadata accessor for Deque(0, a2, v14, v15);
  MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEDFE8], v4);
  swift_retain_n();
  return sub_1A2AE4078();
}

uint64_t sub_1A29FAC0C(uint64_t a1)
{
  uint64_t *v1;

  return Deque.customMirror.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t _DequeBufferHeader.capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _DequeBufferHeader.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _DequeBufferHeader.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t _DequeBufferHeader.startSlot.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _DequeBufferHeader.startSlot.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

Sharing::_DequeBufferHeader __swiftcall _DequeBufferHeader.init(capacity:count:startSlot:)(Swift::Int capacity, Swift::Int count, Sharing::_DequeSlot startSlot)
{
  Sharing::_DequeSlot *v3;
  Sharing::_DequeBufferHeader result;

  v3->position = capacity;
  v3[1].position = count;
  v3[2].position = startSlot.position;
  result.startSlot = startSlot;
  result.count = count;
  result.capacity = capacity;
  return result;
}

uint64_t _DequeBufferHeader.capacity.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_DequeBufferHeader.capacity.modify())()
{
  return nullsub_1;
}

uint64_t (*_DequeBufferHeader.count.modify())()
{
  return nullsub_1;
}

uint64_t (*_DequeBufferHeader.startSlot.modify())()
{
  return nullsub_1;
}

uint64_t _DequeBufferHeader.description.getter()
{
  sub_1A2AE3B20();
  sub_1A2AE34F0();
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  return 0;
}

uint64_t getEnumTagSinglePayload for _DequeBufferHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _DequeBufferHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _DequeBufferHeader()
{
  return &type metadata for _DequeBufferHeader;
}

uint64_t Deque<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD v19[4];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - v9;
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v18);
  sub_1A2AE4018();
  v19[0] = Deque.makeIterator()(a2, a3);
  v19[1] = v11;
  v19[2] = v12;
  v14 = type metadata accessor for Deque.Iterator(0, a3, v12, v13);
  Deque.Iterator.next()(v14, (uint64_t)v10);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v10, 1, a3) != 1)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v16(v7, v10, a3);
      sub_1A2AE3394();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
      Deque.Iterator.next()(v14, (uint64_t)v10);
    }
    while (v15(v10, 1, a3) != 1);
  }
  return swift_release();
}

uint64_t Deque<A>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  sub_1A2AE400C();
  Deque<A>.hash(into:)((uint64_t)v5, a1, a2);
  return sub_1A2AE4030();
}

uint64_t sub_1A29FB080(uint64_t a1)
{
  uint64_t *v1;

  return Deque<A>.hashValue.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1A29FB094(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Deque<A>.hash(into:)(a1, *v2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_1A29FB0A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  sub_1A2AE400C();
  Deque<A>.hash(into:)((uint64_t)v5, *v2, *(_QWORD *)(a2 + 16));
  return sub_1A2AE4030();
}

uint64_t sub_1A29FB0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x1A85895EC](&protocol conformance descriptor for <A> Deque<A>, a1, &v4);
}

uint64_t Deque._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Deque._storage.modify())()
{
  return nullsub_1;
}

uint64_t type metadata accessor for Deque(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deque);
}

uint64_t static Deque<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = MEMORY[0x1E0DEDCE8];
  v7 = MEMORY[0x1E0DEB418];
  v8 = MEMORY[0x1E0DEDD18];
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDD18], v15);
  sub_1A29F2738((uint64_t)sub_1A29F085C, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, v6, v7, v8, v16);
  if (!v17
    || (v9 = nullsub_1(a1, &type metadata for _DequeBufferHeader, a3),
        v9 == nullsub_1(a2, &type metadata for _DequeBufferHeader, a3)))
  {
    v13 = 1;
  }
  else
  {
    v12 = type metadata accessor for Deque(0, a3, v10, v11);
    MEMORY[0x1A85895EC](&protocol conformance descriptor for Deque<A>, v12);
    v13 = sub_1A2AE35B0();
  }
  return v13 & 1;
}

uint64_t sub_1A29FB2F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static Deque<A>.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16));
}

uint64_t Deque.init(arrayLiteral:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  v3 = sub_1A2AE3670();
  v4 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF50], v3);
  return Deque.init<A>(_:)((uint64_t)&v6, a2, v3, v4);
}

uint64_t sub_1A29FB360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_1A2AE3670();
  v6 = MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF50], v5);
  result = Deque.init<A>(_:)((uint64_t)&v8, v4, v5, v6);
  *a3 = result;
  return result;
}

uint64_t Range<>._count.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a2, a1);
  result = a2 - a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t static _DequeSlot.zero.getter()
{
  return 0;
}

BOOL static _DequeSlot.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

Sharing::_DequeSlot __swiftcall _DequeSlot.orIfZero(_:)(Sharing::_DequeSlot result)
{
  Sharing::_DequeSlot v1;

  if (v1.position > 0)
    return v1;
  return result;
}

Sharing::_DequeSlot __swiftcall _DequeSlot.advanced(by:)(Swift::Int by)
{
  uint64_t v1;

  return (Sharing::_DequeSlot)(v1 + by);
}

BOOL static _DequeSlot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _DequeSlot.position.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_DequeSlot.position.modify())()
{
  return nullsub_1;
}

uint64_t _DequeSlot.description.getter()
{
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 64;
}

uint64_t sub_1A29FB490()
{
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 64;
}

BOOL sub_1A29FB4F4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1A29FB50C()
{
  unint64_t result;

  result = qword_1EE67C5B8;
  if (!qword_1EE67C5B8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for _DequeSlot, &type metadata for _DequeSlot);
    atomic_store(result, (unint64_t *)&qword_1EE67C5B8);
  }
  return result;
}

BOOL sub_1A29FB550(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1A29FB564(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1A29FB578(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1A29FB58C(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

ValueMetadata *type metadata accessor for _DequeSlot()
{
  return &type metadata for _DequeSlot;
}

uint64_t sub_1A29FB5B0(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  objc_class *v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  Class v35;
  uint64_t v36;
  Class v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(_BYTE *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  objc_class *v73;
  uint64_t v74;
  _BYTE v75[32];
  _QWORD v76[3];
  Class v77;
  objc_super v78;
  Class v79;

  v63 = a7;
  v66 = a5;
  v65 = a3;
  v79 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v68 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v71 = (char *)&v61 - v12;
  v74 = sub_1A2AE3C40();
  v70 = *(_QWORD *)(v74 - 8);
  v13 = MEMORY[0x1E0C80A78](v74);
  v62 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v67 = (char *)&v61 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v16);
  v72 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A2AE3130();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = MEMORY[0x1E0C80A78](v18);
  v61 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v61 - v22;
  v24 = (objc_class *)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v25 = objc_allocWithZone(v24);
  swift_retain();
  swift_bridgeObjectRetain();
  v26 = (char *)v25;
  sub_1A2AE3124();
  v27 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v27(&v26[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v23, v18);
  v28 = &v26[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v28 = v79;
  *((_QWORD *)v28 + 1) = a2;
  v69 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v26[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v26[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a4;
  swift_retain();

  v73 = v24;
  if (a4)
  {
    v29 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v72, 1, 1, v29);
    v30 = v61;
    v27(v61, v23, v18);
    v31 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v32 = (v20 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (char *)swift_allocObject();
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = a4;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v33[v31], v30, v18);
    v34 = &v33[v32];
    v35 = v79;
    v36 = v69;
    *(_QWORD *)v34 = v79;
    *((_QWORD *)v34 + 1) = v36;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v72, (uint64_t)&unk_1EE67B188, (uint64_t)v33);
    swift_bridgeObjectRelease();
    swift_release();
    v24 = v73;
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
    v37 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
    v36 = v69;
    swift_bridgeObjectRelease();
    v37 = v79;
  }
  v78.receiver = v26;
  v78.super_class = v24;
  v38 = -[objc_class init](&v78, sel_init);
  swift_release();
  v79 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v79);
  swift_retain();
  v39 = sub_1A297B80C((uint64_t)v37, v36, a4);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v40 = v71;
  sub_1A2AE3C34();
  v41 = v70;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
  v43 = v74;
  result = v42(v40, 1, v74);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v46 = (uint64_t)v67;
  v45(v67, v40, v43);
  v77 = v73;
  v76[0] = v38;
  v47 = (char *)v38;
  v48 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v76, v46);
  v48(v75, 0);
  v49 = v74;
  v50 = v68;
  sub_1A2AE3C34();
  result = v42(v50, 1, v49);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v51 = (uint64_t)v62;
  v45(v62, v50, v49);
  v77 = v79;
  v76[0] = v39;
  v52 = (char *)v39;
  v53 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v76, v51);
  v53(v75, 0);
  v54 = v65;
  v55 = v66;
  v56 = v64;
  v57 = sub_1A2AE2E0C();
  swift_release();
  swift_release();
  if (v56)
  {

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
    v58 = &v47[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v58 + 16))

    v59 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v59 + 16))
    {
      v60 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v60 + 16))

    }
  }
  return v57;
}

uint64_t sub_1A29FBC3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X4>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  sub_1A29FCD20((void (*)(_BYTE *))sub_1A2A0174C, a4);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return sub_1A29B98D8(a1, a2);
}

uint64_t sub_1A29FBCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v9[9] = v11;
  v9[10] = v8;
  v9[7] = a7;
  v9[8] = a8;
  v9[5] = a5;
  v9[6] = a6;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A29FBD20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v7 = *(_OWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v3;
  v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 56) = v1;
  *(_OWORD *)(v3 + 64) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v5;
  *v5 = v0;
  v5[1] = sub_1A29FBDE4;
  return sub_1A2AE3F10();
}

uint64_t sub_1A29FBDE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A29FBE58()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29FBE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

void sub_1A29FBF20(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  os_activity_scope_state_s *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  uint64_t v103;
  char *v104;
  void *v105;
  _QWORD *v106;
  char *v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  os_activity_scope_state_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  char v117;
  int v118;
  os_activity_scope_state_s v119;
  uint64_t aBlock[6];
  uint64_t v121;
  _OWORD v122[2];
  uint64_t v123;

  v101 = a4;
  v102 = a3;
  v110 = a1;
  v96 = a7;
  v123 = *MEMORY[0x1E0C80C00];
  v95 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v98 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = v10;
  v100 = sub_1A2AE39F4();
  v99 = *(_QWORD *)(v100 - 8);
  v11 = MEMORY[0x1E0C80A78](v100);
  v13 = (char *)&v93 - v12;
  v103 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v11);
  v106 = (uint64_t *)((char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_1A2AE30C4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v112 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v107 = (char *)&v93 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v93 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v93 - v24;
  v115 = "syncXPC";
  v116 = 7;
  v117 = 2;
  v118 = 2;
  v119.opaque[0] = 0;
  v119.opaque[1] = 0;
  if (qword_1EE6766B8 != -1)
    swift_once();
  v26 = _os_activity_create(&dword_1A2830000, "syncXPC", (os_activity_t)qword_1EE6766C8, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  if (v26)
  {
    os_activity_scope_enter(v26, &v119);
    swift_unknownObjectRelease();
  }
  v104 = v13;
  v111 = &v119;
  sub_1A2AE30B8();
  if (qword_1EE676778 != -1)
    swift_once();
  v27 = sub_1A2AE31D8();
  v28 = __swift_project_value_buffer(v27, (uint64_t)qword_1EE676790);
  swift_bridgeObjectRetain_n();
  v109 = v28;
  v29 = sub_1A2AE31C0();
  v30 = sub_1A2AE3964();
  v31 = os_log_type_enabled(v29, v30);
  v113 = v16;
  v94 = v23;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    aBlock[0] = v33;
    v93 = a5;
    *(_DWORD *)v32 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v122[0] = sub_1A296DA00(v110, a2, aBlock);
    a5 = v93;
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v29, v30, "syncXPC [%{public}s] START -- Client", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v33, -1, -1);
    MEMORY[0x1A85896E8](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 0;
  v35 = (void **)(v34 + 16);
  v36 = v108;
  if ((-[NSObject respondsToSelector:](v108, sel_respondsToSelector_, sel_synchronousRemoteObjectProxyWithErrorHandler_) & 1) != 0)
  {
    aBlock[4] = (uint64_t)sub_1A2A01714;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A2A3D2FC;
    aBlock[3] = (uint64_t)&block_descriptor_22;
    v37 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain_n();
    v38 = -[NSObject synchronousRemoteObjectProxyWithErrorHandler:](v36, sel_synchronousRemoteObjectProxyWithErrorHandler_, v37);
    _Block_release(v37);
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    memset(v122, 0, sizeof(v122));
  }
  swift_beginAccess();
  v39 = *v35;
  if (*v35)
  {
    v121 = (uint64_t)*v35;
    v40 = v39;
    v41 = v39;
    v42 = v39;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v43 = sub_1A2AE3EB0();
    if (v43)
    {
      v44 = (void *)v43;

    }
    else
    {
      v44 = (void *)swift_allocError();
      *v49 = v121;
    }
    v48 = v113;
    swift_willThrow();

    v47 = v112;
  }
  else
  {
    v45 = (uint64_t)v106;
    v46 = v105;
    tryCast<A>(_:as:description:file:line:)((uint64_t)v122, a5, 0, 0, 0xD000000000000051, 0x80000001A2B463C0, 194, a5, (uint64_t)v106);
    if (v46)
    {
      v47 = v112;
      v48 = v113;
      v44 = v46;
    }
    else
    {
      v102(v45);
      v108 = 0;
      v67 = *v35;
      if (!*v35)
      {
        v73 = v108;
        Optional.tryUnwrap(_:file:line:)(0x746C75736572, 0xE600000000000000, 0xD000000000000051, 0x80000001A2B463C0, 197, v100, v98);
        v74 = v113;
        v108 = v73;
        v77 = v94;
        (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v94, v25, v15);
        swift_bridgeObjectRetain_n();
        disableAirDropTLS();
        disableAirDropTLS();
        v78 = v25;
        v79 = sub_1A2AE31C0();
        v80 = sub_1A2AE3964();
        v81 = v80;
        if (os_log_type_enabled(v79, v80))
        {
          v82 = swift_slowAlloc();
          LODWORD(v105) = v81;
          v83 = v82;
          v109 = swift_slowAlloc();
          v121 = v109;
          *(_DWORD *)v83 = 136446722;
          v112 = v78;
          swift_bridgeObjectRetain();
          v114 = sub_1A296DA00(v110, a2, &v121);
          v110 = v15;
          sub_1A2AE3A60();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v83 + 12) = 1040;
          LODWORD(v114) = 3;
          sub_1A2AE3A60();
          *(_WORD *)(v83 + 18) = 2048;
          v84 = v107;
          sub_1A2AE30B8();
          sub_1A2AE2FC8();
          v86 = v85;
          v87 = *(void (**)(char *, uint64_t))(v113 + 8);
          v88 = v84;
          v89 = v110;
          v87(v88, v110);
          v114 = v86;
          sub_1A2AE3A60();
          v87(v77, v89);
          _os_log_impl(&dword_1A2830000, v79, (os_log_type_t)v105, "syncXPC [%{public}s] END -- Client {duration: %.*f}", (uint8_t *)v83, 0x1Cu);
          v90 = v109;
          swift_arrayDestroy();
          MEMORY[0x1A85896E8](v90, -1, -1);
          MEMORY[0x1A85896E8](v83, -1, -1);

          (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v100);
          (*(void (**)(_QWORD *, uint64_t))(v103 + 8))(v106, a5);
          sub_1A29B84DC((uint64_t)v122);
          v87(v112, v89);
        }
        else
        {

          v91 = *(void (**)(char *, uint64_t))(v74 + 8);
          v91(v77, v15);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v100);
          (*(void (**)(_QWORD *, uint64_t))(v103 + 8))(v106, a5);
          sub_1A29B84DC((uint64_t)v122);
          v91(v78, v15);
        }
        v92 = v111;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v96, v98, v97);
        swift_release();
        os_activity_scope_leave(v92);
        return;
      }
      v121 = (uint64_t)*v35;
      v68 = v67;
      v69 = v67;
      v70 = v67;
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      v71 = sub_1A2AE3EB0();
      v48 = v113;
      if (v71)
      {
        v72 = v71;

      }
      else
      {
        v72 = swift_allocError();
        *v75 = v121;
      }
      v76 = v100;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v76);
      (*(void (**)(_QWORD *, uint64_t))(v103 + 8))(v106, a5);
      v47 = v112;
      v44 = (void *)v72;
    }
  }
  sub_1A29B84DC((uint64_t)v122);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v47, v25, v15);
  swift_bridgeObjectRetain();
  v50 = v44;
  swift_bridgeObjectRetain();
  v51 = v44;
  disableAirDropTLS();
  disableAirDropTLS();
  v52 = sub_1A2AE31C0();
  v53 = sub_1A2AE394C();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = swift_slowAlloc();
    v112 = v25;
    v55 = v54;
    v56 = (_QWORD *)swift_slowAlloc();
    v106 = v56;
    v109 = swift_slowAlloc();
    *(_QWORD *)&v122[0] = v109;
    *(_DWORD *)v55 = 136446978;
    v108 = v52;
    swift_bridgeObjectRetain();
    v121 = sub_1A296DA00(v110, a2, (uint64_t *)v122);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v55 + 12) = 2114;
    v57 = sub_1A2AE2E9C();
    v121 = v57;
    sub_1A2AE3A60();
    *v56 = v57;

    *(_WORD *)(v55 + 22) = 1040;
    LODWORD(v121) = 3;
    sub_1A2AE3A60();
    *(_WORD *)(v55 + 28) = 2048;
    v58 = v107;
    sub_1A2AE30B8();
    sub_1A2AE2FC8();
    v60 = v59;
    v61 = v47;
    v62 = *(void (**)(char *, uint64_t))(v113 + 8);
    v62(v58, v15);
    v121 = v60;
    sub_1A2AE3A60();
    v62(v61, v15);
    v52 = v108;
    _os_log_impl(&dword_1A2830000, v108, v53, "syncXPC [%{public}s] FAIL -- Client {error: %{public}@, duration: %.*f}", (uint8_t *)v55, 0x26u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    v63 = (uint64_t)v106;
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v63, -1, -1);
    v64 = v109;
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v64, -1, -1);
    v65 = v55;
    v25 = v112;
    MEMORY[0x1A85896E8](v65, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v66 = v47;
    v62 = *(void (**)(char *, uint64_t))(v48 + 8);
    v62(v66, v15);
  }

  swift_willThrow();
  v62(v25, v15);
  os_activity_scope_leave(v111);
}

uint64_t sub_1A29FCD20@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  MEMORY[0x1E0C80A78](a1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1A2AE4084();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t sub_1A29FCE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE676790);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE676790);
  if (qword_1ECEFB8A8 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1ECEFC700);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t static VoidParameters.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A29FCEDC()
{
  sub_1A29FCF58();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29FCF04()
{
  sub_1A29FCF58();
  return sub_1A2AE4108();
}

uint64_t VoidParameters.encode(to:)(_QWORD *a1)
{
  return sub_1A29FD09C(a1, &qword_1EE6763D8, (void (*)(void))sub_1A29FCF58);
}

unint64_t sub_1A29FCF58()
{
  unint64_t result;

  result = qword_1EE6761A0;
  if (!qword_1EE6761A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B003F4, &type metadata for VoidParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6761A0);
  }
  return result;
}

uint64_t VoidParameters.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A29FCFC0(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A29FCFE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29FD200(a1, a2, a3, &qword_1EE6763D8, (void (*)(void))sub_1A29FCF58);
}

uint64_t static VoidResponse.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A29FD020()
{
  sub_1A29FD16C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A29FD048()
{
  sub_1A29FD16C();
  return sub_1A2AE4108();
}

uint64_t VoidResponse.encode(to:)(_QWORD *a1)
{
  return sub_1A29FD09C(a1, &qword_1EE675168, (void (*)(void))sub_1A29FD16C);
}

uint64_t sub_1A29FD09C(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_1A2AE40E4();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1A29FD16C()
{
  unint64_t result;

  result = qword_1EE674680;
  if (!qword_1EE674680)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B003A4, &type metadata for VoidResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE674680);
  }
  return result;
}

uint64_t VoidResponse.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A29FD1D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29FD200(a1, a2, a3, &qword_1EE675168, (void (*)(void))sub_1A29FD16C);
}

uint64_t sub_1A29FD200(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  sub_1A2AE40E4();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t SFXPCConnection.containerRegistry.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t SFXPCConnection.containerRegistry.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*SFXPCConnection.containerRegistry.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t SFXPCConnection.__allocating_init(_:queue:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = a1;
  objc_msgSend(v5, sel_sf_setQueue_, a2);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v5, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  return v4;
}

uint64_t SFXPCConnection.init(_:queue:)(void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = 0;
  v4 = a1;
  objc_msgSend(v4, sel_sf_setQueue_, a2);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v4, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  return v2;
}

uint64_t SFXPCConnection.__allocating_init(_:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;

  v5 = swift_allocObject();
  SFXPCConnection.init(_:queue:)(v5, a2, a3);
  return v5;
}

uint64_t *SFXPCConnection.init(_:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v17[6];

  v5 = *v3;
  swift_bridgeObjectRelease();
  v3[3] = 0;
  v6 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v7 = (void *)sub_1A2AE340C();
  v8 = objc_msgSend(v6, sel_initWithMachServiceName_options_, v7, 0);

  v3[2] = (uint64_t)v8;
  v9 = v8;
  objc_msgSend(v9, sel_sf_setQueue_, a3);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v9, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  v10 = (void *)v3[2];
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v11;
  v12[3] = a3;
  v12[4] = v5;
  v17[4] = sub_1A2A00770;
  v17[5] = v12;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1107296256;
  v17[2] = sub_1A29FD800;
  v17[3] = &block_descriptor_3;
  v13 = _Block_copy(v17);
  v14 = v10;
  v15 = a3;
  swift_release();
  objc_msgSend(v14, sel_setInterruptionHandler_, v13);

  _Block_release(v13);
  return v3;
}

uint64_t sub_1A29FD6D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v5 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
    v6 = (void *)sub_1A2AE340C();
    v7 = objc_msgSend(v5, sel_initWithMachServiceName_options_, v6, 0);

    v8 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v7;

    v9 = *(id *)(v4 + 16);
    objc_msgSend(v9, sel_sf_setQueue_, a2);
    if (qword_1ECEFCFA8 != -1)
      swift_once();
    objc_msgSend(v9, sel_setRemoteObjectInterface_, qword_1ECEFD598);

    objc_msgSend(*(id *)(v4 + 16), sel_activate);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29FD800(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t SFXPCConnection.__allocating_init(serviceName:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;

  v4 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v5 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithServiceName_, v5);

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  v8 = v6;
  objc_msgSend(v8, sel_sf_setQueue_, a3);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v8, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  return v7;
}

uint64_t SFXPCConnection.__allocating_init(machServiceName:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;

  v4 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v5 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithMachServiceName_options_, v5, 0);

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  v8 = v6;
  objc_msgSend(v8, sel_sf_setQueue_, a3);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v8, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  return v7;
}

uint64_t SFXPCConnection.__allocating_init(listenerEndpoint:queue:)(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3B38]), sel_initWithListenerEndpoint_, a1);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = v4;
  objc_msgSend(v6, sel_sf_setQueue_, a2);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v6, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  return v5;
}

Swift::Void __swiftcall SFXPCConnection.activate()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), sel_activate);
}

Swift::Void __swiftcall SFXPCConnection.invalidate()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

uint64_t SFXPCConnection.asyncInvoke<A>(_:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[5] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[11] = v8;
  v6[12] = *(_QWORD *)(v8 + 64);
  v6[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A29FDBA0()
{
  uint64_t v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  id v15;
  id v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;

  v1 = (char *)objc_msgSend(objc_allocWithZone(*(Class *)(v0 + 56)), sel_init);
  *(_QWORD *)(v0 + 112) = v1;
  v26 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v27 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v2 = 0x80000001A2B462E0;
    v27 = 0xD00000000000001BLL;
  }
  *(_QWORD *)(v0 + 120) = v2;
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v22 = v3;
  v23 = v2;
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  swift_beginAccess();
  v11 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v0 + 128) = v11;
  v24 = *(void **)(v8 + 16);
  *(_QWORD *)(v0 + 136) = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v9, v6);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = (v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (char *)swift_allocObject();
  *(_QWORD *)(v0 + 144) = v14;
  *((_QWORD *)v14 + 2) = v10;
  *((_QWORD *)v14 + 3) = v7;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&v14[v12], v22, v6);
  *(_QWORD *)&v14[v13] = v11;
  *(_QWORD *)&v14[(v13 + 15) & 0xFFFFFFFFFFFFFFF8] = v26;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v15 = v24;
  swift_bridgeObjectRetain();
  v16 = v26;
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v17;
  v18 = sub_1A2A008F0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *v17 = v0;
  v17[1] = sub_1A29FDDC8;
  v20 = *(_QWORD *)(v0 + 40);
  v17[9] = AssociatedTypeWitness;
  v17[10] = v15;
  v17[7] = v18;
  v17[8] = v25;
  v17[5] = sub_1A2A00844;
  v17[6] = v14;
  v17[3] = v27;
  v17[4] = v23;
  v17[2] = v20;
  return swift_task_switch();
}

uint64_t sub_1A29FDDC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc();
  v3 = *(void **)(v2 + 136);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A29FDE4C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A29FDE94()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id SFXPCInvocation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void sub_1A29FDEFC(id *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  objc_class *v44;
  _QWORD aBlock[6];
  uint64_t v46;

  v42 = a7;
  v43 = a5;
  v44 = a3;
  v40 = a2;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v39 = sub_1A2AE36AC();
  v13 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v38 = (char *)&v35 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v35 - v16;
  v41 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v35 - v16, v43, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  swift_retain();
  v20 = AssociatedConformanceWitness;
  v21 = v46;
  v23 = sub_1A29FB5B0(v44, a4, (uint64_t)v17, a6, AssociatedTypeWitness, v22, v20);
  if (!v21)
  {
    v46 = v23;
    v44 = v24;
    v36 = v25;
    v37 = v26;
    v43 = sub_1A2AE2F74();
    v28 = v38;
    v27 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v38, v40, v39);
    v29 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = a8;
    *(_QWORD *)(v30 + 24) = a9;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v30 + v29, v28, v27);
    aBlock[4] = sub_1A2A01C48;
    aBlock[5] = v30;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_65;
    v31 = _Block_copy(aBlock);
    v32 = v36;
    v33 = v37;
    swift_release();
    v34 = (void *)v43;
    objc_msgSend(v41, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v42, v43, v32, v33, 0, v31);
    _Block_release(v31);

    sub_1A29736C4(v46, (unint64_t)v44);
  }
}

uint64_t sub_1A29FE1C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[8];

  v37 = a6;
  v34 = a5;
  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v9 = sub_1A2AE4084();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v29 = (char *)&v26 - v11;
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v27 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedConformanceWitness();
  v33 = type metadata accessor for SFXPCConnection.PerformedInvocation(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v19 = (char *)&v26 - v18;
  sub_1A297CF68(a1, a2);
  v20 = v34;
  v21 = v34;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v22 = (uint64_t)v15;
  sub_1A29FBC3C(a1, a2, v20, (uint64_t)v19);
  v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v29, v19, v32);
  sub_1A29FBE8C(v23, (uint64_t)v38, v22);
  v24 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v22, AssociatedTypeWitness);
  sub_1A2AE36AC();
  sub_1A2AE36A0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v19, v33);
}

void SFXPCConnection.syncInvoke<A>(_:parameters:)(objc_class *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = v5;
  v36 = a2;
  v33 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v32 = sub_1A2AE4084();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v29 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedConformanceWitness();
  v37 = type metadata accessor for SFXPCConnection.PerformedInvocation(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v29 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v35 = (uint64_t)&v29 - v14;
  v15 = (char *)objc_msgSend(objc_allocWithZone(a1), sel_init);
  v16 = v15;
  if (*(_QWORD *)&v15[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v17 = *(_QWORD *)&v15[OBJC_IVAR___SFXPCInvocation_name];
    v18 = *(_QWORD *)&v15[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v18 = 0x80000001A2B46300;
    v17 = 0xD000000000000019;
  }
  v19 = *(void **)(v6 + 16);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676770);
  v34 = &v29;
  MEMORY[0x1E0C80A78](v20);
  *(&v29 - 8) = a3;
  *(&v29 - 7) = a4;
  *(&v29 - 6) = v17;
  *(&v29 - 5) = v18;
  *(&v29 - 4) = v36;
  *(&v29 - 3) = v21;
  v22 = v16;
  *(&v29 - 2) = (uint64_t)v16;
  sub_1A2A008F0();
  swift_bridgeObjectRetain();
  v23 = v19;
  v24 = v35;
  v25 = v17;
  v27 = v37;
  v26 = v38;
  sub_1A29FBF20(v25, v18, (void (*)(uint64_t))sub_1A2A00938, (uint64_t)(&v29 - 10), v20, v37, v35);
  if (v26)
  {

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    v28 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v31, v24, v32);
    sub_1A29FBE8C(v28, (uint64_t)&v39, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v27);

  }
}

uint64_t sub_1A29FE78C@<X0>(id *a1@<X0>, objc_class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[6];
  uint64_t v50;

  v47 = a6;
  v48 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v44 - v17;
  v46 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v44 - v17, a4, AssociatedTypeWitness);
  swift_beginAccess();
  v20 = *(_QWORD *)(a5 + 24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = AssociatedConformanceWitness;
  v23 = v50;
  result = sub_1A29FB5B0(a2, a3, (uint64_t)v18, v20, AssociatedTypeWitness, v24, v22);
  if (!v23)
  {
    v29 = result;
    v30 = v26;
    v31 = v27;
    v45 = v28;
    v32 = swift_getAssociatedTypeWitness();
    v33 = swift_getAssociatedConformanceWitness();
    v34 = swift_getAssociatedConformanceWitness();
    v35 = type metadata accessor for SFXPCConnection.PerformedInvocation(255, v32, v33, v34);
    v50 = sub_1A2AE39F4();
    v36 = swift_allocBox();
    v38 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v37, 1, 1, v35);
    v39 = (void *)sub_1A2AE2F74();
    v40 = (_QWORD *)swift_allocObject();
    v40[2] = a7;
    v40[3] = a8;
    v40[4] = v36;
    v44 = v29;
    aBlock[4] = sub_1A2A01740;
    aBlock[5] = v40;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_28;
    v41 = _Block_copy(aBlock);
    v42 = v31;
    v43 = v45;
    swift_retain();
    swift_release();
    objc_msgSend(v46, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v47, v39, v42, v43, 1, v41);
    sub_1A29736C4(v44, v30);

    _Block_release(v41);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v38);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A29FEAB4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v23 = a5;
  v24 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for SFXPCConnection.PerformedInvocation(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = sub_1A2AE39F4();
  v21 = *(_QWORD *)(v10 - 8);
  v22 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&AssociatedConformanceWitness - v11;
  v13 = swift_projectBox();
  v14 = a1;
  v15 = a1;
  v16 = a2;
  sub_1A297CF68(v15, a2);
  v17 = v23;
  v18 = v23;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A29FBC3C(v14, v16, v17, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v12, 0, 1, v9);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 40))(v13, v12, v22);
}

uint64_t SFXPCConnection.waitForScheduledSendsToComplete()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1A29FEC90()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1A29FED10;
  return sub_1A2AE3E74();
}

uint64_t sub_1A29FED10()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A29FED64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A29FED6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C5F8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1A2A016B0;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A29FD800;
  aBlock[3] = &block_descriptor_16;
  v10 = _Block_copy(aBlock);
  v11 = v7;
  swift_release();
  objc_msgSend(v11, sel_scheduleSendBarrierBlock_, v10);
  _Block_release(v10);

}

uint64_t sub_1A29FEEB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[32];
  _QWORD v61[3];
  uint64_t ObjectType;
  uint64_t v63;

  v10 = v9;
  v55 = a7;
  v56 = a8;
  v57 = a6;
  v58 = a2;
  v63 = a5;
  v59 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v47 - v17;
  v19 = sub_1A2AE3C40();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v47 - v24;
  result = Optional<A>.throwIfNotNil()(a1);
  if (v9)
    goto LABEL_12;
  v52 = v20;
  v53 = v18;
  v49 = v25;
  v50 = v16;
  v54 = v19;
  v51 = v23;
  v27 = v59;
  v28 = v63;
  if (a3 >> 60 == 15)
  {
    sub_1A297AFB8();
    v10 = swift_allocError();
    *(_OWORD *)v29 = xmmword_1A2B000D0;
    *(_QWORD *)(v29 + 16) = 0xD000000000000051;
    *(_QWORD *)(v29 + 24) = 0x80000001A2B463C0;
    v30 = 164;
LABEL_11:
    *(_QWORD *)(v29 + 32) = v30;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_QWORD *)(v29 + 72) = 0;
    *(_QWORD *)(v29 + 80) = 0x2000000000000000;
    *(_QWORD *)(v29 + 88) = 0;
    *(_QWORD *)(v29 + 96) = 0;
    result = swift_willThrow();
LABEL_12:
    *a9 = v10;
    return result;
  }
  if (!v59)
  {
    sub_1A297AFB8();
    v10 = swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000018;
    *(_QWORD *)(v29 + 8) = 0x80000001A2B46440;
    *(_QWORD *)(v29 + 16) = 0xD000000000000051;
    *(_QWORD *)(v29 + 24) = 0x80000001A2B463C0;
    v30 = 165;
    goto LABEL_11;
  }
  if (!v63)
  {
    sub_1A297AFB8();
    v10 = swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000011;
    *(_QWORD *)(v29 + 8) = 0x80000001A2B46460;
    *(_QWORD *)(v29 + 16) = 0xD000000000000051;
    *(_QWORD *)(v29 + 24) = 0x80000001A2B463C0;
    v30 = 166;
    goto LABEL_11;
  }
  sub_1A2AE2E00();
  swift_allocObject();
  v47 = a3;
  sub_1A297CF68(v58, a3);
  v31 = v27;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v32 = sub_1A2AE2DF4();
  v33 = v53;
  sub_1A2AE3C34();
  v34 = v52;
  v35 = v54;
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  result = v48(v33, 1, v54);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v36 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v37 = (uint64_t)v49;
    v36(v49, v33, v35);
    ObjectType = swift_getObjectType();
    v61[0] = v31;
    swift_unknownObjectRetain();
    v53 = (char *)v32;
    v38 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
    sub_1A29B3438((uint64_t)v61, v37);
    v38(v60, 0);
    v39 = v50;
    sub_1A2AE3C34();
    result = v48(v39, 1, v35);
    v40 = v35;
    v41 = (uint64_t)v51;
    if ((_DWORD)result != 1)
    {
      v36(v51, v39, v40);
      ObjectType = swift_getObjectType();
      v61[0] = v28;
      swift_unknownObjectRetain();
      v42 = sub_1A2AE2DE8();
      v43 = v41;
      v44 = (void (*)(_BYTE *, _QWORD))v42;
      sub_1A29B3438((uint64_t)v61, v43);
      v44(v60, 0);
      v45 = v58;
      v46 = v47;
      sub_1A2AE2DDC();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      return sub_1A29B98D8(v45, v46);
    }
  }
  __break(1u);
  return result;
}

uint64_t SFXPCConnection.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SFXPCConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

id sub_1A29FF368(void *a1, uint64_t a2)
{
  void *v4;

  swift_beginAccess();
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;

  return a1;
}

void sub_1A29FF3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char isEscapingClosureAtFileLocation;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[6];
  _QWORD aBlock[7];

  v32 = a7;
  v33 = a8;
  v34 = a5;
  v35 = a6;
  v36 = a3;
  v37 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v13 = sub_1A2AE36AC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v31 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v31 - v16, a1, v13);
  v18 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v19 = (char *)swift_allocObject();
  v20 = v33;
  *((_QWORD *)v19 + 2) = v32;
  *((_QWORD *)v19 + 3) = v20;
  *((_QWORD *)v19 + 4) = a9;
  *((_QWORD *)v19 + 5) = a2;
  *((_QWORD *)v19 + 6) = a3;
  *((_QWORD *)v19 + 7) = a4;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[v18], v17, v13);
  v21 = &v19[(v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8];
  v22 = v35;
  *(_QWORD *)v21 = v34;
  *((_QWORD *)v21 + 1) = v22;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_1A2A019C4;
  *(_QWORD *)(v23 + 24) = v19;
  aBlock[4] = sub_1A2A01A6C;
  aBlock[5] = v23;
  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_43;
  v25 = _Block_copy(aBlock);
  v26 = _Block_copy(v25);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v26;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_1A2A01A98;
  *(_QWORD *)(v28 + 24) = v27;
  v38[4] = sub_1A2A01D10;
  v38[5] = v28;
  v38[0] = v24;
  v38[1] = 1107296256;
  v38[2] = sub_1A2A1AD58;
  v38[3] = &block_descriptor_53;
  v29 = _Block_copy(v38);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  _Block_copy(v26);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v29);
  _Block_release(v29);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v26);
  _Block_release(v25);
  if ((v29 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

uint64_t sub_1A29FF6C4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  void *v37;
  id v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t aBlock[6];
  _QWORD v77[5];

  v9 = a8;
  v69 = a7;
  v62 = a6;
  v63 = a5;
  v70 = a3;
  v65 = a1;
  v12 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v68 = a9;
  v74 = sub_1A2AE36AC();
  v15 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v17 = (char *)&v56 - v16;
  v73 = sub_1A2AE30C4();
  v71 = *(_QWORD *)(v73 - 8);
  v18 = MEMORY[0x1E0C80A78](v73);
  v60 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v58 = (char *)&v56 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v57 = (char *)&v56 - v23;
  MEMORY[0x1E0C80A78](v22);
  v72 = (char *)&v56 - v24;
  sub_1A2AE30B8();
  if (qword_1EE676778 != -1)
    swift_once();
  v25 = sub_1A2AE31D8();
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_1EE676790);
  swift_bridgeObjectRetain_n();
  v66 = v26;
  v27 = sub_1A2AE31C0();
  v28 = sub_1A2AE3964();
  v29 = os_log_type_enabled(v27, v28);
  v61 = v12;
  v67 = a2;
  if (v29)
  {
    v64 = v14;
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v59 = v9;
    v56 = a4;
    v32 = v31;
    aBlock[0] = v31;
    *(_DWORD *)v30 = 136446210;
    swift_bridgeObjectRetain();
    v77[0] = sub_1A296DA00(v65, a2, aBlock);
    v14 = v64;
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v27, v28, "asyncXPC [%{public}s] START -- Client", v30, 0xCu);
    swift_arrayDestroy();
    v33 = v32;
    a4 = v56;
    v9 = v59;
    MEMORY[0x1A85896E8](v33, -1, -1);
    MEMORY[0x1A85896E8](v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v34 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, v74);
  v35 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v36 = (char *)swift_allocObject();
  *((_QWORD *)v36 + 2) = v69;
  *((_QWORD *)v36 + 3) = v9;
  *((_QWORD *)v36 + 4) = v68;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v36[v35], v17, v34);
  aBlock[4] = (uint64_t)sub_1A2A01B30;
  aBlock[5] = (uint64_t)v36;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A2A4129C;
  aBlock[3] = (uint64_t)&block_descriptor_59;
  v37 = _Block_copy(aBlock);
  swift_release();
  v38 = objc_msgSend(v70, sel_remoteObjectProxyWithErrorHandler_, v37);
  _Block_release(v37);
  sub_1A2AE3A90();
  swift_unknownObjectRelease();
  tryCast<A>(_:as:description:file:line:)((uint64_t)v77, v9, 0, 0, 0xD000000000000051, 0x80000001A2B463C0, 217, v9, (uint64_t)v14);
  v63(v14, a4);
  v39 = v72;
  v40 = v71;
  v41 = v57;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v57, v72, v73);
  v42 = v67;
  swift_bridgeObjectRetain_n();
  disableAirDropTLS();
  disableAirDropTLS();
  v43 = sub_1A2AE31C0();
  v44 = sub_1A2AE3964();
  v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = swift_slowAlloc();
    v74 = swift_slowAlloc();
    aBlock[0] = v74;
    *(_DWORD *)v46 = 136446722;
    LODWORD(v70) = v45;
    swift_bridgeObjectRetain();
    v75 = sub_1A296DA00(v65, v42, aBlock);
    v64 = v14;
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v46 + 12) = 1040;
    LODWORD(v75) = 3;
    sub_1A2AE3A60();
    *(_WORD *)(v46 + 18) = 2048;
    v47 = v58;
    sub_1A2AE30B8();
    sub_1A2AE2FC8();
    v49 = v48;
    v50 = *(void (**)(char *, uint64_t))(v40 + 8);
    v51 = v73;
    v50(v47, v73);
    v75 = v49;
    sub_1A2AE3A60();
    v50(v41, v51);
    _os_log_impl(&dword_1A2830000, v43, (os_log_type_t)v70, "asyncXPC [%{public}s] END -- {duration: %.*f}", (uint8_t *)v46, 0x1Cu);
    v52 = v74;
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v52, -1, -1);
    MEMORY[0x1A85896E8](v46, -1, -1);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v9);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v77);
    return ((uint64_t (*)(char *, uint64_t))v50)(v72, v51);
  }
  else
  {

    v54 = *(void (**)(char *, uint64_t))(v40 + 8);
    v55 = v73;
    v54(v41, v73);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v77);
    return ((uint64_t (*)(char *, uint64_t))v54)(v39, v55);
  }
}

uint64_t sub_1A2A002E0(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  sub_1A2AE36AC();
  return sub_1A2AE3694();
}

id SFXPCInvocation.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___SFXPCInvocation_name];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SFXPCInvocation.init(name:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;

  v3 = &v2[OBJC_IVAR___SFXPCInvocation_name];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v5, sel_init);
}

id SFXPCInvocation.init()()
{
  void *v0;
  objc_class *ObjCClassFromMetadata;
  char *v2;
  NSString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  objc_super v9;

  swift_getObjectType();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v2 = v0;
  v3 = NSStringFromClass(ObjCClassFromMetadata);
  v4 = sub_1A2AE343C();
  v6 = v5;

  v7 = (uint64_t *)&v2[OBJC_IVAR___SFXPCInvocation_name];
  *v7 = v4;
  v7[1] = v6;

  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v9, sel_init);
}

id SFXPCInvocation.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1A2A00984(a1);

  return v4;
}

id SFXPCInvocation.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1A2A00984(a1);

  return v2;
}

void sub_1A2A005A0(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  if (*(_QWORD *)(v1 + OBJC_IVAR___SFXPCInvocation_name + 8))
  {
    v3 = (void *)sub_1A2AE340C();
    v4 = (id)sub_1A2AE340C();
    objc_msgSend(a1, sel_encodeObject_forKey_, v3, v4);

  }
}

id SFXPCInvocation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A2A00720()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A2A00744()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1A2A00770()
{
  uint64_t v0;

  return sub_1A29FD6D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1A2A00794()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();

  return swift_deallocObject();
}

void sub_1A2A00844(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1A29FDEFC(a1, a2, *(objc_class **)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + v8, *(_QWORD *)(v2 + v9), *(_QWORD *)(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

unint64_t sub_1A2A008F0()
{
  unint64_t result;

  result = qword_1EE675EE8;
  if (!qword_1EE675EE8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE675EE8);
  }
  return result;
}

uint64_t type metadata accessor for SFXPCConnection.PerformedInvocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFXPCConnection.PerformedInvocation);
}

uint64_t sub_1A2A00938@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A29FE78C(a1, *(objc_class **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_1A2A0095C(uint64_t a1)
{
  uint64_t v1;

  sub_1A29FED6C(a1, v1);
}

uint64_t type metadata accessor for SFXPCInvocation()
{
  return objc_opt_self();
}

id sub_1A2A00984(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  objc_super v14;
  _OWORD v15[2];
  _OWORD v16[2];

  v3 = v1;
  v4 = (void *)sub_1A2AE340C();
  v5 = objc_msgSend(a1, sel_decodeObjectForKey_, v4);

  if (v5)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    sub_1A296E4A4(v15, v16);
    sub_1A296E4A4(v16, v15);
    v6 = swift_dynamicCast();
    v7 = v12;
    v8 = v13;
    if (!v6)
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = &v3[OBJC_IVAR___SFXPCInvocation_name];
    *(_QWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v8;
  }
  else
  {
    v10 = &v3[OBJC_IVAR___SFXPCInvocation_name];
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
  }

  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v14, sel_init);
}

ValueMetadata *type metadata accessor for VoidParameters()
{
  return &type metadata for VoidParameters;
}

ValueMetadata *type metadata accessor for VoidResponse()
{
  return &type metadata for VoidResponse;
}

uint64_t type metadata accessor for SFXPCConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for SFXPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFXPCConnection.__allocating_init(_:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for SFXPCInvocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFXPCInvocation.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static SFXPCInvocation.supportsSecureCoding.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SFXPCInvocation.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SFXPCInvocation.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t sub_1A2A00B30()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  result = sub_1A2AE4084();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id *sub_1A2A00BB8(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

void sub_1A2A00CDC(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_1A2A00D24 + 4 * byte_1A2B000E5[v5]))();
  }
}

_QWORD *sub_1A2A00D7C(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    v9 = *a2;
    *a1 = v8;
    v10 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v5) = v10;
  return a1;
}

id *sub_1A2A00E60(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      v13 = v12;
      *a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
    }
    *((_BYTE *)a1 + v7) = v14;
  }
  return a1;
}

_QWORD *sub_1A2A00FF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_1A2A010C8(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1A2A01254(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A2A01318 + 4 * byte_1A2B00108[(v4 - 1)]))();
}

void sub_1A2A01364(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

ValueMetadata *type metadata accessor for VoidResponse.CodingKeys()
{
  return &type metadata for VoidResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for VoidParameters.CodingKeys()
{
  return &type metadata for VoidParameters.CodingKeys;
}

unint64_t sub_1A2A01530()
{
  unint64_t result;

  result = qword_1EE674698;
  if (!qword_1EE674698)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00354, &type metadata for VoidResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE674698);
  }
  return result;
}

unint64_t sub_1A2A01578()
{
  unint64_t result;

  result = qword_1EE674690;
  if (!qword_1EE674690)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0037C, &type metadata for VoidResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE674690);
  }
  return result;
}

unint64_t sub_1A2A015C0()
{
  unint64_t result;

  result = qword_1EE6761B8;
  if (!qword_1EE6761B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00304, &type metadata for VoidParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6761B8);
  }
  return result;
}

unint64_t sub_1A2A01608()
{
  unint64_t result;

  result = qword_1EE6761B0;
  if (!qword_1EE6761B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0032C, &type metadata for VoidParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6761B0);
  }
  return result;
}

uint64_t sub_1A2A0164C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C5F8);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1A2A016B0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C5F8);
  return sub_1A2AE36A0();
}

uint64_t sub_1A2A016F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1A2A01714(void *a1)
{
  uint64_t v1;

  return sub_1A29FF368(a1, v1);
}

uint64_t sub_1A2A0171C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A01740(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_1A29FEAB4(a1, a2, a3, a4, a5);
}

uint64_t sub_1A2A0174C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1A29FEEB0(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, a1);
}

uint64_t sub_1A2A01780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A2A0181C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_1A2AE3130() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1A2971EBC;
  return sub_1A29ED2D0(a1, v6, v7, v8, v9, v11, v12);
}

void sub_1A2A018D8(uint64_t a1)
{
  uint64_t *v1;

  sub_1A29FF3B8(a1, v1[5], v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t sub_1A2A01908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v1 = sub_1A2AE36AC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A019C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v4 = *(_QWORD *)(sub_1A2AE36AC() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1A29FF6C4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), v0 + v5, *(void (**)(char *, uint64_t))v6, *(_QWORD *)(v6 + 8), v1, v2, v3);
}

uint64_t sub_1A2A01A5C()
{
  return swift_deallocObject();
}

uint64_t sub_1A2A01A6C()
{
  uint64_t v0;

  return sub_1A296D970(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1A2A01A74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A2A01A98()
{
  uint64_t v0;

  return sub_1A2A1B6DC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A2A01AA0()
{
  return swift_deallocObject();
}

uint64_t sub_1A2A01AB0()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v1 = sub_1A2AE36AC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1A2A01B30(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  sub_1A2AE36AC();
  return sub_1A2A002E0(a1);
}

uint64_t sub_1A2A01BAC()
{
  uint64_t v0;
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v1 = sub_1A2AE36AC();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1A2A01C48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE36AC() - 8) + 80);
  return sub_1A29FE1C4(a1, a2, a3, a4, a5, v5 + ((v11 + 32) & ~v11));
}

uint64_t SFPlatformValue.description.getter()
{
  sub_1A2AE3EBC();
  return 0;
}

uint64_t sub_1A2A01D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for SFPlatformValue(0, v6, a2, a3);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a4, v9, v6);
}

uint64_t SFVariantValue.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  sub_1A2A01D90(v3, v6, v7, (uint64_t)v5);
  sub_1A2AE3EBC();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v9[0];
}

uint64_t SFVariantValue<A>.userDefaultsRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2A01D90(v5, v8, v9, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t SFVariantValue<A>.init(userDefaultsString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a4;
  v33 = a5;
  v8 = type metadata accessor for SFPlatformValue(255, a3, a3, a4);
  v9 = sub_1A2AE39F4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  SFPlatformValue<A>.init(userDefaultsString:)(a1, a2, a3, v32, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v22 = type metadata accessor for SFVariantValue(0, a3, v20, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v33, 1, 1, v22);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v24(v19, v13, v8);
    v24(v17, v19, v8);
    v27 = type metadata accessor for SFPlatformValue(0, a3, v25, v26);
    v28 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v33, v17, v27);
    v31 = type metadata accessor for SFVariantValue(0, a3, v29, v30);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v28, 0, 1, v31);
  }
}

uint64_t type metadata accessor for SFPlatformValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFPlatformValue);
}

uint64_t SFPlatformValue<A>.init(userDefaultsString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v30 = a5;
  v9 = sub_1A2AE39F4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v29 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v29 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v22 = type metadata accessor for SFPlatformValue(0, a3, v20, v21);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v30, 1, 1, v22);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v24(v19, v13, a3);
    v24(v17, v19, a3);
    v25 = v30;
    v24(v30, v17, a3);
    v28 = type metadata accessor for SFPlatformValue(0, a3, v26, v27);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v25, 0, 1, v28);
  }
}

uint64_t type metadata accessor for SFVariantValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SFVariantValue);
}

uint64_t sub_1A2A022B4(uint64_t a1, uint64_t a2)
{
  return SFVariantValue<A>.userDefaultsRepresentation.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1A2A022BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SFVariantValue<A>.init(userDefaultsString:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t SFPlatformValue<A>.userDefaultsRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1A2A022D4(uint64_t a1, uint64_t a2)
{
  return SFPlatformValue<A>.userDefaultsRepresentation.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1A2A022DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return SFPlatformValue<A>.init(userDefaultsString:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_1A2A022F8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A2A02364(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1A2A023D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1A2A023E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1A2A02414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1A2A02444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1A2A02474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1A2A024A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1A2A02554 + 4 * byte_1A2B00448[(v7 - 1)]))();
}

void sub_1A2A025A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void SFAirDropReceive.ItemDestination.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = sub_1A2AE2EE4();
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67BB88);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v4 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v4);
  sub_1A2A042A8(v0, (uint64_t)&v7 - v5);
  v6 = (char *)sub_1A2A02888 + 4 * byte_1A2B00550[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A02888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1A2AE2F44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
}

void SFAirDropReceive.ItemDestination.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_1A2AE2F44();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for SFAirDropReceive.ItemDestination();
  MEMORY[0x1E0C80A78](v2);
  sub_1A2A042A8(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_1A2A02A44 + 4 * byte_1A2B00555[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A02A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  sub_1A296E8A4((unint64_t *)&qword_1EE67BC50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
  v4 = sub_1A2AE3E5C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v4;
}

void SFAirDropReceive.ItemDestination.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_1A2AE2F44();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for SFAirDropReceive.ItemDestination();
  MEMORY[0x1E0C80A78](v2);
  sub_1A2A042A8(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_1A2A02BC0 + 4 * byte_1A2B0055A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A02BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  sub_1A2AE4018();
  sub_1A296E8A4(&qword_1EE67C6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1A2AE3394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t sub_1A2A02CDC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A02D0C + 4 * byte_1A2B0055F[*v0]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_1A2A02D0C()
{
  return 0x52556D6F74737563;
}

uint64_t sub_1A2A02D28()
{
  return 0x70416D6F74737563;
}

uint64_t sub_1A2A02D48()
{
  return 0x6D6574496F6ELL;
}

uint64_t sub_1A2A02D5C()
{
  return 0x617461646174656DLL;
}

uint64_t sub_1A2A02D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A05098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A02D98()
{
  sub_1A2A04328();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02DC0()
{
  sub_1A2A04328();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A02DE8()
{
  return 0x4449656C646E7562;
}

uint64_t sub_1A2A02E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2A02E94()
{
  sub_1A2A043F4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02EBC()
{
  sub_1A2A043F4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A02EE4()
{
  sub_1A2A04438();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02F0C()
{
  sub_1A2A04438();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A02F34()
{
  sub_1A2A0447C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02F5C()
{
  sub_1A2A0447C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A02F84()
{
  sub_1A2A0436C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02FAC()
{
  sub_1A2A0436C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A02FD4()
{
  sub_1A2A043B0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A02FFC()
{
  sub_1A2A043B0();
  return sub_1A2AE4108();
}

void SFAirDropReceive.ItemDestination.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C6E8);
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  MEMORY[0x1E0C80A78](v2);
  v22 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C6F0);
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v14[5] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C6F8);
  v17 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v14[4] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C700);
  v16 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v14[3] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A2AE2F44();
  v14[2] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v14[1] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C708);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for SFAirDropReceive.ItemDestination();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C710);
  v25 = *(_QWORD *)(v12 - 8);
  v26 = v12;
  MEMORY[0x1E0C80A78](v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A04328();
  sub_1A2AE40E4();
  sub_1A2A042A8(v27, (uint64_t)v11);
  v13 = (char *)sub_1A2A032B8 + 4 * byte_1A2B00564[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A032B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v2 - 248);
  v3 = *(_QWORD *)(v2 - 240);
  v5 = *(_QWORD *)(v2 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v0, v5);
  *(_BYTE *)(v2 - 104) = 1;
  sub_1A2A04438();
  v6 = *(_QWORD *)(v2 - 232);
  v7 = *(_QWORD *)(v2 - 120);
  sub_1A2AE3DB4();
  sub_1A296E8A4(&qword_1EE67B530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
  v8 = *(_QWORD *)(v2 - 176);
  sub_1A2AE3E2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v7);
}

uint64_t SFAirDropReceive.ItemDestination.hashValue.getter()
{
  sub_1A2AE400C();
  SFAirDropReceive.ItemDestination.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t SFAirDropReceive.ItemDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v51 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C748);
  v39 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C750);
  v35 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v42 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C758);
  v38 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v43 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C760);
  v33[4] = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v48 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C768);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  MEMORY[0x1E0C80A78](v7);
  v40 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C770);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v33 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v33 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v33 - v22;
  v24 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_1A2A04328();
  v50 = v11;
  v25 = v53;
  sub_1A2AE40C0();
  if (!v25)
  {
    v33[0] = v18;
    v33[2] = v21;
    v33[1] = v15;
    v33[3] = v23;
    v53 = 0;
    v26 = v50;
    v27 = v47;
    v28 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X10 }
    v29 = sub_1A2AE3B5C();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v31 = v12;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x1E0DEC450], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v27);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v52);
}

uint64_t sub_1A2A03E1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.ItemDestination.init(from:)(a1, a2);
}

void sub_1A2A03E30(_QWORD *a1)
{
  SFAirDropReceive.ItemDestination.encode(to:)(a1);
}

uint64_t sub_1A2A03E44()
{
  sub_1A2AE400C();
  SFAirDropReceive.ItemDestination.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t sub_1A2A03E84()
{
  sub_1A2AE400C();
  SFAirDropReceive.ItemDestination.hash(into:)();
  return sub_1A2AE4030();
}

void _s7Sharing16SFAirDropReceiveO15ItemDestinationO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = sub_1A2AE2F44();
  MEMORY[0x1E0C80A78](v13);
  v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C7F8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 + *(int *)(v8 + 48) - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2A042A8(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A2A042A8(a2, (uint64_t)v10);
  v11 = (char *)sub_1A2A04014 + 4 * byte_1A2B0056E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A04014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_1A2A042A8(v0, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v4, *(_QWORD *)(v5 - 88));
    sub_1A2A052BC(v0);
    v6 = 0;
  }
  else
  {
    v7 = v3;
    v8 = *(_QWORD *)(v5 - 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v7, v8);
    v6 = MEMORY[0x1A85865BC](v4, v2);
    v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v9(v2, v8);
    v9(v4, v8);
    sub_1A2A042EC(v0);
  }
  return v6 & 1;
}

uint64_t type metadata accessor for SFAirDropReceive.ItemDestination()
{
  uint64_t result;

  result = qword_1EE674798;
  if (!qword_1EE674798)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A2A042A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A2A042EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1A2A04328()
{
  unint64_t result;

  result = qword_1EE67C718;
  if (!qword_1EE67C718)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00C74, &_s15ItemDestinationO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C718);
  }
  return result;
}

unint64_t sub_1A2A0436C()
{
  unint64_t result;

  result = qword_1EE67C720;
  if (!qword_1EE67C720)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00C24, &_s15ItemDestinationO18MetadataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C720);
  }
  return result;
}

unint64_t sub_1A2A043B0()
{
  unint64_t result;

  result = qword_1EE67C728;
  if (!qword_1EE67C728)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00BD4, &_s15ItemDestinationO16NoItemCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C728);
  }
  return result;
}

unint64_t sub_1A2A043F4()
{
  unint64_t result;

  result = qword_1EE67C730;
  if (!qword_1EE67C730)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00B84, &_s15ItemDestinationO19CustomAppCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C730);
  }
  return result;
}

unint64_t sub_1A2A04438()
{
  unint64_t result;

  result = qword_1EE67C738;
  if (!qword_1EE67C738)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00B34, &_s15ItemDestinationO19CustomURLCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C738);
  }
  return result;
}

unint64_t sub_1A2A0447C()
{
  unint64_t result;

  result = qword_1EE67C740;
  if (!qword_1EE67C740)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00AE4, &_s15ItemDestinationO17DefaultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C740);
  }
  return result;
}

uint64_t sub_1A2A044C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A2A04504()
{
  return sub_1A296E8A4(&qword_1EE674788, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
}

uint64_t *_s15ItemDestinationOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v11 = a2[1];
        if (v11 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v12 = *a2;
          sub_1A2973524(v12, v11);
          *a1 = v12;
          a1[1] = v11;
        }
        goto LABEL_12;
      case 1:
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0:
        v8 = sub_1A2AE2F44();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t _s15ItemDestinationOwxx(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v4 = a1[1];
      if (v4 >> 60 != 15)
        return sub_1A29736C4(*a1, v4);
      break;
    case 1:
      return swift_bridgeObjectRelease();
    case 0:
      v3 = sub_1A2AE2F44();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t *_s15ItemDestinationOwcp(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v9 = a2[1];
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v10 = *a2;
        sub_1A2973524(v10, v9);
        *a1 = v10;
        a1[1] = v9;
      }
      goto LABEL_10;
    case 1:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 0:
      v7 = sub_1A2AE2F44();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t *_s15ItemDestinationOwca(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1A2A042EC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v8 = a2[1];
        if (v8 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v9 = *a2;
          sub_1A2973524(v9, v8);
          *a1 = v9;
          a1[1] = v8;
        }
        goto LABEL_11;
      case 1:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 0:
        v7 = sub_1A2AE2F44();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_11:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *_s15ItemDestinationOwtk(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1A2AE2F44();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s15ItemDestinationOwta(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A2A042EC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1A2AE2F44();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A2A049F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE2F44();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s15ItemDestinationO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A2A04AB8 + 4 * byte_1A2B00578[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A2A04AEC + 4 * byte_1A2B00573[v4]))();
}

uint64_t sub_1A2A04AEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A04AF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A04AFCLL);
  return result;
}

uint64_t sub_1A2A04B08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A04B10);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A2A04B14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A04B1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15ItemDestinationO10CodingKeysOMa()
{
  return &_s15ItemDestinationO10CodingKeysON;
}

ValueMetadata *_s15ItemDestinationO17DefaultCodingKeysOMa()
{
  return &_s15ItemDestinationO17DefaultCodingKeysON;
}

ValueMetadata *_s15ItemDestinationO19CustomURLCodingKeysOMa()
{
  return &_s15ItemDestinationO19CustomURLCodingKeysON;
}

ValueMetadata *_s15ItemDestinationO19CustomAppCodingKeysOMa()
{
  return &_s15ItemDestinationO19CustomAppCodingKeysON;
}

ValueMetadata *_s15ItemDestinationO16NoItemCodingKeysOMa()
{
  return &_s15ItemDestinationO16NoItemCodingKeysON;
}

uint64_t _s15ItemDestinationO19CustomURLCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A04BBC + 4 * byte_1A2B0057D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A04BDC + 4 * byte_1A2B00582[v4]))();
}

_BYTE *sub_1A2A04BBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A04BDC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A04BE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A04BEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A04BF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A04BFC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s15ItemDestinationO18MetadataCodingKeysOMa()
{
  return &_s15ItemDestinationO18MetadataCodingKeysON;
}

unint64_t sub_1A2A04C1C()
{
  unint64_t result;

  result = qword_1EE67C778;
  if (!qword_1EE67C778)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B007F4, &_s15ItemDestinationO18MetadataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C778);
  }
  return result;
}

unint64_t sub_1A2A04C64()
{
  unint64_t result;

  result = qword_1EE67C780;
  if (!qword_1EE67C780)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B008FC, &_s15ItemDestinationO19CustomAppCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C780);
  }
  return result;
}

unint64_t sub_1A2A04CAC()
{
  unint64_t result;

  result = qword_1EE67C788;
  if (!qword_1EE67C788)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B009B4, &_s15ItemDestinationO19CustomURLCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C788);
  }
  return result;
}

unint64_t sub_1A2A04CF4()
{
  unint64_t result;

  result = qword_1EE67C790;
  if (!qword_1EE67C790)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00ABC, &_s15ItemDestinationO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C790);
  }
  return result;
}

unint64_t sub_1A2A04D3C()
{
  unint64_t result;

  result = qword_1EE67C798;
  if (!qword_1EE67C798)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B009DC, &_s15ItemDestinationO17DefaultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C798);
  }
  return result;
}

unint64_t sub_1A2A04D84()
{
  unint64_t result;

  result = qword_1EE67C7A0;
  if (!qword_1EE67C7A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00A04, &_s15ItemDestinationO17DefaultCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7A0);
  }
  return result;
}

unint64_t sub_1A2A04DCC()
{
  unint64_t result;

  result = qword_1EE67C7A8;
  if (!qword_1EE67C7A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00924, &_s15ItemDestinationO19CustomURLCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7A8);
  }
  return result;
}

unint64_t sub_1A2A04E14()
{
  unint64_t result;

  result = qword_1EE67C7B0;
  if (!qword_1EE67C7B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0094C, &_s15ItemDestinationO19CustomURLCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7B0);
  }
  return result;
}

unint64_t sub_1A2A04E5C()
{
  unint64_t result;

  result = qword_1EE67C7B8;
  if (!qword_1EE67C7B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0086C, &_s15ItemDestinationO19CustomAppCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7B8);
  }
  return result;
}

unint64_t sub_1A2A04EA4()
{
  unint64_t result;

  result = qword_1EE67C7C0;
  if (!qword_1EE67C7C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00894, &_s15ItemDestinationO19CustomAppCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7C0);
  }
  return result;
}

unint64_t sub_1A2A04EEC()
{
  unint64_t result;

  result = qword_1EE67C7C8;
  if (!qword_1EE67C7C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0081C, &_s15ItemDestinationO16NoItemCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7C8);
  }
  return result;
}

unint64_t sub_1A2A04F34()
{
  unint64_t result;

  result = qword_1EE67C7D0;
  if (!qword_1EE67C7D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00844, &_s15ItemDestinationO16NoItemCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7D0);
  }
  return result;
}

unint64_t sub_1A2A04F7C()
{
  unint64_t result;

  result = qword_1EE67C7D8;
  if (!qword_1EE67C7D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00764, &_s15ItemDestinationO18MetadataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7D8);
  }
  return result;
}

unint64_t sub_1A2A04FC4()
{
  unint64_t result;

  result = qword_1EE67C7E0;
  if (!qword_1EE67C7E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0078C, &_s15ItemDestinationO18MetadataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7E0);
  }
  return result;
}

unint64_t sub_1A2A0500C()
{
  unint64_t result;

  result = qword_1EE67C7E8;
  if (!qword_1EE67C7E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00A2C, &_s15ItemDestinationO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7E8);
  }
  return result;
}

unint64_t sub_1A2A05054()
{
  unint64_t result;

  result = qword_1EE67C7F0;
  if (!qword_1EE67C7F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00A54, &_s15ItemDestinationO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C7F0);
  }
  return result;
}

uint64_t sub_1A2A05098(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x52556D6F74737563 && a2 == 0xE90000000000004CLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x70416D6F74737563 && a2 == 0xE900000000000070 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D6574496F6ELL && a2 == 0xE600000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A2A052BC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C7F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A2A052FC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A2A05340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2A0ACEC(a1, (uint64_t)v9);
  v10 = sub_1A2AE36E8();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1A2A0A8FC((uint64_t)v9);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_1A2AE3688();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1A2AE36DC();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

void sub_1A2A054C0()
{
  type metadata accessor for CombineLatestStateMachine();
}

uint64_t sub_1A2A0567C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_1A2A0569C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  *v1 = v0;
  v1[1] = sub_1A2A057B4;
  return sub_1A2AE3EEC();
}

uint64_t sub_1A2A057B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A05820()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A0582C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v3 = sub_1A2AE4084();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A05954()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE67C818 + dword_1EE67C818);
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = v1;
  *v1 = v0;
  v1[1] = sub_1A2A059C8;
  return v3(v0[6], 0, 0, (uint64_t)sub_1A2A0A520, v0[3]);
}

uint64_t sub_1A2A059C8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A05A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = MEMORY[0x1A85895EC](&unk_1A2AFF9B8, v3);
  sub_1A29F1498(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A05AAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[20];

  v13[6] = a2;
  v13[7] = a1;
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  swift_getAssociatedTypeWitness();
  v5 = v2[14];
  v6 = v2[11];
  swift_getAssociatedTypeWitness();
  v7 = v2[15];
  v8 = v2[12];
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  v13[1] = swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v9 = sub_1A2AE4084();
  v13[4] = *(_QWORD *)(v9 - 8);
  v13[5] = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v13[2] = (char *)v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13[3] = (char *)v13 - v12;
  v13[13] = v4;
  v13[14] = v6;
  v13[15] = v8;
  v13[16] = v3;
  v13[17] = v5;
  v13[18] = v7;
  type metadata accessor for CombineLatestStateMachine.NextAction();
}

void sub_1A2A05EA0()
{
  sub_1A2AE3C58();
  __break(1u);
}

void sub_1A2A05EF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[26];

  v17[16] = a1;
  v17[25] = a2;
  v17[14] = a4;
  v17[7] = a3;
  v4 = *(_QWORD **)a3;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 96);
  v6 = sub_1A2AE39F4();
  v17[5] = *(_QWORD *)(v6 - 8);
  v17[6] = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v17[4] = (char *)v17 - v8;
  v9 = v4[11];
  v17[3] = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v17[2] = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v4[10];
  v17[9] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v10);
  v17[1] = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4[13];
  v15 = v4[14];
  v16 = v4[15];
  v17[17] = v12;
  v17[18] = v9;
  v17[19] = v5;
  v17[20] = v14;
  v17[21] = v15;
  v17[22] = v16;
  type metadata accessor for CombineLatestStateMachine.NextAction();
}

void sub_1A2A06000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v7 - 192) = v5;
  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 136) = v5;
  *(_QWORD *)(v7 - 128) = v2;
  *(_QWORD *)(v7 - 208) = v1;
  *(_QWORD *)(v7 - 120) = v1;
  *(_QWORD *)(v7 - 112) = v3;
  *(_QWORD *)(v7 - 104) = v4;
  *(_QWORD *)(v7 - 96) = v6;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A06074(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1A29D2EA0(*(_QWORD *)(v2 - 72), a1, v1);
}

uint64_t sub_1A2A06088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;

  *(_QWORD *)(v4 - 176) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v3, v1);
  *(_QWORD *)(v4 - 168) = v1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_1A2A060CC + 4 * byte_1A2B00CD4[EnumCaseMultiPayload]))();
}

void sub_1A2A060CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 - 192);
  v2 = *(_QWORD *)(v1 - 184);
  v4 = *(_QWORD *)(v1 - 224);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6 = v0 + *(int *)(TupleTypeMetadata3 + 48);
  *(_QWORD *)(v1 - 208) = v0 + *(int *)(TupleTypeMetadata3 + 64);
  v7 = *(_QWORD *)(v1 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 200) + 32))(v7, v0, v3);
  v8 = *(_QWORD *)(v1 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 248) + 32))(v8, v6, v2);
  v9 = *(_QWORD *)(v1 - 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 232) + 32))(v9, *(_QWORD *)(v1 - 208), v4);
  sub_1A2A0638C(*(_QWORD *)(v1 - 144), v7, v8, v9, *(_QWORD *)(v1 - 72));
}

uint64_t sub_1A2A06170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v4);
  (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v5, *(_QWORD *)(v8 - 184));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 8))(v3, v1);
  v10 = *(_QWORD *)(v8 - 176);
  v9 = *(_QWORD *)(v8 - 168);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v9);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 56))(*(_QWORD *)(v8 - 160), 1, 1, v9);
}

void sub_1A2A0638C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v47 = a1;
  v48 = a5;
  v43 = a3;
  v44 = a4;
  v42 = a2;
  v6 = *(_QWORD **)v5;
  v52 = *(_QWORD *)(*(_QWORD *)v5 + 96);
  v7 = sub_1A2AE39F4();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - v9;
  v41 = (char *)&v36 - v9;
  v11 = v6[11];
  v49 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  v12 = *(_QWORD *)(v49 + 64);
  v13 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v6[10];
  v14 = *(_QWORD *)(v38 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v39 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v18;
  v19 = sub_1A2AE36E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v38);
  v21 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v11);
  v22 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v10, v44, v51);
  v23 = (*(unsigned __int8 *)(v14 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v24 = (v15 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (*(unsigned __int8 *)(v21 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v26 = (v12 + *(unsigned __int8 *)(v22 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v27 = (char *)swift_allocObject();
  *((_QWORD *)v27 + 2) = 0;
  *((_QWORD *)v27 + 3) = 0;
  v28 = v20;
  *((_QWORD *)v27 + 4) = v20;
  v29 = v37;
  v30 = v52;
  *((_QWORD *)v27 + 5) = v37;
  *((_QWORD *)v27 + 6) = v30;
  v31 = v6[13];
  *((_QWORD *)v27 + 7) = v31;
  v32 = v6[14];
  *((_QWORD *)v27 + 8) = v32;
  v33 = v6[15];
  *((_QWORD *)v27 + 9) = v33;
  v34 = &v27[v23];
  v35 = v28;
  (*(void (**)(char *, char *))(v14 + 32))(v34, v39);
  *(_QWORD *)&v27[v24] = v46;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v27[v25], v40, v29);
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v27[v26], v41, v51);
  swift_retain();
  sub_1A2974504((uint64_t)v45, (uint64_t)&unk_1EE67C828, (uint64_t)v27);
  v53 = v35;
  v54 = v29;
  v55 = v52;
  v56 = v31;
  v57 = v32;
  v58 = v33;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A06630(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1A29CCCC8(v1, *(_QWORD *)(v2 - 176), a1);
}

uint64_t sub_1A2A06640()
{
  return swift_release();
}

uint64_t sub_1A2A06668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_1A2AE3688();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A066D0()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_1A2A0672C;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_1A2A0672C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

void sub_1A2A0676C()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v0 = sub_1A2AE4084();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CombineLatestStateMachine();
}

uint64_t sub_1A2A06B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A06BAC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_1A2A06C44;
  return sub_1A2AE3CDC();
}

uint64_t sub_1A2A06C44()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A06C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6[21] = a5;
  v6[22] = a6;
  v6[19] = a3;
  v6[20] = a4;
  v6[18] = a2;
  v7 = *(_QWORD **)a4;
  v6[23] = *(_QWORD *)(*(_QWORD *)a4 + 104);
  v8 = v7[10];
  v6[24] = v8;
  swift_getAssociatedTypeWitness();
  v6[25] = v7[14];
  v9 = v7[11];
  v6[26] = v9;
  swift_getAssociatedTypeWitness();
  v6[27] = v7[15];
  v10 = v7[12];
  v6[28] = v10;
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  v6[29] = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v11 = sub_1A2AE4084();
  v6[30] = v11;
  v6[31] = *(_QWORD *)(v11 - 8);
  v6[32] = swift_task_alloc();
  v12 = sub_1A2AE39F4();
  v6[33] = v12;
  v6[34] = *(_QWORD *)(v12 - 8);
  v6[35] = swift_task_alloc();
  v13 = *(_QWORD *)(v10 - 8);
  v6[36] = v13;
  v6[37] = *(_QWORD *)(v13 + 64);
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v14 = *(_QWORD *)(v9 - 8);
  v6[40] = v14;
  v6[41] = *(_QWORD *)(v14 + 64);
  v6[42] = swift_task_alloc();
  v15 = *(_QWORD *)(v8 - 8);
  v6[43] = v15;
  v6[44] = *(_QWORD *)(v15 + 64);
  v6[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  v6[46] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A06EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v28 = v1;
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v34 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 328);
  v33 = *(_QWORD *)(v0 + 320);
  v37 = *(_QWORD *)(v0 + 272);
  v38 = *(_QWORD *)(v0 + 280);
  v40 = *(_QWORD *)(v0 + 264);
  v42 = *(_QWORD *)(v0 + 288);
  v46 = *(_QWORD *)(v0 + 216);
  v48 = *(_QWORD *)(v0 + 224);
  v30 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v44 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 176);
  v32 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 160);
  v8 = sub_1A2AE36E8();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v2, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v5);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = v5;
  *((_QWORD *)v11 + 5) = v30;
  *((_QWORD *)v11 + 6) = v48;
  *((_QWORD *)v11 + 7) = v6;
  *((_QWORD *)v11 + 8) = v44;
  *((_QWORD *)v11 + 9) = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v11[v10], v28, v5);
  *(_QWORD *)&v11[(v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
  swift_retain();
  sub_1A2A05340(v2, (uint64_t)&unk_1EE67C848, (uint64_t)v11);
  sub_1A2A0A8FC(v2);
  v27 = v9;
  v29 = v8;
  v9(v2, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v34, v32, v30);
  v12 = (*(unsigned __int8 *)(v33 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = v5;
  *((_QWORD *)v13 + 5) = v30;
  *((_QWORD *)v13 + 6) = v48;
  *((_QWORD *)v13 + 7) = v6;
  *((_QWORD *)v13 + 8) = v44;
  *((_QWORD *)v13 + 9) = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(&v13[v12], v34, v30);
  *(_QWORD *)&v13[(v35 + v12 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
  swift_retain();
  sub_1A2A05340(v2, (uint64_t)&unk_1EE67C858, (uint64_t)v13);
  sub_1A2A0A8FC(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v38, v36, v40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v38, 1, v48) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 368);
    v15 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 312);
    v39 = v15;
    v18 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 296);
    v19 = *(_QWORD *)(v0 + 224);
    v45 = *(_QWORD *)(v0 + 208);
    v47 = *(_QWORD *)(v0 + 200);
    v49 = *(_QWORD *)(v0 + 216);
    v41 = *(_QWORD *)(v0 + 192);
    v43 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
    v21(v16, *(_QWORD *)(v0 + 280), v19);
    v27(v14, 1, 1, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v19);
    v22 = (*(unsigned __int8 *)(v18 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v23 = (v17 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v41;
    v24[5] = v45;
    v24[6] = v19;
    v24[7] = v43;
    v24[8] = v47;
    v24[9] = v49;
    v21((uint64_t)v24 + v22, v39, v19);
    *(_QWORD *)((char *)v24 + v23) = v20;
    swift_retain();
    sub_1A2A05340(v14, (uint64_t)&unk_1EE67C868, (uint64_t)v24);
    sub_1A2A0A8FC(v14);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
  }
  if ((sub_1A2AE37A8() & 1) != 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675120);
    *v26 = v0;
    v26[1] = sub_1A2A0734C;
    return sub_1A2AE379C();
  }
}

uint64_t sub_1A2A0734C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A073B0()
{
  uint64_t v0;
  _QWORD *v2;

  if ((sub_1A2AE37A8() & 1) != 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675120);
    *v2 = v0;
    v2[1] = sub_1A2A0734C;
    return sub_1A2AE379C();
  }
}

void sub_1A2A074C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[48];
  v3 = v0[27];
  v2 = v0[28];
  v5 = v0[25];
  v4 = v0[26];
  v6 = v0[23];
  v7 = v0[24];
  v8 = (_QWORD *)swift_task_alloc();
  v8[2] = v7;
  v8[3] = v4;
  v8[4] = v2;
  v8[5] = v6;
  v8[6] = v5;
  v8[7] = v3;
  v8[8] = v1;
  v0[2] = v7;
  v0[3] = v4;
  v0[4] = v2;
  v0[5] = v6;
  v0[6] = v5;
  v0[7] = v3;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A07944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[37] = a4;
  v5[38] = a5;
  v6 = *(_QWORD **)a5;
  v14 = *(_QWORD *)(*(_QWORD *)a5 + 104);
  v5[39] = v14;
  v7 = v6[10];
  v5[40] = v7;
  v5[41] = swift_getAssociatedTypeWitness();
  v8 = v6[14];
  v5[42] = v8;
  v9 = v6[11];
  v5[43] = v9;
  swift_getAssociatedTypeWitness();
  v10 = v6[15];
  v5[44] = v10;
  v11 = v6[12];
  v5[45] = v11;
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  v5[46] = swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  v5[47] = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v12 = sub_1A2AE4084();
  v5[48] = v12;
  v5[49] = *(_QWORD *)(v12 - 8);
  v5[50] = swift_task_alloc();
  v13 = swift_task_alloc();
  v5[10] = v7;
  v5[51] = v13;
  v5[11] = v9;
  v5[12] = v11;
  v5[13] = v14;
  v5[14] = v8;
  v5[15] = v10;
  type metadata accessor for CombineLatestStateMachine.ElementProducedAction();
}

uint64_t sub_1A2A07AB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v2[52] = a1;
  v4 = sub_1A2AE39F4();
  v2[53] = v4;
  v2[54] = *(_QWORD *)(v4 - 8);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v5 = sub_1A2AE39F4();
  v2[57] = v5;
  v2[58] = *(_QWORD *)(v5 - 8);
  v2[59] = swift_task_alloc();
  v2[60] = *(_QWORD *)(v3 - 8);
  v2[61] = swift_task_alloc();
  v2[62] = *(_QWORD *)(v1 - 8);
  v2[63] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[64] = AssociatedTypeWitness;
  v2[65] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2[66] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A07BCC()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[62] + 16))(v0[63], v0[37], v0[40]);
  sub_1A2AE37CC();
  return swift_task_switch();
}

void sub_1A2A07C3C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A2A07C94;
  swift_continuation_init();
  sub_1A2A091BC();
}

uint64_t sub_1A2A07C80()
{
  return swift_continuation_await();
}

uint64_t sub_1A2A07C94()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = (_QWORD *)*v0;
  v2 = v1[6];
  v1[67] = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    v4 = (_QWORD *)swift_task_alloc();
    v1[68] = v4;
    *v4 = v1;
    v4[1] = sub_1A2A07D6C;
    return sub_1A2AE36C4();
  }
}

uint64_t sub_1A2A07D6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1A2A07DD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[59];
  v2 = v0[60];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48))(v1, 1, v0[41]) == 1)
  {
    v4 = v0[44];
    v3 = v0[45];
    v5 = v0[42];
    v6 = v0[43];
    v8 = v0[39];
    v7 = v0[40];
    (*(void (**)(uint64_t, _QWORD))(v0[58] + 8))(v1, v0[57]);
    v9 = (_QWORD *)swift_task_alloc();
    v9[2] = v7;
    v9[3] = v6;
    v9[4] = v3;
    v9[5] = v8;
    v9[6] = v5;
    v9[7] = v4;
    v0[16] = v7;
    v0[17] = v6;
    v0[18] = v3;
    v0[19] = v8;
    v0[20] = v5;
    v0[21] = v4;
    type metadata accessor for CombineLatestStateMachine();
  }
  v10 = v0[45];
  v18 = v0[44];
  v12 = v0[42];
  v11 = v0[43];
  v14 = v0[39];
  v13 = v0[40];
  v15 = *(void (**)(void))(v2 + 32);
  v16 = v0[61];
  v15();
  v17 = (_QWORD *)swift_task_alloc();
  v17[2] = v13;
  v17[3] = v11;
  v17[4] = v10;
  v17[5] = v14;
  v17[6] = v12;
  v17[7] = v18;
  v17[8] = v16;
  v0[28] = v13;
  v0[29] = v11;
  v0[30] = v10;
  v0[31] = v14;
  v0[32] = v12;
  v0[33] = v18;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A083A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v30 = a5;
  v31 = a8;
  v25 = a4;
  v26 = a7;
  v23 = a3;
  v24 = a6;
  v27 = a2;
  v34 = a9;
  v35 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1A2AE39F4();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - v11;
  v13 = swift_getAssociatedTypeWitness();
  v14 = sub_1A2AE39F4();
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - v15;
  v17 = swift_getAssociatedTypeWitness();
  v18 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v22 - v19;
  v21 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v22 - v19, v27, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v16, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  v36 = v23;
  v37 = v25;
  v38 = v30;
  v39 = v24;
  v40 = v26;
  v41 = v31;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0858C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A29CDDA4(v3, v2, v1, a1, *(_QWORD *)(v4 - 144));
}

uint64_t sub_1A2A085A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 8))(v0, *(_QWORD *)(v5 - 152));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 192) + 8))(v2, *(_QWORD *)(v5 - 184));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v3);
}

void sub_1A2A085F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[37] = a4;
  v5[38] = a5;
  v6 = *(_QWORD **)a5;
  v7 = *(_QWORD *)(*(_QWORD *)a5 + 104);
  v5[39] = v7;
  v8 = v6[10];
  v5[40] = v8;
  swift_getAssociatedTypeWitness();
  v14 = v6[14];
  v5[41] = v14;
  v9 = v6[11];
  v5[42] = v9;
  v5[43] = swift_getAssociatedTypeWitness();
  v10 = v6[15];
  v5[44] = v10;
  v11 = v6[12];
  v5[45] = v11;
  swift_getAssociatedTypeWitness();
  sub_1A2AE39F4();
  v5[46] = swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  v5[47] = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v12 = sub_1A2AE4084();
  v5[48] = v12;
  v5[49] = *(_QWORD *)(v12 - 8);
  v5[50] = swift_task_alloc();
  v13 = swift_task_alloc();
  v5[10] = v8;
  v5[51] = v13;
  v5[11] = v9;
  v5[12] = v11;
  v5[13] = v7;
  v5[14] = v14;
  v5[15] = v10;
  type metadata accessor for CombineLatestStateMachine.ElementProducedAction();
}

uint64_t sub_1A2A0876C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3[52] = a1;
  v4 = sub_1A2AE39F4();
  v3[53] = v4;
  v3[54] = *(_QWORD *)(v4 - 8);
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  v5 = sub_1A2AE39F4();
  v3[57] = v5;
  v3[58] = *(_QWORD *)(v5 - 8);
  v3[59] = swift_task_alloc();
  v3[60] = *(_QWORD *)(v1 - 8);
  v3[61] = swift_task_alloc();
  v3[62] = *(_QWORD *)(v2 - 8);
  v3[63] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[64] = AssociatedTypeWitness;
  v3[65] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[66] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A08880()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[62] + 16))(v0[63], v0[37], v0[42]);
  sub_1A2AE37CC();
  return swift_task_switch();
}

void sub_1A2A088F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A2A08948;
  swift_continuation_init();
  sub_1A2A091BC();
}

uint64_t sub_1A2A08934()
{
  return swift_continuation_await();
}

uint64_t sub_1A2A08948()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = (_QWORD *)*v0;
  v2 = v1[6];
  v1[67] = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    v4 = (_QWORD *)swift_task_alloc();
    v1[68] = v4;
    *v4 = v1;
    v4[1] = sub_1A2A08A20;
    return sub_1A2AE36C4();
  }
}

uint64_t sub_1A2A08A20()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A08A84()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 512));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A08B38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[59];
  v2 = v0[60];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48))(v1, 1, v0[43]) == 1)
  {
    v4 = v0[44];
    v3 = v0[45];
    v5 = v0[41];
    v6 = v0[42];
    v8 = v0[39];
    v7 = v0[40];
    (*(void (**)(uint64_t, _QWORD))(v0[58] + 8))(v1, v0[57]);
    v9 = (_QWORD *)swift_task_alloc();
    v9[2] = v7;
    v9[3] = v6;
    v9[4] = v3;
    v9[5] = v8;
    v9[6] = v5;
    v9[7] = v4;
    v0[16] = v7;
    v0[17] = v6;
    v0[18] = v3;
    v0[19] = v8;
    v0[20] = v5;
    v0[21] = v4;
    type metadata accessor for CombineLatestStateMachine();
  }
  v10 = v0[45];
  v18 = v0[44];
  v12 = v0[41];
  v11 = v0[42];
  v14 = v0[39];
  v13 = v0[40];
  v15 = *(void (**)(void))(v2 + 32);
  v16 = v0[61];
  v15();
  v17 = (_QWORD *)swift_task_alloc();
  v17[2] = v13;
  v17[3] = v11;
  v17[4] = v10;
  v17[5] = v14;
  v17[6] = v12;
  v17[7] = v18;
  v17[8] = v16;
  v0[28] = v13;
  v0[29] = v11;
  v0[30] = v10;
  v0[31] = v14;
  v0[32] = v12;
  v0[33] = v18;
  type metadata accessor for CombineLatestStateMachine();
}

uint64_t sub_1A2A09108()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 512));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A091BC()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0921C()
{
  type metadata accessor for CombineLatestStateMachine.ChildTaskSuspendedAction();
}

void sub_1A2A09238()
{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1A2AE39F4();
  sub_1A2A0C1EC(v0, (uint64_t)&v5, v1);
  v2 = v6;
  v3 = v7;
  if ((~v6 & 0xF00000000000000FLL) != 0 || (v7 & 0xF000000000000007) != 0xF000000000000007)
  {
    if (v7 < 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      swift_allocError();
      *v4 = v3 & 0x7FFFFFFFFFFFFFFFLL;
      swift_continuation_throwingResumeWithError();
    }
    else
    {
      swift_continuation_throwingResume();
      sub_1A2A0AC7C(v2, v3);
    }
  }
}

void sub_1A2A092F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v28 = a5;
  v29 = a8;
  v23 = a4;
  v24 = a7;
  v22 = a6;
  v26 = a2;
  v32 = a9;
  v33 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_1A2AE39F4();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - v12;
  v14 = swift_getAssociatedTypeWitness();
  v27 = sub_1A2AE39F4();
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v16 = (char *)&v22 - v15;
  v17 = a3;
  v18 = swift_getAssociatedTypeWitness();
  v19 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))((char *)&v22 - v20, 1, 1, v18);
  v21 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, v26, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1, AssociatedTypeWitness);
  v34 = v17;
  v35 = v23;
  v36 = v28;
  v37 = v22;
  v38 = v24;
  v39 = v29;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A094E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A29CDDA4(v3, v2, v1, a1, *(_QWORD *)(v4 - 144));
}

uint64_t sub_1A2A09500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 8))(v0, *(_QWORD *)(v5 - 152));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 200) + 8))(v2, *(_QWORD *)(v5 - 184));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v3);
}

void sub_1A2A09558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[37] = a4;
  v5[38] = a5;
  v6 = *(_QWORD **)a5;
  v7 = *(_QWORD *)(*(_QWORD *)a5 + 104);
  v5[39] = v7;
  v8 = v6[10];
  v5[40] = v8;
  swift_getAssociatedTypeWitness();
  v9 = v6[14];
  v5[41] = v9;
  v10 = v6[11];
  v5[42] = v10;
  swift_getAssociatedTypeWitness();
  v14 = v6[15];
  v5[43] = v14;
  v11 = v6[12];
  v5[44] = v11;
  v5[45] = swift_getAssociatedTypeWitness();
  v5[46] = sub_1A2AE39F4();
  v5[47] = swift_getTupleTypeMetadata3();
  sub_1A2AE39F4();
  v5[48] = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  v12 = sub_1A2AE4084();
  v5[49] = v12;
  v5[50] = *(_QWORD *)(v12 - 8);
  v5[51] = swift_task_alloc();
  v13 = swift_task_alloc();
  v5[10] = v8;
  v5[52] = v13;
  v5[11] = v10;
  v5[12] = v11;
  v5[13] = v7;
  v5[14] = v9;
  v5[15] = v14;
  type metadata accessor for CombineLatestStateMachine.ElementProducedAction();
}

uint64_t sub_1A2A096D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v2[53] = a1;
  v5 = sub_1A2AE39F4();
  v2[54] = v5;
  v2[55] = *(_QWORD *)(v5 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = *(_QWORD *)(v4 - 8);
  v2[59] = swift_task_alloc();
  v2[60] = *(_QWORD *)(v3 - 8);
  v2[61] = swift_task_alloc();
  v2[62] = *(_QWORD *)(v1 - 8);
  v2[63] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[64] = AssociatedTypeWitness;
  v2[65] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2[66] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A097DC()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[62] + 16))(v0[63], v0[37], v0[44]);
  sub_1A2AE37CC();
  return swift_task_switch();
}

void sub_1A2A0984C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1A2A098A4;
  swift_continuation_init();
  sub_1A2A091BC();
}

uint64_t sub_1A2A09890()
{
  return swift_continuation_await();
}

uint64_t sub_1A2A098A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = (_QWORD *)*v0;
  v2 = v1[6];
  v1[67] = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    v4 = (_QWORD *)swift_task_alloc();
    v1[68] = v4;
    *v4 = v1;
    v4[1] = sub_1A2A0997C;
    return sub_1A2AE36C4();
  }
}

uint64_t sub_1A2A0997C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A099E0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 512));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A09A94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[59];
  v2 = v0[60];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48))(v1, 1, v0[45]) == 1)
  {
    v4 = v0[43];
    v3 = v0[44];
    v5 = v0[41];
    v6 = v0[42];
    v8 = v0[39];
    v7 = v0[40];
    (*(void (**)(uint64_t, _QWORD))(v0[58] + 8))(v1, v0[46]);
    v9 = (_QWORD *)swift_task_alloc();
    v9[2] = v7;
    v9[3] = v6;
    v9[4] = v3;
    v9[5] = v8;
    v9[6] = v5;
    v9[7] = v4;
    v0[16] = v7;
    v0[17] = v6;
    v0[18] = v3;
    v0[19] = v8;
    v0[20] = v5;
    v0[21] = v4;
    type metadata accessor for CombineLatestStateMachine();
  }
  v10 = v0[44];
  v18 = v0[43];
  v12 = v0[41];
  v11 = v0[42];
  v14 = v0[39];
  v13 = v0[40];
  v15 = *(void (**)(void))(v2 + 32);
  v16 = v0[61];
  v15();
  v17 = (_QWORD *)swift_task_alloc();
  v17[2] = v13;
  v17[3] = v11;
  v17[4] = v10;
  v17[5] = v14;
  v17[6] = v12;
  v17[7] = v18;
  v17[8] = v16;
  v0[28] = v13;
  v0[29] = v11;
  v0[30] = v10;
  v0[31] = v14;
  v0[32] = v12;
  v0[33] = v18;
  type metadata accessor for CombineLatestStateMachine();
}

uint64_t sub_1A2A0A068()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 512));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A0A11C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v29 = a5;
  v30 = a8;
  v24 = a4;
  v25 = a7;
  v23 = a6;
  v28 = a2;
  v33 = a9;
  v34 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_1A2AE39F4();
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - v12;
  v14 = swift_getAssociatedTypeWitness();
  v15 = sub_1A2AE39F4();
  v26 = *(_QWORD *)(v15 - 8);
  v27 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v23 - v16;
  v18 = a3;
  v19 = swift_getAssociatedTypeWitness();
  v20 = sub_1A2AE39F4();
  MEMORY[0x1E0C80A78](v20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))((char *)&v23 - v21, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v17, 1, 1, v14);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v28, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, AssociatedTypeWitness);
  v35 = v18;
  v36 = v24;
  v37 = v29;
  v38 = v23;
  v39 = v25;
  v40 = v30;
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0A308(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1A29CDDA4(v3, v2, v1, a1, *(_QWORD *)(v4 - 144));
}

uint64_t sub_1A2A0A320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 8))(v0, *(_QWORD *)(v5 - 152));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 200) + 8))(v2, *(_QWORD *)(v5 - 192));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v3);
}

uint64_t sub_1A2A0A374()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t _s7Sharing18AirDropUserDefaultCfD_0()
{
  swift_release();
  return swift_deallocClassInstance();
}

void type metadata accessor for CombineLatestStorage()
{
  JUMPOUT(0x1A8589544);
}

void sub_1A2A0A3C0()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0A3FC()
{
  sub_1A29CC50C();
}

uint64_t sub_1A2A0A404(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t sub_1A2A0A420(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A2A0A44C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A2971EBC;
  return sub_1A2A0582C(a1, v1);
}

void sub_1A2A0A4A0()
{
  sub_1A2A0676C();
}

void sub_1A2A0A4A8()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0A4E4()
{
  sub_1A29D2104();
}

uint64_t sub_1A2A0A4EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t sub_1A2A0A50C(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1A29D9ED0();
  return result;
}

void sub_1A2A0A520(uint64_t a1)
{
  uint64_t v1;

  sub_1A2A05AAC(a1, v1);
}

void sub_1A2A0A528(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1A2A05EF4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1A2A0A540()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *((_QWORD *)v0 + 4);
  v12 = *((_QWORD *)v0 + 5);
  v2 = *((_QWORD *)v0 + 6);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v12 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_1A2AE39F4() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v4], v1);
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v6], v12);
  v10 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&v0[v9], 1, v2))
    (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v9], v2);
  return swift_deallocObject();
}

uint64_t sub_1A2A0A670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 32) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 40) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A2AE39F4() - 8) + 80);
  v11 = v8 + v9 + v10;
  v12 = v1 + v5;
  v13 = *(_QWORD *)(v1 + v6);
  v14 = v1 + v8;
  v15 = v1 + (v11 & ~v10);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_1A2971EBC;
  v16[5] = v14;
  v16[6] = v15;
  v16[3] = v12;
  v16[4] = v13;
  v16[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A0A754(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_1A2972038;
  return sub_1A2A06C94(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1A2A0A7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1A2A0A85C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[3];
  v5 = *(_QWORD *)(v1[4] - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v1[2];
  v8 = (uint64_t)v1 + v6;
  v9 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1A2972038;
  sub_1A2A07944(a1, v7, v4, v8, v9);
}

uint64_t sub_1A2A0A8FC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A2A0A93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1A2A0A9C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1[5] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)v1 + v5;
  v9 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1A2972038;
  sub_1A2A085F8(a1, v6, v7, v8, v9);
}

void sub_1A2A0AA64()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0AAA8()
{
  sub_1A29D13C4();
}

uint64_t sub_1A2A0AAB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  *v4 = result;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t sub_1A2A0AADC(uint64_t a1, id a2, uint64_t a3)
{
  if ((~(a1 & a3) & 0xF000000000000007) != 0)
    return sub_1A29D6404(a1, a2, a3);
  return a1;
}

uint64_t sub_1A2A0AAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1A2A0AB7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1[6] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)v1 + v5;
  v9 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1A2972038;
  sub_1A2A09558(a1, v6, v7, v8, v9);
}

void sub_1A2A0AC1C()
{
  sub_1A2A0AD4C();
}

uint64_t sub_1A2A0AC34(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1A29D4130();
  return result;
}

uint64_t sub_1A2A0AC48(uint64_t a1)
{
  return sub_1A2A0ADE0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A2A0A11C);
}

void sub_1A2A0AC64()
{
  sub_1A2A0AE20();
}

void sub_1A2A0AC7C(uint64_t a1, uint64_t a2)
{
  if ((~a1 & 0xF00000000000000FLL) != 0 || (a2 & 0xF000000000000007) != 0xF000000000000007)
    sub_1A29D3F38(a1, a2);
}

void sub_1A2A0ACA0()
{
  sub_1A2A0AD4C();
}

uint64_t sub_1A2A0ACB8(uint64_t a1)
{
  return sub_1A2A0ADE0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A2A092F8);
}

void sub_1A2A0ACD4()
{
  sub_1A2A0AE20();
}

uint64_t sub_1A2A0ACEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1A2A0AD34()
{
  sub_1A2A0AD4C();
}

void sub_1A2A0AD4C()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0AD90(_QWORD *a1)
{
  uint64_t v1;

  sub_1A29D0290(v1, a1);
}

uint64_t sub_1A2A0ADA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t sub_1A2A0ADC4(uint64_t a1)
{
  return sub_1A2A0ADE0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A2A083A0);
}

uint64_t sub_1A2A0ADE0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[8], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

void sub_1A2A0AE08()
{
  sub_1A2A0AE20();
}

void sub_1A2A0AE20()
{
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0AE68()
{
  sub_1A29CD7CC();
}

uint64_t sub_1A2A0AE7C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_1A2A0AE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1A2AE39F4();
  v0 = MEMORY[0x1E0C80A78](v2);
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for CombineLatestStateMachine();
}

void sub_1A2A0AF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v10, *(_QWORD *)(v15 - 168), v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 184) + 16))(v13, *(_QWORD *)(v15 - 152), v12);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v15 - 176) + 16))(v9, *(_QWORD *)(v15 - 144), *(_QWORD *)(v15 - 160));
  sub_1A29CC364(v10, v13, v9, v14, v12, (uint64_t)v17);
}

uint64_t sub_1A2A0B030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v8 = sub_1A2A0C2B0(v5, v4, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v4);
  result = *(_QWORD *)(v7 - 136);
  *(_QWORD *)(result + 16) = v8;
  return result;
}

void sub_1A2A0B07C()
{
  swift_allocObject();
  sub_1A2A0AE9C();
}

uint64_t _arrayDescription<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;

  *(_QWORD *)&v24 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v22 - v5;
  v7 = sub_1A2AE39F4();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - v15;
  v25 = 91;
  v26 = 0xE100000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))(v13, v24, a2);
  sub_1A2AE3580();
  swift_getAssociatedConformanceWitness();
  sub_1A2AE3A54();
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v17(v10, 1, AssociatedTypeWitness) != 1)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v19(v6, v10, AssociatedTypeWitness);
    v24 = xmmword_1A2AFED80;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEFCFB0);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v24;
      *(_QWORD *)(v20 + 56) = AssociatedTypeWitness;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v20 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v4 + 16))(boxed_opaque_existential_0, v6, AssociatedTypeWitness);
      sub_1A2AE3AD8();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
      sub_1A2AE3A54();
      if (v17(v10, 1, AssociatedTypeWitness) == 1)
        break;
      v19(v6, v10, AssociatedTypeWitness);
      sub_1A2AE34F0();
    }
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v14);
  sub_1A2AE34F0();
  return v25;
}

uint64_t _addressString(for:)()
{
  sub_1A2A0B4F8();
  sub_1A2AE3550();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 30768;
}

{
  sub_1A2A0B4F8();
  sub_1A2AE3550();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t _addressString<A>(for:)()
{
  sub_1A2A0B4F8();
  sub_1A2AE3550();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 30768;
}

unint64_t sub_1A2A0B4F8()
{
  unint64_t result;

  result = qword_1EE67C870;
  if (!qword_1EE67C870)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEBBD8], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&qword_1EE67C870);
  }
  return result;
}

uint64_t _dictionaryDescription<A, B, C>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t AssociatedTypeWitness;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;

  v44 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = sub_1A2AE39F4();
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v46 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v38 - v22;
  v45 = *(char **)(a4 - 8);
  MEMORY[0x1E0C80A78](v21);
  v38 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v26 = (char *)&v38 - v25;
  *(_QWORD *)&v50 = a4;
  if ((sub_1A2AE38A4() & 1) != 0)
    return 6109787;
  v51 = 91;
  v52 = 0xE100000000000000;
  (*((void (**)(char *, uint64_t, _QWORD))v45 + 2))(v38, a1, v50);
  v45 = v26;
  sub_1A2AE3580();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = 1;
  v50 = xmmword_1A2AFED80;
  v40 = v23;
  v41 = TupleTypeMetadata2;
  while (1)
  {
    v33 = v46;
    sub_1A2AE3A54();
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v23, v33, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v23, 1, TupleTypeMetadata2) == 1)break;
    v34 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v23, a2);
    v35 = v44;
    v36 = a2;
    v37 = v42;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v11, v34, v42);
    if ((v28 & 1) == 0)
      sub_1A2AE34F0();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEFCFB0);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = v50;
    *(_QWORD *)(v29 + 56) = v36;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v29 + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(boxed_opaque_existential_0, v15, v36);
    sub_1A2AE3AD8();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v50;
    *(_QWORD *)(v31 + 56) = v37;
    v32 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v31 + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 16))(v32, v11, v37);
    sub_1A2AE3AD8();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v37);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v36);
    v28 = 0;
    v23 = v40;
    TupleTypeMetadata2 = v41;
    a2 = v36;
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v45, AssociatedTypeWitness);
  sub_1A2AE34F0();
  return v51;
}

uint64_t SFAirDrop.EndpointMetadata.imageData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1A297CF68(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SFAirDrop.EndpointMetadata.init(imageData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unint64_t SFAirDrop.EndpointMetadata.description.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  if (v1 >> 60 != 15)
    sub_1A2AE2F5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 0xD00000000000002CLL;
}

uint64_t sub_1A2A0BA64()
{
  return 0x7461446567616D69;
}

uint64_t sub_1A2A0BA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7461446567616D69 && a2 == 0xE900000000000061)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2A0BB20()
{
  sub_1A2A0BC70();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A0BB48()
{
  sub_1A2A0BC70();
  return sub_1A2AE4108();
}

uint64_t SFAirDrop.EndpointMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C878);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A0BC70();
  sub_1A2AE40E4();
  v10[0] = v8;
  v10[1] = v7;
  sub_1A29735F8();
  sub_1A2AE3DE4();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A2A0BC70()
{
  unint64_t result;

  result = qword_1EE67C880;
  if (!qword_1EE67C880)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00E94, &_s16EndpointMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C880);
  }
  return result;
}

uint64_t SFAirDrop.EndpointMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C888);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A0BC70();
  sub_1A2AE40C0();
  if (!v2)
  {
    sub_1A2973680();
    sub_1A2AE3D30();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1A2A0BDD4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return SFAirDrop.EndpointMetadata.init(from:)(a1, a2);
}

uint64_t sub_1A2A0BDE8(_QWORD *a1)
{
  return SFAirDrop.EndpointMetadata.encode(to:)(a1);
}

uint64_t *_s16EndpointMetadataVwxx(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_1A29736C4(*result, v1);
  return result;
}

uint64_t _s16EndpointMetadataVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_1A2973524(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *_s16EndpointMetadataVwca(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_1A29736C4(v7, v8);
      return a1;
    }
    sub_1A299C970((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_1A2973524(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *_s16EndpointMetadataVwta(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1A29736C4(v6, v4);
      return a1;
    }
    sub_1A299C970((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t _s16EndpointMetadataVwet(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s16EndpointMetadataVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDrop.EndpointMetadata()
{
  return &type metadata for SFAirDrop.EndpointMetadata;
}

uint64_t _s16EndpointMetadataV10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A0C078 + 4 * byte_1A2B00D30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A0C098 + 4 * byte_1A2B00D35[v4]))();
}

_BYTE *sub_1A2A0C078(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A0C098(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A0C0A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A0C0A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A0C0B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A0C0B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s16EndpointMetadataV10CodingKeysOMa()
{
  return &_s16EndpointMetadataV10CodingKeysON;
}

unint64_t sub_1A2A0C0D8()
{
  unint64_t result;

  result = qword_1EE67C890;
  if (!qword_1EE67C890)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00E6C, &_s16EndpointMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C890);
  }
  return result;
}

unint64_t sub_1A2A0C120()
{
  unint64_t result;

  result = qword_1EE67C898;
  if (!qword_1EE67C898)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00DDC, &_s16EndpointMetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C898);
  }
  return result;
}

unint64_t sub_1A2A0C168()
{
  unint64_t result;

  result = qword_1EE67C8A0[0];
  if (!qword_1EE67C8A0[0])
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B00E04, &_s16EndpointMetadataV10CodingKeysON);
    atomic_store(result, qword_1EE67C8A0);
  }
  return result;
}

uint64_t sub_1A2A0C1AC()
{
  return swift_initClassMetadata2();
}

void sub_1A2A0C1EC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1A2A0C278()
{
  MEMORY[0x1A8587228]();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ManagedCriticalState.LockedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState.LockedBuffer);
}

uint64_t type metadata accessor for ManagedCriticalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState);
}

uint64_t sub_1A2A0C2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ManagedCriticalState.LockedBuffer(0, a2, a3, a4);
  return sub_1A2AE3B68();
}

uint64_t sub_1A2A0C304@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x1E0DEC528]) - 8) + 16))(a2, v3);
}

uint64_t SFAirDropReceive.AskRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
}

uint64_t SFAirDropReceive.AskRequest.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1A2993E70(v4, v5, v6);
}

uint64_t type metadata accessor for SFAirDropReceive.AskRequest(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE674770);
}

uint64_t SFAirDropReceive.AskRequest.transferTypes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 24));
}

uint64_t SFAirDropReceive.AskRequest.canAutoAccept.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 28));
}

uint64_t SFAirDropReceive.AskRequest.verifiableIdentity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 32));
}

uint64_t SFAirDropReceive.AskRequest.senderIsMe.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 36));
}

uint64_t SFAirDropReceive.AskRequest.contactIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderBundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderComputerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderModelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderEmailHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderCompositeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderFirstName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderLastName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.senderID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 76));
  swift_bridgeObjectRetain();
  return v1;
}

void *SFAirDropReceive.AskRequest.senderIcon.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 80));
  v2 = v1;
  return v1;
}

void sub_1A2A0C6D8(void **a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 80);
  v5 = *(void **)(a2 + v4);
  v6 = v3;

  *(_QWORD *)(a2 + v4) = v3;
}

void SFAirDropReceive.AskRequest.senderIcon.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 80);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*SFAirDropReceive.AskRequest.senderIcon.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  return nullsub_1;
}

void *SFAirDropReceive.AskRequest.smallPreviewImage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 84));
  v2 = v1;
  return v1;
}

void sub_1A2A0C7B0(void **a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 84);
  v5 = *(void **)(a2 + v4);
  v6 = v3;

  *(_QWORD *)(a2 + v4) = v3;
}

void SFAirDropReceive.AskRequest.smallPreviewImage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 84);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*SFAirDropReceive.AskRequest.smallPreviewImage.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  return nullsub_1;
}

void *SFAirDropReceive.AskRequest.previewImage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 88));
  v2 = v1;
  return v1;
}

void sub_1A2A0C888(void **a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 88);
  v5 = *(void **)(a2 + v4);
  v6 = v3;

  *(_QWORD *)(a2 + v4) = v3;
}

void SFAirDropReceive.AskRequest.previewImage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 88);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*SFAirDropReceive.AskRequest.previewImage.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  return nullsub_1;
}

uint64_t SFAirDropReceive.AskRequest.itemsDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.itemsDescriptionAdvanced.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 96);
  return sub_1A2A0C99C(v3, a1);
}

uint64_t sub_1A2A0C99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SFAirDropReceive.AskRequest.urlItems.getter()
{
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t SFAirDropReceive.AskRequest.items.getter()
{
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t SFAirDropReceive.AskRequest.customPayload.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 108);
  v2 = *(_QWORD *)v1;
  sub_1A297CF68(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

_QWORD *SFAirDropReceive.AskRequest.files.getter()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for SFAirDropReceive.AskRequest(0);
  v0 = swift_bridgeObjectRetain();
  v1 = sub_1A2A108C4(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v38;
  uint64_t v39;
  char v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t result;
  _QWORD *v55;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v38 = *a2;
  v39 = a2[1];
  v40 = *((_BYTE *)a2 + 16);
  v41 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
  v60 = v41[21];
  v61 = v41[20];
  v59 = v41[22];
  sub_1A297EB48(a1, a9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v42 = a9 + v41[5];
  *(_QWORD *)v42 = v38;
  *(_QWORD *)(v42 + 8) = v39;
  *(_BYTE *)(v42 + 16) = v40;
  *(_QWORD *)(a9 + v41[6]) = a3;
  *(_BYTE *)(a9 + v41[7]) = a4;
  *(_BYTE *)(a9 + v41[8]) = a5;
  *(_BYTE *)(a9 + v41[9]) = a6;
  v43 = (_QWORD *)(a9 + v41[10]);
  *v43 = a7;
  v43[1] = a8;
  v44 = (_QWORD *)(a9 + v41[11]);
  *v44 = a10;
  v44[1] = a11;
  v45 = (_QWORD *)(a9 + v41[12]);
  *v45 = a12;
  v45[1] = a13;
  v46 = (_QWORD *)(a9 + v41[13]);
  *v46 = a14;
  v46[1] = a15;
  v47 = (_QWORD *)(a9 + v41[14]);
  *v47 = a16;
  v47[1] = a17;
  v48 = (_QWORD *)(a9 + v41[15]);
  *v48 = a18;
  v48[1] = a19;
  v49 = (_QWORD *)(a9 + v41[16]);
  *v49 = a20;
  v49[1] = a21;
  v50 = (_QWORD *)(a9 + v41[17]);
  *v50 = a22;
  v50[1] = a23;
  v51 = (_QWORD *)(a9 + v41[18]);
  *v51 = a24;
  v51[1] = a25;
  v52 = (_QWORD *)(a9 + v41[19]);
  *v52 = a26;
  v52[1] = a27;
  *(_QWORD *)(a9 + v61) = a28;
  *(_QWORD *)(a9 + v60) = a29;
  *(_QWORD *)(a9 + v59) = a30;
  v53 = (_QWORD *)(a9 + v41[23]);
  *v53 = a31;
  v53[1] = a32;
  result = sub_1A2A109B4(a33, a9 + v41[24]);
  *(_QWORD *)(a9 + v41[25]) = a34;
  *(_QWORD *)(a9 + v41[26]) = a35;
  v55 = (_QWORD *)(a9 + v41[27]);
  *v55 = a36;
  v55[1] = a37;
  return result;
}

uint64_t SFAirDropReceive.AskRequest.senderDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 64));
  if (v2[1])
  {
    v3 = *v2;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + *(int *)(v1 + 48));
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SFAirDropReceive.AskRequest.description.getter()
{
  sub_1A2AE3B20();
  sub_1A2AE34F0();
  type metadata accessor for SFAirDropReceive.AskRequest(0);
  swift_bridgeObjectRetain();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1A2A0CF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_1A2AE2F44();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    sub_1A296E8A4(&qword_1EE67C6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    v27 = sub_1A2AE3388();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_1A296E8A4(&qword_1EE67CA58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v31 = sub_1A2AE33DC();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return 1;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1A2A0D29C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  char v36;
  char v38;
  char v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v55 = a2 + 56;
  v42 = result + 56;
  v43 = result;
  v41 = v8;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_60;
  }
  if (v10 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v10);
  v12 = v3 + 1;
  if (!v11)
  {
    v12 = v10 + 1;
    if (v10 + 1 >= v8)
      return 1;
    v11 = *(_QWORD *)(v4 + 8 * v12);
    if (!v11)
    {
      v12 = v10 + 2;
      if (v10 + 2 >= v8)
        return 1;
      v11 = *(_QWORD *)(v4 + 8 * v12);
      if (!v11)
      {
        v12 = v10 + 3;
        if (v10 + 3 >= v8)
          return 1;
        v11 = *(_QWORD *)(v4 + 8 * v12);
        if (!v11)
        {
          v13 = v10 + 4;
          if (v13 < v8)
          {
            v11 = *(_QWORD *)(v4 + 8 * v13);
            if (v11)
            {
              v12 = v13;
              goto LABEL_23;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              if (v12 >= v8)
                return 1;
              v11 = *(_QWORD *)(v4 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_23;
            }
LABEL_60:
            __break(1u);
            return result;
          }
          return 1;
        }
      }
    }
  }
LABEL_23:
  v44 = (v11 - 1) & v11;
  v45 = v12;
  for (i = __clz(__rbit64(v11)) + (v12 << 6); ; i = __clz(__rbit64(v7)) | (v3 << 6))
  {
    v14 = (unsigned __int8 *)(*(_QWORD *)(result + 48) + 80 * i);
    v15 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 5);
    v17 = *((_QWORD *)v14 + 7);
    v18 = *((_QWORD *)v14 + 9);
    v57 = *v14;
    v54 = *((_QWORD *)v14 + 1);
    v53 = v14[24];
    v51 = *((_QWORD *)v14 + 4);
    v47 = *((_QWORD *)v14 + 6);
    v48 = *((_QWORD *)v14 + 8);
    sub_1A2AE400C();
    v50 = v17;
    swift_bridgeObjectRetain();
    v49 = v18;
    swift_bridgeObjectRetain();
    v56 = v15;
    swift_bridgeObjectRetain();
    v52 = v16;
    swift_bridgeObjectRetain();
    SFAirDropReceive.AskRequest.ItemInfo.hash(into:)();
    v19 = sub_1A2AE4030();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = v19 & ~v20;
    v22 = v55;
    if (((*(_QWORD *)(v55 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      break;
    v23 = ~v20;
    v24 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v25 = (unsigned __int8 *)(v24 + 80 * v21);
      if (v57 != *v25)
        goto LABEL_27;
      v26 = v25[24];
      v28 = *((_QWORD *)v25 + 4);
      v27 = *((_QWORD *)v25 + 5);
      v29 = *((_QWORD *)v25 + 6);
      v30 = *((_QWORD *)v25 + 7);
      v32 = *((_QWORD *)v25 + 8);
      v31 = *((_QWORD *)v25 + 9);
      if (*((_QWORD *)v25 + 1) == v54 && *((_QWORD *)v25 + 2) == v56)
      {
        if (v53 != v26)
          goto LABEL_27;
      }
      else
      {
        v34 = sub_1A2AE3EE0();
        v22 = v55;
        if ((v34 & 1) == 0 || ((v53 ^ v26) & 1) != 0)
          goto LABEL_27;
      }
      if (v28 != v51 || v27 != v52)
      {
        v36 = sub_1A2AE3EE0();
        v22 = v55;
        if ((v36 & 1) == 0)
          goto LABEL_27;
      }
      if (v30)
        break;
      if (!v50)
        goto LABEL_49;
LABEL_27:
      v21 = (v21 + 1) & v23;
      if (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
        goto LABEL_57;
    }
    if (!v50)
      goto LABEL_27;
    if (v29 != v47 || v30 != v50)
    {
      v38 = sub_1A2AE3EE0();
      v22 = v55;
      if ((v38 & 1) == 0)
        goto LABEL_27;
    }
LABEL_49:
    if (v32 != v48 || v31 != v49)
    {
      v40 = sub_1A2AE3EE0();
      v22 = v55;
      if ((v40 & 1) == 0)
        goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v45;
    v2 = a2;
    v4 = v42;
    result = v43;
    v8 = v41;
    v7 = v44;
    if (!v44)
      goto LABEL_8;
LABEL_7:
    v44 = (v7 - 1) & v7;
    v45 = v3;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1A2A0D690(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A0D6B8 + 4 * byte_1A2B00F70[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1A2A0D6B8()
{
  return 1701869940;
}

uint64_t sub_1A2A0D6C8()
{
  return 0x726566736E617274;
}

uint64_t sub_1A2A0D6EC()
{
  return 0x416F7475416E6163;
}

unint64_t sub_1A2A0D710()
{
  return 0xD000000000000012;
}

uint64_t sub_1A2A0D8F0()
{
  return 0x736D6574496C7275;
}

uint64_t sub_1A2A0D908()
{
  return 0x736D657469;
}

uint64_t sub_1A2A0D91C()
{
  return 0x61506D6F74737563;
}

uint64_t sub_1A2A0D940()
{
  unsigned __int8 *v0;

  return sub_1A2A0D690(*v0);
}

uint64_t sub_1A2A0D948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A14FD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2A0D96C(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_1A2A0D978()
{
  sub_1A2A121CC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A0D9A0()
{
  sub_1A2A121CC();
  return sub_1A2AE4108();
}

uint64_t SFAirDropReceive.AskRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  __int128 *v10;
  char v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C928);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A121CC();
  sub_1A2AE40E4();
  LOBYTE(v15) = 0;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1A296E8A4(&qword_1EE67C938, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  sub_1A2AE3E2C();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
    v10 = (__int128 *)(v3 + v9[5]);
    v11 = *((_BYTE *)v10 + 16);
    v15 = *v10;
    v16 = v11;
    v14 = 1;
    sub_1A2A12210();
    sub_1A2AE3E2C();
    LOBYTE(v15) = 2;
    sub_1A2AE3E38();
    LOBYTE(v15) = 3;
    sub_1A2AE3DFC();
    LOBYTE(v15) = 4;
    sub_1A2AE3DFC();
    LOBYTE(v15) = 5;
    sub_1A2AE3DFC();
    LOBYTE(v15) = 6;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 7;
    sub_1A2AE3DF0();
    LOBYTE(v15) = 8;
    sub_1A2AE3DF0();
    LOBYTE(v15) = 9;
    sub_1A2AE3DF0();
    LOBYTE(v15) = 10;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 11;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 12;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 13;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 14;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 15;
    sub_1A2AE3DF0();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[20]);
    v14 = 16;
    sub_1A2A12254();
    sub_1A2AE3E2C();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[21]);
    v14 = 17;
    sub_1A2AE3E2C();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[22]);
    v14 = 18;
    sub_1A2AE3E2C();
    LOBYTE(v15) = 19;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 20;
    type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
    sub_1A296E8A4(&qword_1EE67C950, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    sub_1A2AE3DE4();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[25]);
    v14 = 21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C958);
    sub_1A2A12378(&qword_1EE67C960, &qword_1EE67B530, MEMORY[0x1E0CB0010], MEMORY[0x1E0DEB3B8]);
    sub_1A2AE3E2C();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[26]);
    v14 = 22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C968);
    sub_1A2A123FC(&qword_1EE67C970, (uint64_t (*)(void))sub_1A2A122AC, MEMORY[0x1E0DEB3B8]);
    sub_1A2AE3E2C();
    v15 = *(_OWORD *)(v3 + v9[27]);
    v14 = 23;
    sub_1A29735F8();
    sub_1A2AE3DE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void SFAirDropReceive.AskRequest.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int *v92;
  __int128 v93;
  char v94;
  int v95;
  char v96;

  v83 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C980);
  v10 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v14 = (int *)MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v14[20];
  v86 = (uint64_t)a1;
  v87 = v17;
  *(_QWORD *)&v16[v17] = 0;
  v88 = v14[21];
  *(_QWORD *)&v16[v88] = 0;
  v91 = v16;
  v92 = v14;
  v89 = v14[22];
  *(_QWORD *)&v16[v89] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A121CC();
  v84 = v12;
  sub_1A2AE40C0();
  if (v2)
  {
    v90 = v2;
    v18 = 458752;
  }
  else
  {
    v82 = v10;
    LOBYTE(v93) = 0;
    sub_1A296E8A4(&qword_1EE67C988, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    sub_1A2AE3D78();
    v31 = (uint64_t)v91;
    sub_1A297EB48((uint64_t)v9, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
    v96 = 1;
    sub_1A2A122F0();
    sub_1A2AE3D78();
    v32 = v94;
    v33 = v92;
    v34 = v31 + v92[5];
    *(_OWORD *)v34 = v93;
    *(_BYTE *)(v34 + 16) = v32;
    LOBYTE(v93) = 2;
    *(_QWORD *)(v31 + v33[6]) = sub_1A2AE3D84();
    LOBYTE(v93) = 3;
    *(_BYTE *)(v31 + v33[7]) = sub_1A2AE3D48() & 1;
    LOBYTE(v93) = 4;
    *(_BYTE *)(v31 + v33[8]) = sub_1A2AE3D48() & 1;
    LOBYTE(v93) = 5;
    *(_BYTE *)(v31 + v33[9]) = sub_1A2AE3D48() & 1;
    LOBYTE(v93) = 6;
    v35 = sub_1A2AE3D00();
    v36 = (uint64_t *)(v31 + v33[10]);
    *v36 = v35;
    v36[1] = v37;
    LOBYTE(v93) = 7;
    v38 = sub_1A2AE3D3C();
    v39 = (uint64_t *)(v31 + v33[11]);
    *v39 = v38;
    v39[1] = v40;
    LOBYTE(v93) = 8;
    v41 = sub_1A2AE3D3C();
    v42 = (uint64_t *)(v31 + v92[12]);
    *v42 = v41;
    v42[1] = v43;
    LOBYTE(v93) = 9;
    v44 = sub_1A2AE3D3C();
    v90 = 0;
    v46 = (uint64_t *)&v91[v92[13]];
    *v46 = v44;
    v46[1] = v45;
    LOBYTE(v93) = 10;
    v47 = v90;
    v48 = sub_1A2AE3D00();
    v90 = v47;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
      v18 = 459715;
    }
    else
    {
      v50 = (uint64_t *)&v91[v92[14]];
      *v50 = v48;
      v50[1] = v49;
      LOBYTE(v93) = 11;
      v51 = v90;
      v52 = sub_1A2AE3D00();
      v90 = v51;
      if (v51)
      {
        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
        v18 = 460739;
      }
      else
      {
        v54 = (uint64_t *)&v91[v92[15]];
        *v54 = v52;
        v54[1] = v53;
        LOBYTE(v93) = 12;
        v55 = v90;
        v56 = sub_1A2AE3D00();
        v90 = v55;
        if (v55)
        {
          (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
          v18 = 462787;
        }
        else
        {
          v58 = (uint64_t *)&v91[v92[16]];
          *v58 = v56;
          v58[1] = v57;
          LOBYTE(v93) = 13;
          v59 = v90;
          v60 = sub_1A2AE3D00();
          v90 = v59;
          if (v59)
          {
            (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
            v18 = 466883;
          }
          else
          {
            v62 = (uint64_t *)&v91[v92[17]];
            *v62 = v60;
            v62[1] = v61;
            LOBYTE(v93) = 14;
            v63 = v90;
            v64 = sub_1A2AE3D00();
            v90 = v63;
            if (v63)
            {
              (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
              v18 = 475075;
            }
            else
            {
              v66 = (uint64_t *)&v91[v92[18]];
              *v66 = v64;
              v66[1] = v65;
              LOBYTE(v93) = 15;
              v67 = v90;
              v68 = sub_1A2AE3D3C();
              v90 = v67;
              if (v67)
              {
                (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                v18 = 491459;
              }
              else
              {
                v70 = (uint64_t *)&v91[v92[19]];
                *v70 = v68;
                v70[1] = v69;
                v96 = 16;
                sub_1A2A12334();
                v71 = v90;
                sub_1A2AE3D78();
                v90 = v71;
                if (!v71)
                {
                  *(_QWORD *)&v91[v87] = v93;
                  v96 = 17;
                  sub_1A2AE3D78();
                  v90 = 0;
                  *(_QWORD *)&v91[v88] = v93;
                  v96 = 18;
                  sub_1A2AE3D78();
                  v90 = 0;
                  *(_QWORD *)&v91[v89] = v93;
                  LOBYTE(v93) = 19;
                  v72 = sub_1A2AE3D00();
                  v90 = 0;
                  v74 = (uint64_t *)&v91[v92[23]];
                  *v74 = v72;
                  v74[1] = v73;
                  type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
                  LOBYTE(v93) = 20;
                  sub_1A296E8A4(&qword_1EE67C9A0, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
                  v75 = v90;
                  sub_1A2AE3D30();
                  v90 = v75;
                  if (v75)
                  {
                    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                    LODWORD(v83) = 0;
                    LODWORD(v84) = 0;
                    LODWORD(v85) = 0;
                    v26 = 1;
                  }
                  else
                  {
                    sub_1A2A109B4((uint64_t)v6, (uint64_t)&v91[v92[24]]);
                    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C958);
                    v96 = 21;
                    sub_1A2A12378(&qword_1EE67C9A8, &qword_1EE67B6C8, MEMORY[0x1E0CB0038], MEMORY[0x1E0DEB3D8]);
                    v76 = v90;
                    sub_1A2AE3D78();
                    v90 = v76;
                    if (v76)
                    {
                      (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                      LODWORD(v84) = 0;
                      LODWORD(v85) = 0;
                      v26 = 1;
                      LODWORD(v83) = 1;
                    }
                    else
                    {
                      *(_QWORD *)&v91[v92[25]] = v93;
                      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C968);
                      v96 = 22;
                      sub_1A2A123FC(&qword_1EE67C9B0, (uint64_t (*)(void))sub_1A2A12464, MEMORY[0x1E0DEB3D8]);
                      v77 = v90;
                      sub_1A2AE3D78();
                      v90 = v77;
                      if (v77)
                      {
                        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                        LODWORD(v85) = 0;
                        v26 = 1;
                        LODWORD(v83) = 1;
                        LODWORD(v84) = 1;
                      }
                      else
                      {
                        *(_QWORD *)&v91[v92[26]] = v93;
                        v96 = 23;
                        sub_1A2973680();
                        v78 = v90;
                        sub_1A2AE3D30();
                        v90 = v78;
                        if (!v78)
                        {
                          (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                          v79 = (uint64_t)v91;
                          *(_OWORD *)&v91[v92[27]] = v93;
                          sub_1A2990388(v79, v83, type metadata accessor for SFAirDropReceive.AskRequest);
                          __swift_destroy_boxed_opaque_existential_0Tm(v86);
                          sub_1A297DA3C(v79, type metadata accessor for SFAirDropReceive.AskRequest);
                          return;
                        }
                        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
                        v26 = 1;
                        LODWORD(v83) = 1;
                        LODWORD(v84) = 1;
                        LODWORD(v85) = 1;
                      }
                    }
                  }
                  __swift_destroy_boxed_opaque_existential_0Tm(v86);
                  v19 = (uint64_t)v91;
                  sub_1A297DA3C((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
                  LODWORD(v86) = 1;
                  v81 = 1;
                  LODWORD(v82) = 1;
                  v95 = 1;
                  v80 = 1;
                  v24 = 1;
                  v23 = 1;
                  v22 = 1;
                  v21 = 1;
                  LOBYTE(v20) = 1;
                  v25 = v92;
                  goto LABEL_29;
                }
                v18 = 524227;
                (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v85);
              }
            }
          }
        }
      }
    }
  }
  v19 = (uint64_t)v91;
  __swift_destroy_boxed_opaque_existential_0Tm(v86);
  v20 = (v18 >> 6) & 1;
  v21 = (v18 >> 7) & 1;
  v22 = (v18 >> 8) & 1;
  v23 = (v18 >> 9) & 1;
  v24 = (v18 >> 10) & 1;
  v80 = (v18 >> 11) & 1;
  v81 = (v18 >> 12) & 1;
  v95 = (v18 >> 13) & 1;
  LODWORD(v82) = (v18 >> 14) & 1;
  LODWORD(v86) = (v18 >> 15) & 1;
  if ((v18 & 1) != 0)
    sub_1A297DA3C(v19, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v25 = v92;
  if ((v18 & 2) == 0)
  {
    v26 = 0;
    LODWORD(v83) = 0;
    LODWORD(v84) = 0;
    LODWORD(v85) = 0;
    if ((v18 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
  LODWORD(v85) = 0;
  LODWORD(v84) = 0;
  LODWORD(v83) = 0;
  v26 = 0;
LABEL_29:
  sub_1A2994E20(*(_QWORD *)(v19 + v25[5]), *(_QWORD *)(v19 + v25[5] + 8), *(_BYTE *)(v19 + v25[5] + 16));
  if ((v20 & 1) == 0)
  {
LABEL_8:
    if (v21)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  if (!v22)
  {
LABEL_10:
    if (v23)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v27 = v26;
    if ((v24 & 1) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  v27 = v26;
  if (!v24)
  {
LABEL_12:
    v28 = v83;
    if (v80)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  v28 = v83;
  if ((v80 & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v29 = (int)v84;
    if ((v81 & 1) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  v29 = (int)v84;
  if (!v81)
  {
LABEL_14:
    v30 = v85;
    if (v95)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  swift_bridgeObjectRelease();
  v30 = v85;
  if ((v95 & 1) != 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    if ((v82 & 1) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  if (!(_DWORD)v82)
  {
LABEL_16:
    if (!(_DWORD)v86)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  if ((v86 & 1) != 0)
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:

  if (v27)
  {
    swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_20:
      if (!v29)
        goto LABEL_21;
LABEL_25:
      swift_bridgeObjectRelease();
      if (!v30)
        return;
      goto LABEL_26;
    }
  }
  else if (!v28)
  {
    goto LABEL_20;
  }
  sub_1A296F108(v19 + v25[24], &qword_1EE67B7D8);
  if (v29)
    goto LABEL_25;
LABEL_21:
  if (!v30)
    return;
LABEL_26:
  swift_bridgeObjectRelease();
}

uint64_t sub_1A2A0ECCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
}

void sub_1A2A0ECF0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  SFAirDropReceive.AskRequest.init(from:)(a1, a2);
}

uint64_t sub_1A2A0ED04(_QWORD *a1)
{
  return SFAirDropReceive.AskRequest.encode(to:)(a1);
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.convertMediaFormats.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileBomPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileIsDirectory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(_BYTE *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  return result;
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1A2AE4024();
  swift_bridgeObjectRetain();
  sub_1A2AE34C0();
  swift_bridgeObjectRelease();
  sub_1A2AE4024();
  swift_bridgeObjectRetain();
  sub_1A2AE34C0();
  swift_bridgeObjectRelease();
  sub_1A2AE4024();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1A2AE34C0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A2AE34C0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A2A0EF10()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A0EF44 + 4 * byte_1A2B00F88[*v0]))(0xD000000000000013, 0x80000001A2B466C0);
}

uint64_t sub_1A2A0EF44()
{
  return 0x506D6F42656C6966;
}

uint64_t sub_1A2A0EF64()
{
  return 0x69447349656C6966;
}

uint64_t sub_1A2A0EF88()
{
  return 0x656D614E656C6966;
}

uint64_t sub_1A2A0EFA0()
{
  return 0x54627553656C6966;
}

uint64_t sub_1A2A0EFC0()
{
  return 0x65707954656C6966;
}

uint64_t sub_1A2A0EFD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A15A20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A0EFFC()
{
  sub_1A2A124A8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A0F024()
{
  sub_1A2A124A8();
  return sub_1A2AE4108();
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C9C0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v15 = *(_QWORD *)(v1 + 16);
  v16 = v8;
  v14 = *(unsigned __int8 *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v13[5] = *(_QWORD *)(v1 + 40);
  v13[6] = v9;
  v10 = *(_QWORD *)(v1 + 56);
  v13[3] = *(_QWORD *)(v1 + 48);
  v13[4] = v10;
  v11 = *(_QWORD *)(v1 + 64);
  v13[1] = *(_QWORD *)(v1 + 72);
  v13[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A124A8();
  sub_1A2AE40E4();
  v22 = 0;
  sub_1A2AE3DFC();
  if (!v2)
  {
    v21 = 1;
    sub_1A2AE3DF0();
    v20 = 2;
    sub_1A2AE3DFC();
    v19 = 3;
    sub_1A2AE3DF0();
    v18 = 4;
    sub_1A2AE3DC0();
    v17 = 5;
    sub_1A2AE3DF0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.hashValue.getter()
{
  sub_1A2AE400C();
  SFAirDropReceive.AskRequest.ItemInfo.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C9D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A124A8();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v34 = 0;
  v9 = sub_1A2AE3D48();
  v33 = 1;
  v10 = sub_1A2AE3D3C();
  v12 = v11;
  v28 = v10;
  v32 = 2;
  swift_bridgeObjectRetain();
  v27 = sub_1A2AE3D48();
  v31 = 3;
  v25 = sub_1A2AE3D3C();
  v26 = v14;
  v30 = 4;
  swift_bridgeObjectRetain();
  v23 = sub_1A2AE3D00();
  v24 = v15;
  v29 = 5;
  swift_bridgeObjectRetain();
  v16 = sub_1A2AE3D3C();
  v18 = v17;
  v27 &= 1u;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20 = v16;
  v19(v8, v5);
  swift_bridgeObjectRetain();
  v21 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v9 & 1;
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v27;
  v22 = v24;
  *(_QWORD *)(a2 + 32) = v25;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v18;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A2A0F604@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.AskRequest.ItemInfo.init(from:)(a1, a2);
}

uint64_t sub_1A2A0F618(_QWORD *a1)
{
  return SFAirDropReceive.AskRequest.ItemInfo.encode(to:)(a1);
}

uint64_t sub_1A2A0F62C()
{
  sub_1A2AE400C();
  SFAirDropReceive.AskRequest.ItemInfo.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t sub_1A2A0F6A0()
{
  sub_1A2AE400C();
  SFAirDropReceive.AskRequest.ItemInfo.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A2AE3CD0();
  result = swift_bridgeObjectRelease();
  v4 = 9;
  if (v2 < 9)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(stringValue:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(rawValue:)(&v3);
  *a1 = v3;
  return result;
}

void SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A0F7E8 + 4 * byte_1A2B00F8E[*v0]))(0xD00000000000001CLL, 0x80000001A2B44260);
}

uint64_t sub_1A2A0F7E8(uint64_t a1)
{
  return a1 + 14;
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A0F8A4 + 4 * byte_1A2B00F97[*v0]))(0xD00000000000001CLL, 0x80000001A2B44260);
}

uint64_t sub_1A2A0F8A4(uint64_t a1)
{
  return a1 + 14;
}

void sub_1A2A0F92C(char *a1)
{
  sub_1A2A5D6EC(*a1);
}

uint64_t sub_1A2A0F938()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A2AE400C();
  sub_1A2AC3A10((uint64_t)v3, v1);
  return sub_1A2AE4030();
}

void sub_1A2A0F97C(uint64_t a1)
{
  char *v1;

  sub_1A2AC3A10(a1, *v1);
}

uint64_t sub_1A2A0F984()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A2AE400C();
  sub_1A2AC3A10((uint64_t)v3, v1);
  return sub_1A2AE4030();
}

uint64_t sub_1A2A0F9C4@<X0>(char *a1@<X8>)
{
  return SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(rawValue:)(a1);
}

uint64_t sub_1A2A0F9D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A2A0F9F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys.init(rawValue:)(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1A2A0FA2C()
{
  sub_1A2A124EC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A0FA54()
{
  sub_1A2A124EC();
  return sub_1A2AE4108();
}

uint64_t SFAirDropReceive.AskRequest.AdvancedItemsDescription.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v55 = a2;
  v56 = sub_1A2AE30C4();
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C9D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v57 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1A2A124EC();
  v13 = v58;
  sub_1A2AE40C0();
  if (!v13)
  {
    v14 = v4;
    v15 = v56;
    v58 = (uint64_t *)v11;
    v53 = v9;
    LOBYTE(v59) = 0;
    v16 = sub_1A2AE3D3C();
    v17 = v5;
    v19 = v18;
    v52 = v16;
    LOBYTE(v59) = 1;
    v20 = sub_1A2AE3D24();
    if ((v21 & 1) != 0)
    {
      LOBYTE(v59) = 2;
      v26 = sub_1A2AE3D00();
      if (v27)
      {
        v50 = v26;
        v51 = v27;
        LOBYTE(v59) = 3;
        sub_1A296E8A4(&qword_1EE67AC10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
        sub_1A2AE3D78();
        LOBYTE(v59) = 4;
        v32 = sub_1A2AE3D0C();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
        v23 = v58;
        v34 = (char *)v58 + *(int *)(v33 + 64);
        v35 = *(int *)(v33 + 80);
        *v58 = v52;
        v23[1] = v19;
        v36 = v51;
        v23[2] = v50;
        v23[3] = (uint64_t)v36;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v34, v14, v15);
        *((_BYTE *)v23 + v35) = v32 & 1;
      }
      else
      {
        LOBYTE(v59) = 5;
        v28 = sub_1A2AE3D24();
        v56 = v19;
        if ((v29 & 1) != 0)
        {
          LOBYTE(v59) = 6;
          v37 = sub_1A2AE3D24();
          v24 = v55;
          v38 = v17;
          v23 = v58;
          v51 = v8;
          v54 = v38;
          if ((v39 & 1) == 0)
          {
            v59 = 0;
            v60 = 0xE000000000000000;
            sub_1A2AE3B20();
            sub_1A2AE34F0();
            v61 = v37;
            sub_1A2AE3E5C();
            sub_1A2AE34F0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v54);
            v40 = v56;
            *v23 = v52;
            v23[1] = v40;
            v23[2] = v37;
            goto LABEL_5;
          }
          LOBYTE(v59) = 7;
          v41 = sub_1A2AE3D24();
          if ((v42 & 1) != 0)
          {
            LOBYTE(v59) = 8;
            v44 = sub_1A2AE3D18();
            v46 = v45;
            (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v54);
            v47 = v58;
            v48 = v56;
            *v58 = v52;
            v47[1] = v48;
            if ((v46 & 1) != 0)
            {
              v24 = v55;
              v23 = v58;
              goto LABEL_5;
            }
            v23 = v58;
            v58[2] = v44;
            goto LABEL_4;
          }
          v30 = v41;
          v59 = 0;
          v60 = 0xE000000000000000;
          sub_1A2AE3B20();
          sub_1A2AE34F0();
          v61 = v30;
          sub_1A2AE3E5C();
          sub_1A2AE34F0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v54);
          v23 = v58;
          v43 = v56;
          *v58 = v52;
          v23[1] = v43;
        }
        else
        {
          v30 = v28;
          v59 = 0;
          v60 = 0xE000000000000000;
          sub_1A2AE3B20();
          sub_1A2AE34F0();
          v61 = v30;
          sub_1A2AE3E5C();
          sub_1A2AE34F0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
          v23 = v58;
          v31 = v56;
          *v58 = v52;
          v23[1] = v31;
        }
        v23[2] = v30;
      }
    }
    else
    {
      v22 = v20;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v23 = v58;
      *v58 = v52;
      v23[1] = v19;
      v23[2] = v22;
    }
LABEL_4:
    v24 = v55;
LABEL_5:
    swift_storeEnumTagMultiPayload();
    sub_1A297EB48((uint64_t)v23, v24, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v57);
}

void SFAirDropReceive.AskRequest.AdvancedItemsDescription.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v11 = sub_1A2AE30C4();
  v10[3] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v10[4] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67C9E8);
  v12 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A124EC();
  sub_1A2AE40E4();
  sub_1A2990388(v2, (uint64_t)v7, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  v9 = (char *)sub_1A2A10294 + 4 * byte_1A2B00FA0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A10294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 - 94) = 0;
  v3 = *(_QWORD *)(v2 - 104);
  sub_1A2AE3DF0();
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v0, v1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 - 95) = 1;
    sub_1A2AE3E14();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v0, v1);
  }
}

uint64_t sub_1A2A10630@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropReceive.AskRequest.AdvancedItemsDescription.init(from:)(a1, a2);
}

void sub_1A2A10644(_QWORD *a1)
{
  SFAirDropReceive.AskRequest.AdvancedItemsDescription.encode(to:)(a1);
}

void sub_1A2A1065C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1A2A106BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1A2A108A0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

_QWORD *sub_1A2A108C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA60);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 80);
  v5 = sub_1A2A109FC(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1A2A15CF0();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1A2A109B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1A2A109FC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  v28 = result;
  v11 = 0;
  v12 = 0;
  v29 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    v18 = *(_QWORD *)(a4 + 48) + 80 * v14;
    ++v12;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    v21 = *(_BYTE *)(v18 + 24);
    v22 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v24 = *(_QWORD *)(v18 + 48);
    v25 = *(_QWORD *)(v18 + 72);
    v26 = *(_OWORD *)(v18 + 56);
    *(_BYTE *)v10 = *(_BYTE *)v18;
    *(_QWORD *)(v10 + 8) = v19;
    *(_QWORD *)(v10 + 16) = v20;
    *(_BYTE *)(v10 + 24) = v21;
    *(_QWORD *)(v10 + 32) = v22;
    *(_QWORD *)(v10 + 40) = v23;
    *(_QWORD *)(v10 + 48) = v24;
    *(_OWORD *)(v10 + 56) = v26;
    *(_QWORD *)(v10 + 72) = v25;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 80;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v29)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v29)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v29)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v29)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v29)
              {
                v8 = 0;
                v11 = v29 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1A2A10C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1A2A1065C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1A2A10D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1A2AE2E54();
  v11 = result;
  if (result)
  {
    result = sub_1A2AE2E6C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1A2AE2E60();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1A2A1065C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1A2A10E0C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1A2A10E58()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1A2A10E8C + dword_1A2A11064[v0 >> 62]))();
}

uint64_t sub_1A2A10E9C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void _s7Sharing16SFAirDropReceiveO10AskRequestV24AdvancedItemsDescriptionO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD v19[4];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v20 = sub_1A2AE30C4();
  v22 = *(_QWORD *)(v20 - 8);
  v3 = MEMORY[0x1E0C80A78](v20);
  v19[2] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v19[3] = (char *)v19 - v5;
  v6 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v21 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA40);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v19 + *(int *)(v15 + 48) - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a1, (uint64_t)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  sub_1A2990388(v23, (uint64_t)v17, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  v18 = (char *)sub_1A2A1128C + 4 * byte_1A2B00FA7[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1A2A1128C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BOOL8 v9;

  sub_1A2990388(v2, (uint64_t)v0, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  v3 = *v0;
  v4 = v0[1];
  v5 = v0[2];
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    sub_1A296F108(v2, &qword_1EE67CA40);
    return 0;
  }
  v6 = v1[2];
  if (v3 == *v1 && v4 == v1[1])
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      sub_1A297DA3C(v2, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
      return 0;
    }
  }
  v9 = v5 == v6;
  sub_1A297DA3C(v2, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
  return v9;
}

uint64_t _s7Sharing16SFAirDropReceiveO10AskRequestV8ItemInfoV2eeoiySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*a1 != *a2)
    return 0;
  v2 = a1[24];
  v3 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 7);
  v18 = *((_QWORD *)a1 + 8);
  v19 = *((_QWORD *)a1 + 6);
  v17 = *((_QWORD *)a1 + 9);
  v6 = a2[24];
  v8 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)a2 + 9);
  v16 = *((_QWORD *)a2 + 8);
  if (*((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2))
  {
    if (v2 != v6)
      return 0;
  }
  else
  {
    v12 = sub_1A2AE3EE0();
    result = 0;
    if ((v12 & 1) == 0 || ((v2 ^ v6) & 1) != 0)
      return result;
  }
  if (v3 != v8 || v4 != v7)
  {
    v14 = sub_1A2AE3EE0();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (!v5)
  {
    if (!v9)
    {
LABEL_20:
      if (v18 == v16 && v17 == v11)
        return 1;
      else
        return sub_1A2AE3EE0();
    }
    return 0;
  }
  if (!v9)
    return 0;
  if (v19 == v10 && v5 == v9)
    goto LABEL_20;
  v15 = sub_1A2AE3EE0();
  result = 0;
  if ((v15 & 1) != 0)
    goto LABEL_20;
  return result;
}

BOOL _s7Sharing16SFAirDropReceiveO10AskRequestV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char v22;
  __int128 *v23;
  char v24;
  char v25;
  _BOOL8 result;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  id v88;
  char v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  id v94;
  char v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  id v100;
  char v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  BOOL v107;
  int *v108;
  uint64_t v109;
  char v110;
  char v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int (*v116)(uint64_t, uint64_t, uint64_t);
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int *v131;
  uint64_t v132;
  __int128 v133;
  char v134;
  __int128 v135;
  char v136;

  v4 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA48);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v127 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v127 - v18;
  if ((_s7Sharing9SFAirDropO17PermissionRequestV18InterventionActionV2eeoiySbAGy_x_G_AItFZ_0() & 1) == 0)
    return 0;
  v132 = v4;
  v20 = (int *)type metadata accessor for SFAirDropReceive.AskRequest(0);
  v21 = v20[5];
  v22 = *(_BYTE *)(a1 + v21 + 16);
  v135 = *(_OWORD *)(a1 + v21);
  v136 = v22;
  v23 = (__int128 *)(a2 + v21);
  v24 = *((_BYTE *)v23 + 16);
  v133 = *v23;
  v134 = v24;
  _s7Sharing9SFAirDropO12TransferTypeO2eeoiySbAE_AEtFZ_0((uint64_t)&v135);
  if ((v25 & 1) == 0
    || *(_QWORD *)(a1 + v20[6]) != *(_QWORD *)(a2 + v20[6])
    || *(unsigned __int8 *)(a1 + v20[7]) != *(unsigned __int8 *)(a2 + v20[7])
    || *(unsigned __int8 *)(a1 + v20[8]) != *(unsigned __int8 *)(a2 + v20[8])
    || *(unsigned __int8 *)(a1 + v20[9]) != *(unsigned __int8 *)(a2 + v20[9]))
  {
    return 0;
  }
  v27 = v20[10];
  v28 = (_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  if (v29)
  {
    if (!v31)
      return 0;
    if (*v28 != *v30 || v29 != v31)
    {
      v32 = sub_1A2AE3EE0();
      result = 0;
      if ((v32 & 1) == 0)
        return result;
    }
  }
  else if (v31)
  {
    return 0;
  }
  v33 = v20[11];
  v34 = *(_QWORD *)(a1 + v33);
  v35 = *(_QWORD *)(a1 + v33 + 8);
  v36 = (_QWORD *)(a2 + v33);
  if (v34 != *v36 || v35 != v36[1])
  {
    v37 = sub_1A2AE3EE0();
    result = 0;
    if ((v37 & 1) == 0)
      return result;
  }
  v38 = v20[12];
  v39 = *(_QWORD *)(a1 + v38);
  v40 = *(_QWORD *)(a1 + v38 + 8);
  v41 = (_QWORD *)(a2 + v38);
  if (v39 != *v41 || v40 != v41[1])
  {
    v42 = sub_1A2AE3EE0();
    result = 0;
    if ((v42 & 1) == 0)
      return result;
  }
  v43 = v20[13];
  v44 = *(_QWORD *)(a1 + v43);
  v45 = *(_QWORD *)(a1 + v43 + 8);
  v46 = (_QWORD *)(a2 + v43);
  if (v44 != *v46 || v45 != v46[1])
  {
    v47 = sub_1A2AE3EE0();
    result = 0;
    if ((v47 & 1) == 0)
      return result;
  }
  v48 = v20[14];
  v49 = (_QWORD *)(a1 + v48);
  v50 = *(_QWORD *)(a1 + v48 + 8);
  v51 = (_QWORD *)(a2 + v48);
  v52 = v51[1];
  if (v50)
  {
    if (!v52)
      return 0;
    if (*v49 != *v51 || v50 != v52)
    {
      v53 = sub_1A2AE3EE0();
      result = 0;
      if ((v53 & 1) == 0)
        return result;
    }
  }
  else if (v52)
  {
    return 0;
  }
  v54 = v20[15];
  v55 = (_QWORD *)(a1 + v54);
  v56 = *(_QWORD *)(a1 + v54 + 8);
  v57 = (_QWORD *)(a2 + v54);
  v58 = v57[1];
  if (v56)
  {
    if (!v58)
      return 0;
    if (*v55 != *v57 || v56 != v58)
    {
      v59 = sub_1A2AE3EE0();
      result = 0;
      if ((v59 & 1) == 0)
        return result;
    }
  }
  else if (v58)
  {
    return 0;
  }
  v60 = v20[16];
  v61 = (_QWORD *)(a1 + v60);
  v62 = *(_QWORD *)(a1 + v60 + 8);
  v63 = (_QWORD *)(a2 + v60);
  v64 = v63[1];
  if (v62)
  {
    if (!v64)
      return 0;
    if (*v61 != *v63 || v62 != v64)
    {
      v65 = sub_1A2AE3EE0();
      result = 0;
      if ((v65 & 1) == 0)
        return result;
    }
  }
  else if (v64)
  {
    return 0;
  }
  v66 = v20[17];
  v67 = (_QWORD *)(a1 + v66);
  v68 = *(_QWORD *)(a1 + v66 + 8);
  v69 = (_QWORD *)(a2 + v66);
  v70 = v69[1];
  if (v68)
  {
    if (!v70)
      return 0;
    if (*v67 != *v69 || v68 != v70)
    {
      v71 = sub_1A2AE3EE0();
      result = 0;
      if ((v71 & 1) == 0)
        return result;
    }
  }
  else if (v70)
  {
    return 0;
  }
  v72 = v20[18];
  v73 = (_QWORD *)(a1 + v72);
  v74 = *(_QWORD *)(a1 + v72 + 8);
  v75 = (_QWORD *)(a2 + v72);
  v76 = v75[1];
  v131 = v20;
  if (v74)
  {
    if (!v76)
      return 0;
    v20 = v131;
    if (*v73 != *v75 || v74 != v76)
    {
      v77 = sub_1A2AE3EE0();
      v20 = v131;
      v78 = v77;
      result = 0;
      if ((v78 & 1) == 0)
        return result;
    }
  }
  else if (v76)
  {
    return 0;
  }
  v79 = v20[19];
  v80 = *(_QWORD *)(a1 + v79);
  v81 = *(_QWORD *)(a1 + v79 + 8);
  v82 = (_QWORD *)(a2 + v79);
  if (v80 == *v82 && v81 == v82[1] || (v83 = sub_1A2AE3EE0(), result = 0, (v83 & 1) != 0))
  {
    v130 = v10;
    v84 = v20[20];
    v85 = *(void **)(a1 + v84);
    v86 = *(void **)(a2 + v84);
    if (v85)
    {
      if (!v86)
        return 0;
      type metadata accessor for CGImage(0);
      v129 = v87;
      v128 = sub_1A296E8A4((unint64_t *)&qword_1EE67CA50, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1A2AFA298);
      v127 = v86;
      v88 = v85;
      v89 = sub_1A2AE316C();

      if ((v89 & 1) == 0)
        return 0;
    }
    else if (v86)
    {
      return 0;
    }
    v90 = v131[21];
    v91 = *(void **)(a1 + v90);
    v92 = *(void **)(a2 + v90);
    if (v91)
    {
      if (!v92)
        return 0;
      type metadata accessor for CGImage(0);
      v129 = v93;
      v128 = sub_1A296E8A4((unint64_t *)&qword_1EE67CA50, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1A2AFA298);
      v127 = v92;
      v94 = v91;
      v95 = sub_1A2AE316C();

      if ((v95 & 1) == 0)
        return 0;
    }
    else if (v92)
    {
      return 0;
    }
    v96 = v131[22];
    v97 = *(void **)(a1 + v96);
    v98 = *(void **)(a2 + v96);
    if (v97)
    {
      if (!v98)
        return 0;
      type metadata accessor for CGImage(0);
      v129 = v99;
      v128 = sub_1A296E8A4((unint64_t *)&qword_1EE67CA50, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1A2AFA298);
      v127 = v98;
      v100 = v97;
      v101 = sub_1A2AE316C();

      if ((v101 & 1) == 0)
        return 0;
    }
    else if (v98)
    {
      return 0;
    }
    v102 = v131[23];
    v103 = (_QWORD *)(a1 + v102);
    v104 = *(_QWORD *)(a1 + v102 + 8);
    v105 = (_QWORD *)(a2 + v102);
    v106 = v105[1];
    if (!v104)
    {
      v109 = (uint64_t)v130;
      v108 = v131;
      if (v106)
        return 0;
      goto LABEL_86;
    }
    if (!v106)
      return 0;
    v107 = *v103 == *v105;
    v109 = (uint64_t)v130;
    v108 = v131;
    if (v107 && v104 == v106 || (v110 = sub_1A2AE3EE0(), v108 = v131, v111 = v110, result = 0, (v111 & 1) != 0))
    {
LABEL_86:
      v112 = v108;
      sub_1A2A0C99C(a1 + v108[24], (uint64_t)v19);
      sub_1A2A0C99C(a2 + v112[24], (uint64_t)v17);
      v113 = *(int *)(v8 + 48);
      v114 = v109;
      v115 = v109 + v113;
      sub_1A2A0C99C((uint64_t)v19, v114);
      sub_1A2A0C99C((uint64_t)v17, v115);
      v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v116(v114, 1, v132) == 1)
      {
        sub_1A296F108((uint64_t)v17, &qword_1EE67B7D8);
        sub_1A296F108((uint64_t)v19, &qword_1EE67B7D8);
        if (v116(v115, 1, v132) == 1)
        {
          sub_1A296F108((uint64_t)v130, &qword_1EE67B7D8);
LABEL_93:
          if ((sub_1A2A0CF2C(*(_QWORD *)(a1 + v131[25]), *(_QWORD *)(a2 + v131[25])) & 1) == 0
            || (sub_1A2A0D29C(*(_QWORD *)(a1 + v131[26]), *(_QWORD *)(a2 + v131[26])) & 1) == 0)
          {
            return 0;
          }
          v119 = v131[27];
          v120 = *(_QWORD *)(a1 + v119);
          v121 = *(_QWORD *)(a1 + v119 + 8);
          v122 = (uint64_t *)(a2 + v119);
          v123 = *v122;
          v124 = v122[1];
          if (v121 >> 60 == 15)
          {
            if (v124 >> 60 == 15)
              return 1;
            goto LABEL_99;
          }
          if (v124 >> 60 == 15)
          {
LABEL_99:
            sub_1A297CF68(v120, v121);
            sub_1A297CF68(v123, v124);
            sub_1A29B98D8(v120, v121);
            sub_1A29B98D8(v123, v124);
            return 0;
          }
          sub_1A297CF68(v120, v121);
          sub_1A297CF68(v123, v124);
          sub_1A2A10E0C(v120, v121);
          v126 = v125;
          sub_1A29B98D8(v123, v124);
          sub_1A29B98D8(v120, v121);
          return (v126 & 1) != 0;
        }
      }
      else
      {
        sub_1A2A0C99C((uint64_t)v130, (uint64_t)v14);
        if (v116(v115, 1, v132) != 1)
        {
          sub_1A297EB48(v115, (uint64_t)v7, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
          _s7Sharing16SFAirDropReceiveO10AskRequestV24AdvancedItemsDescriptionO2eeoiySbAG_AGtFZ_0((uint64_t)v14, (uint64_t)v7);
          v118 = v117;
          sub_1A297DA3C((uint64_t)v7, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
          sub_1A296F108((uint64_t)v17, &qword_1EE67B7D8);
          sub_1A296F108((uint64_t)v19, &qword_1EE67B7D8);
          sub_1A297DA3C((uint64_t)v14, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
          sub_1A296F108((uint64_t)v130, &qword_1EE67B7D8);
          if ((v118 & 1) == 0)
            return 0;
          goto LABEL_93;
        }
        sub_1A296F108((uint64_t)v17, &qword_1EE67B7D8);
        sub_1A296F108((uint64_t)v19, &qword_1EE67B7D8);
        sub_1A297DA3C((uint64_t)v14, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
      }
      sub_1A296F108((uint64_t)v130, &qword_1EE67CA48);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1A2A121CC()
{
  unint64_t result;

  result = qword_1EE67C930;
  if (!qword_1EE67C930)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01714, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C930);
  }
  return result;
}

unint64_t sub_1A2A12210()
{
  unint64_t result;

  result = qword_1EE67C940;
  if (!qword_1EE67C940)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.TransferType, &type metadata for SFAirDrop.TransferType);
    atomic_store(result, (unint64_t *)&qword_1EE67C940);
  }
  return result;
}

unint64_t sub_1A2A12254()
{
  unint64_t result;

  result = qword_1EE67C948;
  if (!qword_1EE67C948)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFCodableCGImage, &type metadata for SFCodableCGImage);
    atomic_store(result, (unint64_t *)&qword_1EE67C948);
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE674758);
}

unint64_t sub_1A2A122AC()
{
  unint64_t result;

  result = qword_1EE67C978;
  if (!qword_1EE67C978)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo, &type metadata for SFAirDropReceive.AskRequest.ItemInfo);
    atomic_store(result, (unint64_t *)&qword_1EE67C978);
  }
  return result;
}

unint64_t sub_1A2A122F0()
{
  unint64_t result;

  result = qword_1EE67C990;
  if (!qword_1EE67C990)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.TransferType, &type metadata for SFAirDrop.TransferType);
    atomic_store(result, (unint64_t *)&qword_1EE67C990);
  }
  return result;
}

unint64_t sub_1A2A12334()
{
  unint64_t result;

  result = qword_1EE67C998;
  if (!qword_1EE67C998)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFCodableCGImage, &type metadata for SFCodableCGImage);
    atomic_store(result, (unint64_t *)&qword_1EE67C998);
  }
  return result;
}

uint64_t sub_1A2A12378(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67C958);
    v10 = sub_1A296E8A4(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], a3);
    result = MEMORY[0x1A85895EC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A2A123FC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67C968);
    v8 = a2();
    result = MEMORY[0x1A85895EC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A2A12464()
{
  unint64_t result;

  result = qword_1EE67C9B8;
  if (!qword_1EE67C9B8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo, &type metadata for SFAirDropReceive.AskRequest.ItemInfo);
    atomic_store(result, (unint64_t *)&qword_1EE67C9B8);
  }
  return result;
}

unint64_t sub_1A2A124A8()
{
  unint64_t result;

  result = qword_1EE67C9C8;
  if (!qword_1EE67C9C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B016C4, &_s10AskRequestV8ItemInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67C9C8);
  }
  return result;
}

unint64_t sub_1A2A124EC()
{
  unint64_t result;

  result = qword_1EE67C9E0;
  if (!qword_1EE67C9E0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys, &type metadata for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C9E0);
  }
  return result;
}

unint64_t sub_1A2A12534()
{
  unint64_t result;

  result = qword_1EE67C9F0;
  if (!qword_1EE67C9F0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo, &type metadata for SFAirDropReceive.AskRequest.ItemInfo);
    atomic_store(result, (unint64_t *)&qword_1EE67C9F0);
  }
  return result;
}

unint64_t sub_1A2A1257C()
{
  unint64_t result;

  result = qword_1EE67C9F8;
  if (!qword_1EE67C9F8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys, &type metadata for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67C9F8);
  }
  return result;
}

unint64_t sub_1A2A125C4()
{
  unint64_t result;

  result = qword_1EE67CA00;
  if (!qword_1EE67CA00)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys, &type metadata for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CA00);
  }
  return result;
}

unint64_t sub_1A2A1260C()
{
  unint64_t result;

  result = qword_1EE67CA08;
  if (!qword_1EE67CA08)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys, &type metadata for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CA08);
  }
  return result;
}

id sub_1A2A12650@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 80));
  *a2 = v3;
  return v3;
}

id sub_1A2A12688@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 84));
  *a2 = v3;
  return v3;
}

id sub_1A2A126C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + *(int *)(type metadata accessor for SFAirDropReceive.AskRequest(0) + 88));
  *a2 = v3;
  return v3;
}

_QWORD *_s10AskRequestVwCP(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  unint64_t v70;
  uint64_t v71;
  char *v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *__dst;
  uint64_t v82;
  uint64_t v83;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v64 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v64 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = v10[16];
    sub_1A2993E70(*(_QWORD *)v10, v12, v13);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v13;
    v14 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    v16 = a3[10];
    v17 = a3[11];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v82 = v19[1];
    *v18 = *v19;
    v18[1] = v82;
    v20 = (_QWORD *)((char *)a1 + v17);
    v21 = (_QWORD *)((char *)a2 + v17);
    v83 = v21[1];
    *v20 = *v21;
    v20[1] = v83;
    v22 = a3[12];
    v23 = a3[13];
    v24 = (_QWORD *)((char *)a1 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v79 = v25[1];
    *v24 = *v25;
    v24[1] = v79;
    v26 = (_QWORD *)((char *)a1 + v23);
    v27 = (_QWORD *)((char *)a2 + v23);
    v80 = v27[1];
    *v26 = *v27;
    v26[1] = v80;
    v28 = a3[14];
    v29 = a3[15];
    v30 = (_QWORD *)((char *)a1 + v28);
    v31 = (_QWORD *)((char *)a2 + v28);
    v77 = v31[1];
    *v30 = *v31;
    v30[1] = v77;
    v32 = (_QWORD *)((char *)a1 + v29);
    v33 = (_QWORD *)((char *)a2 + v29);
    v78 = v33[1];
    *v32 = *v33;
    v32[1] = v78;
    v34 = a3[16];
    v35 = a3[17];
    v36 = (_QWORD *)((char *)a1 + v34);
    v37 = (_QWORD *)((char *)a2 + v34);
    v75 = v37[1];
    *v36 = *v37;
    v36[1] = v75;
    v38 = (_QWORD *)((char *)a1 + v35);
    v39 = (_QWORD *)((char *)a2 + v35);
    v76 = v39[1];
    *v38 = *v39;
    v38[1] = v76;
    v40 = a3[18];
    v41 = a3[19];
    v42 = (_QWORD *)((char *)a1 + v40);
    v43 = (_QWORD *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (_QWORD *)((char *)a1 + v41);
    v46 = (_QWORD *)((char *)a2 + v41);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = a3[20];
    v49 = a3[21];
    v50 = *(void **)((char *)a2 + v48);
    *(_QWORD *)((char *)a1 + v48) = v50;
    v51 = *(void **)((char *)a2 + v49);
    *(_QWORD *)((char *)a1 + v49) = v51;
    v52 = a3[22];
    v53 = a3[23];
    v54 = *(void **)((char *)a2 + v52);
    *(_QWORD *)((char *)a1 + v52) = v54;
    v55 = (_QWORD *)((char *)a1 + v53);
    v56 = (_QWORD *)((char *)a2 + v53);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = a3[24];
    __dst = (char *)a1 + v58;
    v73 = (char *)a2 + v58;
    v59 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
    v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60 = v50;
    v61 = v51;
    v62 = v54;
    swift_bridgeObjectRetain();
    if (!v74(v73, 1, v59))
    {
      v65 = (char *)&loc_1A2A129D0 + 4 * byte_1A2B00FAE[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    memcpy(__dst, v73, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    v66 = a3[26];
    *(_QWORD *)((char *)a1 + a3[25]) = *(_QWORD *)((char *)a2 + a3[25]);
    *(_QWORD *)((char *)a1 + v66) = *(_QWORD *)((char *)a2 + v66);
    v67 = a3[27];
    v68 = (char *)a1 + v67;
    v69 = (_OWORD *)((char *)a2 + v67);
    v70 = *(_QWORD *)((char *)a2 + v67 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v70 >> 60 == 15)
    {
      *(_OWORD *)v68 = *v69;
    }
    else
    {
      v71 = *(_QWORD *)v69;
      sub_1A2973524(v71, v70);
      *(_QWORD *)v68 = v71;
      *((_QWORD *)v68 + 1) = v70;
    }
  }
  return a1;
}

void sub_1A2A12A8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v2 = v0[1];
  *v1 = *v0;
  v1[1] = v2;
  v3 = v0;
  v4 = v0[2];
  v5 = v0[3];
  v1[2] = v4;
  v1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v7 = *(int *)(v6 + 64);
  v10 = (char *)v1 + v7;
  v8 = (char *)v3 + v7;
  v9 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v8, v9);
  *((_BYTE *)v1 + *(int *)(v6 + 80)) = *((_BYTE *)v3 + *(int *)(v6 + 80));
  JUMPOUT(0x1A2A129E4);
}

void sub_1A2A12AFC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v0[1];
  *v1 = *v0;
  v1[1] = v2;
  JUMPOUT(0x1A2A129E0);
}

uint64_t _s10AskRequestVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_1A2994E20(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v5 = a1 + a2[24];
  v6 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        swift_bridgeObjectRelease();
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = v5 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0) + 64);
        v11 = sub_1A2AE30C4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v8 = (uint64_t *)(a1 + a2[27]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_1A29736C4(*v8, v9);
  return result;
}

uint64_t _s10AskRequestVwcp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  uint64_t v69;
  const void *v71;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *__dst;
  uint64_t v80;
  uint64_t v81;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_1A2993E70(*(_QWORD *)v9, v11, v12);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  v13 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[10];
  v16 = a3[11];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v80 = v18[1];
  *v17 = *v18;
  v17[1] = v80;
  v19 = (_QWORD *)(a1 + v16);
  v20 = (_QWORD *)(a2 + v16);
  v81 = v20[1];
  *v19 = *v20;
  v19[1] = v81;
  v21 = a3[12];
  v22 = a3[13];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v77 = v24[1];
  *v23 = *v24;
  v23[1] = v77;
  v25 = (_QWORD *)(a1 + v22);
  v26 = (_QWORD *)(a2 + v22);
  v78 = v26[1];
  *v25 = *v26;
  v25[1] = v78;
  v27 = a3[14];
  v28 = a3[15];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v75 = v30[1];
  *v29 = *v30;
  v29[1] = v75;
  v31 = (_QWORD *)(a1 + v28);
  v32 = (_QWORD *)(a2 + v28);
  v76 = v32[1];
  *v31 = *v32;
  v31[1] = v76;
  v33 = a3[16];
  v34 = a3[17];
  v35 = (_QWORD *)(a1 + v33);
  v36 = (_QWORD *)(a2 + v33);
  v73 = v36[1];
  *v35 = *v36;
  v35[1] = v73;
  v37 = (_QWORD *)(a1 + v34);
  v38 = (_QWORD *)(a2 + v34);
  v74 = v38[1];
  *v37 = *v38;
  v37[1] = v74;
  v39 = a3[18];
  v40 = a3[19];
  v41 = (_QWORD *)(a1 + v39);
  v42 = (_QWORD *)(a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = (_QWORD *)(a1 + v40);
  v45 = (_QWORD *)(a2 + v40);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = a3[20];
  v48 = a3[21];
  v49 = *(void **)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v49;
  v50 = *(void **)(a2 + v48);
  *(_QWORD *)(a1 + v48) = v50;
  v51 = a3[22];
  v52 = a3[23];
  v53 = *(void **)(a2 + v51);
  *(_QWORD *)(a1 + v51) = v53;
  v54 = (_QWORD *)(a1 + v52);
  v55 = (_QWORD *)(a2 + v52);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = a3[24];
  __dst = (void *)(a1 + v57);
  v71 = (const void *)(a2 + v57);
  v58 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59 = v49;
  v60 = v50;
  v61 = v53;
  swift_bridgeObjectRetain();
  if (!v72(v71, 1, v58))
  {
    v63 = (char *)&loc_1A2A12FD0 + 4 * byte_1A2B00FBC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
  memcpy(__dst, v71, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  v64 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  v65 = a3[27];
  v66 = a1 + v65;
  v67 = (_OWORD *)(a2 + v65);
  v68 = *(_QWORD *)(a2 + v65 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v68 >> 60 == 15)
  {
    *(_OWORD *)v66 = *v67;
  }
  else
  {
    v69 = *(_QWORD *)v67;
    sub_1A2973524(v69, v68);
    *(_QWORD *)v66 = v69;
    *(_QWORD *)(v66 + 8) = v68;
  }
  return a1;
}

void sub_1A2A1308C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v2 = v0[1];
  *v1 = *v0;
  v1[1] = v2;
  v3 = v0;
  v4 = v0[2];
  v5 = v0[3];
  v1[2] = v4;
  v1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v7 = *(int *)(v6 + 64);
  v10 = (char *)v1 + v7;
  v8 = (char *)v3 + v7;
  v9 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v8, v9);
  *((_BYTE *)v1 + *(int *)(v6 + 80)) = *((_BYTE *)v3 + *(int *)(v6 + 80));
  JUMPOUT(0x1A2A12FE4);
}

void sub_1A2A130FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v0[1];
  *v1 = *v0;
  v1[1] = v2;
  JUMPOUT(0x1A2A12FE0);
}

uint64_t _s10AskRequestVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v78;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_1A2993E70(*(_QWORD *)v9, v11, v12);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  v15 = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = v12;
  sub_1A2994E20(v13, v14, v15);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v16 = a3[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[12];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[13];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[14];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[15];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[16];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[17];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[18];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  *v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[19];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  *v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = a3[20];
  v47 = *(void **)(a1 + v46);
  v48 = *(void **)(a2 + v46);
  *(_QWORD *)(a1 + v46) = v48;
  v49 = v48;

  v50 = a3[21];
  v51 = *(void **)(a1 + v50);
  v52 = *(void **)(a2 + v50);
  *(_QWORD *)(a1 + v50) = v52;
  v53 = v52;

  v54 = a3[22];
  v55 = *(void **)(a1 + v54);
  v56 = *(void **)(a2 + v54);
  *(_QWORD *)(a1 + v54) = v56;
  v57 = v56;

  v58 = a3[23];
  v59 = (_QWORD *)(a1 + v58);
  v60 = (_QWORD *)(a2 + v58);
  *v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = a3[24];
  v62 = (void *)(a1 + v61);
  v63 = (void *)(a2 + v61);
  v64 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48);
  LODWORD(v8) = v65(v62, 1, v64);
  v66 = v65(v63, 1, v64);
  if ((_DWORD)v8)
  {
    if (!v66)
    {
      v67 = (char *)&loc_1A2A13460 + 4 * byte_1A2B00FC3[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v66)
  {
    sub_1A297DA3C((uint64_t)v62, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
LABEL_6:
    v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)v62, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v78 = (char *)sub_1A2A135F8 + 4 * byte_1A2B00FCA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_7:
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v69 = a3[27];
  v70 = (uint64_t *)(a1 + v69);
  v71 = (uint64_t *)(a2 + v69);
  v72 = *(_QWORD *)(a2 + v69 + 8);
  if (*(_QWORD *)(a1 + v69 + 8) >> 60 != 15)
  {
    if (v72 >> 60 != 15)
    {
      v74 = *v71;
      sub_1A2973524(v74, v72);
      v75 = *v70;
      v76 = v70[1];
      *v70 = v74;
      v70[1] = v72;
      sub_1A29736C4(v75, v76);
      return a1;
    }
    sub_1A299C970((uint64_t)v70);
    goto LABEL_12;
  }
  if (v72 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v70 = *(_OWORD *)v71;
    return a1;
  }
  v73 = *v71;
  sub_1A2973524(v73, v72);
  *v70 = v73;
  v70[1] = v72;
  return a1;
}

void sub_1A2A135F8()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A13628()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v3 = *(int *)(v2 + 64);
  v6 = (char *)v0 + v3;
  v4 = (char *)v1 + v3;
  v5 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
  *((_BYTE *)v0 + *(int *)(v2 + 80)) = *((_BYTE *)v1 + *(int *)(v2 + 80));
  JUMPOUT(0x1A2A1347CLL);
}

void sub_1A2A136A4()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  JUMPOUT(0x1A2A13478);
}

void sub_1A2A136B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v3 = *(int *)(v2 + 64);
  v4 = (char *)v0 + v3;
  v5 = (char *)v1 + v3;
  v6 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v5, v6);
  *((_BYTE *)v0 + *(int *)(v2 + 80)) = *((_BYTE *)v1 + *(int *)(v2 + 80));
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A13740()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A13770()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A137A0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A137D0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

void sub_1A2A13800()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x1A2A134DCLL);
}

uint64_t _s10AskRequestVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  v20 = (_OWORD *)(a1 + v19);
  v21 = (_OWORD *)(a2 + v19);
  v22 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = v21[1];
      *v20 = *v21;
      v20[1] = v25;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
      v27 = *(int *)(v26 + 64);
      v28 = (char *)v20 + v27;
      v29 = (char *)v21 + v27;
      v30 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *((_BYTE *)v20 + *(int *)(v26 + 80)) = *((_BYTE *)v21 + *(int *)(v26 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(v23 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v31 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  return a1;
}

uint64_t _s10AskRequestVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(_OWORD *, uint64_t, uint64_t);
  int v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  size_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v13 = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = v10;
  sub_1A2994E20(v11, v12, v13);
  v14 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = a3[11];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[12];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[13];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[14];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  v41 = a3[15];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  v46 = a3[16];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  v51 = a3[17];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (uint64_t *)(a2 + v51);
  v55 = *v53;
  v54 = v53[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v56 = a3[18];
  v57 = (_QWORD *)(a1 + v56);
  v58 = (uint64_t *)(a2 + v56);
  v60 = *v58;
  v59 = v58[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease();
  v61 = a3[19];
  v62 = (_QWORD *)(a1 + v61);
  v63 = (uint64_t *)(a2 + v61);
  v65 = *v63;
  v64 = v63[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  v66 = a3[20];
  v67 = *(void **)(a1 + v66);
  *(_QWORD *)(a1 + v66) = *(_QWORD *)(a2 + v66);

  v68 = a3[21];
  v69 = *(void **)(a1 + v68);
  *(_QWORD *)(a1 + v68) = *(_QWORD *)(a2 + v68);

  v70 = a3[22];
  v71 = *(void **)(a1 + v70);
  *(_QWORD *)(a1 + v70) = *(_QWORD *)(a2 + v70);

  v72 = a3[23];
  v73 = (_QWORD *)(a1 + v72);
  v74 = (uint64_t *)(a2 + v72);
  v76 = *v74;
  v75 = v74[1];
  *v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  v77 = a3[24];
  v78 = (_OWORD *)(a1 + v77);
  v79 = (_OWORD *)(a2 + v77);
  v80 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v81 + 48);
  v83 = v82(v78, 1, v80);
  v84 = v82(v79, 1, v80);
  if (!v83)
  {
    if (!v84)
    {
      if (a1 == a2)
        goto LABEL_14;
      sub_1A297DA3C((uint64_t)v78, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v92 = v79[1];
        *v78 = *v79;
        v78[1] = v92;
        v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
        v94 = *(int *)(v93 + 64);
        v95 = (char *)v78 + v94;
        v96 = (char *)v79 + v94;
        v97 = sub_1A2AE30C4();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32))(v95, v96, v97);
        *((_BYTE *)v78 + *(int *)(v93 + 80)) = *((_BYTE *)v79 + *(int *)(v93 + 80));
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v91 = *(_QWORD *)(v81 + 64);
LABEL_8:
      memcpy(v78, v79, v91);
      goto LABEL_14;
    }
    sub_1A297DA3C((uint64_t)v78, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
LABEL_7:
    v91 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8) - 8) + 64);
    goto LABEL_8;
  }
  if (v84)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v85 = v79[1];
    *v78 = *v79;
    v78[1] = v85;
    v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
    v87 = *(int *)(v86 + 64);
    v88 = (char *)v78 + v87;
    v89 = (char *)v79 + v87;
    v90 = sub_1A2AE30C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
    *((_BYTE *)v78 + *(int *)(v86 + 80)) = *((_BYTE *)v79 + *(int *)(v86 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v78, v79, *(_QWORD *)(v81 + 64));
  }
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
LABEL_14:
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  swift_bridgeObjectRelease();
  v98 = a3[27];
  v99 = (uint64_t *)(a1 + v98);
  v100 = (uint64_t *)(a2 + v98);
  v101 = *(_QWORD *)(a1 + v98 + 8);
  if (v101 >> 60 != 15)
  {
    v102 = v100[1];
    if (v102 >> 60 != 15)
    {
      v103 = *v99;
      *v99 = *v100;
      v99[1] = v102;
      sub_1A29736C4(v103, v101);
      return a1;
    }
    sub_1A299C970((uint64_t)v99);
  }
  *(_OWORD *)v99 = *(_OWORD *)v100;
  return a1;
}

uint64_t _s10AskRequestVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A13EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    v10 = a1 + *(int *)(a3 + 96);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 44) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t _s10AskRequestVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A13F98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for SFAirDrop.TransferIdentifier();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 44) + 8) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D8);
    v12 = a1 + *(int *)(a4 + 96);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A2A14044()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A2AE3130();
  if (v0 <= 0x3F)
  {
    sub_1A2A14138();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1A2A14138()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE674768)
  {
    type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(255);
    v0 = sub_1A2AE39F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE674768);
  }
}

uint64_t _s10AskRequestV8ItemInfoVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s10AskRequestV8ItemInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s10AskRequestV8ItemInfoVwca(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s10AskRequestV8ItemInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10AskRequestV8ItemInfoVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10AskRequestV8ItemInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo()
{
  return &type metadata for SFAirDropReceive.AskRequest.ItemInfo;
}

uint64_t _s10AskRequestV24AdvancedItemsDescriptionOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1A2A14484 + 4 * byte_1A2B00FD1[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t _s10AskRequestV24AdvancedItemsDescriptionOwxx(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      result = swift_bridgeObjectRelease();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0) + 64);
      v4 = sub_1A2AE30C4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

void _s10AskRequestV24AdvancedItemsDescriptionOwcp()
{
  char *v0;

  v0 = (char *)sub_1A2A146EC + 4 * byte_1A2B00FDF[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1A2A146EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

void sub_1A2A1472C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v5 = *(int *)(v4 + 64);
  v6 = (char *)v0 + v5;
  v7 = (char *)v1 + v5;
  v8 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  *((_BYTE *)v0 + *(int *)(v4 + 80)) = *((_BYTE *)v1 + *(int *)(v4 + 80));
  JUMPOUT(0x1A2A14700);
}

void sub_1A2A14794()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  JUMPOUT(0x1A2A146FCLL);
}

uint64_t _s10AskRequestV24AdvancedItemsDescriptionOwca(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1A297DA3C(result, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v2 = (char *)&loc_1A2A14808 + 4 * byte_1A2B00FE6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void sub_1A2A14850()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
  v3 = *(int *)(v2 + 64);
  v4 = (char *)v0 + v3;
  v5 = (char *)v1 + v3;
  v6 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v5, v6);
  *((_BYTE *)v0 + *(int *)(v2 + 80)) = *((_BYTE *)v1 + *(int *)(v2 + 80));
  JUMPOUT(0x1A2A14824);
}

void sub_1A2A148C8()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  JUMPOUT(0x1A2A14820);
}

_OWORD *_s10AskRequestV24AdvancedItemsDescriptionOwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
    v8 = *(int *)(v7 + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A2AE30C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(v7 + 80)) = *((_BYTE *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *_s10AskRequestV24AdvancedItemsDescriptionOwta(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)a1, type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7D0);
      v8 = *(int *)(v7 + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_1A2AE30C4();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *((_BYTE *)a1 + *(int *)(v7 + 80)) = *((_BYTE *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1A2A14A7C()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = &unk_1A2B014F0;
  result = sub_1A2AE30C4();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v4 = &v2;
    v5 = &unk_1A2B014F0;
    v6 = &unk_1A2B014F0;
    v7 = &unk_1A2B014F0;
    v8 = &unk_1A2B014F0;
    v9 = &unk_1A2B01470;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s10AskRequestV24AdvancedItemsDescriptionO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1A2A14B78 + 4 * byte_1A2B00FF2[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1A2A14BAC + 4 * byte_1A2B00FED[v4]))();
}

uint64_t sub_1A2A14BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A14BBCLL);
  return result;
}

uint64_t sub_1A2A14BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A14BD0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1A2A14BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys()
{
  return &type metadata for SFAirDropReceive.AskRequest.AdvancedItemsDescription.CodingKeys;
}

uint64_t _s10AskRequestV8ItemInfoV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A2A14C44 + 4 * byte_1A2B00FFC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A2A14C78 + 4 * byte_1A2B00FF7[v4]))();
}

uint64_t sub_1A2A14C78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14C80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A14C88);
  return result;
}

uint64_t sub_1A2A14C94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A14C9CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A2A14CA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14CA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10AskRequestV8ItemInfoV10CodingKeysOMa()
{
  return &_s10AskRequestV8ItemInfoV10CodingKeysON;
}

uint64_t _s10AskRequestV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10AskRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1A2A14DA0 + 4 * byte_1A2B01006[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1A2A14DD4 + 4 * byte_1A2B01001[v4]))();
}

uint64_t sub_1A2A14DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A14DE4);
  return result;
}

uint64_t sub_1A2A14DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A14DF8);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1A2A14DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A14E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10AskRequestV10CodingKeysOMa()
{
  return &_s10AskRequestV10CodingKeysON;
}

unint64_t sub_1A2A14E24()
{
  unint64_t result;

  result = qword_1EE67CA10;
  if (!qword_1EE67CA10)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B015E4, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA10);
  }
  return result;
}

unint64_t sub_1A2A14E6C()
{
  unint64_t result;

  result = qword_1EE67CA18;
  if (!qword_1EE67CA18)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0169C, &_s10AskRequestV8ItemInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA18);
  }
  return result;
}

unint64_t sub_1A2A14EB4()
{
  unint64_t result;

  result = qword_1EE67CA20;
  if (!qword_1EE67CA20)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0160C, &_s10AskRequestV8ItemInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA20);
  }
  return result;
}

unint64_t sub_1A2A14EFC()
{
  unint64_t result;

  result = qword_1EE67CA28;
  if (!qword_1EE67CA28)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01634, &_s10AskRequestV8ItemInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA28);
  }
  return result;
}

unint64_t sub_1A2A14F44()
{
  unint64_t result;

  result = qword_1EE67CA30;
  if (!qword_1EE67CA30)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01554, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA30);
  }
  return result;
}

unint64_t sub_1A2A14F8C()
{
  unint64_t result;

  result = qword_1EE67CA38;
  if (!qword_1EE67CA38)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0157C, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CA38);
  }
  return result;
}

uint64_t sub_1A2A14FD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xED00007365707954 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x416F7475416E6163 && a2 == 0xED00007470656363 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B465E0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73497265646E6573 && a2 == 0xEA0000000000654DLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46600 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x75427265646E6573 && a2 == 0xEE004449656C646ELL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001A2B46620 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F4D7265646E6573 && a2 == 0xEF656D614E6C6564 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6D457265646E6573 && a2 == 0xEB000000006C6961 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6D457265646E6573 && a2 == 0xEF687361486C6961 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B46640 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x69467265646E6573 && a2 == 0xEF656D614E747372 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x614C7265646E6573 && a2 == 0xEE00656D614E7473 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x44497265646E6573 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x63497265646E6573 && a2 == 0xEA00000000006E6FLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46660 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x4977656976657270 && a2 == 0xEC0000006567616DLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B46680 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A2B466A0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x736D6574496C7275 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x61506D6F74737563 && a2 == 0xED000064616F6C79)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 23;
    else
      return 24;
  }
}

uint64_t sub_1A2A15A20(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B466C0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x506D6F42656C6966 && a2 == 0xEB00000000687461 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69447349656C6966 && a2 == 0xEF79726F74636572 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x54627553656C6966 && a2 == 0xEB00000000657079 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65707954656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1A2A15CF0()
{
  return swift_release();
}

uint64_t sub_1A2A15CF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A15D34 + 4 * byte_1A2B01764[a1]))(0xD000000000000020, 0x80000001A2B46910);
}

unint64_t sub_1A2A15D34()
{
  return 0xD000000000000016;
}

uint64_t sub_1A2A15D50()
{
  uint64_t v0;

  return v0 + 40;
}

uint64_t sub_1A2A15DE8()
{
  void *v0;
  void *v1;
  id v2;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v1 = (void *)sub_1A2AE340C();
  v2 = objc_msgSend(v0, sel_cuValueForEntitlementNoCache_, v1);

  if (v2)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1A296E450((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast())
      return *(_QWORD *)&v4[0];
    else
      return 0;
  }
  else
  {
    sub_1A29B84DC((uint64_t)v5);
    return 0;
  }
}

unint64_t static Logger.sharingSubsystem.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_1A2A15EF0(uint64_t a1)
{
  return sub_1A2A16074(a1, qword_1EE676010);
}

uint64_t static Logger.airDropNWClient.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A15F7C(&qword_1EE676030, (uint64_t)qword_1EE676010, a1);
}

uint64_t sub_1A2A15F38(uint64_t a1)
{
  return sub_1A2A16074(a1, qword_1EE675D08);
}

uint64_t static Logger.askToAirDrop.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A15F7C(&qword_1EE675D28, (uint64_t)qword_1EE675D08, a1);
}

uint64_t sub_1A2A15F7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1A2AE31D8();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_1A2A15FE4(uint64_t a1)
{
  return sub_1A2A16074(a1, qword_1EE67CA68);
}

uint64_t static Logger.communal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A15F7C(&qword_1EE67AA40, (uint64_t)qword_1EE67CA68, a1);
}

uint64_t sub_1A2A16020(uint64_t a1)
{
  return sub_1A2A16074(a1, qword_1ECEFC700);
}

uint64_t static Logger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A15F7C(qword_1ECEFB8A8, (uint64_t)qword_1ECEFC700, a1);
}

uint64_t sub_1A2A16054(uint64_t a1)
{
  return sub_1A2A16074(a1, qword_1EE67CA80);
}

uint64_t sub_1A2A16074(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1A2AE31CC();
}

uint64_t static Logger.utility.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A15F7C(&qword_1EE67AA50, (uint64_t)qword_1EE67CA80, a1);
}

uint64_t Range<>.interval.getter()
{
  return sub_1A2A1611C(&qword_1EE67CA98);
}

uint64_t ClosedRange<>.interval.getter()
{
  return sub_1A2A1611C(&qword_1EE67CAA0);
}

uint64_t sub_1A2A1611C(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  return sub_1A2AE2FC8();
}

_BYTE *static FormatStyle<>.oslog(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL static OSLogDateFormatter.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t OSLogDateFormatter.Style.hash(into:)()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A2A161A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A161D4 + 4 * byte_1A2B01770[*v0]))(0xD000000000000010, 0x80000001A2B46A20);
}

uint64_t sub_1A2A161D4()
{
  return 1702125924;
}

uint64_t sub_1A2A161E4()
{
  return 1701669236;
}

uint64_t sub_1A2A161F4()
{
  return 0x69546F4E656D6974;
}

uint64_t sub_1A2A16218()
{
  return 1819047270;
}

uint64_t sub_1A2A16228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A187AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A1624C()
{
  sub_1A2A167B4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A16274()
{
  sub_1A2A167B4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A1629C()
{
  sub_1A2A168C4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A162C4()
{
  sub_1A2A168C4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A162EC()
{
  sub_1A2A16908();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A16314()
{
  sub_1A2A16908();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A1633C()
{
  sub_1A2A167F8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A16364()
{
  sub_1A2A167F8();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A1638C()
{
  sub_1A2A16880();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A163B4()
{
  sub_1A2A16880();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A163DC()
{
  sub_1A2A1683C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A16404()
{
  sub_1A2A1683C();
  return sub_1A2AE4108();
}

void OSLogDateFormatter.Style.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAA8);
  v14[11] = *(_QWORD *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x1E0C80A78](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAB0);
  v14[8] = *(_QWORD *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x1E0C80A78](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAB8);
  v14[5] = *(_QWORD *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x1E0C80A78](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAC0);
  v14[2] = *(_QWORD *)(v9 - 8);
  v14[3] = v9;
  MEMORY[0x1E0C80A78](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAC8);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CAD0);
  v14[14] = *(_QWORD *)(v12 - 8);
  v14[15] = v12;
  MEMORY[0x1E0C80A78](v12);
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A167B4();
  sub_1A2AE40E4();
  __asm { BR              X9 }
}

uint64_t sub_1A2A16620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  sub_1A2A16908();
  v5 = *(_QWORD *)(v4 - 88);
  sub_1A2AE3DB4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
}

unint64_t sub_1A2A167B4()
{
  unint64_t result;

  result = qword_1EE67CAD8;
  if (!qword_1EE67CAD8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B024B8, &type metadata for OSLogDateFormatter.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CAD8);
  }
  return result;
}

unint64_t sub_1A2A167F8()
{
  unint64_t result;

  result = qword_1EE67CAE0;
  if (!qword_1EE67CAE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02468, &type metadata for OSLogDateFormatter.Style.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CAE0);
  }
  return result;
}

unint64_t sub_1A2A1683C()
{
  unint64_t result;

  result = qword_1EE67CAE8;
  if (!qword_1EE67CAE8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02418, &type metadata for OSLogDateFormatter.Style.TimeNoTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CAE8);
  }
  return result;
}

unint64_t sub_1A2A16880()
{
  unint64_t result;

  result = qword_1EE67CAF0;
  if (!qword_1EE67CAF0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B023C8, &type metadata for OSLogDateFormatter.Style.TimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CAF0);
  }
  return result;
}

unint64_t sub_1A2A168C4()
{
  unint64_t result;

  result = qword_1EE67CAF8;
  if (!qword_1EE67CAF8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02378, &type metadata for OSLogDateFormatter.Style.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CAF8);
  }
  return result;
}

unint64_t sub_1A2A16908()
{
  unint64_t result;

  result = qword_1EE67CB00;
  if (!qword_1EE67CB00)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02328, &type metadata for OSLogDateFormatter.Style.DateWithTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CB00);
  }
  return result;
}

uint64_t OSLogDateFormatter.Style.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t OSLogDateFormatter.Style.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v42 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB08);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB10);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB18);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB20);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB28);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB30);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_1A2A167B4();
  v19 = v44;
  sub_1A2AE40C0();
  if (!v19)
  {
    v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    v44 = v15;
    v28 = v17;
    v29 = v14;
    v20 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_1A2AE3B5C();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v23 = &type metadata for OSLogDateFormatter.Style;
    v24 = v28;
    v25 = v29;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v43);
}

uint64_t sub_1A2A16E88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OSLogDateFormatter.Style.init(from:)(a1, a2);
}

void sub_1A2A16E9C(_QWORD *a1)
{
  OSLogDateFormatter.Style.encode(to:)(a1);
}

void OSLogDateFormatter.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void sub_1A2A16EBC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  __asm { BR              X9 }
}

void *sub_1A2A16F00()
{
  void *v0;
  void *v1;

  v1 = (void *)sub_1A2AE340C();
  objc_msgSend(v0, sel_setDateFormat_, v1);

  return v0;
}

uint64_t OSLogDateFormatter.format(_:)()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;

  sub_1A2A16EBC();
  v1 = v0;
  v2 = (void *)sub_1A2AE2FE0();
  v3 = objc_msgSend(v1, sel_stringFromDate_, v2);

  v4 = sub_1A2AE343C();
  return v4;
}

uint64_t OSLogDateFormatter.parse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a3;
  v6 = sub_1A2AE30C4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  LOBYTE(v23) = *v3;
  sub_1A2A16EBC();
  v15 = v14;
  v22 = a1;
  v24 = a2;
  v16 = (void *)sub_1A2AE340C();
  v17 = objc_msgSend(v15, sel_dateFromString_, v16);

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
LABEL_5:
    sub_1A2A17390((uint64_t)v12);
    __asm { BR              X9 }
  }
  sub_1A2AE3094();

  v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v18(v12, v9, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
    goto LABEL_5;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v21, v12, v6);
}

uint64_t sub_1A2A17390(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B7B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OSLogDateFormatter.hash(into:)()
{
  return sub_1A2AE4018();
}

BOOL static OSLogDateFormatter.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A2A1740C()
{
  return 0x656C797473;
}

uint64_t sub_1A2A17420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2A174AC()
{
  sub_1A2A175F8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A174D4()
{
  sub_1A2A175F8();
  return sub_1A2AE4108();
}

uint64_t OSLogDateFormatter.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB38);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A175F8();
  sub_1A2AE40E4();
  v10 = v7;
  sub_1A2A1763C();
  sub_1A2AE3E2C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A2A175F8()
{
  unint64_t result;

  result = qword_1EE67CB40;
  if (!qword_1EE67CB40)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B022D8, &type metadata for OSLogDateFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CB40);
  }
  return result;
}

unint64_t sub_1A2A1763C()
{
  unint64_t result;

  result = qword_1EE67CB48;
  if (!qword_1EE67CB48)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter.Style, &type metadata for OSLogDateFormatter.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67CB48);
  }
  return result;
}

uint64_t OSLogDateFormatter.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t OSLogDateFormatter.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A175F8();
  sub_1A2AE40C0();
  if (!v2)
  {
    sub_1A2A178B8();
    sub_1A2AE3D78();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

void sub_1A2A177E0(uint64_t *a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1A2A16EBC();
  v3 = v2;
  v4 = (void *)sub_1A2AE2FE0();
  v5 = objc_msgSend(v3, sel_stringFromDate_, v4);

  v6 = sub_1A2AE343C();
  v8 = v7;

  *a1 = v6;
  a1[1] = v8;
}

uint64_t sub_1A2A17874@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return OSLogDateFormatter.parse(_:)(*a1, a1[1], a2);
}

uint64_t sub_1A2A17890@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return OSLogDateFormatter.init(from:)(a1, a2);
}

uint64_t sub_1A2A178A4(_QWORD *a1)
{
  return OSLogDateFormatter.encode(to:)(a1);
}

unint64_t sub_1A2A178B8()
{
  unint64_t result;

  result = qword_1EE67CB58;
  if (!qword_1EE67CB58)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter.Style, &type metadata for OSLogDateFormatter.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67CB58);
  }
  return result;
}

uint64_t TinyDateRangeFormatter.format(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v0 = sub_1A2AE3160();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1A2AE3148();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1A2AE3004();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1A2AE307C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA98);
  sub_1A2AE2FC8();
  if (v9 >= 1.0)
  {
    sub_1A2AE2FF8();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
    sub_1A2AE3064();
    v13 = v2;
    v14 = v6;
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1A2B02510;
    sub_1A2AE301C();
    sub_1A2AE304C();
    sub_1A2AE3058();
    sub_1A2A189B8(v11);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1A2AE313C();
    sub_1A2AE3154();
    sub_1A2AE3070();
    sub_1A296E8A4(&qword_1EE67CB68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB07A8], MEMORY[0x1E0CB07A0]);
    sub_1A2AE3934();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v5);
    v17 = 32;
    v18 = 0xE100000000000000;
    v15 = 0;
    v16 = 0xE000000000000000;
    sub_1A29BF0B0();
    v10 = sub_1A2AE3A78();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    sub_1A2AE2FC8();
    sub_1A2AE385C();
    sub_1A2AE34F0();
    return v19;
  }
  return v10;
}

uint64_t static TinyDateRangeFormatter.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A2A17C38()
{
  sub_1A2A18C20();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A17C60()
{
  sub_1A2A18C20();
  return sub_1A2AE4108();
}

uint64_t TinyDateRangeFormatter.encode(to:)(_QWORD *a1)
{
  return sub_1A29FD09C(a1, &qword_1EE67CB70, (void (*)(void))sub_1A2A18C20);
}

uint64_t TinyDateRangeFormatter.hashValue.getter()
{
  sub_1A2AE400C();
  return sub_1A2AE4030();
}

uint64_t TinyDateRangeFormatter.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A2A17D0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TinyDateRangeFormatter.format(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A2A17D30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29FD200(a1, a2, a3, &qword_1EE67CB70, (void (*)(void))sub_1A2A18C20);
}

uint64_t sub_1A2A17D5C()
{
  sub_1A2AE400C();
  return sub_1A2AE4030();
}

uint64_t sub_1A2A17D90()
{
  sub_1A2AE400C();
  return sub_1A2AE4030();
}

uint64_t FuzzyTinyDateRangeFormatter.format(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v0 = sub_1A2AE3160();
  MEMORY[0x1E0C80A78](v0);
  v1 = sub_1A2AE3148();
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1A2AE3004();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1A2AE307C();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA98);
  sub_1A2AE2FC8();
  v7 = fabs(v6);
  if (v7 >= 36000.0)
  {
    if (v7 >= 604800.0)
    {
      if (v7 >= 1814400.0)
      {
        if (v7 >= 5184000.0)
        {
          if (v7 >= 15552000.0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
            sub_1A2AE3064();
            v8 = swift_allocObject();
            *(_OWORD *)(v8 + 16) = xmmword_1A2AFED80;
            if (v7 >= 25920000.0)
              sub_1A2AE3034();
            else
              sub_1A2AE3040();
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
            sub_1A2AE3064();
            v8 = swift_allocObject();
            *(_OWORD *)(v8 + 16) = xmmword_1A2B02520;
            sub_1A2AE3040();
            sub_1A2AE3028();
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
          sub_1A2AE3064();
          v8 = swift_allocObject();
          *(_OWORD *)(v8 + 16) = xmmword_1A2AFED80;
          sub_1A2AE3028();
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
        sub_1A2AE3064();
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_1A2B02520;
        sub_1A2AE3028();
        sub_1A2AE2FF8();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
      sub_1A2AE3064();
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1A2AFED80;
      sub_1A2AE2FF8();
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CB60);
    sub_1A2AE3064();
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1A2AFED80;
    sub_1A2AE301C();
  }
  sub_1A2A189B8(v8);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1A2AE2FF8();
  sub_1A2AE313C();
  sub_1A2AE3154();
  sub_1A2AE3070();
  sub_1A296E8A4(&qword_1EE67CB68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB07A8], MEMORY[0x1E0CB07A0]);
  sub_1A2AE3934();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
  v18 = 32;
  v19 = 0xE100000000000000;
  v16 = 0;
  v17 = 0xE000000000000000;
  sub_1A29BF0B0();
  v9 = sub_1A2AE3A78();
  v11 = v10;
  swift_bridgeObjectRelease();
  v20 = v9;
  v21 = v11;
  v18 = 28525;
  v19 = 0xE200000000000000;
  v16 = 109;
  v17 = 0xE100000000000000;
  v12 = sub_1A2AE3A78();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static FuzzyTinyDateRangeFormatter.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A2A18378()
{
  sub_1A2A18C64();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A183A0()
{
  sub_1A2A18C64();
  return sub_1A2AE4108();
}

uint64_t FuzzyTinyDateRangeFormatter.encode(to:)(_QWORD *a1)
{
  return sub_1A29FD09C(a1, &qword_1EE67CB80, (void (*)(void))sub_1A2A18C64);
}

uint64_t FuzzyTinyDateRangeFormatter.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A2A18418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FuzzyTinyDateRangeFormatter.format(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A2A1843C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29FD200(a1, a2, a3, &qword_1EE67CB80, (void (*)(void))sub_1A2A18C64);
}

uint64_t CompactDateRangeFormatter.format(_:)()
{
  uint64_t v1;

  sub_1A2A18CA8();
  sub_1A2AE30AC();
  LOBYTE(v1) = 0;
  sub_1A2AE30AC();
  swift_bridgeObjectRelease_n();
  sub_1A2AE30AC();
  sub_1A2AE34F0();
  sub_1A2AE30AC();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CA98);
  sub_1A2AE30AC();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2A18CEC();
  sub_1A2AE3934();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  return v1;
}

uint64_t static CompactDateRangeFormatter.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A2A186BC()
{
  sub_1A2A18D30();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A186E4()
{
  sub_1A2A18D30();
  return sub_1A2AE4108();
}

uint64_t CompactDateRangeFormatter.encode(to:)(_QWORD *a1)
{
  return sub_1A29FD09C(a1, &qword_1EE67CBA0, (void (*)(void))sub_1A2A18D30);
}

uint64_t CompactDateRangeFormatter.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A2A1875C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CompactDateRangeFormatter.format(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A2A18780(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1A29FD200(a1, a2, a3, &qword_1EE67CBA0, (void (*)(void))sub_1A2A18D30);
}

uint64_t sub_1A2A187AC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B46A20 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69546F4E656D6974 && a2 == 0xEE00656E6F5A656DLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1819047270 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A2A189B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1A2AE3064();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CCE8);
    v10 = sub_1A2AE3B08();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1A296E8A4(&qword_1EE67CCF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0778], MEMORY[0x1E0CB0788]);
      v14 = sub_1A2AE3388();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1A296E8A4(&qword_1EE67CCF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0778], MEMORY[0x1E0CB0790]);
          v20 = sub_1A2AE33DC();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

unint64_t sub_1A2A18C20()
{
  unint64_t result;

  result = qword_1EE67CB78;
  if (!qword_1EE67CB78)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02288, &type metadata for TinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CB78);
  }
  return result;
}

unint64_t sub_1A2A18C64()
{
  unint64_t result;

  result = qword_1EE67CB88;
  if (!qword_1EE67CB88)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02238, &type metadata for FuzzyTinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CB88);
  }
  return result;
}

unint64_t sub_1A2A18CA8()
{
  unint64_t result;

  result = qword_1EE67CB90;
  if (!qword_1EE67CB90)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter, &type metadata for OSLogDateFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CB90);
  }
  return result;
}

unint64_t sub_1A2A18CEC()
{
  unint64_t result;

  result = qword_1EE67CB98;
  if (!qword_1EE67CB98)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for TinyDateRangeFormatter, &type metadata for TinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CB98);
  }
  return result;
}

unint64_t sub_1A2A18D30()
{
  unint64_t result;

  result = qword_1EE67CBA8;
  if (!qword_1EE67CBA8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B021E8, &type metadata for CompactDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CBA8);
  }
  return result;
}

unint64_t sub_1A2A18D78()
{
  unint64_t result;

  result = qword_1EE67CBB0;
  if (!qword_1EE67CBB0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter.Style, &type metadata for OSLogDateFormatter.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67CBB0);
  }
  return result;
}

unint64_t sub_1A2A18DC0()
{
  unint64_t result;

  result = qword_1EE67CBB8;
  if (!qword_1EE67CBB8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter, &type metadata for OSLogDateFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBB8);
  }
  return result;
}

unint64_t sub_1A2A18E08()
{
  unint64_t result;

  result = qword_1EE67CBC0;
  if (!qword_1EE67CBC0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter, &type metadata for OSLogDateFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBC0);
  }
  return result;
}

unint64_t sub_1A2A18E50()
{
  unint64_t result;

  result = qword_1EE67CBC8;
  if (!qword_1EE67CBC8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter, &type metadata for OSLogDateFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBC8);
  }
  return result;
}

unint64_t sub_1A2A18E98()
{
  unint64_t result;

  result = qword_1EE67CBD0;
  if (!qword_1EE67CBD0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for OSLogDateFormatter, &type metadata for OSLogDateFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBD0);
  }
  return result;
}

unint64_t sub_1A2A18EE0()
{
  unint64_t result;

  result = qword_1EE67CBD8;
  if (!qword_1EE67CBD8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for TinyDateRangeFormatter, &type metadata for TinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBD8);
  }
  return result;
}

unint64_t sub_1A2A18F28()
{
  unint64_t result;

  result = qword_1EE67CBE0;
  if (!qword_1EE67CBE0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for TinyDateRangeFormatter, &type metadata for TinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBE0);
  }
  return result;
}

unint64_t sub_1A2A18F70()
{
  unint64_t result;

  result = qword_1EE67CBE8;
  if (!qword_1EE67CBE8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for TinyDateRangeFormatter, &type metadata for TinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBE8);
  }
  return result;
}

unint64_t sub_1A2A18FB8()
{
  unint64_t result;

  result = qword_1EE67CBF0;
  if (!qword_1EE67CBF0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for TinyDateRangeFormatter, &type metadata for TinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBF0);
  }
  return result;
}

unint64_t sub_1A2A19000()
{
  unint64_t result;

  result = qword_1EE67CBF8;
  if (!qword_1EE67CBF8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for FuzzyTinyDateRangeFormatter, &type metadata for FuzzyTinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CBF8);
  }
  return result;
}

unint64_t sub_1A2A19048()
{
  unint64_t result;

  result = qword_1EE67CC00;
  if (!qword_1EE67CC00)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for FuzzyTinyDateRangeFormatter, &type metadata for FuzzyTinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC00);
  }
  return result;
}

unint64_t sub_1A2A19090()
{
  unint64_t result;

  result = qword_1EE67CC08;
  if (!qword_1EE67CC08)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for FuzzyTinyDateRangeFormatter, &type metadata for FuzzyTinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC08);
  }
  return result;
}

unint64_t sub_1A2A190D8()
{
  unint64_t result;

  result = qword_1EE67CC10;
  if (!qword_1EE67CC10)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for FuzzyTinyDateRangeFormatter, &type metadata for FuzzyTinyDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC10);
  }
  return result;
}

unint64_t sub_1A2A19120()
{
  unint64_t result;

  result = qword_1EE67CC18;
  if (!qword_1EE67CC18)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CompactDateRangeFormatter, &type metadata for CompactDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC18);
  }
  return result;
}

unint64_t sub_1A2A19168()
{
  unint64_t result;

  result = qword_1EE67CC20;
  if (!qword_1EE67CC20)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CompactDateRangeFormatter, &type metadata for CompactDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC20);
  }
  return result;
}

unint64_t sub_1A2A191B0()
{
  unint64_t result;

  result = qword_1EE67CC28;
  if (!qword_1EE67CC28)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CompactDateRangeFormatter, &type metadata for CompactDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC28);
  }
  return result;
}

unint64_t sub_1A2A191F8()
{
  unint64_t result;

  result = qword_1EE67CC30;
  if (!qword_1EE67CC30)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CompactDateRangeFormatter, &type metadata for CompactDateRangeFormatter);
    atomic_store(result, (unint64_t *)&qword_1EE67CC30);
  }
  return result;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter()
{
  return &type metadata for OSLogDateFormatter;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style()
{
  return &type metadata for OSLogDateFormatter.Style;
}

ValueMetadata *type metadata accessor for TinyDateRangeFormatter()
{
  return &type metadata for TinyDateRangeFormatter;
}

ValueMetadata *type metadata accessor for FuzzyTinyDateRangeFormatter()
{
  return &type metadata for FuzzyTinyDateRangeFormatter;
}

ValueMetadata *type metadata accessor for CompactDateRangeFormatter()
{
  return &type metadata for CompactDateRangeFormatter;
}

ValueMetadata *type metadata accessor for CompactDateRangeFormatter.CodingKeys()
{
  return &type metadata for CompactDateRangeFormatter.CodingKeys;
}

ValueMetadata *type metadata accessor for FuzzyTinyDateRangeFormatter.CodingKeys()
{
  return &type metadata for FuzzyTinyDateRangeFormatter.CodingKeys;
}

ValueMetadata *type metadata accessor for TinyDateRangeFormatter.CodingKeys()
{
  return &type metadata for TinyDateRangeFormatter.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for OSLogDateFormatter.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A19304 + 4 * byte_1A2B01784[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A19324 + 4 * byte_1A2B01789[v4]))();
}

_BYTE *sub_1A2A19304(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A19324(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A1932C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A19334(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A1933C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A19344(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.CodingKeys()
{
  return &type metadata for OSLogDateFormatter.CodingKeys;
}

uint64_t _s7Sharing18OSLogDateFormatterV5StyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A2A193AC + 4 * byte_1A2B01793[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A2A193E0 + 4 * byte_1A2B0178E[v4]))();
}

uint64_t sub_1A2A193E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A193E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A193F0);
  return result;
}

uint64_t sub_1A2A193FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A19404);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A2A19408(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A19410(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.CodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.CodingKeys;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.DateWithTimeZoneCodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.DateWithTimeZoneCodingKeys;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.DateCodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.DateCodingKeys;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.TimeCodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.TimeCodingKeys;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.TimeNoTimeZoneCodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.TimeNoTimeZoneCodingKeys;
}

ValueMetadata *type metadata accessor for OSLogDateFormatter.Style.FullCodingKeys()
{
  return &type metadata for OSLogDateFormatter.Style.FullCodingKeys;
}

unint64_t sub_1A2A19480()
{
  unint64_t result;

  result = qword_1EE67CC38;
  if (!qword_1EE67CC38)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02018, &type metadata for OSLogDateFormatter.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC38);
  }
  return result;
}

unint64_t sub_1A2A194C8()
{
  unint64_t result;

  result = qword_1EE67CC40;
  if (!qword_1EE67CC40)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B020D0, &type metadata for OSLogDateFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC40);
  }
  return result;
}

unint64_t sub_1A2A19510()
{
  unint64_t result;

  result = qword_1EE67CC48;
  if (!qword_1EE67CC48)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02198, &type metadata for CompactDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC48);
  }
  return result;
}

unint64_t sub_1A2A19558()
{
  unint64_t result;

  result = qword_1EE67CC50;
  if (!qword_1EE67CC50)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B021C0, &type metadata for CompactDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC50);
  }
  return result;
}

unint64_t sub_1A2A195A0()
{
  unint64_t result;

  result = qword_1EE67CC58;
  if (!qword_1EE67CC58)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02148, &type metadata for FuzzyTinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC58);
  }
  return result;
}

unint64_t sub_1A2A195E8()
{
  unint64_t result;

  result = qword_1EE67CC60;
  if (!qword_1EE67CC60)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02170, &type metadata for FuzzyTinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC60);
  }
  return result;
}

unint64_t sub_1A2A19630()
{
  unint64_t result;

  result = qword_1EE67CC68;
  if (!qword_1EE67CC68)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B020F8, &type metadata for TinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC68);
  }
  return result;
}

unint64_t sub_1A2A19678()
{
  unint64_t result;

  result = qword_1EE67CC70;
  if (!qword_1EE67CC70)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02120, &type metadata for TinyDateRangeFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC70);
  }
  return result;
}

unint64_t sub_1A2A196C0()
{
  unint64_t result;

  result = qword_1EE67CC78;
  if (!qword_1EE67CC78)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02040, &type metadata for OSLogDateFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC78);
  }
  return result;
}

unint64_t sub_1A2A19708()
{
  unint64_t result;

  result = qword_1EE67CC80;
  if (!qword_1EE67CC80)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02068, &type metadata for OSLogDateFormatter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC80);
  }
  return result;
}

unint64_t sub_1A2A19750()
{
  unint64_t result;

  result = qword_1EE67CC88;
  if (!qword_1EE67CC88)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01F38, &type metadata for OSLogDateFormatter.Style.DateWithTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC88);
  }
  return result;
}

unint64_t sub_1A2A19798()
{
  unint64_t result;

  result = qword_1EE67CC90;
  if (!qword_1EE67CC90)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01F60, &type metadata for OSLogDateFormatter.Style.DateWithTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC90);
  }
  return result;
}

unint64_t sub_1A2A197E0()
{
  unint64_t result;

  result = qword_1EE67CC98;
  if (!qword_1EE67CC98)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01EE8, &type metadata for OSLogDateFormatter.Style.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CC98);
  }
  return result;
}

unint64_t sub_1A2A19828()
{
  unint64_t result;

  result = qword_1EE67CCA0;
  if (!qword_1EE67CCA0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01F10, &type metadata for OSLogDateFormatter.Style.DateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCA0);
  }
  return result;
}

unint64_t sub_1A2A19870()
{
  unint64_t result;

  result = qword_1EE67CCA8;
  if (!qword_1EE67CCA8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01E98, &type metadata for OSLogDateFormatter.Style.TimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCA8);
  }
  return result;
}

unint64_t sub_1A2A198B8()
{
  unint64_t result;

  result = qword_1EE67CCB0;
  if (!qword_1EE67CCB0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01EC0, &type metadata for OSLogDateFormatter.Style.TimeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCB0);
  }
  return result;
}

unint64_t sub_1A2A19900()
{
  unint64_t result;

  result = qword_1EE67CCB8;
  if (!qword_1EE67CCB8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01E48, &type metadata for OSLogDateFormatter.Style.TimeNoTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCB8);
  }
  return result;
}

unint64_t sub_1A2A19948()
{
  unint64_t result;

  result = qword_1EE67CCC0;
  if (!qword_1EE67CCC0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01E70, &type metadata for OSLogDateFormatter.Style.TimeNoTimeZoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCC0);
  }
  return result;
}

unint64_t sub_1A2A19990()
{
  unint64_t result;

  result = qword_1EE67CCC8;
  if (!qword_1EE67CCC8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01DF8, &type metadata for OSLogDateFormatter.Style.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCC8);
  }
  return result;
}

unint64_t sub_1A2A199D8()
{
  unint64_t result;

  result = qword_1EE67CCD0;
  if (!qword_1EE67CCD0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01E20, &type metadata for OSLogDateFormatter.Style.FullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCD0);
  }
  return result;
}

unint64_t sub_1A2A19A20()
{
  unint64_t result;

  result = qword_1EE67CCD8;
  if (!qword_1EE67CCD8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01F88, &type metadata for OSLogDateFormatter.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCD8);
  }
  return result;
}

unint64_t sub_1A2A19A68()
{
  unint64_t result;

  result = qword_1EE67CCE0;
  if (!qword_1EE67CCE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B01FB0, &type metadata for OSLogDateFormatter.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CCE0);
  }
  return result;
}

unint64_t SFAirDrop.DeviceRelationship.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 4;
  if (result < 4)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t SFAirDrop.DeviceRelationship.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_1A2A19AE0()
{
  unint64_t result;

  result = qword_1EE67CD00;
  if (!qword_1EE67CD00)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.DeviceRelationship, &type metadata for SFAirDrop.DeviceRelationship);
    atomic_store(result, (unint64_t *)&qword_1EE67CD00);
  }
  return result;
}

unint64_t sub_1A2A19B24@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return SFAirDrop.DeviceRelationship.init(rawValue:)(*a1, a2);
}

void sub_1A2A19B2C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t _s18DeviceRelationshipOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A2A19B84 + 4 * byte_1A2B02535[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A2A19BB8 + 4 * byte_1A2B02530[v4]))();
}

uint64_t sub_1A2A19BB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A19BC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A19BC8);
  return result;
}

uint64_t sub_1A2A19BD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A19BDCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A2A19BE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A19BE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDrop.DeviceRelationship()
{
  return &type metadata for SFAirDrop.DeviceRelationship;
}

void sub_1A2A19C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1A2A19D4CLL);
}

Sharing::SFString_optional __swiftcall SFString.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  Sharing::SFString_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A2AE3CD0();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SFString.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A19E0C + 4 * byte_1A2B02610[*v0]))(0xD000000000000023, 0x80000001A2B44480);
}

uint64_t sub_1A2A19E0C(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_1A2A19E8C()
{
  return 0x4F435F454259414DLL;
}

void sub_1A2A19EB0(char *a1)
{
  sub_1A2A5D168(*a1);
}

uint64_t sub_1A2A19EBC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A2AE400C();
  sub_1A2AC37F8((uint64_t)v3, v1);
  return sub_1A2AE4030();
}

void sub_1A2A19F00(uint64_t a1)
{
  char *v1;

  sub_1A2AC37F8(a1, *v1);
}

uint64_t sub_1A2A19F08()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1A2AE400C();
  sub_1A2AC37F8((uint64_t)v3, v1);
  return sub_1A2AE4030();
}

Sharing::SFString_optional sub_1A2A19F48(Swift::String *a1)
{
  return SFString.init(rawValue:)(*a1);
}

uint64_t sub_1A2A19F54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SFString.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1A2A19F78()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1A2AE340C();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  qword_1EE67CD08 = (uint64_t)v1;
}

void SFString.localized.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  if (qword_1EE67AA58 != -1)
    swift_once();
  if (qword_1EE67CD08)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t SFString.format(_:)()
{
  uint64_t v0;

  SFString.localized.getter();
  swift_bridgeObjectRetain();
  v0 = sub_1A2AE3448();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::String __swiftcall String.init(_:)(Sharing::SFString a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  SFString.localized.getter();
  v1 = sub_1A2AE3568();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall IDSIdentifierFormatStyle.format(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;

  swift_bridgeObjectRetain();
  v1 = sub_1A2A1A8B0(8);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1A8586B44](v1, v3, v5, v7);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = v8;
  v12 = v10;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

uint64_t static IDSIdentifierFormatStyle.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1A2A1A4AC()
{
  sub_1A2A1A938();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A1A4D4()
{
  sub_1A2A1A938();
  return sub_1A2AE4108();
}

uint64_t IDSIdentifierFormatStyle.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CD10);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A1A938();
  sub_1A2AE40E4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t IDSIdentifierFormatStyle.hashValue.getter()
{
  sub_1A2AE400C();
  return sub_1A2AE4030();
}

uint64_t IDSIdentifierFormatStyle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t sub_1A2A1A618@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRetain();
  v2 = sub_1A2A1A8B0(8);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x1A8586B44](v2, v4, v6, v8);
  v11 = v10;
  result = swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v11;
  return result;
}

uint64_t sub_1A2A1A6A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CD10);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A1A938();
  sub_1A2AE40E4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1A2A1A764(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1A2A1A7C4);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1A2A1A77C + *((int *)qword_1A2A1A7C8 + (a4 >> 62))))(v5);
}

uint64_t sub_1A2A1A7D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1A2A1A7E8 + *((int *)qword_1A2A1A890 + (a4 >> 62))))();
}

uint64_t sub_1A2A1A7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1A2A1A888);
  }
  return ((uint64_t (*)(void))((char *)&loc_1A2A1A838 + *((int *)qword_1A2A1A8A0 + a3)))();
}

uint64_t sub_1A2A1A8B0(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A2AE34E4();
    return sub_1A2AE3574();
  }
  return result;
}

unint64_t sub_1A2A1A938()
{
  unint64_t result;

  result = qword_1EE67CD18;
  if (!qword_1EE67CD18)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02894, &type metadata for IDSIdentifierFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CD18);
  }
  return result;
}

unint64_t sub_1A2A1A980()
{
  unint64_t result;

  result = qword_1EE67CD20;
  if (!qword_1EE67CD20)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFString, &type metadata for SFString);
    atomic_store(result, (unint64_t *)&qword_1EE67CD20);
  }
  return result;
}

unint64_t sub_1A2A1A9C8()
{
  unint64_t result;

  result = qword_1EE67CD28;
  if (!qword_1EE67CD28)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for IDSIdentifierFormatStyle, &type metadata for IDSIdentifierFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67CD28);
  }
  return result;
}

unint64_t sub_1A2A1AA10()
{
  unint64_t result;

  result = qword_1EE67CD30;
  if (!qword_1EE67CD30)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for IDSIdentifierFormatStyle, &type metadata for IDSIdentifierFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67CD30);
  }
  return result;
}

unint64_t sub_1A2A1AA58()
{
  unint64_t result;

  result = qword_1EE67CD38;
  if (!qword_1EE67CD38)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for IDSIdentifierFormatStyle, &type metadata for IDSIdentifierFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67CD38);
  }
  return result;
}

unint64_t sub_1A2A1AAA0()
{
  unint64_t result;

  result = qword_1EE67CD40;
  if (!qword_1EE67CD40)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for IDSIdentifierFormatStyle, &type metadata for IDSIdentifierFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67CD40);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SFString(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SFString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A2A1ABC0 + 4 * byte_1A2B0261F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A2A1ABF4 + 4 * byte_1A2B0261A[v4]))();
}

uint64_t sub_1A2A1ABF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A1ABFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A1AC04);
  return result;
}

uint64_t sub_1A2A1AC10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A1AC18);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A2A1AC1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A1AC24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFString()
{
  return &type metadata for SFString;
}

ValueMetadata *type metadata accessor for IDSIdentifierFormatStyle()
{
  return &type metadata for IDSIdentifierFormatStyle;
}

ValueMetadata *type metadata accessor for IDSIdentifierFormatStyle.CodingKeys()
{
  return &type metadata for IDSIdentifierFormatStyle.CodingKeys;
}

unint64_t sub_1A2A1AC64()
{
  unint64_t result;

  result = qword_1EE67CD48;
  if (!qword_1EE67CD48)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B02844, &type metadata for IDSIdentifierFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CD48);
  }
  return result;
}

unint64_t sub_1A2A1ACAC()
{
  unint64_t result;

  result = qword_1EE67CD50;
  if (!qword_1EE67CD50)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0286C, &type metadata for IDSIdentifierFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CD50);
  }
  return result;
}

unint64_t SF_os_activity.Scope.enter(dso:)(void *dso)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  unint64_t result;
  int v6;
  os_activity_t activity;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 16);
  v6 = *(_DWORD *)(v1 + 20);
  result = SF_os_activity.init(_:dso:options:)(dso, v3, v4, (os_activity_flag_t *)&v6, (unint64_t)&activity);
  if (activity)
  {
    os_activity_scope_enter(activity, (os_activity_scope_state_t)(v1 + 24));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1A2A1AD58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void static SF_os_activity.initiate(_:dso:options:execute:)(const char *a1, int a2, char a3, uint64_t a4, os_activity_flag_t *a5, void *aBlock)
{
  os_activity_flag_t v9;
  void *v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isEscapingClosureAtFileLocation;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t aBlocka;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  char description[8];

  v9 = *a5;
  v10 = _Block_copy(aBlock);
  v12 = v10;
  if ((a3 & 1) != 0)
  {
LABEL_6:
    v11 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      if (a1 >> 11 == 27)
      {
LABEL_28:
        __break(1u);
        return;
      }
      LODWORD(v11) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) == 0)
        {
          if (a1 > 0xFF)
          {
            __break(1u);
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
          v16 = ((_BYTE)a1 + 1);
LABEL_12:
          *(_QWORD *)description = (v16 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v16) & 0x38)) & 0x38));
          if (!a4)
            goto LABEL_14;
          v17 = swift_allocObject();
          *(_QWORD *)(v17 + 16) = v12;
          v18 = swift_allocObject();
          *(_QWORD *)(v18 + 16) = sub_1A2A1B708;
          *(_QWORD *)(v18 + 24) = v17;
          v30 = sub_1A2A1B724;
          v31 = v18;
          aBlocka = MEMORY[0x1E0C809B0];
          v27 = 1107296256;
          v28 = sub_1A2A1AD58;
          v29 = &block_descriptor_4;
          v19 = _Block_copy(&aBlocka);
          _Block_copy(v12);
          swift_retain();
          swift_release();
          _os_activity_initiate((void *)a4, description, v9, v19);
          _Block_release(v19);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
          {
LABEL_14:
            _Block_release(v12);
            return;
          }
          goto LABEL_27;
        }
LABEL_20:
        v21 = (a1 & 0x3F) << 8;
        v22 = (v21 | (a1 >> 6)) + 33217;
        v23 = (v21 | (a1 >> 6) & 0x3F) << 8;
        v24 = (((v23 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
        v25 = (v23 | (a1 >> 12)) + 8487393;
        if ((_DWORD)v11)
          v16 = v24;
        else
          v16 = v25;
        if (a1 < 0x800)
          v16 = v22;
        goto LABEL_12;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (!a4)
  {
    _Block_release(v10);
    return;
  }
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_1A2A1BF0C;
  *(_QWORD *)(v14 + 24) = v13;
  v30 = sub_1A2A1BF10;
  v31 = v14;
  aBlocka = MEMORY[0x1E0C809B0];
  v27 = 1107296256;
  v28 = sub_1A2A1AD58;
  v29 = &block_descriptor_14;
  v15 = _Block_copy(&aBlocka);
  _Block_copy(v12);
  swift_retain();
  swift_release();
  _os_activity_initiate((void *)a4, a1, v9, v15);
  _Block_release(v15);
  a4 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v12);
  if ((a4 & 1) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
}

uint64_t sub_1A2A1B0DC()
{
  qword_1EE67CD60 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_none");
  return swift_unknownObjectRetain();
}

uint64_t sub_1A2A1B104()
{
  qword_1EE6766C8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

unint64_t SF_os_activity.init(_:dso:options:)@<X0>(void *dso@<X3>, unint64_t result@<X0>, char a3@<W2>, os_activity_flag_t *a4@<X4>, unint64_t a5@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  os_activity_flag_t v8;
  NSObject *v9;
  void *v10;
  char *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char description[8];

  v6 = result;
  v7 = (_QWORD *)a5;
  v8 = *a4;
  if ((a3 & 1) == 0)
  {
    if (result)
    {
      if (dso)
      {
        if (qword_1EE6766B8 == -1)
        {
LABEL_5:
          v9 = qword_1EE6766C8;
          v10 = dso;
          v11 = (char *)v6;
LABEL_16:
          result = (unint64_t)_os_activity_create(v10, v11, v9, v8);
LABEL_18:
          *v7 = result;
          return result;
        }
LABEL_29:
        v18 = result;
        swift_once();
        v6 = v18;
        goto LABEL_5;
      }
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_20;
  }
  a5 = HIDWORD(result);
  if (HIDWORD(result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (result >> 11 != 27)
  {
    LODWORD(a5) = WORD1(result);
    if (WORD1(result) <= 0x10u)
    {
      if ((result & 0xFFFFFF80) == 0)
      {
        if (result > 0xFF)
        {
          __break(1u);
          goto LABEL_29;
        }
        v12 = (result + 1);
        goto LABEL_12;
      }
LABEL_22:
      v13 = (result & 0x3F) << 8;
      v14 = (v13 | (result >> 6)) + 33217;
      v15 = (v13 | (result >> 6) & 0x3F) << 8;
      v16 = (((v15 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      v17 = (v15 | (result >> 12)) + 8487393;
      if ((_DWORD)a5)
        v12 = v16;
      else
        v12 = v17;
      if (result < 0x800)
        v12 = v14;
LABEL_12:
      *(_QWORD *)description = (v12 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v12) & 0x38)) & 0x38));
      if (dso)
      {
        if (qword_1EE6766B8 != -1)
          swift_once();
        v9 = qword_1EE6766C8;
        v11 = description;
        v10 = dso;
        goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

os_activity_t sub_1A2A1B2E4@<X0>(char *description@<X0>, void *dso@<X2>, os_activity_flag_t flags@<W3>, os_activity_t *a4@<X8>)
{
  os_activity_t result;

  if (dso && description)
  {
    if (qword_1EE6766B8 != -1)
      swift_once();
    result = _os_activity_create(dso, description, (os_activity_t)qword_1EE6766C8, flags);
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

unint64_t SF_os_activity.init(_:dso:parent:options:)@<X0>(os_activity_t dso@<X3>, unint64_t result@<X0>, char a3@<W2>, NSObject **a4@<X4>, os_activity_flag_t *a5@<X5>, os_activity_t *a6@<X8>)
{
  unint64_t v8;
  os_activity_t *v9;
  NSObject *v10;
  os_activity_flag_t v11;
  os_activity_t v12;
  char *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char description[8];

  v8 = result;
  v9 = a6;
  v10 = *a4;
  v11 = *a5;
  if (!*a4)
  {
    if (qword_1EE6766B8 != -1)
      goto LABEL_28;
    goto LABEL_7;
  }
  for (; (a3 & 1) != 0; result = swift_unknownObjectRetain())
  {
    a6 = (os_activity_t *)HIDWORD(v8);
    if (HIDWORD(v8))
      goto LABEL_19;
    if (v8 >> 11 == 27)
    {
      __break(1u);
      return result;
    }
    LODWORD(a6) = WORD1(v8);
    if (WORD1(v8) > 0x10u)
      goto LABEL_20;
    if ((v8 & 0xFFFFFF80) != 0)
      goto LABEL_21;
    if (v8 <= 0xFF)
    {
      v14 = (v8 + 1);
      goto LABEL_14;
    }
    __break(1u);
LABEL_28:
    swift_once();
LABEL_7:
    v10 = qword_1EE6766C8;
  }
  if (!v8)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    v15 = (v8 & 0x3F) << 8;
    v16 = (v15 | (v8 >> 6)) + 33217;
    v17 = (v15 | (v8 >> 6) & 0x3F) << 8;
    v18 = (((v17 | (v8 >> 12) & 0x3F) << 8) | (v8 >> 18)) - 2122219023;
    v19 = (v17 | (v8 >> 12)) + 8487393;
    if ((_DWORD)a6)
      v14 = v18;
    else
      v14 = v19;
    if (v8 < 0x800)
      v14 = v16;
LABEL_14:
    *(_QWORD *)description = (v14 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v14) & 0x38)) & 0x38));
    if (!dso)
      goto LABEL_17;
    v13 = description;
    v12 = dso;
    goto LABEL_16;
  }
  if (dso)
  {
    v12 = dso;
    v13 = (char *)v8;
LABEL_16:
    dso = _os_activity_create(v12, v13, v10, v11);
  }
LABEL_17:
  result = swift_unknownObjectRelease();
  *v9 = dso;
  return result;
}

uint64_t static SF_os_activity.none.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A2A1B548(qword_1EE67AA60, &qword_1EE67CD60, a1);
}

uint64_t static SF_os_activity.current.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1A2A1B548(&qword_1EE6766B8, &qword_1EE6766C8, a1);
}

uint64_t sub_1A2A1B548@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_unknownObjectRetain();
}

void static SF_os_activity.Options.ifNonePresent.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1A2A1B594(uint64_t result, uint64_t a2, void *a3, os_activity_flag_t a4, const void *a5)
{
  const char *v5;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  if (a3)
  {
    v5 = (const char *)result;
    if (result)
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = a5;
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = sub_1A2A1BF0C;
      *(_QWORD *)(v10 + 24) = v9;
      v12[4] = sub_1A2A1BF10;
      v12[5] = v10;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 1107296256;
      v12[2] = sub_1A2A1AD58;
      v12[3] = &block_descriptor_36;
      v11 = _Block_copy(v12);
      _Block_copy(a5);
      swift_retain();
      swift_release();
      _os_activity_initiate(a3, v5, a4, v11);
      _Block_release(v11);
      LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((a4 & 1) != 0)
        __break(1u);
    }
  }
  return result;
}

uint64_t sub_1A2A1B6DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1A2A1B6E4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A2A1B708()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1A2A1B714()
{
  return swift_deallocObject();
}

uint64_t sub_1A2A1B724()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1A2A1B75C()
{
  return swift_deallocObject();
}

void SF_os_activity.apply(execute:)(const void *a1)
{
  NSObject **v1;
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[6];

  v2 = _Block_copy(a1);
  v3 = v2;
  v4 = *v1;
  if (v4)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1A2A1BF0C;
    *(_QWORD *)(v6 + 24) = v5;
    v9[4] = sub_1A2A1BF10;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = sub_1A2A1AD58;
    v9[3] = &block_descriptor_25;
    v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    os_activity_apply(v4, v7);
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  else
  {
    _Block_release(v2);
  }
}

uint64_t sub_1A2A1B8B0()
{
  return swift_deallocObject();
}

unint64_t static SF_os_activity.labelUserAction(_:dso:)@<X0>(unint64_t result@<X0>, char a2@<W2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD v12[3];

  if ((a2 & 1) != 0)
  {
    a4 = HIDWORD(result);
    if (!HIDWORD(result))
    {
      if (result >> 11 != 27)
      {
        LODWORD(a4) = WORD1(result);
        if (WORD1(result) > 0x10u)
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        if ((result & 0xFFFFFF80) != 0)
        {
LABEL_17:
          v7 = (result & 0x3F) << 8;
          v8 = (v7 | (result >> 6)) + 33217;
          v9 = (v7 | (result >> 6) & 0x3F) << 8;
          v10 = (((v9 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
          v11 = (v9 | (result >> 12)) + 8487393;
          if ((_DWORD)a4)
            v6 = v10;
          else
            v6 = v11;
          if (result < 0x800)
            v6 = v8;
          goto LABEL_11;
        }
        if (result <= 0xFF)
        {
          v6 = (result + 1);
LABEL_11:
          v12[1] = v4;
          v12[2] = v5;
          v12[0] = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v6) & 0x38)) & 0x38));
          if (a3)
            return MEMORY[0x1A8588734](a3, v12);
          return result;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_25;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a3)
LABEL_25:
    JUMPOUT(0x1A8588734);
  return result;
}

uint64_t SF_os_activity.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t SF_os_activity.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static SF_os_activity.Options.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static SF_os_activity.Options.detached.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

_DWORD *sub_1A2A1BA04@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1A2A1BA10(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1A2A1BA18@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1A2A1BA2C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1A2A1BA40@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A2A1BA54(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1A2A1BA84@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1A2A1BAB0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1A2A1BAD4(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1A2A1BAE8(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1A2A1BAFC(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1A2A1BB10@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A2A1BB24(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A2A1BB38(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1A2A1BB4C(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A2A1BB60()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1A2A1BB70()
{
  return sub_1A2AE3AB4();
}

_DWORD *sub_1A2A1BB88(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1A2A1BB9C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1A2A1BBAC(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1A2A1BBB8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t SF_os_activity.Scope.description.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void SF_os_activity.Scope.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 20);
}

Swift::Void __swiftcall SF_os_activity.Scope.leave()()
{
  uint64_t v0;

  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
}

unint64_t sub_1A2A1BBF4()
{
  unint64_t result;

  result = qword_1EE67CD70;
  if (!qword_1EE67CD70)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SF_os_activity.Options, &type metadata for SF_os_activity.Options);
    atomic_store(result, (unint64_t *)&qword_1EE67CD70);
  }
  return result;
}

unint64_t sub_1A2A1BC3C()
{
  unint64_t result;

  result = qword_1EE67CD78;
  if (!qword_1EE67CD78)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SF_os_activity.Options, &type metadata for SF_os_activity.Options);
    atomic_store(result, (unint64_t *)&qword_1EE67CD78);
  }
  return result;
}

unint64_t sub_1A2A1BC84()
{
  unint64_t result;

  result = qword_1EE67CD80;
  if (!qword_1EE67CD80)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SF_os_activity.Options, &type metadata for SF_os_activity.Options);
    atomic_store(result, (unint64_t *)&qword_1EE67CD80);
  }
  return result;
}

unint64_t sub_1A2A1BCCC()
{
  unint64_t result;

  result = qword_1EE67CD88;
  if (!qword_1EE67CD88)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SF_os_activity.Options, &type metadata for SF_os_activity.Options);
    atomic_store(result, (unint64_t *)&qword_1EE67CD88);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SF_os_activity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for SF_os_activity()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for SF_os_activity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for SF_os_activity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFCodableCGImage(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SFCodableCGImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SF_os_activity()
{
  return &type metadata for SF_os_activity;
}

ValueMetadata *type metadata accessor for SF_os_activity.Options()
{
  return &type metadata for SF_os_activity.Options;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SF_os_activity.Scope(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SF_os_activity.Scope(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SF_os_activity.Scope()
{
  return &type metadata for SF_os_activity.Scope;
}

uint64_t sub_1A2A1BEFC()
{
  return swift_deallocObject();
}

uint64_t sub_1A2A1BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = sub_1A2AE36E8();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    sub_1A2AE36DC();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A296F108(a1, &qword_1ECEFB6D0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A2AE3688();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

uint64_t Optional.tryUnwrap(_:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a5;
  v20 = a1;
  v21 = a3;
  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v14);
  v16 = *(_QWORD *)(a6 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a7, v13, v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a6);
  sub_1A297AFB8();
  swift_allocError();
  *(_QWORD *)v18 = v20;
  *(_QWORD *)(v18 + 8) = a2;
  *(_QWORD *)(v18 + 16) = v21;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = v22;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0x2000000000000000;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t tryCast<A>(_:as:description:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v30 = a5;
  v31 = a7;
  v35 = a6;
  v32 = a4;
  v28[1] = a2;
  v29 = a3;
  v12 = sub_1A2AE39F4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v28 - v14;
  sub_1A296E4B4(a1, (uint64_t)&v33);
  v16 = swift_dynamicCast();
  v17 = *(_QWORD *)(a8 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((v16 & 1) != 0)
  {
    v18(v15, 0, 1, a8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v15, a8);
  }
  else
  {
    v18(v15, 1, 1, a8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v33 = 0;
    v34 = 0xE000000000000000;
    sub_1A2AE3BF8();
    v20 = v33;
    v21 = v34;
    v22 = sub_1A2AE412C();
    v24 = v23;
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v25 = v20;
    *(_QWORD *)(v25 + 8) = v21;
    *(_QWORD *)(v25 + 16) = v22;
    *(_QWORD *)(v25 + 24) = v24;
    v26 = v32;
    *(_QWORD *)(v25 + 32) = v29;
    *(_QWORD *)(v25 + 40) = v26;
    v27 = v35;
    *(_QWORD *)(v25 + 48) = v30;
    *(_QWORD *)(v25 + 56) = v27;
    *(_QWORD *)(v25 + 64) = v31;
    *(_OWORD *)(v25 + 72) = xmmword_1A2AFAC10;
    *(_QWORD *)(v25 + 88) = 0;
    *(_QWORD *)(v25 + 96) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t MetatypeMetadata;

  v24 = a6;
  v25 = a7;
  v22 = a4;
  v23 = a5;
  v21 = a3;
  v13 = sub_1A2AE406C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MetatypeMetadata = swift_getMetatypeMetadata();
  *(_QWORD *)&v28 = a2;
  sub_1A2AE403C();
  *(_QWORD *)&v26 = 0x2874736143797274;
  *((_QWORD *)&v26 + 1) = 0xE800000000000000;
  sub_1A2AE4048();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  v17 = v26;
  sub_1A297CDE4(a1, (uint64_t)&v26, &qword_1ECEFB8A0);
  if (v27)
  {
    sub_1A296E4A4(&v26, &v28);
    swift_bridgeObjectRelease();
    tryCast<A>(_:as:description:file:line:)((uint64_t)&v28, a2, v21, v22, v23, v24, v25, a8, a9);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v28);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    sub_1A296F108((uint64_t)&v26, &qword_1ECEFB8A0);
    sub_1A297AFB8();
    swift_allocError();
    *(_OWORD *)v19 = v17;
    *(_QWORD *)(v19 + 16) = 0xD000000000000046;
    *(_QWORD *)(v19 + 24) = 0x80000001A2B45190;
    *(_QWORD *)(v19 + 32) = 132;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_QWORD *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 80) = 0x2000000000000000;
    *(_QWORD *)(v19 + 88) = 0;
    *(_QWORD *)(v19 + 96) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return swift_bridgeObjectRelease();
  }
}

uint64_t Optional<A>.throwIfNotNil()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result)
  {
    v14 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_errorCode);
    v1 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_domain + 8);
    v13 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_domain);
    v2 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_internalLocalizedDescription + 8);
    v12 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_internalLocalizedDescription);
    v3 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_internalDebugDescription + 8);
    v11 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_internalDebugDescription);
    v4 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_file + 8);
    v10 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_file);
    v5 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_line);
    v7 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_process);
    v6 = *(_QWORD *)(result + OBJC_IVAR____SFXPCError_process + 8);
    v8 = *(unsigned __int8 *)(result + OBJC_IVAR____SFXPCError_line + 8) | 0xC000000000000000;
    sub_1A297AFB8();
    swift_allocError();
    *v9 = v13;
    v9[1] = v1;
    v9[2] = v14;
    v9[3] = v12;
    v9[4] = v2;
    v9[5] = v11;
    v9[6] = v3;
    v9[7] = v10;
    v9[8] = v4;
    v9[9] = v5;
    v9[10] = v8;
    v9[11] = v7;
    v9[12] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Bool.throwIf(_:_:file:line:)(Swift::Bool _, Swift::String a2, Swift::String file, Swift::Int line)
{
  char v4;
  void *object;
  uint64_t countAndFlagsBits;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (_ == (v4 & 1))
  {
    object = file._object;
    countAndFlagsBits = file._countAndFlagsBits;
    v8 = a2._object;
    v9 = a2._countAndFlagsBits;
    v10 = v4 & 1;
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v11 = v9;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = countAndFlagsBits;
    *(_QWORD *)(v11 + 32) = object;
    *(_QWORD *)(v11 + 40) = line;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)(v11 + 88) = 0;
    *(_QWORD *)(v11 + 96) = 0;
    *(_QWORD *)(v11 + 80) = 0x8000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
}

uint64_t sub_1A2A1C7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CDE4(a1, (uint64_t)v9, &qword_1ECEFB6D0);
  v10 = sub_1A2AE36E8();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1A296F108((uint64_t)v9, &qword_1ECEFB6D0);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_1A2AE3688();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1A2AE36DC();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t Optional<A>.throwIfNotNil()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  _QWORD v17[2];

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v3);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v13, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v15(v12, v5, v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  if (sub_1A2AE3EB0())
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    swift_allocError();
    v15(v16, v10, v6);
  }
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t static SFError.xpcFailure(_:)(id a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (a1)
  {
    v2 = (uint64_t)a1;
  }
  else
  {
    sub_1A297AFB8();
    v2 = swift_allocError();
    *(_OWORD *)v3 = xmmword_1A2B02AC0;
    *(_QWORD *)(v3 + 16) = 0xD000000000000046;
    *(_QWORD *)(v3 + 24) = 0x80000001A2B45190;
    *(_QWORD *)(v3 + 32) = 26;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
  }
  v4 = a1;
  return v2;
}

void SFError.errorDescription.getter()
{
  uint64_t v1;

  v1 = sub_1A2AE2F44();
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X11 }
}

uint64_t sub_1A2A1CC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v5 - 96) = 0;
  *(_QWORD *)(v5 - 88) = 0xE000000000000000;
  sub_1A2AE2EF0();
  v7 = sub_1A2AE2EFC();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 96) = v7;
  *(_QWORD *)(v5 - 88) = v9;
  sub_1A2AE34F0();
  *(_QWORD *)(v5 - 104) = a2;
  sub_1A2AE3E5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 96) = 0;
  *(_QWORD *)(v5 - 88) = 0xE000000000000000;
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 - 96) = 0xD000000000000010;
  *(_QWORD *)(v5 - 88) = 0x80000001A2B46B90;
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  return *(_QWORD *)(v5 - 96);
}

void SFError.description.getter()
{
  SFError.errorDescription.getter();
}

uint64_t static SFError.errorDomain.getter()
{
  return 0x44726F7272454653;
}

uint64_t SFError.errorCode.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1A2A1D620 + 4 * byte_1A2B02AE0[*(_QWORD *)(v0 + 80) >> 61]))(-1000);
}

uint64_t sub_1A2A1D620()
{
  return -1001;
}

uint64_t sub_1A2A1D628()
{
  return -1002;
}

uint64_t sub_1A2A1D630()
{
  return -1006;
}

uint64_t sub_1A2A1D638()
{
  return -1003;
}

uint64_t sub_1A2A1D640()
{
  return -1005;
}

uint64_t sub_1A2A1D648()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A2A1D650()
{
  return -1007;
}

unint64_t SFError.errorUserInfo.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[1];
  v18 = *v0;
  v2 = v0[3];
  v3 = v0[5];
  v16 = v0[4];
  v17 = v0[2];
  v4 = v0[7];
  v15 = v0[6];
  v5 = v0[8];
  v6 = v0[9];
  v7 = v0[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CD90);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A2AFED80;
  *(_QWORD *)(inited + 32) = sub_1A2AE343C();
  *(_QWORD *)(inited + 40) = v9;
  sub_1A2A1D82C(v18, v1, v17, v2, v16, v3, v15, v4, v5, v6, v7);
  SFError.errorDescription.getter();
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    sub_1A2A1D8D8(v18, v1, v17, v2, v16, v3, v15, v4, v5, v6, v7);
  }
  else
  {
    sub_1A2A1D8D8(v18, v1, v17, v2, v16, v3, v15, v4, v5, v6, v7);
    v13 = 0xEF2E726F72726520;
    v12 = 0x6C616E7265746E49;
  }
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = v13;
  return sub_1A2978D3C(inited);
}

void sub_1A2A1D82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __asm { BR              X10 }
}

uint64_t sub_1A2A1D874()
{
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A2A1D894()
{
  return sub_1A2A1D874();
}

uint64_t sub_1A2A1D89C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1A2A1D874();
}

uint64_t sub_1A2A1D8B4()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1A2A1D874();
}

void sub_1A2A1D8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __asm { BR              X10 }
}

uint64_t sub_1A2A1D924()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A2A1D944()
{
  return sub_1A2A1D924();
}

uint64_t sub_1A2A1D94C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1A2A1D924();
}

uint64_t sub_1A2A1D96C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1A2A1D924();
}

uint64_t sub_1A2A1D990()
{
  sub_1A2A27044();
  return sub_1A2AE3F88();
}

uint64_t sub_1A2A1D9B8()
{
  sub_1A2A27044();
  return sub_1A2AE3F7C();
}

void sub_1A2A1D9F0()
{
  SFError.errorDescription.getter();
}

uint64_t sub_1A2A1DA64()
{
  return 0x44726F7272454653;
}

uint64_t sub_1A2A1DA88()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_1A2A1DAAC + 4 * byte_1A2B02AF8[*(_QWORD *)(v0 + 80) >> 61]))(-1000);
}

uint64_t sub_1A2A1DAAC()
{
  return -1001;
}

uint64_t sub_1A2A1DAB4()
{
  return -1002;
}

uint64_t sub_1A2A1DABC()
{
  return -1006;
}

uint64_t sub_1A2A1DAC4()
{
  return -1003;
}

uint64_t sub_1A2A1DACC()
{
  return -1005;
}

uint64_t sub_1A2A1DAD4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A2A1DADC()
{
  return -1007;
}

uint64_t CodableError.domain.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CodableError.errorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t CodableError.localizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CodableError.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void CodableError.init(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v4 = (void *)sub_1A2AE2E9C();
  v5 = objc_msgSend(v4, sel_domain);
  v6 = sub_1A2AE343C();
  v34 = v7;
  v36 = v6;

  v8 = objc_msgSend(v4, sel_code);
  v9 = objc_msgSend(v4, sel_userInfo);
  v10 = sub_1A2AE337C();

  v11 = sub_1A2AE343C();
  if (*(_QWORD *)(v10 + 16) && (v13 = sub_1A297B374(v11, v12), (v14 & 1) != 0))
  {
    sub_1A296E4B4(*(_QWORD *)(v10 + 56) + 32 * v13, (uint64_t)&v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v42 + 1))
    {
      v15 = swift_dynamicCast();
      if (v15)
        v16 = v38;
      else
        v16 = 0;
      if (v15)
        v17 = v40;
      else
        v17 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1A296F108((uint64_t)&v41, &qword_1ECEFB8A0);
  v16 = 0;
  v17 = 0;
LABEL_12:
  v18 = objc_msgSend(v4, sel_userInfo, v34, v36);
  v19 = sub_1A2AE337C();

  v20 = sub_1A2AE343C();
  if (*(_QWORD *)(v19 + 16) && (v22 = sub_1A297B374(v20, v21), (v23 & 1) != 0))
  {
    sub_1A296E4B4(*(_QWORD *)(v19 + 56) + 32 * v22, (uint64_t)&v41);
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v42 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {

      v24 = (uint64_t)v38;
      v25 = v40;
      goto LABEL_31;
    }
  }
  else
  {
    sub_1A296F108((uint64_t)&v41, &qword_1ECEFB8A0);
  }
  v26 = objc_msgSend(v4, sel_userInfo);
  v27 = sub_1A2AE337C();

  if (*(_QWORD *)(v27 + 16) && (v28 = sub_1A297B374(0xD000000000000015, 0x80000001A2B46BB0), (v29 & 1) != 0))
  {
    sub_1A296E4B4(*(_QWORD *)(v27 + 56) + 32 * v28, (uint64_t)&v41);
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v42 + 1))
  {
    sub_1A296F108((uint64_t)&v41, &qword_1ECEFB8A0);
    goto LABEL_29;
  }
  sub_1A2A24358(0, (unint64_t *)&unk_1EE67F7C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    *(_QWORD *)&v41 = a1;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v24 = sub_1A2AE346C();
    v25 = v33;

    goto LABEL_31;
  }
  v30 = v38;
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = 0xE000000000000000;
  sub_1A2AE3B20();
  sub_1A2AE34F0();
  v39 = objc_msgSend(v38, sel_name);
  type metadata accessor for NSExceptionName(0);
  sub_1A2AE3BF8();

  sub_1A2AE34F0();
  v31 = objc_msgSend(v30, sel_reason);
  if (v31)
  {
    v32 = v31;
    sub_1A2AE343C();

  }
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();

  v25 = *((_QWORD *)&v41 + 1);
  v24 = v41;
LABEL_31:
  *a2 = v37;
  a2[1] = v35;
  a2[2] = v8;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v24;
  a2[6] = v25;
}

uint64_t CodableError.errorUserInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[6];
  v4 = MEMORY[0x1E0DEE9E0];
  v5 = MEMORY[0x1E0DEA968];
  if (v1)
  {
    v6 = v0[3];
    v7 = sub_1A2AE343C();
    v9 = v8;
    v18 = v5;
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v1;
    sub_1A296E4A4(&v17, v16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1A2A2336C(v16, v7, v9, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v3)
  {
    v11 = sub_1A2AE343C();
    v13 = v12;
    v18 = v5;
    *(_QWORD *)&v17 = v2;
    *((_QWORD *)&v17 + 1) = v3;
    sub_1A296E4A4(&v17, v16);
    swift_bridgeObjectRetain();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1A2A2336C(v16, v11, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

unint64_t CodableError.description.getter()
{
  _QWORD *v0;
  unint64_t v1;

  if (v0[4])
  {
    v1 = v0[3];
  }
  else if (v0[6])
  {
    v1 = v0[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1A2AE3B20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    sub_1A2AE3E5C();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A2AE34F0();
    v1 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CodableError.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  sub_1A2AE34C0();
  swift_bridgeObjectRelease();
  sub_1A2AE4018();
  if (v1)
  {
    sub_1A2AE4024();
    swift_bridgeObjectRetain();
    sub_1A2AE34C0();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      sub_1A2AE4024();
      swift_bridgeObjectRetain();
      sub_1A2AE34C0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1A2AE4024();
    if (v2)
      goto LABEL_3;
  }
  return sub_1A2AE4024();
}

uint64_t sub_1A2A1E370()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A1E39C + 4 * byte_1A2B02B00[*v0]))(0x6E69616D6F64, 0xE600000000000000);
}

uint64_t sub_1A2A1E39C()
{
  return 0x646F43726F727265;
}

unint64_t sub_1A2A1E3B8()
{
  return 0xD000000000000014;
}

unint64_t sub_1A2A1E3D8()
{
  return 0xD000000000000010;
}

uint64_t sub_1A2A1E3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A26E50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A1E418()
{
  sub_1A2A242F8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A1E440()
{
  sub_1A2A242F8();
  return sub_1A2AE4108();
}

uint64_t CodableError.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CD98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[2];
  v15[4] = v1[3];
  v15[5] = v8;
  v9 = v1[4];
  v15[2] = v1[5];
  v15[3] = v9;
  v15[1] = v1[6];
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  sub_1A2A242F8();
  sub_1A2AE40E4();
  v19 = 0;
  sub_1A2AE3DF0();
  if (!v2)
  {
    v18 = 1;
    sub_1A2AE3E14();
    v17 = 2;
    sub_1A2AE3DC0();
    v16 = 3;
    sub_1A2AE3DC0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

uint64_t CodableError.hashValue.getter()
{
  sub_1A2AE400C();
  CodableError.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t CodableError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CDA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A242F8();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v28 = 0;
  v9 = sub_1A2AE3D3C();
  v11 = v10;
  v27 = 1;
  swift_bridgeObjectRetain();
  v24 = sub_1A2AE3D60();
  v26 = 2;
  v22 = sub_1A2AE3D00();
  v23 = v13;
  v25 = 3;
  swift_bridgeObjectRetain();
  v14 = sub_1A2AE3D00();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  *a2 = v9;
  a2[1] = v11;
  v19 = v23;
  v20 = v22;
  a2[2] = v24;
  a2[3] = v20;
  a2[4] = v19;
  a2[5] = v18;
  a2[6] = v16;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A2A1E8BC()
{
  sub_1A2A27000();
  return sub_1A2AE3F88();
}

uint64_t sub_1A2A1E8E4()
{
  sub_1A2A27000();
  return sub_1A2AE3F7C();
}

uint64_t sub_1A2A1E910()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1A2A1E91C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableError.init(from:)(a1, a2);
}

uint64_t sub_1A2A1E930(_QWORD *a1)
{
  return CodableError.encode(to:)(a1);
}

uint64_t sub_1A2A1E944()
{
  sub_1A2AE400C();
  CodableError.hash(into:)();
  return sub_1A2AE4030();
}

uint64_t sub_1A2A1E9A4()
{
  sub_1A2AE400C();
  CodableError.hash(into:)();
  return sub_1A2AE4030();
}

CFTypeID NSDictionary.sf_optionalValue<A>(_:as:cfTypeID:file:line:)@<X0>(const void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v13;
  id v14;
  const void *v15;
  CFTypeID result;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  const void *v28;

  v7 = v6;
  *(_QWORD *)&v25[0] = sub_1A2AE343C();
  *((_QWORD *)&v25[0] + 1) = v13;
  swift_bridgeObjectRetain();
  v14 = objc_msgSend(v7, sel___swift_objectForKeyedSubscript_, sub_1A2AE3F34());
  swift_unknownObjectRelease();
  if (v14)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    sub_1A296E4A4(v25, &v26);
    swift_bridgeObjectRelease();
    sub_1A296E4B4((uint64_t)&v26, (uint64_t)v25);
    if (swift_dynamicCast())
    {
      v15 = v28;
      swift_unknownObjectRetain();
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(&v26, v27);
      v15 = (const void *)sub_1A2AE3EC8();
    }
    result = CFGetTypeID(v15);
    if ((const void *)result == a1)
    {
      *(_QWORD *)&v25[0] = v15;
      v17 = *(_QWORD *)(a5 - 8);
      if (*(_QWORD *)(v17 + 64) == 8)
      {
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(v17 + 16))(a6, v25, a5);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v26);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a6, 0, 1, a5);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(_QWORD *)&v25[0] = 0;
      *((_QWORD *)&v25[0] + 1) = 0xE000000000000000;
      sub_1A2AE3BF8();
      v18 = v25[0];
      *(_QWORD *)&v25[0] = a1;
      v19 = sub_1A2AE3E5C();
      v21 = v20;
      *(_QWORD *)&v25[0] = 0x4449657079544643;
      *((_QWORD *)&v25[0] + 1) = 0xEA0000000000203ALL;
      v28 = a1;
      sub_1A2AE3E5C();
      sub_1A2AE34F0();
      swift_bridgeObjectRelease();
      v22 = v25[0];
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v23 = v18;
      *(_QWORD *)(v23 + 16) = v19;
      *(_QWORD *)(v23 + 24) = v21;
      *(_OWORD *)(v23 + 32) = v22;
      *(_QWORD *)(v23 + 48) = a2;
      *(_QWORD *)(v23 + 56) = a3;
      *(_QWORD *)(v23 + 64) = a4;
      *(_OWORD *)(v23 + 72) = xmmword_1A2AFAC10;
      *(_QWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 96) = 0;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v26);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(a6, 1, 1, a5);
  }
  return result;
}

uint64_t NSDictionary.sf_optionalValue<A>(_:as:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A2A1EE68(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))NSDictionary.sf_optionalValue<A>(_:as:file:line:));
}

uint64_t NSDictionary.sf_optionalValue<A>(_:as:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  void *v7;
  uint64_t v8;
  void *v9;
  id v16;
  uint64_t result;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = a5;
  v9 = v7;
  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = a2;
  swift_bridgeObjectRetain_n();
  v16 = objc_msgSend(v9, sel___swift_objectForKeyedSubscript_, sub_1A2AE3F34(), (_QWORD)v18, *((_QWORD *)&v18 + 1));
  swift_unknownObjectRelease();
  if (v16)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    sub_1A296E4A4(&v18, v19);
    swift_bridgeObjectRelease();
    tryCast<A>(_:as:description:file:line:)((uint64_t)v19, a6, a1, a2, a3, a4, v20, a6, a7);
    result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
    if (!v8)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 0, 1, a6);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 1, 1, a6);
  }
  return result;
}

uint64_t NSDictionary.sf_value<A>(_:as:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A2A1EE68(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))NSDictionary.sf_value<A>(_:as:file:line:));
}

uint64_t sub_1A2A1EE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v8;

  v8 = sub_1A2AE343C();
  a7(v8);
  return swift_bridgeObjectRelease();
}

uint64_t NSDictionary.sf_value<A>(_:as:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  void *v7;
  id v13;
  __int128 v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  _OWORD v20[2];

  *(_QWORD *)&v19[0] = a1;
  *((_QWORD *)&v19[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v13 = objc_msgSend(v7, sel___swift_objectForKeyedSubscript_, sub_1A2AE3F34());
  swift_unknownObjectRelease();
  if (v13)
  {
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  strcpy((char *)&v17, "sf_value for ");
  HIWORD(v17) = -4864;
  sub_1A2AE34F0();
  v14 = v17;
  sub_1A297CDE4((uint64_t)v19, (uint64_t)&v17, &qword_1ECEFB8A0);
  if (v18)
  {
    sub_1A296E4A4(&v17, v20);
    sub_1A296F108((uint64_t)v19, &qword_1ECEFB8A0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    tryCast<A>(_:as:description:file:line:)((uint64_t)v20, a6, 0, 0, a3, a4, a5, a6, a7);
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v20);
  }
  else
  {
    sub_1A296F108((uint64_t)&v17, &qword_1ECEFB8A0);
    sub_1A297AFB8();
    swift_allocError();
    *(_OWORD *)v16 = v14;
    *(_QWORD *)(v16 + 16) = 0xD000000000000046;
    *(_QWORD *)(v16 + 24) = 0x80000001A2B45190;
    *(_QWORD *)(v16 + 32) = 301;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_QWORD *)(v16 + 72) = 0;
    *(_QWORD *)(v16 + 80) = 0x2000000000000000;
    *(_QWORD *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 96) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    sub_1A296F108((uint64_t)v19, &qword_1ECEFB8A0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall NSDictionary.sf_setValue(_:forKey:)(Swift::Bool _, Swift::String forKey)
{
  void *v2;
  id v3;
  id v4;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, _);
  v4 = (id)sub_1A2AE340C();
  objc_msgSend(v2, sel_setValue_forKey_, v3, v4);

}

Swift::Void __swiftcall NSDictionary.sf_setValue(_:forKey:)(Swift::Bool _, CFStringRef forKey)
{
  void *v2;
  id v4;
  id v5;

  sub_1A2AE343C();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, _);
  v5 = (id)sub_1A2AE340C();
  objc_msgSend(v2, sel_setValue_forKey_, v4, v5);
  swift_bridgeObjectRelease();

}

uint64_t NSArray.tryCastElements<A>(as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];
  uint64_t v8;

  v7[2] = a2;
  v3 = sub_1A2A24358(0, &qword_1EE67CDB0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  v5 = sub_1A2A24390();
  return sub_1A2A1F334((void (*)(char *, char *))sub_1A2A2433C, (uint64_t)v7, v3, a2, v4, v5, MEMORY[0x1E0DEDB38], (uint64_t)&v8);
}

uint64_t sub_1A2A1F2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = tryCast<A>(_:as:description:file:line:)(a1, a2, 0, 0, 0xD000000000000046, 0x80000001A2B45190, 317, a2, a4);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1A2A1F334(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_1A2AE39F4();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_1A2AE3598();
  v57 = sub_1A2AE3340();
  v53 = sub_1A2AE3BBC();
  sub_1A2AE3B98();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_1A2AE3580();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_1A2AE3A54();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_1A2AE3BA4();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_1A2AE3A54();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_1A2AE3BA4();
      sub_1A2AE3A54();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t static Task<>.noThrow(priority:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v13;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CDE4(a1, (uint64_t)v10, &qword_1ECEFB6D0);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a4;
  v11[5] = a2;
  v11[6] = a3;
  swift_retain();
  return sub_1A2A1BF40((uint64_t)v10, (uint64_t)&unk_1EE67CDC8, (uint64_t)v11, a4);
}

uint64_t sub_1A2A1F90C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A2972038;
  return v8(a1);
}

uint64_t concurrentRace<A>(priority:operation:against:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A1F994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 56) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_1A2A1FA3C;
  return sub_1A2AE3CDC();
}

uint64_t sub_1A2A1FA3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A1FAB0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A1FAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v9 = sub_1A2AE39F4();
  v8[10] = v9;
  v8[11] = *(_QWORD *)(v9 - 8);
  v8[12] = swift_task_alloc();
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A1FB64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = v0[8];
  v2 = v0[9];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[4];
  v6 = v0[5];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v2;
  v7[5] = v6;
  v7[6] = v3;
  swift_retain();
  v0[14] = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EE6767B0);
  sub_1A2AE37C0();
  sub_1A2A1C7E8(v5, (uint64_t)&unk_1EE67CF90, (uint64_t)v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v4;
  v8[6] = v1;
  swift_retain();
  sub_1A2A1C7E8(v5, (uint64_t)&unk_1EE67CFA0, (uint64_t)v8);
  v9 = (_QWORD *)swift_task_alloc();
  v0[15] = v9;
  *v9 = v0;
  v9[1] = sub_1A2A1FCA0;
  return sub_1A2AE379C();
}

uint64_t sub_1A2A1FCA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A1FD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  sub_1A2AE37B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    return sub_1A2AE3C58();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A2A1FE48()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A1FE84(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A2971EBC;
  return v8(a1);
}

uint64_t withOperationTimeout<A>(_:priority:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  v8 = sub_1A2AE3BE0();
  v7[11] = v8;
  v7[12] = *(_QWORD *)(v8 - 8);
  v7[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A1FF54()
{
  uint64_t v0;
  _QWORD *v1;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  sub_1A2AE3F70();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v1;
  sub_1A296E8A4(&qword_1EE675DB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  *v1 = v0;
  v1[1] = sub_1A2A1FFEC;
  return withOperationTimeout<A, B>(_:clock:priority:operation:)(*(_QWORD *)(v0 + 32), v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1A2A1FFEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 104);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A2008C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withOperationTimeout<A, B>(_:clock:priority:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[9] = a8;
  v8[10] = v14;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[11] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[12] = v11;
  v8[13] = *(_QWORD *)(v11 + 64);
  v8[14] = swift_task_alloc();
  v12 = *(_QWORD *)(a8 - 8);
  v8[15] = v12;
  v8[16] = *(_QWORD *)(v12 + 64);
  v8[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A20174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[17];
  v3 = v0[14];
  v2 = v0[15];
  v25 = v1;
  v26 = v0[16];
  v4 = v0[10];
  v22 = v0[12];
  v23 = v0[11];
  v6 = v0[8];
  v5 = v0[9];
  v24 = v6;
  v8 = v0[6];
  v7 = v0[7];
  v20 = v0[4];
  v21 = v0[3];
  v9 = (_QWORD *)swift_allocObject();
  v0[18] = v9;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  v9[5] = v8;
  v9[6] = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v20, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v3, v21, v23);
  v10 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v11 = (v26 + *(unsigned __int8 *)(v22 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v12 = (char *)swift_allocObject();
  v0[19] = v12;
  *((_QWORD *)v12 + 2) = v24;
  *((_QWORD *)v12 + 3) = v5;
  *((_QWORD *)v12 + 4) = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v12[v10], v25, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v12[v11], v3, v23);
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc();
  v0[20] = v13;
  v16 = type metadata accessor for OperationTimeoutResult(0, v24, v14, v15);
  *v13 = v0;
  v13[1] = sub_1A2A20334;
  v17 = v0[5];
  v18 = v0[2];
  v13[7] = v12;
  v13[8] = v16;
  v13[5] = v9;
  v13[6] = &unk_1EE67CE10;
  v13[3] = v17;
  v13[4] = &unk_1EE67CE00;
  v13[2] = v18;
  return swift_task_switch();
}

uint64_t sub_1A2A20334()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A203D8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A20434(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *(_QWORD *)(a4 - 8);
  v6 = swift_task_alloc();
  v4[5] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[6] = v7;
  *v7 = v4;
  v7[1] = sub_1A2A204C0;
  return v9(v6);
}

uint64_t sub_1A2A204C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A20524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 32))(v3, *(_QWORD *)(v0 + 40), v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v3, 0, 2, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A20594()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A205C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = swift_getAssociatedTypeWitness();
  v7 = sub_1A2AE39F4();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[12] = AssociatedTypeWitness;
  v6[13] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A206B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v8;

  v1 = v0[14];
  v2 = v0[12];
  v3 = v0[13];
  v8 = v0[11];
  v4 = v0[8];
  sub_1A2AE3F58();
  swift_getAssociatedConformanceWitness();
  sub_1A2AE3BEC();
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[16] = v5;
  v5(v1, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v8, 1, 1, v4);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = sub_1A2A207C8;
  return sub_1A2AE3F64();
}

uint64_t sub_1A2A207C8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v2(v3, v4);
  return swift_task_switch();
}

uint64_t sub_1A2A2086C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 40) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A208DC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 40) - 8) + 56))(*(_QWORD *)(v0 + 16), 2, 2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A20954@<X0>(uint64_t (*a1)(uint64_t, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;

  v72 = a4;
  v69 = a2;
  v67 = a1;
  v6 = a3 + 16;
  v5 = *(_QWORD *)(a3 + 16);
  v66 = *(_QWORD *)(v6 + 8);
  v68 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1A2AE39F4();
  v9 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  v71 = v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v61 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v61 - v17;
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v61 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v61 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v61 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v73, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v74 + 32))(v72, v32, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(uint64_t (*)(uint64_t, char *, uint64_t), uint64_t))v32)(v67, v69);
      return swift_release();
    }
  }
  else
  {
    v62 = v24;
    v63 = v21;
    v64 = v12;
    v73 = v27;
    v36 = v70;
    v37 = &v32[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v38 = v74;
    v39 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
    v39(v30, v32, AssociatedTypeWitness);
    v40 = v71;
    v41 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    v65 = v18;
    v42 = v18;
    v43 = v38;
    v41(v42, v37, v36);
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v44(v15, v69, v36);
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v46 = v45(v15, 1, AssociatedTypeWitness);
    v47 = v30;
    v67 = (uint64_t (*)(uint64_t, char *, uint64_t))v39;
    if (v46 == 1)
    {
      v48 = v70;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v15, v70);
      v49 = v73;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v73, v47, AssociatedTypeWitness);
    }
    else
    {
      v50 = v62;
      v39(v62, v15, AssociatedTypeWitness);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      v49 = v73;
      sub_1A2AE3C10();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v50, AssociatedTypeWitness);
      v48 = v70;
    }
    v73 = v47;
    v51 = v64;
    v52 = v65;
    v44(v64, (uint64_t)v65, v48);
    v53 = v45(v51, 1, AssociatedTypeWitness);
    v54 = v71;
    v55 = v72;
    v56 = v48;
    if (v53 == 1)
    {
      v57 = v51;
      v58 = *(void (**)(char *, uint64_t))(v71 + 8);
      v58(v52, v48);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, AssociatedTypeWitness);
      v58(v57, v48);
      return v67(v55, v49, AssociatedTypeWitness);
    }
    else
    {
      v59 = v63;
      v67((uint64_t)v63, v51, AssociatedTypeWitness);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      sub_1A2AE3F40();
      v60 = *(void (**)(char *, uint64_t))(v74 + 8);
      v60(v59, AssociatedTypeWitness);
      v60(v49, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v56);
      return ((uint64_t (*)(char *, uint64_t))v60)(v73, AssociatedTypeWitness);
    }
  }
}

uint64_t withAutomaticRetry<A, B>(limit:clock:backoffStrategy:shouldRetry:body:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 80) = v13;
  *(_QWORD *)(v8 + 88) = v14;
  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 72) = v12;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 32) = a4;
  *(_QWORD *)(v8 + 40) = a5;
  *(_BYTE *)(v8 + 224) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v8 + 96) = AssociatedTypeWitness;
  *(_QWORD *)(v8 + 104) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v8 + 112) = swift_task_alloc();
  v10 = sub_1A2AE39F4();
  *(_QWORD *)(v8 + 120) = v10;
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 136) = swift_task_alloc();
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A20F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 56);
  *(_QWORD *)(v0 + 152) = v3;
  v3(v1, 1, 1, v2);
  *(_QWORD *)(v0 + 160) = 1;
  v6 = (uint64_t (*)(_QWORD, uint64_t))(**(int **)(v0 + 64) + *(_QWORD *)(v0 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v4;
  *v4 = v0;
  v4[1] = sub_1A2A20F94;
  return v6(*(_QWORD *)(v0 + 16), 1);
}

uint64_t sub_1A2A20F94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A20FF8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A2105C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 160) = v1 + 1;
    v7 = (uint64_t (*)(_QWORD, uint64_t))(**(int **)(v0 + 64) + *(_QWORD *)(v0 + 64));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v6;
    *v6 = v0;
    v6[1] = sub_1A2A20F94;
    return v7(*(_QWORD *)(v0 + 16), v1 + 1);
  }
  return result;
}

uint64_t sub_1A2A21100()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD, _QWORD);

  if ((*(_BYTE *)(v0 + 224) & 1) != 0 || *(_QWORD *)(v0 + 160) < *(_QWORD *)(v0 + 24))
  {
    v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 48) + *(_QWORD *)(v0 + 48));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v3;
    *v3 = v0;
    v3[1] = sub_1A2A211E4;
    return v4(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 176));
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 128);
    swift_willThrow();
    (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A2A211E4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 225) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_1A2A2125C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, char *, uint64_t);
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v4 + 225) == 1)
  {
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 152);
    v5 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 160);
    v7 = *(_QWORD *)(v4 + 144);
    v18 = *(_QWORD *)(v4 + 136);
    v8 = *(_QWORD *)(v4 + 120);
    v9 = *(_QWORD *)(v4 + 128);
    v10 = *(_QWORD *)(v4 + 104);
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 96);
    v13 = type metadata accessor for BackoffStrategy(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
    sub_1A2A20954(v5, v7, v13, v11);
    v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    *(_QWORD *)(v4 + 200) = v14;
    v14(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v7, v11, v12);
    v6(v7, 0, 1, v12);
    v6(v18, 1, 1, v12);
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE67CE20 + dword_1EE67CE20);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 208) = v15;
    *v15 = v4;
    v15[1] = sub_1A2A213E0;
    return v19(*(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
  }
  else
  {
    v17 = *(_QWORD *)(v4 + 128);
    swift_willThrow();
    (*(void (**)(_QWORD, _QWORD))(v17 + 8))(*(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_1A2A213E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2 + 200))(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 120));
  return swift_task_switch();
}

uint64_t sub_1A2A21454()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);

  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A214C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(_QWORD, _QWORD))(v0 + 200))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A21540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A215D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[9];
  v2 = v0[7];
  v3 = v0[8];
  sub_1A2AE3F58();
  swift_getAssociatedConformanceWitness();
  sub_1A2AE3BEC();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[11] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_1A2A216B0;
  return sub_1A2AE3F64();
}

uint64_t sub_1A2A216B0()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 88);
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *v1;
  *(_QWORD *)(v5 + 104) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A2175C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withAutomaticRetry<A>(limit:backoffStrategy:shouldRetry:body:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;

  *(_QWORD *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 64) = a2;
  *(_QWORD *)(v8 + 72) = a5;
  *(_BYTE *)(v8 + 50) = a3;
  *(_QWORD *)(v8 + 56) = a1;
  v10 = sub_1A2AE3BE0();
  *(_QWORD *)(v8 + 112) = v10;
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v8 + 136) = *(_OWORD *)a4;
  *(_OWORD *)(v8 + 152) = v11;
  *(_WORD *)(v8 + 51) = *(_WORD *)(a4 + 32);
  return swift_task_switch();
}

uint64_t sub_1A2A21824()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_WORD *)(v0 + 51);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v7 = *(_OWORD *)(v0 + 136);
  v4 = *(_BYTE *)(v0 + 50);
  sub_1A2AE3F70();
  *(_OWORD *)(v0 + 16) = v7;
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v2;
  *(_WORD *)(v0 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  sub_1A296E8A4(&qword_1EE675DB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  *v5 = v0;
  v5[1] = sub_1A2A218F0;
  return withAutomaticRetry<A, B>(limit:clock:backoffStrategy:shouldRetry:body:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), v4 & 1, *(_QWORD *)(v0 + 128), v0 + 16, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1A2A218F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 120);
  v2 = *(_QWORD *)(*v1 + 128);
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *v1;
  *(_QWORD *)(v5 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A21994()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFPlatform.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Sharing::SFPlatform __swiftcall SFPlatform.init(rawValue:)(Sharing::SFPlatform rawValue)
{
  Sharing::SFPlatform *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SFPlatform.iOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SFPlatform.macOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static SFPlatform.watchOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SFPlatform.tvOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static SFPlatform.visionOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static SFPlatform.isPlatform(_:)(_DWORD *a1)
{
  return *a1 & 1;
}

_QWORD *sub_1A2A21A20@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1A2A21A34@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1A2A21A48@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1A2A21A5C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1A2A21A8C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1A2A21AB8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1A2A21ADC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1A2A21AF0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1A2A21B04(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1A2A21B18@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1A2A21B2C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1A2A21B40(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1A2A21B54(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1A2A21B68()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1A2A21B78(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1A2A21B90(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A2A21BF4;
  return v6(a1);
}

uint64_t sub_1A2A21BF4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A21C40(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = sub_1A2AE3C40();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEFB890);
  v39 = a2;
  v10 = sub_1A2AE3C70();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_1A296E4A4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_1A296E4B4(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = sub_1A2AE3388();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)sub_1A296E4A4(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1A2A21FC4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  __int128 v42;

  v5 = v3;
  v7 = sub_1A2AE3130();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v41 = a2;
  v12 = sub_1A2AE3C70();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v40 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v38 = v3;
  v39 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = v40;
    v26 = v40[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_34;
      v26 = v40[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_34:
          swift_release();
          v5 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v40[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v39)
              goto LABEL_34;
            v26 = v40[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v42 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v42 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v23);
      swift_retain();
    }
    sub_1A296E8A4(&qword_1EE6766E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1A2AE3388();
    v30 = -1 << *(_BYTE *)(v13 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v18 + 8 * v32);
      }
      while (v36 == -1);
      v21 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_OWORD *)(*(_QWORD *)(v13 + 56) + 16 * v21) = v42;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v38;
  v25 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v11 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t sub_1A2A22360(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1A2AE3130();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE676738);
  v42 = a2;
  v10 = sub_1A2AE3C70();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    sub_1A296E8A4(&qword_1EE6766E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1A2AE3388();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1A2A226F4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;
  uint64_t v45;

  v3 = v2;
  v5 = sub_1A2AE3130();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B358);
  v44 = a2;
  v9 = sub_1A2AE3C70();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v42 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v40 = v2;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  for (i = v8; ; v8 = i)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_34;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v41)
              goto LABEL_34;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v45 + 72);
    v27 = *(_QWORD *)(v8 + 48) + v26 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 32))(v7, v27, v5);
      v28 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v21);
      v30 = *v28;
      v29 = v28[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v7, v27, v5);
      v31 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v21);
      v30 = *v31;
      v29 = v31[1];
      swift_bridgeObjectRetain();
    }
    sub_1A296E8A4(&qword_1EE6766E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1A2AE3388();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v18, v7, v5);
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v18);
    *v19 = v30;
    v19[1] = v29;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v8 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1A2A22AA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B340);
  v6 = sub_1A2AE3C70();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1A296E4A4(v24, v35);
      }
      else
      {
        sub_1A296E4B4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1A2AE400C();
      sub_1A2AE34C0();
      result = sub_1A2AE4030();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1A296E4A4(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A2A22D9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1A2A22F30(a1, a2, a3, a4, &qword_1EE67B370);
}

_OWORD *sub_1A2A22DA8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1A2AE3C40();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1A297AF68(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
        return sub_1A296E4A4(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1A2A236DC();
      goto LABEL_7;
    }
    sub_1A2A21C40(v17, a3 & 1);
    v23 = sub_1A297AF68(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1A2A2349C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)sub_1A2AE3F4C();
  __break(1u);
  return result;
}

uint64_t sub_1A2A22F24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1A2A22F30(a1, a2, a3, a4, &qword_1EE67B368);
}

uint64_t sub_1A2A22F30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (_QWORD **)v5;
  v28 = a1;
  v29 = a2;
  v10 = sub_1A2AE3130();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1A297AF04(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 16 * v16);
      result = swift_release();
      v25 = v29;
      *v23 = v28;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1A2A23918(a5);
    goto LABEL_7;
  }
  sub_1A2A21FC4(v19, a4 & 1, a5);
  v26 = sub_1A297AF04(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_1A2AE3F4C();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  return sub_1A2A2353C(v16, (uint64_t)v13, v28, v29, v22);
}

uint64_t sub_1A2A230A4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1A2AE3130();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1A297AF04(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1A2A23B54();
    goto LABEL_7;
  }
  sub_1A2A22360(v17, a3 & 1);
  v23 = sub_1A297AF04(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_1A2AE3F4C();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1A2A235DC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1A2A23200(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = sub_1A2AE3130();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1A297AF04(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_bridgeObjectRelease();
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1A2A23D84();
    goto LABEL_7;
  }
  sub_1A2A226F4(v18, a4 & 1);
  v25 = sub_1A297AF04(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = sub_1A2AE3F4C();
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1A2A2353C(v15, (uint64_t)v12, a1, v28, v21);
}

_OWORD *sub_1A2A2336C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1A297B374(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
        return sub_1A296E4A4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1A2A23FF4();
      goto LABEL_7;
    }
    sub_1A2A22AA0(v15, a4 & 1);
    v21 = sub_1A297B374(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1A2A23674(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1A2AE3F4C();
  __break(1u);
  return result;
}

_OWORD *sub_1A2A2349C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1A2AE3C40();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1A296E4A4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1A2A2353C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_1A2AE3130();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_1A2A235DC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1A2AE3130();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_1A2A23674(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1A296E4A4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_1A2A236DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = sub_1A2AE3C40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECEFB890);
  v6 = *v0;
  v7 = sub_1A2AE3C64();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_1A296E4B4(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_1A296E4A4(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A2A23918(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;

  v3 = v1;
  v4 = sub_1A2AE3130();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v8 = *v1;
  v9 = sub_1A2AE3C64();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v3 = v10;
    return result;
  }
  v28 = v3;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v29 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v18)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v14;
    if (!v26)
    {
      v14 = v25 + 1;
      if (v25 + 1 >= v18)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v14);
      if (!v26)
        break;
    }
LABEL_25:
    v17 = (v26 - 1) & v26;
    v20 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v21, v4);
    v22 = 16 * v20;
    v23 = *(_QWORD *)(v10 + 48) + v21;
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v30 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    *(_OWORD *)(*(_QWORD *)(v10 + 56) + v22) = v30;
    result = (void *)swift_retain();
  }
  v27 = v25 + 2;
  if (v27 >= v18)
  {
LABEL_26:
    result = (void *)swift_release();
    v3 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v14 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v14 >= v18)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v14);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A2A23B54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_1A2AE3130();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE676738);
  v24 = v0;
  v5 = *v0;
  v6 = sub_1A2AE3C64();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A2A23D84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = sub_1A2AE3130();
  v1 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B358);
  v32 = v0;
  v3 = *v0;
  v4 = sub_1A2AE3C64();
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1A2A23FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B340);
  v2 = *v0;
  v3 = sub_1A2AE3C64();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1A296E4B4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1A296E4A4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL _s7Sharing12CodableErrorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v8)
      return 0;
  }
  else
  {
    v12 = sub_1A2AE3EE0();
    result = 0;
    if ((v12 & 1) == 0 || v2 != v8)
      return result;
  }
  if (!v4)
  {
    if (v10)
      return 0;
    goto LABEL_14;
  }
  if (!v10)
    return 0;
  if (v3 == v7 && v4 == v10 || (v14 = sub_1A2AE3EE0(), result = 0, (v14 & 1) != 0))
  {
LABEL_14:
    if (v6)
      return v11 && (v5 == v9 && v6 == v11 || (sub_1A2AE3EE0() & 1) != 0);
    return !v11;
  }
  return result;
}

unint64_t sub_1A2A242F8()
{
  unint64_t result;

  result = qword_1EE67CDA0;
  if (!qword_1EE67CDA0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B030D4, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CDA0);
  }
  return result;
}

uint64_t sub_1A2A2433C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1A2A1F2E0(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t sub_1A2A24358(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1A2A24390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE67CDB8;
  if (!qword_1EE67CDB8)
  {
    v1 = sub_1A2A24358(255, &qword_1EE67CDB0);
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0CB2010], v1);
    atomic_store(result, (unint64_t *)&qword_1EE67CDB8);
  }
  return result;
}

uint64_t sub_1A2A243EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2971EBC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE67CDC0 + dword_1EE67CDC0))(a1, v4, v5, v6);
}

uint64_t sub_1A2A24480(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v11 = v2[6];
  v10 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_1A2971EBC;
  return sub_1A2A1FAE4(a1, a2, v7, v8, v9, v11, v10, v6);
}

uint64_t sub_1A2A24514()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A24538(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = (int *)v1[5];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2972038;
  return sub_1A2A20434(a1, v5, v6, v4);
}

uint64_t sub_1A2A245B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_1A2A24678(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  v11 = (uint64_t)v1 + v8;
  v12 = (uint64_t)v1 + ((v9 + v10) & ~v10);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1A2972038;
  return sub_1A2A205C8(a1, v11, v12, v4, v5, v6);
}

uint64_t type metadata accessor for OperationTimeoutResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OperationTimeoutResult);
}

uint64_t type metadata accessor for BackoffStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackoffStrategy);
}

unint64_t sub_1A2A2476C()
{
  unint64_t result;

  result = qword_1EE67CE30;
  if (!qword_1EE67CE30)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CodableError, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1EE67CE30);
  }
  return result;
}

unint64_t sub_1A2A247B4()
{
  unint64_t result;

  result = qword_1EE67CE38;
  if (!qword_1EE67CE38)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CodableError, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1EE67CE38);
  }
  return result;
}

unint64_t sub_1A2A247FC()
{
  unint64_t result;

  result = qword_1EE67CE40;
  if (!qword_1EE67CE40)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFPlatform, &type metadata for SFPlatform);
    atomic_store(result, (unint64_t *)&qword_1EE67CE40);
  }
  return result;
}

unint64_t sub_1A2A24844()
{
  unint64_t result;

  result = qword_1EE67CE48;
  if (!qword_1EE67CE48)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFPlatform, &type metadata for SFPlatform);
    atomic_store(result, (unint64_t *)&qword_1EE67CE48);
  }
  return result;
}

unint64_t sub_1A2A2488C()
{
  unint64_t result;

  result = qword_1EE67CE50;
  if (!qword_1EE67CE50)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFPlatform, &type metadata for SFPlatform);
    atomic_store(result, (unint64_t *)&qword_1EE67CE50);
  }
  return result;
}

unint64_t sub_1A2A248D4()
{
  unint64_t result;

  result = qword_1EE67CE58[0];
  if (!qword_1EE67CE58[0])
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFPlatform, &type metadata for SFPlatform);
    atomic_store(result, qword_1EE67CE58);
  }
  return result;
}

void destroy for SFError(uint64_t *a1)
{
  sub_1A2A1D8D8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t *initializeWithCopy for SFError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  sub_1A2A1D82C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return a1;
}

uint64_t assignWithCopy for SFError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  v24 = a2[10];
  v25 = a2[11];
  v26 = a2[12];
  sub_1A2A1D82C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  sub_1A2A1D8D8(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SFError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 96) = v3;
  sub_1A2A1D8D8(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFError(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SFError(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 80) = 2 * -a2;
      return result;
    }
    *(_BYTE *)(a1 + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A2A24C74(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) >> 61;
}

uint64_t sub_1A2A24C80(uint64_t result)
{
  *(_QWORD *)(result + 80) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1A2A24C90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 1 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for SFError()
{
  return &type metadata for SFError;
}

uint64_t destroy for CodableError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CodableError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError()
{
  return &type metadata for CodableError;
}

uint64_t sub_1A2A24EF0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A2A24EF8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1A2A24F50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1A2A250E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1A2A25144(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1A2A25234(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_1A2A25384(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1A2A25474(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_1A2A255C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_1A2A25758(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0u;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1A2A25974(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_1A2A25988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t sub_1A2A2599C()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2 = sub_1A2AE39F4();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
      swift_getTupleTypeLayout2();
      v7 = &v6;
      v8 = v4;
      v9 = MEMORY[0x1E0DEE9D0] + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1A2A25A6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(uint64_t *, uint64_t *, uint64_t);
  _QWORD *v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  v9 = v6 + v7;
  v10 = (v6 + v8) & ~v8;
  if (*(_DWORD *)(v5 + 84))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v6 + 1;
  if (v6 <= v10 + v11)
    v6 = v10 + v11;
  if (v6 <= 0x10)
    v12 = 16;
  else
    v12 = v6;
  v13 = v7 & 0x100000;
  if (v8 > 7 || v13 != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
LABEL_27:
    swift_retain();
    return a1;
  }
  v17 = AssociatedTypeWitness;
  v18 = *((unsigned __int8 *)a2 + v12);
  if (v18 >= 3)
  {
    if (v12 <= 3)
      v19 = v12;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  if (v18 == 2)
  {
    v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    *((_BYTE *)a1 + v12) = 2;
    goto LABEL_27;
  }
  if (v18 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v12) = 1;
  }
  else
  {
    v22 = ~v8;
    v23 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v23(a1, a2, AssociatedTypeWitness);
    v24 = (_QWORD *)(((unint64_t)a2 + v9) & v22);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v24, 1, v17))
    {
      memcpy((void *)(((unint64_t)a1 + v9) & v22), v24, v11);
    }
    else
    {
      v23((uint64_t *)(((unint64_t)a1 + v9) & v22), v24, v17);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v9) & v22, 0, 1, v17);
    }
    *((_BYTE *)a1 + v12) = 0;
  }
  return a1;
}

uint64_t sub_1A2A25C7C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  if (*(_DWORD *)(v3 + 84))
    v7 = *(_QWORD *)(v3 + 64);
  else
    v7 = v4 + 1;
  if (v4 <= v7 + ((v4 + v5) & ~v5))
    v4 = v7 + ((v4 + v5) & ~v5);
  if (v4 <= 0x10)
    v4 = 16;
  v8 = *(unsigned __int8 *)(a1 + v4);
  if (v8 >= 3)
  {
    if (v4 <= 3)
      v9 = v4;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 2)
    return swift_release();
  if (v8 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v11 = ~v5;
  v13 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v13(a1, AssociatedTypeWitness);
  v12 = (v6 + a1) & v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v12, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, AssociatedTypeWitness);
  return result;
}

_QWORD *sub_1A2A25E14(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = v6 + 1;
  if (v6 <= ((v6 + v7) & ~v7) + v9)
    v6 = ((v6 + v7) & ~v7) + v9;
  if (v6 <= 0x10)
    v10 = 16;
  else
    v10 = v6;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    *((_BYTE *)a1 + v10) = 2;
    swift_retain();
  }
  else if (v11 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v10) = 1;
  }
  else
  {
    v14 = ~v7;
    v15 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
    v15(a1, a2, AssociatedTypeWitness);
    v16 = (_QWORD *)(((unint64_t)a2 + v8) & v14);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v16, 1, AssociatedTypeWitness))
    {
      memcpy((void *)(((unint64_t)a1 + v8) & v14), v16, v9);
    }
    else
    {
      v15((_QWORD *)(((unint64_t)a1 + v8) & v14), v16, AssociatedTypeWitness);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v8) & v14, 0, 1, AssociatedTypeWitness);
    }
    *((_BYTE *)a1 + v10) = 0;
  }
  return a1;
}

_QWORD *sub_1A2A25FE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = v6 + 1;
    if (v6 <= ((v6 + v7) & ~v7) + v9)
      v6 = ((v6 + v7) & ~v7) + v9;
    if (v6 <= 0x10)
      v10 = 16;
    else
      v10 = v6;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v7;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
      v14(a1, AssociatedTypeWitness);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v8) & v13, 1, AssociatedTypeWitness))v14((_QWORD *)(((unint64_t)a1 + v8) & v13), AssociatedTypeWitness);
    }
    v15 = *((unsigned __int8 *)a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      *((_BYTE *)a1 + v10) = 2;
      swift_retain();
    }
    else if (v15 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
      v17(a1, a2, AssociatedTypeWitness);
      v18 = (_QWORD *)(((unint64_t)a2 + v8) & v13);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v18, 1, AssociatedTypeWitness))
      {
        memcpy((void *)(((unint64_t)a1 + v8) & v13), v18, v9);
      }
      else
      {
        v17((_QWORD *)(((unint64_t)a1 + v8) & v13), v18, AssociatedTypeWitness);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v8) & v13, 0, 1, AssociatedTypeWitness);
      }
      *((_BYTE *)a1 + v10) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1A2A262D8(_OWORD *a1, _OWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = v6 + 1;
  if (v6 <= ((v6 + v7) & ~v7) + v9)
    v6 = ((v6 + v7) & ~v7) + v9;
  if (v6 <= 0x10)
    v10 = 16;
  else
    v10 = v6;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v13 = 2;
  }
  else if (v11 == 1)
  {
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v13 = 1;
  }
  else
  {
    v14 = ~v7;
    v15 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32);
    v15(a1, a2, AssociatedTypeWitness);
    v16 = (_OWORD *)(((unint64_t)a2 + v8) & v14);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(v16, 1, AssociatedTypeWitness))
    {
      memcpy((void *)(((unint64_t)a1 + v8) & v14), v16, v9);
    }
    else
    {
      v15((_OWORD *)(((unint64_t)a1 + v8) & v14), v16, AssociatedTypeWitness);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v8) & v14, 0, 1, AssociatedTypeWitness);
    }
    v13 = 0;
  }
  *((_BYTE *)a1 + v10) = v13;
  return a1;
}

_OWORD *sub_1A2A264A4(_OWORD *a1, _OWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_OWORD *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  char v17;
  void (*v18)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = v6 + 1;
    if (v6 <= ((v6 + v7) & ~v7) + v9)
      v6 = ((v6 + v7) & ~v7) + v9;
    if (v6 <= 0x10)
      v10 = 16;
    else
      v10 = v6;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v7;
    if (v11 == 2)
    {
      swift_release();
    }
    else if (v11 == 1)
    {
      (*(void (**)(_OWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      v14 = *(void (**)(_OWORD *, uint64_t))(v5 + 8);
      v14(a1, AssociatedTypeWitness);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a1 + v8) & v13, 1, AssociatedTypeWitness))v14((_OWORD *)(((unint64_t)a1 + v8) & v13), AssociatedTypeWitness);
    }
    v15 = *((unsigned __int8 *)a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *a1 = *a2;
      v17 = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v17 = 1;
    }
    else
    {
      v18 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32);
      v18(a1, a2, AssociatedTypeWitness);
      v19 = (_OWORD *)(((unint64_t)a2 + v8) & v13);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(v19, 1, AssociatedTypeWitness))
      {
        memcpy((void *)(((unint64_t)a1 + v8) & v13), v19, v9);
      }
      else
      {
        v18((_OWORD *)(((unint64_t)a1 + v8) & v13), v19, AssociatedTypeWitness);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v8) & v13, 0, 1, AssociatedTypeWitness);
      }
      v17 = 0;
    }
    *((_BYTE *)a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_1A2A26754(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = (v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = v5 + 1;
  v8 = v7 + v6;
  if (v5 > v8)
    v8 = v5;
  v9 = 16;
  if (v8 > 0x10)
    v9 = v8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_26;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 253) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 < 2)
    {
LABEL_26:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 3)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_26;
LABEL_19:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  return (v15 + 254);
}

void sub_1A2A268BC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  v10 = v9 + v8;
  if (v7 > v10)
    v10 = v7;
  if (v10 <= 0x10)
    v10 = 16;
  v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v13 = a2 - 254;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_1A2A26AA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = (v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  if (*(_DWORD *)(v2 + 84))
    v5 = *(_QWORD *)(v2 + 64);
  else
    v5 = v3 + 1;
  v6 = v5 + v4;
  if (v3 > v6)
    v6 = v3;
  if (v6 <= 0x10)
    v6 = 16;
  result = *(unsigned __int8 *)(a1 + v6);
  if (result >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1A2A26B8C(_BYTE *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char v11;
  int v12;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = v6 + 1;
  v9 = v8 + v7;
  if (v6 > v9)
    v9 = v6;
  if (v9 <= 0x10)
    v10 = 16;
  else
    v10 = v9;
  if (a2 > 2)
  {
    if (v10 <= 3)
      v11 = ((a2 - 3) >> (8 * v10)) + 3;
    else
      v11 = 3;
    a1[v10] = v11;
    if (v10 >= 4)
      v12 = 4;
    else
      v12 = v10;
    bzero(a1, v10);
    __asm { BR              X10 }
  }
  a1[v10] = a2;
  return result;
}

ValueMetadata *type metadata accessor for SFPlatform()
{
  return &type metadata for SFPlatform;
}

uint64_t storeEnumTagSinglePayload for CodableError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A2A26CF8 + 4 * byte_1A2B02B56[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A2A26D2C + 4 * byte_1A2B02B51[v4]))();
}

uint64_t sub_1A2A26D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A26D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A26D3CLL);
  return result;
}

uint64_t sub_1A2A26D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A26D50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A2A26D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A26D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableError.CodingKeys()
{
  return &type metadata for CodableError.CodingKeys;
}

unint64_t sub_1A2A26D7C()
{
  unint64_t result;

  result = qword_1EE67CF60;
  if (!qword_1EE67CF60)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B030AC, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CF60);
  }
  return result;
}

unint64_t sub_1A2A26DC4()
{
  unint64_t result;

  result = qword_1EE67CF68;
  if (!qword_1EE67CF68)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0301C, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CF68);
  }
  return result;
}

unint64_t sub_1A2A26E0C()
{
  unint64_t result;

  result = qword_1EE67CF70;
  if (!qword_1EE67CF70)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03044, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67CF70);
  }
  return result;
}

uint64_t sub_1A2A26E50(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001A2B46C10 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B46C30)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1A2A27000()
{
  unint64_t result;

  result = qword_1EE67CF78;
  if (!qword_1EE67CF78)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CodableError, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1EE67CF78);
  }
  return result;
}

unint64_t sub_1A2A27044()
{
  unint64_t result;

  result = qword_1EE67CF80;
  if (!qword_1EE67CF80)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFError, &type metadata for SFError);
    atomic_store(result, &qword_1EE67CF80);
  }
  return result;
}

uint64_t sub_1A2A2708C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2972038;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1A2972038;
  return v8(a1);
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A27144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2972038;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1A2971EBC;
  return v8(a1);
}

uint64_t sub_1A2A271CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A271F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2972038;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE67CFA8 + dword_1EE67CFA8))(a1, v4);
}

uint64_t UTType.init(identifier:allowUndeclared:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFD0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A2AE31B4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  v10 = 1;
  v11 = objc_msgSend((id)objc_opt_self(), sel__typeWithIdentifier_allowUndeclared_, v9, 1);

  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if (v11)
  {
    v12(v4, 1, 1, v5);
    sub_1A2A27400();
    sub_1A2AE3CC4();

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v13 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v13(v8, v4, v5);
      v13(a1, v8, v5);
      v10 = 0;
    }
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v12)(a1, v10, 1, v5);
}

unint64_t sub_1A2A27400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE67CFD8;
  if (!qword_1EE67CFD8)
  {
    v1 = sub_1A2AE31B4();
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DF0370], v1);
    atomic_store(result, (unint64_t *)&qword_1EE67CFD8);
  }
  return result;
}

uint64_t UTType.init(systemIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFD0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  UTType.init(identifier:allowUndeclared:)(v4);
  v5 = sub_1A2AE31B4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1A2A275AC((uint64_t)v4);
    v8 = 0;
    v9 = 0xE000000000000000;
    sub_1A2AE3B20();
    swift_bridgeObjectRelease();
    v8 = 0xD00000000000002ELL;
    v9 = 0x80000001A2B46D20;
    sub_1A2AE34F0();
    result = sub_1A2AE3C58();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  return result;
}

uint64_t sub_1A2A275AC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A2A275EC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1A2AE31B4();
  __swift_allocate_value_buffer(v0, qword_1EE67CFB8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE67CFB8);
  return UTType.init(systemIdentifier:)(v1);
}

uint64_t static UTType.livePhotoBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EE67AA70 != -1)
    swift_once();
  v2 = sub_1A2AE31B4();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EE67CFB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t SFAirDrop.DisplayPriority.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616D726F6ELL;
  else
    return 1751607656;
}

uint64_t SFAirDrop.DisplayPriority.hash(into:)()
{
  return sub_1A2AE4018();
}

BOOL static SFAirDrop.DisplayPriority.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A2A2772C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616D726F6ELL;
  else
    return 1751607656;
}

uint64_t sub_1A2A2775C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A28214(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A27780()
{
  sub_1A2A27A44();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A277A8()
{
  sub_1A2A27A44();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A277D0()
{
  sub_1A2A27ACC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A277F8()
{
  sub_1A2A27ACC();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A27820()
{
  sub_1A2A27A88();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A27848()
{
  sub_1A2A27A88();
  return sub_1A2AE4108();
}

uint64_t SFAirDrop.DisplayPriority.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFE0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFE8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67CFF0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A27A44();
  sub_1A2AE40E4();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A2A27A88();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A2A27ACC();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A2A27A44()
{
  unint64_t result;

  result = qword_1EE67CFF8;
  if (!qword_1EE67CFF8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0346C, &_s15DisplayPriorityO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67CFF8);
  }
  return result;
}

unint64_t sub_1A2A27A88()
{
  unint64_t result;

  result = qword_1EE67D000;
  if (!qword_1EE67D000)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0341C, &_s15DisplayPriorityO16NormalCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D000);
  }
  return result;
}

unint64_t sub_1A2A27ACC()
{
  unint64_t result;

  result = qword_1EE67D008;
  if (!qword_1EE67D008)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B033CC, &_s15DisplayPriorityO14HighCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D008);
  }
  return result;
}

uint64_t SFAirDrop.DisplayPriority.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t SFAirDrop.DisplayPriority.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D010);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D018);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D020);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A27A44();
  v11 = v33;
  sub_1A2AE40C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A2AE3D9C();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A2AE3B5C();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v21 = &type metadata for SFAirDrop.DisplayPriority;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0Tm(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A2A27A88();
    sub_1A2AE3CE8();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A2A27ACC();
    v22 = v6;
    sub_1A2AE3CE8();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0Tm(v24);
}

unint64_t sub_1A2A27EB0()
{
  unint64_t result;

  result = qword_1EE67D028;
  if (!qword_1EE67D028)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.DisplayPriority, &type metadata for SFAirDrop.DisplayPriority);
    atomic_store(result, (unint64_t *)&qword_1EE67D028);
  }
  return result;
}

uint64_t sub_1A2A27EF4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SFAirDrop.DisplayPriority.init(from:)(a1, a2);
}

uint64_t sub_1A2A27F08(_QWORD *a1)
{
  return SFAirDrop.DisplayPriority.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for SFAirDrop.DisplayPriority()
{
  return &type metadata for SFAirDrop.DisplayPriority;
}

uint64_t _s15DisplayPriorityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A2A27F7C + 4 * byte_1A2B03135[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A2A27FB0 + 4 * byte_1A2B03130[v4]))();
}

uint64_t sub_1A2A27FB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A27FB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A27FC0);
  return result;
}

uint64_t sub_1A2A27FCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A27FD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A2A27FD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A27FE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15DisplayPriorityO10CodingKeysOMa()
{
  return &_s15DisplayPriorityO10CodingKeysON;
}

ValueMetadata *_s15DisplayPriorityO14HighCodingKeysOMa()
{
  return &_s15DisplayPriorityO14HighCodingKeysON;
}

ValueMetadata *_s15DisplayPriorityO16NormalCodingKeysOMa()
{
  return &_s15DisplayPriorityO16NormalCodingKeysON;
}

unint64_t sub_1A2A28020()
{
  unint64_t result;

  result = qword_1EE67D030;
  if (!qword_1EE67D030)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B033A4, &_s15DisplayPriorityO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D030);
  }
  return result;
}

unint64_t sub_1A2A28068()
{
  unint64_t result;

  result = qword_1EE67D038;
  if (!qword_1EE67D038)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B032C4, &_s15DisplayPriorityO14HighCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D038);
  }
  return result;
}

unint64_t sub_1A2A280B0()
{
  unint64_t result;

  result = qword_1EE67D040;
  if (!qword_1EE67D040)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B032EC, &_s15DisplayPriorityO14HighCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D040);
  }
  return result;
}

unint64_t sub_1A2A280F8()
{
  unint64_t result;

  result = qword_1EE67D048;
  if (!qword_1EE67D048)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03274, &_s15DisplayPriorityO16NormalCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D048);
  }
  return result;
}

unint64_t sub_1A2A28140()
{
  unint64_t result;

  result = qword_1EE67D050;
  if (!qword_1EE67D050)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0329C, &_s15DisplayPriorityO16NormalCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D050);
  }
  return result;
}

unint64_t sub_1A2A28188()
{
  unint64_t result;

  result = qword_1EE67D058;
  if (!qword_1EE67D058)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03314, &_s15DisplayPriorityO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D058);
  }
  return result;
}

unint64_t sub_1A2A281D0()
{
  unint64_t result;

  result = qword_1EE67D060;
  if (!qword_1EE67D060)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0333C, &_s15DisplayPriorityO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D060);
  }
  return result;
}

uint64_t sub_1A2A28214(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1751607656 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SFAirDropSend.Request.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
}

uint64_t SFAirDropSend.Request.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_1A2993E70(v4, v5, v6);
}

uint64_t type metadata accessor for SFAirDropSend.Request()
{
  uint64_t result;

  result = qword_1EE6746C0;
  if (!qword_1EE6746C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SFAirDropSend.Request.urls.getter()
{
  type metadata accessor for SFAirDropSend.Request();
  return swift_bridgeObjectRetain();
}

uint64_t SFAirDropSend.Request.endpointID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 28);
  v4 = sub_1A2AE3130();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SFAirDropSend.Request.urlsPromise.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropSend.Request();
  return sub_1A297CDE4(v1 + *(int *)(v3 + 32), a1, &qword_1EE67D068);
}

uint64_t SFAirDropSend.Request.urlsMetadata.getter()
{
  type metadata accessor for SFAirDropSend.Request();
  return swift_bridgeObjectRetain();
}

uint64_t SFAirDropSend.Request.customPayload.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 40);
  v2 = *(_QWORD *)v1;
  sub_1A297CF68(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SFAirDropSend.Request.itemPreviewData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 44);
  v2 = *(_QWORD *)v1;
  sub_1A297CF68(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t SFAirDropSend.Request.itemPreviewData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 44);
  result = sub_1A29B98D8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*SFAirDropSend.Request.itemPreviewData.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropSend.Request();
  return nullsub_1;
}

uint64_t SFAirDropSend.Request.itemDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.Request.itemDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SFAirDropSend.Request.itemDescription.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropSend.Request();
  return nullsub_1;
}

uint64_t SFAirDropSend.Request.requestSource.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropSend.Request.requestSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SFAirDropSend.Request() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SFAirDropSend.Request.requestSource.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SFAirDropSend.Request();
  return nullsub_1;
}

uint64_t SFAirDropSend.Request.init(id:type:urls:endpointID:itemPreviewData:itemDescription:requestSource:customPayload:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;

  v17 = *a2;
  v18 = a2[1];
  v19 = *((_BYTE *)a2 + 16);
  v20 = (int *)type metadata accessor for SFAirDropSend.Request();
  v21 = (_QWORD *)(a9 + v20[11]);
  v22 = (_QWORD *)(a9 + v20[12]);
  v30 = (_QWORD *)(a9 + v20[13]);
  sub_1A2A287F0(a1, a9);
  v23 = a9 + v20[5];
  *(_QWORD *)v23 = v17;
  *(_QWORD *)(v23 + 8) = v18;
  *(_BYTE *)(v23 + 16) = v19;
  *(_QWORD *)(a9 + v20[6]) = a3;
  v24 = a9 + v20[7];
  v25 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a4, v25);
  v26 = a9 + v20[8];
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  *(_QWORD *)(a9 + v20[9]) = 0;
  v29 = (_QWORD *)(a9 + v20[10]);
  *v29 = a12;
  v29[1] = a13;
  *v21 = a5;
  v21[1] = a6;
  *v22 = a7;
  v22[1] = a8;
  *v30 = a10;
  v30[1] = a11;
  return result;
}

uint64_t sub_1A2A287F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SFAirDropSend.Request.init(id:type:urlsPromise:urlsMetadata:endpointID:itemDescription:requestSource:customPayload:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v17 = *a2;
  v18 = a2[1];
  v19 = *((_BYTE *)a2 + 16);
  v20 = (int *)type metadata accessor for SFAirDropSend.Request();
  v21 = (_OWORD *)(a9 + v20[11]);
  *v21 = xmmword_1A2B034C0;
  v22 = (_QWORD *)(a9 + v20[12]);
  *v22 = 0;
  v22[1] = 0;
  v42 = v21;
  v43 = v22;
  v23 = (_QWORD *)(a9 + v20[13]);
  *v23 = 0;
  v23[1] = 0;
  v46 = v23;
  v45 = a1;
  sub_1A2990388(a1, a9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v24 = a9 + v20[5];
  *(_QWORD *)v24 = v17;
  *(_QWORD *)(v24 + 8) = v18;
  *(_BYTE *)(v24 + 16) = v19;
  *(_QWORD *)(a9 + v20[6]) = 0;
  v25 = a9 + v20[7];
  v40 = sub_1A2AE3130();
  v41 = *(_QWORD *)(v40 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v25, a5, v40);
  v26 = a9 + v20[8];
  v44 = a3;
  sub_1A297CDE4(a3, v26, &qword_1EE674658);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  *(_QWORD *)(a9 + v20[9]) = a4;
  v28 = (uint64_t *)(a9 + v20[10]);
  *v28 = a11;
  v28[1] = a12;
  v29 = *(_QWORD *)(a4 + 16);
  if (v29)
  {
    swift_bridgeObjectRetain();
    sub_1A297CF68(a11, a12);
    swift_bridgeObjectRetain();
    v30 = (unint64_t *)(a4 + 136);
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v33 = *v30;
      if (*v30 >> 60 != 15)
      {
        v34 = *(v30 - 1);
        sub_1A2973524(v34, *v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = sub_1A296D634(0, v31[2] + 1, 1, v31);
        v36 = v31[2];
        v35 = v31[3];
        if (v36 >= v35 >> 1)
          v31 = sub_1A296D634((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
        v31[2] = v36 + 1;
        v32 = &v31[2 * v36];
        v32[4] = v34;
        v32[5] = v33;
      }
      v30 += 15;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_1A297CF68(a11, a12);
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if (v31[2])
  {
    v37 = v31[4];
    v38 = v31[5];
    sub_1A2973524(v37, v38);
  }
  else
  {
    v37 = 0;
    v38 = 0xF000000000000000;
  }
  sub_1A29B98D8(a11, a12);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a5, v40);
  sub_1A296F108(v44, &qword_1EE674658);
  sub_1A297DA3C(v45, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  swift_bridgeObjectRelease();
  sub_1A29B98D8(*(_QWORD *)v42, *((_QWORD *)v42 + 1));
  *(_QWORD *)v42 = v37;
  *((_QWORD *)v42 + 1) = v38;
  swift_bridgeObjectRelease();
  *v43 = a6;
  v43[1] = a7;
  result = swift_bridgeObjectRelease();
  *v46 = a8;
  v46[1] = a10;
  return result;
}

uint64_t SFAirDropSend.Request.init(id:type:urlsMetadata:endpointID:itemDescription:requestSource:customPayload:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  int *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;

  v14 = *a2;
  v15 = a2[1];
  v16 = *((_BYTE *)a2 + 16);
  v17 = (int *)type metadata accessor for SFAirDropSend.Request();
  *(_OWORD *)(a9 + v17[11]) = xmmword_1A2B034C0;
  v18 = (_QWORD *)(a9 + v17[12]);
  v19 = (_QWORD *)(a9 + v17[13]);
  sub_1A2A287F0(a1, a9);
  v20 = a9 + v17[5];
  *(_QWORD *)v20 = v14;
  *(_QWORD *)(v20 + 8) = v15;
  *(_BYTE *)(v20 + 16) = v16;
  *(_QWORD *)(a9 + v17[6]) = 0;
  v21 = a9 + v17[7];
  v22 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a4, v22);
  v23 = a9 + v17[8];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)(a9 + v17[9]) = a3;
  v26 = (_QWORD *)(a9 + v17[10]);
  *v26 = a10;
  v26[1] = a11;
  *v18 = a5;
  v18[1] = a6;
  *v19 = a7;
  v19[1] = a8;
  return result;
}

uint64_t SFAirDropSend.Request.requestWithType(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t result;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91[2];
  unsigned __int8 v92;

  v86 = sub_1A2AE3130();
  v5 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  v13 = *(_QWORD *)(v89 - 8);
  v14 = MEMORY[0x1E0C80A78](v89);
  v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v80 - v17;
  v19 = *(_QWORD *)a1;
  v87 = *(_QWORD *)(a1 + 8);
  v88 = v19;
  v90 = *(unsigned __int8 *)(a1 + 16);
  v20 = type metadata accessor for SFAirDropSend.Request();
  v21 = (int *)v20;
  v22 = *(_QWORD *)(v2 + *(int *)(v20 + 24));
  if (v22)
  {
    sub_1A2990388(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2 + v21[7], v2 + v21[7], v86);
    v24 = v21[10];
    v23 = v21[11];
    v25 = *(_QWORD *)(v2 + v23);
    v85 = *(char **)(v2 + v23 + 8);
    v26 = v21[12];
    v27 = v21[13];
    v28 = *(_QWORD *)(v2 + v26);
    v82 = *(char **)(v2 + v26 + 8);
    v83 = v28;
    v29 = *(_QWORD *)(v2 + v27 + 8);
    v86 = *(_QWORD *)(v2 + v27);
    v84 = v29;
    v30 = (uint64_t *)(v2 + v24);
    v32 = *v30;
    v31 = v30[1];
    v80 = v32;
    v81 = (char *)v31;
    v33 = (uint64_t *)(a2 + v23);
    v34 = (_QWORD *)(a2 + v26);
    v35 = (_QWORD *)(a2 + v27);
    v36 = a2 + v21[5];
    v37 = v87;
    v38 = v88;
    *(_QWORD *)v36 = v88;
    *(_QWORD *)(v36 + 8) = v37;
    *(_BYTE *)(v36 + 16) = v90;
    *(_QWORD *)(a2 + v21[6]) = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2 + v21[8], 1, 1, v89);
    *(_QWORD *)(a2 + v21[9]) = 0;
    v39 = (uint64_t *)(a2 + v21[10]);
    v41 = v80;
    v40 = (unint64_t)v81;
    *v39 = v80;
    v39[1] = v40;
    v42 = (unint64_t)v85;
    *v33 = v25;
    v33[1] = v42;
    v43 = (uint64_t)v82;
    *v34 = v83;
    v34[1] = v43;
    v44 = v84;
    *v35 = v86;
    v35[1] = v44;
    sub_1A2993E70(v38, v37, v90);
    sub_1A297CF68(v25, v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A297CF68(v41, v40);
    return swift_bridgeObjectRetain();
  }
  v82 = v16;
  v45 = v90;
  v84 = (unint64_t)v18;
  sub_1A297CDE4(v2 + *(int *)(v20 + 32), (uint64_t)v12, &qword_1EE67D068);
  v83 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v89) == 1)
  {
    sub_1A296F108((uint64_t)v12, &qword_1EE67D068);
    v46 = a2;
  }
  else
  {
    v47 = (uint64_t)v12;
    v48 = v84;
    sub_1A2990414(v47, v84, &qword_1EE674658);
    v46 = a2;
    if (*(_QWORD *)(v2 + v21[9]))
    {
      v89 = *(_QWORD *)(v2 + v21[9]);
      v81 = v9;
      sub_1A2990388(v2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
      v49 = v48;
      v50 = v87;
      v91[0] = v88;
      v91[1] = v87;
      v92 = v45;
      v51 = (uint64_t)v82;
      sub_1A297CDE4(v49, (uint64_t)v82, &qword_1EE674658);
      v52 = (uint64_t)v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v85, v2 + v21[7], v86);
      v53 = v21[13];
      v54 = (uint64_t *)(v2 + v21[12]);
      v83 = *v54;
      v55 = v45;
      v56 = v54[1];
      v57 = *(_QWORD *)(v2 + v53 + 8);
      v86 = *(_QWORD *)(v2 + v53);
      v58 = (uint64_t *)(v2 + v21[10]);
      v59 = *v58;
      v60 = v58[1];
      sub_1A2993E70(v88, v50, v55);
      swift_bridgeObjectRetain();
      v61 = v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A297CF68(v59, v60);
      SFAirDropSend.Request.init(id:type:urlsPromise:urlsMetadata:endpointID:itemDescription:requestSource:customPayload:)((uint64_t)v81, v91, v51, v61, v52, v83, v56, v86, v46, v57, v59, v60);
      sub_1A296F108(v84, &qword_1EE674658);
      return swift_bridgeObjectRetain();
    }
    sub_1A296F108(v48, &qword_1EE674658);
  }
  v62 = (uint64_t *)(v2 + v21[10]);
  v84 = v62[1];
  v85 = 0;
  v63 = v86;
  if (v84 >> 60 != 15 && *(_QWORD *)(v2 + v21[9]))
  {
    v64 = *(_QWORD *)(v2 + v21[9]);
    v82 = (char *)*v62;
    sub_1A2990388(v2, v46, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v46 + v21[7], v2 + v21[7], v63);
    v65 = v21[11];
    v66 = (uint64_t *)(v2 + v21[12]);
    v67 = v66[1];
    v86 = *v66;
    v68 = (uint64_t *)(v2 + v21[13]);
    v69 = v68[1];
    v81 = (char *)*v68;
    *(_OWORD *)(v46 + v65) = xmmword_1A2B034C0;
    v70 = (_QWORD *)(v46 + v21[12]);
    v71 = (_QWORD *)(v46 + v21[13]);
    v72 = v46 + v21[5];
    v73 = v87;
    v74 = v88;
    *(_QWORD *)v72 = v88;
    *(_QWORD *)(v72 + 8) = v73;
    v75 = v90;
    *(_BYTE *)(v72 + 16) = v90;
    *(_QWORD *)(v46 + v21[6]) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v46 + v21[8], 1, 1, v89);
    *(_QWORD *)(v46 + v21[9]) = v64;
    v76 = (_QWORD *)(v46 + v21[10]);
    v77 = (uint64_t)v82;
    v78 = v84;
    *v76 = v82;
    v76[1] = v78;
    *v70 = v86;
    v70[1] = v67;
    *v71 = v81;
    v71[1] = v69;
    sub_1A2993E70(v74, v73, v75);
    sub_1A297CF68(v77, v78);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  result = sub_1A2AE3C58();
  __break(1u);
  return result;
}

uint64_t sub_1A2A29260(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A29288 + 4 * byte_1A2B034D0[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1A2A29288()
{
  return 1701869940;
}

uint64_t sub_1A2A29298()
{
  return 1936487029;
}

uint64_t sub_1A2A292A8()
{
  return 0x746E696F70646E65;
}

uint64_t sub_1A2A292C4()
{
  return 0x6D6F7250736C7275;
}

uint64_t sub_1A2A292E4()
{
  return 0x6174654D736C7275;
}

uint64_t sub_1A2A29304()
{
  return 0x61506D6F74737563;
}

uint64_t sub_1A2A29328()
{
  return 0x766572506D657469;
}

uint64_t sub_1A2A2934C()
{
  return 0x637365446D657469;
}

uint64_t sub_1A2A29370()
{
  return 0x5374736575716572;
}

uint64_t sub_1A2A29394()
{
  unsigned __int8 *v0;

  return sub_1A2A29260(*v0);
}

uint64_t sub_1A2A2939C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A2B320(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2A293C0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1A2A293CC()
{
  sub_1A2A2A01C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A293F4()
{
  sub_1A2A2A01C();
  return sub_1A2AE4108();
}

uint64_t SFAirDropSend.Request.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  __int128 *v10;
  char v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D070);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A2A01C();
  sub_1A2AE40E4();
  LOBYTE(v15) = 0;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1A296E8A4(&qword_1EE67C938, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  sub_1A2AE3E2C();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for SFAirDropSend.Request();
    v10 = (__int128 *)(v3 + v9[5]);
    v11 = *((_BYTE *)v10 + 16);
    v15 = *v10;
    v16 = v11;
    v14 = 1;
    sub_1A2A12210();
    sub_1A2AE3E2C();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[6]);
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D080);
    sub_1A2A2A0C8(&qword_1EE67D088, &qword_1EE67C0B8, (uint64_t)&protocol conformance descriptor for SFSecurityScopedURL, MEMORY[0x1E0DEAF10]);
    sub_1A2AE3DE4();
    LOBYTE(v15) = 3;
    sub_1A2AE3130();
    sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1A2AE3E2C();
    LOBYTE(v15) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
    sub_1A2A2A14C(&qword_1EE67D090, (uint64_t)&protocol conformance descriptor for SFXPCBlock<A, B>);
    sub_1A2AE3DE4();
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v9[9]);
    v14 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D098);
    sub_1A2A2A060(&qword_1EE67D0A0, (uint64_t (*)(void))sub_1A29E5604, MEMORY[0x1E0DEAF10]);
    sub_1A2AE3DE4();
    v15 = *(_OWORD *)(v3 + v9[10]);
    v14 = 6;
    sub_1A29735F8();
    sub_1A2AE3DE4();
    v15 = *(_OWORD *)(v3 + v9[11]);
    v14 = 7;
    sub_1A2AE3DE4();
    LOBYTE(v15) = 8;
    sub_1A2AE3DC0();
    LOBYTE(v15) = 9;
    sub_1A2AE3DC0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SFAirDropSend.Request.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  int *v50;
  __int128 v51;
  char v52;
  char v53;

  v39 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A2AE3130();
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D0A8);
  v12 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropSend.Request();
  v16 = (int *)MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = &v18[v16[11]];
  v50 = v16;
  *(_OWORD *)v49 = xmmword_1A2B034C0;
  v19 = &v18[v16[12]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v47 = (uint64_t *)v19;
  v48 = v18;
  v20 = &v18[v16[13]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v44 = v20;
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A2A01C();
  v40 = v14;
  v21 = v46;
  sub_1A2AE40C0();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
    sub_1A29B98D8(*(_QWORD *)v49, *((_QWORD *)v49 + 1));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v5;
    v46 = v12;
    LOBYTE(v51) = 0;
    sub_1A296E8A4(&qword_1EE67C988, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    sub_1A2AE3D78();
    v22 = (uint64_t)v48;
    sub_1A2A287F0((uint64_t)v11, (uint64_t)v48);
    v53 = 1;
    sub_1A2A122F0();
    sub_1A2AE3D78();
    v23 = v52;
    v24 = v50;
    v25 = v22 + v50[5];
    *(_OWORD *)v25 = v51;
    *(_BYTE *)(v25 + 16) = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D080);
    v53 = 2;
    sub_1A2A2A0C8(&qword_1EE67D0B0, &qword_1EE67C0D0, (uint64_t)&protocol conformance descriptor for SFSecurityScopedURL, MEMORY[0x1E0DEAF40]);
    sub_1A2AE3D30();
    *(_QWORD *)(v22 + v24[6]) = v51;
    LOBYTE(v51) = 3;
    sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v26 = v43;
    sub_1A2AE3D78();
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v22 + v24[7], v8, v26);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
    LOBYTE(v51) = 4;
    sub_1A2A2A14C(&qword_1EE67D0B8, (uint64_t)&protocol conformance descriptor for SFXPCBlock<A, B>);
    v27 = (uint64_t)v38;
    sub_1A2AE3D30();
    sub_1A2990414(v27, v22 + v24[8], &qword_1EE67D068);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D098);
    v53 = 5;
    sub_1A2A2A060(&qword_1EE67D0C0, (uint64_t (*)(void))sub_1A29E5648, MEMORY[0x1E0DEAF40]);
    sub_1A2AE3D30();
    *(_QWORD *)(v22 + v24[9]) = v51;
    v53 = 6;
    sub_1A2973680();
    sub_1A2AE3D30();
    *(_OWORD *)(v22 + v24[10]) = v51;
    v53 = 7;
    sub_1A2AE3D30();
    *(_OWORD *)v49 = v51;
    LOBYTE(v51) = 8;
    v29 = sub_1A2AE3D00();
    v30 = v47;
    *v47 = v29;
    v30[1] = v31;
    LOBYTE(v51) = 9;
    v32 = sub_1A2AE3D00();
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v41);
    v35 = (uint64_t *)v44;
    swift_bridgeObjectRelease();
    *v35 = v32;
    v35[1] = v34;
    v36 = (uint64_t)v48;
    sub_1A2990388((uint64_t)v48, v39, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v45);
    return sub_1A297DA3C(v36, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  }
}

uint64_t sub_1A2A29F98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropSend.Request.init(from:)(a1, a2);
}

uint64_t sub_1A2A29FAC(_QWORD *a1)
{
  return SFAirDropSend.Request.encode(to:)(a1);
}

BOOL SFAirDropSend.Request.supportsPipelining.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v5;

  v1 = type metadata accessor for SFAirDropSend.Request();
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v3 = *((unsigned __int8 *)v2 + 16);
  if (v3 != 3)
    return v3 == 1;
  v5 = *v2;
  return !*(_QWORD *)(v0 + *(int *)(v1 + 20) + 8) && v5 == 1;
}

unint64_t sub_1A2A2A01C()
{
  unint64_t result;

  result = qword_1EE67D078;
  if (!qword_1EE67D078)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B036EC, &_s7RequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D078);
  }
  return result;
}

uint64_t sub_1A2A2A060(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67D098);
    v8 = a2();
    result = MEMORY[0x1A85895EC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A2A2A0C8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67D080);
    v10 = sub_1A296E8A4(a2, type metadata accessor for SFSecurityScopedURL, a3);
    result = MEMORY[0x1A85895EC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A2A2A14C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE674658);
    result = MEMORY[0x1A85895EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *_s7RequestVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE3130();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v14 = v11[16];
    sub_1A2993E70(*(_QWORD *)v11, v13, v14);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    v10[16] = v14;
    v15 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    swift_bridgeObjectRetain();
    v8((uint64_t *)v16, (uint64_t *)v17, v7);
    v18 = a3[8];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v19, (uint64_t *)v20, v7);
      v25 = *(int *)(v21 + 68);
      v26 = &v19[v25];
      v27 = &v20[v25];
      v28 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = v28;
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
      swift_retain();
      v29(v19, 0, 1, v21);
    }
    v30 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v31 = (char *)a1 + v30;
    v32 = (_OWORD *)((char *)a2 + v30);
    v33 = *(uint64_t *)((char *)a2 + v30 + 8);
    swift_bridgeObjectRetain();
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)v31 = *v32;
    }
    else
    {
      v34 = *(_QWORD *)v32;
      sub_1A2973524(v34, v33);
      *(_QWORD *)v31 = v34;
      *((_QWORD *)v31 + 1) = v33;
    }
    v35 = a3[11];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = *((_QWORD *)v37 + 1);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
    }
    else
    {
      v39 = *(_QWORD *)v37;
      sub_1A2973524(*(_QWORD *)v37, *((_QWORD *)v37 + 1));
      *(_QWORD *)v36 = v39;
      *((_QWORD *)v36 + 1) = v38;
    }
    v40 = a3[12];
    v41 = a3[13];
    v42 = (uint64_t *)((char *)a1 + v40);
    v43 = (uint64_t *)((char *)a2 + v40);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = (uint64_t *)((char *)a1 + v41);
    v46 = (uint64_t *)((char *)a2 + v41);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s7RequestVwxx(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v4 = sub_1A2AE3130();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_1A2994E20(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8), *(_BYTE *)(a1 + a2[5] + 16));
  swift_bridgeObjectRelease();
  v5(a1 + a2[7], v4);
  v6 = a1 + a2[8];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    swift_release();
  }
  swift_bridgeObjectRelease();
  v8 = (uint64_t *)(a1 + a2[10]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1A29736C4(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[11]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_1A29736C4(*v10, v11);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s7RequestVwcp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v6 = sub_1A2AE3130();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  sub_1A2993E70(*(_QWORD *)v10, v12, v13);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = v13;
  v14 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  swift_bridgeObjectRetain();
  v7(v15, v16, v6);
  v17 = a3[8];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v18, (uint64_t)v19, v6);
    v23 = *(int *)(v20 + 68);
    v24 = &v18[v23];
    v25 = &v19[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
    swift_retain();
    v27(v18, 0, 1, v20);
  }
  v28 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v29 = a1 + v28;
  v30 = (_OWORD *)(a2 + v28);
  v31 = *(_QWORD *)(a2 + v28 + 8);
  swift_bridgeObjectRetain();
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)v29 = *v30;
  }
  else
  {
    v32 = *(_QWORD *)v30;
    sub_1A2973524(v32, v31);
    *(_QWORD *)v29 = v32;
    *(_QWORD *)(v29 + 8) = v31;
  }
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = (uint64_t *)(a2 + v33);
  v36 = v35[1];
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v37 = *v35;
    sub_1A2973524(*v35, v35[1]);
    *(_QWORD *)v34 = v37;
    *(_QWORD *)(v34 + 8) = v36;
  }
  v38 = a3[12];
  v39 = a3[13];
  v40 = (_QWORD *)(a1 + v38);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = (_QWORD *)(a1 + v39);
  v44 = (_QWORD *)(a2 + v39);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7RequestVwca(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;

  v6 = sub_1A2AE3130();
  v57 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  sub_1A2993E70(*(_QWORD *)v10, v12, v13);
  v14 = *(_QWORD *)v9;
  v15 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = v12;
  v16 = *(_BYTE *)(v9 + 16);
  *(_BYTE *)(v9 + 16) = v13;
  sub_1A2994E20(v14, v15, v16);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7(a1 + a3[7], a2 + a3[7], v6);
  v58 = a3;
  v17 = a3[8];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v9) = v22(v18, 1, v20);
  v23 = v22(v19, 1, v20);
  if ((_DWORD)v9)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v18, v19, v6);
      v24 = *(int *)(v20 + 68);
      v25 = &v18[v24];
      v26 = &v19[v24];
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = v27;
      v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
      swift_retain();
      v28(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_1A296F108((uint64_t)v18, &qword_1EE674658);
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v7((uint64_t)v18, (uint64_t)v19, v6);
  v53 = *(int *)(v20 + 68);
  v54 = &v18[v53];
  v55 = &v19[v53];
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = v56;
  swift_retain();
  swift_release();
LABEL_7:
  *(_QWORD *)(a1 + v58[9]) = *(_QWORD *)(a2 + v58[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v58[10];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *(_QWORD *)(a2 + v30 + 8);
  if (*(_QWORD *)(a1 + v30 + 8) >> 60 == 15)
  {
    if (v33 >> 60 != 15)
    {
      v34 = *v32;
      sub_1A2973524(v34, v33);
      *v31 = v34;
      v31[1] = v33;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v33 >> 60 == 15)
  {
    sub_1A299C970((uint64_t)v31);
LABEL_12:
    *(_OWORD *)v31 = *(_OWORD *)v32;
    goto LABEL_14;
  }
  v35 = *v32;
  sub_1A2973524(v35, v33);
  v36 = *v31;
  v37 = v31[1];
  *v31 = v35;
  v31[1] = v33;
  sub_1A29736C4(v36, v37);
LABEL_14:
  v38 = v58[11];
  v39 = (uint64_t *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = *(_QWORD *)(a2 + v38 + 8);
  if (*(_QWORD *)(a1 + v38 + 8) >> 60 != 15)
  {
    if (v41 >> 60 != 15)
    {
      v43 = *v40;
      sub_1A2973524(v43, v41);
      v44 = *v39;
      v45 = v39[1];
      *v39 = v43;
      v39[1] = v41;
      sub_1A29736C4(v44, v45);
      goto LABEL_21;
    }
    sub_1A299C970((uint64_t)v39);
    goto LABEL_19;
  }
  if (v41 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_21;
  }
  v42 = *v40;
  sub_1A2973524(v42, v41);
  *v39 = v42;
  v39[1] = v41;
LABEL_21:
  v46 = v58[12];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  *v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = v58[13];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  *v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7RequestVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_1A2AE3130();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  v12 = *(_QWORD *)(a2 + v9);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_QWORD *)(a1 + v9) = v12;
  v7(a1 + a3[7], a2 + a3[7], v6);
  v13 = a3[8];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    *(_OWORD *)&v14[*(int *)(v16 + 68)] = *(_OWORD *)&v15[*(int *)(v16 + 68)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t _s7RequestVwta(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v6 = sub_1A2AE3130();
  v47 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 16);
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v9 + 8);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v14 = *(_BYTE *)(v9 + 16);
  *(_BYTE *)(v9 + 16) = v11;
  sub_1A2994E20(v12, v13, v14);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  v7(a1 + a3[7], a2 + a3[7], v6);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = (char *)(a2 + v15);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v48 = v16;
  LODWORD(v16) = v20(v16, 1, v18);
  v21 = v20((uint64_t)v17, 1, v18);
  if ((_DWORD)v16)
  {
    if (v21)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068) - 8) + 64);
      v23 = (void *)v48;
LABEL_6:
      memcpy(v23, v17, v22);
      goto LABEL_9;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v17, v6);
    *(_OWORD *)(v48 + *(int *)(v18 + 68)) = *(_OWORD *)&v17[*(int *)(v18 + 68)];
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v18);
  }
  else
  {
    if (v21)
    {
      sub_1A296F108(v48, &qword_1EE674658);
      v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068) - 8) + 64);
      v23 = (void *)v48;
      goto LABEL_6;
    }
    v7(v48, (uint64_t)v17, v6);
    *(_OWORD *)(v48 + *(int *)(v18 + 68)) = *(_OWORD *)&v17[*(int *)(v18 + 68)];
    swift_release();
  }
LABEL_9:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a1 + v24 + 8);
  if (v27 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_14;
  }
  v28 = *(_QWORD *)(v26 + 8);
  if (v28 >> 60 == 15)
  {
    sub_1A299C970(v25);
    goto LABEL_12;
  }
  v29 = *(_QWORD *)v25;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)(v25 + 8) = v28;
  sub_1A29736C4(v29, v27);
LABEL_14:
  v30 = a3[11];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *(_QWORD *)(a1 + v30 + 8);
  if (v33 >> 60 != 15)
  {
    v34 = v32[1];
    if (v34 >> 60 != 15)
    {
      v35 = *v31;
      *v31 = *v32;
      v31[1] = v34;
      sub_1A29736C4(v35, v33);
      goto LABEL_19;
    }
    sub_1A299C970((uint64_t)v31);
  }
  *(_OWORD *)v31 = *(_OWORD *)v32;
LABEL_19:
  v36 = a3[12];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  v41 = a3[13];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s7RequestVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A2AEC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[6]);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_1A2AE3130();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[7];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = a3[8];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t _s7RequestVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A2AFA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for SFAirDrop.TransferIdentifier();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6]) = a2;
      return result;
    }
    v13 = sub_1A2AE3130();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D068);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A2A2B074()
{
  unint64_t v0;
  unint64_t v1;

  sub_1A2AE3130();
  if (v0 <= 0x3F)
  {
    sub_1A2A2B124();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1A2A2B124()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE674660)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE674658);
    v0 = sub_1A2AE39F4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE674660);
  }
}

uint64_t _s7RequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1A2A2B1C8 + 4 * byte_1A2B034DF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1A2A2B1FC + 4 * byte_1A2B034DA[v4]))();
}

uint64_t sub_1A2A2B1FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A2B204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A2B20CLL);
  return result;
}

uint64_t sub_1A2A2B218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A2B220);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1A2A2B224(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A2B22C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7RequestV10CodingKeysOMa()
{
  return &_s7RequestV10CodingKeysON;
}

unint64_t sub_1A2A2B24C()
{
  unint64_t result;

  result = qword_1EE67D0C8;
  if (!qword_1EE67D0C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B036C4, &_s7RequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D0C8);
  }
  return result;
}

unint64_t sub_1A2A2B294()
{
  unint64_t result;

  result = qword_1EE67D0D0;
  if (!qword_1EE67D0D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03634, &_s7RequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D0D0);
  }
  return result;
}

unint64_t sub_1A2A2B2DC()
{
  unint64_t result;

  result = qword_1EE67D0D8;
  if (!qword_1EE67D0D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0365C, &_s7RequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D0D8);
  }
  return result;
}

uint64_t sub_1A2A2B320(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1936487029 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E696F70646E65 && a2 == 0xEA00000000004449 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D6F7250736C7275 && a2 == 0xEB00000000657369 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6174654D736C7275 && a2 == 0xEC00000061746164 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x61506D6F74737563 && a2 == 0xED000064616F6C79 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x766572506D657469 && a2 == 0xEF61746144776569 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x637365446D657469 && a2 == 0xEF6E6F6974706972 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x5374736575716572 && a2 == 0xED0000656372756FLL)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

BOOL SFAirDrop.TransferType.isFiles.getter()
{
  uint64_t v0;
  int v1;
  _BOOL8 result;

  v1 = *(unsigned __int8 *)(v0 + 16);
  result = 1;
  if (v1 != 1)
  {
    if (v1 != 3)
      return 0;
    if (*(_QWORD *)(v0 + 8) || *(_QWORD *)v0 != 1)
      return 0;
  }
  return result;
}

BOOL SFAirDrop.TransferType.isPeerPayment.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0 == 2 && *(_QWORD *)(v0 + 8) == 0 && *(_BYTE *)(v0 + 16) == 3;
}

void SFAirDrop.TransferType.description.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_1A2A2B84C()
{
  sub_1A2AE3B20();
  swift_bridgeObjectRelease();
  sub_1A2AE34F0();
  sub_1A2AE34F0();
  return 0xD000000000000019;
}

uint64_t SFAirDrop.TransferType.exchangeType.getter()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 > 2)
    return 0;
  v3 = v0;
  v2 = *(_QWORD *)v0;
  sub_1A2993E70(v2, *(_QWORD *)(v3 + 8), v1);
  return v2;
}

BOOL SFAirDrop.TransferType.isLinks.getter()
{
  uint64_t v0;

  return !*(_BYTE *)(v0 + 16) || *(_BYTE *)(v0 + 16) == 3 && *(_OWORD *)v0 == 0;
}

BOOL SFAirDrop.TransferType.isOnlyExchange.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) == 2;
}

BOOL SFAirDrop.TransferType.isCustom.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0 == 2 && *(_QWORD *)(v0 + 8) == 0 && *(_BYTE *)(v0 + 16) == 3;
}

double static SFAirDrop.TransferType.transferType(for:shouldExchangeContacts:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  double result;

  v6 = type metadata accessor for SFAirDropSend.Request();
  v7 = (uint64_t *)(a1 + *(int *)(v6 + 20));
  v8 = *((unsigned __int8 *)v7 + 16);
  if (v8 == 3 && ((v9 = *v7, !*(_QWORD *)(a1 + *(int *)(v6 + 20) + 8)) ? (v10 = v9 == 2) : (v10 = 0), v10))
  {
    *(_QWORD *)&result = 2;
    *(_OWORD *)a3 = xmmword_1A2B03F40;
    *(_BYTE *)(a3 + 16) = 3;
  }
  else
  {
    static SFAirDrop.TransferType.transferType(for:onlyExchange:shouldExchangeContacts:)(*(_QWORD *)(a1 + *(int *)(v6 + 24)), v8 == 2, a2 & 1, a3);
  }
  return result;
}

uint64_t static SFAirDrop.TransferType.transferType(for:onlyExchange:shouldExchangeContacts:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for SFSecurityScopedURL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v31 - v14;
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)a4 = xmmword_1A2B03F50;
    *(_BYTE *)(a4 + 16) = 2;
  }
  else
  {
    if (a1)
    {
      v16 = MEMORY[0x1E0DEE9D8];
      v36 = MEMORY[0x1E0DEE9D8];
      v17 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRetain();
      if (v17)
      {
        v34 = a3;
        v35 = a4;
        v18 = v17;
        v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v20 = *(_QWORD *)(v9 + 72);
        v33 = a1;
        v21 = a1 + v19;
        v22 = MEMORY[0x1E0DEE9D8];
        v32 = v17;
        do
        {
          sub_1A29BF108(v21, (uint64_t)v15);
          if ((sub_1A2AE2ED8() & 1) != 0)
          {
            sub_1A29BF14C((uint64_t)v15);
          }
          else
          {
            sub_1A2A2D5B0((uint64_t)v15, (uint64_t)v12);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1A29BE398(0, *(_QWORD *)(v22 + 16) + 1, 1);
            v22 = v36;
            v24 = *(_QWORD *)(v36 + 16);
            v23 = *(_QWORD *)(v36 + 24);
            if (v24 >= v23 >> 1)
            {
              sub_1A29BE398(v23 > 1, v24 + 1, 1);
              v22 = v36;
            }
            *(_QWORD *)(v22 + 16) = v24 + 1;
            sub_1A2A2D5B0((uint64_t)v12, v22 + v19 + v24 * v20);
          }
          v21 += v20;
          --v18;
        }
        while (v18);
        a4 = v35;
        v16 = v36;
        LOBYTE(a3) = v34;
        v17 = v32;
      }
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(v16 + 16);
      result = swift_release();
      v26 = 0xE300000000000000;
      if ((a3 & 1) == 0)
        v26 = 0;
      if (v25 == v17)
      {
        if ((a3 & 1) != 0)
          v27 = 6710134;
        else
          v27 = 0;
        if ((a3 & 1) != 0)
          v28 = 0;
        else
          v28 = 3;
      }
      else
      {
        if ((a3 & 1) != 0)
          v27 = 6710134;
        else
          v27 = 1;
        if ((a3 & 1) != 0)
          v28 = 1;
        else
          v28 = 3;
      }
      *(_QWORD *)a4 = v27;
      *(_QWORD *)(a4 + 8) = v26;
    }
    else
    {
      v29 = 6710134;
      if ((a3 & 1) == 0)
        v29 = 1;
      v30 = 0xE300000000000000;
      if ((a3 & 1) != 0)
      {
        v28 = 1;
      }
      else
      {
        v30 = 0;
        v28 = 3;
      }
      *(_QWORD *)a4 = v29;
      *(_QWORD *)(a4 + 8) = v30;
    }
    *(_BYTE *)(a4 + 16) = v28;
  }
  return result;
}

_QWORD *static SFAirDrop.TransferType.transferType(for:onlyExchange:shouldExchangeContacts:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _OWORD *v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _OWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[3];

  v36 = a3;
  v37 = a2;
  v38 = a4;
  v5 = sub_1A2AE31B4();
  v39 = *(_QWORD *)(v5 - 8);
  result = (_QWORD *)MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = (_OWORD *)(a1 + 32);
    do
    {
      v12 = v10[3];
      v41 = v10[2];
      v42 = v12;
      v13 = v10[7];
      v45 = v10[6];
      v46[0] = v13;
      *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v10 + 121);
      v14 = v10[5];
      v43 = v10[4];
      v44 = v14;
      v15 = v10[1];
      v40[0] = *v10;
      v40[1] = v15;
      if ((_QWORD)v42)
        v16 = *((_QWORD *)&v41 + 1);
      else
        v16 = 0;
      if ((_QWORD)v42)
        v17 = v42;
      else
        v17 = 0xE000000000000000;
      sub_1A29E5E84(v40);
      swift_bridgeObjectRetain();
      v18 = (void *)sub_1A2AE340C();
      v19 = objc_msgSend(v18, sel_pathExtension);

      v20 = sub_1A2AE343C();
      v22 = v21;

      if (qword_1EE67AAA8 != -1)
        swift_once();
      __swift_project_value_buffer(v5, (uint64_t)qword_1EE6ADD18);
      if (v16 == sub_1A2AE319C() && v17 == v23)
      {
        swift_bridgeObjectRelease();
LABEL_33:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = sub_1A29E5F28(v40);
LABEL_34:
        v29 = v38;
        *v38 = xmmword_1A2B03F40;
        v30 = 3;
LABEL_35:
        *((_BYTE *)v29 + 16) = v30;
        return result;
      }
      v24 = sub_1A2AE3EE0();
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
        goto LABEL_33;
      sub_1A2AE31A8();
      v25 = sub_1A2AE319C();
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v5);
      if (v16 == v25 && v17 == v27)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = sub_1A2AE3EE0();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = sub_1A29E5F28(v40);
          goto LABEL_4;
        }
      }
      if (v20 == 0x6170726565706B70 && v22 == 0xED0000746E656D79)
        goto LABEL_33;
      v11 = sub_1A2AE3EE0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_1A29E5F28(v40);
      if ((v11 & 1) != 0)
        goto LABEL_34;
LABEL_4:
      v10 += 9;
      --v9;
    }
    while (v9);
  }
  if ((v37 & 1) != 0)
  {
    v29 = v38;
    *v38 = xmmword_1A2B03F50;
    v30 = 2;
    goto LABEL_35;
  }
  v31 = 6710134;
  if ((v36 & 1) == 0)
    v31 = 1;
  v32 = 0xE300000000000000;
  if ((v36 & 1) != 0)
  {
    v33 = 1;
  }
  else
  {
    v32 = 0;
    v33 = 3;
  }
  v34 = v38;
  *(_QWORD *)v38 = v31;
  *((_QWORD *)v34 + 1) = v32;
  *((_BYTE *)v34 + 16) = v33;
  return result;
}

void SFAirDrop.TransferType.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1A2A2C0B4()
{
  sub_1A2AE4018();
  return sub_1A2AE34C0();
}

uint64_t sub_1A2A2C0EC()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A2A2C12C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A2C15C + 4 * byte_1A2B03748[a1]))(0x736B6E696CLL, 0xE500000000000000);
}

unint64_t sub_1A2A2C15C()
{
  return 0xD000000000000011;
}

uint64_t sub_1A2A2C194()
{
  return 0x65676E6168637865;
}

uint64_t sub_1A2A2C1AC()
{
  return 0x6D79615072656570;
}

uint64_t sub_1A2A2C1CC()
{
  unsigned __int8 *v0;

  return sub_1A2A2C12C(*v0);
}

uint64_t sub_1A2A2C1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A2E0A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A2C1F8()
{
  sub_1A2A2D5F4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C220()
{
  sub_1A2A2D5F4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C248()
{
  return 1701869940;
}

uint64_t sub_1A2A2C25C()
{
  sub_1A2A2D67C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C284()
{
  sub_1A2A2D67C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C2AC()
{
  sub_1A2A2D704();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C2D4()
{
  sub_1A2A2D704();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C2FC()
{
  sub_1A2A2D6C0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C324()
{
  sub_1A2A2D6C0();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C34C()
{
  sub_1A2A2D78C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C374()
{
  sub_1A2A2D78C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2A2C420()
{
  sub_1A2A2D748();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C448()
{
  sub_1A2A2D748();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2C470()
{
  sub_1A2A2D638();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2C498()
{
  sub_1A2A2D638();
  return sub_1A2AE4108();
}

void SFAirDrop.TransferType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D0E0);
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3);
  v20 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D0E8);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  MEMORY[0x1E0C80A78](v5);
  v28 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D0F0);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7);
  v25 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D0F8);
  v18 = *(_QWORD *)(v9 - 8);
  v19 = v9;
  MEMORY[0x1E0C80A78](v9);
  v17 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D100);
  v23 = *(_QWORD *)(v11 - 8);
  v24 = v11;
  MEMORY[0x1E0C80A78](v11);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D108);
  MEMORY[0x1E0C80A78](v16);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D110);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  MEMORY[0x1E0C80A78](v12);
  v13 = v1[1];
  v31 = *v1;
  v32 = v13;
  v14 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A2D5F4();
  sub_1A2AE40E4();
  __asm { BR              X9 }
}

uint64_t sub_1A2A2C6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 69) = 1;
  sub_1A2A2D748();
  v3 = *(_QWORD *)(v2 - 104);
  sub_1A2AE3DB4();
  v4 = *(_QWORD *)(v2 - 184);
  sub_1A2AE3DF0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v0, v3);
}

void sub_1A2A2C858()
{
  uint64_t v0;

  if (*(_OWORD *)(v0 - 128) == 0)
  {
    *(_BYTE *)(v0 - 70) = 0;
    sub_1A2A2D78C();
    sub_1A2AE3DB4();
  }
  else
  {
    if (*(_QWORD *)(v0 - 128) ^ 1 | *(_QWORD *)(v0 - 120))
    {
      *(_BYTE *)(v0 - 65) = 5;
      sub_1A2A2D638();
    }
    else
    {
      *(_BYTE *)(v0 - 68) = 2;
      sub_1A2A2D704();
    }
    sub_1A2AE3DB4();
  }
  JUMPOUT(0x1A2A2C81CLL);
}

void SFAirDrop.TransferType.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1A2AE400C();
  __asm { BR              X9 }
}

uint64_t sub_1A2A2C97C()
{
  sub_1A2AE4018();
  sub_1A2AE34C0();
  return sub_1A2AE4030();
}

uint64_t SFAirDrop.TransferType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char *v42;

  v36 = a2;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D150);
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v40 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D158);
  v34 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v39 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D160);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D168);
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v37 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D170);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v35 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D178);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D180);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_1A2A2D5F4();
  v18 = v42;
  sub_1A2AE40C0();
  if (!v18)
  {
    v42 = v12;
    v24[1] = v10;
    v24[2] = v9;
    v19 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v20 = sub_1A2AE3B5C();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v22 = &type metadata for SFAirDrop.TransferType;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC450], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v41);
}

uint64_t sub_1A2A2D15C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDrop.TransferType.init(from:)(a1, a2);
}

void sub_1A2A2D170(_QWORD *a1)
{
  SFAirDrop.TransferType.encode(to:)(a1);
}

void sub_1A2A2D188()
{
  __asm { BR              X10 }
}

uint64_t sub_1A2A2D1BC()
{
  sub_1A2AE4018();
  return sub_1A2AE34C0();
}

uint64_t sub_1A2A2D1F4()
{
  return sub_1A2AE4018();
}

void sub_1A2A2D234()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_1A2AE400C();
  __asm { BR              X9 }
}

uint64_t sub_1A2A2D270()
{
  sub_1A2AE4018();
  sub_1A2AE34C0();
  return sub_1A2AE4030();
}

void _s7Sharing9SFAirDropO12TransferTypeO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1A2A2D33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  char v7;

  if (v5)
  {
    sub_1A2993E70(v1, v0, v5);
    sub_1A2993E70(v3, v2, v4);
    sub_1A2994E20(v3, v2, v4);
    sub_1A2994E20(v1, v0, v5);
    v7 = 0;
  }
  else
  {
    if (v3 == v1 && v2 == v0)
      v7 = 1;
    else
      v7 = sub_1A2AE3EE0();
    sub_1A2993E70(v1, v0, 0);
    sub_1A2993E70(v3, v2, 0);
    sub_1A2994E20(v3, v2, 0);
    sub_1A2994E20(v1, v0, 0);
  }
  return v7 & 1;
}

uint64_t sub_1A2A2D5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFSecurityScopedURL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1A2A2D5F4()
{
  unint64_t result;

  result = qword_1EE67D118;
  if (!qword_1EE67D118)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03EE8, &_s12TransferTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D118);
  }
  return result;
}

unint64_t sub_1A2A2D638()
{
  unint64_t result;

  result = qword_1EE67D120;
  if (!qword_1EE67D120)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03E98, &_s12TransferTypeO21PeerPaymentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D120);
  }
  return result;
}

unint64_t sub_1A2A2D67C()
{
  unint64_t result;

  result = qword_1EE67D128;
  if (!qword_1EE67D128)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03E48, &_s12TransferTypeO18ExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D128);
  }
  return result;
}

unint64_t sub_1A2A2D6C0()
{
  unint64_t result;

  result = qword_1EE67D130;
  if (!qword_1EE67D130)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03DF8, &_s12TransferTypeO27FilesWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D130);
  }
  return result;
}

unint64_t sub_1A2A2D704()
{
  unint64_t result;

  result = qword_1EE67D138;
  if (!qword_1EE67D138)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03DA8, &_s12TransferTypeO15FilesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D138);
  }
  return result;
}

unint64_t sub_1A2A2D748()
{
  unint64_t result;

  result = qword_1EE67D140;
  if (!qword_1EE67D140)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03D58, &_s12TransferTypeO27LinksWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D140);
  }
  return result;
}

unint64_t sub_1A2A2D78C()
{
  unint64_t result;

  result = qword_1EE67D148;
  if (!qword_1EE67D148)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03D08, &_s12TransferTypeO15LinksCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D148);
  }
  return result;
}

unint64_t sub_1A2A2D7D4()
{
  unint64_t result;

  result = qword_1EE67D188;
  if (!qword_1EE67D188)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.TransferType, &type metadata for SFAirDrop.TransferType);
    atomic_store(result, (unint64_t *)&qword_1EE67D188);
  }
  return result;
}

uint64_t _s12TransferTypeOwxx(uint64_t a1)
{
  return sub_1A2994E20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12TransferTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A2993E70(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s12TransferTypeOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A2993E70(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A2994E20(v6, v7, v8);
  return a1;
}

uint64_t _s12TransferTypeOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A2994E20(v4, v5, v6);
  return a1;
}

uint64_t _s12TransferTypeOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s12TransferTypeOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A2A2D998(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1A2A2D9B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDrop.TransferType()
{
  return &type metadata for SFAirDrop.TransferType;
}

uint64_t _s12TransferTypeO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A2A2DA24 + 4 * byte_1A2B0376D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A2A2DA58 + 4 * byte_1A2B03768[v4]))();
}

uint64_t sub_1A2A2DA58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A2DA60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A2DA68);
  return result;
}

uint64_t sub_1A2A2DA74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A2DA7CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A2A2DA80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A2DA88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s12TransferTypeO10CodingKeysOMa()
{
  return &_s12TransferTypeO10CodingKeysON;
}

ValueMetadata *_s12TransferTypeO15LinksCodingKeysOMa()
{
  return &_s12TransferTypeO15LinksCodingKeysON;
}

ValueMetadata *_s12TransferTypeO27LinksWithExchangeCodingKeysOMa()
{
  return &_s12TransferTypeO27LinksWithExchangeCodingKeysON;
}

ValueMetadata *_s12TransferTypeO15FilesCodingKeysOMa()
{
  return &_s12TransferTypeO15FilesCodingKeysON;
}

ValueMetadata *_s12TransferTypeO27FilesWithExchangeCodingKeysOMa()
{
  return &_s12TransferTypeO27FilesWithExchangeCodingKeysON;
}

uint64_t _s12TransferTypeO27LinksWithExchangeCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A2DB28 + 4 * byte_1A2B03772[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A2DB48 + 4 * byte_1A2B03777[v4]))();
}

_BYTE *sub_1A2A2DB28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A2DB48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A2DB50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A2DB58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A2DB60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A2DB68(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s12TransferTypeO18ExchangeCodingKeysOMa()
{
  return &_s12TransferTypeO18ExchangeCodingKeysON;
}

ValueMetadata *_s12TransferTypeO21PeerPaymentCodingKeysOMa()
{
  return &_s12TransferTypeO21PeerPaymentCodingKeysON;
}

unint64_t sub_1A2A2DB98()
{
  unint64_t result;

  result = qword_1EE67D190;
  if (!qword_1EE67D190)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03A18, &_s12TransferTypeO18ExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D190);
  }
  return result;
}

unint64_t sub_1A2A2DBE0()
{
  unint64_t result;

  result = qword_1EE67D198;
  if (!qword_1EE67D198)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03AD0, &_s12TransferTypeO27FilesWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D198);
  }
  return result;
}

unint64_t sub_1A2A2DC28()
{
  unint64_t result;

  result = qword_1EE67D1A0;
  if (!qword_1EE67D1A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03BD8, &_s12TransferTypeO27LinksWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1A0);
  }
  return result;
}

unint64_t sub_1A2A2DC70()
{
  unint64_t result;

  result = qword_1EE67D1A8;
  if (!qword_1EE67D1A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03CE0, &_s12TransferTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1A8);
  }
  return result;
}

unint64_t sub_1A2A2DCB8()
{
  unint64_t result;

  result = qword_1EE67D1B0;
  if (!qword_1EE67D1B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03C00, &_s12TransferTypeO15LinksCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1B0);
  }
  return result;
}

unint64_t sub_1A2A2DD00()
{
  unint64_t result;

  result = qword_1EE67D1B8;
  if (!qword_1EE67D1B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03C28, &_s12TransferTypeO15LinksCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1B8);
  }
  return result;
}

unint64_t sub_1A2A2DD48()
{
  unint64_t result;

  result = qword_1EE67D1C0;
  if (!qword_1EE67D1C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03B48, &_s12TransferTypeO27LinksWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1C0);
  }
  return result;
}

unint64_t sub_1A2A2DD90()
{
  unint64_t result;

  result = qword_1EE67D1C8;
  if (!qword_1EE67D1C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03B70, &_s12TransferTypeO27LinksWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1C8);
  }
  return result;
}

unint64_t sub_1A2A2DDD8()
{
  unint64_t result;

  result = qword_1EE67D1D0;
  if (!qword_1EE67D1D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03AF8, &_s12TransferTypeO15FilesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1D0);
  }
  return result;
}

unint64_t sub_1A2A2DE20()
{
  unint64_t result;

  result = qword_1EE67D1D8;
  if (!qword_1EE67D1D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03B20, &_s12TransferTypeO15FilesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1D8);
  }
  return result;
}

unint64_t sub_1A2A2DE68()
{
  unint64_t result;

  result = qword_1EE67D1E0;
  if (!qword_1EE67D1E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03A40, &_s12TransferTypeO27FilesWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1E0);
  }
  return result;
}

unint64_t sub_1A2A2DEB0()
{
  unint64_t result;

  result = qword_1EE67D1E8;
  if (!qword_1EE67D1E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03A68, &_s12TransferTypeO27FilesWithExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1E8);
  }
  return result;
}

unint64_t sub_1A2A2DEF8()
{
  unint64_t result;

  result = qword_1EE67D1F0;
  if (!qword_1EE67D1F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03988, &_s12TransferTypeO18ExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1F0);
  }
  return result;
}

unint64_t sub_1A2A2DF40()
{
  unint64_t result;

  result = qword_1EE67D1F8;
  if (!qword_1EE67D1F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B039B0, &_s12TransferTypeO18ExchangeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D1F8);
  }
  return result;
}

unint64_t sub_1A2A2DF88()
{
  unint64_t result;

  result = qword_1EE67D200;
  if (!qword_1EE67D200)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03938, &_s12TransferTypeO21PeerPaymentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D200);
  }
  return result;
}

unint64_t sub_1A2A2DFD0()
{
  unint64_t result;

  result = qword_1EE67D208;
  if (!qword_1EE67D208)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03960, &_s12TransferTypeO21PeerPaymentCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D208);
  }
  return result;
}

unint64_t sub_1A2A2E018()
{
  unint64_t result;

  result = qword_1EE67D210;
  if (!qword_1EE67D210)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03C50, &_s12TransferTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D210);
  }
  return result;
}

unint64_t sub_1A2A2E060()
{
  unint64_t result;

  result = qword_1EE67D218;
  if (!qword_1EE67D218)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B03C78, &_s12TransferTypeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D218);
  }
  return result;
}

uint64_t sub_1A2A2E0A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736B6E696CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46E60 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656C6966 && a2 == 0xE500000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46E80 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xE800000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D79615072656570 && a2 == 0xEB00000000746E65)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void SFAirDropSend.Failure.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id v12[2];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = type metadata accessor for SFAirDropSend.Failure();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = a1;
  v7 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  if (swift_dynamicCast())
  {

    sub_1A2A2E454((uint64_t)v6, a2);
  }
  else
  {

    CodableError.init(_:)(a1, v12);
    v8 = v12[1];
    v9 = v15;
    *(id *)a2 = v12[0];
    *(_QWORD *)(a2 + 8) = v8;
    v10 = v14;
    *(_OWORD *)(a2 + 16) = v13;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v9;
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t type metadata accessor for SFAirDropSend.Failure()
{
  uint64_t result;

  result = qword_1EE6746B0;
  if (!qword_1EE6746B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A2A2E454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropSend.Failure();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void SFAirDropSend.Failure.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for SFAirDropSend.Failure();
  MEMORY[0x1E0C80A78](v1);
  sub_1A2A2E73C(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_1A2A2E53C + 4 * byte_1A2B03F60[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A2E53C()
{
  uint64_t v0;

  sub_1A2A2E780(v0);
  return 0x45676E697373696DLL;
}

uint64_t sub_1A2A2E73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropSend.Failure();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A2A2E780(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SFAirDropSend.Failure();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A2A2E7C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A2A2E7FC + 4 * byte_1A2B03F6E[a1]))(0xD000000000000010, 0x80000001A2B46F40);
}

uint64_t sub_1A2A2E7FC()
{
  return 0x656C6C65636E6163;
}

uint64_t sub_1A2A2E818()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_1A2A2E92C()
{
  return 0x7463657078656E75;
}

uint64_t sub_1A2A2E948()
{
  sub_1A2A31184();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2E970()
{
  sub_1A2A31184();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2E998()
{
  sub_1A2A31140();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2E9C0()
{
  sub_1A2A31140();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2E9E8()
{
  sub_1A2A31294();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EA10()
{
  sub_1A2A31294();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EA38()
{
  unsigned __int8 *v0;

  return sub_1A2A2E7C0(*v0);
}

uint64_t sub_1A2A2EA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A3249C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2A2EA64(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1A2A2EA70()
{
  sub_1A2A30EDC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EA98()
{
  sub_1A2A30EDC();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EAC0()
{
  sub_1A2A30FA8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EAE8()
{
  sub_1A2A30FA8();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EB10()
{
  sub_1A2A310FC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EB38()
{
  sub_1A2A310FC();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EB60()
{
  sub_1A2A3120C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EB88()
{
  sub_1A2A3120C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EBB0()
{
  sub_1A2A31074();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EBD8()
{
  sub_1A2A31074();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EC00()
{
  sub_1A2A31030();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EC28()
{
  sub_1A2A31030();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EC50()
{
  sub_1A2A312D8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EC78()
{
  sub_1A2A312D8();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2ECA0()
{
  return 0x72756F6A6E6F62;
}

uint64_t sub_1A2A2ECB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x72756F6A6E6F62 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A2A2ED4C()
{
  sub_1A2A311C8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2ED74()
{
  sub_1A2A311C8();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2ED9C()
{
  sub_1A2A30FEC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EDC4()
{
  sub_1A2A30FEC();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EDEC()
{
  sub_1A2A310B8();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EE14()
{
  sub_1A2A310B8();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EE3C()
{
  sub_1A2A30F20();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EE64()
{
  sub_1A2A30F20();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A2EE8C()
{
  sub_1A2A31250();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A2EEB4()
{
  sub_1A2A31250();
  return sub_1A2AE4108();
}

void SFAirDropSend.Failure.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D220);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  MEMORY[0x1E0C80A78](v2);
  v64 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D228);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  MEMORY[0x1E0C80A78](v4);
  v61 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D230);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  MEMORY[0x1E0C80A78](v6);
  v58 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D238);
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D240);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v52 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D248);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v49 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D250);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v46 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D258);
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v43 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D260);
  v40 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v38 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D268);
  v35 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v33 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D270);
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v34 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1A2AE3130();
  v32 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v31 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D278);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v28 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D280);
  v26[1] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v26[0] = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D288);
  MEMORY[0x1E0C80A78](v19);
  v20 = type metadata accessor for SFAirDropSend.Failure();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D290);
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A30EDC();
  v68 = v24;
  sub_1A2AE40E4();
  sub_1A2A2E73C(v70, (uint64_t)v22);
  v25 = (char *)sub_1A2A2F454 + 4 * word_1A2B03F7C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A2F454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 - 456);
  v3 = *(_QWORD *)(v1 - 464);
  v4 = *(_QWORD *)(v1 - 424);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v0, v4);
  *(_BYTE *)(v1 - 144) = 3;
  sub_1A2A3120C();
  v5 = *(_QWORD *)(v1 - 440);
  v7 = *(_QWORD *)(v1 - 168);
  v6 = *(_QWORD *)(v1 - 160);
  sub_1A2AE3DB4();
  sub_1A297CC38(&qword_1EE6766D8, MEMORY[0x1E0CB09B8]);
  v8 = *(_QWORD *)(v1 - 384);
  sub_1A2AE3E2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 416) + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 176) + 8))(v7, v6);
}

uint64_t SFAirDropSend.Failure.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  v78 = a2;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D318);
  v42 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v84 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D320);
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v83 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D328);
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v77 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D330);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v76 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D338);
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v75 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D340);
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v74 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D348);
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v82 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D350);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v73 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D358);
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v70 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D360);
  v41 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v72 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D368);
  v40 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v71 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D370);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v69 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D378);
  v45 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v68 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D380);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v67 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D388);
  v79 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SFAirDropSend.Failure();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)v38 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v38 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = a1[3];
  v86 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v29);
  sub_1A2A30EDC();
  v81 = v18;
  v30 = v87;
  sub_1A2AE40C0();
  if (!v30)
  {
    v38[1] = v25;
    v38[3] = v28;
    v38[2] = v22;
    v87 = 0;
    v39 = v19;
    v31 = v81;
    v32 = sub_1A2AE3D9C();
    if (*(_QWORD *)(v32 + 16) == 1)
      __asm { BR              X10 }
    v33 = sub_1A2AE3B5C();
    swift_allocError();
    v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v35 = v39;
    v36 = v85;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC450], v33);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v31, v36);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v86);
}

uint64_t sub_1A2A30A9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropSend.Failure.init(from:)(a1, a2);
}

void sub_1A2A30AB0(_QWORD *a1)
{
  SFAirDropSend.Failure.encode(to:)(a1);
}

void _s7Sharing13SFAirDropSendO7FailureO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD v12[16];

  v12[0] = sub_1A2AE3130();
  MEMORY[0x1E0C80A78](v12[0]);
  v4 = type metadata accessor for SFAirDropSend.Failure();
  v5 = MEMORY[0x1E0C80A78](v4);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4A8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 + *(int *)(v8 + 48) - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2A2E73C(a1, (uint64_t)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1A2A2E73C(a2, (uint64_t)v10);
  v11 = (char *)sub_1A2A30C18 + 4 * byte_1A2B03FB4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1A2A30C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  sub_1A2A2E73C(v0, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v4, *(_QWORD *)(v5 - 208));
    sub_1A2A32AA8(v0);
    v6 = 0;
  }
  else
  {
    v8 = v2;
    v9 = *(_QWORD *)(v5 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v8, v9);
    v6 = _s7Sharing9SFAirDropO17PermissionRequestV18InterventionActionV2eeoiySbAGy_x_G_AItFZ_0();
    v10 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v10(v3, v9);
    v10(v4, v9);
    sub_1A2A2E780(v0);
  }
  return v6 & 1;
}

unint64_t sub_1A2A30EDC()
{
  unint64_t result;

  result = qword_1EE67D298;
  if (!qword_1EE67D298)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04D98, &_s7FailureO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D298);
  }
  return result;
}

unint64_t sub_1A2A30F20()
{
  unint64_t result;

  result = qword_1EE67D2A0;
  if (!qword_1EE67D2A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04D48, &_s7FailureO20UnexpectedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2A0);
  }
  return result;
}

unint64_t sub_1A2A30F64()
{
  unint64_t result;

  result = qword_1EE67D2A8;
  if (!qword_1EE67D2A8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CodableError, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1EE67D2A8);
  }
  return result;
}

unint64_t sub_1A2A30FA8()
{
  unint64_t result;

  result = qword_1EE67D2B0;
  if (!qword_1EE67D2B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04CF8, &_s7FailureO29InsufficientStorageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2B0);
  }
  return result;
}

unint64_t sub_1A2A30FEC()
{
  unint64_t result;

  result = qword_1EE67D2B8;
  if (!qword_1EE67D2B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04CA8, &_s7FailureO21ServerErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2B8);
  }
  return result;
}

unint64_t sub_1A2A31030()
{
  unint64_t result;

  result = qword_1EE67D2C0;
  if (!qword_1EE67D2C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04C58, &_s7FailureO27MissingRecordDataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2C0);
  }
  return result;
}

unint64_t sub_1A2A31074()
{
  unint64_t result;

  result = qword_1EE67D2C8;
  if (!qword_1EE67D2C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04C08, &_s7FailureO27MissingOwnContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2C8);
  }
  return result;
}

unint64_t sub_1A2A310B8()
{
  unint64_t result;

  result = qword_1EE67D2D0;
  if (!qword_1EE67D2D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04BB8, &_s7FailureO21StreamErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2D0);
  }
  return result;
}

unint64_t sub_1A2A310FC()
{
  unint64_t result;

  result = qword_1EE67D2D8;
  if (!qword_1EE67D2D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04B68, &_s7FailureO34MissingDownloadDirectoryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2D8);
  }
  return result;
}

unint64_t sub_1A2A31140()
{
  unint64_t result;

  result = qword_1EE67D2E0;
  if (!qword_1EE67D2E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04B18, &_s7FailureO21BadResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2E0);
  }
  return result;
}

unint64_t sub_1A2A31184()
{
  unint64_t result;

  result = qword_1EE67D2E8;
  if (!qword_1EE67D2E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04AC8, &_s7FailureO20BadRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2E8);
  }
  return result;
}

unint64_t sub_1A2A311C8()
{
  unint64_t result;

  result = qword_1EE67D2F0;
  if (!qword_1EE67D2F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04A78, &_s7FailureO24ResolveFailureCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2F0);
  }
  return result;
}

unint64_t sub_1A2A3120C()
{
  unint64_t result;

  result = qword_1EE67D2F8;
  if (!qword_1EE67D2F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04A28, &_s7FailureO25MissingEndpointCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D2F8);
  }
  return result;
}

unint64_t sub_1A2A31250()
{
  unint64_t result;

  result = qword_1EE67D300;
  if (!qword_1EE67D300)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B049D8, &_s7FailureO31UnsupportedConnectionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D300);
  }
  return result;
}

unint64_t sub_1A2A31294()
{
  unint64_t result;

  result = qword_1EE67D308;
  if (!qword_1EE67D308)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04988, &_s7FailureO19CancelledCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D308);
  }
  return result;
}

unint64_t sub_1A2A312D8()
{
  unint64_t result;

  result = qword_1EE67D310;
  if (!qword_1EE67D310)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04938, &_s7FailureO26ReceiverDeclinedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D310);
  }
  return result;
}

unint64_t sub_1A2A3131C()
{
  unint64_t result;

  result = qword_1EE67D390;
  if (!qword_1EE67D390)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for CodableError, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1EE67D390);
  }
  return result;
}

_QWORD *_s7FailureOwCP_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      v11 = a2[5];
      a1[4] = a2[4];
      a1[5] = v11;
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s7FailureOwxx_0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (!(_DWORD)result)
  {
    v3 = sub_1A2AE3130();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *_s7FailureOwcp_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *_s7FailureOwca_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1A2A2E780((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *_s10IdentifierOwtk(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1A2AE3130();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s7FailureOwta_0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1A2A2E780((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1A2AE3130();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1A2A317C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s7FailureO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7FailureO10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1A2A3191C + 4 * byte_1A2B03FC7[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1A2A31950 + 4 * byte_1A2B03FC2[v4]))();
}

uint64_t sub_1A2A31950(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A31958(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A31960);
  return result;
}

uint64_t sub_1A2A3196C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A31974);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1A2A31978(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A31980(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7FailureO10CodingKeysOMa()
{
  return &_s7FailureO10CodingKeysON;
}

ValueMetadata *_s7FailureO26ReceiverDeclinedCodingKeysOMa()
{
  return &_s7FailureO26ReceiverDeclinedCodingKeysON;
}

ValueMetadata *_s7FailureO19CancelledCodingKeysOMa()
{
  return &_s7FailureO19CancelledCodingKeysON;
}

ValueMetadata *_s7FailureO31UnsupportedConnectionCodingKeysOMa()
{
  return &_s7FailureO31UnsupportedConnectionCodingKeysON;
}

ValueMetadata *_s7FailureO25MissingEndpointCodingKeysOMa()
{
  return &_s7FailureO25MissingEndpointCodingKeysON;
}

ValueMetadata *_s7FailureO24ResolveFailureCodingKeysOMa()
{
  return &_s7FailureO24ResolveFailureCodingKeysON;
}

ValueMetadata *_s7FailureO20BadRequestCodingKeysOMa()
{
  return &_s7FailureO20BadRequestCodingKeysON;
}

ValueMetadata *_s7FailureO21BadResponseCodingKeysOMa()
{
  return &_s7FailureO21BadResponseCodingKeysON;
}

ValueMetadata *_s7FailureO34MissingDownloadDirectoryCodingKeysOMa()
{
  return &_s7FailureO34MissingDownloadDirectoryCodingKeysON;
}

ValueMetadata *_s7FailureO21StreamErrorCodingKeysOMa()
{
  return &_s7FailureO21StreamErrorCodingKeysON;
}

ValueMetadata *_s7FailureO27MissingOwnContactCodingKeysOMa()
{
  return &_s7FailureO27MissingOwnContactCodingKeysON;
}

ValueMetadata *_s7FailureO27MissingRecordDataCodingKeysOMa()
{
  return &_s7FailureO27MissingRecordDataCodingKeysON;
}

ValueMetadata *_s7FailureO21ServerErrorCodingKeysOMa()
{
  return &_s7FailureO21ServerErrorCodingKeysON;
}

ValueMetadata *_s7FailureO29InsufficientStorageCodingKeysOMa()
{
  return &_s7FailureO29InsufficientStorageCodingKeysON;
}

uint64_t _s7FailureO25MissingEndpointCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A31AB0 + 4 * byte_1A2B03FCC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A31AD0 + 4 * byte_1A2B03FD1[v4]))();
}

_BYTE *sub_1A2A31AB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A31AD0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A31AD8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A31AE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A31AE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A31AF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s7FailureO20UnexpectedCodingKeysOMa()
{
  return &_s7FailureO20UnexpectedCodingKeysON;
}

unint64_t sub_1A2A31B10()
{
  unint64_t result;

  result = qword_1EE67D398;
  if (!qword_1EE67D398)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04378, &_s7FailureO20UnexpectedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D398);
  }
  return result;
}

unint64_t sub_1A2A31B58()
{
  unint64_t result;

  result = qword_1EE67D3A0;
  if (!qword_1EE67D3A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B046B0, &_s7FailureO24ResolveFailureCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3A0);
  }
  return result;
}

unint64_t sub_1A2A31BA0()
{
  unint64_t result;

  result = qword_1EE67D3A8;
  if (!qword_1EE67D3A8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04768, &_s7FailureO25MissingEndpointCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3A8);
  }
  return result;
}

unint64_t sub_1A2A31BE8()
{
  unint64_t result;

  result = qword_1EE67D3B0;
  if (!qword_1EE67D3B0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04910, &_s7FailureO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3B0);
  }
  return result;
}

unint64_t sub_1A2A31C30()
{
  unint64_t result;

  result = qword_1EE67D3B8;
  if (!qword_1EE67D3B8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04830, &_s7FailureO26ReceiverDeclinedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3B8);
  }
  return result;
}

unint64_t sub_1A2A31C78()
{
  unint64_t result;

  result = qword_1EE67D3C0;
  if (!qword_1EE67D3C0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04858, &_s7FailureO26ReceiverDeclinedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3C0);
  }
  return result;
}

unint64_t sub_1A2A31CC0()
{
  unint64_t result;

  result = qword_1EE67D3C8;
  if (!qword_1EE67D3C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B047E0, &_s7FailureO19CancelledCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3C8);
  }
  return result;
}

unint64_t sub_1A2A31D08()
{
  unint64_t result;

  result = qword_1EE67D3D0;
  if (!qword_1EE67D3D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04808, &_s7FailureO19CancelledCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3D0);
  }
  return result;
}

unint64_t sub_1A2A31D50()
{
  unint64_t result;

  result = qword_1EE67D3D8;
  if (!qword_1EE67D3D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04790, &_s7FailureO31UnsupportedConnectionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3D8);
  }
  return result;
}

unint64_t sub_1A2A31D98()
{
  unint64_t result;

  result = qword_1EE67D3E0;
  if (!qword_1EE67D3E0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B047B8, &_s7FailureO31UnsupportedConnectionCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3E0);
  }
  return result;
}

unint64_t sub_1A2A31DE0()
{
  unint64_t result;

  result = qword_1EE67D3E8;
  if (!qword_1EE67D3E8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B046D8, &_s7FailureO25MissingEndpointCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3E8);
  }
  return result;
}

unint64_t sub_1A2A31E28()
{
  unint64_t result;

  result = qword_1EE67D3F0;
  if (!qword_1EE67D3F0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04700, &_s7FailureO25MissingEndpointCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3F0);
  }
  return result;
}

unint64_t sub_1A2A31E70()
{
  unint64_t result;

  result = qword_1EE67D3F8;
  if (!qword_1EE67D3F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04620, &_s7FailureO24ResolveFailureCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D3F8);
  }
  return result;
}

unint64_t sub_1A2A31EB8()
{
  unint64_t result;

  result = qword_1EE67D400;
  if (!qword_1EE67D400)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04648, &_s7FailureO24ResolveFailureCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D400);
  }
  return result;
}

unint64_t sub_1A2A31F00()
{
  unint64_t result;

  result = qword_1EE67D408;
  if (!qword_1EE67D408)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B045D0, &_s7FailureO20BadRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D408);
  }
  return result;
}

unint64_t sub_1A2A31F48()
{
  unint64_t result;

  result = qword_1EE67D410;
  if (!qword_1EE67D410)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B045F8, &_s7FailureO20BadRequestCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D410);
  }
  return result;
}

unint64_t sub_1A2A31F90()
{
  unint64_t result;

  result = qword_1EE67D418;
  if (!qword_1EE67D418)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04580, &_s7FailureO21BadResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D418);
  }
  return result;
}

unint64_t sub_1A2A31FD8()
{
  unint64_t result;

  result = qword_1EE67D420;
  if (!qword_1EE67D420)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B045A8, &_s7FailureO21BadResponseCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D420);
  }
  return result;
}

unint64_t sub_1A2A32020()
{
  unint64_t result;

  result = qword_1EE67D428;
  if (!qword_1EE67D428)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04530, &_s7FailureO34MissingDownloadDirectoryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D428);
  }
  return result;
}

unint64_t sub_1A2A32068()
{
  unint64_t result;

  result = qword_1EE67D430;
  if (!qword_1EE67D430)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04558, &_s7FailureO34MissingDownloadDirectoryCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D430);
  }
  return result;
}

unint64_t sub_1A2A320B0()
{
  unint64_t result;

  result = qword_1EE67D438;
  if (!qword_1EE67D438)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B044E0, &_s7FailureO21StreamErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D438);
  }
  return result;
}

unint64_t sub_1A2A320F8()
{
  unint64_t result;

  result = qword_1EE67D440;
  if (!qword_1EE67D440)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04508, &_s7FailureO21StreamErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D440);
  }
  return result;
}

unint64_t sub_1A2A32140()
{
  unint64_t result;

  result = qword_1EE67D448;
  if (!qword_1EE67D448)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04490, &_s7FailureO27MissingOwnContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D448);
  }
  return result;
}

unint64_t sub_1A2A32188()
{
  unint64_t result;

  result = qword_1EE67D450;
  if (!qword_1EE67D450)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B044B8, &_s7FailureO27MissingOwnContactCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D450);
  }
  return result;
}

unint64_t sub_1A2A321D0()
{
  unint64_t result;

  result = qword_1EE67D458;
  if (!qword_1EE67D458)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04440, &_s7FailureO27MissingRecordDataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D458);
  }
  return result;
}

unint64_t sub_1A2A32218()
{
  unint64_t result;

  result = qword_1EE67D460;
  if (!qword_1EE67D460)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04468, &_s7FailureO27MissingRecordDataCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D460);
  }
  return result;
}

unint64_t sub_1A2A32260()
{
  unint64_t result;

  result = qword_1EE67D468;
  if (!qword_1EE67D468)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B043F0, &_s7FailureO21ServerErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D468);
  }
  return result;
}

unint64_t sub_1A2A322A8()
{
  unint64_t result;

  result = qword_1EE67D470;
  if (!qword_1EE67D470)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04418, &_s7FailureO21ServerErrorCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D470);
  }
  return result;
}

unint64_t sub_1A2A322F0()
{
  unint64_t result;

  result = qword_1EE67D478;
  if (!qword_1EE67D478)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B043A0, &_s7FailureO29InsufficientStorageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D478);
  }
  return result;
}

unint64_t sub_1A2A32338()
{
  unint64_t result;

  result = qword_1EE67D480;
  if (!qword_1EE67D480)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B043C8, &_s7FailureO29InsufficientStorageCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D480);
  }
  return result;
}

unint64_t sub_1A2A32380()
{
  unint64_t result;

  result = qword_1EE67D488;
  if (!qword_1EE67D488)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B042E8, &_s7FailureO20UnexpectedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D488);
  }
  return result;
}

unint64_t sub_1A2A323C8()
{
  unint64_t result;

  result = qword_1EE67D490;
  if (!qword_1EE67D490)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04310, &_s7FailureO20UnexpectedCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D490);
  }
  return result;
}

unint64_t sub_1A2A32410()
{
  unint64_t result;

  result = qword_1EE67D498;
  if (!qword_1EE67D498)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B04880, &_s7FailureO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D498);
  }
  return result;
}

unint64_t sub_1A2A32458()
{
  unint64_t result;

  result = qword_1EE67D4A0;
  if (!qword_1EE67D4A0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B048A8, &_s7FailureO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EE67D4A0);
  }
  return result;
}

uint64_t sub_1A2A3249C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B46F40 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001A2B46F20 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x45676E697373696DLL && a2 == 0xEF746E696F70646ELL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4665766C6F736572 && a2 == 0xEE006572756C6961 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6575716552646162 && a2 == 0xEA00000000007473 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F70736552646162 && a2 == 0xEB0000000065736ELL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001A2B46F00 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x72456D6165727473 && a2 == 0xEB00000000726F72 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46EE0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A2B46EC0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7245726576726573 && a2 == 0xEB00000000726F72 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A2B46EA0 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7463657078656E75 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

uint64_t sub_1A2A32AA8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static FormatStyle<>.irk.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static FormatStyle<>.publicKey.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static KeyDataFormatStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t KeyDataFormatStyle.Style.hash(into:)()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A2A32B3C()
{
  _BYTE *v0;

  if (*v0)
    return 0x654B63696C627570;
  else
    return 7041641;
}

uint64_t sub_1A2A32B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A33EAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A32B98()
{
  sub_1A2A32E5C();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A32BC0()
{
  sub_1A2A32E5C();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A32BE8()
{
  sub_1A2A32EE4();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A32C10()
{
  sub_1A2A32EE4();
  return sub_1A2AE4108();
}

uint64_t sub_1A2A32C38()
{
  sub_1A2A32EA0();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A32C60()
{
  sub_1A2A32EA0();
  return sub_1A2AE4108();
}

uint64_t KeyDataFormatStyle.Style.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4B0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4B8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4C0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A32E5C();
  sub_1A2AE40E4();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_1A2A32EA0();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_1A2A32EE4();
    sub_1A2AE3DB4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_1A2A32E5C()
{
  unint64_t result;

  result = qword_1EE67D4C8;
  if (!qword_1EE67D4C8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05334, &type metadata for KeyDataFormatStyle.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D4C8);
  }
  return result;
}

unint64_t sub_1A2A32EA0()
{
  unint64_t result;

  result = qword_1EE67D4D0;
  if (!qword_1EE67D4D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B052E4, &type metadata for KeyDataFormatStyle.Style.PublicKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D4D0);
  }
  return result;
}

unint64_t sub_1A2A32EE4()
{
  unint64_t result;

  result = qword_1EE67D4D8;
  if (!qword_1EE67D4D8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05294, &type metadata for KeyDataFormatStyle.Style.IrkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D4D8);
  }
  return result;
}

uint64_t KeyDataFormatStyle.Style.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t KeyDataFormatStyle.Style.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4E0);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4E8);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4F0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A32E5C();
  v11 = v33;
  sub_1A2AE40C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_1A2AE3D9C();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_1A2AE3B5C();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EE67AC00);
    *v21 = &type metadata for KeyDataFormatStyle.Style;
    sub_1A2AE3CF4();
    sub_1A2AE3B50();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0Tm(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_1A2A32EA0();
    sub_1A2AE3CE8();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_1A2A32EE4();
    v22 = v6;
    sub_1A2AE3CE8();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0Tm(v24);
}

uint64_t sub_1A2A332C4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return KeyDataFormatStyle.Style.init(from:)(a1, a2);
}

uint64_t sub_1A2A332D8(_QWORD *a1)
{
  return KeyDataFormatStyle.Style.encode(to:)(a1);
}

void KeyDataFormatStyle.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t KeyDataFormatStyle.format(_:)(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  uint64_t v6;
  unint64_t v7;

  if ((*v2 & 1) != 0)
  {
    sub_1A2973524(a1, a2);
    sub_1A2A19C04(3, a1, a2);
    sub_1A2AE2F5C();
    sub_1A2AE34F0();
    swift_bridgeObjectRelease();
    sub_1A29736C4(v6, v7);
    sub_1A2AE34F0();
    __asm { BR              X10 }
  }
  sub_1A2973524(a1, a2);
  sub_1A2A19C04(3, a1, a2);
  sub_1A2AE2F5C();
  sub_1A2AE34F0();
  swift_bridgeObjectRelease();
  sub_1A29736C4(v6, v7);
  sub_1A2AE34F0();
  return 60;
}

uint64_t KeyDataFormatStyle.hash(into:)()
{
  return sub_1A2AE4018();
}

BOOL static KeyDataFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A2A334FC()
{
  sub_1A2A33648();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A33524()
{
  sub_1A2A33648();
  return sub_1A2AE4108();
}

uint64_t KeyDataFormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D4F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A33648();
  sub_1A2AE40E4();
  v10 = v7;
  sub_1A2A3368C();
  sub_1A2AE3E2C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1A2A33648()
{
  unint64_t result;

  result = qword_1EE67D500;
  if (!qword_1EE67D500)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05244, &type metadata for KeyDataFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D500);
  }
  return result;
}

unint64_t sub_1A2A3368C()
{
  unint64_t result;

  result = qword_1EE67D508;
  if (!qword_1EE67D508)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle.Style, &type metadata for KeyDataFormatStyle.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67D508);
  }
  return result;
}

uint64_t KeyDataFormatStyle.hashValue.getter()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t KeyDataFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D510);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A33648();
  sub_1A2AE40C0();
  if (!v2)
  {
    sub_1A2A33884();
    sub_1A2AE3D78();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1A2A33830@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = KeyDataFormatStyle.format(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A2A3385C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return KeyDataFormatStyle.init(from:)(a1, a2);
}

uint64_t sub_1A2A33870(_QWORD *a1)
{
  return KeyDataFormatStyle.encode(to:)(a1);
}

unint64_t sub_1A2A33884()
{
  unint64_t result;

  result = qword_1EE67D518;
  if (!qword_1EE67D518)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle.Style, &type metadata for KeyDataFormatStyle.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67D518);
  }
  return result;
}

unint64_t sub_1A2A338CC()
{
  unint64_t result;

  result = qword_1EE67D520;
  if (!qword_1EE67D520)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle.Style, &type metadata for KeyDataFormatStyle.Style);
    atomic_store(result, (unint64_t *)&qword_1EE67D520);
  }
  return result;
}

unint64_t sub_1A2A33914()
{
  unint64_t result;

  result = qword_1EE67D528;
  if (!qword_1EE67D528)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle, &type metadata for KeyDataFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67D528);
  }
  return result;
}

unint64_t sub_1A2A3395C()
{
  unint64_t result;

  result = qword_1EE67D530;
  if (!qword_1EE67D530)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle, &type metadata for KeyDataFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67D530);
  }
  return result;
}

unint64_t sub_1A2A339A4()
{
  unint64_t result;

  result = qword_1EE67D538;
  if (!qword_1EE67D538)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle, &type metadata for KeyDataFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67D538);
  }
  return result;
}

unint64_t sub_1A2A339EC()
{
  unint64_t result;

  result = qword_1EE67D540;
  if (!qword_1EE67D540)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for KeyDataFormatStyle, &type metadata for KeyDataFormatStyle);
    atomic_store(result, (unint64_t *)&qword_1EE67D540);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle()
{
  return &type metadata for KeyDataFormatStyle;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle.Style()
{
  return &type metadata for KeyDataFormatStyle.Style;
}

uint64_t storeEnumTagSinglePayload for KeyDataFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A2A33A94 + 4 * byte_1A2B04DF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A2A33AB4 + 4 * byte_1A2B04DF5[v4]))();
}

_BYTE *sub_1A2A33A94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A2A33AB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A33ABC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A33AC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A2A33ACC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A2A33AD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle.CodingKeys()
{
  return &type metadata for KeyDataFormatStyle.CodingKeys;
}

uint64_t _s7Sharing18KeyDataFormatStyleV5StyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A2A33B3C + 4 * byte_1A2B04DFF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A2A33B70 + 4 * byte_1A2B04DFA[v4]))();
}

uint64_t sub_1A2A33B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A33B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A33B80);
  return result;
}

uint64_t sub_1A2A33B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A33B94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A2A33B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A33BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle.Style.CodingKeys()
{
  return &type metadata for KeyDataFormatStyle.Style.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle.Style.IrkCodingKeys()
{
  return &type metadata for KeyDataFormatStyle.Style.IrkCodingKeys;
}

ValueMetadata *type metadata accessor for KeyDataFormatStyle.Style.PublicKeyCodingKeys()
{
  return &type metadata for KeyDataFormatStyle.Style.PublicKeyCodingKeys;
}

unint64_t sub_1A2A33BE0()
{
  unint64_t result;

  result = qword_1EE67D548;
  if (!qword_1EE67D548)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05164, &type metadata for KeyDataFormatStyle.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D548);
  }
  return result;
}

unint64_t sub_1A2A33C28()
{
  unint64_t result;

  result = qword_1EE67D550;
  if (!qword_1EE67D550)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0521C, &type metadata for KeyDataFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D550);
  }
  return result;
}

unint64_t sub_1A2A33C70()
{
  unint64_t result;

  result = qword_1EE67D558;
  if (!qword_1EE67D558)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0518C, &type metadata for KeyDataFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D558);
  }
  return result;
}

unint64_t sub_1A2A33CB8()
{
  unint64_t result;

  result = qword_1EE67D560;
  if (!qword_1EE67D560)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B051B4, &type metadata for KeyDataFormatStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D560);
  }
  return result;
}

unint64_t sub_1A2A33D00()
{
  unint64_t result;

  result = qword_1EE67D568;
  if (!qword_1EE67D568)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05084, &type metadata for KeyDataFormatStyle.Style.IrkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D568);
  }
  return result;
}

unint64_t sub_1A2A33D48()
{
  unint64_t result;

  result = qword_1EE67D570;
  if (!qword_1EE67D570)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B050AC, &type metadata for KeyDataFormatStyle.Style.IrkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D570);
  }
  return result;
}

unint64_t sub_1A2A33D90()
{
  unint64_t result;

  result = qword_1EE67D578;
  if (!qword_1EE67D578)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05034, &type metadata for KeyDataFormatStyle.Style.PublicKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D578);
  }
  return result;
}

unint64_t sub_1A2A33DD8()
{
  unint64_t result;

  result = qword_1EE67D580;
  if (!qword_1EE67D580)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0505C, &type metadata for KeyDataFormatStyle.Style.PublicKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D580);
  }
  return result;
}

unint64_t sub_1A2A33E20()
{
  unint64_t result;

  result = qword_1EE67D588;
  if (!qword_1EE67D588)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B050D4, &type metadata for KeyDataFormatStyle.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D588);
  }
  return result;
}

unint64_t sub_1A2A33E68()
{
  unint64_t result;

  result = qword_1EE67D590;
  if (!qword_1EE67D590)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B050FC, &type metadata for KeyDataFormatStyle.Style.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D590);
  }
  return result;
}

uint64_t sub_1A2A33EAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7041641 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A2A33F98(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  objc_class *v20;
  id v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  Class v31;
  uint64_t v32;
  Class v33;
  id v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t result;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD);
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  objc_class *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  objc_class *v66;
  _BYTE v67[32];
  _QWORD v68[3];
  Class v69;
  objc_super v70;
  Class v71;

  v71 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v6 = MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v55 - v8;
  v64 = sub_1A2AE3C40();
  v62 = *(_QWORD *)(v64 - 8);
  v9 = MEMORY[0x1E0C80A78](v64);
  v57 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v59 = (char *)&v55 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v12);
  v65 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1A2AE3130();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v55 - v18;
  v20 = (objc_class *)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v21 = objc_allocWithZone(v20);
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = (char *)v21;
  sub_1A2AE3124();
  v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v23(&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v19, v14);
  v24 = &v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v24 = v71;
  *((_QWORD *)v24 + 1) = a2;
  v61 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v22[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a3;
  swift_retain();

  v66 = v20;
  if (a3)
  {
    v25 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v65, 1, 1, v25);
    v26 = v56;
    v23(v56, v19, v14);
    v27 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v28 = (v16 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = (char *)swift_allocObject();
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = a3;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v29[v27], v26, v14);
    v30 = &v29[v28];
    v31 = v71;
    v32 = v61;
    *(_QWORD *)v30 = v71;
    *((_QWORD *)v30 + 1) = v32;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v65, (uint64_t)&unk_1EE67B188, (uint64_t)v29);
    swift_bridgeObjectRelease();
    swift_release();
    v20 = v66;
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    v33 = v31;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    v32 = v61;
    swift_bridgeObjectRelease();
    v33 = v71;
  }
  v70.receiver = v22;
  v70.super_class = v20;
  v34 = -[objc_class init](&v70, sel_init);
  swift_release();
  v71 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v71);
  swift_retain();
  v35 = sub_1A297B80C((uint64_t)v33, v32, a3);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v36 = v63;
  sub_1A2AE3C34();
  v37 = v62;
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  v39 = v64;
  result = v38(v36, 1, v64);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v41 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v42 = (uint64_t)v59;
  v41(v59, v36, v39);
  v69 = v66;
  v68[0] = v34;
  v66 = (objc_class *)v34;
  v43 = v39;
  v44 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v68, v42);
  v44(v67, 0);
  v45 = v60;
  sub_1A2AE3C34();
  result = v38(v45, 1, v43);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v46 = (uint64_t)v57;
  v41(v57, v45, v43);
  v69 = v71;
  v68[0] = v35;
  v47 = (char *)v35;
  v48 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v68, v46);
  v48(v67, 0);
  sub_1A2A4562C();
  v49 = v58;
  v50 = sub_1A2AE2E0C();
  swift_release();
  swift_release();
  if (v49)
  {

  }
  else
  {
    v51 = v66;
    v52 = (char *)v66 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v52 + 16))

    v53 = &v47[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v53 + 16))
    {
      v54 = &v47[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v54 + 16))

    }
  }
  return v50;
}

uint64_t sub_1A2A345DC(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837FF8, (uint64_t)&unk_1EE67D7D0, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Request, &qword_1EE67D7C8, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Request);
}

uint64_t sub_1A2A34624(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837FD0, (uint64_t)&unk_1EE67D7B0, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1EE67C938, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

uint64_t sub_1A2A3466C(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), unint64_t *a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  objc_class *v27;
  id v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  Class v41;
  uint64_t v42;
  Class v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t result;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_BYTE *, _QWORD);
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(_BYTE *, _QWORD);
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  objc_class *v63;
  char *v64;
  char *v65;
  char *v66;
  _QWORD v67[2];
  uint64_t v68;
  char *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  objc_class *v83;
  _BYTE v84[32];
  _QWORD v85[3];
  Class v86;
  objc_super v87;
  Class v88;

  v70 = a8;
  v73 = a7;
  v68 = a6;
  v67[1] = a5;
  v72 = a3;
  v88 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v12 = MEMORY[0x1E0C80A78](v11);
  v75 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v80 = (char *)v67 - v14;
  v81 = sub_1A2AE3C40();
  v79 = *(_QWORD *)(v81 - 8);
  v15 = MEMORY[0x1E0C80A78](v81);
  v69 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v74 = (char *)v67 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v18);
  v82 = (uint64_t)v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A2AE3130();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v67 - v25;
  v27 = (objc_class *)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v28 = objc_allocWithZone(v27);
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = (char *)v28;
  sub_1A2AE3124();
  v76 = v21;
  v77 = v20;
  v30 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v30(&v29[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v26, v20);
  v31 = &v29[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v31 = v88;
  *((_QWORD *)v31 + 1) = a2;
  v78 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v29[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v29[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a4;
  swift_retain();

  v83 = v27;
  if (a4)
  {
    v32 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v82, 1, 1, v32);
    v33 = v77;
    v30(v24, v26, v77);
    v34 = v76;
    v35 = (*(unsigned __int8 *)(v76 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    v36 = (v22 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    v37 = (char *)swift_allocObject();
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = 0;
    *((_QWORD *)v37 + 4) = a4;
    v38 = v24;
    v39 = v33;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v37[v35], v38, v33);
    v40 = &v37[v36];
    v41 = v88;
    v42 = v78;
    *(_QWORD *)v40 = v88;
    *((_QWORD *)v40 + 1) = v42;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v82, v68, (uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_release();
    v27 = v83;
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v39);
    v43 = v41;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v77);
    v42 = v78;
    swift_bridgeObjectRelease();
    v43 = v88;
  }
  v87.receiver = v29;
  v87.super_class = v27;
  v44 = -[objc_class init](&v87, sel_init);
  swift_release();
  v88 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v88);
  swift_retain();
  v45 = sub_1A297B80C((uint64_t)v43, v42, a4);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v46 = v80;
  sub_1A2AE3C34();
  v47 = v79;
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  v49 = v81;
  result = v48(v46, 1, v81);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v51 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  v52 = (uint64_t)v74;
  v51(v74, v46, v49);
  v86 = v83;
  v85[0] = v44;
  v83 = (objc_class *)v44;
  v53 = v49;
  v54 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v85, v52);
  v54(v84, 0);
  v55 = v75;
  sub_1A2AE3C34();
  result = v48(v55, 1, v53);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v56 = (uint64_t)v69;
  v51(v69, v55, v53);
  v86 = v88;
  v85[0] = v45;
  v57 = (char *)v45;
  v58 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v85, v56);
  v58(v84, 0);
  v59 = v73;
  v73(0);
  sub_1A296E8A4(v70, v59, a9);
  v60 = v72;
  v61 = v71;
  v62 = sub_1A2AE2E0C();
  swift_release();
  swift_release();
  if (v61)
  {

    sub_1A297DA3C(v60, v59);
  }
  else
  {
    sub_1A297DA3C(v60, v59);
    v63 = v83;
    v64 = (char *)v83 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v64 + 16))

    v65 = &v57[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v65 + 16))
    {
      v66 = &v57[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v66 + 16))

    }
  }
  return v62;
}

uint64_t sub_1A2A34D38(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837FA8, (uint64_t)&unk_1EE67D7A8, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters, &qword_1EE67D7A0, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
}

uint64_t sub_1A2A34D80(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837F80, (uint64_t)&unk_1EE67D788, type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request, &qword_1EE674F10, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingDiscovery.Request);
}

uint64_t sub_1A2A34DC8(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  objc_class *v39;
  Class v40;
  Class v41;
  id v42;
  objc_class *v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t result;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  char *v51;
  void (*v52)(_BYTE *, _QWORD);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  void (*v57)(_BYTE *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  Class v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE v77[32];
  _QWORD v78[3];
  Class v79;
  objc_super v80;
  uint64_t v81;
  uint64_t v82;
  Class v83;

  v83 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v74 = (char *)&v63 - v12;
  v76 = sub_1A2AE3C40();
  v73 = *(_QWORD *)(v76 - 8);
  v13 = MEMORY[0x1E0C80A78](v76);
  v67 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v70 = (char *)&v63 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v16);
  v75 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A2AE3130();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = MEMORY[0x1E0C80A78](v18);
  v66 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v63 - v22;
  v81 = a3;
  v82 = a4;
  v69 = a4;
  v72 = (Class)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v24 = objc_allocWithZone(v72);
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = (char *)v24;
  sub_1A2AE3124();
  v26 = v19;
  v27 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v28 = v18;
  v27(&v25[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v23, v18);
  v29 = &v25[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v29 = v83;
  *((_QWORD *)v29 + 1) = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v25[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v25[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a5;
  swift_retain();

  if (a5)
  {
    v30 = sub_1A2AE36E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v75, 1, 1, v30);
    v31 = v66;
    v64 = v28;
    v27(v66, v23, v28);
    v32 = v26;
    v33 = (*(unsigned __int8 *)(v26 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v65 = a2;
    v34 = (v20 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = (char *)swift_allocObject();
    *((_QWORD *)v35 + 2) = 0;
    *((_QWORD *)v35 + 3) = 0;
    *((_QWORD *)v35 + 4) = a5;
    v36 = v31;
    v37 = v64;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v35[v33], v36, v64);
    v38 = &v35[v34];
    v39 = v72;
    a2 = v65;
    v40 = v83;
    *(_QWORD *)v38 = v83;
    *((_QWORD *)v38 + 1) = a2;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504((uint64_t)v75, (uint64_t)&unk_1EE67D780, (uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v37);
    v41 = v40;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v18);
    swift_bridgeObjectRelease();
    v41 = v83;
    v39 = v72;
  }
  v80.receiver = v25;
  v80.super_class = v39;
  v42 = -[objc_class init](&v80, sel_init);
  swift_release();
  v83 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v83);
  swift_retain();
  v75 = (char *)sub_1A297B80C((uint64_t)v41, a2, a5);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v43 = v39;
  v44 = v74;
  sub_1A2AE3C34();
  v45 = v73;
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
  v47 = v76;
  result = v46(v44, 1, v76);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v49 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v50 = (uint64_t)v70;
  v49(v70, v44, v47);
  v79 = v43;
  v78[0] = v42;
  v51 = (char *)v42;
  v52 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v78, v50);
  v52(v77, 0);
  v53 = v76;
  v54 = v71;
  sub_1A2AE3C34();
  result = v46(v54, 1, v53);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v55 = (uint64_t)v67;
  v49(v67, v54, v53);
  v79 = v83;
  v78[0] = v75;
  v56 = v75;
  v57 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v78, v55);
  v57(v77, 0);
  v58 = v68;
  v59 = sub_1A2AE2E0C();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v58)
  {

  }
  else
  {
    v60 = &v51[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v60 + 16))

    v61 = &v56[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v61 + 16))
    {
      v62 = &v56[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v62 + 16))

    }
  }
  return v59;
}

uint64_t sub_1A2A35454(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837F30, (uint64_t)&unk_1EE67D778, type metadata accessor for SFAirDrop.NearbySharingAssertionRequest, &qword_1EE67D770, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingAssertionRequest);
}

uint64_t sub_1A2A3549C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  Class v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(_BYTE *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  Class v70;
  uint64_t v71;
  char *v72;
  Class v73;
  id v74;
  _BYTE v75[32];
  _QWORD v76[3];
  Class v77;
  objc_super v78;
  uint64_t v79;

  v66 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v8 = MEMORY[0x1E0C80A78](v7);
  v68 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v72 = (char *)&v61 - v10;
  v79 = sub_1A2AE3C40();
  v71 = *(_QWORD *)(v79 - 8);
  v11 = MEMORY[0x1E0C80A78](v79);
  v63 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v67 = (char *)&v61 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v14);
  v73 = (Class)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1A2AE3130();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  v62 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - v20;
  v70 = (Class)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v22 = objc_allocWithZone(v70);
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = (char *)v22;
  sub_1A2AE3124();
  v24 = v17;
  v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v25(&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v21, v16);
  v26 = &v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  v74 = a1;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = a2;
  v69 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a4;
  swift_retain();

  if (a4)
  {
    v27 = sub_1A2AE36E8();
    (*(void (**)(Class, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v73, 1, 1, v27);
    v28 = v62;
    v25(v62, v21, v16);
    v29 = v16;
    v30 = v24;
    v31 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v32 = (v18 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (char *)swift_allocObject();
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = a4;
    v34 = v28;
    v35 = v29;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v33[v31], v34, v29);
    v36 = &v33[v32];
    v37 = v69;
    *(_QWORD *)v36 = v74;
    *((_QWORD *)v36 + 1) = v37;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504((uint64_t)v73, (uint64_t)&unk_1EE67D710, (uint64_t)v33);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v62 = *(char **)(v30 + 8);
    ((void (*)(char *, uint64_t))v62)(v21, v35);
    v16 = v35;
  }
  else
  {
    v62 = *(char **)(v24 + 8);
    ((void (*)(char *, uint64_t))v62)(v21, v16);
    v37 = v69;
    swift_bridgeObjectRelease();
  }
  v64 = v16;
  v38 = v70;
  v78.receiver = v23;
  v78.super_class = v70;
  v39 = objc_msgSendSuper2(&v78, sel_init);
  swift_release();
  v73 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v73);
  swift_retain();
  v74 = sub_1A297B80C((uint64_t)v74, v37, a4);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v40 = v72;
  sub_1A2AE3C34();
  v41 = v71;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v43 = v79;
  result = v42(v40, 1, v79);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v46 = (uint64_t)v67;
  v45(v67, v40, v43);
  v77 = v38;
  v76[0] = v39;
  v47 = (char *)v39;
  v48 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v76, v46);
  v48(v75, 0);
  v49 = v79;
  v50 = v68;
  sub_1A2AE3C34();
  result = v42(v50, 1, v49);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v51 = (uint64_t)v63;
  v45(v63, v50, v49);
  v77 = v73;
  v76[0] = v74;
  v52 = (char *)v74;
  v53 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v76, v51);
  v53(v75, 0);
  sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  v54 = v66;
  v55 = v64;
  v56 = v65;
  v57 = sub_1A2AE2E0C();
  if (v56)
  {
    swift_release();
    swift_release();

    ((void (*)(uint64_t, uint64_t))v62)(v54, v55);
  }
  else
  {
    v53 = (void (*)(_BYTE *, _QWORD))v57;
    swift_release();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v62)(v54, v55);
    v58 = &v47[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v58 + 16))

    v59 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v59 + 16))
    {
      v60 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v60 + 16))

    }
  }
  return (uint64_t)v53;
}

uint64_t sub_1A2A35B64(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837F08, (uint64_t)&unk_1EE67D760, type metadata accessor for SFAirDrop.NearbySharingInteraction, &qword_1EE67D758, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction);
}

uint64_t sub_1A2A35BAC(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837EB8, (uint64_t)&unk_1EE67D738, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction, &qword_1EE67D730, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.Transaction);
}

uint64_t sub_1A2A35BF4(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A3466C(a1, a2, a3, a4, (uint64_t)&unk_1E4837EE0, (uint64_t)&unk_1EE67D748, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters, &qword_1EE67D740, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
}

uint64_t sub_1A2A35C3C(objc_class *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  objc_class *v22;
  id v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  Class v33;
  uint64_t v34;
  Class v35;
  id v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t result;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, _QWORD);
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(_BYTE *, _QWORD);
  uint64_t v51;
  uint64_t v52;
  objc_class *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  objc_class *v67;
  Class v68;
  _BYTE v69[32];
  _QWORD v70[3];
  Class v71;
  objc_super v72;
  char v73;

  v68 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v8 = MEMORY[0x1E0C80A78](v7);
  v61 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v57 - v10;
  v65 = sub_1A2AE3C40();
  v63 = *(_QWORD *)(v65 - 8);
  v11 = MEMORY[0x1E0C80A78](v65);
  v58 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v60 = (char *)&v57 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v14);
  v66 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A2AE3130();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  v57 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v57 - v20;
  v73 = a3;
  v22 = (objc_class *)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v23 = objc_allocWithZone(v22);
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = (char *)v23;
  sub_1A2AE3124();
  v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v25(&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v21, v16);
  v26 = &v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v26 = v68;
  *((_QWORD *)v26 + 1) = a2;
  v62 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v24[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a4;
  swift_retain();

  v67 = v22;
  if (a4)
  {
    v27 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v66, 1, 1, v27);
    v28 = v57;
    v25(v57, v21, v16);
    v29 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v30 = (v18 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = (char *)swift_allocObject();
    *((_QWORD *)v31 + 2) = 0;
    *((_QWORD *)v31 + 3) = 0;
    *((_QWORD *)v31 + 4) = a4;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v31[v29], v28, v16);
    v32 = &v31[v30];
    v33 = v68;
    v34 = v62;
    *(_QWORD *)v32 = v68;
    *((_QWORD *)v32 + 1) = v34;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v66, (uint64_t)&unk_1EE67D728, (uint64_t)v31);
    swift_bridgeObjectRelease();
    swift_release();
    v22 = v67;
    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v35 = v33;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v34 = v62;
    swift_bridgeObjectRelease();
    v35 = v68;
  }
  v72.receiver = v24;
  v72.super_class = v22;
  v36 = -[objc_class init](&v72, sel_init);
  swift_release();
  v68 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v68);
  swift_retain();
  v37 = sub_1A297B80C((uint64_t)v35, v34, a4);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v38 = v64;
  sub_1A2AE3C34();
  v39 = v63;
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  v41 = v65;
  result = v40(v38, 1, v65);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v43 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v44 = (uint64_t)v60;
  v43(v60, v38, v41);
  v71 = v67;
  v70[0] = v36;
  v67 = (objc_class *)v36;
  v45 = v41;
  v46 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v70, v44);
  v46(v69, 0);
  v47 = v61;
  sub_1A2AE3C34();
  result = v40(v47, 1, v45);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v48 = (uint64_t)v58;
  v43(v58, v47, v45);
  v71 = v68;
  v70[0] = v37;
  v49 = (char *)v37;
  v50 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v70, v48);
  v50(v69, 0);
  sub_1A2A45704();
  v51 = v59;
  v52 = sub_1A2AE2E0C();
  swift_release();
  swift_release();
  if (v51)
  {

  }
  else
  {
    v53 = v67;
    v54 = (char *)v67 + OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v54 + 16))

    v55 = &v49[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v55 + 16))
    {
      v56 = &v49[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v56 + 16))

    }
  }
  return v52;
}

uint64_t sub_1A2A36294(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  objc_class *v21;
  id v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  Class v35;
  uint64_t v36;
  Class v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(_BYTE *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  objc_class *v74;
  uint64_t v75;
  _BYTE v76[32];
  _QWORD v77[3];
  Class v78;
  objc_super v79;
  Class v80;

  v64 = a3;
  v80 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v7 = MEMORY[0x1E0C80A78](v6);
  v66 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v72 = (char *)&v60 - v9;
  v75 = sub_1A2AE3C40();
  v71 = *(_QWORD *)(v75 - 8);
  v10 = MEMORY[0x1E0C80A78](v75);
  v62 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v65 = (char *)&v60 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v13);
  v73 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A2AE3130();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x1E0C80A78](v15);
  v61 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v60 - v19;
  v21 = (objc_class *)type metadata accessor for _SFXPCAsyncSequenceContainer(0);
  v22 = objc_allocWithZone(v21);
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = (char *)v22;
  sub_1A2AE3124();
  v68 = v16;
  v69 = v15;
  v24 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v24(&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_uuid], v20, v15);
  v25 = &v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_name];
  *(_QWORD *)v25 = v80;
  *((_QWORD *)v25 + 1) = a2;
  v70 = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences] = sub_1A297876C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v23[OBJC_IVAR____SFXPCAsyncSequenceContainer_containerRegistry] = a4;
  swift_retain();

  v67 = a4;
  v74 = v21;
  if (a4)
  {
    v26 = sub_1A2AE36E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v73, 1, 1, v26);
    v27 = v61;
    v28 = v69;
    v24(v61, v20, v69);
    v29 = v68;
    v30 = (*(unsigned __int8 *)(v68 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    v31 = (v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (char *)swift_allocObject();
    *((_QWORD *)v32 + 2) = 0;
    *((_QWORD *)v32 + 3) = 0;
    v33 = v67;
    *((_QWORD *)v32 + 4) = v67;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v32[v30], v27, v28);
    v34 = &v32[v31];
    v35 = v80;
    v36 = v70;
    *(_QWORD *)v34 = v80;
    *((_QWORD *)v34 + 1) = v36;
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_1A2974504(v73, (uint64_t)&unk_1EE67D718, (uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_release();
    v21 = v74;
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v28);
    v37 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v20, v69);
    v36 = v70;
    swift_bridgeObjectRelease();
    v37 = v80;
    v33 = v67;
  }
  v79.receiver = v23;
  v79.super_class = v21;
  v38 = -[objc_class init](&v79, sel_init);
  swift_release();
  v80 = (Class)type metadata accessor for _SFXPCBlockContainer();
  objc_allocWithZone(v80);
  swift_retain();
  v39 = sub_1A297B80C((uint64_t)v37, v36, v33);
  swift_release();
  sub_1A2AE2E30();
  swift_allocObject();
  sub_1A2AE2E24();
  v40 = v72;
  sub_1A2AE3C34();
  v41 = v71;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v43 = v75;
  result = v42(v40, 1, v75);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v46 = (uint64_t)v65;
  v45(v65, v40, v43);
  v78 = v74;
  v77[0] = v38;
  v47 = (char *)v38;
  v48 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v77, v46);
  v48(v76, 0);
  v49 = v75;
  v50 = v66;
  sub_1A2AE3C34();
  result = v42(v50, 1, v49);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v51 = (uint64_t)v62;
  v45(v62, v50, v49);
  v78 = v80;
  v77[0] = v39;
  v52 = (char *)v39;
  v53 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2E18();
  sub_1A29B3438((uint64_t)v77, v51);
  v53(v76, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  sub_1A296E5E4(&qword_1EE67B568, &qword_1EE67B3C0, (uint64_t)&protocol conformance descriptor for SFAirDrop.PermissionRequest<A>);
  v54 = v64;
  v55 = v63;
  v56 = sub_1A2AE2E0C();
  swift_release();
  swift_release();
  if (v55)
  {

    sub_1A296F108(v54, &qword_1EE67B3C0);
  }
  else
  {
    sub_1A296F108(v54, &qword_1EE67B3C0);
    v57 = &v47[OBJC_IVAR____SFXPCAsyncSequenceContainer_sequences];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v57 + 16))

    v58 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredAsyncBlocks];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v58 + 16))
    {
      v59 = &v52[OBJC_IVAR____SFXPCBlockContainer_registeredSyncBlocks];
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v59 + 16))

    }
  }
  return v56;
}

uint64_t sub_1A2A3695C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void (*v9)(void *, unint64_t, uint64_t, uint64_t, void *);
  id v10;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v8 = a2;
  v9 = *(void (**)(void *, unint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v10 = v8;
    v8 = (void *)sub_1A2AE2F80();
    v12 = v11;

  }
  else
  {
    swift_retain();
    v12 = 0xF000000000000000;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v13 = a5;
  v9(v8, v12, a3, a4, a5);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1A29B98D8((uint64_t)v8, v12);
  return swift_release();
}

void sub_1A2A36A28(uint64_t a1, unint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  id v41;
  id v42;
  NSObject *v43;
  char *v44;
  void *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  _QWORD *v56;
  char *v57;
  char *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  unsigned __int8 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  os_log_t v80;
  void (*v81)(_QWORD *__return_ptr, _QWORD);
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char **__return_ptr, _QWORD *);
  _QWORD *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  os_activity_scope_state_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  char v101;
  int v102;
  os_activity_scope_state_s v103;
  uint64_t aBlock[6];
  void *v105;
  char *v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109[6];

  v5 = v4;
  v89 = a4;
  v90 = a3;
  v94 = a1;
  v109[5] = *MEMORY[0x1E0C80C00];
  v7 = sub_1A2AE30C4();
  v96 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v88 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v92 = (char *)&v86 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v93 = (char *)&v86 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v86 - v14;
  v100[1] = "syncXPC";
  v100[2] = 7;
  v101 = 2;
  v102 = 2;
  v103.opaque[0] = 0;
  v103.opaque[1] = 0;
  if (qword_1EE6766B8 != -1)
    swift_once();
  v16 = _os_activity_create(&dword_1A2830000, "syncXPC", (os_activity_t)qword_1EE6766C8, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  if (v16)
  {
    os_activity_scope_enter(v16, &v103);
    swift_unknownObjectRelease();
  }
  v95 = &v103;
  sub_1A2AE30B8();
  if (qword_1EE676778 != -1)
    swift_once();
  v17 = sub_1A2AE31D8();
  __swift_project_value_buffer(v17, (uint64_t)qword_1EE676790);
  swift_bridgeObjectRetain_n();
  v18 = sub_1A2AE31C0();
  v19 = sub_1A2AE3964();
  v20 = os_log_type_enabled(v18, v19);
  v98 = v7;
  v97 = v15;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain();
    v109[0] = sub_1A296DA00(v94, a2, aBlock);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v18, v19, "syncXPC [%{public}s] START -- Client", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v22, -1, -1);
    MEMORY[0x1A85896E8](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0;
  v24 = (void **)(v23 + 16);
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_synchronousRemoteObjectProxyWithErrorHandler_) & 1) != 0)
  {
    aBlock[4] = (uint64_t)sub_1A2A01714;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A2A3D2FC;
    aBlock[3] = (uint64_t)&block_descriptor_298;
    v25 = _Block_copy(aBlock);
    v26 = v5;
    swift_retain_n();
    v27 = objc_msgSend(v26, sel_synchronousRemoteObjectProxyWithErrorHandler_, v25);
    _Block_release(v25);
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    swift_release();

    swift_release();
  }
  else
  {
    memset(v109, 0, 32);
  }
  swift_beginAccess();
  v28 = *v24;
  if (*v24)
  {
    v106 = (char *)*v24;
    v29 = v28;
    v30 = v28;
    v31 = v28;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v32 = sub_1A2AE3EB0();
    if (v32)
    {
      v33 = (void *)v32;

    }
    else
    {
      v33 = (void *)swift_allocError();
      *v38 = v106;
    }
    v36 = v98;
    v37 = v93;
    swift_willThrow();

LABEL_21:
    sub_1A296F108((uint64_t)v109, &qword_1ECEFB8A0);
    swift_release();
    goto LABEL_22;
  }
  v34 = v91;
  v35 = sub_1A2975750((uint64_t)v109, 0, 0, 0xD000000000000051, 0x80000001A2B463C0, 194);
  v33 = v34;
  if (v34)
  {
LABEL_18:
    sub_1A296F108((uint64_t)v109, &qword_1ECEFB8A0);
    swift_release();
    v36 = v98;
    v37 = v93;
LABEL_22:
    v39 = v96;
    v40 = v97;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v37, v97, v36);
    swift_bridgeObjectRetain();
    v41 = v33;
    swift_bridgeObjectRetain();
    v42 = v33;
    disableAirDropTLS();
    disableAirDropTLS();
    v43 = sub_1A2AE31C0();
    v44 = v37;
    v45 = v33;
    v46 = sub_1A2AE394C();
    if (os_log_type_enabled(v43, v46))
    {
      v47 = swift_slowAlloc();
      v48 = (_QWORD *)swift_slowAlloc();
      v91 = v48;
      v93 = (char *)swift_slowAlloc();
      v109[0] = (uint64_t)v93;
      *(_DWORD *)v47 = 136446978;
      v49 = v44;
      swift_bridgeObjectRetain();
      v106 = (char *)sub_1A296DA00(v94, a2, v109);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 12) = 2114;
      v50 = (char *)sub_1A2AE2E9C();
      v106 = v50;
      sub_1A2AE3A60();
      *v48 = v50;

      *(_WORD *)(v47 + 22) = 1040;
      LODWORD(v106) = 3;
      sub_1A2AE3A60();
      *(_WORD *)(v47 + 28) = 2048;
      v51 = v92;
      sub_1A2AE30B8();
      v52 = v49;
      sub_1A2AE2FC8();
      v54 = v53;
      v55 = *(void (**)(char *, uint64_t))(v96 + 8);
      v55(v51, v98);
      v106 = v54;
      v36 = v98;
      sub_1A2AE3A60();
      v55(v52, v36);
      _os_log_impl(&dword_1A2830000, v43, v46, "syncXPC [%{public}s] FAIL -- Client {error: %{public}@, duration: %.*f}", (uint8_t *)v47, 0x26u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      v56 = v91;
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v56, -1, -1);
      v57 = v93;
      swift_arrayDestroy();
      v58 = v57;
      v40 = v97;
      MEMORY[0x1A85896E8](v58, -1, -1);
      MEMORY[0x1A85896E8](v47, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v55 = *(void (**)(char *, uint64_t))(v39 + 8);
      v55(v44, v36);
    }

    swift_willThrow();
    v55(v40, v36);
    os_activity_scope_leave(v95);
    return;
  }
  v100[0] = v35;
  v90(&v106, v100);
  v59 = *v24;
  if (*v24)
  {
    v105 = *v24;
    v60 = v59;
    v61 = v59;
    v62 = v59;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v63 = sub_1A2AE3EB0();
    if (v63)
    {
      v33 = (void *)v63;

    }
    else
    {
      v33 = (void *)swift_allocError();
      *v82 = v105;
    }
    v36 = v98;
    v37 = v93;
    swift_willThrow();

    sub_1A2A46424(v106, v107, v108);
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  v64 = v108;
  if (v108 == 255)
  {
    sub_1A297AFB8();
    v33 = (void *)swift_allocError();
    *(_OWORD *)v83 = xmmword_1A2B05390;
    *(_QWORD *)(v83 + 16) = 0xD000000000000051;
    *(_QWORD *)(v83 + 24) = 0x80000001A2B463C0;
    *(_QWORD *)(v83 + 32) = 197;
    *(_OWORD *)(v83 + 40) = 0u;
    *(_OWORD *)(v83 + 56) = 0u;
    *(_QWORD *)(v83 + 72) = 0;
    *(_QWORD *)(v83 + 80) = 0x2000000000000000;
    *(_QWORD *)(v83 + 88) = 0;
    *(_QWORD *)(v83 + 96) = 0;
    swift_willThrow();
    sub_1A2A46424(v106, v107, v108);
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  v65 = v106;
  v66 = v107;
  LODWORD(v91) = v108 & 1;
  v67 = v96;
  v68 = v88;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v88, v97, v98);
  swift_bridgeObjectRetain_n();
  v93 = v65;
  sub_1A2A4644C(v65, v66, v64);
  disableAirDropTLS();
  disableAirDropTLS();
  v69 = sub_1A2AE31C0();
  v70 = sub_1A2AE3964();
  v71 = v70;
  if (os_log_type_enabled(v69, v70))
  {
    v72 = swift_slowAlloc();
    LODWORD(v89) = v71;
    v73 = v72;
    v90 = (void (*)(char **__return_ptr, _QWORD *))swift_slowAlloc();
    v105 = v90;
    *(_DWORD *)v73 = 136446722;
    v87 = v69;
    swift_bridgeObjectRetain();
    v99 = sub_1A296DA00(v94, a2, (uint64_t *)&v105);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v73 + 12) = 1040;
    LODWORD(v99) = 3;
    sub_1A2AE3A60();
    *(_WORD *)(v73 + 18) = 2048;
    v74 = v92;
    sub_1A2AE30B8();
    sub_1A2AE2FC8();
    v76 = v75;
    v77 = *(void (**)(char *, uint64_t))(v67 + 8);
    v78 = v74;
    v79 = v98;
    v77(v78, v98);
    v99 = v76;
    sub_1A2AE3A60();
    v77(v68, v79);
    v80 = v87;
    _os_log_impl(&dword_1A2830000, v87, (os_log_type_t)v89, "syncXPC [%{public}s] END -- Client {duration: %.*f}", (uint8_t *)v73, 0x1Cu);
    v81 = (void (*)(_QWORD *__return_ptr, _QWORD))v90;
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v81, -1, -1);
    MEMORY[0x1A85896E8](v73, -1, -1);

    sub_1A2A46424(v106, v107, v108);
    swift_unknownObjectRelease();
    sub_1A296F108((uint64_t)v109, &qword_1ECEFB8A0);
    v77(v97, v79);
  }
  else
  {

    v84 = *(void (**)(char *, uint64_t))(v67 + 8);
    v85 = v98;
    v84(v68, v98);
    swift_bridgeObjectRelease_n();
    sub_1A2A46424(v106, v107, v108);
    swift_unknownObjectRelease();
    sub_1A296F108((uint64_t)v109, &qword_1ECEFB8A0);
    v84(v97, v85);
  }
  swift_release();
  os_activity_scope_leave(v95);
}

void *sub_1A2A3772C(uint64_t a1, unint64_t a2, void (*a3)(void **__return_ptr, _QWORD *), NSObject *a4)
{
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  id v41;
  id v42;
  NSObject *v43;
  char *v44;
  void *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  void *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  void (*v55)(char *, void *);
  uint64_t v56;
  char *v57;
  char *v58;
  void *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, void *);
  char *v77;
  void *v78;
  os_log_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void (*v83)(char *, void *);
  void *v84;
  uint64_t v85;
  char *v86;
  os_log_t v87;
  void (*v88)(void **__return_ptr, _QWORD *);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  os_activity_scope_state_t v93;
  uint64_t v94;
  char *v95;
  void *v96;
  uint64_t v97;
  _QWORD v98[3];
  char v99;
  int v100;
  os_activity_scope_state_s v101;
  uint64_t aBlock[6];
  uint64_t v103;
  void *v104;
  unsigned __int8 v105;
  _OWORD v106[2];
  uint64_t v107;

  v5 = v4;
  v87 = a4;
  v88 = a3;
  v92 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  v7 = sub_1A2AE30C4();
  v94 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v86 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v90 = (char *)&v85 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v91 = (char *)&v85 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v85 - v14;
  v98[1] = "syncXPC";
  v98[2] = 7;
  v99 = 2;
  v100 = 2;
  v101.opaque[0] = 0;
  v101.opaque[1] = 0;
  if (qword_1EE6766B8 != -1)
    swift_once();
  v16 = _os_activity_create(&dword_1A2830000, "syncXPC", (os_activity_t)qword_1EE6766C8, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  if (v16)
  {
    os_activity_scope_enter(v16, &v101);
    swift_unknownObjectRelease();
  }
  v93 = &v101;
  sub_1A2AE30B8();
  if (qword_1EE676778 != -1)
    swift_once();
  v17 = sub_1A2AE31D8();
  __swift_project_value_buffer(v17, (uint64_t)qword_1EE676790);
  swift_bridgeObjectRetain_n();
  v18 = sub_1A2AE31C0();
  v19 = sub_1A2AE3964();
  v20 = os_log_type_enabled(v18, v19);
  v96 = (void *)v7;
  v95 = v15;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v106[0] = sub_1A296DA00(v92, a2, aBlock);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v18, v19, "syncXPC [%{public}s] START -- Client", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v22, -1, -1);
    MEMORY[0x1A85896E8](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0;
  v24 = (void **)(v23 + 16);
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_synchronousRemoteObjectProxyWithErrorHandler_) & 1) != 0)
  {
    aBlock[4] = (uint64_t)sub_1A2A01714;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1A2A3D2FC;
    aBlock[3] = (uint64_t)&block_descriptor_201;
    v25 = _Block_copy(aBlock);
    v26 = v5;
    swift_retain_n();
    v27 = objc_msgSend(v26, sel_synchronousRemoteObjectProxyWithErrorHandler_, v25);
    _Block_release(v25);
    sub_1A2AE3A90();
    swift_unknownObjectRelease();
    swift_release();

    swift_release();
  }
  else
  {
    memset(v106, 0, sizeof(v106));
  }
  swift_beginAccess();
  v28 = *v24;
  if (*v24)
  {
    v104 = *v24;
    v29 = v28;
    v30 = v28;
    v31 = v28;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v32 = sub_1A2AE3EB0();
    if (v32)
    {
      v33 = (void *)v32;

    }
    else
    {
      v33 = (void *)swift_allocError();
      *v38 = v104;
    }
    v36 = v96;
    v37 = v91;
    swift_willThrow();

LABEL_21:
    sub_1A296F108((uint64_t)v106, &qword_1ECEFB8A0);
    swift_release();
    goto LABEL_22;
  }
  v34 = (void *)v89;
  v35 = sub_1A2975750((uint64_t)v106, 0, 0, 0xD000000000000051, 0x80000001A2B463C0, 194);
  v33 = v34;
  if (v34)
  {
LABEL_18:
    sub_1A296F108((uint64_t)v106, &qword_1ECEFB8A0);
    swift_release();
    v36 = v96;
    v37 = v91;
LABEL_22:
    v39 = v94;
    v40 = v95;
    (*(void (**)(char *, char *, void *))(v94 + 16))(v37, v95, v36);
    swift_bridgeObjectRetain();
    v41 = v33;
    swift_bridgeObjectRetain();
    v42 = v33;
    disableAirDropTLS();
    disableAirDropTLS();
    v43 = sub_1A2AE31C0();
    v44 = v37;
    v45 = v33;
    v46 = sub_1A2AE394C();
    if (os_log_type_enabled(v43, v46))
    {
      v47 = swift_slowAlloc();
      v48 = (_QWORD *)swift_slowAlloc();
      v89 = (uint64_t)v48;
      v91 = (char *)swift_slowAlloc();
      *(_QWORD *)&v106[0] = v91;
      *(_DWORD *)v47 = 136446978;
      v49 = v44;
      swift_bridgeObjectRetain();
      v104 = (void *)sub_1A296DA00(v92, a2, (uint64_t *)v106);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 12) = 2114;
      v50 = (void *)sub_1A2AE2E9C();
      v104 = v50;
      sub_1A2AE3A60();
      *v48 = v50;

      *(_WORD *)(v47 + 22) = 1040;
      LODWORD(v104) = 3;
      sub_1A2AE3A60();
      *(_WORD *)(v47 + 28) = 2048;
      v51 = v90;
      sub_1A2AE30B8();
      v52 = v49;
      sub_1A2AE2FC8();
      v54 = v53;
      v55 = *(void (**)(char *, void *))(v94 + 8);
      v55(v51, v96);
      v104 = v54;
      v36 = v96;
      sub_1A2AE3A60();
      v55(v52, v36);
      _os_log_impl(&dword_1A2830000, v43, v46, "syncXPC [%{public}s] FAIL -- Client {error: %{public}@, duration: %.*f}", (uint8_t *)v47, 0x26u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      v56 = v89;
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v56, -1, -1);
      v57 = v91;
      swift_arrayDestroy();
      v58 = v57;
      v40 = v95;
      MEMORY[0x1A85896E8](v58, -1, -1);
      MEMORY[0x1A85896E8](v47, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v55 = *(void (**)(char *, void *))(v39 + 8);
      v55(v44, v36);
    }

    swift_willThrow();
    v55(v40, v36);
    os_activity_scope_leave(v93);
    return v36;
  }
  v98[0] = v35;
  v88(&v104, v98);
  v60 = *v24;
  if (*v24)
  {
    v103 = (uint64_t)*v24;
    v61 = v60;
    v62 = v60;
    v63 = v60;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v64 = sub_1A2AE3EB0();
    if (v64)
    {
      v33 = (void *)v64;

    }
    else
    {
      v33 = (void *)swift_allocError();
      *v81 = v103;
    }
    v36 = v96;
    v37 = v91;
    swift_willThrow();

    sub_1A2A45500(v104, v105);
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  v65 = v105;
  if (v105 == 255)
  {
    sub_1A297AFB8();
    v33 = (void *)swift_allocError();
    *(_OWORD *)v82 = xmmword_1A2B05390;
    *(_QWORD *)(v82 + 16) = 0xD000000000000051;
    *(_QWORD *)(v82 + 24) = 0x80000001A2B463C0;
    *(_QWORD *)(v82 + 32) = 197;
    *(_OWORD *)(v82 + 40) = 0u;
    *(_OWORD *)(v82 + 56) = 0u;
    *(_QWORD *)(v82 + 72) = 0;
    *(_QWORD *)(v82 + 80) = 0x2000000000000000;
    *(_QWORD *)(v82 + 88) = 0;
    *(_QWORD *)(v82 + 96) = 0;
    swift_willThrow();
    sub_1A2A45500(v104, v105);
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  v36 = v104;
  LODWORD(v91) = v105 & 1;
  v66 = v94;
  v67 = v86;
  (*(void (**)(char *, char *, void *))(v94 + 16))(v86, v95, v96);
  swift_bridgeObjectRetain_n();
  sub_1A2A45524(v36, v65);
  disableAirDropTLS();
  disableAirDropTLS();
  v68 = sub_1A2AE31C0();
  v69 = sub_1A2AE3964();
  v70 = v69;
  if (os_log_type_enabled(v68, v69))
  {
    v71 = swift_slowAlloc();
    LODWORD(v88) = v70;
    v72 = v71;
    v89 = swift_slowAlloc();
    v103 = v89;
    *(_DWORD *)v72 = 136446722;
    v87 = v68;
    swift_bridgeObjectRetain();
    v97 = sub_1A296DA00(v92, a2, &v103);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 12) = 1040;
    LODWORD(v97) = 3;
    sub_1A2AE3A60();
    *(_WORD *)(v72 + 18) = 2048;
    v73 = v90;
    sub_1A2AE30B8();
    sub_1A2AE2FC8();
    v75 = v74;
    v76 = *(void (**)(char *, void *))(v66 + 8);
    v77 = v73;
    v78 = v96;
    v76(v77, v96);
    v97 = v75;
    sub_1A2AE3A60();
    v76(v67, v78);
    v79 = v87;
    _os_log_impl(&dword_1A2830000, v87, (os_log_type_t)v88, "syncXPC [%{public}s] END -- Client {duration: %.*f}", (uint8_t *)v72, 0x1Cu);
    v80 = v89;
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v80, -1, -1);
    MEMORY[0x1A85896E8](v72, -1, -1);

    sub_1A2A45500(v104, v105);
    swift_unknownObjectRelease();
    sub_1A296F108((uint64_t)v106, &qword_1ECEFB8A0);
    v76(v95, v78);
  }
  else
  {

    v83 = *(void (**)(char *, void *))(v66 + 8);
    v84 = v96;
    v83(v67, v96);
    swift_bridgeObjectRelease_n();
    sub_1A2A45500(v104, v105);
    swift_unknownObjectRelease();
    sub_1A296F108((uint64_t)v106, &qword_1ECEFB8A0);
    v83(v95, v84);
  }
  swift_release();
  os_activity_scope_leave(v93);
  return v36;
}

uint64_t sub_1A2A383F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[29] = a1;
  v2[30] = v1;
  v3 = sub_1A2AE3BC8();
  v2[31] = v3;
  v2[32] = *(_QWORD *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v4 = sub_1A2AE3BE0();
  v2[35] = v4;
  v2[36] = *(_QWORD *)(v4 - 8);
  v2[37] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A38488()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int **v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)();
  _QWORD *v10;
  uint64_t (*v12)(_QWORD *);

  v1 = v0[30];
  v0[38] = *(_QWORD *)(v1 + 112);
  v2 = qword_1EE6ADCE8;
  v0[39] = *(_QWORD *)(v1 + 120);
  v0[40] = v2;
  v3 = (int **)(v1 + v2);
  v4 = qword_1EE6ADCF8;
  v5 = qword_1EE6ADCC0;
  v0[41] = qword_1EE6ADCF8;
  v0[42] = v5;
  v6 = *v3;
  v0[43] = *v3;
  v0[44] = v3[1];
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = v0 + 2;
    v12 = (uint64_t (*)(_QWORD *))((char *)v6 + *v6);
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[45] = v8;
    v9 = sub_1A2A38588;
  }
  else
  {
    v10 = (_QWORD *)(v1 + v4);
    v7 = v0 + 19;
    v12 = (uint64_t (*)(_QWORD *))(*(int *)*v10 + *v10);
    v8 = (_QWORD *)swift_task_alloc();
    v0[47] = v8;
    v9 = sub_1A2A38C24;
  }
  *v8 = v0;
  v8[1] = v9;
  return v12(v7);
}

uint64_t sub_1A2A38588()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A385EC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(v0 + 24))
  {
    sub_1A297CC78(*(_QWORD *)(v0 + 344));
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v1 = sub_1A2AE31C0();
    v2 = sub_1A2AE394C();
    v3 = os_log_type_enabled(v1, v2);
    v4 = *(_QWORD *)(v0 + 344);
    v5 = *(_QWORD *)(v0 + 312);
    if (v3)
    {
      v6 = *(_QWORD *)(v0 + 304);
      v14 = *(_QWORD *)(v0 + 344);
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v15 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 224) = sub_1A296DA00(v6, v5, &v15);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A2830000, v1, v2, "XPCResilientAsyncSequence[%s] END. Inner sequence finished", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v8, -1, -1);
      MEMORY[0x1A85896E8](v7, -1, -1);

      v9 = v14;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v9 = v4;
    }
    sub_1A297CC78(v9);
  }
  v10 = *(_OWORD **)(v0 + 232);
  v11 = *(_OWORD *)(v0 + 32);
  v12 = *(_OWORD *)(v0 + 48);
  *v10 = *(_OWORD *)(v0 + 16);
  v10[1] = v11;
  v10[2] = v12;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A387D0()
{
  uint64_t v0;
  char v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31[2];

  v1 = sub_1A2A39C88(*(void **)(v0 + 368));
  v2 = *(void **)(v0 + 368);
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    swift_bridgeObjectRetain();
    v4 = v2;
    v5 = sub_1A2AE31C0();
    v6 = sub_1A2AE394C();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void **)(v0 + 368);
    v9 = *(_QWORD *)(v0 + 312);
    if (v7)
    {
      v10 = *(_QWORD *)(v0 + 304);
      v11 = swift_slowAlloc();
      v12 = (_QWORD *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v11 + 4) = sub_1A296DA00(v10, v9, v31);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v11 + 12) = 2112;
      v14 = v8;
      v15 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v11 + 14) = v15;
      *v12 = v15;

      _os_log_impl(&dword_1A2830000, v5, v6, "XPCResilientAsyncSequence[%s] RETRY. Recreating sequence {error: %@}", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v12, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v13, -1, -1);
      MEMORY[0x1A85896E8](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1A2AE3BD4();
    *(_OWORD *)(v0 + 88) = xmmword_1A2AFE880;
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = 0;
    *(_BYTE *)(v0 + 80) = 1;
    return swift_task_switch();
  }
  else
  {
    v16 = v2;
    swift_bridgeObjectRetain();
    v17 = v2;
    v18 = sub_1A2AE31C0();
    v19 = sub_1A2AE394C();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void **)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 312);
    if (v20)
    {
      v23 = *(_QWORD *)(v0 + 304);
      v24 = swift_slowAlloc();
      v25 = (_QWORD *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v31[0] = v26;
      *(_DWORD *)v24 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 208) = sub_1A296DA00(v23, v22, v31);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2112;
      v27 = v21;
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 176) = v28;
      sub_1A2AE3A60();
      *v25 = v28;

      _os_log_impl(&dword_1A2830000, v18, v19, "XPCResilientAsyncSequence[%s] FAILED. Non retryable error {error: %@}", (uint8_t *)v24, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v25, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v26, -1, -1);
      MEMORY[0x1A85896E8](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v30 = *(_QWORD *)(v0 + 344);
    swift_willThrow();
    sub_1A297CC78(v30);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A2A38C24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A38C88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v2 = v0[32];
  v1 = v0[33];
  v3 = v0[31];
  sub_1A296E8A4(&qword_1EE675DB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_1A2AE3F58();
  sub_1A296E8A4(&qword_1EE675DA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_1A2AE3BEC();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[49] = v4;
  v4(v1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[50] = v5;
  *v5 = v0;
  v5[1] = sub_1A2A38D94;
  return sub_1A2AE3F64();
}

uint64_t sub_1A2A38D94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 392))(*(_QWORD *)(v2 + 272), *(_QWORD *)(v2 + 248));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 288);
    v3 = *(_QWORD *)(v2 + 296);
    v5 = *(_QWORD *)(v2 + 280);
    (*(void (**)(_QWORD, _QWORD))(v2 + 392))(*(_QWORD *)(v2 + 272), *(_QWORD *)(v2 + 248));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_1A2A38E38()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD *);

  v1 = (_QWORD *)(v0[30] + v0[41]);
  v4 = (uint64_t (*)(_QWORD *))(*(int *)*v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[52] = v2;
  *v2 = v0;
  v2[1] = sub_1A2A38EA8;
  return v4(v0 + 17);
}

uint64_t sub_1A2A38EA8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A38F0C()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[36] + 8))(v0[37], v0[35]);
  return swift_task_switch();
}

uint64_t sub_1A2A38F54()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *log;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 408);
  v2 = *(void **)(v0 + 368);
  v3 = v2;
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = v1;
  v7 = sub_1A2AE31C0();
  v8 = sub_1A2AE394C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 312);
    type = v8;
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 184) = sub_1A296DA00(v11, v10, &v24);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    v14 = v1;
    log = v7;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 192) = v15;
    sub_1A2AE3A60();
    *v13 = v15;

    *(_WORD *)(v12 + 22) = 2112;
    v16 = v9;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 200) = v17;
    sub_1A2AE3A60();
    v13[1] = v17;

    _os_log_impl(&dword_1A2830000, log, type, "XPCResilientAsyncSequence[%s] FAILED. Unable to recreate sequence. Throwing iterationError {error: %@, iterationError: %@}", (uint8_t *)v12, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v23, -1, -1);
    MEMORY[0x1A85896E8](v12, -1, -1);

  }
  else
  {
    v18 = *(void **)(v0 + 368);

    swift_bridgeObjectRelease_n();
  }
  v19 = *(_QWORD *)(v0 + 344);
  swift_willThrow();

  sub_1A297CC78(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A39238()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int **v22;
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)();
  void (*v28)(void);
  uint64_t (*v29)(uint64_t);
  uint64_t v30;

  v1 = *(void **)(v0 + 368);
  v2 = *(void (**)(void))(v0 + 136);
  swift_bridgeObjectRetain();
  v3 = v1;
  swift_bridgeObjectRetain();
  v4 = v1;
  v5 = sub_1A2AE31C0();
  v6 = sub_1A2AE3964();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 312);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 304);
    v11 = swift_slowAlloc();
    v28 = v2;
    v12 = (_QWORD *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v13 = v30;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v11 + 4) = sub_1A296DA00(v10, v9, &v30);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2112;
    v14 = v8;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v11 + 14) = v15;
    *v12 = v15;

    _os_log_impl(&dword_1A2830000, v5, v6, "XPCResilientAsyncSequence[%s] CONTINUE. Recreated sequence after error {error: %@}", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    v16 = v12;
    v2 = v28;
    MEMORY[0x1A85896E8](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v13, -1, -1);
    MEMORY[0x1A85896E8](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v17 = *(void **)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 344);
  v19 = (uint64_t *)(*(_QWORD *)(v0 + 240) + *(_QWORD *)(v0 + 320));
  v2();

  sub_1A297CC78(v18);
  swift_release();
  v20 = *v19;
  *(_OWORD *)v19 = *(_OWORD *)(v0 + 120);
  sub_1A297CC78(v20);
  v21 = *(_QWORD *)(v0 + 240);
  v22 = (int **)(v21 + *(_QWORD *)(v0 + 320));
  v23 = *v22;
  *(_QWORD *)(v0 + 344) = *v22;
  *(_QWORD *)(v0 + 352) = v22[1];
  if (v23)
  {
    v24 = v0 + 16;
    v29 = (uint64_t (*)(uint64_t))((char *)v23 + *v23);
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v25;
    v26 = sub_1A2A38588;
  }
  else
  {
    v24 = v0 + 152;
    v29 = (uint64_t (*)(uint64_t))(**(int **)(v21 + *(_QWORD *)(v0 + 328))
                                          + *(_QWORD *)(v21 + *(_QWORD *)(v0 + 328)));
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v25;
    v26 = sub_1A2A38C24;
  }
  *v25 = v0;
  v25[1] = v26;
  return v29(v24);
}

uint64_t sub_1A2A39520()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *log;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 424);
  v2 = *(void **)(v0 + 368);
  v3 = v2;
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = v1;
  v7 = sub_1A2AE31C0();
  v8 = sub_1A2AE394C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 312);
    type = v8;
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 184) = sub_1A296DA00(v11, v10, &v24);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    v14 = v1;
    log = v7;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 192) = v15;
    sub_1A2AE3A60();
    *v13 = v15;

    *(_WORD *)(v12 + 22) = 2112;
    v16 = v9;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 200) = v17;
    sub_1A2AE3A60();
    v13[1] = v17;

    _os_log_impl(&dword_1A2830000, log, type, "XPCResilientAsyncSequence[%s] FAILED. Unable to recreate sequence. Throwing iterationError {error: %@, iterationError: %@}", (uint8_t *)v12, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v23, -1, -1);
    MEMORY[0x1A85896E8](v12, -1, -1);

  }
  else
  {
    v18 = *(void **)(v0 + 368);

    swift_bridgeObjectRelease_n();
  }
  v19 = *(_QWORD *)(v0 + 344);
  swift_willThrow();

  sub_1A297CC78(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A39804()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD);
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  void (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v21)(uint64_t);
  uint64_t v22;

  v1 = v0 + 152;
  v2 = *(void (**)(_QWORD))(v0 + 152);
  swift_bridgeObjectRetain_n();
  v3 = sub_1A2AE31C0();
  v4 = sub_1A2AE3964();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 312);
  if (v5)
  {
    v7 = v2;
    v8 = *(_QWORD *)(v0 + 304);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v22 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    v11 = v8;
    v2 = v7;
    *(_QWORD *)(v9 + 4) = sub_1A296DA00(v11, v6, &v22);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v3, v4, "XPCResilientAsyncSequence[%s] START. Created initial sequence.", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v10, -1, -1);
    MEMORY[0x1A85896E8](v9, -1, -1);

  }
  else
  {

    v12 = swift_bridgeObjectRelease_n();
  }
  v13 = (uint64_t *)(*(_QWORD *)(v0 + 240) + *(_QWORD *)(v0 + 320));
  v2(v12);
  swift_release();
  v14 = *v13;
  *(_OWORD *)v13 = *(_OWORD *)(v0 + 104);
  sub_1A297CC78(v14);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = (int **)(v15 + *(_QWORD *)(v0 + 320));
  v17 = *v16;
  *(_QWORD *)(v0 + 344) = *v16;
  *(_QWORD *)(v0 + 352) = v16[1];
  if (v17)
  {
    v1 = v0 + 16;
    v21 = (uint64_t (*)(uint64_t))((char *)v17 + *v17);
    swift_retain();
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v18;
    v19 = sub_1A2A38588;
  }
  else
  {
    v21 = (uint64_t (*)(uint64_t))(**(int **)(v15 + *(_QWORD *)(v0 + 328))
                                          + *(_QWORD *)(v15 + *(_QWORD *)(v0 + 328)));
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v18;
    v19 = sub_1A2A38C24;
  }
  *v18 = v0;
  v18[1] = v19;
  return v21(v1);
}

uint64_t sub_1A2A39A3C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v1 = *(void **)(v0 + 384);
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = sub_1A2AE31C0();
  v5 = sub_1A2AE394C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 384);
    v8 = *(_QWORD *)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 312);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16 = v11;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 216) = sub_1A296DA00(v8, v7, &v16);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2112;
    v12 = v6;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 168) = v13;
    sub_1A2AE3A60();
    *v10 = v13;

    _os_log_impl(&dword_1A2830000, v4, v5, "XPCResilientAsyncSequence[%s] FAILED. Failed to create initial sequence.  {error: %@}", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v11, -1, -1);
    MEMORY[0x1A85896E8](v9, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 384);

    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A39C88(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  int v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(void *);
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  os_log_t v40;
  uint64_t v41;
  _BYTE v43[4];
  int v44;
  os_log_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D00);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1A2AE2DC4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = (uint64_t)a1;
  v11 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  v12 = swift_dynamicCast();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v12)
  {
    v13(v6, 0, 1, v7);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    v14 = sub_1A2AE2DB8();
    v15 = a1;
    v16 = a1;
    swift_retain();
    v17 = sub_1A2AE31C0();
    v18 = sub_1A2AE3964();
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc();
      v46 = (_QWORD *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v49 = v47;
      *(_DWORD *)v20 = 136315650;
      v45 = v17;
      v44 = v19;
      v21 = v14;
      v22 = *(_QWORD *)(v2 + 112);
      v23 = *(_QWORD *)(v2 + 120);
      swift_bridgeObjectRetain();
      v48 = sub_1A296DA00(v22, v23, &v49);
      sub_1A2AE3A60();
      swift_release();
      v14 = v21;
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 1024;
      LODWORD(v48) = v21 & 1;
      sub_1A2AE3A60();
      *(_WORD *)(v20 + 18) = 2112;
      v24 = a1;
      v25 = _swift_stdlib_bridgeErrorToNSError();
      v48 = v25;
      sub_1A2AE3A60();
      v26 = v46;
      *v46 = v25;

      v17 = v45;
      _os_log_impl(&dword_1A2830000, v45, (os_log_type_t)v44, "XPCResilientAsyncSequence[%s] Evaluated Cocoa Error {isXPCConnectionError: %{BOOL}d, error: %@}", (uint8_t *)v20, 0x1Cu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v26, -1, -1);
      v27 = v47;
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v27, -1, -1);
      MEMORY[0x1A85896E8](v20, -1, -1);
    }
    else
    {
      swift_release();

    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v13(v6, 1, 1, v7);
    sub_1A296F108((uint64_t)v6, &qword_1EE675D00);
    v28 = *(uint64_t (**)(void *))(v1 + qword_1EE6ADCF0);
    if (v28)
    {
      swift_retain();
      v14 = v28(a1);
      v29 = a1;
      swift_retain();
      v30 = a1;
      swift_retain();
      v31 = sub_1A2AE31C0();
      v32 = sub_1A2AE3964();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v46 = (_QWORD *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v49 = v47;
        *(_DWORD *)v33 = 136315650;
        v45 = v31;
        v34 = v14;
        v35 = *(_QWORD *)(v2 + 112);
        v36 = *(_QWORD *)(v2 + 120);
        swift_bridgeObjectRetain();
        v48 = sub_1A296DA00(v35, v36, &v49);
        sub_1A2AE3A60();
        swift_release_n();
        v14 = v34;
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        LODWORD(v48) = v34 & 1;
        sub_1A2AE3A60();
        *(_WORD *)(v33 + 18) = 2112;
        v37 = a1;
        v38 = _swift_stdlib_bridgeErrorToNSError();
        v48 = v38;
        sub_1A2AE3A60();
        v39 = v46;
        *v46 = v38;

        v40 = v45;
        _os_log_impl(&dword_1A2830000, v45, v32, "XPCResilientAsyncSequence[%s] Evaluated shouldRetryBlock {shouldRetry: %{BOOL}d, error: %@}", (uint8_t *)v33, 0x1Cu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675DA0);
        swift_arrayDestroy();
        MEMORY[0x1A85896E8](v39, -1, -1);
        v41 = v47;
        swift_arrayDestroy();
        MEMORY[0x1A85896E8](v41, -1, -1);
        MEMORY[0x1A85896E8](v33, -1, -1);
        sub_1A297CC78((uint64_t)v28);

      }
      else
      {
        sub_1A297CC78((uint64_t)v28);
        swift_release_n();

      }
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

id sub_1A2A3A26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  char v11;
  char v12;
  _QWORD v14[10];

  v2 = v1;
  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.SharingName()), sel_init);
  v4 = *(_QWORD *)&v3[OBJC_IVAR___SFXPCInvocation_name + 8];
  if (v4)
  {
    v5 = *(_QWORD *)&v3[OBJC_IVAR___SFXPCInvocation_name];
    v6 = *(_QWORD *)&v3[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v6 = 0x80000001A2B46300;
    v5 = 0xD000000000000019;
  }
  v7 = *(void **)(v0 + 16);
  MEMORY[0x1E0C80A78](v4);
  v14[2] = v5;
  v14[3] = v6;
  v14[5] = v0;
  v14[6] = v3;
  swift_bridgeObjectRetain();
  v8 = v7;
  v9 = v8;
  sub_1A2A36A28(v5, v6, (void (*)(char **__return_ptr, _QWORD *))sub_1A2A463EC, (uint64_t)v14);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v10;
    v12 = v11;

    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      v14[9] = v9;
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      swift_willThrowTypedImpl();
    }

  }
  return v9;
}

objc_class *sub_1A2A3A3D8()
{
  objc_class *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  uint64_t v4;
  objc_class *v5;
  objc_class *v6;
  void *v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  char v11;
  char v12;
  NSObject v14[10];

  v2 = v1;
  v3 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.FetchUserDefaults()), sel_init);
  v4 = *(_QWORD *)((char *)v3 + OBJC_IVAR___SFXPCInvocation_name + 8);
  if (v4)
  {
    v5 = *(objc_class **)((char *)v3 + OBJC_IVAR___SFXPCInvocation_name);
    v6 = *(objc_class **)((char *)v3 + OBJC_IVAR___SFXPCInvocation_name + 8);
  }
  else
  {
    v6 = (objc_class *)0x80000001A2B46300;
    v5 = (objc_class *)0xD000000000000019;
  }
  v7 = (void *)*((_QWORD *)v0 + 2);
  MEMORY[0x1E0C80A78](v4);
  v14[2].isa = v5;
  v14[3].isa = v6;
  v14[5].isa = v0;
  v14[6].isa = v3;
  swift_bridgeObjectRetain();
  v8 = v7;
  v9 = v8;
  v10 = (objc_class *)sub_1A2A3772C((uint64_t)v5, (unint64_t)v6, (void (*)(void **__return_ptr, _QWORD *))sub_1A2A454A4, v14);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = v10;
    v12 = v11;

    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      v14[9].isa = v9;
      __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
      swift_willThrowTypedImpl();
    }

  }
  return v9;
}

_QWORD *sub_1A2A3A53C(void *a1, objc_class *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];
  uint64_t v30;

  v6 = v5;
  swift_beginAccess();
  v12 = a4[3];
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = sub_1A2A33F98(a2, a3, v12);
  if (!v6)
  {
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_BYTE *)(v21 + 32) = -1;
    v30 = sub_1A2AE2F74();
    aBlock[4] = sub_1A2A464A8;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_304;
    v27 = a5;
    v28 = v17;
    v22 = _Block_copy(aBlock);
    v23 = v19;
    v24 = v20;
    swift_retain();
    swift_release();
    v25 = (void *)v30;
    objc_msgSend(a1, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v27, v30, v23, v24, 1, v22);
    sub_1A29736C4(v28, v18);

    _Block_release(v22);
    swift_beginAccess();
    a4 = *(_QWORD **)(v21 + 16);
    sub_1A2A4644C(a4, *(_QWORD *)(v21 + 24), *(_BYTE *)(v21 + 32));
    swift_release();
  }
  return a4;
}

_QWORD *sub_1A2A3A734(void *a1, objc_class *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v26;
  void *v27;
  _QWORD aBlock[6];
  uint64_t v29;

  v6 = v5;
  swift_beginAccess();
  v12 = a4[3];
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = sub_1A2A33F98(a2, a3, v12);
  if (!v6)
  {
    v17 = v13;
    v18 = v14;
    v19 = v15;
    v20 = v16;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = 0;
    *(_BYTE *)(v21 + 24) = -1;
    v29 = sub_1A2AE2F74();
    aBlock[4] = sub_1A2A4557C;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_207;
    v26 = a5;
    v27 = _Block_copy(aBlock);
    v22 = v19;
    v23 = v20;
    swift_retain();
    swift_release();
    v24 = (void *)v29;
    objc_msgSend(a1, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v26, v29, v22, v23, 1, v27);
    sub_1A29736C4(v17, v18);

    _Block_release(v27);
    swift_beginAccess();
    a4 = *(_QWORD **)(v21 + 16);
    sub_1A2A45524(a4, *(_BYTE *)(v21 + 24));
    swift_release();
  }
  return a4;
}

void sub_1A2A3A918(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1A297CF68(a1, a2);
  v12 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v13 = sub_1A2A3AF6C((uint64_t)a5, a1, a2, a3, a4);
  v15 = v14;
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  swift_beginAccess();
  v16 = *(void **)(a6 + 16);
  v17 = *(_QWORD *)(a6 + 24);
  *(_QWORD *)(a6 + 16) = v13;
  *(_QWORD *)(a6 + 24) = v15;
  v18 = *(_BYTE *)(a6 + 32);
  *(_BYTE *)(a6 + 32) = 0;
  sub_1A2A46424(v16, v17, v18);
}

void sub_1A2A3AA0C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;

  sub_1A297CF68(a1, a2);
  v12 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v13 = sub_1A2A3CEA8((uint64_t)a5, a1, a2, a3, a4);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  swift_beginAccess();
  v14 = *(void **)(a6 + 16);
  *(_QWORD *)(a6 + 16) = v13;
  v15 = *(_BYTE *)(a6 + 24);
  *(_BYTE *)(a6 + 24) = 0;
  sub_1A2A45500(v14, v15);
}

uint64_t sub_1A2A3AAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1A2A3B858(a1, a2, a3, a4, a5, &qword_1EE67D7F8, &qword_1EE67D800, a6);
}

uint64_t sub_1A2A3AB14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        sub_1A2A4574C();
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3AF6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  char *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _QWORD v47[3];
  uint64_t ObjectType;
  uint64_t v49;
  uint64_t v50;

  v50 = a5;
  v44 = a2;
  v45 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - v12;
  v14 = sub_1A2AE3C40();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v5)
  {
    v42 = v13;
    v43 = v14;
    v39 = v20;
    v40 = v11;
    v41 = v18;
    v22 = v45;
    v23 = v50;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v24 = xmmword_1A2B000D0;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 164;
LABEL_11:
      *(_QWORD *)(v24 + 32) = v25;
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_QWORD *)(v24 + 72) = 0;
      *(_QWORD *)(v24 + 80) = 0x2000000000000000;
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      return swift_willThrow();
    }
    if (!v45)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v24 = 0xD000000000000018;
      *(_QWORD *)(v24 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 165;
      goto LABEL_11;
    }
    if (!v50)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v24 = 0xD000000000000011;
      *(_QWORD *)(v24 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v37 = a3;
    sub_1A297CF68(v44, a3);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1A2AE2DF4();
    v26 = v42;
    sub_1A2AE3C34();
    v27 = v43;
    v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    result = v38(v26, 1, v43);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v29 = (uint64_t)v39;
      v28(v39, v26, v27);
      ObjectType = swift_getObjectType();
      v47[0] = v22;
      swift_unknownObjectRetain();
      v30 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v47, v29);
      v30(v46, 0);
      v31 = v40;
      sub_1A2AE3C34();
      result = v38(v31, 1, v27);
      v32 = (uint64_t)v41;
      if ((_DWORD)result != 1)
      {
        v28(v41, v31, v27);
        ObjectType = swift_getObjectType();
        v47[0] = v23;
        swift_unknownObjectRetain();
        v33 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v47, v32);
        v33(v46, 0);
        v34 = v44;
        v35 = v37;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        sub_1A29B98D8(v34, v35);
        return v49;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3B3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7B8);
        sub_1A296E5E4(&qword_1EE67D7C0, &qword_1EE67D7B8, (uint64_t)&protocol conformance descriptor for SFXPCProgressTask<A, B>);
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3B834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1A2A3B858(a1, a2, a3, a4, a5, &qword_1EE67D790, &qword_1EE67D798, a6);
}

uint64_t sub_1A2A3B858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, unint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  char *v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, _QWORD);
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _BYTE v61[32];
  _QWORD v62[3];
  uint64_t ObjectType;
  uint64_t v64;

  v57 = a7;
  v58 = a2;
  v59 = a4;
  v60 = a6;
  v64 = a5;
  v56 = a8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  v17 = sub_1A2AE3C40();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v48 - v22;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v8)
  {
    v53 = v18;
    v54 = v16;
    v50 = v23;
    v51 = v14;
    v55 = v17;
    v52 = v21;
    v25 = v59;
    v26 = v60;
    v27 = v64;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v28 = xmmword_1A2B000D0;
      *(_QWORD *)(v28 + 16) = 0xD000000000000051;
      *(_QWORD *)(v28 + 24) = 0x80000001A2B463C0;
      v29 = 164;
LABEL_11:
      *(_QWORD *)(v28 + 32) = v29;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_OWORD *)(v28 + 56) = 0u;
      *(_QWORD *)(v28 + 72) = 0;
      *(_QWORD *)(v28 + 80) = 0x2000000000000000;
      *(_QWORD *)(v28 + 88) = 0;
      *(_QWORD *)(v28 + 96) = 0;
      return swift_willThrow();
    }
    if (!v59)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v28 = 0xD000000000000018;
      *(_QWORD *)(v28 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v28 + 16) = 0xD000000000000051;
      *(_QWORD *)(v28 + 24) = 0x80000001A2B463C0;
      v29 = 165;
      goto LABEL_11;
    }
    if (!v64)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v28 = 0xD000000000000011;
      *(_QWORD *)(v28 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v28 + 16) = 0xD000000000000051;
      *(_QWORD *)(v28 + 24) = 0x80000001A2B463C0;
      v29 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v48 = a3;
    sub_1A297CF68(v58, a3);
    v30 = v25;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v31 = sub_1A2AE2DF4();
    v32 = v54;
    sub_1A2AE3C34();
    v33 = v53;
    v34 = v55;
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
    result = v49(v32, 1, v55);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v36 = (uint64_t)v50;
      v35(v50, v32, v34);
      ObjectType = swift_getObjectType();
      v62[0] = v30;
      swift_unknownObjectRetain();
      v54 = (char *)v31;
      v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v62, v36);
      v37(v61, 0);
      v38 = v51;
      sub_1A2AE3C34();
      result = v49(v38, 1, v34);
      v39 = v26;
      v40 = v57;
      v41 = v34;
      v42 = (uint64_t)v52;
      if ((_DWORD)result != 1)
      {
        v35(v52, v38, v41);
        ObjectType = swift_getObjectType();
        v62[0] = v27;
        swift_unknownObjectRetain();
        v43 = sub_1A2AE2DE8();
        v44 = v42;
        v45 = (void (*)(_BYTE *, _QWORD))v43;
        sub_1A29B3438((uint64_t)v62, v44);
        v45(v61, 0);
        __swift_instantiateConcreteTypeFromMangledName(v39);
        sub_1A296E5E4(v40, v39, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
        v46 = v58;
        v47 = v48;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v46, v47);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3BCD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745C8);
        sub_1A2A4579C();
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3C138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1A2A3B858(a1, a2, a3, a4, a5, &qword_1EE674810, &qword_1EE674808, a6);
}

uint64_t sub_1A2A3C15C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
        sub_1A296E8A4(&qword_1EE67D750, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.ServerInfo);
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3C5D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        sub_1A2A456C0();
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3CA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[3];
  uint64_t ObjectType;
  uint64_t v55;

  v55 = a5;
  v50 = a6;
  v51 = a4;
  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = sub_1A2AE3C40();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v40 - v20;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v6)
  {
    v46 = v16;
    v47 = v14;
    v43 = v21;
    v44 = v12;
    v48 = v15;
    v45 = v19;
    v23 = v51;
    v24 = v55;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v25 = xmmword_1A2B000D0;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 164;
LABEL_11:
      *(_QWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_QWORD *)(v25 + 80) = 0x2000000000000000;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 96) = 0;
      return swift_willThrow();
    }
    if (!v51)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000018;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 165;
      goto LABEL_11;
    }
    if (!v55)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000011;
      *(_QWORD *)(v25 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v25 + 16) = 0xD000000000000051;
      *(_QWORD *)(v25 + 24) = 0x80000001A2B463C0;
      v26 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v41 = a3;
    sub_1A297CF68(v49, a3);
    v27 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v28 = sub_1A2AE2DF4();
    v29 = v47;
    sub_1A2AE3C34();
    v30 = v46;
    v31 = v48;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    result = v42(v29, 1, v48);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v33 = (uint64_t)v43;
      v32(v43, v29, v31);
      ObjectType = swift_getObjectType();
      v53[0] = v27;
      swift_unknownObjectRetain();
      v47 = (char *)v28;
      v34 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v53, v33);
      v34(v52, 0);
      v35 = v44;
      sub_1A2AE3C34();
      result = v42(v35, 1, v31);
      v36 = (uint64_t)v45;
      if ((_DWORD)result != 1)
      {
        v32(v45, v35, v31);
        ObjectType = swift_getObjectType();
        v53[0] = v24;
        swift_unknownObjectRetain();
        v37 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v53, v36);
        v37(v52, 0);
        sub_1A2A45674();
        v38 = v49;
        v39 = v41;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        return sub_1A29B98D8(v38, v39);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3CE84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1A2A3B858(a1, a2, a3, a4, a5, &qword_1EE676490, &qword_1EE675D30, a6);
}

uint64_t sub_1A2A3CEA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  char *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _QWORD v47[3];
  uint64_t ObjectType;
  uint64_t v49;

  v44 = a4;
  v45 = a5;
  v43 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFC720);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - v12;
  v14 = sub_1A2AE3C40();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  result = Optional<A>.throwIfNotNil()(a1);
  if (!v5)
  {
    v41 = v13;
    v42 = v14;
    v38 = v20;
    v39 = v11;
    v40 = v18;
    v23 = v44;
    v22 = v45;
    if (a3 >> 60 == 15)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_OWORD *)v24 = xmmword_1A2B000D0;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 164;
LABEL_11:
      *(_QWORD *)(v24 + 32) = v25;
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_QWORD *)(v24 + 72) = 0;
      *(_QWORD *)(v24 + 80) = 0x2000000000000000;
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      return swift_willThrow();
    }
    if (!v44)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v24 = 0xD000000000000018;
      *(_QWORD *)(v24 + 8) = 0x80000001A2B46440;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 165;
      goto LABEL_11;
    }
    if (!v45)
    {
      sub_1A297AFB8();
      swift_allocError();
      *(_QWORD *)v24 = 0xD000000000000011;
      *(_QWORD *)(v24 + 8) = 0x80000001A2B46460;
      *(_QWORD *)(v24 + 16) = 0xD000000000000051;
      *(_QWORD *)(v24 + 24) = 0x80000001A2B463C0;
      v25 = 166;
      goto LABEL_11;
    }
    sub_1A2AE2E00();
    swift_allocObject();
    v36 = a3;
    sub_1A297CF68(v43, a3);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1A2AE2DF4();
    v26 = v41;
    sub_1A2AE3C34();
    v27 = v42;
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    result = v37(v26, 1, v42);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v29 = (uint64_t)v38;
      v28(v38, v26, v27);
      ObjectType = swift_getObjectType();
      v47[0] = v23;
      swift_unknownObjectRetain();
      v30 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
      sub_1A29B3438((uint64_t)v47, v29);
      v30(v46, 0);
      v31 = v39;
      sub_1A2AE3C34();
      result = v37(v31, 1, v27);
      v32 = (uint64_t)v40;
      if ((_DWORD)result != 1)
      {
        v28(v40, v31, v27);
        ObjectType = swift_getObjectType();
        v47[0] = v22;
        swift_unknownObjectRetain();
        v33 = (void (*)(_BYTE *, _QWORD))sub_1A2AE2DE8();
        sub_1A29B3438((uint64_t)v47, v32);
        v33(v46, 0);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D6F0);
        sub_1A2A45584();
        v34 = v43;
        v35 = v36;
        sub_1A2AE2DDC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        sub_1A29B98D8(v34, v35);
        return v49;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A2A3D300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE675D50);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE675D50);
  if (qword_1EE675D28 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE675D08);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id AskToAirDropSenderController.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_queue);
}

uint64_t AskToAirDropSenderController.nearbyDeviceCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A2A3D49C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1A2AE3304();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A2AE3334();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_queue);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1A2A45404;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A29FD800;
  aBlock[3] = &block_descriptor_145;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1A2AE3310();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4(&qword_1EE675D70, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
  sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  MEMORY[0x1A858703C](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

void sub_1A2A3D6AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(void);
  void (*v5)(void);

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A8589784](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void (**)(void))(v2 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler);
    swift_beginAccess();
    v5 = *v4;
    if (*v4)
    {
      sub_1A29DF9C8((uint64_t)v5);

      v5();
      sub_1A297CC78((uint64_t)v5);
    }
    else
    {

    }
  }
}

id AskToAirDropSenderController.hasSeenPrivacyPrompt.getter()
{
  return sub_1A2A41688();
}

void AskToAirDropSenderController.hasSeenPrivacyPrompt.setter(char a1)
{
  sub_1A2A4184C(a1);
}

void (*AskToAirDropSenderController.hasSeenPrivacyPrompt.modify(unsigned __int8 *a1))(unsigned __int8 *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (void *)sub_1A2AE340C();
    v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return sub_1A2A3D890;
}

void sub_1A2A3D890(unsigned __int8 *a1)
{
  sub_1A2A41BA0(a1);
}

uint64_t AskToAirDropSenderController.nearbyDeviceCountChangedHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler, (void (*)(_QWORD, _QWORD))sub_1A29DF9C8);
}

uint64_t AskToAirDropSenderController.nearbyDeviceCountChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A3D984@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A1BF10;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A3DA18(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A1BF10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropSenderController.nearbyDeviceCountChangedHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A2A3DB30(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v7 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  v8 = *v7;
  if (!*v7)
    return 0;
  v9 = v7[1];
  aBlock[4] = v8;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = a4;
  aBlock[3] = a5;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  return v10;
}

uint64_t AskToAirDropSenderController.didStopHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler, (void (*)(_QWORD, _QWORD))sub_1A2A465A0);
}

void sub_1A2A3DBE8(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t AskToAirDropSenderController.didStopHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A3DCE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A465A8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A3DD78(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A4540C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropSenderController.didStopHandler.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id AskToAirDropSenderController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AskToAirDropSenderController.init()()
{
  char *v0;
  char *v1;
  char *v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount] = 0;
  v1 = &v0[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;

  sub_1A2AE3C58();
  __break(1u);
}

id AskToAirDropSenderController.__allocating_init(queue:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1A2A445A8(a1);

  return v4;
}

id AskToAirDropSenderController.init(queue:)(void *a1)
{
  id v2;

  v2 = sub_1A2A445A8(a1);

  return v2;
}

void sub_1A2A3DFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1A8589784](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount);
    swift_beginAccess();
    if (__OFADD__(*v5, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v5;
      sub_1A2A3D49C();

    }
  }
}

void sub_1A2A3E070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1A8589784](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount);
    swift_beginAccess();
    if (__OFSUB__(*v5, 1))
    {
      __break(1u);
    }
    else
    {
      --*v5;
      sub_1A2A3D49C();

    }
  }
}

Swift::Void __swiftcall AskToAirDropSenderController.start(as:)(Swift::String as)
{
  sub_1A2A448A8();
}

uint64_t sub_1A2A3E14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[27] = a4;
  v5 = sub_1A2AE3304();
  v4[28] = v5;
  v4[29] = *(_QWORD *)(v5 - 8);
  v4[30] = swift_task_alloc();
  v6 = sub_1A2AE3334();
  v4[31] = v6;
  v4[32] = *(_QWORD *)(v6 - 8);
  v4[33] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3E1D4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1EE675D68 != -1)
    swift_once();
  v1 = sub_1A2AE31D8();
  v0[34] = __swift_project_value_buffer(v1, (uint64_t)qword_1EE675D50);
  v2 = sub_1A2AE31C0();
  v3 = sub_1A2AE3964();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A2830000, v2, v3, "Requesting to start advertising", v4, 2u);
    MEMORY[0x1A85896E8](v4, -1, -1);
  }
  v5 = v0[27];

  v0[35] = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A3E2D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67DCB0 + dword_1EE67DCB0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A3E340;
  return v3(v0 + 136);
}

uint64_t sub_1A2A3E340()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3E3A4()
{
  _QWORD *v0;
  void (*v1)(void);
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v1 = (void (*)(void))v0[17];
  v0[38] = v0[18];
  v1();
  v2 = OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_queue;
  v0[39] = OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount;
  v0[40] = v2;
  swift_beginAccess();
  v3 = (int *)v0[19];
  v0[41] = v0[20];
  v6 = (uint64_t (*)(_QWORD *))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[42] = v4;
  *v4 = v0;
  v4[1] = sub_1A2A3E494;
  return v6(v0 + 21);
}

uint64_t sub_1A2A3E454()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A3E494()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3E4F8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD *);
  uint64_t v31;

  v1 = v0[21];
  if (*((_BYTE *)v0 + 176) == 1)
  {
    swift_release();
    v2 = sub_1A2AE31C0();
    v3 = sub_1A2AE3964();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A2830000, v2, v3, "Advertising stopped", v4, 2u);
      MEMORY[0x1A85896E8](v4, -1, -1);
    }
    v5 = v0[33];
    v26 = v0[32];
    v6 = v0[30];
    v28 = v0[31];
    v7 = v0[28];
    v24 = v0[29];

    v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v0[6] = sub_1A2A46540;
    v0[7] = v8;
    v0[2] = MEMORY[0x1E0C809B0];
    v0[3] = 1107296256;
    v0[4] = sub_1A29FD800;
    v0[5] = &block_descriptor_328;
    v9 = _Block_copy(v0 + 2);
    swift_retain();
    sub_1A2AE3310();
    v0[24] = MEMORY[0x1E0DEE9D8];
    sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
    sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
    sub_1A2AE3AC0();
    MEMORY[0x1A858703C](0, v5, v6, v9);
    _Block_release(v9);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v5, v28);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
  else
  {
    v11 = sub_1A2AE31C0();
    v12 = sub_1A2AE3964();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v31 = v14;
      *(_DWORD *)v13 = 136315138;
      v0[26] = v1;
      v15 = sub_1A2AE3484();
      *(_QWORD *)(v13 + 4) = sub_1A296DA00(v15, v16, &v31);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A2830000, v11, v12, "Received new state: %s", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v14, -1, -1);
      MEMORY[0x1A85896E8](v13, -1, -1);
    }

    v17 = v0[33];
    v18 = v0[30];
    v27 = v0[32];
    v29 = v0[31];
    v19 = v0[28];
    v25 = v0[29];
    *(_QWORD *)(v0[27] + v0[39]) = v1;
    v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v0[12] = sub_1A2A45404;
    v0[13] = v20;
    v0[8] = MEMORY[0x1E0C809B0];
    v0[9] = 1107296256;
    v0[10] = sub_1A29FD800;
    v0[11] = &block_descriptor_334;
    v21 = _Block_copy(v0 + 8);
    swift_retain();
    sub_1A2AE3310();
    v0[25] = MEMORY[0x1E0DEE9D8];
    sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
    sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
    sub_1A2AE3AC0();
    MEMORY[0x1A858703C](0, v17, v18, v21);
    _Block_release(v21);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v17, v29);
    swift_release();
    swift_release();
    v22 = (int *)v0[19];
    v0[41] = v0[20];
    v30 = (uint64_t (*)(_QWORD *))((char *)v22 + *v22);
    v23 = (_QWORD *)swift_task_alloc();
    v0[42] = v23;
    *v23 = v0;
    v23[1] = sub_1A2A3E494;
    return v30(v0 + 21);
  }
}

uint64_t sub_1A2A3EA14()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  swift_willThrowTypedImpl();
  return swift_task_switch();
}

uint64_t sub_1A2A3EA74()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AskToAirDropSenderController.start()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A2AE36E8();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v8 = v0;
  if (v7 == 1)
  {
    sub_1A296F108((uint64_t)v3, &qword_1ECEFB6D0);
  }
  else
  {
    sub_1A2AE36DC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = sub_1A2AE3688();
      v11 = v10;
      swift_unknownObjectRelease();
      if (v11 | v9)
      {
        v12[0] = 0;
        v12[1] = 0;
        v12[2] = v9;
        v12[3] = v11;
      }
    }
  }
  swift_task_create();
  swift_release();
}

Swift::Void __swiftcall AskToAirDropSenderController.stop()()
{
  sub_1A2A448A8();
}

uint64_t sub_1A2A3ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[9] = a4;
  v5 = sub_1A2AE3304();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v6 = sub_1A2AE3334();
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3EDAC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1EE675D68 != -1)
    swift_once();
  v1 = sub_1A2AE31D8();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EE675D50);
  v2 = sub_1A2AE31C0();
  v3 = sub_1A2AE3964();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A2830000, v2, v3, "Requesting to stop advertising", v4, 2u);
    MEMORY[0x1A85896E8](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 72);

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A3EEA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EE67DCA8 + dword_1EE67DCA8);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A3EF04;
  return v3();
}

uint64_t sub_1A2A3EF04()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3EF68()
{
  return swift_task_switch();
}

uint64_t sub_1A2A3EF7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[15];
  v2 = v0[12];
  v8 = v0[14];
  v9 = v0[13];
  v3 = v0[10];
  v7 = v0[11];
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v0[6] = sub_1A2A46540;
  v0[7] = v4;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1A29FD800;
  v0[5] = &block_descriptor_321;
  v5 = _Block_copy(v0 + 2);
  swift_retain();
  sub_1A2AE3310();
  v0[8] = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
  sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  MEMORY[0x1A858703C](0, v1, v2, v5);
  _Block_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v9);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1A2A3F148()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A3F188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(_QWORD);
  void (*v5)(_QWORD);

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1A8589784](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void (**)(_QWORD))(v2 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler);
    swift_beginAccess();
    v5 = *v4;
    if (*v4)
    {
      sub_1A29DF9C8((uint64_t)v5);

      v5(0);
      sub_1A297CC78((uint64_t)v5);
    }
    else
    {

    }
  }
}

uint64_t AskToAirDropSenderController.fetchPrivacyPromptInformation(completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A2AE36E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  v10 = v2;
  swift_retain();
  sub_1A2974504((uint64_t)v7, (uint64_t)&unk_1EE67D5E0, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_1A2A3F33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[19] = a5;
  v6[20] = a6;
  v6[18] = a4;
  v7 = sub_1A2AE3304();
  v6[21] = v7;
  v6[22] = *(_QWORD *)(v7 - 8);
  v6[23] = swift_task_alloc();
  v8 = sub_1A2AE3334();
  v6[24] = v8;
  v6[25] = *(_QWORD *)(v8 - 8);
  v6[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A3F3C8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1EE675D68 != -1)
    swift_once();
  v1 = sub_1A2AE31D8();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)qword_1EE675D50);
  v2 = sub_1A2AE31C0();
  v3 = sub_1A2AE3964();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A2830000, v2, v3, "Requesting sharing name", v4, 2u);
    MEMORY[0x1A85896E8](v4, -1, -1);
  }
  v5 = v0[18];

  v0[28] = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A3F4C4()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;

  v1 = sub_1A2A3A26C();
  v0[29] = 0;
  v0[30] = v1;
  v0[31] = v2;
  return swift_task_switch();
}

uint64_t sub_1A2A3F528()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = sub_1A2AE31C0();
  v2 = sub_1A2AE3964();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A2830000, v1, v2, "Received sharing name", v3, 2u);
    MEMORY[0x1A85896E8](v3, -1, -1);
  }

  if (qword_1EE67AA58 != -1)
    swift_once();
  v4 = 0xD000000000000022;
  v5 = (void *)qword_1EE67CD08;
  if (qword_1EE67CD08)
  {
    v6 = (void *)sub_1A2AE340C();
    v7 = (void *)sub_1A2AE340C();
    v8 = (void *)sub_1A2AE340C();
    v9 = objc_msgSend(v5, sel_localizedStringForKey_value_table_, v6, v7, v8);

    sub_1A2AE343C();
  }
  v11 = v0[30];
  v10 = v0[31];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7D8);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1A2AFED80;
  *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 64) = sub_1A2A45830();
  *(_QWORD *)(v12 + 32) = v11;
  *(_QWORD *)(v12 + 40) = v10;
  v32 = sub_1A2AE3418();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (void *)qword_1EE67CD08;
  v16 = 0x80000001A2B444B0;
  if (qword_1EE67CD08)
  {
    v17 = (void *)sub_1A2AE340C();
    v18 = (void *)sub_1A2AE340C();
    v19 = (void *)sub_1A2AE340C();
    v20 = objc_msgSend(v15, sel_localizedStringForKey_value_table_, v17, v18, v19);

    v4 = sub_1A2AE343C();
    v16 = v21;

  }
  v22 = v0[26];
  v23 = v0[23];
  v33 = v0[24];
  v24 = v0[21];
  v30 = v0[22];
  v31 = v0[25];
  v26 = v0[19];
  v25 = v0[20];
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v26;
  v27[3] = v25;
  v27[4] = v32;
  v27[5] = v14;
  v27[6] = v4;
  v27[7] = v16;
  v0[12] = sub_1A2A46514;
  v0[13] = v27;
  v0[8] = MEMORY[0x1E0C809B0];
  v0[9] = 1107296256;
  v0[10] = sub_1A29FD800;
  v0[11] = &block_descriptor_316;
  v28 = _Block_copy(v0 + 8);
  swift_retain();
  sub_1A2AE3310();
  v0[17] = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
  sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  MEMORY[0x1A858703C](0, v22, v23, v28);
  _Block_release(v28);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v22, v33);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1A2A3F958()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (void *)v0[29];
  v2 = v1;
  v3 = v1;
  v4 = sub_1A2AE31C0();
  v5 = sub_1A2AE3964();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[29];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v25 = v8;
    v0[15] = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    v10 = sub_1A2AE3484();
    v0[16] = sub_1A296DA00(v10, v11, &v25);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A2830000, v4, v5, "Failed to fetch sharing name: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v8, -1, -1);
    MEMORY[0x1A85896E8](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[29];

  }
  v13 = v0[26];
  v22 = (id)v0[29];
  v23 = v0[25];
  v14 = v0[23];
  v24 = v0[24];
  v15 = v0[21];
  v21 = v0[22];
  v17 = v0[19];
  v16 = v0[20];
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v16;
  v0[6] = sub_1A2A464B0;
  v0[7] = v18;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1A29FD800;
  v0[5] = &block_descriptor_310;
  v19 = _Block_copy(v0 + 2);
  swift_retain();
  sub_1A2AE3310();
  v0[14] = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
  sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  MEMORY[0x1A858703C](0, v13, v14, v19);
  _Block_release(v19);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v13, v24);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

void sub_1A2A3FD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  id v7;

  v6 = (void *)sub_1A2AE340C();
  v7 = (id)sub_1A2AE340C();
  (*(void (**)(uint64_t, void *, id))(a5 + 16))(a5, v6, v7);

}

uint64_t AskToAirDropSenderController.fetchSharingName()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A3FE0C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A3FE30()
{
  uint64_t v0;
  id v1;

  v1 = sub_1A2A3A26C();
  return (*(uint64_t (**)(id))(v0 + 8))(v1);
}

uint64_t sub_1A2A3FFB0(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch();
}

uint64_t sub_1A2A3FFF8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A4001C()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  sub_1A2A3A26C();
  *(_QWORD *)(v0 + 40) = 0;

  v1 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, void *, _QWORD))v2)[2](v2, v1, 0);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A400D4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 40);

  v2 = (void *)sub_1A2AE2E9C();
  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, _QWORD, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t AskToAirDropReceiverController.ConnectionState.init(rawValue:)(unint64_t a1)
{
  return sub_1A2A44598(a1);
}

uint64_t sub_1A2A401C0()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

uint64_t sub_1A2A40204()
{
  return sub_1A2AE4018();
}

uint64_t sub_1A2A4022C()
{
  sub_1A2AE400C();
  sub_1A2AE4018();
  return sub_1A2AE4030();
}

unint64_t sub_1A2A4026C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1A2A44598(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1A2A4029C()
{
  sub_1A2A45460();
  return sub_1A2AE3604();
}

uint64_t sub_1A2A402F8()
{
  sub_1A2A45460();
  return sub_1A2AE35EC();
}

id AskToAirDropReceiverController.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_queue);
}

uint64_t AskToAirDropReceiverController.isNearbyDeviceClose.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose);
  swift_beginAccess();
  return *v1;
}

uint64_t AskToAirDropReceiverController.hasPendingOrActiveConnections.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections);
  swift_beginAccess();
  return *v1;
}

void sub_1A2A4049C(char *a1, uint64_t a2, char a3, _QWORD *a4, _QWORD *a5)
{
  char *v8;
  char *v9;
  void (*v10)(uint64_t);
  char *v11;
  uint64_t v12;

  v8 = &a1[*a4];
  swift_beginAccess();
  *v8 = a3;
  v9 = &a1[*a5];
  swift_beginAccess();
  v10 = *(void (**)(uint64_t))v9;
  if (*(_QWORD *)v9)
  {
    v11 = a1;
    v12 = sub_1A29DF9C8((uint64_t)v10);
    v10(v12);
    sub_1A297CC78((uint64_t)v10);

  }
}

uint64_t sub_1A2A40540(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  char v7;
  uint64_t v8;
  _BYTE *v9;
  void (**v10)(uint64_t);
  uint64_t result;
  void (*v12)(uint64_t);
  uint64_t v13;

  v7 = *a1;
  v8 = *a2;
  v9 = (_BYTE *)(*a2 + *a5);
  swift_beginAccess();
  *v9 = v7;
  v10 = (void (**)(uint64_t))(v8 + *a6);
  result = swift_beginAccess();
  v12 = *v10;
  if (*v10)
  {
    v13 = swift_retain();
    v12(v13);
    return sub_1A297CC78((uint64_t)v12);
  }
  return result;
}

uint64_t AskToAirDropReceiverController.isLegacyMode.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isLegacyMode);
  swift_beginAccess();
  return *v1;
}

uint64_t AskToAirDropReceiverController.nearbyDevicesDisplayName.getter()
{
  return sub_1A2A41E08(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDevicesDisplayName);
}

uint64_t AskToAirDropReceiverController.connectionState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A2A40790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  void (**v5)(uint64_t);
  void (*v6)(uint64_t);
  uint64_t v7;
  void (**v8)(uint64_t);
  uint64_t result;
  void (*v10)(uint64_t);
  uint64_t v11;

  v2 = v1;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState);
  swift_beginAccess();
  *v4 = a1;
  v5 = (void (**)(uint64_t))(v2
                                     + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler);
  swift_beginAccess();
  v6 = *v5;
  if (*v5)
  {
    v7 = swift_retain();
    v6(v7);
    sub_1A297CC78((uint64_t)v6);
  }
  v8 = (void (**)(uint64_t))(v2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler);
  result = swift_beginAccess();
  v10 = *v8;
  if (*v8)
  {
    v11 = swift_retain();
    v10(v11);
    return sub_1A297CC78((uint64_t)v10);
  }
  return result;
}

uint64_t AskToAirDropReceiverController.stateChangedHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler, (void (*)(_QWORD, _QWORD))sub_1A29DF9C8);
}

uint64_t AskToAirDropReceiverController.stateChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A40944@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A1BF10;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A409D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A1BF10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropReceiverController.stateChangedHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AskToAirDropReceiverController.connectionStateChangedHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler, (void (*)(_QWORD, _QWORD))sub_1A29DF9C8);
}

uint64_t AskToAirDropReceiverController.connectionStateChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A40BAC@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A1BF10;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A40C40(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A1BF10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropReceiverController.connectionStateChangedHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AskToAirDropReceiverController.pendingOrActiveConnectionsChangedHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler, (void (*)(_QWORD, _QWORD))sub_1A29DF9C8);
}

uint64_t AskToAirDropReceiverController.pendingOrActiveConnectionsChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A40E14@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A1BF10;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A40EA8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A1BF10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropReceiverController.pendingOrActiveConnectionsChangedHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AskToAirDropReceiverController.nearbyDeviceCloseChangedHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler, (void (*)(_QWORD, _QWORD))sub_1A29DF9C8);
}

uint64_t AskToAirDropReceiverController.nearbyDeviceCloseChangedHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A4107C@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A1B724;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A41110(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A1B724;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropReceiverController.nearbyDeviceCloseChangedHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t AskToAirDropReceiverController.errorHandler.getter()
{
  return sub_1A2A4123C(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler, (void (*)(_QWORD, _QWORD))sub_1A2A465A0);
}

uint64_t sub_1A2A4123C(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

void sub_1A2A4129C(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t AskToAirDropReceiverController.errorHandler.setter(uint64_t a1, uint64_t a2)
{
  return sub_1A2A41394(a1, a2, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler, (uint64_t (*)(uint64_t, uint64_t))sub_1A2A465A4);
}

uint64_t sub_1A2A41394(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t sub_1A2A413F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1A2A4543C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return sub_1A29DF9C8(v4);
}

uint64_t sub_1A2A41484(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A2A4540C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1A29DF9C8(v3);
  return sub_1A297CC78(v8);
}

uint64_t (*AskToAirDropReceiverController.errorHandler.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A2A4159C(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = a1;
  v4 = (void *)sub_1A2AE340C();
  v5 = objc_msgSend(v2, sel_initWithSuiteName_, v4);

  if (v5)
  {
    v6 = sub_1A2AE340C();
    v7 = objc_msgSend(v5, sel_BOOLForKey_, v6);

    v3 = (id)v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id AskToAirDropReceiverController.hasSeenPrivacyPrompt.getter()
{
  return sub_1A2A41688();
}

id sub_1A2A41688()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)sub_1A2AE340C();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

void sub_1A2A41758(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v10 = a1;
  v6 = (void *)sub_1A2AE340C();
  v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (v7)
  {
    v8 = sub_1A2AE340C();
    objc_msgSend(v7, sel_setBool_forKey_, a3, v8);

    v9 = (void *)v8;
  }
  else
  {
    v9 = v10;
  }

}

void AskToAirDropReceiverController.hasSeenPrivacyPrompt.setter(char a1)
{
  sub_1A2A4184C(a1);
}

void sub_1A2A4184C(char a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (id)sub_1A2AE340C();
    objc_msgSend(v4, sel_setBool_forKey_, a1 & 1, v5);

  }
}

void sub_1A2A41920(unsigned __int8 *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (void *)sub_1A2AE340C();
    v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
}

void sub_1A2A419E0(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;

  v1 = *a1;
  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (id)sub_1A2AE340C();
    objc_msgSend(v4, sel_setBool_forKey_, v1, v5);

  }
}

void (*AskToAirDropReceiverController.hasSeenPrivacyPrompt.modify(unsigned __int8 *a1))(unsigned __int8 *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (void *)sub_1A2AE340C();
    v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return sub_1A2A41B84;
}

void sub_1A2A41B84(unsigned __int8 *a1)
{
  sub_1A2A41BA0(a1);
}

void sub_1A2A41BA0(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *a1;
  v2 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v3 = (void *)sub_1A2AE340C();
  v5 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v5)
  {
    v4 = (void *)sub_1A2AE340C();
    objc_msgSend(v5, sel_setBool_forKey_, v1, v4);

  }
}

uint64_t AskToAirDropReceiverController.connectedNearbyDeviceNames.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

id sub_1A2A41D98()
{
  void *v0;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v0 = (void *)sub_1A2AE340C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AskToAirDropReceiverController.sharingName.getter()
{
  return sub_1A2A41E08(&OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName);
}

uint64_t sub_1A2A41E08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1A2A41E64(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = sub_1A2AE343C();
  v8 = v7;
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

void AskToAirDropReceiverController.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose] = 0;
  v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections] = 0;
  v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isLegacyMode] = 0;
  v1 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDevicesDisplayName];
  *v1 = 0;
  v1[1] = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState] = 0;
  v2 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler];
  *v3 = 0;
  v3[1] = 0;
  v4 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler];
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectedNearbyDeviceNames] = MEMORY[0x1E0DEE9D8];
  v7 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName];
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_privacyRemoteDeviceNames];
  *v8 = 0;
  v8[1] = 0xE000000000000000;

  sub_1A2AE3C58();
  __break(1u);
}

id AskToAirDropReceiverController.__allocating_init(queue:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AskToAirDropReceiverController.init(queue:)(a1);
}

id AskToAirDropReceiverController.init(queue:)(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  objc_super v32;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDropClient.Identifier();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose] = 0;
  v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections] = 0;
  v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isLegacyMode] = 0;
  v11 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDevicesDisplayName];
  *v11 = 0;
  v11[1] = 0xE000000000000000;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState] = 0;
  v12 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler];
  *v12 = 0;
  v12[1] = 0;
  v13 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler];
  *v14 = 0;
  v14[1] = 0;
  v15 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler];
  *v15 = 0;
  v15[1] = 0;
  v16 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_errorHandler];
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectedNearbyDeviceNames] = MEMORY[0x1E0DEE9D8];
  v17 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName];
  *v17 = 0;
  v17[1] = 0xE000000000000000;
  v18 = &v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_privacyRemoteDeviceNames];
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_queue] = a1;
  v19 = (void *)objc_opt_self();
  v20 = v2;
  v21 = a1;
  v22 = objc_msgSend(v19, sel_processInfo);
  v23 = objc_msgSend(v22, sel_processName);

  v24 = sub_1A2AE343C();
  v26 = v25;

  *v10 = v24;
  v10[1] = v26;
  v10[2] = 1;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for SFAirDropClient(0);
  swift_allocObject();
  *(_QWORD *)&v20[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_airDropClient] = SFAirDropClient.init(identifier:)((uint64_t)v10);

  v32.receiver = v20;
  v32.super_class = ObjectType;
  v27 = objc_msgSendSuper2(&v32, sel_init);
  v28 = sub_1A2AE36E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v7, 1, 1, v28);
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v27;
  v30 = v27;
  sub_1A297AC0C((uint64_t)v7, (uint64_t)&unk_1EE67D678, (uint64_t)v29);

  swift_release();
  return v30;
}

uint64_t sub_1A2A4230C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[16] = a4;
  v4[17] = swift_getObjectType();
  v5 = sub_1A2AE3304();
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v6 = sub_1A2AE3334();
  v4[21] = v6;
  v4[22] = *(_QWORD *)(v6 - 8);
  v4[23] = swift_task_alloc();
  v7 = sub_1A2AE31D8();
  v4[24] = v7;
  v4[25] = *(_QWORD *)(v7 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D40);
  v4[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A423F0()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  if (qword_1EE675D68 != -1)
    swift_once();
  __swift_project_value_buffer(v0[24], (uint64_t)qword_1EE675D50);
  v1 = sub_1A2AE31C0();
  v2 = sub_1A2AE3964();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1A2830000, v1, v2, "Registering for state updates", v3, 2u);
    MEMORY[0x1A85896E8](v3, -1, -1);
  }
  v4 = v0[16];

  v0[29] = *(_QWORD *)(v4 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A424E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  if (qword_1EE675F40 != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(int **)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = __swift_project_value_buffer(v4, (uint64_t)qword_1EE676388);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 240) = v7;
  v7(v2, v6, v4);
  v8 = swift_allocObject();
  swift_weakInit();
  *v1 = 0xD000000000000016;
  v1[1] = 0x80000001A2B47390;
  v9 = v3[11];
  *(_DWORD *)(v0 + 296) = v9;
  v10 = (char *)v1 + v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 248) = v11;
  v11(v10, v2, v4);
  v12 = v3[12];
  *(_DWORD *)(v0 + 300) = v12;
  v13 = (_QWORD *)((char *)v1 + v12);
  *v13 = &unk_1EE67D7E8;
  v13[1] = v8;
  v14 = v3[13];
  *(_DWORD *)(v0 + 304) = v14;
  v15 = (_QWORD *)((char *)v1 + v14);
  *v15 = 0;
  v15[1] = 0;
  return swift_task_switch();
}

uint64_t sub_1A2A42614()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v19)(uint64_t);

  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  v1 = *(char **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = (uint64_t *)&v1[*(int *)(v0 + 304)];
  v5 = &v1[*(int *)(v0 + 300)];
  v6 = *(_QWORD *)v1;
  v7 = *((_QWORD *)v1 + 1);
  (*(void (**)(uint64_t, char *, uint64_t))(v0 + 240))(v2, &v1[*(int *)(v0 + 296)], v3);
  v8 = *((_QWORD *)v5 + 1);
  v17 = *(_QWORD *)v5;
  v9 = *v4;
  v10 = v4[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D38);
  v11 = swift_allocObject();
  *(_QWORD *)(v0 + 256) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1A29DF9C8(v9);
  swift_defaultActor_initialize();
  v12 = (_QWORD *)(v11 + qword_1EE6ADCE8);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)(v11 + 112) = v6;
  *(_QWORD *)(v11 + 120) = v7;
  v18(v11 + qword_1EE6ADCC0, v2, v3);
  v13 = (_QWORD *)(v11 + qword_1EE6ADCF8);
  *v13 = v17;
  v13[1] = v8;
  v14 = (uint64_t *)(v11 + qword_1EE6ADCF0);
  *v14 = v9;
  v14[1] = v10;
  sub_1A296F108((uint64_t)v1, &qword_1EE675D40);
  *(_QWORD *)(v0 + 264) = OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_queue;
  v19 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D7F0 + dword_1EE67D7F0);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v15;
  *v15 = v0;
  v15[1] = sub_1A2A427AC;
  return v19(v0 + 16);
}

uint64_t sub_1A2A427AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 288) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A42810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 40);
    v18 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 56);
    v17 = *(_QWORD *)(v0 + 48);
    v10 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 152);
    v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = v2 & 1;
    *(_DWORD *)(v6 + 25) = *(_DWORD *)(v0 + 308);
    *(_DWORD *)(v6 + 28) = *(_DWORD *)(v0 + 311);
    *(_QWORD *)(v6 + 32) = v1;
    *(_QWORD *)(v6 + 40) = v18;
    *(_QWORD *)(v6 + 48) = v3;
    *(_QWORD *)(v6 + 56) = v17;
    *(_QWORD *)(v6 + 64) = v16;
    *(_QWORD *)(v6 + 72) = v4;
    *(_QWORD *)(v0 + 96) = sub_1A2A45928;
    *(_QWORD *)(v0 + 104) = v6;
    *(_QWORD *)(v0 + 64) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 72) = 1107296256;
    *(_QWORD *)(v0 + 80) = sub_1A29FD800;
    *(_QWORD *)(v0 + 88) = &block_descriptor_288;
    v7 = _Block_copy((const void *)(v0 + 64));
    swift_retain();
    sub_1A2A45938(v2, v1);
    sub_1A2AE3310();
    *(_QWORD *)(v0 + 120) = MEMORY[0x1E0DEE9D8];
    sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
    sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
    sub_1A2AE3AC0();
    MEMORY[0x1A858703C](0, v10, v11, v7);
    _Block_release(v7);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v10, v15);
    swift_release();
    swift_release();
    sub_1A2A45974(v2, v1);
    v19 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D7F0 + dword_1EE67D7F0);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v8;
    *v8 = v0;
    v8[1] = sub_1A2A42B24;
    return v19(v0 + 16);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A2A42B24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 288) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A42B88()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 288);
  __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
  swift_willThrowTypedImpl();
  return swift_task_switch();
}

uint64_t sub_1A2A42BE8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AskToAirDropReceiverController.connectToAllNearbyDevices()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState];
  swift_beginAccess();
  *(_QWORD *)v5 = 1;
  v6 = &v1[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler];
  swift_beginAccess();
  v7 = *(void (**)(uint64_t))v6;
  if (*(_QWORD *)v6)
  {
    v8 = swift_retain();
    v7(v8);
    sub_1A297CC78((uint64_t)v7);
  }
  v9 = &v1[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler];
  swift_beginAccess();
  v10 = *(void (**)(uint64_t))v9;
  if (*(_QWORD *)v9)
  {
    v11 = swift_retain();
    v10(v11);
    sub_1A297CC78((uint64_t)v10);
  }
  v12 = sub_1A2AE36E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v1;
  v14 = v1;
  sub_1A297AC0C((uint64_t)v4, (uint64_t)&unk_1EE67D688, (uint64_t)v13);
  swift_release();
}

uint64_t sub_1A2A42DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_1A2A42E04()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1EE675D68 != -1)
    swift_once();
  v1 = sub_1A2AE31D8();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EE675D50);
  v2 = sub_1A2AE31C0();
  v3 = sub_1A2AE3964();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A2830000, v2, v3, "Requesting connect to all nearby devices", v4, 2u);
    MEMORY[0x1A85896E8](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 16);

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A42EFC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EE67DC90 + dword_1EE67DC90);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A42F5C;
  return v3();
}

uint64_t sub_1A2A42F5C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A42FC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A42FCC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AskToAirDropReceiverController.disconnectFromAllNearbyDevices()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState];
  swift_beginAccess();
  *(_QWORD *)v5 = 3;
  v6 = &v1[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler];
  swift_beginAccess();
  v7 = *(void (**)(uint64_t))v6;
  if (*(_QWORD *)v6)
  {
    v8 = swift_retain();
    v7(v8);
    sub_1A297CC78((uint64_t)v7);
  }
  v9 = &v1[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler];
  swift_beginAccess();
  v10 = *(void (**)(uint64_t))v9;
  if (*(_QWORD *)v9)
  {
    v11 = swift_retain();
    v10(v11);
    sub_1A297CC78((uint64_t)v10);
  }
  v12 = sub_1A2AE36E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v1;
  v14 = v1;
  sub_1A297AC0C((uint64_t)v4, (uint64_t)&unk_1EE67D698, (uint64_t)v13);
  swift_release();
}

uint64_t sub_1A2A43180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_1A2A43198()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1EE675D68 != -1)
    swift_once();
  v1 = sub_1A2AE31D8();
  __swift_project_value_buffer(v1, (uint64_t)qword_1EE675D50);
  v2 = sub_1A2AE31C0();
  v3 = sub_1A2AE3964();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1A2830000, v2, v3, "Requesting disconnect to all nearby devices", v4, 2u);
    MEMORY[0x1A85896E8](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 16);

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_airDropClient);
  return swift_task_switch();
}

uint64_t sub_1A2A43290()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EE67DC88 + dword_1EE67DC88);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3();
}

uint64_t sub_1A2A432F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AskToAirDropReceiverController.fetchPrivacyPromptInformation(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_1A2A43608(a1, a2, (uint64_t)&unk_1E4837660, (uint64_t)sub_1A2A44D04, (uint64_t)&block_descriptor_5);
}

uint64_t sub_1A2A433A4(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1A8589784](v3);
  if (!v4)
    return a2(0, 0xE000000000000000);
  v5 = (char *)v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7D8);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A2B02520;
  v8 = *(_QWORD *)&v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_privacyRemoteDeviceNames];
  v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_privacyRemoteDeviceNames + 8];
  v9 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
  v10 = sub_1A2A45830();
  *(_QWORD *)(v6 + 64) = v10;
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  v11 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName];
  swift_beginAccess();
  v12 = *(_QWORD *)v11;
  v13 = *((_QWORD *)v11 + 1);
  *(_QWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 104) = v10;
  *(_QWORD *)(v6 + 72) = v12;
  *(_QWORD *)(v6 + 80) = v13;
  v14 = qword_1EE67AA58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  v15 = (void *)qword_1EE67CD08;
  if (qword_1EE67CD08)
  {
    v16 = (void *)sub_1A2AE340C();
    v17 = (void *)sub_1A2AE340C();
    v18 = (void *)sub_1A2AE340C();
    v19 = objc_msgSend(v15, sel_localizedStringForKey_value_table_, v16, v17, v18);

    sub_1A2AE343C();
  }
  swift_bridgeObjectRetain();
  v20 = sub_1A2AE3448();
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2(v20, v22);

  return swift_bridgeObjectRelease();
}

uint64_t AskToAirDropReceiverController.fetchSharingName(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_1A2A43608(a1, a2, (uint64_t)&unk_1E4837688, (uint64_t)sub_1A2A44D58, (uint64_t)&block_descriptor_35);
}

uint64_t sub_1A2A43608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v20 = a5;
  v9 = sub_1A2AE3304();
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1A2AE3334();
  v12 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_queue);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A29FD800;
  aBlock[3] = v20;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1A2AE3310();
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4(&qword_1EE675D70, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D78);
  sub_1A296E5E4((unint64_t *)&unk_1EE675D80, &qword_1EE675D78, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  MEMORY[0x1A858703C](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);
  swift_release();
  return swift_release();
}

uint64_t sub_1A2A43838(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1A8589784](v3);
  if (!v4)
    return a2(0, 0xE000000000000000);
  v5 = (void *)v4;
  v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName);
  swift_beginAccess();
  v8 = *v6;
  v7 = v6[1];
  swift_bridgeObjectRetain();
  a2(v8, v7);

  return swift_bridgeObjectRelease();
}

void sub_1A2A43904(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v9;
  uint64_t v10;
  id v11;

  v9 = _Block_copy(aBlock);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v11 = a1;
  a6(a5, v10);
  swift_release();

}

void sub_1A2A43990(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char *v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL *v26;
  char *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1A8589784](v3);
  if (v4)
  {
    v5 = (char *)v4;
    if (qword_1EE675D68 != -1)
      swift_once();
    v6 = sub_1A2AE31D8();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EE675D50);
    sub_1A2A459B0(a2);
    sub_1A2A459B0(a2);
    v7 = sub_1A2AE31C0();
    v8 = sub_1A2AE3964();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v70[0] = v10;
      *(_DWORD *)v9 = 136315138;
      sub_1A2A459B0(a2);
      v11 = sub_1A2AE3484();
      sub_1A296DA00(v11, v12, v70);
      sub_1A2AE3A60();
      swift_bridgeObjectRelease();
      sub_1A2A459F8(a2);
      sub_1A2A459F8(a2);
      _os_log_impl(&dword_1A2830000, v7, v8, "Received state update: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A85896E8](v10, -1, -1);
      MEMORY[0x1A85896E8](v9, -1, -1);
    }
    else
    {
      sub_1A2A459F8(a2);
      sub_1A2A459F8(a2);
    }

    v13 = *(_BYTE *)a2;
    v14 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose];
    swift_beginAccess();
    *v14 = v13;
    v15 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler];
    swift_beginAccess();
    v16 = *(void (**)(uint64_t))v15;
    if (*(_QWORD *)v15)
    {
      v17 = swift_retain();
      v16(v17);
      sub_1A297CC78((uint64_t)v16);
    }
    v18 = *(_QWORD **)(a2 + 8);
    v19 = sub_1A2A45A3C((uint64_t)v18);
    v21 = v20;
    v22 = (uint64_t *)&v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDevicesDisplayName];
    swift_beginAccess();
    *v22 = v19;
    v22[1] = v21;
    swift_bridgeObjectRelease();
    v23 = v22[1];
    v24 = *v22 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0x2000000000000000) != 0)
      v24 = HIBYTE(v23) & 0xF;
    v25 = v24 != 0;
    v26 = (BOOL *)&v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections];
    swift_beginAccess();
    *v26 = v25;
    v27 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler];
    swift_beginAccess();
    v28 = *(void (**)(uint64_t))v27;
    if (*(_QWORD *)v27)
    {
      v29 = swift_retain();
      v28(v29);
      sub_1A297CC78((uint64_t)v28);
    }
    v30 = *(_QWORD *)(a2 + 24);
    v31 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState];
    swift_beginAccess();
    *(_QWORD *)v31 = v30;
    v32 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionStateChangedHandler];
    swift_beginAccess();
    v33 = *(void (**)(uint64_t))v32;
    if (*(_QWORD *)v32)
    {
      v34 = swift_retain();
      v33(v34);
      sub_1A297CC78((uint64_t)v33);
    }
    v35 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_stateChangedHandler];
    swift_beginAccess();
    v36 = *(void (**)(uint64_t))v35;
    if (*(_QWORD *)v35)
    {
      v37 = swift_retain();
      v36(v37);
      sub_1A297CC78((uint64_t)v36);
    }
    v68 = v35;
    v38 = sub_1A2A45CBC(v18);
    v39 = (uint64_t *)&v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_privacyRemoteDeviceNames];
    *v39 = v38;
    v39[1] = v40;
    swift_bridgeObjectRelease();
    v41 = *(_QWORD *)(a2 + 16);
    v71 = v41;
    v42 = *(_QWORD *)(v41 + 16);
    v43 = MEMORY[0x1E0DEE9D8];
    if (v42)
    {
      v66 = a2;
      v67 = v5;
      v69 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1A29BE308(0, v42, 0);
      v43 = v69;
      v44 = (uint64_t *)(v41 + 40);
      do
      {
        v46 = *(v44 - 1);
        v45 = *v44;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7D8);
        v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = xmmword_1A2AFED80;
        *(_QWORD *)(v47 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v47 + 64) = sub_1A2A45830();
        *(_QWORD *)(v47 + 32) = v46;
        *(_QWORD *)(v47 + 40) = v45;
        v48 = qword_1EE67AA58;
        swift_bridgeObjectRetain_n();
        if (v48 != -1)
          swift_once();
        v49 = (void *)qword_1EE67CD08;
        if (qword_1EE67CD08)
        {
          v50 = (void *)sub_1A2AE340C();
          v51 = (void *)sub_1A2AE340C();
          v52 = (void *)sub_1A2AE340C();
          v53 = objc_msgSend(v49, sel_localizedStringForKey_value_table_, v50, v51, v52);

          sub_1A2AE343C();
        }
        swift_bridgeObjectRetain();
        v54 = sub_1A2AE3448();
        v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v58 = *(_QWORD *)(v69 + 16);
        v57 = *(_QWORD *)(v69 + 24);
        if (v58 >= v57 >> 1)
          sub_1A29BE308(v57 > 1, v58 + 1, 1);
        v44 += 2;
        *(_QWORD *)(v69 + 16) = v58 + 1;
        v59 = v69 + 16 * v58;
        *(_QWORD *)(v59 + 32) = v54;
        *(_QWORD *)(v59 + 40) = v56;
        --v42;
      }
      while (v42);
      sub_1A2A463C4((uint64_t)&v71);
      a2 = v66;
      v5 = v67;
    }
    v60 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectedNearbyDeviceNames];
    swift_beginAccess();
    *(_QWORD *)v60 = v43;
    swift_bridgeObjectRelease();
    v61 = *(_QWORD *)(a2 + 32);
    v62 = *(_QWORD *)(a2 + 40);
    v63 = &v5[OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_sharingName];
    swift_beginAccess();
    *(_QWORD *)v63 = v61;
    *((_QWORD *)v63 + 1) = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v64 = *(void (**)(uint64_t))v68;
    if (*(_QWORD *)v68)
    {
      v65 = swift_retain();
      v64(v65);
      sub_1A297CC78((uint64_t)v64);
    }

  }
}

id _s7Sharing28AskToAirDropSenderControllerCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t AskToAirDropReceiverController.ConnectionState.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x657463656E6E6F43;
  switch(a1)
  {
    case 0:
      result = 1701602377;
      break;
    case 1:
      result = 0x697463656E6E6F43;
      break;
    case 2:
      return result;
    case 3:
      result = 0x656E6E6F63736944;
      break;
    default:
      result = sub_1A2AE3F28();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1A2A44250()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x657463656E6E6F43;
  switch(*v0)
  {
    case 0:
      result = 1701602377;
      break;
    case 1:
      result = 0x697463656E6E6F43;
      break;
    case 2:
      return result;
    case 3:
      result = 0x656E6E6F63736944;
      break;
    default:
      result = sub_1A2AE3F28();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1A2A4430C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1A2972038;
  return v6();
}

uint64_t sub_1A2A44360(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A2972038;
  return v7();
}

uint64_t sub_1A2A443B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A2AE36E8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A2AE36DC();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A296F108(a1, &qword_1ECEFB6D0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A2AE3688();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1A2A44500@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *a2 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A2A44548(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = sub_1A2AE3A60();
  *a1 = v5;
  return result;
}

unint64_t sub_1A2A44598(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

id sub_1A2A445A8(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  uint64_t aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void *v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  int out_token;
  objc_super v35;
  uint64_t v36;

  v2 = v1;
  v36 = *MEMORY[0x1E0C80C00];
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = type metadata accessor for SFAirDropClient.Identifier();
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount] = 0;
  v8 = &v2[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCountChangedHandler];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v2[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_didStopHandler];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_queue] = a1;
  v10 = (void *)objc_opt_self();
  v11 = v2;
  v12 = a1;
  v13 = objc_msgSend(v10, sel_processInfo);
  v14 = objc_msgSend(v13, sel_processName);

  v15 = sub_1A2AE343C();
  v17 = v16;

  *v7 = v15;
  v7[1] = v17;
  v7[2] = 1;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for SFAirDropClient(0);
  swift_allocObject();
  *(_QWORD *)&v11[OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_airDropClient] = SFAirDropClient.init(identifier:)((uint64_t)v7);

  v35.receiver = v11;
  v35.super_class = ObjectType;
  v18 = objc_msgSendSuper2(&v35, sel_init);
  out_token = 0;
  v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v32 = sub_1A2A46588;
  v33 = v19;
  v20 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v29 = 1107296256;
  v30 = sub_1A29C0BCC;
  v31 = &block_descriptor_343;
  v21 = _Block_copy(&aBlock);
  v22 = v12;
  v23 = v18;
  swift_release();
  notify_register_dispatch("IncreaseNearbyCount", &out_token, v22, v21);
  _Block_release(v21);

  v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v32 = sub_1A2A46590;
  v33 = v24;
  aBlock = v20;
  v29 = 1107296256;
  v30 = sub_1A29C0BCC;
  v31 = &block_descriptor_347;
  v25 = _Block_copy(&aBlock);
  v26 = v22;
  swift_release();
  notify_register_dispatch("DecreaseNearbyCount", &out_token, v26, v25);

  _Block_release(v25);
  return v23;
}

uint64_t sub_1A2A448A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECEFB6D0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A2AE36E8();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v8 = v0;
  if (v7 == 1)
  {
    sub_1A296F108((uint64_t)v3, &qword_1ECEFB6D0);
  }
  else
  {
    sub_1A2AE36DC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = sub_1A2AE3688();
      v11 = v10;
      swift_unknownObjectRelease();
      if (v11 | v9)
      {
        v13[0] = 0;
        v13[1] = 0;
        v13[2] = v9;
        v13[3] = v11;
      }
    }
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A2A44A68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2972038;
  return sub_1A2A3E14C(a1, v4, v5, v6);
}

uint64_t sub_1A2A44AD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2972038;
  return sub_1A2A3ED24(a1, v4, v5, v6);
}

uint64_t sub_1A2A44B48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1A2972038;
  return sub_1A2A3F33C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1A2A44BCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2972038;
  return sub_1A2A4230C(a1, v4, v5, v6);
}

uint64_t sub_1A2A44C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2972038;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1A2A44CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2972038;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1A2A44D04()
{
  uint64_t v0;

  return sub_1A2A433A4(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t, unint64_t))(v0 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t objectdestroy_27Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A44D58()
{
  uint64_t v0;

  return sub_1A2A43838(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t, unint64_t))(v0 + 24));
}

unint64_t sub_1A2A44D68()
{
  unint64_t result;

  result = qword_1EE67D6A0;
  if (!qword_1EE67D6A0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for AskToAirDropReceiverController.ConnectionState, &type metadata for AskToAirDropReceiverController.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1EE67D6A0);
  }
  return result;
}

uint64_t sub_1A2A44DAC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1A2A44DFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC7Sharing28AskToAirDropSenderController_nearbyDeviceCount);
  swift_beginAccess();
  *v3 = v2;
  return sub_1A2A3D49C();
}

void sub_1A2A44E54(unsigned __int8 *a1@<X8>)
{
  sub_1A2A41920(a1);
}

void sub_1A2A44E80(unsigned __int8 *a1)
{
  sub_1A2A419E0(a1);
}

uint64_t sub_1A2A44EBC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_42Tm(a1, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose, a2);
}

uint64_t sub_1A2A44EC8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A40540(a1, a2, a3, a4, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_isNearbyDeviceClose, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_nearbyDeviceCloseChangedHandler);
}

uint64_t sub_1A2A44EEC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_42Tm(a1, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections, a2);
}

uint64_t keypath_get_42Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1A2A44F44(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1A2A40540(a1, a2, a3, a4, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_hasPendingOrActiveConnections, &OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_pendingOrActiveConnectionsChangedHandler);
}

uint64_t sub_1A2A44F68@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC7Sharing30AskToAirDropReceiverController_connectionState);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1A2A44FB8(uint64_t *a1)
{
  return sub_1A2A40790(*a1);
}

void sub_1A2A45004(unsigned __int8 *a1@<X8>)
{
  sub_1A2A41920(a1);
}

void sub_1A2A45030(unsigned __int8 *a1)
{
  sub_1A2A419E0(a1);
}

uint64_t type metadata accessor for AskToAirDropSenderController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AskToAirDropSenderController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AskToAirDropSenderController.__allocating_init(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for AskToAirDropReceiverController()
{
  return objc_opt_self();
}

uint64_t method lookup function for AskToAirDropReceiverController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AskToAirDropReceiverController.__allocating_init(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

ValueMetadata *type metadata accessor for AskToAirDropReceiverController.ConnectionState()
{
  return &type metadata for AskToAirDropReceiverController.ConnectionState;
}

void sub_1A2A450D8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (id)sub_1A2AE340C();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_1A2A45118()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1A2A45128()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1A2A45154()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A2972038;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE67D6A8 + dword_1EE67D6A8))(v2, v3);
}

uint64_t sub_1A2A451BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A2972038;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EE67D6B8 + dword_1EE67D6B8))(v2, v3, v4);
}

uint64_t objectdestroy_105Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A45264(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A2972038;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EE67D6C8 + dword_1EE67D6C8))(a1, v4, v5, v6);
}

uint64_t sub_1A2A452E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A4530C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A2972038;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE67D6D8 + dword_1EE67D6D8))(a1, v4);
}

uint64_t sub_1A2A4537C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A2A453A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1A2A3FD8C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A453E0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A2A45404()
{
  uint64_t v0;

  sub_1A2A3D6AC(v0);
}

uint64_t sub_1A2A4540C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1A2A4543C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

unint64_t sub_1A2A45460()
{
  unint64_t result;

  result = qword_1EE6764B0;
  if (!qword_1EE6764B0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for AskToAirDropReceiverController.ConnectionState, &type metadata for AskToAirDropReceiverController.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1EE6764B0);
  }
  return result;
}

_QWORD *sub_1A2A454A4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  char v6;

  result = sub_1A2A3A734(*a1, *(objc_class **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 40), *(_QWORD *)(v2 + 48));
  if (!v3)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v6;
  }
  return result;
}

uint64_t sub_1A2A454DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1A2A45500(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1A2A45518(a1, a2 & 1);
}

void sub_1A2A45518(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

id sub_1A2A45524(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1A2A4553C(result, a2 & 1);
  return result;
}

id sub_1A2A4553C(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1A2A45548()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    sub_1A2A45518(*(id *)(v0 + 16), v1 & 1);
  return swift_deallocObject();
}

void sub_1A2A4557C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;

  sub_1A2A3AA0C(a1, a2, a3, a4, a5, v5);
}

unint64_t sub_1A2A45584()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EE67D6F8;
  if (!qword_1EE67D6F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67D6F0);
    v2 = sub_1A2A455E8();
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE67D6F8);
  }
  return result;
}

unint64_t sub_1A2A455E8()
{
  unint64_t result;

  result = qword_1EE67D700;
  if (!qword_1EE67D700)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFUserDefaultDescription, &type metadata for SFUserDefaultDescription);
    atomic_store(result, (unint64_t *)&qword_1EE67D700);
  }
  return result;
}

unint64_t sub_1A2A4562C()
{
  unint64_t result;

  result = qword_1EE6761C0[0];
  if (!qword_1EE6761C0[0])
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for VoidParameters, &type metadata for VoidParameters);
    atomic_store(result, qword_1EE6761C0);
  }
  return result;
}

unint64_t sub_1A2A45674()
{
  unint64_t result;

  result = qword_1EE67D708;
  if (!qword_1EE67D708)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.EndpointMetadata, &type metadata for SFAirDrop.EndpointMetadata);
    atomic_store(result, (unint64_t *)&qword_1EE67D708);
  }
  return result;
}

unint64_t sub_1A2A456C0()
{
  unint64_t result;

  result = qword_1EE674948[0];
  if (!qword_1EE674948[0])
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFInterventionResponse, &type metadata for SFInterventionResponse);
    atomic_store(result, qword_1EE674948);
  }
  return result;
}

unint64_t sub_1A2A45704()
{
  unint64_t result;

  result = qword_1EE67D720;
  if (!qword_1EE67D720)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFInterventionWorkflow, &type metadata for SFInterventionWorkflow);
    atomic_store(result, (unint64_t *)&qword_1EE67D720);
  }
  return result;
}

unint64_t sub_1A2A4574C()
{
  unint64_t result;

  result = qword_1EE6746A8;
  if (!qword_1EE6746A8)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for VoidResponse, &type metadata for VoidResponse);
    atomic_store(result, (unint64_t *)&qword_1EE6746A8);
  }
  return result;
}

unint64_t sub_1A2A4579C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EE67D768;
  if (!qword_1EE67D768)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6745C8);
    v2 = sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EE67D768);
  }
  return result;
}

unint64_t sub_1A2A45830()
{
  unint64_t result;

  result = qword_1EE67D7E0;
  if (!qword_1EE67D7E0)
  {
    result = MEMORY[0x1A85895EC](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE67D7E0);
  }
  return result;
}

uint64_t sub_1A2A45874()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A2A45898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A2971EBC;
  return sub_1A2A52F0C(a1, v1);
}

uint64_t sub_1A2A458EC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1A2A45928()
{
  uint64_t v0;

  sub_1A2A43990(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_1A2A45938(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A2A45974(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A2A459B0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A2A459F8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A2A45A3C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
    {
      if (qword_1EE67AA58 != -1)
        swift_once();
      v1 = 0xD000000000000016;
      v2 = (void *)qword_1EE67CD08;
      if (qword_1EE67CD08)
      {
        v3 = (void *)sub_1A2AE340C();
        v4 = (void *)sub_1A2AE340C();
        v5 = (void *)sub_1A2AE340C();
        v6 = objc_msgSend(v2, sel_localizedStringForKey_value_table_, v3, v4, v5);

        v1 = sub_1A2AE343C();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7D8);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1A2AFED80;
      v8 = MEMORY[0x1E0DEB490];
      *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEB418];
      *(_QWORD *)(v7 + 64) = v8;
      *(_QWORD *)(v7 + 32) = v1;
      if (qword_1EE67AA58 != -1)
        swift_once();
      v9 = (void *)qword_1EE67CD08;
      if (qword_1EE67CD08)
      {
        v10 = (void *)sub_1A2AE340C();
        v11 = (void *)sub_1A2AE340C();
        v12 = (void *)sub_1A2AE340C();
        v13 = objc_msgSend(v9, sel_localizedStringForKey_value_table_, v10, v11, v12);

        sub_1A2AE343C();
      }
      swift_bridgeObjectRetain();
      v1 = sub_1A2AE3448();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t sub_1A2A45CBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;

  v1 = a1[2];
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7D8);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1A2AFED80;
    *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEA968];
    v4 = sub_1A2A45830();
    *(_QWORD *)(v3 + 64) = v4;
    v5 = a1[5];
    *(_QWORD *)(v3 + 32) = a1[4];
    *(_QWORD *)(v3 + 40) = v5;
    v6 = qword_1EE67AA58;
    swift_bridgeObjectRetain();
    if (v6 != -1)
      swift_once();
    v7 = (void *)qword_1EE67CD08;
    if (qword_1EE67CD08)
    {
      v8 = (void *)sub_1A2AE340C();
      v9 = (void *)sub_1A2AE340C();
      v10 = (void *)sub_1A2AE340C();
      v11 = objc_msgSend(v7, sel_localizedStringForKey_value_table_, v8, v9, v10);

      sub_1A2AE343C();
    }
    swift_bridgeObjectRetain();
    v12 = sub_1A2AE3448();
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = swift_allocObject();
    v16 = v15;
    *(_OWORD *)(v15 + 16) = xmmword_1A2AFED80;
    if (v1 == 1)
    {
      *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v15 + 64) = v4;
      *(_QWORD *)(v15 + 32) = v12;
      *(_QWORD *)(v15 + 40) = v14;
      v17 = (void *)qword_1EE67CD08;
      if (qword_1EE67CD08)
      {
LABEL_18:
        v36 = (void *)sub_1A2AE340C();
        v37 = (void *)sub_1A2AE340C();
        v38 = (void *)sub_1A2AE340C();
        v39 = objc_msgSend(v17, sel_localizedStringForKey_value_table_, v36, v37, v38);

        sub_1A2AE343C();
      }
    }
    else
    {
      *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v15 + 64) = v4;
      v18 = a1[7];
      *(_QWORD *)(v16 + 32) = a1[6];
      *(_QWORD *)(v16 + 40) = v18;
      v19 = (void *)qword_1EE67CD08;
      if (qword_1EE67CD08)
      {
        swift_bridgeObjectRetain();
        v20 = (void *)sub_1A2AE340C();
        v21 = (void *)sub_1A2AE340C();
        v22 = (void *)sub_1A2AE340C();
        v23 = objc_msgSend(v19, sel_localizedStringForKey_value_table_, v20, v21, v22);

        sub_1A2AE343C();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      v24 = sub_1A2AE3448();
      v26 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v1 != 2)
      {
        if (v1 == 3)
        {
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_1A2B02520;
          v28 = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v27 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v27 + 64) = v4;
          *(_QWORD *)(v27 + 32) = v12;
          *(_QWORD *)(v27 + 40) = v14;
          *(_QWORD *)(v27 + 96) = v28;
          *(_QWORD *)(v27 + 104) = v4;
          *(_QWORD *)(v27 + 72) = v24;
          *(_QWORD *)(v27 + 80) = v26;
          v29 = (void *)qword_1EE67CD08;
          if (qword_1EE67CD08)
          {
            v30 = (void *)sub_1A2AE340C();
            v31 = (void *)sub_1A2AE340C();
            v32 = (void *)sub_1A2AE340C();
            v33 = objc_msgSend(v29, sel_localizedStringForKey_value_table_, v30, v31, v32);

            sub_1A2AE343C();
          }
        }
        else
        {
          v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_1A2B02510;
          v41 = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v40 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v40 + 64) = v4;
          *(_QWORD *)(v40 + 32) = v12;
          *(_QWORD *)(v40 + 40) = v14;
          *(_QWORD *)(v40 + 96) = v41;
          *(_QWORD *)(v40 + 104) = v4;
          v42 = MEMORY[0x1E0DEB418];
          *(_QWORD *)(v40 + 72) = v24;
          *(_QWORD *)(v40 + 80) = v26;
          v43 = MEMORY[0x1E0DEB490];
          *(_QWORD *)(v40 + 136) = v42;
          *(_QWORD *)(v40 + 144) = v43;
          *(_QWORD *)(v40 + 112) = v1 - 2;
          v44 = (void *)qword_1EE67CD08;
          if (qword_1EE67CD08)
          {
            v45 = (void *)sub_1A2AE340C();
            v46 = (void *)sub_1A2AE340C();
            v47 = (void *)sub_1A2AE340C();
            v48 = objc_msgSend(v44, sel_localizedStringForKey_value_table_, v45, v46, v47);

            sub_1A2AE343C();
          }
        }
        goto LABEL_22;
      }
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_1A2B02520;
      v35 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v34 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v34 + 64) = v4;
      *(_QWORD *)(v34 + 32) = v12;
      *(_QWORD *)(v34 + 40) = v14;
      *(_QWORD *)(v34 + 96) = v35;
      *(_QWORD *)(v34 + 104) = v4;
      *(_QWORD *)(v34 + 72) = v24;
      *(_QWORD *)(v34 + 80) = v26;
      v17 = (void *)qword_1EE67CD08;
      if (qword_1EE67CD08)
        goto LABEL_18;
    }
LABEL_22:
    swift_bridgeObjectRetain();
    v1 = sub_1A2AE3448();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1A2A463C4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1A2A463EC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  char v7;

  result = sub_1A2A3A53C(*a1, *(objc_class **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 40), *(_QWORD *)(v2 + 48));
  if (!v3)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v7;
  }
  return result;
}

void sub_1A2A46424(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_1A2A4643C(a1, a2, a3 & 1);
}

void sub_1A2A4643C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

id sub_1A2A4644C(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1A2A46464(result, a2, a3 & 1);
  return result;
}

id sub_1A2A46464(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1A2A46474()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    sub_1A2A4643C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  return swift_deallocObject();
}

void sub_1A2A464A8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;

  sub_1A2A3A918(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1A2A464B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, unint64_t))(v0 + 16))(0, 0xE000000000000000, 0, 0xE000000000000000);
}

uint64_t sub_1A2A464E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A2A46514()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void sub_1A2A46540()
{
  uint64_t v0;

  sub_1A2A3F188(v0);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_1A2A46588(uint64_t a1)
{
  uint64_t v1;

  sub_1A2A3DFEC(a1, v1);
}

void sub_1A2A46590(uint64_t a1)
{
  uint64_t v1;

  sub_1A2A3E070(a1, v1);
}

uint64_t sub_1A2A466C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(void);
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v2 = v1;
  v4 = sub_1A2AE2F44();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v36 - v9;
  v11 = type metadata accessor for SFSecurityScopedURL(0);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = MEMORY[0x1E0DEE9D8];
  if (v16)
  {
    v41 = v13;
    v46 = MEMORY[0x1E0DEE9D8];
    sub_1A29BE398(0, v16, 0);
    v18 = (char *)(a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
    v37 = *(_QWORD *)(v5 + 72);
    v38 = v10;
    v19 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v39 = v5;
    v40 = v19;
    while (1)
    {
      v45 = v16;
      v20 = (uint64_t)v15;
      v21 = v40;
      v40(v10, v18, v4);
      v21(v8, v10, v4);
      v22 = v41;
      v21((char *)v41, v8, v4);
      v24 = sub_1A29BEC18((uint64_t)v8);
      v25 = v8;
      v26 = v10;
      if (v2)
        break;
      v27 = v23;
      v44 = 0;
      v28 = *(void (**)(void))(v5 + 8);
      v29 = v25;
      v28();
      v30 = (uint64_t *)(v22 + *(int *)(v43 + 20));
      *v30 = v24;
      v30[1] = v27;
      v31 = v22;
      v15 = (char *)v20;
      sub_1A297EB48(v31, v20, type metadata accessor for SFSecurityScopedURL);
      ((void (*)(char *, uint64_t))v28)(v26, v4);
      v17 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A29BE398(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v46;
      }
      v32 = v45;
      v34 = *(_QWORD *)(v17 + 16);
      v33 = *(_QWORD *)(v17 + 24);
      v8 = v29;
      if (v34 >= v33 >> 1)
      {
        sub_1A29BE398(v33 > 1, v34 + 1, 1);
        v17 = v46;
      }
      *(_QWORD *)(v17 + 16) = v34 + 1;
      sub_1A297EB48((uint64_t)v15, v17+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v34, type metadata accessor for SFSecurityScopedURL);
      v10 = v38;
      v18 += v37;
      v16 = v32 - 1;
      v5 = v39;
      v2 = v44;
      if (!v16)
        return v17;
    }
    v17 = *(_QWORD *)(v5 + 8);
    ((void (*)(char *, uint64_t))v17)(v25, v4);
    ((void (*)(uint64_t, uint64_t))v17)(v22, v4);
    ((void (*)(char *, uint64_t))v17)(v10, v4);
    swift_release();
  }
  return v17;
}

uint64_t sub_1A2A4698C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A469A4()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.StartTempPairing()), sel_init);
  v2 = v1;
  v0[9] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[10] = v4;
  v5 = v0[8];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[11] = v6;
  v7 = *(void **)(v5 + 16);
  v0[12] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[13] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5C18C;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[15] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7F8);
  *v12 = v0;
  v12[1] = sub_1A2A46B44;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A46B44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 96);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A46BD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A46BEC()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.StopTempPairing()), sel_init);
  v2 = v1;
  v0[6] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[7] = v4;
  v5 = v0[5];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[8] = v6;
  v7 = *(void **)(v5 + 16);
  v0[9] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[10] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[11] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5C114;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[12] = v12;
  *v12 = v0;
  v12[1] = sub_1A2A46D78;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A46D78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 72);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A46E08()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A46E48()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 72);
  v2 = *(void **)(v0 + 48);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A46EB4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A46ECC()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.TempPairingConnect()), sel_init);
  v2 = v1;
  v0[6] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[7] = v4;
  v5 = v0[5];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[8] = v6;
  v7 = *(void **)(v5 + 16);
  v0[9] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[10] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[11] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5C004;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[12] = v12;
  *v12 = v0;
  v12[1] = sub_1A2A47058;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A47058()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 72);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A470E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A47100()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.TempPairingDisconnect()), sel_init);
  v2 = v1;
  v0[6] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[7] = v4;
  v5 = v0[5];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[8] = v6;
  v7 = *(void **)(v5 + 16);
  v0[9] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[10] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[11] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5BFC0;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[12] = v12;
  *v12 = v0;
  v12[1] = sub_1A2A47058;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A4728C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropSend.Request() - 8);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 + 64);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A472F0()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.Send()), sel_init);
  v0[11] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[12] = v2;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v7 = v0[6];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[13] = v8;
  v9 = *(void **)(v5 + 16);
  v0[14] = v9;
  sub_1A2990388(v7, v3, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[15] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[16] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5BE08;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[17] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7B8);
  *v16 = v0;
  v16[1] = sub_1A2A474F4;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A474F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 112);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A47584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.TransferIdentifier() - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A475E4()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.Cancel()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5BC30;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A477D8;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A477D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 104);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A47868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A47880()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.TransfersMonitor()), sel_init);
  v2 = v1;
  v0[9] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[10] = v4;
  v5 = v0[8];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[11] = v6;
  v7 = *(void **)(v5 + 16);
  v0[12] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[13] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5B9C4;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[15] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D790);
  *v12 = v0;
  v12[1] = sub_1A2A46B44;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A47A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0) - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A47A80()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5BB5C;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A477D8;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A47C74()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A47C8C()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.ResignTransferPresenter()), sel_init);
  v2 = v1;
  v0[6] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[7] = v4;
  v5 = v0[5];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[8] = v6;
  v7 = *(void **)(v5 + 16);
  v0[9] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[10] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[11] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5B944;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[12] = v12;
  *v12 = v0;
  v12[1] = sub_1A2A47058;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A47E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request(0) - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A47E78()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.StartNearbySharingDiscovery()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5B910;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A4806C;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A4806C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 104);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A480FC()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A48144()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 104);
  v2 = *(void **)(v0 + 80);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A481BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t sub_1A2A481D8()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.StopNearbySharingDiscovery()), sel_init);
  v2 = v1;
  v0[8] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[9] = v4;
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 24);
  v0[10] = v8;
  v9 = *(void **)(v6 + 16);
  v0[11] = v9;
  v10 = (_QWORD *)swift_allocObject();
  v0[12] = v10;
  v10[2] = v3;
  v10[3] = v4;
  v10[4] = v7;
  v10[5] = v5;
  v10[6] = v8;
  v10[7] = v2;
  swift_bridgeObjectRetain();
  v11 = v9;
  swift_bridgeObjectRetain();
  v12 = v2;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v13 = (_QWORD *)swift_task_alloc();
  v0[13] = v13;
  v13[2] = v3;
  v13[3] = v4;
  v13[4] = v11;
  v13[5] = sub_1A2A5B820;
  v13[6] = v10;
  v14 = (_QWORD *)swift_task_alloc();
  v0[14] = v14;
  *v14 = v0;
  v14[1] = sub_1A2A4837C;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A4837C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 88);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A4840C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A4844C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 88);
  v2 = *(void **)(v0 + 64);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A484B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0) - 8);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 + 64);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A4851C()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.TakeNearbySharingAssertion()), sel_init);
  v0[11] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[12] = v2;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v7 = v0[6];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[13] = v8;
  v9 = *(void **)(v5 + 16);
  v0[14] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDrop.NearbySharingAssertionRequest);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[15] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDrop.NearbySharingAssertionRequest);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[16] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5B72C;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[17] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745C8);
  *v16 = v0;
  v16[1] = sub_1A2A48720;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A48720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 112);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A487B0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A487F8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 112);
  v2 = *(void **)(v0 + 88);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A48870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v4 = sub_1A2AE3130();
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A488D4()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v19;
  unint64_t v20;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.ReleaseNearbySharingAssertion()), sel_init);
  v0[11] = v1;
  v19 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v20 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v20 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[12] = v2;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 24);
  v0[13] = v9;
  v10 = *(void **)(v7 + 16);
  v0[14] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v5);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject();
  v0[15] = v13;
  *(_QWORD *)(v13 + 16) = v20;
  *(_QWORD *)(v13 + 24) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v11, v3, v5);
  *(_QWORD *)(v13 + v12) = v9;
  *(_QWORD *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_bridgeObjectRetain();
  v14 = v10;
  swift_bridgeObjectRetain();
  v15 = v19;
  swift_retain_n();
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  v16[2] = v20;
  v16[3] = v2;
  v16[4] = v14;
  v16[5] = sub_1A2A5B57C;
  v16[6] = v13;
  v17 = (_QWORD *)swift_task_alloc();
  v0[17] = v17;
  *v17 = v0;
  v17[1] = sub_1A2A474F4;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A48AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A48AE0()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.NearbySharingInteractions()), sel_init);
  v2 = v1;
  v0[9] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[10] = v4;
  v5 = v0[8];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[11] = v6;
  v7 = *(void **)(v5 + 16);
  v0[12] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[13] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5B388;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[15] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674810);
  *v12 = v0;
  v12[1] = sub_1A2A48C80;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A48C80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 96);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A48D10()
{
  uint64_t v0;
  _OWORD *v1;

  v1 = *(_OWORD **)(v0 + 56);

  swift_release();
  *v1 = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A48D5C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 96);
  v2 = *(void **)(v0 + 72);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A48DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction(0) - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A48E28()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.SimulateNearbySharingInteractions()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDrop.NearbySharingInteraction);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDrop.NearbySharingInteraction);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5B354;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A477D8;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A4901C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0) - 8);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 + 64);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A49080()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.BoopAtADistanceBegin()), sel_init);
  v0[11] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[12] = v2;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v7 = v0[6];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[13] = v8;
  v9 = *(void **)(v5 + 16);
  v0[14] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[15] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[16] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5B0C0;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[17] = v16;
  type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  *v16 = v0;
  v16[1] = sub_1A2A474F4;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A49280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0) - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A492E0()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5AFB8;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A477D8;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A494D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0) - 8);
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 + 64);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A49534()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  unint64_t v19;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.BoopAtADistanceEnd()), sel_init);
  v0[10] = v1;
  v18 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v19 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v19 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[11] = v2;
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = v0[5];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[12] = v8;
  v9 = *(void **)(v5 + 16);
  v0[13] = v9;
  sub_1A2990388(v7, v3, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[14] = v12;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v2;
  sub_1A297EB48(v3, v12 + v10, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v18;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[15] = v15;
  v15[2] = v19;
  v15[3] = v2;
  v15[4] = v13;
  v15[5] = sub_1A2A5ADF0;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A477D8;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A49728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v4 = sub_1A2AE3130();
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A4978C()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v19;
  unint64_t v20;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.EndNearbySharingInteraction()), sel_init);
  v0[11] = v1;
  v19 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v20 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v20 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[12] = v2;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 24);
  v0[13] = v9;
  v10 = *(void **)(v7 + 16);
  v0[14] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v5);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject();
  v0[15] = v13;
  *(_QWORD *)(v13 + 16) = v20;
  *(_QWORD *)(v13 + 24) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v11, v3, v5);
  *(_QWORD *)(v13 + v12) = v9;
  *(_QWORD *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_bridgeObjectRetain();
  v14 = v10;
  swift_bridgeObjectRetain();
  v15 = v19;
  swift_retain_n();
  v16 = (_QWORD *)swift_task_alloc();
  v0[16] = v16;
  v16[2] = v20;
  v16[3] = v2;
  v16[4] = v14;
  v16[5] = sub_1A2A5ACC0;
  v16[6] = v13;
  v17 = (_QWORD *)swift_task_alloc();
  v0[17] = v17;
  *v17 = v0;
  v17[1] = sub_1A2A474F4;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A49980(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 121) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = v2;
  return swift_task_switch();
}

uint64_t sub_1A2A4999C()
{
  uint64_t v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  _QWORD *v13;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.UserSafetyIntervention()), sel_init);
  v2 = v1;
  *(_QWORD *)(v0 + 56) = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_BYTE *)(v0 + 121);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v0 + 72) = v7;
  v8 = *(void **)(v5 + 16);
  *(_QWORD *)(v0 + 80) = v8;
  v9 = swift_allocObject();
  *(_QWORD *)(v0 + 88) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_BYTE *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v7;
  *(_QWORD *)(v9 + 48) = v2;
  swift_bridgeObjectRetain();
  v10 = v8;
  swift_bridgeObjectRetain();
  v11 = v2;
  swift_retain_n();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v12;
  v12[2] = v3;
  v12[3] = v4;
  v12[4] = v10;
  v12[5] = sub_1A2A5AC04;
  v12[6] = v9;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v13;
  *v13 = v0;
  v13[1] = sub_1A2A49B48;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A49B48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 80);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A49BD8()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 40);

  swift_release();
  *v1 = *(_BYTE *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A49C24()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 80);
  v2 = *(void **)(v0 + 56);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A49C90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[7] = a1;
  v2[8] = v1;
  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0) - 8);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 + 64);
  v2[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A49CF4()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  void *v19;
  unint64_t v20;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.ItemDestinationAlert()), sel_init);
  v0[12] = v1;
  v19 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v20 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v20 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v18 = v2;
  v0[13] = v2;
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[8];
  v6 = v0[9];
  v7 = v0[7];
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 24);
  v0[14] = v8;
  v9 = *(void **)(v5 + 16);
  v0[15] = v9;
  sub_1A297CDE4(v7, v4, &qword_1EE67B3C0);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v0[16] = v12;
  *(_QWORD *)(v12 + 16) = v20;
  *(_QWORD *)(v12 + 24) = v18;
  sub_1A2990414(v4, v12 + v10, &qword_1EE67B3C0);
  *(_QWORD *)(v12 + v11) = v8;
  *(_QWORD *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_bridgeObjectRetain();
  v13 = v9;
  swift_bridgeObjectRetain();
  v14 = v19;
  swift_retain_n();
  v15 = (_QWORD *)swift_task_alloc();
  v0[17] = v15;
  v15[2] = v20;
  v15[3] = v18;
  v15[4] = v13;
  v15[5] = sub_1A2A5A9C0;
  v15[6] = v12;
  v16 = (_QWORD *)swift_task_alloc();
  v0[18] = v16;
  *v16 = v0;
  v16[1] = sub_1A2A49F04;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A49F04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = (void *)v2[15];
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v4 = v2[6];
    v2[20] = v2[5];
    v2[21] = v4;
  }
  return swift_task_switch();
}

uint64_t sub_1A2A49F9C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t sub_1A2A49FE8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 120);
  v2 = *(void **)(v0 + 96);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A4A060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_1A2AE3130();
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = *(_QWORD *)(v5 + 64);
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A4A0C8()
{
  _QWORD *v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.FetchEndpointMetadata()), sel_init);
  v0[14] = v1;
  v21 = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v22 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v2 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v22 = 0xD00000000000001BLL;
    v2 = 0x80000001A2B462E0;
  }
  v0[15] = v2;
  v4 = v0[12];
  v3 = v0[13];
  v5 = v0[10];
  v6 = v0[11];
  v19 = v5;
  v20 = v3;
  v8 = v0[8];
  v7 = v0[9];
  swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 24);
  v0[16] = v9;
  v10 = *(void **)(v7 + 16);
  v0[17] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v5);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject();
  v0[18] = v13;
  *(_QWORD *)(v13 + 16) = v22;
  *(_QWORD *)(v13 + 24) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v11, v20, v19);
  *(_QWORD *)(v13 + v12) = v9;
  *(_QWORD *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  swift_bridgeObjectRetain();
  v14 = v10;
  swift_bridgeObjectRetain();
  v15 = v21;
  swift_retain_n();
  v16 = (_QWORD *)swift_task_alloc();
  v0[19] = v16;
  v16[2] = v22;
  v16[3] = v2;
  v16[4] = v14;
  v16[5] = sub_1A2A5A708;
  v16[6] = v13;
  v17 = (_QWORD *)swift_task_alloc();
  v0[20] = v17;
  *v17 = v0;
  v17[1] = sub_1A2A4A2CC;
  return sub_1A2AE3F10();
}

uint64_t sub_1A2A4A2CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 136);
    swift_release();

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1A2A4A35C()
{
  uint64_t v0;
  _OWORD *v1;

  v1 = *(_OWORD **)(v0 + 56);

  swift_release();
  *v1 = *(_OWORD *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A4A3B8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 112);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A4A430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A4A448()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFAirDropInvocations.TempPairingMonitor()), sel_init);
  v2 = v1;
  v0[9] = v1;
  if (*(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8])
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name];
    v4 = *(_QWORD *)&v1[OBJC_IVAR___SFXPCInvocation_name + 8];
  }
  else
  {
    v3 = 0xD00000000000001BLL;
    v4 = 0x80000001A2B462E0;
  }
  v0[10] = v4;
  v5 = v0[8];
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 24);
  v0[11] = v6;
  v7 = *(void **)(v5 + 16);
  v0[12] = v7;
  v8 = (_QWORD *)swift_allocObject();
  v0[13] = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v6;
  v8[5] = v2;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  v10 = v2;
  swift_retain_n();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v9;
  v11[5] = sub_1A2A5C048;
  v11[6] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v0[15] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE676490);
  *v12 = v0;
  v12[1] = sub_1A2A46B44;
  return sub_1A2AE3F10();
}

void sub_1A2A4A5E8(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC70);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropSend.Request();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A345DC(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5BF2C;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_517;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4A818(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDrop.TransferIdentifier();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A34624(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_479;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4AA48(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A34D38(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_462;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4AC78(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A34D80(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_400;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4AEA8(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD aBlock[6];
  uint64_t v36;

  v36 = a8;
  v32 = a2;
  v34 = a1;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v14 = *(_QWORD *)(v33 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v33);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_1A2A34DC8(a3, a4, a5, a6, a7);
  if (!v8)
  {
    v20 = v18;
    v21 = v19;
    v30 = v17;
    v31 = v16;
    v29 = sub_1A2AE2F74();
    v22 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v33);
    v23 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v24 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v24 + v23, (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_388;
    v25 = _Block_copy(aBlock);
    v26 = v20;
    v27 = v21;
    swift_release();
    v28 = (void *)v29;
    objc_msgSend(v34, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v36, v29, v26, v27, 0, v25);
    _Block_release(v25);

    sub_1A29736C4(v31, v30);
  }
}

void sub_1A2A4B098(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC50);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A35454(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5B7D0;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_376;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4B2C8(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A35B64(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_286;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4B4F8(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC30);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A35BAC(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5B164;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_274;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4B728(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A35BF4(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_236;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4B958(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[6];
  uint64_t v40;

  v40 = a7;
  v36 = a2;
  v38 = a1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v37 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v37);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A2990388(a5, (uint64_t)v17, v18);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A35BAC(a3, a4, (uint64_t)v17, a6);
  if (!v7)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v37);
    v27 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28 + v27, v14, v26);
    aBlock[4] = sub_1A2A5AD74;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_224;
    v29 = _Block_copy(aBlock);
    v30 = v24;
    v31 = v25;
    swift_release();
    v32 = (void *)v34;
    objc_msgSend(v38, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v40, v34, v30, v31, 0, v29);
    _Block_release(v29);

    sub_1A29736C4(v35, v23);
  }
}

void sub_1A2A4BB88(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD aBlock[6];
  uint64_t v44;

  v44 = a7;
  v40 = a2;
  v42 = a1;
  v41 = __swift_instantiateConcreteTypeFromMangledName(a8);
  v16 = *(_QWORD *)(v41 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v41);
  v18 = sub_1A2AE3130();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, a5);
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = sub_1A2A3549C(a3, a4, (uint64_t)v20, a6);
  if (!v11)
  {
    v26 = v24;
    v27 = v25;
    v35 = a10;
    v36 = a11;
    v38 = v23;
    v39 = v22;
    v37 = sub_1A2AE2F74();
    v28 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v41);
    v29 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v30 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v30 + v29, (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
    aBlock[4] = v35;
    aBlock[5] = v30;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = v36;
    v31 = _Block_copy(aBlock);
    v32 = v26;
    v33 = v27;
    swift_release();
    v34 = (void *)v37;
    objc_msgSend(v42, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v44, v37, v32, v33, 0, v31);
    _Block_release(v31);

    sub_1A29736C4(v39, v38);
  }
}

void sub_1A2A4BDAC(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD aBlock[6];
  uint64_t v35;

  v35 = a7;
  v32 = a2;
  v33 = a1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC28);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = sub_1A2A35C3C(a3, a4, a5, a6);
  if (!v7)
  {
    v19 = v17;
    v20 = v18;
    v30 = v16;
    v31 = v15;
    v29 = sub_1A2AE2F74();
    v21 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v12);
    v22 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v23 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v23 + v22, (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
    aBlock[4] = sub_1A2A5ACA8;
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_174;
    v24 = _Block_copy(aBlock);
    v25 = v19;
    v26 = v20;
    swift_release();
    v27 = (void *)v29;
    objc_msgSend(v33, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v35, v29, v25, v26, 0, v24);
    _Block_release(v24);

    sub_1A29736C4(v31, v30);
  }
}

void sub_1A2A4BF8C(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD aBlock[6];
  uint64_t v39;

  v36 = a1;
  v37 = a7;
  v34 = a2;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC20);
  v11 = *(_QWORD *)(v35 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v35);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CDE4(a5, (uint64_t)v16, &qword_1EE67B3C0);
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = v39;
  v18 = sub_1A2A36294(a3, a4, (uint64_t)v16, a6);
  if (!v17)
  {
    v22 = v19;
    v23 = v20;
    v24 = v21;
    v39 = v18;
    v33 = sub_1A2AE2F74();
    v25 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v35);
    v26 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v27 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v27 + v26, v13, v25);
    aBlock[4] = sub_1A2A5ABBC;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = &block_descriptor_136;
    v28 = _Block_copy(aBlock);
    v29 = v23;
    v30 = v24;
    swift_release();
    v31 = (void *)v33;
    objc_msgSend(v36, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v37, v33, v29, v30, 0, v28);
    _Block_release(v28);

    sub_1A29736C4(v39, v22);
  }
}

void sub_1A2A4C1B8(void *a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD aBlock[6];
  uint64_t v39;

  v36 = a8;
  v37 = a1;
  v39 = a6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = sub_1A2A33F98(a3, a4, a5);
  if (!v10)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v32 = a9;
    v33 = a10;
    v35 = v19;
    v34 = sub_1A2AE2F74();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v15);
    v26 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v27 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v27 + v26, v18, v15);
    aBlock[4] = v32;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A2A3695C;
    aBlock[3] = v33;
    v28 = _Block_copy(aBlock);
    v29 = v24;
    v30 = v25;
    swift_release();
    v31 = (void *)v34;
    objc_msgSend(v37, sel_invoke_parametersData_parametersAsyncSequenceContainer_parametersBlocksContainer_sync_completion_, v39, v34, v29, v30, 0, v28);
    _Block_release(v28);

    sub_1A29736C4(v35, v23);
  }
}

uint64_t sub_1A2A4C394(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v32 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D7B8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v31 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v30 = (uint64_t)&v30 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC78);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v30 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC80);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CF68(a1, a2);
  v33 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3B3B8((uint64_t)a5, a1, a2, a3, a4, (uint64_t)v21);
  swift_storeEnumTagMultiPayload();
  sub_1A2990414((uint64_t)v21, (uint64_t)v23, &qword_1EE67DC78);
  sub_1A2990414((uint64_t)v23, (uint64_t)v26, &qword_1EE67DC78);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_1A29B98D8(a1, a2);
  sub_1A297CDE4((uint64_t)v26, (uint64_t)v18, &qword_1EE67DC78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = *v18;
    v27 = v34;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    swift_willThrowTypedImpl();
    sub_1A296F108((uint64_t)v26, &qword_1EE67DC80);
    v34 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC70);
    return sub_1A2AE3694();
  }
  else
  {
    v29 = v30;
    sub_1A2990414((uint64_t)v18, v30, &qword_1EE67D7B8);
    sub_1A297CDE4(v29, v31, &qword_1EE67D7B8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC70);
    sub_1A2AE36A0();
    sub_1A296F108(v29, &qword_1EE67D7B8);
    return sub_1A296F108((uint64_t)v26, &qword_1EE67DC80);
  }
}

uint64_t sub_1A2A4C69C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v32 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6745C8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v31 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v30 = (uint64_t)&v30 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC58);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v30 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC60);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CF68(a1, a2);
  v33 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3BCD4((uint64_t)a5, a1, a2, a3, a4, (uint64_t)v21);
  swift_storeEnumTagMultiPayload();
  sub_1A2990414((uint64_t)v21, (uint64_t)v23, &qword_1EE67DC58);
  sub_1A2990414((uint64_t)v23, (uint64_t)v26, &qword_1EE67DC58);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_1A29B98D8(a1, a2);
  sub_1A297CDE4((uint64_t)v26, (uint64_t)v18, &qword_1EE67DC58);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = *v18;
    v27 = v34;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    swift_willThrowTypedImpl();
    sub_1A296F108((uint64_t)v26, &qword_1EE67DC60);
    v34 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC50);
    return sub_1A2AE3694();
  }
  else
  {
    v29 = v30;
    sub_1A2990414((uint64_t)v18, v30, &qword_1EE6745C8);
    sub_1A297CDE4(v29, v31, &qword_1EE6745C8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC50);
    sub_1A2AE36A0();
    sub_1A296F108(v29, &qword_1EE6745C8);
    return sub_1A296F108((uint64_t)v26, &qword_1EE67DC60);
  }
}

uint64_t sub_1A2A4C9A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v32 = a6;
  v11 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v31 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v30 = (uint64_t)&v30 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC38);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v30 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC40);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A297CF68(a1, a2);
  v33 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3C15C((uint64_t)a5, a1, a2, a3, a4, (uint64_t)v21);
  swift_storeEnumTagMultiPayload();
  sub_1A2990414((uint64_t)v21, (uint64_t)v23, &qword_1EE67DC38);
  sub_1A2990414((uint64_t)v23, (uint64_t)v26, &qword_1EE67DC38);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_1A29B98D8(a1, a2);
  sub_1A297CDE4((uint64_t)v26, (uint64_t)v18, &qword_1EE67DC38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = *v18;
    v27 = v34;
    __swift_instantiateConcreteTypeFromMangledName(qword_1EE6767B0);
    swift_willThrowTypedImpl();
    sub_1A296F108((uint64_t)v26, &qword_1EE67DC40);
    v34 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC30);
    return sub_1A2AE3694();
  }
  else
  {
    v29 = v30;
    sub_1A297EB48((uint64_t)v18, v30, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
    sub_1A2990388(v29, v31, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC30);
    sub_1A2AE36A0();
    sub_1A297DA3C(v29, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
    return sub_1A296F108((uint64_t)v26, &qword_1EE67DC40);
  }
}

uint64_t sub_1A2A4CCA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10;
  uint64_t v12;

  sub_1A297CF68(a1, a2);
  v10 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3AB14((uint64_t)a5, a1, a2, a3, a4, (uint64_t)&v12);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  return sub_1A2AE36A0();
}

uint64_t sub_1A2A4CDB0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  uint64_t v12;

  sub_1A297CF68(a1, a2);
  v10 = (id)a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3C5D4(a5, a1, a2, a3, a4, (uint64_t)&v12);
  swift_unknownObjectRelease();

  LOBYTE(a5) = v12;
  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  LOBYTE(v12) = a5 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC28);
  return sub_1A2AE36A0();
}

uint64_t sub_1A2A4CED0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10;

  sub_1A297CF68(a1, a2);
  v10 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3AF6C((uint64_t)a5, a1, a2, a3, a4);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC20);
  return sub_1A2AE36A0();
}

uint64_t sub_1A2A4CFF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  sub_1A297CF68(a1, a2);
  v10 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1A2A3CA2C((uint64_t)a5, a1, a2, a3, a4, (uint64_t)&v14);
  swift_unknownObjectRelease();

  v11 = v15;
  v12 = v14;
  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  v14 = v12;
  v15 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC18);
  return sub_1A2AE36A0();
}

uint64_t sub_1A2A4D110(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, void *, uint64_t, unint64_t, uint64_t, uint64_t), uint64_t *a8)
{
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  sub_1A297CF68(a1, a2);
  v15 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  a7(&v19, a5, a1, a2, a3, a4);
  swift_unknownObjectRelease();

  v16 = v20;
  v17 = v19;
  swift_unknownObjectRelease();
  sub_1A29B98D8(a1, a2);
  v19 = v17;
  v20 = v16;
  __swift_instantiateConcreteTypeFromMangledName(a8);
  return sub_1A2AE36A0();
}

void sub_1A2A4D234(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DCB8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5C284;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_608;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_619;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4D514(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675108);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5AD0C;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_189;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_200;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4D7F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC70);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5BEC4;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_494;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_505;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4DAD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC68);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5BA10;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_427;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_438;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4DDB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC50);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5B768;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_353;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_364;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4E094(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675110);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5B3D4;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_303;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_314;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4E374(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC30);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5B0FC;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_251;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_262;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4E654(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC28);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5AC40;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_151;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_162;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4E934(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC20);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5AA58;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_113;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_124;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4EC14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DC18);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5A754;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01A6C;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_6;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A01A98;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_86;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_1A2A4EEF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char isEscapingClosureAtFileLocation;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a6;
  v29 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE675D98);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v16 = &v15[(v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v16 = v27;
  *((_QWORD *)v16 + 1) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1A2A5C094;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = sub_1A2A01D10;
  aBlock[5] = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A2A1AD58;
  aBlock[3] = &block_descriptor_558;
  v19 = _Block_copy(aBlock);
  v20 = _Block_copy(v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1A2A5C5A4;
  *(_QWORD *)(v22 + 24) = v21;
  v30[4] = sub_1A2A01D10;
  v30[5] = v22;
  v30[0] = v18;
  v30[1] = 1107296256;
  v30[2] = sub_1A2A1AD58;
  v30[3] = &block_descriptor_569;
  v23 = _Block_copy(v30);
  swift_bridgeObjectRetain();
  v24 = a4;
  swift_retain();
  swift_retain();
  _Block_copy(v20);
  swift_retain();
  swift_release();
  _os_activity_initiate(&dword_1A2830000, "asyncXPC", OS_ACTIVITY_FLAG_IF_NONE_PRESENT, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v20);
  _Block_release(v19);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

uint64_t sub_1A2A4F1D4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t), uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t aBlock[6];
  _QWORD v73[5];

  v59 = a6;
  v60 = a5;
  v69 = a4;
  v67 = a3;
  v62 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v66 = v13;
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A2AE30C4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v56 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v58 = (char *)&v54 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v54 - v22;
  MEMORY[0x1E0C80A78](v21);
  v68 = (char *)&v54 - v24;
  sub_1A2AE30B8();
  if (qword_1EE676778 != -1)
    swift_once();
  v64 = a9;
  v65 = a10;
  v25 = sub_1A2AE31D8();
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_1EE676790);
  swift_bridgeObjectRetain_n();
  v63 = v26;
  v27 = sub_1A2AE31C0();
  v28 = sub_1A2AE3964();
  v29 = os_log_type_enabled(v27, v28);
  v61 = v11;
  if (v29)
  {
    v30 = swift_slowAlloc();
    v57 = v16;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc();
    v55 = v15;
    v33 = v32;
    aBlock[0] = v32;
    v54 = v12;
    *(_DWORD *)v31 = 136446210;
    swift_bridgeObjectRetain();
    v73[0] = sub_1A296DA00(v62, a2, aBlock);
    v11 = v61;
    v12 = v54;
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A2830000, v27, v28, "asyncXPC [%{public}s] START -- Client", v31, 0xCu);
    swift_arrayDestroy();
    v34 = v33;
    v15 = v55;
    MEMORY[0x1A85896E8](v34, -1, -1);
    v35 = v31;
    v16 = v57;
    MEMORY[0x1A85896E8](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v36 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v69, v11);
  v37 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v38 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v38 + v37, v14, v11);
  aBlock[4] = v64;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1A2A4129C;
  aBlock[3] = v65;
  v39 = _Block_copy(aBlock);
  swift_release();
  v40 = objc_msgSend(v67, sel_remoteObjectProxyWithErrorHandler_, v39);
  _Block_release(v39);
  sub_1A2AE3A90();
  swift_unknownObjectRelease();
  aBlock[0] = sub_1A2974CD4((uint64_t)v73, 0, 0, 0xD000000000000051, 0x80000001A2B463C0, 217);
  v60(aBlock, v69);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v68, v15);
  swift_bridgeObjectRetain_n();
  disableAirDropTLS();
  disableAirDropTLS();
  v41 = sub_1A2AE31C0();
  v42 = sub_1A2AE3964();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v55 = v15;
    v45 = v44;
    v71 = v44;
    *(_DWORD *)v43 = 136446722;
    swift_bridgeObjectRetain();
    v70 = sub_1A296DA00(v62, v36, &v71);
    sub_1A2AE3A60();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v43 + 12) = 1040;
    LODWORD(v70) = 3;
    sub_1A2AE3A60();
    *(_WORD *)(v43 + 18) = 2048;
    v46 = v56;
    sub_1A2AE30B8();
    sub_1A2AE2FC8();
    v48 = v47;
    v49 = *(void (**)(char *, uint64_t))(v16 + 8);
    v50 = v46;
    v51 = v55;
    v49(v50, v55);
    v70 = v48;
    sub_1A2AE3A60();
    v49(v23, v51);
    _os_log_impl(&dword_1A2830000, v41, v42, "asyncXPC [%{public}s] END -- {duration: %.*f}", (uint8_t *)v43, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1A85896E8](v45, -1, -1);
    MEMORY[0x1A85896E8](v43, -1, -1);

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v73);
    return ((uint64_t (*)(char *, uint64_t))v49)(v68, v51);
  }
  else
  {

    v53 = *(void (**)(char *, uint64_t))(v16 + 8);
    v53(v23, v15);
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v73);
    return ((uint64_t (*)(char *, uint64_t))v53)(v68, v15);
  }
}

uint64_t sub_1A2A4FD20(void *a1, uint64_t a2, uint64_t *a3)
{
  id v4;

  v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return sub_1A2AE3694();
}

id SFAirDropClient.__allocating_init(identifier:)(uint64_t a1)
{
  swift_allocObject();
  return SFAirDropClient.init(identifier:)(a1);
}

uint64_t sub_1A2A4FD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1A2AE31D8();
  __swift_allocate_value_buffer(v0, qword_1EE676388);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE676388);
  if (qword_1EE676030 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_1EE676010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t static SFAirDropClient.nearFieldApplicationLabel.getter()
{
  return 0xD000000000000011;
}

uint64_t SFAirDropClient.clientIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1 + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
}

id SFAirDropClient.init(identifier:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  objc_class *ObjectType;
  objc_super v24;
  uint64_t v25;

  v2 = v1;
  v22 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = sub_1A2AE397C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A2AE3970();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = sub_1A2AE3334();
  MEMORY[0x1E0C80A78](v9);
  swift_defaultActor_initialize();
  v21 = OBJC_IVAR____TtC7Sharing15SFAirDropClient_queue;
  v20[1] = sub_1A29C0D60();
  swift_retain();
  sub_1A2AE331C();
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1A296E8A4((unint64_t *)&qword_1EE6763B8, v8, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE6763A0);
  sub_1A296E5E4((unint64_t *)&qword_1EE6763A8, &qword_1EE6763A0, MEMORY[0x1E0DEAF38]);
  sub_1A2AE3AC0();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D8], v3);
  v10 = v22;
  v11 = (void *)sub_1A2AE39A0();
  *(_QWORD *)((char *)v1 + v21) = v11;
  sub_1A2990388(v10, (uint64_t)v1 + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v12 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v13 = v11;
  v14 = (void *)sub_1A2AE340C();
  v15 = objc_msgSend(v12, sel_initWithMachServiceName_options_, v14, 0);

  type metadata accessor for SFXPCConnection();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = v15;
  objc_msgSend(v17, sel_sf_setQueue_, v13);
  if (qword_1ECEFCFA8 != -1)
    swift_once();
  objc_msgSend(v17, sel_setRemoteObjectInterface_, qword_1ECEFD598);

  v2[14] = v16;
  swift_retain();
  objc_msgSend(v17, sel_activate);
  swift_release();
  swift_release();
  v24.receiver = v2;
  v24.super_class = ObjectType;
  v18 = objc_msgSendSuper2(&v24, sel_init);
  sub_1A297DA3C(v10, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  return v18;
}

uint64_t SFAirDropClient.deinit()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 112) + 16), sel_invalidate);
  swift_release();
  sub_1A297DA3C(v0 + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);

  swift_defaultActor_destroy();
  return v0;
}

uint64_t SFAirDropClient.__deallocating_deinit()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 112) + 16), sel_invalidate);
  swift_release();
  sub_1A297DA3C(v0 + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v9 + 136) = a8;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = v8;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 80) = v10;
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 96) = swift_task_alloc();
  *(_QWORD *)(v9 + 104) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v9 + 120) = a8;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = v8;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 80) = v10;
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 96) = swift_task_alloc();
  return swift_task_switch();
}

void sub_1A2A50310()
{
  NWEndpoint.endpointUUID()();
}

uint64_t sub_1A2A50330()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1A2AE3124();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_1A2A50390;
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_BYTE *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 24);
  v1[3] = 0;
  v1[4] = 0xF000000000000000;
  v1[2] = v4;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(v10, v11, v3, v9, v7, v8, v5, v6);
}

uint64_t sub_1A2A50390()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*v1 + 88);
  v2 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *v1;
  *(_QWORD *)(v5 + 120) = v0;
  swift_task_dealloc();
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v5 + 128) = v6;
  v6(v2, v4);
  if (v0)
    return swift_task_switch();
  v6(*(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A50454()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void NWEndpoint.endpointUUID()()
{
  swift_slowAlloc();
  if (sub_1A2AE32C8())
  {
    nw_endpoint_get_service_identifier();
    swift_unknownObjectRelease();
    sub_1A2AE3118();
  }
  else
  {
    __break(1u);
  }
  JUMPOUT(0x1A85896E8);
}

uint64_t SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:customPayload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v9 + 80) = v13;
  *(_QWORD *)(v9 + 88) = v8;
  *(_BYTE *)(v9 + 136) = a8;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = v12;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 112) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v9 + 80) = v13;
  *(_QWORD *)(v9 + 88) = v8;
  *(_BYTE *)(v9 + 152) = a8;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 72) = v12;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 96) = v10;
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 112) = swift_task_alloc();
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A505B4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1A2AE3124();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A50628;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 136));
}

uint64_t sub_1A2A50628()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 104);
  v5 = *v1;
  *(_QWORD *)(v5 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A506C8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A50788()
{
  NWEndpoint.endpointUUID()();
}

uint64_t sub_1A2A507A8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1A2AE3124();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = sub_1A2A50808;
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_BYTE *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 16);
  v12 = *(_QWORD *)(v0 + 24);
  v1[3] = *(_QWORD *)(v0 + 72);
  v1[4] = v5;
  v1[2] = v4;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(v11, v12, v3, v10, v8, v9, v6, v7);
}

uint64_t sub_1A2A50808()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(*v1 + 104);
  v2 = *(_QWORD *)(*v1 + 112);
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *v1;
  *(_QWORD *)(v5 + 136) = v0;
  swift_task_dealloc();
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v5 + 144) = v6;
  v6(v2, v4);
  if (v0)
    return swift_task_switch();
  v6(*(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A508CC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A5098C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1A2AE3124();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A50A00;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 120));
}

uint64_t sub_1A2A50A00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 96) = v8;
  *(_OWORD *)(v9 + 72) = v11;
  *(_BYTE *)(v9 + 160) = a8;
  *(_QWORD *)(v9 + 56) = a6;
  *(_QWORD *)(v9 + 64) = a7;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 104) = type metadata accessor for SFAirDropSend.Request();
  *(_QWORD *)(v9 + 112) = swift_task_alloc();
  type metadata accessor for SFAirDrop.TransferIdentifier();
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A50B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  _QWORD v35[2];
  char v36;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = sub_1A2AE3130();
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16);
  v4(v1, v2, v3);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1A2A466C0(v5);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  v9 = *(int **)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 88);
  v10 = *(_BYTE *)(v0 + 160);
  v33 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 48);
  v32 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 40);
  v29 = *(_QWORD *)(v0 + 32);
  v13 = swift_bridgeObjectRetain();
  static SFAirDrop.TransferType.transferType(for:onlyExchange:shouldExchangeContacts:)(v13, v10, 0, (uint64_t)v35);
  swift_bridgeObjectRelease();
  v27 = v35[1];
  v28 = v35[0];
  v26 = v36;
  v14 = _s7Sharing13SFAirDropSendO4ItemV26compressedPreviewImageData4data10Foundation0I0VSgAK_tFZ_0(v12, v11);
  v16 = v15;
  *(_QWORD *)(v0 + 128) = v14;
  *(_QWORD *)(v0 + 136) = v15;
  sub_1A2990388(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v4(v8 + v9[7], v29, v3);
  v17 = (uint64_t *)(v8 + v9[11]);
  v18 = (_QWORD *)(v8 + v9[12]);
  v19 = (_QWORD *)(v8 + v9[13]);
  v20 = v8 + v9[5];
  *(_QWORD *)v20 = v28;
  *(_QWORD *)(v20 + 8) = v27;
  *(_BYTE *)(v20 + 16) = v26;
  *(_QWORD *)(v8 + v9[6]) = v6;
  v21 = v8 + v9[8];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_QWORD *)(v8 + v9[9]) = 0;
  v23 = (uint64_t *)(v8 + v9[10]);
  *v23 = v30;
  v23[1] = v31;
  *v17 = v14;
  v17[1] = v16;
  *v18 = 0;
  v18[1] = 0;
  *v19 = v32;
  v19[1] = v33;
  sub_1A297CF68(v14, v16);
  swift_bridgeObjectRetain();
  sub_1A297CF68(v30, v31);
  v34 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D838 + dword_1EE67D838);
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v24;
  *v24 = v0;
  v24[1] = sub_1A2A50DB8;
  return v34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 112));
}

uint64_t sub_1A2A50DB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A50E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  sub_1A29B98D8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  sub_1A297DA3C(v2, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A50E84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  sub_1A29B98D8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  sub_1A297DA3C(*(_QWORD *)(v0 + 120), (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_1A2972038;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:customPayload:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t SFAirDropClient.send(_:to:requestSource:onlyExchange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + 104) = a6;
  *(_QWORD *)(v7 + 48) = a5;
  *(_QWORD *)(v7 + 56) = v6;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = sub_1A2AE3130();
  *(_QWORD *)(v7 + 64) = v8;
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 80) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1A2972038;
  return SFAirDropClient.send(_:to:requestSource:onlyExchange:customPayload:)(a1, a2, a3, a4, a5, a6, 0, 0xF000000000000000);
}

void sub_1A2A51024()
{
  NWEndpoint.endpointUUID()();
}

uint64_t sub_1A2A51044()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A51094;
  return SFAirDropClient.send(_:to:requestSource:onlyExchange:customPayload:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 104), 0, 0xF000000000000000);
}

uint64_t sub_1A2A51094()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A51134()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.send(_:to:requestSource:onlyExchange:customPayload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 88) = a8;
  *(_QWORD *)(v9 + 96) = v8;
  *(_BYTE *)(v9 + 33) = a6;
  *(_QWORD *)(v9 + 72) = a5;
  *(_QWORD *)(v9 + 80) = a7;
  *(_QWORD *)(v9 + 56) = a3;
  *(_QWORD *)(v9 + 64) = a4;
  *(_QWORD *)(v9 + 40) = a1;
  *(_QWORD *)(v9 + 48) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 104) = v10;
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  type metadata accessor for SFAirDropSend.Request();
  *(_QWORD *)(v9 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE674658);
  *(_QWORD *)(v9 + 136) = swift_task_alloc();
  *(_QWORD *)(v9 + 144) = swift_task_alloc();
  type metadata accessor for SFAirDrop.TransferIdentifier();
  *(_QWORD *)(v9 + 152) = swift_task_alloc();
  *(_QWORD *)(v9 + 160) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 64) = a8;
  *(_QWORD *)(v9 + 72) = v8;
  *(_BYTE *)(v9 + 120) = a6;
  *(_QWORD *)(v9 + 48) = a5;
  *(_QWORD *)(v9 + 56) = a7;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_1A2AE3130();
  *(_QWORD *)(v9 + 80) = v10;
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 96) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A5125C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  __int128 v21;
  char v22;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(unsigned __int8 *)(v0 + 33);
  v18 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  sub_1A2AE3124();
  v17 = static SFAirDropSend.convertItemPromises(_:)(v3, v8);
  static SFAirDrop.TransferType.transferType(for:onlyExchange:shouldExchangeContacts:)(v8, v7, 0, (_OWORD *)(v0 + 16));
  sub_1A2990388(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  v9 = *(_BYTE *)(v0 + 32);
  v21 = *(_OWORD *)(v0 + 16);
  v22 = v9;
  sub_1A297CDE4(v3, v13, &qword_1EE674658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v12, v16);
  swift_bridgeObjectRetain();
  sub_1A297CF68(v5, v4);
  SFAirDropSend.Request.init(id:type:urlsPromise:urlsMetadata:endpointID:itemDescription:requestSource:customPayload:)(v1, (uint64_t *)&v21, v13, v17, v15, 0, 0, v18, v19, v6, v5, v4);
  v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D838 + dword_1EE67D838);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v10;
  *v10 = v0;
  v10[1] = sub_1A2A513F0;
  return v20(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1A2A513F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A51454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  sub_1A297DA3C(*(_QWORD *)(v0 + 128), (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  sub_1A296F108(v2, &qword_1EE674658);
  sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A514FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  sub_1A297DA3C(*(_QWORD *)(v0 + 128), (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.Request);
  sub_1A296F108(v2, &qword_1EE674658);
  sub_1A297DA3C(v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDrop.TransferIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A2A51614()
{
  NWEndpoint.endpointUUID()();
}

uint64_t sub_1A2A51634()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A51680;
  return SFAirDropClient.send(_:to:requestSource:onlyExchange:customPayload:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 120), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1A2A51680()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A2A51720()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.cancelTransfer(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A51804()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D870 + dword_1EE67D870);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.registerTransfersMonitor()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1A2AE31D8();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A518C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char *v9;
  char *v10;

  if (qword_1EE675F40 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(char **)(v0 + 16);
  v6 = __swift_project_value_buffer(v3, (uint64_t)qword_1EE676388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  v7 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)v5 = 0xD000000000000018;
  *((_QWORD *)v5 + 1) = 0x80000001A2B47420;
  v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D890);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v5[v8[11]], v1, v3);
  v9 = &v5[v8[12]];
  *(_QWORD *)v9 = &unk_1EE67D888;
  *((_QWORD *)v9 + 1) = v7;
  v10 = &v5[v8[13]];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  swift_retain();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A519D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D8C8 + dword_1EE67D8C8);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2971EBC;
  return v5(a1);
}

uint64_t SFAirDropClient.registerTransfersMonitorAndBecomePresenter()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1A2AE31D8();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A51AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;

  if (qword_1EE675F40 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(char **)(v0 + 16);
  v6 = __swift_project_value_buffer(v4, (uint64_t)qword_1EE676388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v4);
  v7 = *(_QWORD *)(v3 + 112);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)v5 = 0xD000000000000018;
  *((_QWORD *)v5 + 1) = 0x80000001A2B47420;
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D890);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v5[v9[11]], v1, v4);
  v10 = &v5[v9[12]];
  *(_QWORD *)v10 = &unk_1EE67D8A8;
  *((_QWORD *)v10 + 1) = v8;
  v11 = &v5[v9[13]];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  swift_retain();
  swift_retain();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A51BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A51C3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = v0[5];
  v1 = v0[6];
  sub_1A2990388(v0[3] + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v3 = (_OWORD *)(v1 + *(int *)(v2 + 20));
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *v3 = *MEMORY[0x1E0C9D648];
  v3[1] = v4;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D8B8 + dword_1EE67D8B8);
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_1A2A51CE0;
  return v7((uint64_t)v7, v0[6]);
}

uint64_t sub_1A2A51CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  sub_1A297DA3C(v2, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  return swift_task_switch();
}

uint64_t sub_1A2A51D5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D8C8 + dword_1EE67D8C8);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A51DC0;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A2A51DC0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A2A51E0C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.becomeTransferPresenter()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  v1[3] = type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0);
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A51E9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = v0[3];
  v1 = v0[4];
  sub_1A2990388(v0[2] + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v3 = (_OWORD *)(v1 + *(int *)(v2 + 20));
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *v3 = *MEMORY[0x1E0C9D648];
  v3[1] = v4;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D8B8 + dword_1EE67D8B8);
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_1A2A51F40;
  return v7((uint64_t)v7, v0[4]);
}

uint64_t sub_1A2A51F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  sub_1A297DA3C(v2, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  return swift_task_switch();
}

uint64_t sub_1A2A51FBC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A51FF0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A5203C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D8C8 + dword_1EE67D8C8);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A5C370;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.becomeTransferPresenter(animationRect:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = v4;
  *(double *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 56) = type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A52108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 16);
  sub_1A2990388(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC7Sharing15SFAirDropClient_clientIdentifier, v1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  v5 = v1 + *(int *)(v2 + 20);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)&v8 = (char *)&dword_1EE67D8B8 + dword_1EE67D8B8;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_1A2A521BC;
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v8, *(_QWORD *)(v0 + 64));
}

uint64_t sub_1A2A521BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  sub_1A297DA3C(v2, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  return swift_task_switch();
}

uint64_t sub_1A2A52238()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A5226C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.resignTransferPresenter()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1A2A522B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EE67D8E0 + dword_1EE67D8E0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A52318;
  return v3();
}

uint64_t sub_1A2A52318()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A5237C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropClient.startNearbySharingDiscovery(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A523A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D8F0 + dword_1EE67D8F0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A42F5C;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.stopNearbySharingDiscovery(applicationLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A52420()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1EE67D900 + dword_1EE67D900);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_1A2A52484;
  return v3((uint64_t)v3, v0[2], v0[3]);
}

uint64_t sub_1A2A52484()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SFAirDropClient.takeNearbySharingAssertion(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A52504()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D910 + dword_1EE67D910);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_1A2A5256C;
  return v3(v0[2], v0[3]);
}

uint64_t sub_1A2A5256C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t SFAirDropClient.releaseNearbySharingAssertion(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A525CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D920 + dword_1EE67D920);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.nearbySharingInteractions()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_1A2AE31D8();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A52690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;

  if (qword_1EE675F40 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(char **)(v0 + 16);
  v6 = __swift_project_value_buffer(v3, (uint64_t)qword_1EE676388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  *(_QWORD *)v5 = 0xD000000000000019;
  *((_QWORD *)v5 + 1) = 0x80000001A2B47440;
  v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EE674E50);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v5[v7[11]], v1, v3);
  v8 = &v5[v7[12]];
  *(_QWORD *)v8 = &unk_1EE67D938;
  *((_QWORD *)v8 + 1) = v4;
  v9 = &v5[v7[13]];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  swift_retain();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A52798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1A2A527B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67DC48 + dword_1EE67DC48);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B5DB8;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.updateSimulatedNearbySharingInteraction(update:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A52830()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D948 + dword_1EE67D948);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.boopAtADistance(begin:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A528B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D958 + dword_1EE67D958);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_1A2A5C364;
  return v3(v0[2], v0[3]);
}

uint64_t SFAirDropClient.boopAtADistance(update:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A2A52978()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[3];
  sub_1A2990388(v0[2], v1, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  sub_1A2990388(v3, v1 + *(int *)(v2 + 20), type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
  v6 = (uint64_t (*)(void))((char *)&dword_1EE67D968 + dword_1EE67D968);
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sub_1A2A52A18;
  return v6();
}

uint64_t sub_1A2A52A18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A52A7C()
{
  uint64_t v0;

  sub_1A297DA3C(*(_QWORD *)(v0 + 48), type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A52AC4()
{
  uint64_t v0;

  sub_1A297DA3C(*(_QWORD *)(v0 + 48), type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.init(transaction:tap:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_1A297EB48(a1, a3, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  v5 = type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
  return sub_1A297EB48(a2, a3 + *(int *)(v5 + 20), type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
}

uint64_t SFAirDropClient.boopAtADistance(end:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A52B74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D978 + dword_1EE67D978);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.endNearbySharingInteraction(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A52BF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D988 + dword_1EE67D988);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A432F0;
  return v3((uint64_t)v3, *(_QWORD *)(v0 + 16));
}

uint64_t SFAirDropClient.requestUserInteractionOwnership()()
{
  return swift_task_switch();
}

uint64_t sub_1A2A52C68()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A297AFB8();
  swift_allocError();
  *(_QWORD *)v1 = 0xD000000000000021;
  *(_QWORD *)(v1 + 8) = 0x80000001A2B47460;
  *(_QWORD *)(v1 + 16) = 0xD00000000000004DLL;
  *(_QWORD *)(v1 + 24) = 0x80000001A2B47490;
  *(_QWORD *)(v1 + 32) = 197;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0x4000000000000000;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t SFAirDropClient.showIntervention(workflow:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 40) = *a2;
  return swift_task_switch();
}

uint64_t sub_1A2A52D38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, char);

  v3 = (uint64_t (*)(uint64_t, char))((char *)&dword_1EE67D9A0 + dword_1EE67D9A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A29B5DB8;
  return v3(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 40));
}

uint64_t SFAirDropClient.showItemDestinationAlert(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A2A52DBC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D9B0 + dword_1EE67D9B0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A2A52E24;
  return v3(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A2A52E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t SFAirDropClient.fetchEndpointMetadata(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A2A52EA4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE67D9C0 + dword_1EE67D9C0);
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_1A2A5C364;
  return v3(v0[2], v0[3]);
}

uint64_t sub_1A2A52F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t sub_1A2A52F24()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
  {
    v5 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67DCA0 + dword_1EE67DCA0);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = sub_1A2A5304C;
    return v5(*(_QWORD *)(v0 + 40));
  }
  else
  {
    sub_1A297AFB8();
    swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000023;
    *(_QWORD *)(v4 + 8) = 0x80000001A2B47BA0;
    *(_QWORD *)(v4 + 16) = 0xD00000000000004DLL;
    *(_QWORD *)(v4 + 24) = 0x80000001A2B47490;
    *(_QWORD *)(v4 + 32) = 222;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A2A5304C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A2A530B0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A2A530E4()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

objc_class *SFAirDropClient.userDefaultsDescriptions.getter()
{
  return sub_1A2A3A3D8();
}

Swift::Void __swiftcall SFAirDropClient.invalidate()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 112) + 16), sel_invalidate);
}

void SFAirDropClient.__allocating_init()()
{
  swift_allocObject();
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SFAirDropClient.init()()
{
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t SFAirDropClient.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t static SFAirDropInvocations.Send.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.Cancel.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.FetchUserDefaults.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.FetchEndpointMetadata.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.TransfersMonitor.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.BecomeTransferPresenter.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SFAirDropInvocations.BecomeTransferPresenter.Parameters.clientIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
}

double SFAirDropInvocations.BecomeTransferPresenter.Parameters.animationRect.getter()
{
  uint64_t v0;

  return *(double *)(v0
                   + *(int *)(type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0)
                            + 20));
}

uint64_t sub_1A2A5330C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F6974616D696E61;
  else
    return 0xD000000000000010;
}

uint64_t sub_1A2A53358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A59CB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A5337C()
{
  sub_1A2A560FC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A533A4()
{
  sub_1A2A560FC();
  return sub_1A2AE4108();
}

uint64_t SFAirDropInvocations.BecomeTransferPresenter.Parameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 v10;
  _BYTE v12[16];
  __int128 v13;
  __int128 v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D9C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A560FC();
  sub_1A2AE40E4();
  LOBYTE(v13) = 0;
  type metadata accessor for SFAirDropClient.Identifier();
  sub_1A296E8A4(&qword_1EE67B718, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
  sub_1A2AE3E2C();
  if (!v2)
  {
    v9 = (__int128 *)(v3
                    + *(int *)(type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0)
                             + 20));
    v10 = v9[1];
    v13 = *v9;
    v14 = v10;
    v12[15] = 1;
    type metadata accessor for CGRect(0);
    sub_1A296E8A4(&qword_1EE67D9D8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SFAirDropInvocations.BecomeTransferPresenter.Parameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v20 = a2;
  v21 = type metadata accessor for SFAirDropClient.Identifier();
  MEMORY[0x1E0C80A78](v21);
  v22 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D9E0);
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A560FC();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v19 = v8;
  v11 = (uint64_t)v10;
  LOBYTE(v24) = 0;
  sub_1A296E8A4(&qword_1EE67B750, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropClient.Identifier, (uint64_t)&protocol conformance descriptor for SFAirDropClient.Identifier);
  v12 = (uint64_t)v22;
  v13 = v23;
  sub_1A2AE3D78();
  sub_1A297EB48(v12, v11, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
  type metadata accessor for CGRect(0);
  v26 = 1;
  sub_1A296E8A4(&qword_1EE67D9E8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
  sub_1A2AE3D78();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v20;
  v15 = (_OWORD *)(v11 + *(int *)(v19 + 20));
  v16 = v25;
  *v15 = v24;
  v15[1] = v16;
  sub_1A2990388(v11, v14, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return sub_1A297DA3C(v11, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
}

uint64_t sub_1A2A537E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropInvocations.BecomeTransferPresenter.Parameters.init(from:)(a1, a2);
}

uint64_t sub_1A2A537FC(_QWORD *a1)
{
  return SFAirDropInvocations.BecomeTransferPresenter.Parameters.encode(to:)(a1);
}

uint64_t static SFAirDropInvocations.ResignTransferPresenter.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.SendTransfersMonitor.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.NearbySharingInteractions.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.StartNearbySharingDiscovery.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.StopNearbySharingDiscovery.supportsSecureCoding.getter()
{
  return 1;
}

id SFAirDropInvocations.StopNearbySharingDiscovery.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SFAirDropInvocations.StopNearbySharingDiscovery.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1A2A00984(a1);

  return v4;
}

id SFAirDropInvocations.StopNearbySharingDiscovery.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1A2A00984(a1);

  return v2;
}

uint64_t static SFAirDropInvocations.TakeNearbySharingAssertion.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.ReleaseNearbySharingAssertion.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.SimulateNearbySharingInteractions.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.BoopAtADistanceBegin.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.BoopAtADistanceUpdate.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.transaction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2990388(v1, a1, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
}

uint64_t SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.tap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
  return sub_1A2990388(v1 + *(int *)(v3 + 20), a1, type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
}

uint64_t sub_1A2A53A94()
{
  _BYTE *v0;

  if (*v0)
    return 7364980;
  else
    return 0x746361736E617274;
}

uint64_t sub_1A2A53AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A59DC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A53AF4()
{
  sub_1A2A56140();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A53B1C()
{
  sub_1A2A56140();
  return sub_1A2AE4108();
}

uint64_t SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67D9F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A56140();
  sub_1A2AE40E4();
  v8[15] = 0;
  type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  sub_1A296E8A4(&qword_1EE67D730, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.Transaction);
  sub_1A2AE3E2C();
  if (!v1)
  {
    type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
    v8[14] = 1;
    type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
    sub_1A296E8A4(&qword_1EE67DA00, type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.TapEvent);
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v20 = a2;
  v21 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  MEMORY[0x1E0C80A78](v21);
  v22 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  MEMORY[0x1E0C80A78](v23);
  v24 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA08);
  v6 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A56140();
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v19 = a1;
  v12 = v6;
  v13 = (uint64_t)v11;
  v14 = (uint64_t)v22;
  v27 = 0;
  sub_1A296E8A4(&qword_1EE67DA10, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.Transaction);
  v15 = (uint64_t)v24;
  v16 = v25;
  sub_1A2AE3D78();
  sub_1A297EB48(v15, v13, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  v26 = 1;
  sub_1A296E8A4(&qword_1EE67DA18, type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.TapEvent);
  sub_1A2AE3D78();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v16);
  sub_1A297EB48(v14, v13 + *(int *)(v9 + 20), type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
  sub_1A2990388(v13, v20, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
  return sub_1A297DA3C(v13, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
}

uint64_t sub_1A2A53FA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.init(from:)(a1, a2);
}

uint64_t sub_1A2A53FB8(_QWORD *a1)
{
  return SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.encode(to:)(a1);
}

uint64_t static SFAirDropInvocations.BoopAtADistanceEnd.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.EndNearbySharingInteraction.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.StartTempPairing.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.StopTempPairing.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.TempPairingMonitor.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.SharingName.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.TempPairingConnect.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static SFAirDropInvocations.TempPairingDisconnect.supportsSecureCoding.getter()
{
  return 1;
}

id _s7Sharing20SFAirDropInvocationsO4SendC4nameAESS_tcfC_0(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___SFXPCInvocation_name];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v8, sel_init);
}

id _s7Sharing20SFAirDropInvocationsO4SendC4nameAESS_tcfc_0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;

  v3 = &v2[OBJC_IVAR___SFXPCInvocation_name];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SFXPCInvocation();
  return objc_msgSendSuper2(&v5, sel_init);
}

id _s7Sharing20SFAirDropInvocationsO4SendCAEycfc_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.applicationLabel.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.publicKeyData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1A2973524(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.bonjourUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A54FF4(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], a1);
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.init(applicationLabel:publicKeyData:bonjourUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v7;
  uint64_t v8;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v7 = (char *)a6 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v8 = sub_1A2AE3130();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a5, v8);
}

unint64_t sub_1A2A542E8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x654B63696C627570;
  if (*v0 != 1)
    v1 = 0x5572756F6A6E6F62;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1A2A5435C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A59EC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A54380()
{
  sub_1A2A56198();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A543A8()
{
  sub_1A2A56198();
  return sub_1A2AE4108();
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A56198();
  sub_1A2AE40E4();
  LOBYTE(v11) = 0;
  sub_1A2AE3DF0();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + 16);
    v10[15] = 1;
    sub_1A29735F8();
    sub_1A2AE3E2C();
    type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
    LOBYTE(v11) = 2;
    sub_1A2AE3130();
    sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1A2AE3E2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SFAirDropClient.BoopAtADistance.ServerInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  char v31;

  v24 = a2;
  v3 = sub_1A2AE3130();
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA30);
  v6 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1A2A56198();
  v13 = v29;
  sub_1A2AE40C0();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v28);
  v23 = v9;
  v14 = v6;
  v29 = v5;
  v16 = v25;
  v15 = v26;
  LOBYTE(v30) = 0;
  v17 = v27;
  v18 = (uint64_t)v11;
  *(_QWORD *)v11 = sub_1A2AE3D3C();
  *((_QWORD *)v11 + 1) = v19;
  v31 = 1;
  sub_1A2973680();
  sub_1A2AE3D78();
  *((_OWORD *)v11 + 1) = v30;
  LOBYTE(v30) = 2;
  sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v20 = v29;
  sub_1A2AE3D78();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18 + *(int *)(v23 + 24), v20, v15);
  sub_1A2990388(v18, v24, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v28);
  return sub_1A297DA3C(v18, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
}

uint64_t sub_1A2A54824@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropClient.BoopAtADistance.ServerInfo.init(from:)(a1, a2);
}

uint64_t sub_1A2A54838(_QWORD *a1)
{
  return SFAirDropClient.BoopAtADistance.ServerInfo.encode(to:)(a1);
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1A2AE3130();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.connectionDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0) + 20);
  v4 = sub_1A2AE30C4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.isInitiator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0) + 24));
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.init(identifier:connectionDate:isInitiator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v10 = a4 + *(int *)(v9 + 20);
  v11 = sub_1A2AE30C4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_BYTE *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

uint64_t sub_1A2A54980()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x697463656E6E6F63;
  if (*v0 != 1)
    v1 = 0x616974696E497369;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_1A2A549F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A5A04C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A2A54A18()
{
  sub_1A2A561DC();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A54A40()
{
  sub_1A2A561DC();
  return sub_1A2AE4108();
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA38);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A561DC();
  sub_1A2AE40E4();
  v8[15] = 0;
  sub_1A2AE3130();
  sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_1A2AE3E2C();
  if (!v1)
  {
    type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
    v8[14] = 1;
    sub_1A2AE30C4();
    sub_1A296E8A4(&qword_1EE67AB88, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1A2AE3E2C();
    v8[13] = 2;
    sub_1A2AE3DFC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFAirDropClient.BoopAtADistance.Transaction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;

  v24 = a2;
  v3 = sub_1A2AE30C4();
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1A2AE3130();
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v29 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA48);
  v7 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A561DC();
  v31 = v9;
  v13 = v32;
  sub_1A2AE40C0();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v32 = v7;
  v22 = v10;
  v23 = v5;
  v14 = (uint64_t)v12;
  v16 = v25;
  v15 = v26;
  v17 = v27;
  v35 = 0;
  sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v18 = v28;
  sub_1A2AE3D78();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v14, v29, v18);
  v34 = 1;
  sub_1A296E8A4(&qword_1EE67AC10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  sub_1A2AE3D78();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14 + *(int *)(v22 + 20), v16, v17);
  v33 = 2;
  v19 = sub_1A2AE3D48();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v30);
  *(_BYTE *)(v14 + *(int *)(v22 + 24)) = v19 & 1;
  sub_1A2990388(v14, v24, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return sub_1A297DA3C(v14, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction);
}

uint64_t sub_1A2A54F8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropClient.BoopAtADistance.Transaction.init(from:)(a1, a2);
}

uint64_t sub_1A2A54FA0(_QWORD *a1)
{
  return SFAirDropClient.BoopAtADistance.Transaction.encode(to:)(a1);
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.applicationLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1A2A54FF4(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t sub_1A2A54FF4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.isSameAccount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 28));
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.deviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.deviceModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.accountID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.contactID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.shouldForceSingleBandAWDLMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 48));
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.remoteServerInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  return sub_1A2990388(v1 + *(int *)(v3 + 52), a1, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.isKnownIdentity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 56));
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.isUnsupportedApplicationLabel.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0) + 60));
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.init(identifier:applicationLabel:date:isSameAccount:deviceName:deviceModel:accountID:contactID:remoteServerInfo:shouldForceSingleBandAWDLMode:isKnownIdentity:isUnsupportedApplicationLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18, char a19)
{
  int *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t result;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v22 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v23 = (char *)a9 + v22[6];
  v24 = sub_1A2AE30C4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a5, v24);
  *((_BYTE *)a9 + v22[7]) = a6;
  v25 = (_QWORD *)((char *)a9 + v22[8]);
  *v25 = a7;
  v25[1] = a8;
  v26 = (_QWORD *)((char *)a9 + v22[9]);
  *v26 = a10;
  v26[1] = a11;
  v27 = (_QWORD *)((char *)a9 + v22[10]);
  *v27 = a12;
  v27[1] = a13;
  v28 = (_QWORD *)((char *)a9 + v22[11]);
  *v28 = a14;
  v28[1] = a15;
  result = sub_1A297EB48(a16, (uint64_t)a9 + v22[13], type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
  *((_BYTE *)a9 + v22[12]) = a17;
  *((_BYTE *)a9 + v22[14]) = a18;
  *((_BYTE *)a9 + v22[15]) = a19;
  return result;
}

uint64_t sub_1A2A55338(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A2A55374 + 4 * aI_3[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1A2A55374()
{
  return 0xD000000000000010;
}

uint64_t sub_1A2A55454()
{
  return 0x496E776F6E4B7369;
}

void sub_1A2A55478()
{
  JUMPOUT(0x1A2A55490);
}

uint64_t sub_1A2A5549C()
{
  unsigned __int8 *v0;

  return sub_1A2A55338(*v0);
}

uint64_t sub_1A2A554A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A2A5A1E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A2A554C8(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1A2A554D4()
{
  sub_1A2A56220();
  return sub_1A2AE40FC();
}

uint64_t sub_1A2A554FC()
{
  sub_1A2A56220();
  return sub_1A2AE4108();
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A56220();
  sub_1A2AE40E4();
  v8[15] = 0;
  sub_1A2AE3DF0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1A2AE3DF0();
    type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
    v8[13] = 2;
    sub_1A2AE30C4();
    sub_1A296E8A4(&qword_1EE67AB88, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1A2AE3E2C();
    v8[12] = 3;
    sub_1A2AE3DFC();
    v8[11] = 4;
    sub_1A2AE3DC0();
    v8[10] = 5;
    sub_1A2AE3DC0();
    v8[9] = 6;
    sub_1A2AE3DC0();
    v8[8] = 7;
    sub_1A2AE3DC0();
    v8[7] = 8;
    sub_1A2AE3DFC();
    v8[6] = 9;
    type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
    sub_1A296E8A4(&qword_1EE67DA60, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.ServerInfo);
    sub_1A2AE3E2C();
    v8[5] = 10;
    sub_1A2AE3DFC();
    v8[4] = 11;
    sub_1A2AE3DFC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SFAirDropClient.BoopAtADistance.TapEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  int *v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v38 = a2;
  v4 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A2AE30C4();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67DA68);
  v10 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  MEMORY[0x1E0C80A78](v45);
  v43 = a1;
  v44 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1A2A56220();
  v39 = v12;
  sub_1A2AE40C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v43);
  v14 = (uint64_t)v6;
  v15 = v10;
  v57 = 0;
  v16 = sub_1A2AE3D3C();
  v17 = (char *)v44;
  *v44 = v16;
  *((_QWORD *)v17 + 1) = v18;
  v56 = 1;
  *((_QWORD *)v17 + 2) = sub_1A2AE3D3C();
  *((_QWORD *)v17 + 3) = v19;
  v55 = 2;
  sub_1A296E8A4(&qword_1EE67AC10, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v20 = v42;
  sub_1A2AE3D78();
  v21 = v45;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v17[v45[6]], v9, v20);
  v54 = 3;
  v17[v21[7]] = sub_1A2AE3D48() & 1;
  v53 = 4;
  v22 = sub_1A2AE3D00();
  v23 = (uint64_t *)&v17[v21[8]];
  *v23 = v22;
  v23[1] = v24;
  v52 = 5;
  v25 = sub_1A2AE3D00();
  v26 = (uint64_t *)&v17[v21[9]];
  *v26 = v25;
  v26[1] = v27;
  v51 = 6;
  v28 = sub_1A2AE3D00();
  v29 = (uint64_t *)&v17[v21[10]];
  *v29 = v28;
  v29[1] = v30;
  v50 = 7;
  v31 = sub_1A2AE3D00();
  v32 = (uint64_t *)&v17[v21[11]];
  *v32 = v31;
  v32[1] = v33;
  v49 = 8;
  v17[v21[12]] = sub_1A2AE3D48() & 1;
  v48 = 9;
  sub_1A296E8A4(&qword_1EE67D750, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.ServerInfo);
  sub_1A2AE3D78();
  sub_1A297EB48(v14, (uint64_t)v44 + v45[13], type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo);
  v47 = 10;
  *((_BYTE *)v44 + v45[14]) = sub_1A2AE3D48() & 1;
  v46 = 11;
  v35 = sub_1A2AE3D48();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v39, v40);
  v36 = (uint64_t)v44;
  *((_BYTE *)v44 + v45[15]) = v35 & 1;
  sub_1A2990388(v36, v38, type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v43);
  return sub_1A297DA3C(v36, type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent);
}

uint64_t sub_1A2A55F0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SFAirDropClient.BoopAtADistance.TapEvent.init(from:)(a1, a2);
}

uint64_t sub_1A2A55F20(_QWORD *a1)
{
  return SFAirDropClient.BoopAtADistance.TapEvent.encode(to:)(a1);
}

uint64_t sub_1A2A55F34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A2972038;
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_1EE67D8C8 + dword_1EE67D8C8);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1A2971EBC;
  return v6(a1);
}

uint64_t sub_1A2A55FBC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A2A55FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1A2972038;
  return sub_1A2A51BD8(a1, v5, v4);
}

uint64_t type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters(uint64_t a1)
{
  return sub_1A29903E0(a1, qword_1EE67DB28);
}

uint64_t sub_1A2A56060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A2971EBC;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE67DB60);
}

uint64_t type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE67DB80);
}

uint64_t type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE67DB90);
}

unint64_t sub_1A2A560FC()
{
  unint64_t result;

  result = qword_1EE67D9D0;
  if (!qword_1EE67D9D0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B064AC, &type metadata for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D9D0);
  }
  return result;
}

unint64_t sub_1A2A56140()
{
  unint64_t result;

  result = qword_1EE67D9F8;
  if (!qword_1EE67D9F8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0645C, &type metadata for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67D9F8);
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE67DB70);
}

unint64_t sub_1A2A56198()
{
  unint64_t result;

  result = qword_1EE67DA28;
  if (!qword_1EE67DA28)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0640C, &type metadata for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DA28);
  }
  return result;
}

unint64_t sub_1A2A561DC()
{
  unint64_t result;

  result = qword_1EE67DA40;
  if (!qword_1EE67DA40)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B063BC, &type metadata for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DA40);
  }
  return result;
}

unint64_t sub_1A2A56220()
{
  unint64_t result;

  result = qword_1EE67DA58;
  if (!qword_1EE67DA58)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0636C, &type metadata for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DA58);
  }
  return result;
}

uint64_t sub_1A2A56264()
{
  return sub_1A296E8A4(&qword_1EE67DA70, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Request, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Request);
}

uint64_t sub_1A2A56290()
{
  return sub_1A296E8A4(&qword_1EE67D7C8, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDropSend.Request, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Request);
}

uint64_t sub_1A2A562BC()
{
  return sub_1A296E5E4(&qword_1EE67D7C0, &qword_1EE67D7B8, (uint64_t)&protocol conformance descriptor for SFXPCProgressTask<A, B>);
}

uint64_t sub_1A2A562E8()
{
  return sub_1A296E5E4(&qword_1EE67DA78, &qword_1EE67D7B8, (uint64_t)&protocol conformance descriptor for SFXPCProgressTask<A, B>);
}

uint64_t sub_1A2A56314()
{
  return sub_1A296E8A4(&qword_1EE67C988, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

uint64_t sub_1A2A56340()
{
  return sub_1A296E8A4(&qword_1EE67C938, (uint64_t (*)(uint64_t))type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_1A2A56374()
{
  unint64_t result;

  result = qword_1EE6746A0;
  if (!qword_1EE6746A0)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for VoidResponse, &type metadata for VoidResponse);
    atomic_store(result, (unint64_t *)&qword_1EE6746A0);
  }
  return result;
}

unint64_t sub_1A2A563BC()
{
  unint64_t result;

  result = qword_1EE674718;
  if (!qword_1EE674718)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for VoidParameters, &type metadata for VoidParameters);
    atomic_store(result, (unint64_t *)&qword_1EE674718);
  }
  return result;
}

uint64_t sub_1A2A56404()
{
  return sub_1A2A5645C((unint64_t *)&qword_1EE67D6F8, (uint64_t (*)(void))sub_1A2A455E8, MEMORY[0x1E0DEAF40]);
}

uint64_t sub_1A2A56430()
{
  return sub_1A2A5645C(&qword_1EE67DA80, (uint64_t (*)(void))sub_1A2A564C4, MEMORY[0x1E0DEAF10]);
}

uint64_t sub_1A2A5645C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE67D6F0);
    v8 = a2();
    result = MEMORY[0x1A85895EC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A2A564C4()
{
  unint64_t result;

  result = qword_1EE67DA88;
  if (!qword_1EE67DA88)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFUserDefaultDescription, &type metadata for SFUserDefaultDescription);
    atomic_store(result, (unint64_t *)&qword_1EE67DA88);
  }
  return result;
}

uint64_t sub_1A2A56508()
{
  return sub_1A296E8A4(&qword_1EE676788, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
}

uint64_t sub_1A2A56534()
{
  return sub_1A296E8A4(&qword_1EE6766D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
}

unint64_t sub_1A2A56568()
{
  unint64_t result;

  result = qword_1EE67DA90;
  if (!qword_1EE67DA90)
  {
    result = MEMORY[0x1A85895EC](&protocol conformance descriptor for SFAirDrop.EndpointMetadata, &type metadata for SFAirDrop.EndpointMetadata);
    atomic_store(result, (unint64_t *)&qword_1EE67DA90);
  }
  return result;
}

uint64_t sub_1A2A565AC()
{
  return sub_1A296E5E4(&qword_1EE67D798, &qword_1EE67D790, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A565D8()
{
  return sub_1A296E5E4(&qword_1EE67DA98, &qword_1EE67D790, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A56604()
{
  return sub_1A296E8A4(&qword_1EE67DAA0, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
}

uint64_t sub_1A2A56630()
{
  return sub_1A296E8A4(&qword_1EE67D7A0, type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BecomeTransferPresenter.Parameters);
}

uint64_t sub_1A2A5665C()
{
  return sub_1A296E5E4(&qword_1EE674808, &qword_1EE674810, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A56688()
{
  return sub_1A296E5E4(&qword_1EE674800, &qword_1EE674810, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A566B4()
{
  return sub_1A296E8A4(&qword_1EE674F18, type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingDiscovery.Request);
}

uint64_t sub_1A2A566E0()
{
  return sub_1A296E8A4(&qword_1EE674F10, type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingDiscovery.Request);
}

uint64_t sub_1A2A5670C()
{
  return MEMORY[0x1E0DEA9A0];
}

uint64_t sub_1A2A56718()
{
  return MEMORY[0x1E0DEA970];
}

uint64_t sub_1A2A56724()
{
  return sub_1A296E8A4(&qword_1EE67DAA8, type metadata accessor for SFAirDrop.NearbySharingAssertionRequest, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingAssertionRequest);
}

uint64_t sub_1A2A56750()
{
  return sub_1A296E8A4(&qword_1EE67D770, type metadata accessor for SFAirDrop.NearbySharingAssertionRequest, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingAssertionRequest);
}

uint64_t sub_1A2A5677C()
{
  return sub_1A2A567E4((unint64_t *)&qword_1EE67D768, &qword_1EE676788, MEMORY[0x1E0CB09E0], MEMORY[0x1E0DEE9A0]);
}

uint64_t sub_1A2A567B0()
{
  return sub_1A2A567E4(&qword_1EE67DAB0, &qword_1EE6766D8, MEMORY[0x1E0CB09B8], MEMORY[0x1E0DEE988]);
}

uint64_t sub_1A2A567E4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EE6745C8);
    v10 = sub_1A296E8A4(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], a3);
    result = MEMORY[0x1A85895EC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A2A56868()
{
  return sub_1A296E8A4(&qword_1EE67DAB8, type metadata accessor for SFAirDrop.NearbySharingInteraction, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction);
}

uint64_t sub_1A2A56894()
{
  return sub_1A296E8A4(&qword_1EE67D758, type metadata accessor for SFAirDrop.NearbySharingInteraction, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction);
}

uint64_t sub_1A2A568C0()
{
  return sub_1A296E8A4(&qword_1EE67DA10, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.Transaction);
}

uint64_t sub_1A2A568EC()
{
  return sub_1A296E8A4(&qword_1EE67D730, type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.Transaction);
}

uint64_t sub_1A2A56918()
{
  return sub_1A296E8A4(&qword_1EE67D750, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.ServerInfo);
}

uint64_t sub_1A2A56944()
{
  return sub_1A296E8A4(&qword_1EE67DA60, type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo, (uint64_t)&protocol conformance descriptor for SFAirDropClient.BoopAtADistance.ServerInfo);
}

uint64_t sub_1A2A56970()
{
  return sub_1A296E8A4(&qword_1EE67DAC0, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
}

uint64_t sub_1A2A5699C()
{
  return sub_1A296E8A4(&qword_1EE67D740, type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters, (uint64_t)&protocol conformance descriptor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters);
}

uint64_t sub_1A2A569C8()
{
  return sub_1A296E5E4(&qword_1EE67D800, &qword_1EE67D7F8, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A569F4()
{
  return sub_1A296E5E4(&qword_1EE67DAC8, &qword_1EE67D7F8, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A56A20()
{
  return sub_1A296E5E4(&qword_1EE675D30, &qword_1EE676490, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A56A4C()
{
  return sub_1A296E5E4(&qword_1EE675DC0, &qword_1EE676490, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>);
}

uint64_t sub_1A2A56A78()
{
  return type metadata accessor for SFAirDropClient(0);
}

uint64_t type metadata accessor for SFAirDropClient(uint64_t a1)
{
  return sub_1A29903E0(a1, (uint64_t *)&unk_1EE674748);
}

uint64_t sub_1A2A56A94()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SFAirDropClient.Identifier();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SFAirDropClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SFAirDropClient.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for SFAirDropInvocations()
{
  return &type metadata for SFAirDropInvocations;
}

uint64_t type metadata accessor for SFAirDropInvocations.Send()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.Cancel()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.FetchUserDefaults()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.FetchEndpointMetadata()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.TransfersMonitor()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for SFAirDropInvocations.BecomeTransferPresenter.Parameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SFAirDropClient.Identifier();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v9 = sub_1A2AE3130();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    v12 = *(int *)(a3 + 20);
    v13 = (_OWORD *)((char *)a1 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
  }
  return a1;
}

uint64_t destroy for SFAirDropInvocations.BecomeTransferPresenter.Parameters(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for SFAirDropClient.Identifier();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease();
  if (!(_DWORD)result)
  {
    v3 = sub_1A2AE3130();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for SFAirDropInvocations.BecomeTransferPresenter.Parameters(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  v6 = type metadata accessor for SFAirDropClient.Identifier();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = sub_1A2AE3130();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  v10 = *(int *)(a3 + 20);
  v11 = (_OWORD *)((char *)a1 + v10);
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  return a1;
}

_QWORD *assignWithCopy for SFAirDropInvocations.BecomeTransferPresenter.Parameters(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
    v6 = type metadata accessor for SFAirDropClient.Identifier();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = sub_1A2AE3130();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  v10[2] = v11[2];
  v10[3] = v11[3];
  return a1;
}

char *initializeWithTake for SFAirDropInvocations.BecomeTransferPresenter.Parameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  v6 = type metadata accessor for SFAirDropClient.Identifier();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  return a1;
}

char *assignWithTake for SFAirDropInvocations.BecomeTransferPresenter.Parameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (a1 != a2)
  {
    sub_1A297DA3C((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SFAirDropClient.Identifier);
    v6 = type metadata accessor for SFAirDropClient.Identifier();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = sub_1A2AE3130();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAirDropInvocations.BecomeTransferPresenter.Parameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A570D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropClient.Identifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SFAirDropInvocations.BecomeTransferPresenter.Parameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A57120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDropClient.Identifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1A2A57160()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SFAirDropClient.Identifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropInvocations.ResignTransferPresenter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.SendTransfersMonitor()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.NearbySharingInteractions()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.StartNearbySharingDiscovery()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.StopNearbySharingDiscovery()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.TakeNearbySharingAssertion()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.ReleaseNearbySharingAssertion()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.SimulateNearbySharingInteractions()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.BoopAtADistanceBegin()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate()
{
  return objc_opt_self();
}

char *initializeBufferWithCopyOfBuffer for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v46 = (char *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE3130();
    v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v51 = v7;
    v50(a1, a2, v7);
    v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
    v9 = *(int *)(v8 + 20);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_1A2AE30C4();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    a1[*(int *)(v8 + 24)] = a2[*(int *)(v8 + 24)];
    v14 = *(int *)(a3 + 20);
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *(_QWORD *)&a2[v14 + 8];
    *(_QWORD *)v15 = *(_QWORD *)&a2[v14];
    *((_QWORD *)v15 + 1) = v17;
    v18 = *(_QWORD *)&a2[v14 + 24];
    *((_QWORD *)v15 + 2) = *(_QWORD *)&a2[v14 + 16];
    *((_QWORD *)v15 + 3) = v18;
    v19 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
    v20 = v19[6];
    v21 = &v15[v20];
    v22 = &v16[v20];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v21, v22, v12);
    v15[v19[7]] = v16[v19[7]];
    v23 = v19[8];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v19[9];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v49 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v49;
    v30 = v19[10];
    v31 = &v15[v30];
    v32 = &v16[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v19[11];
    v35 = &v15[v34];
    v36 = &v16[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v15[v19[12]] = v16[v19[12]];
    v38 = v19[13];
    v52 = a1;
    v39 = &v15[v38];
    v40 = &v16[v38];
    v41 = *(_QWORD *)&v16[v38 + 8];
    *(_QWORD *)v39 = *(_QWORD *)&v16[v38];
    *((_QWORD *)v39 + 1) = v41;
    v42 = *(_QWORD *)&v16[v38 + 16];
    v43 = *(_QWORD *)&v16[v38 + 24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A2973524(v42, v43);
    *((_QWORD *)v39 + 2) = v42;
    *((_QWORD *)v39 + 3) = v43;
    v44 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
    v45 = &v39[v44];
    v46 = v52;
    v50(v45, &v40[v44], v51);
    v15[v19[14]] = v16[v19[14]];
    v15[v19[15]] = v16[v19[15]];
  }
  return v46;
}

uint64_t destroy for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t);

  v4 = sub_1A2AE3130();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v13(a1, v4);
  v5 = a1 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0) + 20);
  v6 = sub_1A2AE30C4();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v7(v8 + *(int *)(v9 + 24), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v8 + *(int *)(v9 + 52);
  swift_bridgeObjectRelease();
  sub_1A29736C4(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
  v11 = v10 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11, v4);
}

uint64_t initializeWithCopy for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;

  v6 = sub_1A2AE3130();
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v49 = v6;
  v48(a1, a2, v6);
  v7 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1A2AE30C4();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v47 = a1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = *(_QWORD *)(a2 + v13);
  v17 = v15[1];
  *v14 = v16;
  v14[1] = v17;
  v18 = v15[3];
  v14[2] = v15[2];
  v14[3] = v18;
  v19 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v20 = v19[6];
  v21 = (char *)v14 + v20;
  v22 = (char *)v15 + v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12((uint64_t)v21, (uint64_t)v22, v11);
  *((_BYTE *)v14 + v19[7]) = *((_BYTE *)v15 + v19[7]);
  v23 = v19[8];
  v24 = (_QWORD *)((char *)v14 + v23);
  v25 = (_QWORD *)((char *)v15 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v19[9];
  v28 = (_QWORD *)((char *)v14 + v27);
  v29 = (_QWORD *)((char *)v15 + v27);
  v46 = v29[1];
  *v28 = *v29;
  v28[1] = v46;
  v30 = v19[10];
  v31 = (_QWORD *)((char *)v14 + v30);
  v32 = (_QWORD *)((char *)v15 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = v19[11];
  v35 = (_QWORD *)((char *)v14 + v34);
  v36 = (_QWORD *)((char *)v15 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  *((_BYTE *)v14 + v19[12]) = *((_BYTE *)v15 + v19[12]);
  v38 = v19[13];
  v39 = (_QWORD *)((char *)v14 + v38);
  v40 = (char *)v15 + v38;
  v41 = *(_QWORD *)((char *)v15 + v38 + 8);
  *v39 = *(_QWORD *)((char *)v15 + v38);
  v39[1] = v41;
  v42 = *(_QWORD *)((char *)v15 + v38 + 16);
  v43 = *(_QWORD *)((char *)v15 + v38 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A2973524(v42, v43);
  v39[2] = v42;
  v39[3] = v43;
  v44 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  v48((uint64_t)v39 + *(int *)(v44 + 24), (uint64_t)&v40[*(int *)(v44 + 24)], v49);
  *((_BYTE *)v14 + v19[14]) = *((_BYTE *)v15 + v19[14]);
  *((_BYTE *)v14 + v19[15]) = *((_BYTE *)v15 + v19[15]);
  return v47;
}

char *assignWithCopy for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v6 = sub_1A2AE3130();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v9 = *(int *)(v8 + 20);
  v10 = &a1[v9];
  v11 = a2 + v9;
  v12 = sub_1A2AE30C4();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24);
  v13(v10, v11, v12);
  a1[*(int *)(v8 + 24)] = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)(a2 + v14);
  *((_QWORD *)v15 + 1) = *(_QWORD *)(a2 + v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v15 + 2) = *(_QWORD *)(v16 + 16);
  *((_QWORD *)v15 + 3) = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v13(&v15[v17[6]], v16 + v17[6], v12);
  v15[v17[7]] = *(_BYTE *)(v16 + v17[7]);
  v18 = v17[8];
  v19 = &v15[v18];
  v20 = (_QWORD *)(v16 + v18);
  *(_QWORD *)v19 = *v20;
  *((_QWORD *)v19 + 1) = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v17[9];
  v22 = &v15[v21];
  v23 = (_QWORD *)(v16 + v21);
  *(_QWORD *)v22 = *v23;
  *((_QWORD *)v22 + 1) = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v17[10];
  v25 = &v15[v24];
  v26 = (_QWORD *)(v16 + v24);
  *(_QWORD *)v25 = *v26;
  *((_QWORD *)v25 + 1) = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = v17[11];
  v28 = &v15[v27];
  v29 = (_QWORD *)(v16 + v27);
  *(_QWORD *)v28 = *v29;
  *((_QWORD *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[v17[12]] = *(_BYTE *)(v16 + v17[12]);
  v30 = v17[13];
  v31 = &v15[v30];
  v32 = v16 + v30;
  *(_QWORD *)v31 = *(_QWORD *)(v16 + v30);
  *((_QWORD *)v31 + 1) = *(_QWORD *)(v16 + v30 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(v32 + 16);
  v34 = *(_QWORD *)(v32 + 24);
  sub_1A2973524(v33, v34);
  v35 = *((_QWORD *)v31 + 2);
  v36 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v31 + 2) = v33;
  *((_QWORD *)v31 + 3) = v34;
  sub_1A29736C4(v35, v36);
  v37 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  v7(&v31[*(int *)(v37 + 24)], v32 + *(int *)(v37 + 24), v6);
  v15[v17[14]] = *(_BYTE *)(v16 + v17[14]);
  v15[v17[15]] = *(_BYTE *)(v16 + v17[15]);
  return a1;
}

uint64_t initializeWithTake for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;

  v6 = sub_1A2AE3130();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v9 = *(int *)(v8 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1A2AE30C4();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v14 = *(int *)(a3 + 20);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v13((uint64_t)v15 + v18[6], (uint64_t)v16 + v18[6], v12);
  *((_BYTE *)v15 + v18[7]) = *((_BYTE *)v16 + v18[7]);
  *(_OWORD *)((char *)v15 + v18[8]) = *(_OWORD *)((char *)v16 + v18[8]);
  *(_OWORD *)((char *)v15 + v18[9]) = *(_OWORD *)((char *)v16 + v18[9]);
  *(_OWORD *)((char *)v15 + v18[10]) = *(_OWORD *)((char *)v16 + v18[10]);
  *(_OWORD *)((char *)v15 + v18[11]) = *(_OWORD *)((char *)v16 + v18[11]);
  *((_BYTE *)v15 + v18[12]) = *((_BYTE *)v16 + v18[12]);
  v19 = v18[13];
  v20 = (_OWORD *)((char *)v15 + v19);
  v21 = (char *)v16 + v19;
  v22 = *(_OWORD *)((char *)v16 + v19 + 16);
  *v20 = *(_OWORD *)((char *)v16 + v19);
  v20[1] = v22;
  v23 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  v7((uint64_t)v20 + *(int *)(v23 + 24), (uint64_t)&v21[*(int *)(v23 + 24)], v6);
  *((_BYTE *)v15 + v18[14]) = *((_BYTE *)v16 + v18[14]);
  *((_BYTE *)v15 + v18[15]) = *((_BYTE *)v16 + v18[15]);
  return a1;
}

uint64_t assignWithTake for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v6 = sub_1A2AE3130();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v9 = *(int *)(v8 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1A2AE30C4();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v14 = *(int *)(a3 + 20);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v18 = v16[3];
  v15[2] = v16[2];
  v15[3] = v18;
  swift_bridgeObjectRelease();
  v19 = (int *)type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v13((uint64_t)v15 + v19[6], (uint64_t)v16 + v19[6], v12);
  *((_BYTE *)v15 + v19[7]) = *((_BYTE *)v16 + v19[7]);
  v20 = v19[8];
  v21 = (_QWORD *)((char *)v15 + v20);
  v22 = (_QWORD *)((char *)v16 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = v19[9];
  v26 = (_QWORD *)((char *)v15 + v25);
  v27 = (_QWORD *)((char *)v16 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = v19[10];
  v31 = (_QWORD *)((char *)v15 + v30);
  v32 = (_QWORD *)((char *)v16 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = v19[11];
  v36 = (_QWORD *)((char *)v15 + v35);
  v37 = (_QWORD *)((char *)v16 + v35);
  v39 = *v37;
  v38 = v37[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  *((_BYTE *)v15 + v19[12]) = *((_BYTE *)v16 + v19[12]);
  v40 = v19[13];
  v41 = (_QWORD *)((char *)v15 + v40);
  v42 = (char *)v16 + v40;
  v43 = *(_QWORD *)((char *)v16 + v40 + 8);
  *v41 = *(_QWORD *)((char *)v16 + v40);
  v41[1] = v43;
  swift_bridgeObjectRelease();
  v44 = v41[2];
  v45 = v41[3];
  *((_OWORD *)v41 + 1) = *((_OWORD *)v42 + 1);
  sub_1A29736C4(v44, v45);
  v46 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
  v7((uint64_t)v41 + *(int *)(v46 + 24), (uint64_t)&v42[*(int *)(v46 + 24)], v6);
  *((_BYTE *)v15 + v19[14]) = *((_BYTE *)v16 + v19[14]);
  *((_BYTE *)v15 + v19[15]) = *((_BYTE *)v16 + v19[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A57E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A57EC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1A2A57F40()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for SFAirDropInvocations.BoopAtADistanceEnd()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.EndNearbySharingInteraction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.StartTempPairing()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.StopTempPairing()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.TempPairingMonitor()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.SharingName()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.TempPairingConnect()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SFAirDropInvocations.TempPairingDisconnect()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SFAirDropClient.BoopAtADistance()
{
  return &type metadata for SFAirDropClient.BoopAtADistance;
}

uint64_t *initializeBufferWithCopyOfBuffer for SFAirDropClient.BoopAtADistance.ServerInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    sub_1A2973524(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_1A2AE3130();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for SFAirDropClient.BoopAtADistance.ServerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_1A29736C4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1A2AE3130();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SFAirDropClient.BoopAtADistance.ServerInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  sub_1A2973524(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

_QWORD *assignWithCopy for SFAirDropClient.BoopAtADistance.ServerInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  sub_1A2973524(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_1A29736C4(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for SFAirDropClient.BoopAtADistance.ServerInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for SFAirDropClient.BoopAtADistance.ServerInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1A29736C4(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1A2AE3130();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.ServerInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A583DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A2AE3130();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.ServerInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A58464(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A2AE3130();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A2A584D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SFAirDropClient.BoopAtADistance.Transaction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1A2AE3130();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A2AE30C4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1A2AE30C4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for SFAirDropClient.BoopAtADistance.Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1A2AE3130();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.Transaction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A588B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_1A2AE3130();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1A2AE30C4();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.Transaction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A5897C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1A2AE3130();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1A2AE30C4();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_1A2A58A20()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A2AE3130();
  if (v1 <= 0x3F)
  {
    result = sub_1A2AE30C4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SFAirDropClient.BoopAtADistance.TapEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v42 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v42 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1A2AE30C4();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    v19 = a3[10];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)((char *)v4 + v19);
    v24 = (_QWORD *)((char *)a2 + v19);
    v44 = v24[1];
    *v23 = *v24;
    v23[1] = v44;
    v25 = a3[11];
    v26 = a3[12];
    v27 = (_QWORD *)((char *)v4 + v25);
    v28 = (_QWORD *)((char *)a2 + v25);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v28) = *((_BYTE *)a2 + v26);
    *v27 = v29;
    v27[1] = v30;
    *((_BYTE *)v4 + v26) = (_BYTE)v28;
    v31 = a3[13];
    v32 = (_QWORD *)((char *)v4 + v31);
    v33 = (char *)a2 + v31;
    v34 = *(_QWORD *)((char *)a2 + v31 + 8);
    *v32 = *(_QWORD *)((char *)a2 + v31);
    v32[1] = v34;
    v35 = *(_QWORD *)((char *)a2 + v31 + 16);
    v36 = *(_QWORD *)((char *)a2 + v31 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A2973524(v35, v36);
    v32[2] = v35;
    v32[3] = v36;
    v37 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
    v38 = (char *)v32 + v37;
    v39 = &v33[v37];
    v40 = sub_1A2AE3130();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    v41 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)v4 + v41) = *((_BYTE *)a2 + v41);
  }
  return v4;
}

uint64_t destroy for SFAirDropClient.BoopAtADistance.TapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1A2AE30C4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 52);
  swift_bridgeObjectRelease();
  sub_1A29736C4(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  v7 = v6 + *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v8 = sub_1A2AE3130();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

_QWORD *initializeWithCopy for SFAirDropClient.BoopAtADistance.TapEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1A2AE30C4();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  v18 = a3[10];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)((char *)a1 + v18);
  v23 = (_QWORD *)((char *)a2 + v18);
  v42 = v23[1];
  *v22 = *v23;
  v22[1] = v42;
  v24 = a3[11];
  v25 = a3[12];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = *v27;
  v29 = v27[1];
  LOBYTE(v27) = *((_BYTE *)a2 + v25);
  *v26 = v28;
  v26[1] = v29;
  *((_BYTE *)a1 + v25) = (_BYTE)v27;
  v30 = a3[13];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30 + 8);
  *v31 = *(_QWORD *)((char *)a2 + v30);
  v31[1] = v33;
  v34 = *(_QWORD *)((char *)a2 + v30 + 16);
  v35 = *(_QWORD *)((char *)a2 + v30 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A2973524(v34, v35);
  v31[2] = v34;
  v31[3] = v35;
  v36 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v37 = (char *)v31 + v36;
  v38 = &v32[v36];
  v39 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  v40 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  return a1;
}

_QWORD *assignWithCopy for SFAirDropClient.BoopAtADistance.TapEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10 = a3[8];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[9];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[10];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[11];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v22 = a3[13];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (char *)a2 + v22;
  *v23 = *(_QWORD *)((char *)a2 + v22);
  v23[1] = *(_QWORD *)((char *)a2 + v22 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = *((_QWORD *)v24 + 2);
  v26 = *((_QWORD *)v24 + 3);
  sub_1A2973524(v25, v26);
  v27 = v23[2];
  v28 = v23[3];
  v23[2] = v25;
  v23[3] = v26;
  sub_1A29736C4(v27, v28);
  v29 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v30 = (char *)v23 + v29;
  v31 = &v24[v29];
  v32 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

_OWORD *initializeWithTake for SFAirDropClient.BoopAtADistance.TapEvent(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[13];
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = *(_OWORD *)((char *)a2 + v14 + 16);
  *v15 = *(_OWORD *)((char *)a2 + v14);
  v15[1] = v17;
  v18 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v19 = (char *)v15 + v18;
  v20 = &v16[v18];
  v21 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  return a1;
}

_QWORD *assignWithTake for SFAirDropClient.BoopAtADistance.TapEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1A2AE30C4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[10];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[11];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32 + 8);
  *v33 = v35;
  v33[1] = v36;
  swift_bridgeObjectRelease();
  v37 = v33[2];
  v38 = v33[3];
  *((_OWORD *)v33 + 1) = *((_OWORD *)v34 + 1);
  sub_1A29736C4(v37, v38);
  v39 = *(int *)(type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0) + 24);
  v40 = (char *)v33 + v39;
  v41 = &v34[v39];
  v42 = sub_1A2AE3130();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.TapEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A5936C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A2AE30C4();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.TapEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A2A59418(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1A2AE30C4();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1A2A594B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1A2AE30C4();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1A2A59640 + 4 * byte_1A2B05551[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1A2A59674 + 4 * byte_1A2B0554C[v4]))();
}

uint64_t sub_1A2A59674(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A5967C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A59684);
  return result;
}

uint64_t sub_1A2A59690(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A59698);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1A2A5969C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A596A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys()
{
  return &type metadata for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys()
{
  return &type metadata for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys;
}

uint64_t _s7Sharing15SFAirDropClientC15BoopAtADistanceO11TransactionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A2A59720 + 4 * byte_1A2B0555B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A2A59754 + 4 * byte_1A2B05556[v4]))();
}

uint64_t sub_1A2A59754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A5975C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A59764);
  return result;
}

uint64_t sub_1A2A59770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A59778);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A2A5977C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A59784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys()
{
  return &type metadata for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys()
{
  return &type metadata for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys;
}

uint64_t _s7Sharing20SFAirDropInvocationsO21BoopAtADistanceUpdateC10ParametersV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A2A59800 + 4 * byte_1A2B05565[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A2A59834 + 4 * byte_1A2B05560[v4]))();
}

uint64_t sub_1A2A59834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A5983C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A2A59844);
  return result;
}

uint64_t sub_1A2A59850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A2A59858);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A2A5985C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A2A59864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys()
{
  return &type metadata for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys;
}

unint64_t sub_1A2A59884()
{
  unint64_t result;

  result = qword_1EE67DBA0;
  if (!qword_1EE67DBA0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B06064, &type metadata for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBA0);
  }
  return result;
}

unint64_t sub_1A2A598CC()
{
  unint64_t result;

  result = qword_1EE67DBA8;
  if (!qword_1EE67DBA8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0611C, &type metadata for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBA8);
  }
  return result;
}

unint64_t sub_1A2A59914()
{
  unint64_t result;

  result = qword_1EE67DBB0;
  if (!qword_1EE67DBB0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B061D4, &type metadata for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBB0);
  }
  return result;
}

unint64_t sub_1A2A5995C()
{
  unint64_t result;

  result = qword_1EE67DBB8;
  if (!qword_1EE67DBB8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0628C, &type metadata for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBB8);
  }
  return result;
}

unint64_t sub_1A2A599A4()
{
  unint64_t result;

  result = qword_1EE67DBC0;
  if (!qword_1EE67DBC0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B06344, &type metadata for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBC0);
  }
  return result;
}

unint64_t sub_1A2A599EC()
{
  unint64_t result;

  result = qword_1EE67DBC8;
  if (!qword_1EE67DBC8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B062B4, &type metadata for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBC8);
  }
  return result;
}

unint64_t sub_1A2A59A34()
{
  unint64_t result;

  result = qword_1EE67DBD0;
  if (!qword_1EE67DBD0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B062DC, &type metadata for SFAirDropClient.BoopAtADistance.TapEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBD0);
  }
  return result;
}

unint64_t sub_1A2A59A7C()
{
  unint64_t result;

  result = qword_1EE67DBD8;
  if (!qword_1EE67DBD8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B061FC, &type metadata for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBD8);
  }
  return result;
}

unint64_t sub_1A2A59AC4()
{
  unint64_t result;

  result = qword_1EE67DBE0;
  if (!qword_1EE67DBE0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B06224, &type metadata for SFAirDropClient.BoopAtADistance.Transaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBE0);
  }
  return result;
}

unint64_t sub_1A2A59B0C()
{
  unint64_t result;

  result = qword_1EE67DBE8;
  if (!qword_1EE67DBE8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B06144, &type metadata for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBE8);
  }
  return result;
}

unint64_t sub_1A2A59B54()
{
  unint64_t result;

  result = qword_1EE67DBF0;
  if (!qword_1EE67DBF0)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0616C, &type metadata for SFAirDropClient.BoopAtADistance.ServerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBF0);
  }
  return result;
}

unint64_t sub_1A2A59B9C()
{
  unint64_t result;

  result = qword_1EE67DBF8;
  if (!qword_1EE67DBF8)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B0608C, &type metadata for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DBF8);
  }
  return result;
}

unint64_t sub_1A2A59BE4()
{
  unint64_t result;

  result = qword_1EE67DC00;
  if (!qword_1EE67DC00)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B060B4, &type metadata for SFAirDropInvocations.BoopAtADistanceUpdate.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DC00);
  }
  return result;
}

unint64_t sub_1A2A59C2C()
{
  unint64_t result;

  result = qword_1EE67DC08;
  if (!qword_1EE67DC08)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05FD4, &type metadata for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DC08);
  }
  return result;
}

unint64_t sub_1A2A59C74()
{
  unint64_t result;

  result = qword_1EE67DC10;
  if (!qword_1EE67DC10)
  {
    result = MEMORY[0x1A85895EC](&unk_1A2B05FFC, &type metadata for SFAirDropInvocations.BecomeTransferPresenter.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE67DC10);
  }
  return result;
}

uint64_t sub_1A2A59CB8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B47520 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xED0000746365526ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A2A59DC8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746361736E617274 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7364980 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A2A59EC0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B47B20 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xED00006174614479 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5572756F6A6E6F62 && a2 == 0xEB00000000444955)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A2A5A04C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697463656E6E6F63 && a2 == 0xEE00657461446E6FLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616974696E497369 && a2 == 0xEB00000000726F74)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A2A5A1E8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B47B20 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6341656D61537369 && a2 == 0xED0000746E756F63 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x614E656369766564 && a2 == 0xEA0000000000656DLL || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F4D656369766564 && a2 == 0xEB000000006C6564 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746E756F636361 && a2 == 0xE900000000000044 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001A2B47B40 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A2B47B60 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x496E776F6E4B7369 && a2 == 0xEF797469746E6564 || (sub_1A2AE3EE0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001A2B47B80)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v5 = sub_1A2AE3EE0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

void sub_1A2A5A708(void **a1, uint64_t a2)
{
  sub_1A2A5B5B0(a1, a2, &qword_1EE67DC18, (uint64_t)&unk_1E4838488, (uint64_t)sub_1A2A5A7D4, (uint64_t)&block_descriptor_98);
}

uint64_t sub_1A2A5A73C(uint64_t a1)
{
  return sub_1A2A5C1CC(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1A2A4EC14);
}

uint64_t sub_1A2A5A748()
{
  return objectdestroy_72Tm(&qword_1EE67DC18);
}

uint64_t sub_1A2A5A754()
{
  return sub_1A2A5AA7C(&qword_1EE67DC18, (uint64_t)&unk_1E4838438, (uint64_t)sub_1A2A5A7BC, (uint64_t)&block_descriptor_92_0);
}

uint64_t sub_1A2A5A778()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_1A2A5A7A0()
{
  return swift_deallocObject();
}

uint64_t sub_1A2A5A7B0()
{
  return objectdestroy_88Tm(&qword_1EE67DC18);
}

uint64_t sub_1A2A5A7BC(void *a1)
{
  return sub_1A2A5AB60(a1, &qword_1EE67DC18);
}

uint64_t sub_1A2A5A7C8()
{
  return objectdestroy_88Tm(&qword_1EE67DC18);
}

uint64_t sub_1A2A5A7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1A2A5BF40(a1, a2, a3, a4, a5, &qword_1EE67DC18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1A2A4CFF4);
}

uint64_t sub_1A2A5A7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int EnumCaseMultiPayload;
  unint64_t v11;
  int *v12;
  uint64_t *v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B3C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  v5 = sub_1A2AE3130();
  v6 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v7 = v0 + v3 + *(int *)(v1 + 56);
  v8 = sub_1A2AE30C4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + v3 + *(int *)(v1 + 60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B408);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      v11 = v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B790) + 48);
      v6(v11, v5);
      v12 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B798) + 52);
      v13 = &qword_1EE67B7A0;
      goto LABEL_6;
    case 0:
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EE67B418) + 80);
      swift_bridgeObjectRelease();
      sub_1A2994DD4(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), *(_BYTE *)(v11 + 48));
      v12 = (int *)(type metadata accessor for SFAirDrop.DeclineAction() + 28);
      v13 = &qword_1EE67B788;
LABEL_6:
      v6(v11 + *v12, v5);
      __swift_instantiateConcreteTypeFromMangledName(v13);
      swift_release();
      break;
  }
  swift_release();

  return swift_deallocObject();
}

