id sub_23C8AC564()
{
  uint64_t v0;

  return sub_23C8AB9CC(*(_QWORD *)(v0 + 24), (void (*)(id))sub_23C8AC6DC);
}

uint64_t sub_23C8AC590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_23C7DDB10(&qword_25430CCC8);
  v2 = *(_QWORD *)(sub_23C7E8630() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23C8AC664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  sub_23C7DDB10(&qword_25430CCC8);
  v2 = *(_QWORD *)(sub_23C7E8630() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23C8AB88C(v0 + v3, *(void (**)(_QWORD))(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(void (**)(char *))(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v1);
}

uint64_t sub_23C8AC6DC()
{
  uint64_t v0;

  return sub_23C8ABF90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

BOOL sub_23C8AC6F4(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == v1;
}

uint64_t sub_23C8AC704()
{
  uint64_t v0;

  return sub_23C8ABD5C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C8AC71C()
{
  uint64_t v0;

  return sub_23C8ABAAC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for ReadWriteBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadWriteBox);
}

GRDBInternal::Column __swiftcall Column.init(_:)(GRDBInternal::Column result)
{
  GRDBInternal::Column *v1;

  *v1 = result;
  return result;
}

void *ColumnExpression.sqlExpression.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[21];

  v5[0] = sub_23C7E863C(a1, a2);
  v5[1] = v3;
  sub_23C800B0C((uint64_t)v5);
  return sub_23C800B48(v5, v2);
}

void *ColumnExpression.detached.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[23];
  _QWORD v6[21];

  sub_23C7E863C(a1, a2);
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C7E79A8(&qword_25430DA08);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23C912A20;
  v5[0] = 34;
  v5[1] = 0xE100000000000000;
  v5[2] = MEMORY[0x24BEE4AF8];
  v5[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v5);
  sub_23C7F96E0(v5, (void *)(v3 + 32));
  v6[0] = v3;
  sub_23C80A840((uint64_t)v6);
  return sub_23C800B48(v6, v2);
}

void static ColumnExpression<>.rowID.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6469776F72;
  a1[1] = 0xE500000000000000;
}

uint64_t Column.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Column.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Column.name.modify())()
{
  return nullsub_1;
}

uint64_t Column.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  sub_23C7E7E34(a1, a1[3]);
  *a2 = sub_23C911C40();
  a2[1] = v4;
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a1);
}

uint64_t static Column.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23C911A18();
}

void sub_23C8AC978(void *a1@<X8>)
{
  uint64_t *v1;

  sub_23C8743B0(*v1, v1[1], a1);
}

uint64_t ColumnExpression<>.name.getter()
{
  uint64_t v1;

  sub_23C9110A0();
  return v1;
}

uint64_t dispatch thunk of ColumnExpression.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for Column()
{
  return &type metadata for Column;
}

uint64_t sub_23C8AC9C4@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  v8 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(a3, v3);
  result = a1(a3);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a3, a2);
  return result;
}

void static FTS5CustomTokenizer.tokenizerDescriptor(arguments:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  sub_23C7E79A8(&qword_25430DA10);
  v6 = sub_23C7DB388();
  *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v6 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  *(_QWORD *)(v6 + 40) = v7;
  swift_bridgeObjectRetain();
  sub_23C7FAE44();
  if (*(_QWORD *)(v6 + 16))
  {
    *a3 = v6;
  }
  else
  {
    sub_23C9117B4();
    __break(1u);
  }
}

uint64_t Database.add<A>(tokenizer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x24BDAC8D0];
  v6 = sub_23C82F3EC(v3);
  v7 = sub_23C7DB388();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  _s24FTS5TokenizerConstructorCMa();
  v8 = (_QWORD *)sub_23C7DB388();
  v8[2] = v3;
  v8[3] = sub_23C8ACE54;
  v8[4] = v7;
  v23[0] = sub_23C8AD0BC;
  v23[1] = sub_23C8AD0C0;
  v23[2] = sub_23C8AD0C4;
  swift_retain();
  swift_retain();
  sub_23C8AD0C8((uint64_t)v23, v6, (uint64_t)v8, a2, a3, &v18);
  v9 = v18;
  if (!v18)
    return swift_release();
  v11 = (uint64_t)Database.lastErrorMessage.getter();
  if (!v12)
  {
    if (!sqlite3_errstr(v9))
      __break(1u);
    v11 = sub_23C910F74();
  }
  v18 = v9;
  *(_QWORD *)&v19 = v11;
  *((_QWORD *)&v19 + 1) = v12;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  swift_bridgeObjectRetain();
  sub_23C7E76BC(0);
  sub_23C7EF5D4();
  if (sub_23C9119E8())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7E13C4(0);
  }
  else
  {
    swift_allocError();
    v13 = v22;
    v14 = v19;
    v15 = v20;
    v16 = v21;
    *(_DWORD *)v17 = v18;
    *(_OWORD *)(v17 + 8) = v14;
    *(_OWORD *)(v17 + 24) = v15;
    *(_OWORD *)(v17 + 40) = v16;
    *(_BYTE *)(v17 + 56) = v13;
  }
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_23C8ACD38(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  if (!a3)
    return 1;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = v10(a1, a2, a4, a5);
  v12 = 0;
  *a3 = v11;
  return v12;
}

uint64_t sub_23C8ACE44()
{
  return swift_deallocObject();
}

uint64_t sub_23C8ACE54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_23C8ACD38(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t _s24FTS5TokenizerConstructorCMa()
{
  return objc_opt_self();
}

uint64_t sub_23C8ACE7C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  if (!a1)
    return 1;
  result = swift_retain();
  if (!a2)
    goto LABEL_14;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3)
    {
      v9 = a3;
      v10 = MEMORY[0x24BEE4AF8];
      do
      {
        if (*a2++)
        {
          v12 = sub_23C910F74();
          v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7F16C0();
            v10 = v17;
          }
          v15 = *(_QWORD *)(v10 + 16);
          if (v15 >= *(_QWORD *)(v10 + 24) >> 1)
          {
            sub_23C7F16C0();
            v10 = v18;
          }
          *(_QWORD *)(v10 + 16) = v15 + 1;
          v16 = v10 + 16 * v15;
          *(_QWORD *)(v16 + 32) = v12;
          *(_QWORD *)(v16 + 40) = v14;
        }
        --v9;
      }
      while (v9);
      goto LABEL_15;
    }
LABEL_14:
    v10 = MEMORY[0x24BEE4AF8];
LABEL_15:
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    swift_retain();
    v20 = swift_retain();
    v21 = v19(v20, v10, a4);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8ACFD0(uint64_t result)
{
  if (result)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t sub_23C8ACFDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  int v17;

  if (!a1)
    return 1;
  swift_unknownObjectRetain_n();
  swift_getObjectType();
  result = sub_23C7EF87C(a1);
  if (!result)
  {
    swift_unknownObjectRelease_n();
    return 1;
  }
  v17 = a3;
  if (a6)
  {
    v14 = v13;
    ObjectType = swift_getObjectType();
    v16 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(a2, &v17, a4, a5, a6, ObjectType, v14);
    swift_unknownObjectRelease_n();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8AD0C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)());
  uint64_t v9;
  uint64_t v11;
  int v12;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)()))(a2 + 8);
  if (v6)
  {
    v9 = result;
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
    v11 = sub_23C910EFC();
    swift_bridgeObjectRelease();
    v12 = v6(a2, v11 + 32, a3, v9, sub_23C8AD190);
    result = swift_release();
    *a6 = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of static FTS5CustomTokenizer.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FTS5CustomTokenizer.init(db:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_23C8AD194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E623C();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      sub_23C7E0808();
      if (v8 >= v7 >> 1)
        sub_23C7DBBE4();
      v4 += 5;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C8AD25C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  v27 = v4;
  v28 = result;
  v26 = v8;
  while (1)
  {
LABEL_4:
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (i << 6);
    }
    else
    {
      v13 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_41;
      if (v13 >= v8)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      v14 = *(_QWORD *)(v4 + 8 * v13);
      ++i;
      if (!v14)
      {
        i = v13 + 1;
        if (v13 + 1 >= v8)
          goto LABEL_39;
        v14 = *(_QWORD *)(v4 + 8 * i);
        if (!v14)
        {
          i = v13 + 2;
          if (v13 + 2 >= v8)
            goto LABEL_39;
          v14 = *(_QWORD *)(v4 + 8 * i);
          if (!v14)
          {
            i = v13 + 3;
            if (v13 + 3 >= v8)
              goto LABEL_39;
            v14 = *(_QWORD *)(v4 + 8 * i);
            if (!v14)
            {
              v15 = v13 + 4;
              if (v15 >= v8)
                goto LABEL_39;
              v14 = *(_QWORD *)(v4 + 8 * v15);
              for (i = v15; !v14; ++v15)
              {
                i = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_42;
                if (i >= v8)
                  goto LABEL_39;
                v14 = *(_QWORD *)(v4 + 8 * i);
              }
            }
          }
        }
      }
      v7 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (i << 6);
    }
    v16 = a2[2];
    if (!v16)
      goto LABEL_38;
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v12);
    v18 = *v17;
    v19 = v17[1];
    result = a2[4];
    if (result != *v17 || a2[5] != v19)
    {
      result = sub_23C911A18();
      if ((result & 1) == 0)
        break;
    }
  }
  if (v16 == 1)
  {
LABEL_38:
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  v21 = a2 + 7;
  v22 = 1;
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    result = *(v21 - 1);
    v24 = *v21;
    v21 += 2;
    v25 = result == v18 && v24 == v19;
    if (v25 || (result = sub_23C911A18(), (result & 1) != 0))
    {
      v4 = v27;
      v3 = v28;
      v8 = v26;
      goto LABEL_4;
    }
    ++v22;
    if (v23 == v16)
      goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_23C8AD484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 40;
    v7 = MEMORY[0x24BEE4AF8];
    v16 = a1 + 40;
    do
    {
      v8 = (uint64_t *)(v6 + 16 * v5);
      v9 = v5;
      while (1)
      {
        if (v9 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v11 = *(v8 - 1);
        v10 = *v8;
        v5 = v9 + 1;
        swift_bridgeObjectRetain();
        sub_23C868438(v11, v10, a2);
        if ((v12 & 1) != 0)
          break;
        swift_bridgeObjectRelease();
        v8 += 2;
        ++v9;
        if (v4 == v5)
          goto LABEL_13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23C7E649C();
      v13 = *(_QWORD *)(v7 + 16);
      v14 = v13 + 1;
      if (v13 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7E649C();
        v14 = v13 + 1;
      }
      *(_QWORD *)(v7 + 16) = v14;
      v15 = v7 + 16 * v13;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      v6 = v16;
    }
    while (v4 - 1 != v9);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_23C8AD5E8(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v2 = a2;
  v3 = result;
  v22 = *(_QWORD *)(result + 16);
  if (v22)
  {
    v4 = 0;
    v21 = result + 32;
    v19 = a2 + 7;
    v20 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      while (1)
      {
        if (v4 >= *(_QWORD *)(v3 + 16))
        {
LABEL_30:
          __break(1u);
          return result;
        }
        v5 = v21 + 40 * v4;
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD *)(v5 + 8);
        v23 = *(_BYTE *)(v5 + 16);
        v24 = *(_OWORD *)(v5 + 24);
        ++v4;
        v8 = v2;
        v9 = v2[2];
        if (v9)
          break;
LABEL_21:
        swift_bridgeObjectRetain();
        swift_retain();
        v15 = v20;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_23C7FDC44(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v15 = v20;
        }
        v17 = *(_QWORD *)(v15 + 16);
        v16 = *(_QWORD *)(v15 + 24);
        v2 = v8;
        if (v17 >= v16 >> 1)
        {
          result = sub_23C7FDC44(v16 > 1, v17 + 1, 1);
          v15 = v20;
        }
        *(_QWORD *)(v15 + 16) = v17 + 1;
        v20 = v15;
        v18 = v15 + 40 * v17;
        *(_QWORD *)(v18 + 32) = v6;
        *(_QWORD *)(v18 + 40) = v7;
        *(_BYTE *)(v18 + 48) = v23;
        *(_OWORD *)(v18 + 56) = v24;
        if (v4 == v22)
          goto LABEL_28;
      }
      result = v2[4];
      if (result != v6 || v2[5] != v7)
      {
        result = sub_23C911A18();
        if ((result & 1) == 0)
        {
          if (v9 != 1)
          {
            v11 = v19;
            v12 = 1;
            while (1)
            {
              v13 = v12 + 1;
              if (__OFADD__(v12, 1))
                break;
              result = *(v11 - 1);
              if (result == v6 && *v11 == v7)
                goto LABEL_10;
              result = sub_23C911A18();
              if ((result & 1) != 0)
                goto LABEL_10;
              v11 += 2;
              ++v12;
              if (v13 == v9)
                goto LABEL_21;
            }
            __break(1u);
            goto LABEL_30;
          }
          goto LABEL_21;
        }
      }
LABEL_10:
      v2 = v8;
      if (v4 == v22)
        goto LABEL_28;
    }
  }
  v20 = MEMORY[0x24BEE4AF8];
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_23C8AD7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v4;
  v11 = *v4;
  *((_BYTE *)v6 + 24) = 0;
  v6[2] = a1;
  sub_23C896698(a4, (uint64_t)&v25, &qword_25430DBD0);
  if (!v26)
  {
    v15 = swift_retain();
    sub_23C7ECC54(v15, &qword_25430DBD0, v16, v17, v18, v19, v20, v21, v25);
    *((_DWORD *)v6 + 7) = 0;
    goto LABEL_8;
  }
  v31 = v11;
  sub_23C7DB5CC(&v25, (uint64_t)v28);
  v12 = v29;
  v13 = v30;
  sub_23C7E7E34(v28, v29);
  v26 = type metadata accessor for Statement();
  v27 = &protocol witness table for Statement;
  *(_QWORD *)&v25 = a1;
  swift_retain_n();
  v14 = sub_23C842CFC(0, (uint64_t)&v25, v12, v13);
  if (v5)
  {
    sub_23C7DFA7C();
    swift_release();
    sub_23C7E7900(a4, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v25);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
    swift_release();
    swift_deallocPartialClassInstance();
    return (uint64_t)v6;
  }
  v23 = (uint64_t)v14;
  result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v25);
  if (v23 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v23 <= 0x7FFFFFFF)
  {
    *((_DWORD *)v6 + 7) = v23;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
LABEL_8:
    v28[0] = a2;
    v28[1] = a3;
    sub_23C7E1D24(v28, v22);
    swift_release();
    sub_23C7E7900(a4, &qword_25430DBD0);
    sub_23C7DFA7C();
    if (v5)
      swift_release();
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8AD9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  _BYTE v18[40];
  _OWORD v19[3];
  char v20;
  _QWORD v21[24];

  sub_23C896698(a6, (uint64_t)v18, &qword_25430DBD0);
  sub_23C7E79A8(&qword_25430DA08);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v21[0] = a2;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = a5;
  sub_23C7F96B0(v21);
  sub_23C7F96E0(v21, (void *)(v11 + 32));
  sub_23C896698((uint64_t)v18, (uint64_t)v17, &qword_25430DBD0);
  v14 = 0u;
  v15 = 0u;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C811CFC((uint64_t)v17, (uint64_t)&v14);
  v20 = 2;
  v19[0] = v14;
  v19[1] = v15;
  v19[2] = v16;
  sub_23C7E7900((uint64_t)v18, &qword_25430DBD0);
  v12 = sub_23C8ADB1C(a1, (uint64_t)v19);
  sub_23C7E7900((uint64_t)v19, &qword_25430DA18);
  return v12;
}

uint64_t sub_23C8ADB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C8546C8(a1, (uint64_t)&v9);
  if (!v2)
  {
    sub_23C896698((uint64_t)&v10, (uint64_t)v8, &qword_25430DBD0);
    sub_23C7E79A8(qword_25430D190);
    swift_allocObject();
    v4 = swift_retain_n();
    v6 = sub_23C8AD7FC(v4, 0, 0, (uint64_t)v8);
    v11 = MEMORY[0x24BEE4B08];
    swift_beginAccess();
    if (*(_BYTE *)(v6 + 24) == 1)
    {
      swift_release();
      a2 = MEMORY[0x24BEE4B08];
    }
    else
    {
      swift_retain();
      v7 = swift_retain();
      sub_23C8E148C(v7);
      swift_release();
      *(_BYTE *)(v6 + 24) = 1;
      swift_release();
      a2 = v11;
    }
    sub_23C812C40((uint64_t)&v9);
    swift_release();
  }
  return a2;
}

uint64_t sub_23C8ADCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = 0;
    v7 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v8 = *(v7 - 1) == a2 && *v7 == a3;
      if (v8 || (sub_23C7E5F08() & 1) != 0)
        break;
      v7 += 5;
      if (v4 == ++v6)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v6 = 0;
  }
  sub_23C7DE934();
  return v6;
}

uint64_t sub_23C8ADD34(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_23C7E0A7C();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_23C7E0A7C() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8ADDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v3 = a2;
  v4 = a1;
  v33 = a2 + 56;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v32 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v12)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (i << 6);
      v12 = i;
      goto LABEL_23;
    }
    v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v32)
      goto LABEL_40;
    v14 = *(_QWORD *)(v33 + 8 * v13);
    v12 = i + 1;
    if (!v14)
    {
      v12 = i + 2;
      if (i + 2 >= v32)
        goto LABEL_40;
      v14 = *(_QWORD *)(v33 + 8 * v12);
      if (!v14)
      {
        v12 = i + 3;
        if (i + 3 >= v32)
          goto LABEL_40;
        v14 = *(_QWORD *)(v33 + 8 * v12);
        if (!v14)
          break;
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_23:
    if (!*(_QWORD *)(v4 + 16))
    {
      v2 = 0;
      goto LABEL_41;
    }
    v16 = v3;
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v19 = *v17;
    v18 = v17[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    v20 = sub_23C911BF8();
    v21 = v4;
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v20 & ~v22;
    sub_23C7E99E8();
    if ((v24 & 1) == 0)
      goto LABEL_38;
    v25 = *(_QWORD *)(v21 + 48);
    v26 = (_QWORD *)(v25 + 16 * v23);
    v27 = *v26 == v19 && v26[1] == v18;
    if (!v27 && (sub_23C7E33F8() & 1) == 0)
    {
      v28 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v28;
        sub_23C7E99E8();
        if ((v29 & 1) == 0)
          break;
        v30 = (_QWORD *)(v25 + 16 * v23);
        v31 = *v30 == v19 && v30[1] == v18;
        if (v31 || (sub_23C7E33F8() & 1) != 0)
          goto LABEL_37;
      }
LABEL_38:
      swift_bridgeObjectRelease();
      v2 = 0;
LABEL_41:
      sub_23C80096C();
      return v2;
    }
LABEL_37:
    result = swift_bridgeObjectRelease();
    v3 = v16;
    v4 = v21;
  }
  v15 = i + 4;
  if (i + 4 >= v32)
  {
LABEL_40:
    v2 = 1;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(v33 + 8 * v15);
  if (v14)
  {
    v12 = i + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v32)
      goto LABEL_40;
    v14 = *(_QWORD *)(v33 + 8 * v12);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
  return result;
}

BOOL static DatabaseMigrator.ForeignKeyChecks.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DatabaseMigrator.ForeignKeyChecks.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t DatabaseMigrator.ForeignKeyChecks.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

uint64_t DatabaseMigrator.eraseDatabaseOnSchemaChange.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DatabaseMigrator.eraseDatabaseOnSchemaChange.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DatabaseMigrator.eraseDatabaseOnSchemaChange.modify())()
{
  return nullsub_1;
}

GRDBInternal::DatabaseMigrator __swiftcall DatabaseMigrator.init()()
{
  uint64_t v0;
  GRDBInternal::DatabaseMigrator result;

  *(_WORD *)v0 = 256;
  *(_QWORD *)(v0 + 8) = MEMORY[0x24BEE4AF8];
  return result;
}

GRDBInternal::DatabaseMigrator __swiftcall DatabaseMigrator.disablingDeferredForeignKeyChecks()()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  __int16 v3;
  void *v4;
  GRDBInternal::DatabaseMigrator result;

  v2 = *((_QWORD *)v1 + 1);
  *(_WORD *)v0 = *v1;
  *(_QWORD *)(v0 + 8) = v2;
  v3 = swift_bridgeObjectRetain();
  result._migrations._rawValue = v4;
  result.eraseDatabaseOnSchemaChange = v3;
  result.defersForeignKeyChecks = HIBYTE(v3);
  return result;
}

uint64_t DatabaseMigrator.registerMigration(_:foreignKeyChecks:migrate:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a3;
  if (*(_BYTE *)(v5 + 1))
    v7 = 0;
  else
    v7 = 2;
  v10[0] = a1;
  v10[1] = a2;
  if (v6)
    v8 = 1;
  else
    v8 = v7;
  v11 = v8;
  v12 = a4;
  v13 = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C8AE1E8((uint64_t)v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_23C8AE1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;

  v3 = (uint64_t *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23C7E649C();
    v6 = v18;
    v7 = (uint64_t *)(v4 + 40);
    do
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      v11 = v18[2];
      v10 = v18[3];
      swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1)
        sub_23C7E649C();
      v7 += 5;
      v18[2] = v11 + 1;
      v12 = &v18[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  v13 = sub_23C8ADD34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v6);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    sub_23C911634();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C910EE4();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C9117B4();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23C7F13B0();
    v14 = *(_QWORD *)(*v3 + 16);
    sub_23C7F15DC();
    v15 = *v3;
    *(_QWORD *)(v15 + 16) = v14 + 1;
    v16 = v15 + 40 * v14;
    v17 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v16 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v16 + 48) = v17;
    *(_QWORD *)(v16 + 64) = *(_QWORD *)(a1 + 32);
    *v3 = v15;
  }
}

uint64_t DatabaseMigrator.migrate(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void (*)(), _BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t *v19;

  v3 = *((_QWORD *)v2 + 1);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v6 = v2[1];
    v7 = *v2;
    v8 = (uint64_t *)(v3 + 40 * v4);
    v10 = *(v8 - 1);
    v9 = *v8;
    ObjectType = swift_getObjectType();
    v19 = &v17;
    MEMORY[0x24BDAC7A8](ObjectType);
    v13[16] = v7;
    v13[17] = v6;
    v14 = v3;
    v15 = v10;
    v16 = v9;
    v11 = *(void (**)(void (*)(), _BYTE *, uint64_t, uint64_t, uint64_t))(a2 + 32);
    sub_23C7DBBB0();
    swift_retain();
    v11(sub_23C8AE660, v13, MEMORY[0x24BEE4AE0] + 8, ObjectType, a2);
    swift_release();
    return sub_23C7DB3DC();
  }
  return result;
}

uint64_t DatabaseMigrator.migrate(_:upTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t ObjectType;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *v4;
  v9 = v4[1];
  v10 = *((_QWORD *)v4 + 1);
  ObjectType = swift_getObjectType();
  v13[16] = v8;
  v13[17] = v9;
  v14 = v10;
  v15 = a3;
  v16 = a4;
  return (*(uint64_t (**)(void (*)(), _BYTE *, uint64_t, uint64_t, uint64_t))(a2 + 32))(sub_23C8AE660, v13, MEMORY[0x24BEE4AE0] + 8, ObjectType, a2);
}

void sub_23C8AE58C(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  char v16;

  v9 = a2;
  v11 = a2 & 0x100;
  if ((a2 & 1) == 0)
    goto LABEL_2;
  v14[0] = 0;
  v16 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C8E78A8(&v16, a1, v11 | 1u, a3, a1, (uint64_t)v14, v12, v13);
  if (!v5)
  {
    if ((v14[0] & 1) != 0)
      sub_23C8E7AC8();
LABEL_2:
    v14[0] = v9 & 1;
    v14[1] = BYTE1(v11);
    v15 = a3;
    sub_23C8AF3D8(a1, a4, a5, a4);
  }
}

void sub_23C8AE660()
{
  sub_23C8AE674();
}

void sub_23C8AE674()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  __int16 v3;
  char v4;

  sub_23C7EDF3C();
  if (v4)
    v3 = 0;
  sub_23C8AE58C(v1, v3 | v2, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_23C8AE69C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  char v17;

  v9 = *v4;
  v10 = v4[1];
  v11 = *((_QWORD *)v4 + 1);
  if (v9 != 1)
    goto LABEL_8;
  v15[0] = 0;
  v17 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10)
    v14 = 257;
  else
    v14 = 1;
  sub_23C8E78A8(&v17, a1, v14, v11, a1, (uint64_t)v15, v12, v13);
  if (!v5)
  {
    if (v15[0] == 1)
      sub_23C8E7AC8();
LABEL_8:
    v15[0] = v9;
    v15[1] = v10;
    v16 = v11;
    sub_23C8AF3D8(a1, a2, a3, a4);
  }
}

uint64_t DatabaseMigrator.asyncMigrate(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  void (*v13)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v8 = *v4;
  v9 = v4[1];
  v10 = *((_QWORD *)v4 + 1);
  ObjectType = swift_getObjectType();
  v12 = sub_23C7DF3DC();
  *(_BYTE *)(v12 + 16) = v8;
  *(_BYTE *)(v12 + 17) = v9;
  *(_QWORD *)(v12 + 24) = v10;
  *(_QWORD *)(v12 + 32) = a3;
  *(_QWORD *)(v12 + 40) = a4;
  v13 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(a2 + 40);
  sub_23C7DB3D4();
  swift_retain();
  v13(sub_23C8AE918, v12, ObjectType, a2);
  return swift_release();
}

uint64_t sub_23C8AE818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(a3 + 40 * v6);
    v8 = *(v7 - 1);
    v9 = *v7;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23C8AE69C(a1, v8, v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return a4(a1, 0);
}

uint64_t DatabaseMigrator.migrations.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_23C8AD194(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void DatabaseMigrator.appliedMigrations(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = DatabaseMigrator.appliedIdentifiers(_:)(a1);
  if (!v2)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = MEMORY[0x24BEE4AF8];
    if (v6)
    {
      v14 = v4;
      v15 = MEMORY[0x24BEE4AF8];
      sub_23C7E0808();
      sub_23C7E623C();
      v7 = v15;
      v8 = (uint64_t *)(v3 + 40);
      do
      {
        v10 = *(v8 - 1);
        v9 = *v8;
        v12 = *(_QWORD *)(v15 + 16);
        v11 = *(_QWORD *)(v15 + 24);
        swift_bridgeObjectRetain();
        if (v12 >= v11 >> 1)
          sub_23C7DBBE4();
        v8 += 5;
        *(_QWORD *)(v15 + 16) = v12 + 1;
        v13 = v15 + 16 * v12;
        *(_QWORD *)(v13 + 32) = v10;
        *(_QWORD *)(v13 + 40) = v9;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v5 = v14;
    }
    sub_23C8AD484(v7, v5);
  }
  sub_23C7E936C();
}

uint64_t DatabaseMigrator.appliedIdentifiers(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::Bool v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[2];
  uint64_t v24;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v3 = sub_23C8AD9D0(a1, 0xD000000000000026, 0x800000023C91F2E0, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v23);
  v4 = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = swift_bridgeObjectRelease();
    sub_23C7ECC54(v5, &qword_25430DBD0, v6, v7, v8, v9, v10, v11, *(uint64_t *)&v23[0]);
    v12._countAndFlagsBits = 0x67696D5F62647267;
    v12._object = (void *)0xEF736E6F69746172;
    v13 = Database.tableExists(_:)(v12);
    if (v14)
    {

    }
    else if (!v13)
    {

      return MEMORY[0x24BEE4B08];
    }
    swift_willThrow();
  }
  else
  {
    v2 = v3;
    swift_bridgeObjectRelease();
    v15 = swift_bridgeObjectRelease();
    sub_23C7ECC54(v15, &qword_25430DBD0, v16, v17, v18, v19, v20, v21, *(uint64_t *)&v23[0]);
  }
  return v2;
}

void DatabaseMigrator.completedMigrations(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  DatabaseMigrator.appliedMigrations(_:)(a1);
  if (!v1)
  {
    v3 = v2;
    v4 = sub_23C7DBCC8();
    v5 = sub_23C8AD194(v4);
    sub_23C7DB62C();
    sub_23C8AECA4(v3, v5);
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      v15 = MEMORY[0x24BEE4AF8];
      sub_23C7E623C();
      v9 = (uint64_t *)(v7 + 40);
      do
      {
        v11 = *(v9 - 1);
        v10 = *v9;
        v13 = *(_QWORD *)(v15 + 16);
        v12 = *(_QWORD *)(v15 + 24);
        sub_23C7DBBB0();
        if (v13 >= v12 >> 1)
          sub_23C7DBBE4();
        v9 += 4;
        *(_QWORD *)(v15 + 16) = v13 + 1;
        v14 = v15 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v11;
        *(_QWORD *)(v14 + 40) = v10;
        --v8;
      }
      while (v8);
    }
    sub_23C7DB62C();
  }
  sub_23C7E936C();
}

void sub_23C8AECA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a2;
  v4 = a1[2];
  if (v4 && (v5 = *(_QWORD *)(a2 + 16)) != 0)
  {
    v7 = a1[4];
    v6 = a1[5];
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = 0;
    v20 = v4 - 1;
    v17 = v5 - 1;
    v10 = MEMORY[0x24BEE4AF8];
    v18 = v2;
    v19 = a1;
    while (1)
    {
      v11 = *(_QWORD *)(v2 + v9 * 8 + 32);
      v12 = *(_QWORD *)(v2 + v9 * 8 + 40);
      v13 = v7 == v11 && v6 == v12;
      if (!v13 && (sub_23C911A18() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23C7FDC60();
      v14 = *(_QWORD *)(v10 + 16);
      if (v14 >= *(_QWORD *)(v10 + 24) >> 1)
        sub_23C7FDC60();
      *(_QWORD *)(v10 + 16) = v14 + 1;
      v15 = (_QWORD *)(v10 + 32 * v14);
      v15[4] = v7;
      v15[5] = v6;
      v15[6] = v11;
      v15[7] = v12;
      if (v20 == v8)
      {
LABEL_19:
        swift_bridgeObjectRelease();
LABEL_22:
        swift_bridgeObjectRelease();
        return;
      }
      v2 = v18;
      if (v8 + 1 >= v19[2])
        break;
      if (v17 == v8)
        goto LABEL_19;
      v7 = v19[v9 + 6];
      v6 = v19[v9 + 7];
      v16 = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRetain();
      ++v8;
      v9 += 2;
      if (v8 >= v16)
        goto LABEL_24;
    }
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t DatabaseMigrator.hasCompletedMigrations(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13[5];
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(v1 + 8);
  DatabaseMigrator.completedMigrations(_:)(a1);
  if (!v2)
  {
    v6 = sub_23C842CBC(v5);
    v8 = v7;
    sub_23C7DE934();
    sub_23C842C50(v4, v13);
    sub_23C8B0778((uint64_t)v13, (uint64_t)&v14);
    v9 = v15;
    if (v15)
    {
      v10 = v14;
      sub_23C7DB3D4();
      sub_23C8B07C0(v13);
      if (v8)
      {
        if (v6 == v10 && v8 == v9)
        {
          sub_23C7DB62C();
          v3 = 1;
        }
        else
        {
          v3 = sub_23C7E5F08();
          sub_23C7DB62C();
        }
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      if (!v8)
      {
        v3 = 1;
        return v3 & 1;
      }
      v3 = 0;
    }
    sub_23C7DE934();
  }
  return v3 & 1;
}

uint64_t DatabaseMigrator.hasBeenSuperseded(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = DatabaseMigrator.appliedIdentifiers(_:)(a1);
  if (!v2)
  {
    v5 = v4;
    v6 = sub_23C7DBCC8();
    v7 = (_QWORD *)sub_23C8AD194(v6);
    sub_23C7DB62C();
    sub_23C7E0808();
    LOBYTE(v3) = sub_23C8AD25C(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t sub_23C8AF024(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  char v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  _QWORD v35[5];
  __int128 v36;
  _OWORD v37[2];

  v6 = a1;
  v7 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)(v7 + 16))
  {
    *(_QWORD *)&v34 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 40);
    v10 = *(_BYTE *)(v7 + 48);
    v11 = *(_OWORD **)(v7 + 56);
    v12 = *(_QWORD *)(v7 + 64);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_23C7F255C();
    v6 = *(_QWORD *)(v13 + 16);
    v14 = v13;
    v15 = v6 + 1;
    if (v6 >= *(_QWORD *)(v13 + 24) >> 1)
      goto LABEL_35;
    while (1)
    {
      *(_QWORD *)(v14 + 16) = v15;
      v15 = v14;
      v16 = v14 + 40 * v6;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = v8;
      *(_BYTE *)(v16 + 48) = v10;
      *(_QWORD *)(v16 + 56) = v11;
      *(_QWORD *)(v16 + 64) = v12;
      v6 = a1;
      if (v9 == a1 && v8 == a2)
        break;
      v10 = sub_23C911A18();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        goto LABEL_11;
      v29 = a3;
      v30 = a2;
      v18 = v7;
      v7 = 0;
      v32 = v18;
      v11 = (_OWORD *)(v18 + 96);
      v31 = v34 - 1;
      while (1)
      {
        if (v31 == v7)
          goto LABEL_24;
        if ((unint64_t)++v7 >= *(_QWORD *)(v32 + 16))
          break;
        v9 = *((_QWORD *)v11 - 3);
        v8 = *((_QWORD *)v11 - 2);
        v19 = *((_BYTE *)v11 - 8);
        v34 = *v11;
        v20 = *(_QWORD *)(v15 + 16);
        v21 = *(_QWORD *)(v15 + 24);
        a3 = (_QWORD *)v15;
        swift_bridgeObjectRetain_n();
        v12 = *((_QWORD *)&v34 + 1);
        swift_retain_n();
        if (v20 >= v21 >> 1)
        {
          sub_23C7F255C();
          a3 = v24;
        }
        a3[2] = v20 + 1;
        v15 = (uint64_t)a3;
        v22 = &a3[5 * v20];
        v22[4] = v9;
        v22[5] = v8;
        *((_BYTE *)v22 + 48) = v19;
        *(_OWORD *)(v22 + 7) = v34;
        v6 = a1;
        a2 = v30;
        if (v9 == a1 && v8 == v30)
        {
          swift_bridgeObjectRelease();
          swift_release();
LABEL_24:
          swift_bridgeObjectRelease();
          a3 = v29;
          goto LABEL_25;
        }
        v11 = (_OWORD *)((char *)v11 + 40);
        v10 = sub_23C911A18();
        swift_release();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          goto LABEL_24;
      }
      __break(1u);
LABEL_35:
      sub_23C7F255C();
      v14 = v28;
    }
    swift_bridgeObjectRelease();
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = MEMORY[0x24BEE4AF8];
  }
LABEL_25:
  sub_23C842C50(v15, v35);
  sub_23C8B0778((uint64_t)v35, (uint64_t)&v36);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_31;
  v37[0] = v36;
  swift_release();
  if (*(_QWORD *)&v37[0] == v6 && *((_QWORD *)&v37[0] + 1) == a2)
    goto LABEL_32;
  v26 = sub_23C911A18();
  sub_23C880200((uint64_t)v37);
  if ((v26 & 1) == 0)
  {
LABEL_31:
    sub_23C911634();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C910EE4();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C9117B4();
    __break(1u);
LABEL_32:
    sub_23C880200((uint64_t)v37);
  }
  swift_bridgeObjectRetain();
  return sub_23C8AD5E8(v15, a3);
}

void sub_23C8AF3D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char v8;
  char v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[40];
  _BYTE v54[40];
  _OWORD v55[3];
  char v56;
  _OWORD v57[2];
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v8 = *v4;
  v9 = v4[1];
  v10 = *((_QWORD *)v4 + 1);
  v59 = MEMORY[0x24BEE4AF8];
  v60 = MEMORY[0x24BEE4B00];
  v11._countAndFlagsBits = 0xD000000000000051;
  v11._object = (void *)0x800000023C91F330;
  v12 = &v59;
  Database.execute(sql:arguments:)(v11, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  v14 = v13;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v59) = v8;
    BYTE1(v59) = v9;
    v60 = v10;
    DatabaseMigrator.appliedMigrations(_:)(a1);
    v16 = v15;
    v67 = a1;
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    v18 = sub_23C8ADCA4(v17, a2, a3);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      v49 = v18;
      v21 = v16;
      v22 = sub_23C842CBC((uint64_t)v16);
      if (!v23)
        goto LABEL_10;
      v24 = v22;
      v25 = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = sub_23C8ADCA4(v10, v24, v25);
      v27 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0 || v49 >= v48)
        goto LABEL_10;
      v59 = 0;
      v60 = 0xE000000000000000;
      sub_23C911634();
      swift_bridgeObjectRelease();
      v59 = 0xD00000000000002ELL;
      v60 = 0x800000023C91F3E0;
      *(_QWORD *)&v50 = a2;
      *((_QWORD *)&v50 + 1) = a3;
      swift_bridgeObjectRetain();
      sub_23C910EE4();
      v14 = v28;
      v16 = &v59;
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C9117B4();
      __break(1u);
    }
    v21 = v16;
LABEL_10:
    LOBYTE(v59) = v8;
    BYTE1(v59) = v9;
    v60 = v10;
    v29 = sub_23C8AF024(a2, a3, v21);
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
      goto LABEL_3;
    v59 = 0xD000000000000013;
    v60 = 0x800000023C91F390;
    v61 = MEMORY[0x24BEE4AF8];
    v62 = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(&v59);
    v31 = (uint64_t *)(v29 + 64);
    while (1)
    {
      v47 = v30;
      v32 = *(v31 - 3);
      v33 = *((unsigned __int8 *)v31 - 16);
      v34 = *(v31 - 1);
      v35 = *v31;
      v63[0] = *(v31 - 4);
      v63[1] = v32;
      v64 = v33;
      v65 = v34;
      v66 = v35;
      v58 = 0;
      memset(v57, 0, sizeof(v57));
      sub_23C896698((uint64_t)v57, (uint64_t)v54, &qword_25430DBD0);
      sub_23C7E79A8(&qword_25430DA08);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_23C912A20;
      sub_23C7F96E0(&v59, (void *)(v36 + 32));
      sub_23C896698((uint64_t)v54, (uint64_t)v53, &qword_25430DBD0);
      v50 = 0u;
      v51 = 0u;
      *(_QWORD *)&v52 = 0;
      *((_QWORD *)&v52 + 1) = v36;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C811CFC((uint64_t)v53, (uint64_t)&v50);
      v56 = 2;
      v55[0] = v50;
      v55[1] = v51;
      v55[2] = v52;
      sub_23C7E7900((uint64_t)v54, &qword_25430DBD0);
      sub_23C8546C8(v67, (uint64_t)&v50);
      if (v14)
      {
        sub_23C7E7900((uint64_t)v55, &qword_25430DA18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C7E7900((uint64_t)v57, &qword_25430DBD0);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      sub_23C896698((uint64_t)&v50 + 8, (uint64_t)v54, &qword_25430DBD0);
      sub_23C7E79A8(&qword_25430B298);
      swift_allocObject();
      v37 = swift_retain_n();
      sub_23C84C284(v37, 0, 0, (uint64_t)v54);
      v14 = 0;
      v38 = sub_23C8EFF2C();
      swift_release();
      sub_23C812C40((uint64_t)&v50);
      swift_release();
      sub_23C7E7900((uint64_t)v55, &qword_25430DA18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)v57, &qword_25430DBD0);
      if ((v38 & 0xFE) == 2 || (v38 & 1) == 0)
      {
        LOBYTE(v50) = 1;
        swift_bridgeObjectRetain();
        swift_retain();
        v42 = v67;
      }
      else
      {
        v42 = v67;
        if (!v33)
        {
          sub_23C8336D8(v67, v39, v40, v41);
          swift_release();
          goto LABEL_20;
        }
        if (v33 != 1)
        {
          sub_23C83371C(v67, v39, v40, v41);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        LOBYTE(v50) = 1;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_retain();
      sub_23C8E7754((char *)&v50, v42, (uint64_t)v63, v42, v43, v44, v45, v46);
      swift_release();
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      v31 += 5;
      v30 = v47 - 1;
      if (v47 == 1)
        goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
LABEL_3:
  swift_bridgeObjectRelease();
}

#error "23C8AFBE8: call analysis failed (funcsize=144)"

uint64_t sub_23C8AFC4C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  NSString *v21;
  id v22;
  id v23;
  void (*v24)(_BYTE *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  _BYTE v37[4];
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v41 = a5;
  v39 = a3;
  v38 = a2;
  v6 = sub_23C910A94();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v37[-v11];
  v13 = type metadata accessor for Configuration();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v37[-v17];
  sub_23C84AB34(a1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, (uint64_t)&v37[-v17]);
  v19 = *(int *)(v13 + 68);

  *(_QWORD *)&v18[v19] = 0;
  v20 = *(int *)(v13 + 72);

  *(_QWORD *)&v18[v20] = 0;
  swift_bridgeObjectRelease();
  *((_QWORD *)v18 + 1) = 0xD00000000000001FLL;
  *((_QWORD *)v18 + 2) = 0x800000023C91F310;
  v21 = NSTemporaryDirectory();
  sub_23C910E78();

  sub_23C910A58();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1760]), sel_init);
  v23 = objc_msgSend(v22, sel_globallyUniqueString);

  sub_23C910E78();
  sub_23C910A70();
  swift_bridgeObjectRelease();
  v24 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v24(v10, v6);
  v25 = sub_23C910A7C();
  v27 = v26;
  sub_23C84AB34((uint64_t)v18, (uint64_t)v16);
  type metadata accessor for DatabaseQueue();
  v28 = swift_allocObject();
  v29 = v25;
  v30 = v28;
  v31 = v42;
  v32 = DatabaseQueue.init(path:configuration:)(v29, v27, (uint64_t)v16);
  if (!v31)
  {
    MEMORY[0x24BDAC7A8](v32);
    v33 = BYTE1(v38);
    v37[-32] = v38 & 1;
    v37[-31] = v33 & 1;
    v34 = v40;
    *(_QWORD *)&v37[-24] = v39;
    *(_QWORD *)&v37[-16] = v34;
    *(_QWORD *)&v37[-8] = v41;
    sub_23C8A5158();
    v30 = v36;
    swift_release();
  }
  sub_23C8AFF6C();
  v24(v12, v6);
  sub_23C84AB78((uint64_t)v18);
  return v30;
}

void sub_23C8AFF6C()
{
  id v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  void *v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v1 = (void *)sub_23C910A64();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_removeItemAtURL_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    v5 = (void *)sub_23C910A4C();

    swift_willThrow();
  }
}

#error "23C8B00BC: call analysis failed (funcsize=27)"

void DatabaseMigrator.migratePublisher(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  __int16 v7;
  int v8;
  uint64_t v9;
  void *v10;
  __int16 v11;
  id v12;

  v7 = *v3;
  v8 = v3[1];
  v9 = *((_QWORD *)v3 + 1);
  sub_23C7E3048();
  v10 = (void *)sub_23C911448();
  v12 = v10;
  if (v8)
    v11 = 256;
  else
    v11 = 0;
  sub_23C8B016C(a1, a2, v10, v11 | v7, v9, a3);

}

void sub_23C8B016C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)();
  uint64_t v25;

  v23 = a6;
  v11 = sub_23C7E79A8(&qword_256BCD4A0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23C7E79A8(&qword_256BCD4A8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = swift_allocObject();
  *(_BYTE *)(v17 + 16) = a4 & 1;
  *(_BYTE *)(v17 + 17) = HIBYTE(a4) & 1;
  *(_QWORD *)(v17 + 24) = a5;
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  v24 = sub_23C8B0824;
  v25 = v17;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_23C7E79A8(&qword_256BCD488);
  sub_23C7E1240(&qword_256BCD490, &qword_256BCD488, (uint64_t)&unk_23C919A58);
  v18 = sub_23C910D04();
  swift_release();
  v19 = sub_23C911424();
  sub_23C7DE70C((uint64_t)v13, 1, 1, v19);
  sub_23C896698((uint64_t)v13, (uint64_t)v16 + *(int *)(v14 + 56), &qword_256BCD4A0);
  *v16 = v18;
  v16[1] = (uint64_t)a3;
  v20 = a3;
  sub_23C7E7900((uint64_t)v13, &qword_256BCD4A0);
  sub_23C7E1240(&qword_256BCD4B0, &qword_256BCD4A8, (uint64_t)&unk_23C917C50);
  v21 = sub_23C910D04();
  sub_23C7E7900((uint64_t)v16, &qword_256BCD4A8);
  *v23 = v21;
}

void DatabaseMigrator.migratePublisher<A>(_:receiveOn:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_23C9114E4();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7DDB10(&qword_256BCD478);
  sub_23C7E1240(&qword_256BCD480, &qword_256BCD478, MEMORY[0x24BDB9AF8]);
  type metadata accessor for ReceiveValuesOn();
}

void sub_23C8B043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v14 - 160) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&a9 - v15;
  v17 = *v9;
  v18 = v9[1];
  v19 = *((_QWORD *)v9 + 1);
  v20 = sub_23C7DF3DC();
  *(_BYTE *)(v20 + 16) = v17;
  *(_BYTE *)(v20 + 17) = v18;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = v12;
  *(_QWORD *)(v20 + 40) = *(_QWORD *)(v14 - 184);
  *(_QWORD *)(v14 - 112) = sub_23C8B0824;
  *(_QWORD *)(v14 - 104) = v20;
  sub_23C7DB3D4();
  swift_unknownObjectRetain();
  sub_23C7E79A8(&qword_256BCD488);
  sub_23C7E1240(&qword_256BCD490, &qword_256BCD488, (uint64_t)&unk_23C919A58);
  v21 = sub_23C910D04();
  swift_release();
  *(_QWORD *)(v14 - 112) = v21;
  sub_23C7DE70C(v13, 1, 1, *(_QWORD *)(v14 - 152));
  sub_23C8979CC(*(_QWORD *)(v14 - 128), v13, *(_QWORD *)(v14 - 168), v10, v11, (uint64_t)v16);
}

uint64_t sub_23C8B0534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 144) + 8))(v1, *(_QWORD *)(v3 - 136));
  swift_release();
  MEMORY[0x242626100](&unk_23C917C50, v2);
  v4 = sub_23C910D04();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v0, v2);
  **(_QWORD **)(v3 - 120) = v4;
  return result;
}

uint64_t sub_23C8B05AC(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);

  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_23C8B0A28;
  *(_QWORD *)(v12 + 24) = v11;
  ObjectType = swift_getObjectType();
  v14 = swift_allocObject();
  *(_BYTE *)(v14 + 16) = a3 & 1;
  *(_BYTE *)(v14 + 17) = HIBYTE(a3) & 1;
  *(_QWORD *)(v14 + 24) = a4;
  *(_QWORD *)(v14 + 32) = sub_23C8B0A60;
  *(_QWORD *)(v14 + 40) = v12;
  v15 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(a6 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v15(sub_23C8AE918, v14, ObjectType, a6);
  swift_release();
  return swift_release();
}

void sub_23C8B06B8(int a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;

  if (a2)
  {
    v5 = a2;
    a3(a2, 1);

  }
  else
  {
    ((void (*)(_QWORD))a3)(0);
  }
}

uint64_t DatabasePublishers.Migrate.receive<A>(subscriber:)()
{
  sub_23C7E79A8(&qword_25430CCC8);
  return sub_23C910CB0();
}

uint64_t sub_23C8B0778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430D2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_23C8B07C0(uint64_t *a1)
{
  sub_23C8B07F0(*a1, a1[1]);
  return a1;
}

uint64_t sub_23C8B07F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_23C8B082C()
{
  unint64_t result;

  result = qword_256BCD498;
  if (!qword_256BCD498)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseMigrator.ForeignKeyChecks, &type metadata for DatabaseMigrator.ForeignKeyChecks);
    atomic_store(result, (unint64_t *)&qword_256BCD498);
  }
  return result;
}

void sub_23C8B086C(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  sub_23C7DB390();
}

uint64_t assignWithCopy for DatabaseMigrator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DatabaseMigrator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for DatabaseMigrator()
{
  sub_23C7DFB90();
}

uint64_t storeEnumTagSinglePayload for DatabaseMigrator.ForeignKeyChecks(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8B097C + 4 * byte_23C9189D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8B09B0 + 4 * asc_23C9189D0[v4]))();
}

uint64_t sub_23C8B09B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B09B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8B09C0);
  return result;
}

uint64_t sub_23C8B09CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8B09D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8B09D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B09E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for DatabaseMigrator.ForeignKeyChecks()
{
  sub_23C7DFB90();
}

void type metadata accessor for DatabasePublishers.Migrate()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8B0A04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8B0A28(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

void sub_23C8B0A60(int a1, void *a2)
{
  uint64_t v2;

  sub_23C8B06B8(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t sub_23C8B0A6C(uint64_t a1)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  return sub_23C8AE818(a1, v2 | *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t, _QWORD))(v1 + 32));
}

uint64_t sub_23C8B0A94()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C8B0AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 17))
    v3 = 256;
  else
    v3 = 0;
  return sub_23C8B05AC(a1, a2, v3 | *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23C8B0AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = (uint64_t *)(a1 + 16 * v3 + 24);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      sub_23C868438(v6, v7, a2);
      v9 = v8;
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        break;
      v5 -= 2;
      if (--v4 == -1)
      {
        v4 = 0;
        break;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_23C8B0B8C(unint64_t result, uint64_t a2)
{
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    v2 = *(_QWORD *)(a2 + 16 * result + 32);
    swift_bridgeObjectRetain();
    return v2;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23C8B0BD4(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 1) != 0)
    return 0;
  v7 = a3;
  result = a1(&v6, &v7);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

unint64_t sub_23C8B0C2C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v6;

  result = sub_23C8B0B8C(*a1, *a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

unint64_t sub_23C8B0C68@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C8B0C2C(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_23C8B0C84()
{
  sub_23C7EDF3C();
  return sub_23C8B0070();
}

uint64_t static DatabaseDateComponents.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7E2548();
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 == 3)
  {
    v6 = sub_23C7E076C();
    sub_23C7ED944(v6, v7);
    sub_23C910EA8();
    sub_23C7E076C();
    sub_23C910E90();
    v9 = v8;
    v10 = sub_23C7E076C();
    sub_23C7E5640(v10, v11, 3);
    if (v9)
      goto LABEL_5;
  }
  else if (v5 == 2)
  {
    swift_bridgeObjectRetain();
LABEL_5:
    v12 = sub_23C7E076C();
    sub_23C805D20(v12, v13, v14);
    return swift_bridgeObjectRelease();
  }
  v16 = sub_23C7E40E4();
  return sub_23C7DE70C(a2, 1, 1, v16);
}

uint64_t DatabaseDateComponents.init(sqliteStatement:index:)@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  const unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v7 = sub_23C7E0A8C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7E2548();
  v9 = sub_23C7E40E4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7DE96C();
  sub_23C7E79A8(&qword_25430B238);
  sub_23C7E0790();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  v17 = sqlite3_column_text(a1, a2);
  if (v17)
  {
    v18 = (uint64_t)v17;
    v19 = sqlite3_column_bytes(a1, a2);
    SQLiteDateParser.components(cString:length:)(v18, v19, (uint64_t)v16);
    sub_23C805F00((uint64_t)v16, (uint64_t)v14);
    if (sub_23C7DE718((uint64_t)v14, 1, v9) != 1)
    {
      sub_23C805E24((uint64_t)v14, v4);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, v4, v7);
      v22 = *(_BYTE *)(v4 + *(int *)(v9 + 20));
      sub_23C805EAC(v4);
      v21 = v25;
      *(_BYTE *)(v25 + *(int *)(v9 + 20)) = v22;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v21, v3, v7);
      v20 = 0;
      return sub_23C7DE70C(v21, v20, 1, v9);
    }
    sub_23C8B118C((uint64_t)v14);
  }
  v20 = 1;
  v21 = v25;
  return sub_23C7DE70C(v21, v20, 1, v9);
}

uint64_t type metadata accessor for DatabaseDateComponents()
{
  uint64_t result;

  result = qword_25430B2A8;
  if (!qword_25430B2A8)
    return swift_getSingletonMetadata();
  return result;
}

GRDBInternal::DatabaseDateComponents::Format_optional __swiftcall DatabaseDateComponents.Format.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char v4;
  GRDBInternal::DatabaseDateComponents::Format_optional result;

  v2 = v1;
  v3 = sub_23C911814();
  swift_bridgeObjectRelease();
  v4 = 7;
  if (v3 < 7)
    v4 = v3;
  *v2 = v4;
  sub_23C7DB3A0();
  return result;
}

uint64_t DatabaseDateComponents.Format.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C8B0FF8
                                                            + 4 * asc_23C918AF0[*v0]))(0x2D4D4D2D79797979, 0xEA00000000006464);
}

unint64_t sub_23C8B0FF8()
{
  return 0xD000000000000010;
}

unint64_t sub_23C8B1014()
{
  return 0xD000000000000013;
}

uint64_t sub_23C8B104C()
{
  return 0x6D6D3A4848;
}

uint64_t sub_23C8B1060()
{
  return 0x73733A6D6D3A4848;
}

void sub_23C8B1088(char *a1)
{
  sub_23C839474(*a1);
}

void sub_23C8B1094()
{
  sub_23C8E7E00();
}

void sub_23C8B109C(uint64_t a1)
{
  char *v1;

  sub_23C8E80FC(a1, *v1);
}

void sub_23C8B10A4()
{
  sub_23C8E83E4();
}

GRDBInternal::DatabaseDateComponents::Format_optional sub_23C8B10AC(Swift::String *a1)
{
  return DatabaseDateComponents.Format.init(rawValue:)(*a1);
}

uint64_t sub_23C8B10B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DatabaseDateComponents.Format.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t DatabaseDateComponents.dateComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23C7E0A8C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DatabaseDateComponents.format.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C7E40E4();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t DatabaseDateComponents.init(_:format:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;

  v5 = *a2;
  *(_BYTE *)(a3 + *(int *)(sub_23C7E40E4() + 20)) = v5;
  v6 = sub_23C7E0A8C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
}

uint64_t sub_23C8B118C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430B238);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DatabaseDateComponents.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  __n128 *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  double v34;
  __n128 *v35;
  __n128 *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = *(unsigned __int8 *)(v1 + *(int *)(sub_23C7E40E4() + 20));
  v4 = MEMORY[0x24BEE1768];
  v5 = MEMORY[0x24BEE17F0];
  v6 = sub_23C9109C8();
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = v6;
  v9 = sub_23C9109E0();
  if ((v10 & 1) != 0)
    v11 = 1;
  else
    v11 = v9;
  v12 = sub_23C910998();
  if ((v13 & 1) != 0)
    v14 = 1;
  else
    v14 = v12;
  sub_23C7E79A8(&qword_256BCD4B8);
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = xmmword_23C918CB0;
  *(_QWORD *)(v15 + 56) = v4;
  *(_QWORD *)(v15 + 64) = v5;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 96) = v4;
  *(_QWORD *)(v15 + 104) = v5;
  *(_QWORD *)(v15 + 72) = v11;
  *(_QWORD *)(v15 + 136) = v4;
  *(_QWORD *)(v15 + 144) = v5;
  *(_QWORD *)(v15 + 112) = v14;
  v16 = sub_23C910E9C();
  v18 = v17;
  while (2)
  {
    v19 = v3;
    switch((int)v3)
    {
      case 0:
        goto LABEL_30;
      case 1:
        sub_23C9109B0();
        v20 = sub_23C7E4F30();
        if ((v21 & 1) != 0)
          v22 = 0;
        else
          v22 = v20;
        sub_23C7E79A8(&qword_256BCD4B8);
        v23 = sub_23C7DB388();
        *(_OWORD *)(v23 + 16) = xmmword_23C9157F0;
        *(_QWORD *)(v23 + 56) = v4;
        *(_QWORD *)(v23 + 64) = v5;
        *(_QWORD *)(v23 + 32) = v3;
        *(_QWORD *)(v23 + 96) = v4;
        *(_QWORD *)(v23 + 104) = v5;
        *(_QWORD *)(v23 + 72) = v22;
        sub_23C7EC7E8();
        goto LABEL_29;
      case 2:
        sub_23C9109B0();
        sub_23C7E4F30();
        v24 = sub_23C7EDF50();
        if ((v25 & 1) != 0)
          v26 = 0;
        else
          v26 = v24;
        sub_23C7E79A8(&qword_256BCD4B8);
        v27 = (__n128 *)sub_23C7DB388();
        sub_23C7E44C4(v27, (__n128)xmmword_23C918CB0)[7].n128_u64[0] = v26;
        sub_23C7EC7E8();
        goto LABEL_29;
      case 3:
        sub_23C9109B0();
        sub_23C7E4F30();
        v28 = sub_23C7EDF50();
        if ((v29 & 1) != 0)
          v30 = 0;
        else
          v30 = v28;
        v31 = sub_23C910980();
        v33 = v32;
        v34 = (double)v31;
        sub_23C7E79A8(&qword_256BCD4B8);
        v35 = (__n128 *)sub_23C7DB388();
        v36 = sub_23C7E44C4(v35, (__n128)xmmword_23C918CC0);
        v36[7].n128_u64[0] = v30;
        v37 = v34 / 1000000.0;
        if ((v33 & 1) != 0)
          v37 = 0.0;
        v38 = round(v37);
        if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        if (v38 <= -9.22337204e18)
        {
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v38 >= 9.22337204e18)
        {
LABEL_44:
          __break(1u);
          JUMPOUT(0x23C8B15B0);
        }
        v36[11].n128_u64[0] = v4;
        v36[11].n128_u64[1] = v5;
        v36[9].n128_u64[1] = (uint64_t)v38;
LABEL_29:
        v19 = sub_23C910E9C();
        v3 = v39;
LABEL_30:
        sub_23C7E79A8(&qword_25430D7D0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_23C9157F0;
        *(_QWORD *)(inited + 32) = v16;
        *(_QWORD *)(inited + 40) = v18;
        *(_QWORD *)(inited + 48) = v19;
        *(_QWORD *)(inited + 56) = v3;
        if (!v18)
        {
          v42 = MEMORY[0x24BEE4AF8];
          if (!v3)
            goto LABEL_41;
          goto LABEL_36;
        }
        swift_bridgeObjectRetain();
        sub_23C7F16C0();
        v42 = v41;
        v43 = *(_QWORD *)(v41 + 16);
        if (v43 >= *(_QWORD *)(v41 + 24) >> 1)
        {
          sub_23C7E6954();
          v42 = v51;
        }
        *(_QWORD *)(v42 + 16) = v43 + 1;
        v44 = v42 + 16 * v43;
        *(_QWORD *)(v44 + 32) = v16;
        *(_QWORD *)(v44 + 40) = v18;
        if (v3)
        {
LABEL_36:
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7E6954();
            v42 = v52;
          }
          v45 = *(_QWORD *)(v42 + 16);
          if (v45 >= *(_QWORD *)(v42 + 24) >> 1)
          {
            sub_23C7E6954();
            v42 = v53;
          }
          *(_QWORD *)(v42 + 16) = v45 + 1;
          v46 = v42 + 16 * v45;
          *(_QWORD *)(v46 + 32) = v19;
          *(_QWORD *)(v46 + 40) = v3;
        }
LABEL_41:
        swift_release();
        sub_23C7E79A8(&qword_25430D9F8);
        sub_23C7F16DC();
        v47 = sub_23C910E3C();
        v49 = v48;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)a1 = v47;
        *(_QWORD *)(a1 + 8) = v49;
        *(_BYTE *)(a1 + 16) = 2;
        return result;
      default:
        continue;
    }
  }
}

uint64_t DatabaseDateComponents.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[4];

  sub_23C7E79A8(&qword_25430B238);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E96FC();
  sub_23C911C10();
  if (!v2)
  {
    sub_23C7E7E34(v14, v14[3]);
    sub_23C7E96FC();
    v8 = sub_23C911A24();
    v10 = v9;
    swift_bridgeObjectRetain();
    sub_23C805D20(v8, v10, (uint64_t)v7);
    swift_bridgeObjectRelease_n();
    v11 = type metadata accessor for DatabaseDateComponents();
    if (sub_23C7DE718((uint64_t)v7, 1, v11) == 1)
    {
      sub_23C8B118C((uint64_t)v7);
      sub_23C911694();
      swift_allocError();
      sub_23C91167C();
      swift_willThrow();
    }
    else
    {
      sub_23C805E24((uint64_t)v7, a2);
    }
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  }
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a1);
}

uint64_t DatabaseDateComponents.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v2);
  sub_23C7DE96C();
  sub_23C7E7E34(a1, a1[3]);
  sub_23C911C28();
  DatabaseDateComponents.databaseValue.getter((uint64_t)&v11);
  if (v12 == 3)
  {
    v7 = sub_23C7E097C();
    sub_23C7ED944(v7, v8);
    sub_23C910EA8();
    sub_23C7E097C();
    sub_23C910E90();
    v10 = v9;
    sub_23C7E1C00();
    result = sub_23C7E1C00();
    if (!v10)
      goto LABEL_6;
LABEL_5:
    sub_23C800944((uint64_t)v13, v14);
    sub_23C7E097C();
    sub_23C911A48();
    swift_bridgeObjectRelease();
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  }
  if (v12 == 2)
    goto LABEL_5;
  v3 = sub_23C7E097C();
  result = sub_23C7E5640(v3, v4, v5);
LABEL_6:
  __break(1u);
  return result;
}

uint64_t sub_23C8B1884@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  const unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a4;
  v7 = sub_23C910A40();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23C7E79A8(&qword_25430B238);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - v18;
  v20 = sqlite3_column_text(a1, a2);
  if (v20)
  {
    v21 = (uint64_t)v20;
    v22 = sqlite3_column_bytes(a1, a2);
    SQLiteDateParser.components(cString:length:)(v21, v22, (uint64_t)v19);
    sub_23C805F00((uint64_t)v19, (uint64_t)v17);
    if (sub_23C7DE718((uint64_t)v17, 1, a3) != 1)
    {
      sub_23C805E24((uint64_t)v17, (uint64_t)v13);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
      v25 = v13[*(int *)(a3 + 20)];
      sub_23C805EAC((uint64_t)v13);
      v24 = v28;
      *(_BYTE *)(v28 + *(int *)(a3 + 20)) = v25;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24, v11, v7);
      v23 = 0;
      return sub_23C7DE70C(v24, v23, 1, a3);
    }
    sub_23C8B118C((uint64_t)v17);
  }
  v23 = 1;
  v24 = v28;
  return sub_23C7DE70C(v24, v23, 1, a3);
}

uint64_t sub_23C8B1A58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DatabaseDateComponents.init(from:)(a1, a2);
}

uint64_t sub_23C8B1A6C(_QWORD *a1)
{
  return DatabaseDateComponents.encode(to:)(a1);
}

unint64_t sub_23C8B1A84()
{
  unint64_t result;

  result = qword_256BCD4C0[0];
  if (!qword_256BCD4C0[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseDateComponents.Format, &type metadata for DatabaseDateComponents.Format);
    atomic_store(result, qword_256BCD4C0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DatabaseDateComponents(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C910A40();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for DatabaseDateComponents(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C910A40();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DatabaseDateComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C910A40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for DatabaseDateComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C910A40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for DatabaseDateComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C910A40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DatabaseDateComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C910A40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseDateComponents()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C8B1CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;

  v6 = sub_23C7E0A8C();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return sub_23C7DE718(a1, a2, v6);
  v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 7)
    return v8 - 6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatabaseDateComponents()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23C8B1D74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_23C7E0A8C();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    sub_23C7DE70C(a1, a2, a2, v8);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 6;
    sub_23C7DB3A0();
  }
}

uint64_t sub_23C8B1DDC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23C910A40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DatabaseDateComponents.Format(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseDateComponents.Format(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23C8B1F20 + 4 * byte_23C918AFC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23C8B1F54 + 4 * byte_23C918AF7[v4]))();
}

uint64_t sub_23C8B1F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B1F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8B1F64);
  return result;
}

uint64_t sub_23C8B1F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8B1F78);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23C8B1F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B1F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseDateComponents.Format()
{
  return &type metadata for DatabaseDateComponents.Format;
}

uint64_t SQLiteDateParser.components(cString:length:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[15];
  char v36;
  uint64_t v37;

  v6 = sub_23C7E79A8(&qword_25430B2E8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_23C7E79A8(&qword_25430B168);
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23C910A40();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v35[-v15];
  if (a2 < 5)
    goto LABEL_2;
  if (*(_BYTE *)(a1 + 4) != 45)
  {
    if (*(_BYTE *)(a1 + 2) != 58)
    {
LABEL_2:
      v17 = sub_23C7E40E4();
      return sub_23C7DE70C(a3, 1, 1, v17);
    }
    v26 = sub_23C910C14();
    v29 = sub_23C7E9388(v26, v27, v28, v26);
    sub_23C7DE70C((uint64_t)v8, 1, 1, v29);
    sub_23C7E8648();
    v30 = (char **)sub_23C7E8B7C();
    sub_23C8B2464(v30, v31);
    v25 = v36;
    if (v36 == 7 || v37)
    {
      (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a3, v14, v10);
LABEL_15:
    v32 = sub_23C7E40E4();
    *(_BYTE *)(a3 + *(int *)(v32 + 20)) = v25;
    v33 = a3;
    v34 = 0;
    return sub_23C7DE70C(v33, v34, 1, v32);
  }
  v19 = sub_23C910C14();
  v22 = sub_23C7E9388(v19, v20, v21, v19);
  sub_23C7DE70C((uint64_t)v8, 1, 1, v22);
  sub_23C7E8648();
  v23 = sub_23C7E8B7C();
  sub_23C8B2318(v23, v24);
  v25 = v36;
  if (v36 != 7 && !v37)
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a3, v16, v10);
    goto LABEL_15;
  }
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
LABEL_11:
  v32 = sub_23C7E40E4();
  v33 = a3;
  v34 = 1;
  return sub_23C7DE70C(v33, v34, 1, v32);
}

uint64_t sub_23C8B22D4@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;

  v4 = strlen(a1);
  return SQLiteDateParser.components(cString:length:)((uint64_t)a1, v4, a2);
}

uint64_t sub_23C8B2318@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  result = sub_23C8B274C();
  if ((v5 & 1) != 0)
    goto LABEL_14;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 < 1;
  v8 = v6 - 1;
  if (v7)
    goto LABEL_14;
  if (**(_BYTE **)a1 != 45)
    goto LABEL_14;
  ++*(_QWORD *)a1;
  *(_QWORD *)(a1 + 8) = v8;
  result = sub_23C8B28A4();
  if ((v9 & 1) != 0)
    goto LABEL_14;
  result = sub_23C8B2854(45);
  if ((result & 1) == 0)
    goto LABEL_14;
  result = sub_23C8B28A4();
  if ((v10 & 1) != 0)
    goto LABEL_14;
  sub_23C9109D4();
  sub_23C9109EC();
  result = sub_23C9109A4();
  if (!*(_QWORD *)(a1 + 8))
  {
    *a2 = 0;
    return result;
  }
  if ((sub_23C8B2854(32) & 1) == 0)
  {
    result = sub_23C8B2854(84);
    if ((result & 1) == 0)
      goto LABEL_14;
  }
  result = sub_23C8B2464((char **)a1, &v12);
  switch(v12)
  {
    case 6:
      v11 = 3;
      break;
    case 5:
      v11 = 2;
      break;
    case 4:
      v11 = 1;
      break;
    default:
LABEL_14:
      v11 = 7;
      break;
  }
  *a2 = v11;
  return result;
}

uint64_t sub_23C8B2464@<X0>(char **a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;

  result = sub_23C8B28A4();
  if ((v5 & 1) != 0)
    goto LABEL_17;
  v6 = (uint64_t)a1[1];
  v7 = v6 < 1;
  v8 = (char *)(v6 - 1);
  if (v7)
    goto LABEL_17;
  if (**a1 != 58)
    goto LABEL_17;
  ++*a1;
  a1[1] = v8;
  result = sub_23C8B28A4();
  if ((v9 & 1) != 0)
    goto LABEL_17;
  sub_23C9109BC();
  result = sub_23C910A04();
  if (!a1[1] || (result = sub_23C8B2934(a1), (result & 1) != 0))
  {
    v10 = 4;
LABEL_18:
    *a2 = v10;
    return result;
  }
  result = sub_23C8B2854(58);
  if ((result & 1) == 0)
    goto LABEL_17;
  result = sub_23C8B28A4();
  if ((v11 & 1) != 0)
    goto LABEL_17;
  result = sub_23C910A1C();
  if (!a1[1] || (result = sub_23C8B2934(a1), (result & 1) != 0))
  {
    v10 = 5;
    goto LABEL_18;
  }
  result = sub_23C8B2854(46);
  if ((result & 1) == 0 || (v12 = (uint64_t)a1[1], v12 < 1))
  {
LABEL_17:
    v10 = 7;
    goto LABEL_18;
  }
  if (**a1 - 48 != (char)(**a1 - 48))
  {
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((**a1 - 48) > 9u)
    goto LABEL_17;
  v13 = (char *)(v12 - 1);
  ++*a1;
  a1[1] = v13;
  if (!v13)
    goto LABEL_21;
  result = sub_23C8B2934(a1);
  if ((result & 1) != 0)
    goto LABEL_21;
  v14 = (uint64_t)a1[1];
  if (v14 < 1)
    goto LABEL_17;
  if (**a1 - 48 != (char)(**a1 - 48))
    goto LABEL_43;
  if ((**a1 - 48) > 9u)
    goto LABEL_17;
  v15 = (char *)(v14 - 1);
  ++*a1;
  a1[1] = v15;
  if (!v15 || (result = sub_23C8B2934(a1), (result & 1) != 0))
  {
LABEL_21:
    result = sub_23C91098C();
LABEL_22:
    v10 = 6;
    goto LABEL_18;
  }
  v16 = (uint64_t)a1[1];
  v17 = v16 - 1;
  if (v16 < 1)
    goto LABEL_17;
  v18 = *a1;
  if (**a1 - 48 != (char)(**a1 - 48))
    goto LABEL_45;
  if ((**a1 - 48) > 9u)
    goto LABEL_17;
  v19 = v18 + 1;
  *a1 = v18 + 1;
  a1[1] = (char *)v17;
  result = sub_23C91098C();
  if (v16 == 1)
    goto LABEL_41;
  if ((char)(*v19 - 48) == *v19 - 48)
  {
    if ((*v19 - 48) <= 9u)
    {
      while (v17 >= 2)
      {
        v20 = v19[1] - 48;
        if ((char)(v19[1] - 48) != v20)
          goto LABEL_44;
        ++v19;
        --v17;
        if (v20 >= 0xAu)
          goto LABEL_40;
      }
      v17 = 0;
      v19 = &v18[v16];
LABEL_40:
      *a1 = v19;
      a1[1] = (char *)v17;
    }
LABEL_41:
    result = sub_23C8B2934(a1);
    goto LABEL_22;
  }
LABEL_46:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SQLiteDateParser()
{
  return &type metadata for SQLiteDateParser;
}

uint64_t sub_23C8B274C()
{
  char **v0;
  uint64_t v1;
  char *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t result;

  v1 = (uint64_t)v0[1];
  if (v1 < 1)
    return 0;
  v2 = *v0;
  v3 = **v0 - 48;
  if (v3 != (char)(**v0 - 48))
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if ((**v0 - 48) > 9u)
    return 0;
  *v0 = v2 + 1;
  v0[1] = (char *)(v1 - 1);
  if (v1 == 1)
    return 0;
  v4 = v2[1] - 48;
  if (v4 != (char)v4)
    goto LABEL_16;
  if ((v2[1] - 48) > 9u)
    return 0;
  *v0 = v2 + 2;
  v0[1] = (char *)(v1 - 2);
  if (v1 == 2)
    return 0;
  v5 = v2[2] - 48;
  if (v5 != (char)v5)
    goto LABEL_17;
  if ((v2[2] - 48) > 9u)
    return 0;
  *v0 = v2 + 3;
  v0[1] = (char *)(v1 - 3);
  if (v1 == 3)
    return 0;
  v6 = v2[3] - 48;
  if (v6 != (char)v6)
    goto LABEL_18;
  if ((v2[3] - 48) > 9u)
    return 0;
  *v0 = v2 + 4;
  v0[1] = (char *)(v1 - 4);
  return 10 * (10 * (10 * v3 + v4) + v5)
       + v6;
}

uint64_t sub_23C8B2854(uint64_t result)
{
  char **v1;
  uint64_t v2;
  BOOL v3;
  char *v4;
  char v5;

  v2 = (uint64_t)v1[1];
  v3 = v2 < 1;
  v4 = (char *)(v2 - 1);
  if (v3)
    return 0;
  v5 = result;
  if (result > 0x7F)
  {
    __break(1u);
  }
  else
  {
    result = 0;
    if ((**v1 & 0x80000000) == 0 && **v1 == v5)
    {
      ++*v1;
      v1[1] = v4;
      return 1;
    }
  }
  return result;
}

uint64_t sub_23C8B28A4()
{
  char **v0;
  uint64_t v1;
  _BYTE *v2;
  int v3;
  int v4;
  uint64_t result;

  v1 = (uint64_t)v0[1];
  if (v1 < 1)
    return 0;
  v2 = *v0;
  v3 = **v0 - 48;
  if (v3 != (char)(**v0 - 48))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if ((**v0 - 48) > 9u)
    return 0;
  *v0 = v2 + 1;
  v0[1] = (char *)(v1 - 1);
  if (v1 == 1)
    return 0;
  v4 = (char)v2[1] - 48;
  if (v4 != (char)v4)
    goto LABEL_10;
  if ((v2[1] - 48) > 9u)
    return 0;
  *v0 = v2 + 2;
  v0[1] = (char *)(v1 - 2);
  return 10 * v3 + v4;
}

uint64_t sub_23C8B2934(char **a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned __int8 *v5;
  char *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v2 = sub_23C7E79A8(&qword_25430B2E8);
  MEMORY[0x24BDAC7A8](v2);
  v3 = (uint64_t)a1[1];
  v4 = v3 < 1;
  v5 = (unsigned __int8 *)(v3 - 1);
  if (!v4)
  {
    v6 = *a1;
    if ((**a1 & 0x80000000) == 0)
    {
      v7 = **a1;
      if (v7 == 43)
      {
        *a1 = v6 + 1;
        a1[1] = (char *)v5;
        v9 = sub_23C8B28A4();
        if ((v10 & 1) == 0)
        {
          v11 = v9;
          if ((sub_23C8B2854(58) & 1) != 0)
          {
            result = sub_23C8B28A4();
            if ((v12 & 1) == 0)
            {
              if ((unsigned __int128)(v11 * (__int128)3600) >> 64 != (3600 * v11) >> 63)
              {
LABEL_31:
                __break(1u);
                goto LABEL_32;
              }
              if ((unsigned __int128)(result * (__int128)60) >> 64 != (60 * result) >> 63)
              {
LABEL_32:
                __break(1u);
                return result;
              }
              if (!__OFADD__(3600 * v11, 60 * result))
                goto LABEL_6;
              __break(1u);
            }
          }
        }
      }
      else if (v7 == 90)
      {
        *a1 = v6 + 1;
        a1[1] = (char *)v5;
LABEL_6:
        sub_23C910C20();
        sub_23C910A34();
        return 1;
      }
    }
    v13 = (uint64_t)a1[1];
    v4 = v13 < 1;
    v14 = (unsigned __int8 *)(v13 - 1);
    if (!v4 && **a1 == 45)
    {
      ++*a1;
      a1[1] = (char *)v14;
      v15 = sub_23C8B28A4();
      if ((v16 & 1) == 0)
      {
        v17 = v15;
        if ((sub_23C8B2854(58) & 1) != 0)
        {
          result = sub_23C8B28A4();
          if ((v18 & 1) == 0)
          {
            v19 = 3600 * v17;
            if ((unsigned __int128)(v17 * (__int128)3600) >> 64 == (3600 * v17) >> 63)
            {
              v20 = 60 * result;
              if ((unsigned __int128)(result * (__int128)60) >> 64 == (60 * result) >> 63)
              {
                v21 = __OFADD__(v19, v20);
                v22 = v19 + v20;
                if (!v21)
                {
                  if (!__OFSUB__(0, v22))
                    goto LABEL_6;
                  __break(1u);
                  return 0;
                }
                goto LABEL_30;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
      }
    }
  }
  return 0;
}

void + infix(_:_:)()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E44E0();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E3408();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    sub_23C8027EC((uint64_t)v33);
    v12 = v33;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(v33, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v13 = 43;
    v14 = 0xE100000000000000;
    v15 = 0;
    *(_QWORD *)&v16 = 0;
    *(_DWORD *)((char *)&v16 + 7) = 0;
    v17 = v3;
    sub_23C874ED8((uint64_t)&v13);
    v12 = &v13;
    goto LABEL_6;
  }
  sub_23C7DB530((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, *((uint64_t *)&v16 + 1), v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33[0]);
  sub_23C7E072C();
  sub_23C7E3190(v0, v33);
LABEL_7:
  sub_23C7DE90C();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E44E0();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E44E0();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    sub_23C8027EC((uint64_t)v33);
    v12 = v33;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(v33, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v13 = 43;
    v14 = 0xE100000000000000;
    v15 = 0;
    *(_QWORD *)&v16 = 0;
    *(_DWORD *)((char *)&v16 + 7) = 0;
    v17 = v3;
    sub_23C874ED8((uint64_t)&v13);
    v12 = &v13;
    goto LABEL_6;
  }
  sub_23C7DB530((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, *((uint64_t *)&v16 + 1), v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33[0]);
  sub_23C7E072C();
  sub_23C7E3190(v0, v33);
LABEL_7:
  sub_23C7DE90C();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E3408();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E44E0();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v33[0] = 0;
    v33[1] = 0;
    v34 = 0;
    sub_23C8027EC((uint64_t)v33);
    v12 = v33;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(v33, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v13 = 43;
    v14 = 0xE100000000000000;
    v15 = 0;
    *(_QWORD *)&v16 = 0;
    *(_DWORD *)((char *)&v16 + 7) = 0;
    v17 = v3;
    sub_23C874ED8((uint64_t)&v13);
    v12 = &v13;
    goto LABEL_6;
  }
  sub_23C7DB530((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, *((uint64_t *)&v16 + 1), v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33[0]);
  sub_23C7E072C();
  sub_23C7E3190(v0, v33);
LABEL_7:
  sub_23C7DE90C();
}

void - infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7DFD10(a1, a2);
}

{
  sub_23C7E18EC(a1, a2);
}

{
  sub_23C7E6844(a1, a2);
}

void * infix(_:_:)()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E44E0();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E3408();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v34 = xmmword_23C914530;
    v35 = 0;
    sub_23C8027EC((uint64_t)&v34);
    v12 = (uint64_t *)&v34;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(&v34, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v14 = 42;
    v15 = 0xE100000000000000;
    v16 = 1;
    *(_QWORD *)&v17 = 0;
    *(_DWORD *)((char *)&v17 + 7) = 0;
    v18 = v3;
    sub_23C874ED8((uint64_t)&v14);
    v12 = &v14;
    goto LABEL_6;
  }
  sub_23C7E5840((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34);
  sub_23C7E072C();
  sub_23C7E3190(v0, &v34);
LABEL_7:
  sub_23C7ECD18();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E44E0();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E44E0();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v34 = xmmword_23C914530;
    v35 = 0;
    sub_23C8027EC((uint64_t)&v34);
    v12 = (uint64_t *)&v34;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(&v34, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v14 = 42;
    v15 = 0xE100000000000000;
    v16 = 1;
    *(_QWORD *)&v17 = 0;
    *(_DWORD *)((char *)&v17 + 7) = 0;
    v18 = v3;
    sub_23C874ED8((uint64_t)&v14);
    v12 = &v14;
    goto LABEL_6;
  }
  sub_23C7E5840((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34);
  sub_23C7E072C();
  sub_23C7E3190(v0, &v34);
LABEL_7:
  sub_23C7ECD18();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;

  sub_23C8B48A8();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = sub_23C7E4F3C();
  *(_OWORD *)(v3 + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v1, v1[3]);
  sub_23C7E3408();
  sub_23C7E7E34(v2, v2[3]);
  sub_23C7E44E0();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    sub_23C7E072C();
    v34 = xmmword_23C914530;
    v35 = 0;
    sub_23C8027EC((uint64_t)&v34);
    v12 = (uint64_t *)&v34;
LABEL_6:
    sub_23C7E322C(v12);
    goto LABEL_7;
  }
  v5 = sub_23C7E3190(&v34, (const void *)(v3 + 32));
  if (v4 != 1)
  {
    v14 = 42;
    v15 = 0xE100000000000000;
    v16 = 1;
    *(_QWORD *)&v17 = 0;
    *(_DWORD *)((char *)&v17 + 7) = 0;
    v18 = v3;
    sub_23C874ED8((uint64_t)&v14);
    v12 = &v14;
    goto LABEL_6;
  }
  sub_23C7E5840((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34);
  sub_23C7E072C();
  sub_23C7E3190(v0, &v34);
LABEL_7:
  sub_23C7ECD18();
}

void / infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7DFD10(a1, a2);
}

{
  sub_23C7E18EC(a1, a2);
}

{
  sub_23C7E6844(a1, a2);
}

void sub_23C8B2D1C(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[21];
  char v12[168];
  _BYTE v13[168];
  _BYTE v14[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E44E0();
  sub_23C7E3190(v12, v13);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7E3408();
  v3 = sub_23C7E3190(v11, v14);
  sub_23C7E6D7C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], v11[8], v11[9], v11[10],
    v11[11],
    v11[12],
    v11[13],
    v11[14],
    v11[15],
    v11[16],
    v11[17],
    v11[18],
    v11[19],
    v11[20],
    v12[0]);
  sub_23C7E0A94((uint64_t)v14);
  sub_23C7E0A94((uint64_t)v13);
  sub_23C7DEEA8();
}

uint64_t && infix(_:_:)()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E8EE4();
  sub_23C7EE1B8();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E44E0();
  v1 = sub_23C7E8B90();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E8EE4();
  sub_23C7EE1B8();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E44E0();
  v1 = sub_23C7DC604();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E8EE4();
  sub_23C7EE1B8();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E3408();
  v1 = sub_23C7E8B90();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

void Sequence<>.contains(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[168];
  _BYTE __dst[162];
  _QWORD v18[21];
  _BYTE __src[168];
  _BYTE v20[168];

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  KeyPath = swift_getKeyPath();
  sub_23C891CA0((uint64_t)sub_23C87389C, (uint64_t)&v8, v9, (uint64_t)&type metadata for SQLExpression, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v5);
  v7 = v6;
  swift_release();
  v18[0] = v7;
  sub_23C838E78((uint64_t)v18);
  sub_23C813130(v18, __src);
  memcpy(__dst, __src, sizeof(__dst));
  sub_23C8B490C();
  sub_23C7E5F68();
  sub_23C7E3190(v16, v20);
  sub_23C832DF0(v16, a4);
  sub_23C811F5C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  sub_23C7E072C();
  sub_23C7DEEA8();
}

void == infix(_:_:)(_QWORD *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  _BYTE v5[168];
  _BYTE v6[168];
  _BYTE v7[168];
  _BYTE v8[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7EC7FC();
  sub_23C7E3190(v6, v7);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7EC7FC();
  sub_23C7E3190(v5, v8);
  sub_23C871278(v6, v5, a3);
  sub_23C7E0A94((uint64_t)v8);
  sub_23C7E0A94((uint64_t)v7);
  sub_23C7ED17C();
}

void == infix(_:_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[168];
  _QWORD v4[2];
  char v5;
  _QWORD v6[3];
  uint64_t v7;
  _BYTE v8[168];
  _BYTE v9[168];

  sub_23C7E7E34(a1, a1[3]);
  v1 = sub_23C7EC7FC();
  sub_23C8B48FC(v1, (uint64_t)v6);
  if (v7)
  {
    sub_23C7E7E34(v6, v7);
    sub_23C7E69D4();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
    sub_23C7E3190(v9, v4);
  }
  else
  {
    sub_23C8B469C((uint64_t)v6);
    v4[0] = 0;
    v4[1] = 0;
    v5 = 4;
    sub_23C8027EC((uint64_t)v4);
    sub_23C8B4904(v4);
  }
  sub_23C7E3190(v3, v9);
  sub_23C8B48F0(v8, v2);
  sub_23C7E0A94((uint64_t)v9);
  sub_23C7E3190(v4, v8);
  sub_23C7E0A94((uint64_t)v4);
  sub_23C7ED17C();
}

void != infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))== infix(_:_:), a3);
}

{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))== infix(_:_:), a3);
}

{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))== infix(_:_:), a3);
}

void ! prefix(_:)(_QWORD *a1@<X0>, void *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[21];

  v3 = sub_23C7E7E34(a1, a1[3]);
  sub_23C7E63A8((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39[0]);
  sub_23C7E3190(&v18, v39);
  sub_23C873110((void *)2, a2);
  sub_23C7DB530(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39[0]);
  sub_23C7E6BBC();
}

uint64_t || infix(_:_:)()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E1C10();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E44E0();
  v1 = sub_23C7E8B90();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E1C10();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E44E0();
  v1 = sub_23C7DC604();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E69BC();
  sub_23C7E1C10();
  sub_23C7E79A8(&qword_25430CF70);
  *(_OWORD *)(sub_23C7E4F3C() + 16) = xmmword_23C9157F0;
  sub_23C7E7E34(v0, v0[3]);
  sub_23C7E3408();
  v1 = sub_23C7E8B90();
  sub_23C7EDF5C(v1);
  return sub_23C7E93A8();
}

void == infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v4[168];
  _BYTE v5[168];
  _QWORD v6[2];
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  _BYTE v10[168];

  sub_23C874DBC(a1, (uint64_t)v8);
  if (v9)
  {
    sub_23C7E7E34(v8, v9);
    sub_23C7E1874();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
    sub_23C7E3190(v10, v6);
  }
  else
  {
    sub_23C8B469C((uint64_t)v8);
    v6[0] = 0;
    v6[1] = 0;
    v7 = 4;
    sub_23C8027EC((uint64_t)v6);
    sub_23C8B4904(v6);
  }
  sub_23C7E3190(v5, v10);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7EC7FC();
  sub_23C7E3190(v4, v6);
  sub_23C8B48F0(v5, v3);
  sub_23C7E0A94((uint64_t)v6);
  sub_23C7E0A94((uint64_t)v10);
  sub_23C7DF5B4();
}

void == infix(_:_:)(_QWORD *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[21];

  if ((a2 & 1) != 0)
  {
    v4 = sub_23C7E7E34(a1, a1[3]);
    sub_23C7E63A8((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50[0]);
    sub_23C7E3190(&v29, v50);
    v12 = a3;
    v13 = 0;
  }
  else
  {
    v14 = sub_23C7E7E34(a1, a1[3]);
    sub_23C7E63A8((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50[0]);
    sub_23C7E3190(&v29, v50);
    v12 = a3;
    v13 = 1;
  }
  sub_23C873110((void *)v13, v12);
  sub_23C7DB530(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50[0]);
  sub_23C7E6BBC();
}

void == infix(_:_:)(char a1@<W0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[21];

  if ((a1 & 1) != 0)
  {
    v4 = sub_23C7E7E34(a2, a2[3]);
    sub_23C7E63A8((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50[0]);
    sub_23C7E3190(&v29, v50);
    v12 = a3;
    v13 = 0;
  }
  else
  {
    v14 = sub_23C7E7E34(a2, a2[3]);
    sub_23C7E63A8((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50[0]);
    sub_23C7E3190(&v29, v50);
    v12 = a3;
    v13 = 1;
  }
  sub_23C873110((void *)v13, v12);
  sub_23C7DB530(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50[0]);
  sub_23C7E6BBC();
}

void != infix(_:_:)(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = sub_23C7DB388();
  == infix(_:_:)(a1, a2, (void *)(v6 + 16));
  sub_23C7E6B1C(v4);
  sub_23C7E6BCC(v5);
  sub_23C7E653C();
}

void != infix(_:_:)(char a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = sub_23C7DB388();
  == infix(_:_:)(a1, a2, (void *)(v6 + 16));
  sub_23C7E6B1C(v4);
  sub_23C7E6BCC(v5);
  sub_23C7E653C();
}

void === infix(_:_:)(_QWORD *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  _BYTE v5[168];
  _BYTE v6[168];
  _BYTE v7[168];
  _BYTE v8[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7EC7FC();
  sub_23C7E3190(v6, v7);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7EC7FC();
  sub_23C7E3190(v5, v8);
  sub_23C86F20C(2, v6, v5, a3);
  sub_23C7E0A94((uint64_t)v8);
  sub_23C7E0A94((uint64_t)v7);
  sub_23C7ED17C();
}

void === infix(_:_:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _BYTE v3[168];
  _QWORD v4[2];
  char v5;
  _QWORD v6[3];
  uint64_t v7;
  _BYTE v8[168];
  _BYTE v9[168];

  sub_23C7E7E34(a1, a1[3]);
  v1 = sub_23C7EC7FC();
  sub_23C8B48FC(v1, (uint64_t)v6);
  if (v7)
  {
    sub_23C7E7E34(v6, v7);
    sub_23C7E69D4();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
    sub_23C7E3190(v9, v4);
  }
  else
  {
    sub_23C8B469C((uint64_t)v6);
    v4[0] = 0;
    v4[1] = 0;
    v5 = 4;
    sub_23C8027EC((uint64_t)v4);
    sub_23C8B4904(v4);
  }
  v2 = sub_23C7E3190(v3, v9);
  sub_23C8B48DC((uint64_t)v2, v8, v3);
  sub_23C7E0A94((uint64_t)v9);
  sub_23C7E3190(v4, v8);
  sub_23C7E0A94((uint64_t)v4);
  sub_23C7ED17C();
}

void === infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  _BYTE v5[168];
  _BYTE v6[168];
  _BYTE v7[168];
  _QWORD v8[2];
  char v9;
  _BYTE v10[168];
  __int128 v11;
  uint64_t v12;
  _QWORD v13[4];

  sub_23C874DBC(a1, (uint64_t)&v11);
  if (v12)
  {
    sub_23C7DB5CC(&v11, (uint64_t)v13);
    sub_23C7E7E34(v13, v13[3]);
    sub_23C7E1874();
    sub_23C7E3190(v7, v8);
    sub_23C7E7E34(a2, a2[3]);
    sub_23C7EC7FC();
    v3 = sub_23C7E3190(v6, v10);
    sub_23C8B48DC((uint64_t)v3, v7, v6);
    sub_23C7E0A94((uint64_t)v10);
    sub_23C7E0A94((uint64_t)v8);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  }
  else
  {
    sub_23C8B469C((uint64_t)&v11);
    sub_23C7E7E34(a2, a2[3]);
    sub_23C7EC7FC();
    sub_23C7E3190(v6, v7);
    v8[1] = 0;
    v8[0] = 0;
    v9 = 4;
    sub_23C8027EC((uint64_t)v8);
    sub_23C800B48(v8, v10);
    v4 = sub_23C7E3190(v5, v10);
    sub_23C8B48DC((uint64_t)v4, v6, v5);
    sub_23C811F5C((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  }
  sub_23C7DF5B4();
}

void !== infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))=== infix(_:_:), a3);
}

{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))=== infix(_:_:), a3);
}

{
  sub_23C8B3968(a1, a2, (void (*)(uint64_t, uint64_t))=== infix(_:_:), a3);
}

void sub_23C8B3968(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v8;
  _QWORD v9[5];

  v9[3] = &type metadata for SQLExpression;
  v9[4] = &protocol witness table for SQLExpression;
  v9[0] = sub_23C7DB388();
  a3(a1, a2);
  ! prefix(_:)(v9, a4);
  sub_23C7E6BCC(v8);
  sub_23C7E653C();
}

void <= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7DF448(a1, a2);
}

{
  sub_23C7EE0AC(a1, a2);
}

{
  sub_23C8B48E8(a1, a2);
}

void < infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7E18EC(a1, a2);
}

{
  sub_23C7DFD10(a1, a2);
}

{
  sub_23C7E6844(a1, a2);
}

void sub_23C8B39FC(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[21];
  char v12[168];
  _BYTE v13[168];
  _BYTE v14[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E44E0();
  sub_23C7E3190(v12, v13);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7E44E0();
  v3 = sub_23C7E3190(v11, v14);
  sub_23C7E6D7C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], v11[8], v11[9], v11[10],
    v11[11],
    v11[12],
    v11[13],
    v11[14],
    v11[15],
    v11[16],
    v11[17],
    v11[18],
    v11[19],
    v11[20],
    v12[0]);
  sub_23C7E0A94((uint64_t)v14);
  sub_23C7E0A94((uint64_t)v13);
  sub_23C7DB750();
}

void sub_23C8B3AB4(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[21];
  char v12[168];
  _BYTE v13[168];
  _BYTE v14[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E3408();
  sub_23C7E3190(v12, v13);
  sub_23C7E7E34(a2, a2[3]);
  sub_23C7E44E0();
  v3 = sub_23C7E3190(v11, v14);
  sub_23C7E6D7C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11[0], v11[1], v11[2], v11[3], v11[4], v11[5], v11[6], v11[7], v11[8], v11[9], v11[10],
    v11[11],
    v11[12],
    v11[13],
    v11[14],
    v11[15],
    v11[16],
    v11[17],
    v11[18],
    v11[19],
    v11[20],
    v12[0]);
  sub_23C7E0A94((uint64_t)v14);
  sub_23C7E0A94((uint64_t)v13);
  sub_23C7DEEA8();
}

void > infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7E18EC(a1, a2);
}

{
  sub_23C7DFD10(a1, a2);
}

{
  sub_23C7E6844(a1, a2);
}

void >= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  sub_23C7DF448(a1, a2);
}

{
  sub_23C7EE0AC(a1, a2);
}

{
  sub_23C8B48E8(a1, a2);
}

void - prefix(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[21];
  _QWORD v5[21];

  v2 = a1[3];
  v1 = a1[4];
  sub_23C7E7E34(a1, v2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v4, v2);
  v3 = sub_23C7DB388();
  *(_QWORD *)(v3 + 16) = 45;
  *(_QWORD *)(v3 + 24) = 0xE100000000000000;
  *(_BYTE *)(v3 + 32) = 0;
  sub_23C7E3190((void *)(v3 + 40), v4);
  v5[0] = v3;
  sub_23C874C9C((uint64_t)v5);
  sub_23C7E322C(v5);
  sub_23C7E6BBC();
}

void Range<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];
  ValueMetadata *v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v9 = sub_23C8B48B8(a1, a2, a3, a4, a5, a6, a7, a8, v19, v21, v22, v23, v24, v25, v26[0], v26[1], v26[2], (uint64_t)v27, (uint64_t)v28);
  sub_23C7EE318((uint64_t)v9);
  v29[3] = &type metadata for SQLExpression;
  v29[4] = &protocol witness table for SQLExpression;
  v29[0] = sub_23C7DB388();
  >= infix(_:_:)(v8, v26);
  v10 = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
  v18 = sub_23C7E11E0(v10, v11, v12, v13, v14, v15, v16, v17, v20, v21, v22, v23, v24, v25);
  sub_23C7EE318((uint64_t)v18);
  v27 = &type metadata for SQLExpression;
  v28 = &protocol witness table for SQLExpression;
  v26[0] = sub_23C7DB388();
  < infix(_:_:)(v8, &v21);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v21);
  sub_23C7DF94C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v29);
  sub_23C7E59B4();
}

{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];
  ValueMetadata *v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v9 = sub_23C8B48B8(a1, a2, a3, a4, a5, a6, a7, a8, v19, v21, v22, v23, v24, v25, v26[0], v26[1], v26[2], (uint64_t)v27, (uint64_t)v28);
  sub_23C7EE318((uint64_t)v9);
  v29[3] = &type metadata for SQLExpression;
  v29[4] = &protocol witness table for SQLExpression;
  v29[0] = sub_23C7DB388();
  >= infix(_:_:)(v8, v26);
  v10 = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
  v18 = sub_23C7E11E0(v10, v11, v12, v13, v14, v15, v16, v17, v20, v21, v22, v23, v24, v25);
  sub_23C7EE318((uint64_t)v18);
  v27 = &type metadata for SQLExpression;
  v28 = &protocol witness table for SQLExpression;
  v26[0] = sub_23C7DB388();
  < infix(_:_:)(v8, &v21);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v21);
  sub_23C7DF94C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v29);
  sub_23C7E59B4();
}

void ClosedRange<>.contains(_:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[21];
  char v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[168];
  _BYTE v32[168];
  _BYTE v33[168];
  _BYTE v34[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E44E0();
  sub_23C7E3190(v31, v32);
  sub_23C7E2604();
  sub_23C7E3190(v10, v33);
  sub_23C7E2604();
  v1 = sub_23C7E3190(v9, v34);
  sub_23C7E218C((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9[0], v9[1], v9[2], v9[3], v9[4], v9[5], v9[6], v9[7], v9[8], v9[9], v9[10],
    v9[11],
    v9[12],
    v9[13],
    v9[14],
    v9[15],
    v9[16],
    v9[17],
    v9[18],
    v9[19],
    v9[20],
    v10[0],
    v11,
    v12,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31[0]);
  sub_23C7E0A94((uint64_t)v34);
  sub_23C7E0A94((uint64_t)v33);
  sub_23C7E0A94((uint64_t)v32);
  sub_23C7DEEA8();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[21];
  char v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[168];
  _BYTE v32[168];
  _BYTE v33[168];
  _BYTE v34[168];

  sub_23C7E7E34(a1, a1[3]);
  sub_23C7E44E0();
  sub_23C7E3190(v31, v32);
  sub_23C7E2604();
  sub_23C7E3190(v10, v33);
  sub_23C7E2604();
  v1 = sub_23C7E3190(v9, v34);
  sub_23C7E218C((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9[0], v9[1], v9[2], v9[3], v9[4], v9[5], v9[6], v9[7], v9[8], v9[9], v9[10],
    v9[11],
    v9[12],
    v9[13],
    v9[14],
    v9[15],
    v9[16],
    v9[17],
    v9[18],
    v9[19],
    v9[20],
    v10[0],
    v11,
    v12,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31[0]);
  sub_23C7E0A94((uint64_t)v34);
  sub_23C7E0A94((uint64_t)v33);
  sub_23C7E0A94((uint64_t)v32);
  sub_23C7DEEA8();
}

void *sub_23C8B4388@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v8[21];

  v4 = *(_QWORD *)(a2 + a1 - 8);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(v8, AssociatedTypeWitness, v4);
  return sub_23C7E3190(a3, v8);
}

void Sequence<>.contains(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, void *a4@<X8>)
{
  uint64_t v5;
  _BYTE v6[168];
  _BYTE __dst[162];
  _QWORD v8[21];
  _BYTE __src[168];
  _BYTE v10[168];

  sub_23C891CA0((uint64_t)sub_23C8B44C0, 0, a1, (uint64_t)&type metadata for SQLExpression, MEMORY[0x24BEE4078], a2, MEMORY[0x24BEE40A8], a3);
  v8[0] = v5;
  sub_23C838E78((uint64_t)v8);
  sub_23C813130(v8, __src);
  memcpy(__dst, __src, sizeof(__dst));
  sub_23C8B490C();
  sub_23C7E5F68();
  sub_23C7E3190(v6, v10);
  sub_23C832DF0(v6, a4);
  sub_23C811F5C((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  sub_23C7E072C();
  sub_23C7DF5B4();
}

void *sub_23C8B44C0@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD __src[21];

  v3 = a1[3];
  v4 = a1[4];
  sub_23C7E7E34(a1, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(__src, v3, v4);
  return memcpy(a2, __src, 0xA3uLL);
}

void SQLSpecificExpressible.like(_:escape:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[21];
  _QWORD v10[3];
  uint64_t v11;
  _BYTE v12[168];
  _QWORD v13[21];
  _QWORD v14[21];

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(a4 + 8) + 8))(v13, a3);
  v5 = a1[3];
  v6 = a1[4];
  sub_23C7E7E34(a1, v5);
  v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v14, v5, v6);
  sub_23C8B48FC((uint64_t)v7, (uint64_t)v10);
  if (v11)
  {
    sub_23C7E7E34(v10, v11);
    sub_23C7E69D4();
    nullsub_1(v9);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
  }
  else
  {
    sub_23C8B469C((uint64_t)v10);
    sub_23C80A96C((uint64_t)v9);
  }
  sub_23C838EA0((uint64_t)v9, (uint64_t)v12);
  v8 = (_QWORD *)sub_23C7DB388();
  v8[2] = 1162561868;
  v8[3] = 0xE400000000000000;
  v8[4] = 0x454B494C20544F4ELL;
  v8[5] = 0xE800000000000000;
  sub_23C7E3190(v8 + 6, v13);
  sub_23C7E3190(v8 + 27, v14);
  sub_23C838EA0((uint64_t)v12, (uint64_t)(v8 + 48));
  v9[0] = v8;
  sub_23C874ADC((uint64_t)v9);
  sub_23C7E322C(v9);
  sub_23C7DB750();
}

uint64_t sub_23C8B467C()
{
  return 24;
}

__n128 sub_23C8B4688(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C8B469C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430CF68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C8B46DC()
{
  __n128 *v0;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  return sub_23C7DF00C();
}

uint64_t sub_23C8B472C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_23C7E8430(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(unsigned __int16 *)(v0 + 200) | (*(unsigned __int8 *)(v0 + 202) << 16), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152), *(__n128 *)(v0 + 168));
  return sub_23C7DF00C();
}

uint64_t sub_23C8B478C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  BOOL v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E8430(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(unsigned __int16 *)(v0 + 208) | (*(unsigned __int8 *)(v0 + 210) << 16), *(__n128 *)(v0 + 112), *(__n128 *)(v0 + 128), *(__n128 *)(v0 + 144), *(__n128 *)(v0 + 160), *(__n128 *)(v0 + 176));
  sub_23C7E8430(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(unsigned __int16 *)(v0 + 376) | (*(unsigned __int8 *)(v0 + 378) << 16), *(__n128 *)(v0 + 280), *(__n128 *)(v0 + 296), *(__n128 *)(v0 + 312), *(__n128 *)(v0 + 328), *(__n128 *)(v0 + 344));
  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(unsigned __int16 *)(v0 + 544) | (*(unsigned __int8 *)(v0 + 546) << 16);
  v4 = v1 >> 1 != 0xFFFFFFFF || v2 > 1;
  if (v4 || (v3 & 0xFE7E00) != 0)
    sub_23C7E6F90(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), v1, *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), v2, *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528),
      *(_QWORD *)(v0 + 536),
      v3);
  return swift_deallocObject();
}

uint64_t *sub_23C8B48B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a18 = *(_QWORD *)(a2 + 16);
  a19 = a3;
  return sub_23C812004(&a15);
}

void sub_23C8B48DC(uint64_t a1, const void *a2, const void *a3)
{
  void *v3;

  sub_23C86F20C(2, a2, a3, v3);
}

void sub_23C8B48E8(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B3AB4(a1, a2);
}

void sub_23C8B48F0(const void *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_23C871278(a1, va, v2);
}

uint64_t sub_23C8B48FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C874DBC(v2, a2);
}

void *sub_23C8B4904(const void *a1)
{
  uint64_t v1;

  return sub_23C800B48(a1, (void *)(v1 - 216));
}

_QWORD *sub_23C8B490C()
{
  _QWORD *v0;

  return sub_23C7E7E34(v0, v0[3]);
}

void sub_23C8B4948()
{
  AnyValueReducer._fetch(_:)();
}

void sub_23C8B4954()
{
  AnyValueReducer._value(_:)();
}

void sub_23C8B4974(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a1;
  if (*a1)
  {
    v8 = a1[1];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
  }
  a6();
  __break(1u);
}

uint64_t sub_23C8B4A6C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for AnyValueReducer<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8B4A98(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Unavailable<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_23C8B4AC4()
{
  ValueReducers.Unavailable._fetch(_:)();
}

void sub_23C8B4AD0()
{
  Configuration.prepareDatabase.getter();
}

void sub_23C8B4ADC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8B4974(a1, a2, a3, a4, (uint64_t)&unk_250D8E960, (void (*)(void))Configuration.prepareDatabase.setter);
}

void sub_23C8B4B00()
{
  Configuration.prepareDatabase.getter();
}

void sub_23C8B4B0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8B4974(a1, a2, a3, a4, (uint64_t)&unk_250D8E938, (void (*)(void))Configuration.trace.setter);
}

uint64_t type metadata accessor for AnyValueReducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyValueReducer);
}

uint64_t type metadata accessor for ValueReducers.Unavailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueReducers.Unavailable);
}

uint64_t sub_23C8B4B48()
{
  swift_release();
  return swift_deallocObject();
}

void static ValueObservation<>.tracking<A>(_:fetch:)()
{
  static ValueObservation<>.tracking<A>(_:fetch:)();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.validate(arguments:)(GRDBInternal::StatementArguments arguments)
{
  DatabasePool.checkpoint(_:)((GRDBInternal::Database::CheckpointMode)arguments.values._rawValue);
}

void FetchRequest<>.observationForFirst()()
{
  FetchRequest<>.observationForAll()();
}

{
  FetchRequest<>.observationForAll()();
}

{
  FetchRequest<>.observationForAll()();
}

{
  FetchRequest<>.observationForAll()();
}

void FetchRequest<>.observationForAll()()
{
  FetchRequest<>.observationForAll()();
}

void static TableRecord<>.observationForFirst()()
{
  static TableRecord<>.observationForAll()();
}

void Configuration.trace.getter()
{
  Configuration.prepareDatabase.getter();
}

void static ValueObservation.tracking(_:reducer:)()
{
  static ValueObservation.tracking(_:reducer:)();
}

void Configuration.trace.setter()
{
  Configuration.prepareDatabase.setter();
}

void DatabaseReader.remove(collation:)()
{
  DatabaseReader.add(function:)();
}

void DatabaseReader.add(collation:)()
{
  DatabaseReader.add(function:)();
}

void DatabaseReader.remove(function:)()
{
  DatabaseReader.add(function:)();
}

void static ValueObservation<>.trackingCount<A>(_:)()
{
  static ValueObservation<>.trackingAll<A>(_:)();
}

void static ValueObservation<>.trackingOne<A>(_:)()
{
  static ValueObservation<>.trackingAll<A>(_:)();
}

{
  static ValueObservation<>.trackingAll<A>(_:)();
}

{
  static ValueObservation<>.trackingAll<A>(_:)();
}

void FetchRequest.observationForCount()()
{
  FetchRequest<>.observationForAll()();
}

void static ValueObservation<>.trackingAll<A>(_:)()
{
  static ValueObservation<>.trackingAll<A>(_:)();
}

void type metadata accessor for _SQLAssociation()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8B4C70(uint64_t a1)
{
  uint64_t result;

  sub_23C812F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_23C812DD0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 104))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 176))
    result = swift_release();
  if (*(_QWORD *)(a1 + 192))
    return swift_release();
  return result;
}

uint64_t sub_23C8B4D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_23C800A8C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  sub_23C800AA4(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v12)
  {
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  v18 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16)
  {
    v19 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v16;
    *(_QWORD *)(a1 + 184) = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  }
  v20 = *(_QWORD *)(a2 + 192);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 200) = v21;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  return a1;
}

uint64_t sub_23C8B4EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_23C800A8C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_23C812F90(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_BYTE *)(a2 + 56);
  sub_23C800AA4(v10, v11, v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  v19 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v14;
  sub_23C812DD0(v15, v16, v17, v18, v19);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v20;
  swift_retain();
  swift_release();
  v21 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v21)
    {
      v22 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v21;
      *(_QWORD *)(a1 + 112) = v22;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7938(a1 + 104, &qword_256BCBDD0);
  }
  else if (v21)
  {
    v23 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v21;
    *(_QWORD *)(a1 + 112) = v23;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_8:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a1 + 176);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v25 = *(_QWORD *)(a2 + 176);
  if (v24)
  {
    if (v25)
    {
      v26 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v25;
      *(_QWORD *)(a1 + 184) = v26;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7938(a1 + 176, &qword_256BCBDD8);
  }
  else if (v25)
  {
    v27 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v25;
    *(_QWORD *)(a1 + 184) = v27;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
LABEL_15:
  v28 = *(_QWORD *)(a2 + 192);
  if (!*(_QWORD *)(a1 + 192))
  {
    if (v28)
    {
      v30 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v28;
      *(_QWORD *)(a1 + 200) = v30;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    goto LABEL_22;
  }
  if (!v28)
  {
    sub_23C7E7938(a1 + 192, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  swift_retain();
  swift_release();
LABEL_22:
  v31 = *(_OWORD *)(a2 + 208);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v31;
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  return a1;
}

void *sub_23C8B5180(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE3uLL);
}

uint64_t sub_23C8B5188(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_23C812F90(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v8;
  sub_23C812DD0(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  v15 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v15;
      *(_QWORD *)(a1 + 112) = v16;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7938(a1 + 104, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_6:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a1 + 176);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  if (v18)
  {
    if (v17)
    {
      v19 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v17;
      *(_QWORD *)(a1 + 184) = v19;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7938(a1 + 176, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
LABEL_11:
  v20 = *(_QWORD *)(a2 + 192);
  if (!*(_QWORD *)(a1 + 192))
  {
LABEL_15:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    goto LABEL_16;
  }
  if (!v20)
  {
    sub_23C7E7938(a1 + 192, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v21 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v20;
  *(_QWORD *)(a1 + 200) = v21;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  return a1;
}

uint64_t sub_23C8B5370(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 227))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 72);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C8B53B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 226) = 0;
    *(_WORD *)(result + 224) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 227) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 227) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLAssociationStep()
{
  sub_23C7DFB90();
}

_QWORD *sub_23C8B543C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[464];
  _BYTE v26[232];
  _BYTE __src[464];
  _BYTE __dst[464];
  _BYTE v29[472];
  uint64_t v30;

  v1 = result[4] >> 1;
  v22 = result[3];
  if (__OFSUB__(v1, v22))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v2 = *result;
  v20 = result[2];
  v3 = *(_QWORD *)(*result + 16);
  if (v1 - v22 >= (uint64_t)v3)
    v4 = *(_QWORD *)(v2 + 16);
  else
    v4 = v1 - v22;
  v30 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)sub_23C7FD990(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v23 = v1;
    v19 = v2;
    v5 = v30;
    if (v4)
    {
      v21 = (char *)(v2 + 32);
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v6 = 0;
      v7 = 0;
      v24 = v22;
      do
      {
        if ((v6 & 1) != 0)
        {
          sub_23C8B6258(__dst);
          sub_23C8B5FE0((uint64_t)__dst, (uint64_t)v29);
          v6 = 1;
        }
        else
        {
          v8 = v3;
          if (v7 == v3)
            goto LABEL_13;
          if (v7 >= v3)
            goto LABEL_43;
          result = memcpy(__dst, &v21[232 * v7], 0xE3uLL);
          v8 = v7 + 1;
          if (v24 == v1)
          {
LABEL_13:
            sub_23C8B6258(__dst);
            sub_23C8B5FE0((uint64_t)__dst, (uint64_t)v29);
            v6 = 1;
          }
          else
          {
            if (v24 < v22 || v24 >= v1)
              goto LABEL_44;
            memcpy(__src, (const void *)(v20 + 232 * v24++), 0xE3uLL);
            memcpy(v29, __dst, 0xE3uLL);
            memcpy(&v29[232], __src, 0xE3uLL);
            nullsub_1(v29);
            sub_23C800974((uint64_t)__dst);
            sub_23C800974((uint64_t)__src);
            v6 = 0;
          }
          v7 = v8;
        }
        sub_23C8B5FE0((uint64_t)v29, (uint64_t)__src);
        sub_23C8B5FE0((uint64_t)__src, (uint64_t)__dst);
        result = (_QWORD *)sub_23C8B6028((uint64_t)__dst);
        if ((_DWORD)result == 1)
          goto LABEL_47;
        sub_23C8B5D2C((uint64_t)v29, (uint64_t)&v29[232], (uint64_t)v26);
        memcpy(v25, v29, 0x1CBuLL);
        sub_23C8B6040((uint64_t)v25);
        v30 = v5;
        v11 = *(_QWORD *)(v5 + 16);
        v10 = *(_QWORD *)(v5 + 24);
        if (v11 >= v10 >> 1)
        {
          sub_23C7FD990(v10 > 1, v11 + 1, 1);
          v5 = v30;
        }
        *(_QWORD *)(v5 + 16) = v11 + 1;
        result = memcpy((void *)(v5 + 232 * v11 + 32), v26, 0xE3uLL);
        --v4;
      }
      while (v4);
    }
    else
    {
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v7 = 0;
      v6 = 0;
      v24 = v22;
    }
    if ((v6 & 1) != 0 || v7 == v3)
    {
LABEL_40:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)v5;
    }
    v12 = (char *)(v19 + 232 * v7 + 32);
    v13 = v24;
    v14 = (char *)(v20 + 232 * v24);
    v15 = v24;
    while (v7 < v3)
    {
      result = memcpy(__src, v12, 0xE3uLL);
      if (v23 == v15)
        goto LABEL_40;
      if (v13 < v22 || v15 >= v23)
        goto LABEL_42;
      memcpy(v26, v14, 0xE3uLL);
      memcpy(__dst, __src, 0xE3uLL);
      memcpy(&__dst[232], v26, 0xE3uLL);
      memcpy(v29, __dst, 0x1CBuLL);
      sub_23C800974((uint64_t)__src);
      sub_23C800974((uint64_t)v26);
      sub_23C8B5D2C((uint64_t)v29, (uint64_t)&v29[232], (uint64_t)v25);
      sub_23C8B6040((uint64_t)__dst);
      v30 = v5;
      v18 = *(_QWORD *)(v5 + 16);
      v17 = *(_QWORD *)(v5 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_23C7FD990(v17 > 1, v18 + 1, 1);
        v5 = v30;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v18 + 1;
      result = memcpy((void *)(v5 + 232 * v18 + 32), v25, 0xE3uLL);
      v12 += 232;
      v14 += 232;
      ++v15;
      v13 = v24;
      if (v3 == v7)
        goto LABEL_40;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_23C8B583C@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  uint64_t *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  _QWORD v108[3];
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  _QWORD v125[6];

  v10 = *v8;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 == 1)
  {
    sub_23C7E8BC4(a1, (const void *)(v10 + 96), a2, a3, a4, a5, a6, a7, v42, v44, v45, v47, v48, v50, v51, v53, v55, v57, v59,
      v61,
      v63,
      v65,
      v66,
      v67,
      v68,
      v70,
      v72,
      v74,
      v76,
      v77,
      v79,
      v81,
      v83,
      v85,
      v87,
      v88,
      v90,
      v91,
      v93,
      v95,
      v97,
      v99,
      v101,
      v103,
      v105,
      v108[0]);
    v62 = v122;
    v64 = v121;
    v60 = v123;
    v54 = v124;
    v12 = v118;
    v56 = v120;
    v58 = v119;
    v52 = v117;
    v13 = v116;
    v46 = v114;
    v49 = v115;
    v14 = v113;
    v16 = v111;
    v15 = v112;
    v43 = v109;
    v17 = v108[0];
    v18 = v108[1];
    v19 = v110;
    v20 = v108[2];
    result = (uint64_t)sub_23C837C80(v108);
    v23 = v43;
    v22 = v46;
    v24 = v49;
    v25 = v54;
    v26 = v52;
    v28 = v56;
    v27 = v58;
    v29 = v60;
    v31 = v62;
    v30 = v64;
LABEL_6:
    *(_QWORD *)a8 = v17;
    *(_QWORD *)(a8 + 8) = v18;
    *(_QWORD *)(a8 + 16) = v20;
    *(_OWORD *)(a8 + 24) = v23;
    *(_QWORD *)(a8 + 40) = v19;
    *(_QWORD *)(a8 + 48) = v16;
    *(_QWORD *)(a8 + 56) = v15;
    *(_BYTE *)(a8 + 64) = v14;
    *(_OWORD *)(a8 + 72) = v22;
    *(_OWORD *)(a8 + 88) = v24;
    *(_BYTE *)(a8 + 104) = v13;
    *(_QWORD *)(a8 + 112) = v26;
    *(_QWORD *)(a8 + 120) = v12;
    *(_QWORD *)(a8 + 128) = v27;
    *(_QWORD *)(a8 + 136) = v28;
    *(_QWORD *)(a8 + 144) = v30;
    *(_QWORD *)(a8 + 152) = v31;
    *(_BYTE *)(a8 + 160) = v29;
    *(_BYTE *)(a8 + 161) = v25;
    return result;
  }
  v125[0] = v10;
  v125[1] = sub_23C8A6E9C(1, v10);
  v125[2] = v32;
  v125[3] = v33;
  v125[4] = v34;
  swift_bridgeObjectRetain();
  v35 = sub_23C8B543C(v125);
  swift_unknownObjectRelease();
  sub_23C7FCD3C((uint64_t)v35);
  result = swift_bridgeObjectRelease();
  if (v11)
  {
    if (v11 <= *(_QWORD *)(v10 + 16))
    {
      sub_23C7E8BC4(result, (const void *)(v10 + 232 * v11 - 136), v36, v37, v38, v39, v40, v41, v42, v44, v45, v47, v48, v50, v51, v53, v55, v57, v59,
        v61,
        v63,
        v65,
        v66,
        v67,
        v68,
        v70,
        v72,
        v74,
        v76,
        v77,
        v79,
        v81,
        v83,
        v85,
        v87,
        v88,
        v90,
        v91,
        v93,
        v95,
        v97,
        v99,
        v101,
        v103,
        v105,
        v108[0]);
      sub_23C837C80(v108);
      sub_23C85CF78();
      sub_23C7FA5C4(v108);
      result = swift_release();
      v30 = v102;
      v31 = v104;
      v29 = v106;
      v25 = v107;
      v27 = v98;
      v28 = v100;
      v26 = v94;
      v12 = v96;
      v13 = v92;
      v24 = v89;
      v22 = v86;
      v16 = v80;
      v15 = v82;
      v14 = v84;
      v19 = v78;
      v23 = v75;
      v17 = v69;
      v18 = v71;
      v20 = v73;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23C8B5A40(char a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a1 & 1) != 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

void sub_23C8B5AE0()
{
  if (qword_25430B2C8 != -1)
    swift_once();
  sub_23C7E84B8();
  sub_23C7E866C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  JUMPOUT(0x23C8B5B20);
}

void sub_23C8B5B48()
{
  swift_bridgeObjectRetain();
  JUMPOUT(0x23C8B5B50);
}

void sub_23C8B5BA0(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  _BYTE v22[232];
  _QWORD __dst[29];
  _BYTE __src[169];

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  if (v10)
  {
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v5 = a1;
    memcpy(__dst, (const void *)(v9 + 232 * v10 - 200), 0xE3uLL);
    v18 = __dst[4];
    v19 = __dst[3];
    v16 = __dst[6];
    v17 = __dst[5];
    v20 = __dst[7];
    v21 = BYTE2(__dst[28]);
    v11 = __dst[0];
    v12 = __dst[1];
    v13 = __dst[2];
    sub_23C800A8C(v8, v7, v6);
    sub_23C800974((uint64_t)__dst);
    sub_23C812F90(v11, v12, v13);
    memcpy(&__src[7], &__dst[8], 0xA2uLL);
    v4 = *(_QWORD *)(v9 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v4)
        goto LABEL_4;
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  sub_23C890984();
  v9 = v15;
  if (!v4)
    goto LABEL_8;
LABEL_4:
  if (v4 <= *(_QWORD *)(v9 + 16))
  {
    v14 = v9 + 232 * v4;
    memcpy(v22, (const void *)(v14 - 200), 0xE3uLL);
    *(_QWORD *)(v14 - 200) = v8;
    *(_QWORD *)(v14 - 192) = v7;
    *(_BYTE *)(v14 - 184) = v6;
    *(_QWORD *)(v14 - 176) = v19;
    *(_QWORD *)(v14 - 168) = v18;
    *(_QWORD *)(v14 - 160) = v17;
    *(_QWORD *)(v14 - 152) = v16;
    *(_BYTE *)(v14 - 144) = v20;
    memcpy((void *)(v14 - 143), __src, 0xA9uLL);
    *(_BYTE *)(v14 + 26) = v21;
    sub_23C812FA8((uint64_t)v22);
    *v5 = v9;
    return;
  }
LABEL_9:
  __break(1u);
}

__n128 sub_23C8B5D2C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  char v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __n128 v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned __int8 v57;
  _QWORD __dst[21];
  unsigned __int8 v59;
  _DWORD v60[3];

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  memcpy(__dst, (const void *)(a1 + 64), 0xA2uLL);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(char *)(a2 + 56);
  sub_23C85BC78(MEMORY[0x24BEE4AF8], (uint64_t)v40);
  v11 = v47;
  v12 = v48;
  sub_23C837C80(v40);
  v13 = sub_23C833B04(v11, v12, (uint64_t (*)(_BYTE *))sub_23C85DDA0, 0);
  v38 = v14;
  v39 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7FA5C4(v40);
  v26 = v40[1];
  v27 = v40[0];
  v24 = v42;
  v25 = v40[2];
  v22 = v44;
  v23 = v43;
  v21 = v45;
  v28 = v41;
  v29 = v46;
  v36 = v51;
  v37 = v50;
  v34 = v53;
  v35 = v52;
  v32 = v55;
  v33 = v54;
  v30 = v49;
  v31 = v56;
  v59 = v57;
  sub_23C800A8C(v5, v6, v7);
  sub_23C910F5C();
  sub_23C812F90(v5, v6, v7);
  if (v10 < 0)
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = v20;
    swift_retain();
    v8 = 0;
    v9 = 0;
    v17 = 0x80;
    v16 = sub_23C8B6284;
  }
  else
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t))__dst[0];
    v15 = __dst[1];
    v17 = (v10 & 1) == 0;
    swift_bridgeObjectRetain();
    sub_23C800ADC(v8);
  }
  *(_QWORD *)a3 = 0x5F62647267;
  *(_QWORD *)(a3 + 8) = 0xE500000000000000;
  *(_BYTE *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 32) = v15;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v9;
  *(_BYTE *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = v27;
  *(_QWORD *)(a3 + 72) = v26;
  *(_QWORD *)(a3 + 80) = v25;
  *(_OWORD *)(a3 + 88) = v28;
  *(_QWORD *)(a3 + 104) = v24;
  *(_QWORD *)(a3 + 112) = v23;
  *(_QWORD *)(a3 + 120) = v22;
  *(_BYTE *)(a3 + 128) = v21;
  *(_BYTE *)(a3 + 135) = 0;
  strcpy((char *)(a3 + 129), "grdb_");
  result = v29;
  *(__n128 *)(a3 + 136) = v29;
  *(_QWORD *)(a3 + 152) = v39;
  *(_QWORD *)(a3 + 160) = v38;
  *(_BYTE *)(a3 + 168) = v30;
  *(_DWORD *)(a3 + 169) = v60[0];
  *(_DWORD *)(a3 + 172) = *(_DWORD *)((char *)v60 + 3);
  *(_QWORD *)(a3 + 176) = v37;
  *(_QWORD *)(a3 + 184) = v36;
  *(_QWORD *)(a3 + 192) = v35;
  *(_QWORD *)(a3 + 200) = v34;
  *(_QWORD *)(a3 + 208) = v33;
  *(_QWORD *)(a3 + 216) = v32;
  *(_BYTE *)(a3 + 224) = v31;
  *(_WORD *)(a3 + 225) = v59;
  return result;
}

uint64_t sub_23C8B5FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCD5C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C8B6028(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_23C8B6040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 240);
  v14 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 264);
  v18 = *(_QWORD *)(a1 + 256);
  v15 = *(_QWORD *)(a1 + 280);
  v16 = *(_QWORD *)(a1 + 272);
  v19 = *(_QWORD *)(a1 + 336);
  v20 = *(_QWORD *)(a1 + 408);
  v21 = *(_QWORD *)(a1 + 424);
  v6 = *(_BYTE *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 248);
  v10 = *(_BYTE *)(a1 + 288);
  sub_23C812F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_23C812DD0(v2, v3, v4, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v11);
  sub_23C7F1754(v12);
  sub_23C812F90(v14, v13, v9);
  sub_23C812DD0(v18, v17, v16, v15, v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v20);
  sub_23C7F1754(v21);
  return a1;
}

void sub_23C8B6258(void *a1)
{
  bzero(a1, 0x1CBuLL);
}

uint64_t sub_23C8B6260()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8B6284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C861B2C(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_23C8B628C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8B62D8 + 4 * byte_23C918DFD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8B630C + 4 * byte_23C918DF8[v4]))();
}

uint64_t sub_23C8B630C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B6314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8B631CLL);
  return result;
}

uint64_t sub_23C8B6328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8B6330);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8B6334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8B633C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SQLAssociationCardinality()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8B6358(uint64_t a1)
{
  return sub_23C812F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_23C8B6368(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C800A8C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_23C8B63B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C800A8C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C812F90(v6, v7, v8);
  return a1;
}

uint64_t sub_23C8B6404(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C812F90(v4, v5, v6);
  return a1;
}

void type metadata accessor for SQLAssociationKey()
{
  sub_23C7DFB90();
}

unint64_t sub_23C8B6458()
{
  unint64_t result;

  result = qword_256BCD5D0[0];
  if (!qword_256BCD5D0[0])
  {
    result = MEMORY[0x242626100](&unk_23C918EF4, &unk_250D85C68);
    atomic_store(result, qword_256BCD5D0);
  }
  return result;
}

uint64_t sub_23C8B6494()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_23C8B654C(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_23C7DB390();
}

uint64_t sub_23C8B6568(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  id v9;
  char v10;

  v5 = (void *)a3;
  v6 = a2;
  v10 = 1;
  if ((a1 & 1) != 0)
  {
    swift_retain();
    sub_23C8E8E7C();
    if (v4)
    {
      return swift_release();
    }
    else
    {
      v7 = swift_retain();
      sub_23C8E6E84(v7, (uint64_t)&v10, v6, (uint64_t)v5);
      v6 = 0;
      v5 = 0;
      sub_23C8E8F18();
      while (1)
      {
        if (v5)
        {
          v9 = v5;
          swift_willThrow();

          swift_release();
          return swift_release();
        }
        result = swift_release();
        if (v6)
          break;
        result = swift_release();
LABEL_5:
        if ((v10 & 1) == 0)
          return result;
        __break(1u);
      }
      __break(1u);
    }
  }
  else
  {
    result = sub_23C8E6E84(v3, (uint64_t)&v10, a2, a3);
    if (!v4)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_23C8B667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7E9C20();
  v12 = swift_allocObject();
  v13 = sub_23C7DEAE4();
  sub_23C8B66F0(v13, v14, v10, v9, v8, v7, a7);
  return v12;
}

uint64_t *sub_23C8B66F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;

  v8 = v7;
  v105 = a7;
  v94 = a6;
  v78 = a4;
  v14 = *v8;
  v101 = sub_23C911430();
  v99 = *(_QWORD *)(v101 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v15);
  sub_23C7E16D4();
  v100 = v16;
  v97 = sub_23C9113F4();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v17);
  sub_23C7E16D4();
  v98 = v18;
  sub_23C7E79A8(&qword_25430D2B0);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v19);
  sub_23C7E16D4();
  v84 = v20;
  v95 = sub_23C8BB7D4();
  v67 = *(_QWORD *)(v95 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v21);
  sub_23C7E16D4();
  v96 = v22;
  v79 = type metadata accessor for Configuration();
  sub_23C7E1AD4();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v85 = (uint64_t)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v81 = (char *)&v66 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v80 = (uint64_t)&v66 - v28;
  v8[4] = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  v8[20] = 0;
  v30 = *(_QWORD *)(v14 + 88);
  v104 = *(_QWORD *)(v14 + 80);
  v29 = v104;
  v8[21] = 1;
  *((_BYTE *)v8 + 176) = 0;
  v8[2] = a2;
  v8[3] = a3;
  v31 = sub_23C8B6D70(a4, v29, v30);
  v77 = a1;
  v8[6] = a1;
  v8[7] = (uint64_t)v31;
  v8[8] = v32;
  v102 = a2;
  swift_retain();
  swift_retain();
  sub_23C7E69E4();
  sub_23C8BB0F0(v33);
  v34 = *a5;
  v35 = a5[1];
  v36 = a5[2];
  v37 = a5[3];
  v39 = a5[4];
  v38 = a5[5];
  v40 = a5[6];
  v41 = a5[7];
  v42 = a5[8];
  v43 = a5[9];
  v103 = v42;
  v83 = v8[9];
  v82 = v8[10];
  v76 = v8[11];
  v75 = v8[12];
  v74 = v8[13];
  v73 = v8[14];
  v72 = v8[15];
  v71 = v8[16];
  v70 = *(_OWORD *)(v8 + 17);
  v69 = v8[19];
  v68 = v8[20];
  v8[9] = v34;
  v8[10] = v35;
  v8[11] = v36;
  v8[12] = v37;
  v8[13] = v39;
  v8[14] = v38;
  v8[15] = v40;
  v8[16] = v41;
  v8[17] = v42;
  v8[18] = v43;
  v44 = v105;
  v8[19] = v94;
  v8[20] = v44;
  swift_retain();
  v87 = v34;
  v86 = v35;
  sub_23C7F5610(v34);
  v88 = v37;
  v89 = v36;
  sub_23C7F5610(v36);
  v90 = v38;
  v91 = v39;
  sub_23C7F5610(v39);
  v92 = v41;
  v93 = v40;
  v45 = v79;
  sub_23C7F5610(v40);
  v94 = v43;
  sub_23C7F5610(v103);
  v65 = v69;
  v64 = v70;
  v46 = sub_23C8BB7C0();
  v47 = v78;
  sub_23C88D7B0(v46, v48, v76, v75, v74, v73, v72, v71, v64, *((uint64_t *)&v64 + 1), v65);
  v49 = *(_QWORD *)(v104 - 8);
  v50 = (uint64_t)v81;
  (*(void (**)(uint64_t, uint64_t))(v49 + 16))((uint64_t)v8 + *(_QWORD *)(*v8 + 152), v47);
  v51 = v80;
  DatabasePool.configuration.getter(v80);
  v52 = *(_QWORD *)(v51 + 8);
  if (*(_QWORD *)(v51 + 16))
  {
    v53 = *(_QWORD *)(v51 + 16);
  }
  else
  {
    v52 = 1111773767;
    v53 = 0xE400000000000000;
  }
  v106 = v52;
  v107 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  v83 = v106;
  v82 = v107;
  sub_23C7EE1CC();
  DatabasePool.configuration.getter(v50);
  if (*(_QWORD *)(v50 + *(int *)(v45 + 68)))
  {
    v54 = v84;
    sub_23C91143C();
    v55 = 0;
    v56 = v54;
  }
  else
  {
    v56 = v84;
    v55 = 1;
  }
  v57 = v95;
  sub_23C7DE70C(v56, v55, 1, v95);
  v58 = v85;
  sub_23C84AB34(v50, v85);
  v59 = sub_23C7DE718(v56, 1, v57);
  v60 = v96;
  if (v59 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v96, v58 + *(int *)(v45 + 64), v57);
    sub_23C7EE1CC();
    v61 = sub_23C84ABB4(v56);
  }
  else
  {
    sub_23C7EE1CC();
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v60, v56, v57);
  }
  sub_23C7E188C(v61, (unint64_t *)&qword_25430DBB0);
  sub_23C84AB78(v50);
  v106 = MEMORY[0x24BEE4AF8];
  sub_23C7E45DC((unint64_t *)&qword_25430DBA8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_23C7E79A8(qword_25430D970);
  sub_23C88DDCC((unint64_t *)&qword_25430DBA0, qword_25430D970);
  sub_23C911574();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v100, *MEMORY[0x24BEE5750], v101);
  sub_23C8BB7C0();
  v62 = sub_23C911478();
  swift_release();
  sub_23C7EDEBC(v87);
  sub_23C7F1754(v89);
  sub_23C7F1754(v91);
  sub_23C7F1754(v93);
  sub_23C7F1754(v103);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v104);
  v8[5] = v62;
  return v8;
}

void (*sub_23C8B6D70(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return sub_23C8BB3A8;
}

uint64_t *sub_23C8B6E2C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C7E58A8();
  sub_23C83BC68(v0[3]);

  sub_23C8BB0F0(v0[6]);
  sub_23C88D7B0(v0[9], v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19]);
  sub_23C88CFA0(v0[21]);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 152));
  return v0;
}

uint64_t sub_23C8B6EC4()
{
  sub_23C8B6E2C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ValueConcurrentObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueConcurrentObserver);
}

uint64_t type metadata accessor for ValueConcurrentObserver.ObservationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueConcurrentObserver.ObservationState);
}

uint64_t type metadata accessor for ValueConcurrentObserver.NotificationCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueConcurrentObserver.NotificationCallbacks);
}

uint64_t sub_23C8B6F10()
{
  swift_release();
  return swift_release();
}

void sub_23C8B6F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v2;
  swift_retain();
  sub_23C7DC47C();
  sub_23C7DB390();
}

_QWORD *sub_23C8B6F70(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C8B6FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ValueConcurrentObserver.DatabaseAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueConcurrentObserver.DatabaseAccess);
}

void sub_23C8B701C(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD);
  _QWORD v80[10];
  void (*v81)(char *);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v2 = v1;
  v4 = *v1;
  v5 = *(void **)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v63 = (char *)&v59 - v8;
  sub_23C7E188C(v7, &qword_256BCD008);
  sub_23C7E69E4();
  type metadata accessor for ValueConcurrentObserver.NotificationCallbacks(v9, v10, v11, v12);
  sub_23C7E3374();
  sub_23C7E69E4();
  type metadata accessor for ValueConcurrentObserver.DatabaseAccess(v13, v14, v15, v16);
  sub_23C7E3374();
  sub_23C7E8E90();
  sub_23C7DEABC((uint64_t)sub_23C889878, 0, (void (*)(id))sub_23C8BB3E0);
  v75 = v81;
  if (v81)
  {
    v62 = v5;
    v61 = AssociatedTypeWitness;
    v64 = v4;
    v69 = a1;
    v18 = v80[0];
    v17 = v80[1];
    v71 = v80[2];
    v77 = v80[3];
    v78 = v80[4];
    v72 = v80[5];
    v79 = (void (*)(_QWORD))v80[6];
    v70 = v80[7];
    v74 = v80[8];
    v73 = v80[9];
    v19 = v83;
    v76 = v82;
    if (v83)
    {
      v20 = v84;
      v21 = (_QWORD *)v1[2];
      v23 = v21[5];
      v22 = v21[6];
      sub_23C7E7E34(v21 + 2, v23);
      v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 16);
      v68 = v18;
      v67 = v17;
      sub_23C88DEB4(v18, v17, v71, v77, v78, v72, (uint64_t)v79, v70, v74, v73, (uint64_t)v75);
      sub_23C7E69E4();
      sub_23C8BB11C(v25);
      v26 = v24(v23, v22);
      v66 = v20;
      v65 = v19;
      if ((v26 & 1) != 0)
      {
        v27 = v63;
        v28 = sub_23C7EE584();
        v29 = v62;
        sub_23C8B75F0(v28, v30, v31, v32);
        v33 = v69;
        if (v29)
        {
          v34 = v79;
          if (v79)
            v79(v29);
          v35 = type metadata accessor for AnyDatabaseCancellable();
          sub_23C7E18F4();
          v36 = v34;
          v37 = AnyDatabaseCancellable.init(cancel:)((uint64_t)nullsub_1, 0);
          v33[3] = v35;
          v33[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;

          goto LABEL_11;
        }
        v75(v27);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v27, v61);
      }
      else
      {
        v38 = sub_23C7EE584();
        sub_23C8B7878(v38, v39, v40);
        v33 = v69;
      }
      v41 = type metadata accessor for AnyDatabaseCancellable();
      v80[0] = v2;
      swift_retain();
      v37 = sub_23C88FE74((uint64_t)v80, v41, v64, (uint64_t)&off_250D85758);
      v33[3] = v41;
      v33[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;
      v36 = v79;
LABEL_11:
      v42 = v78;
      v43 = v74;
      *v33 = v37;
      swift_release();
      v44 = v65;
      swift_release();
      v45 = v68;
      v46 = v67;
      sub_23C7F1754(v68);
      v47 = v71;
      sub_23C7F1754(v71);
      v48 = v42;
      v49 = v72;
      sub_23C7F1754(v48);
      v50 = (uint64_t)v36;
      v51 = v70;
      sub_23C7F1754(v50);
      v52 = v73;
      sub_23C7E5F14(v43);
      swift_release();
      sub_23C8BB0F0(v44);
      sub_23C88D7B0(v45, v46, v47, v77, v78, v49, (uint64_t)v79, v51, v43, v52, (uint64_t)v75);
      sub_23C7DBCB0();
      return;
    }
    v53 = sub_23C7DEAE4();
    sub_23C7F5610(v53);
    v54 = v71;
    sub_23C7ED18C(v71);
    v55 = v78;
    sub_23C7F5610(v78);
    v56 = v79;
    sub_23C7F5610((uint64_t)v79);
    v57 = v74;
    sub_23C7F5610(v74);
    swift_retain();
    v58 = sub_23C7DEAE4();
    sub_23C7F1754(v58);
    sub_23C7F1754(v54);
    sub_23C7DC5B0(v55);
    sub_23C7DBD64((uint64_t)v56);
    sub_23C7EDEBC(v57);
    swift_release();
  }
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C8B7560@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v8 = a1[16];
  v9 = a1[17];
  v10 = a1[18];
  v11 = a1[19];
  v12 = a1[20];
  v14 = a1[8];
  v13 = a1[9];
  *a2 = v13;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  a2[6] = v7;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = v10;
  a2[10] = v11;
  a2[11] = v12;
  v15 = a1[6];
  v16 = a1[7];
  a2[12] = v15;
  a2[13] = v16;
  a2[14] = v14;
  sub_23C88DEB4(v13, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  return sub_23C8BB11C(v15);
}

_QWORD *sub_23C8B75F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v33 = a2;
  v30 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 88) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DDB10(qword_256BCD7D8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v26 - v14;
  v32 = a1;
  v16 = v35;
  result = DatabasePool.makeSnapshot()();
  if (!v16)
  {
    v27 = v15;
    v28 = v7;
    v35 = v13;
    v29 = v6;
    MEMORY[0x24BDAC7A8](result);
    v19 = v31;
    v18 = v32;
    *(&v26 - 4) = v31;
    *(&v26 - 3) = v18;
    v20 = v34;
    *(&v26 - 2) = v33;
    *(&v26 - 1) = v20;
    v22 = v21;
    DatabaseSnapshot.read<A>(_:)();
    v26 = *(_QWORD *)&v12[*(int *)(TupleTypeMetadata3 + 48)];
    v23 = *(_QWORD *)&v12[*(int *)(TupleTypeMetadata3 + 64)];
    v24 = (uint64_t)v27;
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 32))(v27, v12, AssociatedTypeWitness);
    MEMORY[0x24BDAC7A8](v25);
    *(&v26 - 2) = v19;
    *(&v26 - 1) = v24;
    swift_getAssociatedTypeWitness();
    sub_23C911460();
    v36 = v26;
    sub_23C8B7FFC(v32, v33, v34, v22, v23, &v36);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v24, AssociatedTypeWitness);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C8B7878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  _QWORD *v9;

  v4 = v3;
  v8 = DatabasePool.makeSnapshot()();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  DatabaseSnapshot.asyncRead(_:)((uint64_t)sub_23C8BB5C4, (uint64_t)v9);
  swift_release();
  return swift_release();
}

uint64_t sub_23C8B7954(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7;

  v4 = *v2;
  v5 = v2[21];
  v2[21] = *a2;
  swift_bridgeObjectRetain();
  sub_23C88CFA0(v5);
  v7 = 0;
  return sub_23C80848C((uint64_t)v2, &v7, a1, v4, (uint64_t)&off_250D85728);
}

uint64_t sub_23C8B79BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata3;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v49 = a3;
  v47 = a6;
  v11 = *(_QWORD *)(*a2 + 80);
  v12 = *(_QWORD *)(*a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = a2[3];
  if (v18 >= 2)
  {
    v49 = AssociatedTypeWitness;
    v20 = (char *)&v45 - v17;
    result = a4(a1);
    if (v6)
      return result;
    v46 = v20;
    sub_23C7E3084();
    swift_bridgeObjectRetain();
    v21 = sub_23C910DAC();
    v22 = *(_QWORD *)(v18 + 16);
    if (v22)
    {
      v23 = (_QWORD *)(v18 + 32);
      swift_bridgeObjectRetain();
      do
      {
        v24 = v23[3];
        v25 = v23[4];
        sub_23C7E7E34(v23, v24);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v25 + 8))(&v53, a1, v24, v25);
        v50 = v53;
        v51 = v21;
        DatabaseRegion.union(_:)(&v50, &v52);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = v52;
        v23 += 5;
        --v22;
      }
      while (v22);
      sub_23C83BC68(v18);
    }
    v27 = v48;
    v26 = v49;
    sub_23C83BC68(v18);
    if (v21)
    {
      v28 = swift_bridgeObjectRetain();
      v29 = sub_23C88CFFC(v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = 0;
    }
    v52 = v29;
    sub_23C8679E0(&v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = v53;
    sub_23C7DDB10(qword_256BCD7D8);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v42 = *(int *)(TupleTypeMetadata3 + 48);
    v36 = *(int *)(TupleTypeMetadata3 + 64);
    v43 = v46;
    v37 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v47, v46, v26);
    *(_QWORD *)(v37 + v42) = v40;
    type metadata accessor for WALSnapshot();
    swift_allocObject();
    v44 = swift_retain();
    v39 = sub_23C87E3A8(v44);
    result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v43, v26);
  }
  else
  {
    sub_23C7E3084();
    v53 = sub_23C910DAC();
    MEMORY[0x24BDAC7A8](v53);
    *(&v45 - 6) = v11;
    *(&v45 - 5) = v12;
    *(&v45 - 4) = v49;
    *(&v45 - 3) = (uint64_t)a4;
    *(&v45 - 2) = a5;
    *(&v45 - 1) = a1;
    sub_23C8E88AC(&v53);
    if (v6)
      return swift_bridgeObjectRelease();
    if (v53)
    {
      v30 = swift_bridgeObjectRetain();
      v31 = sub_23C88CFFC(v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      v31 = 0;
    }
    v32 = v48;
    v51 = v31;
    sub_23C8679E0(&v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = v52;
    sub_23C7DDB10(qword_256BCD7D8);
    v34 = swift_getTupleTypeMetadata3();
    v35 = *(int *)(v34 + 48);
    v36 = *(int *)(v34 + 64);
    v37 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v47, v16, AssociatedTypeWitness);
    *(_QWORD *)(v37 + v35) = v33;
    type metadata accessor for WALSnapshot();
    swift_allocObject();
    v38 = swift_retain();
    v39 = sub_23C87E3A8(v38);
    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, AssociatedTypeWitness);
  }
  *(_QWORD *)(v37 + v36) = v39;
  return result;
}

uint64_t sub_23C8B7E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v12 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a2, v4, v5);
  swift_endAccess();
  if (sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t sub_23C8B7FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *a6;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v6;
  v13[3] = v12;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a1;
  v13[7] = a2;
  v13[8] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C8D1B1C((uint64_t)sub_23C8BB468, (uint64_t)v13);
  return swift_release();
}

void sub_23C8B80C0(void *a1, char a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t aBlock[6];
  uint64_t v76;
  uint64_t v77[3];

  v72 = a6;
  v73 = a5;
  v69 = a4;
  v11 = *a3;
  v12 = sub_23C910D34();
  v65 = *(_QWORD *)(v12 - 8);
  v66 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_23C910D58();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v61 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v11 + 80);
  v68 = *(_QWORD *)(v11 + 88);
  v67 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(_QWORD *)(v71 + 64);
  v18 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v60 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v55 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v55 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v70 = (char *)&v55 - v25;
  if ((sub_23C8885FC() & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      aBlock[0] = (uint64_t)a1;
      v29 = a1;
      sub_23C7E79A8(&qword_25430CCC8);
      swift_willThrowTypedImpl();
      sub_23C8B8B8C(a1);

    }
    else
    {
      if ((unint64_t)a3[3] >= 2)
      {
        v58 = a3[3];
        v30 = swift_retain();
        v28 = v72;
        v73(v30);
        v59 = a7;
        v57 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        v57(v70, v24, AssociatedTypeWitness);
        sub_23C7E3084();
        v34 = v58;
        swift_bridgeObjectRetain();
        v35 = v34;
        v36 = sub_23C910DAC();
        v37 = *(_QWORD *)(v35 + 16);
        if (v37)
        {
          v56 = AssociatedTypeWitness;
          v38 = (_QWORD *)(v35 + 32);
          swift_bridgeObjectRetain();
          do
          {
            v39 = v38[3];
            v40 = v38[4];
            sub_23C7E7E34(v38, v39);
            (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v40 + 8))(aBlock, a1, v39, v40);
            v76 = v36;
            v74 = aBlock[0];
            DatabaseRegion.union(_:)(&v74, v77);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v36 = v77[0];
            v38 += 5;
            --v37;
          }
          while (v37);
          v35 = v58;
          sub_23C83BC68(v58);
          AssociatedTypeWitness = v56;
          v28 = v72;
        }
        sub_23C83BC68(v35);
        if (v36)
        {
          v41 = swift_bridgeObjectRetain();
          v42 = sub_23C88CFFC(v41);
          swift_bridgeObjectRelease();
        }
        else
        {
          v42 = 0;
        }
        v77[0] = v42;
        sub_23C8679E0(aBlock);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = aBlock[0];
      }
      else
      {
        v59 = a7;
        sub_23C7E3084();
        swift_retain();
        aBlock[0] = sub_23C910DAC();
        MEMORY[0x24BDAC7A8](aBlock[0]);
        v26 = v68;
        *(&v55 - 6) = v67;
        *(&v55 - 5) = v26;
        v28 = v72;
        v27 = v73;
        *(&v55 - 4) = v69;
        *(&v55 - 3) = (uint64_t)v27;
        *(&v55 - 2) = v28;
        *(&v55 - 1) = (uint64_t)a1;
        sub_23C8E88AC(aBlock);
        v31 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        v31(v70, v21, AssociatedTypeWitness);
        if (aBlock[0])
        {
          v32 = swift_bridgeObjectRetain();
          v33 = sub_23C88CFFC(v32);
          swift_bridgeObjectRelease();
        }
        else
        {
          v33 = 0;
        }
        v76 = v33;
        sub_23C8679E0(v77);
        v57 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = v77[0];
      }
      v58 = v43;
      v44 = v60;
      v45 = MEMORY[0x24BEE4AF8];
      v72 = a3[5];
      v46 = v71;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v60, v70, AssociatedTypeWitness);
      v47 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v48 = (char *)swift_allocObject();
      v49 = v68;
      *((_QWORD *)v48 + 2) = v67;
      *((_QWORD *)v48 + 3) = v49;
      *((_QWORD *)v48 + 4) = a3;
      v57(&v48[v47], v44, AssociatedTypeWitness);
      aBlock[4] = (uint64_t)sub_23C8BB628;
      aBlock[5] = (uint64_t)v48;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_23C88B2C0;
      aBlock[3] = (uint64_t)&unk_250D8A3C8;
      v50 = _Block_copy(aBlock);
      swift_retain();
      v51 = v61;
      sub_23C910D40();
      v77[0] = v45;
      sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      sub_23C7E79A8(&qword_25430D600);
      sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
      v52 = v64;
      v53 = v66;
      sub_23C911574();
      MEMORY[0x242625098](0, v51, v52, v50);
      _Block_release(v50);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v52, v53);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v63);
      swift_release();
      type metadata accessor for WALSnapshot();
      swift_allocObject();
      sub_23C8BB674(a1, 0);
      v54 = sub_23C87E3A8((uint64_t)a1);
      aBlock[0] = v58;
      sub_23C8B7FFC(v69, (uint64_t)v73, v28, v59, v54, aBlock);
      swift_release();
      sub_23C8BB610(a1, 0);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v70, AssociatedTypeWitness);
    }
  }
}

uint64_t sub_23C8B885C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(id (*)(), char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v4 = *(_QWORD *)(*a1 + 80);
  v3 = *(_QWORD *)(*a1 + 88);
  v29 = a2;
  v30 = v3;
  v5 = *(_QWORD *)(v3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v31 = (char *)&v26 - v15;
  result = sub_23C8885FC();
  if ((result & 1) != 0)
  {
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v29, v4, v5);
    swift_endAccess();
    if (sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      result = sub_23C9117B4();
      __break(1u);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v18 = v31;
      v17(v31, v10, AssociatedTypeWitness);
      v19 = (_QWORD *)a1[2];
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, AssociatedTypeWitness);
      v20 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v21 = (char *)swift_allocObject();
      v22 = v30;
      *((_QWORD *)v21 + 2) = v4;
      *((_QWORD *)v21 + 3) = v22;
      *((_QWORD *)v21 + 4) = a1;
      v17(&v21[v20], v14, AssociatedTypeWitness);
      v23 = v19[5];
      v24 = v19[6];
      sub_23C7E7E34(v19 + 2, v23);
      v25 = *(void (**)(id (*)(), char *, uint64_t, uint64_t))(v24 + 8);
      swift_retain();
      v25(sub_23C8BB70C, v21, v23, v24);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v31, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t *sub_23C8B8AFC@<X0>(uint64_t *result@<X0>, void (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  void (*v7)();

  v3 = result[19];
  if (v3)
  {
    v4 = *result;
    v5 = result[20];
    v6 = (void (*)())swift_allocObject();
    *((_QWORD *)v6 + 2) = *(_QWORD *)(v4 + 80);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(v4 + 88);
    *((_QWORD *)v6 + 4) = v3;
    *((_QWORD *)v6 + 5) = v5;
    result = (uint64_t *)swift_retain();
    v7 = sub_23C8BB7BC;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return result;
}

uint64_t sub_23C8B8B8C(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *(*)(), uint64_t, uint64_t, uint64_t);
  id v9;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = sub_23C7E18F4();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = v3 + 2;
  v6 = v3[5];
  v7 = v3[6];
  sub_23C7E7E34(v5, v6);
  v8 = *(void (**)(uint64_t *(*)(), uint64_t, uint64_t, uint64_t))(v7 + 8);
  sub_23C7DC47C();
  v9 = a1;
  v8(sub_23C8BB2EC, v4, v6, v7);
  return swift_release();
}

uint64_t sub_23C8B8C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t result;
  void *v17;
  _QWORD v18[12];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[10];
  _QWORD v32[10];
  _BYTE __dst[88];

  v20 = a8;
  sub_23C888664();
  v21 = v31[0];
  v22 = v31[1];
  v23 = v31[2];
  v24 = v31[3];
  v25 = v31[4];
  v26 = v31[5];
  v27 = v31[6];
  v28 = v31[7];
  v15 = v31[9];
  v29 = v31[8];
  result = sub_23C88D700((uint64_t)v31, (uint64_t)v32);
  if (v32[0] != 1)
  {
    v19[2] = v15;
    v17 = memcpy(__dst, v32, 0x50uLL);
    v19[1] = v19;
    v30 = a3;
    MEMORY[0x24BDAC7A8](v17);
    v18[2] = a4;
    v18[3] = a5;
    v18[4] = a1;
    v18[5] = __dst;
    v18[6] = a2;
    v18[7] = a6;
    v18[8] = a7;
    v18[9] = v20;
    v18[10] = a3;
    v18[11] = &v30;
    sub_23C8BB4C8(v31, (void (*)(void))sub_23C88E0FC, (void (*)(uint64_t, uint64_t))sub_23C7F5610, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
    swift_bridgeObjectRetain();
    sub_23C8B6568(1, (uint64_t)sub_23C8BB494, (uint64_t)v18);
    sub_23C8BB4C8(v31, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    sub_23C7F1754(v21);
    sub_23C7F1754(v23);
    sub_23C7F1754(v25);
    sub_23C7F1754(v27);
    sub_23C7F1754(v29);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23C8B8E68()
{
  return 0xD00000000000004DLL;
}

_QWORD *sub_23C8B8E84@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result[19])
  {
    v4 = result[9];
    v3 = result[10];
    v5 = result[11];
    v6 = result[12];
    v7 = result[13];
    v8 = result[14];
    v9 = result[15];
    v10 = result[16];
    v11 = result[17];
    v12 = result[18];
    *a2 = v4;
    a2[1] = v3;
    a2[2] = v5;
    a2[3] = v6;
    a2[4] = v7;
    sub_23C7F5610(v4);
    sub_23C7F5610(v5);
    sub_23C7F5610(v7);
    sub_23C7F5610(v9);
    result = (_QWORD *)sub_23C7F5610(v11);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    *a2 = 1;
    *(_OWORD *)(a2 + 1) = 0u;
    *(_OWORD *)(a2 + 3) = 0u;
  }
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  a2[8] = v11;
  a2[9] = v12;
  return result;
}

uint64_t sub_23C8B8F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(uint64_t *);
  uint64_t v32;
  uint64_t result;
  void (*v34)(uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  char *v40;
  uint64_t v41;
  void (*v42)(uint64_t *);
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t *);
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t AssociatedTypeWitness;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  _QWORD *v77;
  uint64_t aBlock[8];
  uint64_t v79;

  v74 = a8;
  v75 = a7;
  v68 = a6;
  v69 = a9;
  v77 = a5;
  v14 = *a5;
  v15 = sub_23C910D34();
  v66 = *(_QWORD *)(v15 - 8);
  v67 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v65 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_23C910D58();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v62 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v14 + 80);
  v71 = *(_QWORD *)(v14 + 88);
  v76 = v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(_QWORD *)(v70 + 64);
  v20 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v61 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v60 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v60 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v73 = (char *)&v60 - v28;
  if (a2)
  {
    type metadata accessor for WALSnapshot();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v29 = sub_23C87E3A8(a3);
    if (v29)
    {
      v30 = sqlite3_snapshot_cmp(*(sqlite3_snapshot **)(a2 + 16), *(sqlite3_snapshot **)(v29 + 16));
      swift_release();
      v27 = swift_release();
      if ((v30 & 0x80000000) == 0)
      {
        v31 = *(void (**)(uint64_t *))(a4 + 16);
        v32 = v69;
        if (v31)
        {
          aBlock[0] = v69;
          v31(aBlock);
        }
        aBlock[0] = v32;
        return sub_23C8B7954(a3, aBlock);
      }
    }
    else
    {
      v27 = swift_release();
    }
  }
  v34 = *(void (**)(uint64_t))(a4 + 32);
  if (v34)
    v34(v27);
  v35 = v76;
  v36 = v77;
  if (v77[3] >= 2uLL)
  {
    result = v75(a3);
    if (v10)
      return result;
    v40 = v26;
    v41 = AssociatedTypeWitness;
    v75 = *(uint64_t (**)(uint64_t))(v70 + 32);
    ((void (*)(char *, char *, uint64_t))v75)(v73, v40, AssociatedTypeWitness);
    v42 = *(void (**)(uint64_t *))(a4 + 16);
    v43 = v69;
    if (v42)
    {
      aBlock[0] = v69;
      v42(aBlock);
    }
    aBlock[0] = v43;
    sub_23C8B7954(a3, aBlock);
  }
  else
  {
    sub_23C7E3084();
    aBlock[0] = sub_23C910DAC();
    MEMORY[0x24BDAC7A8](aBlock[0]);
    v37 = v71;
    v38 = AssociatedTypeWitness;
    *(&v60 - 6) = v35;
    *(&v60 - 5) = v37;
    v39 = v75;
    *(&v60 - 4) = v68;
    *(&v60 - 3) = (uint64_t)v39;
    *(&v60 - 2) = v74;
    *(&v60 - 1) = a3;
    sub_23C8E88AC(aBlock);
    if (v10)
      return swift_bridgeObjectRelease();
    v44 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    v44(v73, v23, v38);
    if (aBlock[0])
    {
      v45 = swift_bridgeObjectRetain();
      v46 = sub_23C88CFFC(v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = 0;
    }
    aBlock[6] = v46;
    sub_23C8679E0(&v79);
    v75 = (uint64_t (*)(uint64_t))v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a10 = v79;
    swift_bridgeObjectRelease();
    v47 = *(void (**)(uint64_t *))(a4 + 16);
    if (v47)
    {
      v79 = *a10;
      swift_bridgeObjectRetain();
      v47(&v79);
      swift_bridgeObjectRelease();
    }
    v79 = *a10;
    swift_bridgeObjectRetain();
    v48 = v77;
    sub_23C8B7954(a3, &v79);
    v36 = v48;
    swift_bridgeObjectRelease();
    v41 = AssociatedTypeWitness;
  }
  v77 = (_QWORD *)v36[5];
  v49 = v36;
  v50 = v70;
  v51 = v71;
  v52 = v61;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v61, v73, v41);
  v53 = v41;
  v54 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  v55 = (_QWORD *)swift_allocObject();
  v55[2] = v76;
  v55[3] = v51;
  v55[4] = v49;
  ((void (*)(char *, char *, uint64_t))v75)((char *)v55 + v54, v52, v53);
  aBlock[4] = (uint64_t)sub_23C8BB530;
  aBlock[5] = (uint64_t)v55;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_23C88B2C0;
  aBlock[3] = (uint64_t)&unk_250D8A378;
  v56 = _Block_copy(aBlock);
  swift_retain();
  v57 = v62;
  sub_23C910D40();
  v79 = MEMORY[0x24BEE4AF8];
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  v58 = v65;
  v59 = v67;
  sub_23C911574();
  MEMORY[0x242625098](0, v57, v58, v56);
  _Block_release(v56);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v58, v59);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v57, v64);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v73, v53);
  return swift_release();
}

uint64_t sub_23C8B958C(_QWORD *a1, void (*a2)(char *, char *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(id (*)(), char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(*a1 + 80);
  v28 = *(_QWORD *)(*a1 + 88);
  v29 = a2;
  v4 = *(_QWORD *)(v28 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v31 + 64);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v27 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v27 - v8;
  v9 = sub_23C9114E4();
  v32 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v27 - v13;
  result = sub_23C8885FC();
  if ((result & 1) != 0)
  {
    swift_beginAccess();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(v29, v3, v4);
    swift_endAccess();
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v12, v14, v9);
    if (sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness) == 1)
    {
      v16 = *(void (**)(char *, uint64_t))(v32 + 8);
      v16(v14, v9);
      return ((uint64_t (*)(char *, uint64_t))v16)(v12, v9);
    }
    else
    {
      v18 = v30;
      v17 = v31;
      v29 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v29(v30, v12, AssociatedTypeWitness);
      v19 = (_QWORD *)a1[2];
      v20 = v27;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v27, v18, AssociatedTypeWitness);
      v21 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v22 = (char *)swift_allocObject();
      v23 = v28;
      *((_QWORD *)v22 + 2) = v3;
      *((_QWORD *)v22 + 3) = v23;
      *((_QWORD *)v22 + 4) = a1;
      v29(&v22[v21], v20, AssociatedTypeWitness);
      v24 = v19[5];
      v25 = v19[6];
      sub_23C7E7E34(v19 + 2, v24);
      v26 = *(void (**)(id (*)(), char *, uint64_t, uint64_t))(v25 + 8);
      swift_retain();
      v26(sub_23C8BB548, v22, v24, v25);
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v9);
    }
  }
  return result;
}

id sub_23C8B9850(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  id result;
  void (*v8)(uint64_t);

  sub_23C7E188C(a1, &qword_256BCD008);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  sub_23C9114E4();
  result = sub_23C7DEABC(a3, 0, a4);
  if (v8)
  {
    sub_23C7DC47C();
    v8(a2);
    sub_23C7F1754((uint64_t)v8);
    return (id)sub_23C7DC5B0((uint64_t)v8);
  }
  return result;
}

uint64_t *sub_23C8B994C@<X0>(uint64_t *result@<X0>, void (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  void (*v7)();

  v3 = result[19];
  if (v3)
  {
    v4 = *result;
    v5 = result[20];
    v6 = (void (*)())swift_allocObject();
    *((_QWORD *)v6 + 2) = *(_QWORD *)(v4 + 80);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(v4 + 88);
    *((_QWORD *)v6 + 4) = v3;
    *((_QWORD *)v6 + 5) = v5;
    result = (uint64_t *)swift_retain();
    v7 = sub_23C8BB7BC;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return result;
}

BOOL sub_23C8B99DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v5 = *(_QWORD *)(v4 + 168);
  if (v5 == 1)
  {
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = DatabaseRegion.isModified(byEventsOfKind:)(a1, a2, a3, a4);
    sub_23C88CFA0(v5);
  }
  return v6;
}

void sub_23C8B9A64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 168);
  if (!v3)
    goto LABEL_9;
  if (v3 == 1)
    return;
  v5 = a1[3];
  v6 = a1[4];
  sub_23C7E7E34(a1, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v8 = v7(v5, v6);
  v10 = v9;
  v11 = sub_23C910E18();
  sub_23C866094(v11, v12, v8, v10, v3);
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 == 1)
    goto LABEL_9;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_23C88CFA0(v3);
LABEL_10:
    *(_BYTE *)(v2 + 176) = 1;
    TransactionObserver.stopObservingDatabaseChangesUntilNextTransaction()();
    return;
  }
  sub_23C868540(a1[6], v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C88CFA0(v3);
  if ((v18 & 1) != 0)
    goto LABEL_10;
}

void sub_23C8B9B90(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t *);
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t (*v58)();
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t (*v67)();
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  void (*v74)(uint64_t *);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90[2];
  uint64_t aBlock;
  uint64_t v92;
  uint64_t (*v93)(uint64_t);
  void *v94;
  uint64_t (*v95)();
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = v1;
  v86 = a1;
  v3 = *v1;
  v4 = sub_23C910D34();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7E16D4();
  v88 = v6;
  v7 = sub_23C8BB7D4();
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7E16D4();
  v87 = v9;
  v11 = *(_QWORD *)(v3 + 80);
  v10 = *(_QWORD *)(v3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v13 = sub_23C911C04();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v64 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v64 - v19;
  if (*((_BYTE *)v2 + 176) == 1)
  {
    v78 = v18;
    v80 = v5;
    v83 = v4;
    *((_BYTE *)v2 + 176) = 0;
    v21 = sub_23C7E188C(v17, &qword_256BCD008);
    sub_23C7DDB10(&qword_256BCD010);
    type metadata accessor for ValueConcurrentObserver.DatabaseAccess(255, v11, v10, v22);
    sub_23C7E3374();
    sub_23C7E8E90();
    sub_23C7DEABC((uint64_t)sub_23C88C180, 0, (void (*)(id))sub_23C8BB0D8);
    if (aBlock == 1)
    {
      sub_23C8BB0F0(v101);
      goto LABEL_18;
    }
    v77 = v16;
    v66 = v13;
    v79 = v103;
    v26 = v95;
    v27 = v97;
    v28 = v98;
    if (!v101)
    {
      v30 = v99;
      v31 = v93;
      sub_23C7F1754(aBlock);
      sub_23C7E58EC((uint64_t)v31);
      sub_23C7DC5B0((uint64_t)v26);
      sub_23C7F1754(v27);
      sub_23C7DBD64(v30);
      goto LABEL_18;
    }
    v65 = (void *)v21;
    v81 = v102;
    v82 = v101;
    v70 = v98;
    v69 = v99;
    v73 = v100;
    v68 = v96;
    v67 = v95;
    v71 = (uint64_t)v94;
    v72 = v93;
    v76 = aBlock;
    v75 = v92;
    if (v95)
    {
      sub_23C7DFD18(aBlock, v92, (uint64_t)v93, (uint64_t)v94, (uint64_t)v95, v23, v24, v25, v99, v100, (void (*)(void))sub_23C88E0FC, (void (*)(uint64_t, uint64_t))sub_23C7F5610, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
      v29 = sub_23C7E93C0();
      ((void (*)(uint64_t))v26)(v29);
    }
    else
    {
      sub_23C7DFD18(aBlock, v92, (uint64_t)v93, (uint64_t)v94, 0, v23, v24, v25, v99, v100, (void (*)(void))sub_23C88E0FC, (void (*)(uint64_t, uint64_t))sub_23C7F5610, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
      sub_23C7E93C0();
    }
    v74 = (void (*)(uint64_t *))v27;
    v32 = (uint64_t)v77;
    if (v2[3] != 1)
    {
      v35 = (_QWORD *)swift_allocObject();
      v35[2] = v11;
      v35[3] = v10;
      v36 = v81;
      v35[4] = v82;
      v35[5] = v36;
      v35[6] = v28;
      sub_23C7DC47C();
      swift_retain();
      DatabasePool.concurrentRead<A>(_:)((uint64_t)sub_23C8BB254, (uint64_t)v35, AssociatedTypeWitness);
      v38 = v37;
      swift_release();
LABEL_13:
      v86 = v38;
      v39 = sub_23C7E18F4();
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = v2;
      v95 = sub_23C8BB210;
      v96 = v39;
      aBlock = MEMORY[0x24BDAC760];
      v92 = 1107296256;
      v93 = sub_23C88B2C0;
      v94 = &unk_250D8A2D8;
      v40 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v41 = v87;
      sub_23C910D40();
      v90[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      sub_23C7E79A8(&qword_25430D600);
      sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
      v42 = v88;
      sub_23C911574();
      MEMORY[0x242625098](0, v41, v42, v40);
      _Block_release(v40);
      sub_23C7EDEBC(v76);
      v43 = v72;
      v44 = v71;
      sub_23C7E5F14((uint64_t)v72);
      v45 = v67;
      v46 = v68;
      sub_23C7F1754((uint64_t)v67);
      v47 = (uint64_t)v74;
      v48 = v70;
      sub_23C7DBD64((uint64_t)v74);
      v49 = v69;
      v50 = v73;
      sub_23C7F1754(v69);
      swift_release();
      v51 = v82;
      swift_release();
      sub_23C8BB0F0(v51);
      sub_23C8BB168(v76, v75, (uint64_t)v43, v44, (uint64_t)v45, v46, v47, v48, v49, v50, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
      swift_release();
      (*(void (**)(id, uint64_t))(v80 + 8))(v88, v83);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v87, v85);
      swift_release();
      goto LABEL_18;
    }
    sub_23C7E3084();
    aBlock = sub_23C910DAC();
    MEMORY[0x24BDAC7A8](aBlock);
    v33 = v65;
    sub_23C8E88AC(&aBlock);
    if (v33)
    {
      swift_bridgeObjectRelease();
      v34 = (uint64_t)v74;
      sub_23C8BA644();
      v88 = v33;
      sub_23C8B8B8C(v33);
      v55 = v69;
      v56 = v76;
      v57 = v72;
      v58 = v67;
      sub_23C8BB168(v76, v75, (uint64_t)v72, v71, (uint64_t)v67, v68, v34, v70, v69, v73, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
      sub_23C8BB0F0(v82);
      swift_release();
      sub_23C7DFE08();
      sub_23C7F1754(v56);
      sub_23C7F1754((uint64_t)v57);
      sub_23C7E58EC((uint64_t)v58);
      sub_23C7E5F14((uint64_t)v74);
      sub_23C7EDEBC(v55);

      goto LABEL_18;
    }
    if (aBlock)
    {
      v52 = swift_bridgeObjectRetain();
      v53 = sub_23C88CFFC(v52);
      sub_23C7DB624();
    }
    else
    {
      v53 = 0;
    }
    v54 = v74;
    v89 = v53;
    sub_23C8679E0(v90);
    swift_bridgeObjectRelease();
    sub_23C7DB624();
    v59 = v90[0];
    if (!v72)
    {
LABEL_25:
      v61 = v2[21];
      v2[21] = v59;
      sub_23C88CFA0(v61);
      type metadata accessor for DatabaseFuture(0, AssociatedTypeWitness, v62, v63);
      (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v32, v20, AssociatedTypeWitness);
      swift_storeEnumTagMultiPayload();
      v38 = sub_23C7F4BF8(v32);
      goto LABEL_13;
    }
    if (v2[21] == 1)
    {
      sub_23C7DB420();
      sub_23C7E0A9C();
      sub_23C7DB624();
      sub_23C88CFA0(v59);
      sub_23C88CFA0(1);
    }
    else
    {
      v89 = v2[21];
      sub_23C7DB420();
      sub_23C7E0A9C();
      v60 = static DatabaseRegion.== infix(_:_:)(v90, &v89);
      sub_23C7DB624();
      swift_bridgeObjectRelease();
      if ((v60 & 1) != 0)
      {
LABEL_24:
        sub_23C7F1754((uint64_t)v54);
        goto LABEL_25;
      }
    }
    v90[0] = v59;
    v54(v90);
    goto LABEL_24;
  }
LABEL_18:
  sub_23C7DBCB0();
}

uint64_t sub_23C8BA4BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (a1[19])
  {
    v4 = a1[9];
    v5 = a1[10];
    v7 = a1[11];
    v6 = a1[12];
    v8 = a1[13];
    v19 = a1[14];
    v9 = a1[15];
    v10 = a1[16];
    v12 = a1[17];
    v11 = a1[18];
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v7;
    a2[3] = v6;
    a2[4] = v8;
    sub_23C7F5610(v4);
    sub_23C7F5610(v7);
    v13 = v8;
    v14 = v19;
    sub_23C7F5610(v13);
    sub_23C7F5610(v9);
    sub_23C7F5610(v12);
  }
  else
  {
    v14 = 0;
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v11 = 0;
    *a2 = 1;
    *(_OWORD *)(a2 + 1) = 0u;
    *(_OWORD *)(a2 + 3) = 0u;
  }
  a2[5] = v14;
  a2[6] = v9;
  a2[7] = v10;
  a2[8] = v12;
  v15 = a1[6];
  v16 = a1[7];
  v17 = a1[8];
  a2[9] = v11;
  a2[10] = v15;
  a2[11] = v16;
  a2[12] = v17;
  return sub_23C8BB11C(v15);
}

uint64_t sub_23C8BA5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  _QWORD v10[8];

  v10[7] = a1;
  v10[2] = a5;
  v10[3] = a6;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_23C7DE574(1, (uint64_t)sub_23C8BB324, (uint64_t)v10, AssociatedTypeWitness, a7);
}

id sub_23C8BA644()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8080CC();
  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 168) = 1;
  *(_BYTE *)(v0 + 176) = 0;
  sub_23C88CFA0(v1);
  return sub_23C88850C((uint64_t)sub_23C88CE44, 0, (void (*)(id))sub_23C8BB30C);
}

uint64_t sub_23C8BA6C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(void);
  char *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(id (*)(), _QWORD *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *a1;
  v57 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v51 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v54 = *(_QWORD *)(v51 + 8);
  v55 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v53 + 64);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v43 - v7;
  v56 = sub_23C9114E4();
  v8 = *(_QWORD *)(v56 - 8);
  v9 = MEMORY[0x24BDAC7A8](v56);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v43 - v13;
  v15 = *(_QWORD *)(v2 + 80);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7F4DC0();
  v43 = v5;
  v44 = v11;
  v45 = v14;
  v46 = v8;
  v47 = v16;
  v48 = v18;
  v49 = v15;
  v20 = v56;
  v19 = v57;
  if ((sub_23C8885FC() & 1) != 0)
  {
    swift_beginAccess();
    v21 = v55;
    v22 = v45;
    v23 = v48;
    (*(void (**)(char *, uint64_t))(v54 + 32))(v48, v55);
    swift_endAccess();
    v24 = v46;
    v25 = (uint64_t)v44;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v44, v22, v20);
    v26 = AssociatedTypeWitness;
    v27 = sub_23C7DE718(v25, 1, AssociatedTypeWitness);
    v28 = v49;
    if (v27 == 1)
    {
      v29 = *(void (**)(char *, uint64_t))(v24 + 8);
      v29(v22, v20);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v28);
      return ((uint64_t (*)(uint64_t, uint64_t))v29)(v25, v20);
    }
    v31 = v53;
    v32 = *(void (**)(void))(v53 + 32);
    v33 = v52;
    v32();
    v34 = *(_QWORD **)(v19 + 16);
    v35 = v50;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v50, v33, v26);
    v36 = (*(unsigned __int8 *)(v31 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v37 = (_QWORD *)swift_allocObject();
    v38 = v51;
    v37[2] = v21;
    v37[3] = v38;
    v37[4] = v19;
    ((void (*)(char *, char *, uint64_t))v32)((char *)v37 + v36, v35, v26);
    v39 = v34 + 2;
    v40 = v34[5];
    v41 = v34[6];
    sub_23C7E7E34(v39, v40);
    v42 = *(void (**)(id (*)(), _QWORD *, uint64_t, uint64_t))(v41 + 8);
    swift_retain();
    v42(sub_23C8BB298, v37, v40, v41);
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v26);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v56);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v49);
}

uint64_t *sub_23C8BAA88@<X0>(uint64_t *result@<X0>, void (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  void (*v7)();

  v3 = result[19];
  if (v3)
  {
    v4 = *result;
    v5 = result[20];
    v6 = (void (*)())swift_allocObject();
    *((_QWORD *)v6 + 2) = *(_QWORD *)(v4 + 80);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(v4 + 88);
    *((_QWORD *)v6 + 4) = v3;
    *((_QWORD *)v6 + 5) = v5;
    result = (uint64_t *)swift_retain();
    v7 = sub_23C8BB2C4;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return result;
}

uint64_t sub_23C8BAB18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    result = swift_retain();
  *a2 = result;
  return result;
}

void sub_23C8BAB44()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 176) = 0;
}

uint64_t sub_23C8BAB5C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  sub_23C888590();
  if (v3 == 1)
    return swift_release();
  if (v11)
  {
    sub_23C7E8BD0(v3);
    v2 = sub_23C7ED18C((uint64_t)v11);
    v11(v2);
    if (v13)
    {
LABEL_5:
      swift_retain();
      swift_retain();
      sub_23C8D1B1C((uint64_t)sub_23C8BB78C, v0);
      sub_23C7DFE08();
      swift_release();
      sub_23C7E58EC(v3);
      sub_23C7E44EC(v5);
      sub_23C7DFE08();
      return sub_23C8BB168(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v11, v12, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    }
  }
  else
  {
    sub_23C7E8BD0(v3);
    sub_23C7ED18C(0);
    if (v13)
      goto LABEL_5;
  }
  sub_23C7F1754(v3);
  sub_23C7E44EC(v5);
  return sub_23C8BB168(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v11, v12, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
}

uint64_t sub_23C8BAD28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1 + 9;
  v5 = a1[19];
  if (v5)
  {
    v6 = a1[9];
    v7 = a1[11];
    v34 = a1[12];
    v8 = a1[14];
    v33 = a1[13];
    v9 = a1[15];
    v10 = a1[16];
    v11 = a1[17];
    v30 = a1[18];
    v32 = a1[10];
    sub_23C7F5610(v6);
    v31 = v7;
    sub_23C7F5610(v7);
    v12 = v8;
    sub_23C7F5610(v33);
    v13 = v9;
    v14 = v9;
    v15 = v10;
    sub_23C7F5610(v14);
    v16 = v11;
    v17 = v11;
    v18 = v30;
    sub_23C7F5610(v17);
    v5 = a1[19];
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v12 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v6 = 1;
  }
  v19 = a1[9];
  v20 = a1[10];
  v21 = a1[11];
  v22 = a1[12];
  v23 = a1[13];
  v24 = a1[14];
  v25 = a1[15];
  v26 = a1[16];
  v27 = a1[17];
  v28 = a1[18];
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  sub_23C88D7B0(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v5);
  *a2 = v6;
  a2[1] = v32;
  a2[2] = v31;
  a2[3] = v34;
  a2[4] = v33;
  a2[5] = v12;
  a2[6] = v13;
  a2[7] = v15;
  a2[8] = v16;
  a2[9] = v18;
  result = a1[6];
  if (result)
    result = swift_retain();
  a2[10] = result;
  return result;
}

uint64_t *sub_23C8BAE90(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4[10];
  _QWORD v5[6];
  void (*v6)(uint64_t);

  sub_23C888664();
  result = (uint64_t *)sub_23C88D700((uint64_t)v4, (uint64_t)v5);
  if (v5[0] != 1)
  {
    if (v6)
      v6(a2);
    return sub_23C8BB4C8(v4, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
  }
  return result;
}

uint64_t sub_23C8BAF30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1 + 9;
  v5 = a1[19];
  if (v5)
  {
    v6 = a1[9];
    v7 = a1[11];
    v34 = a1[12];
    v8 = a1[14];
    v33 = a1[13];
    v9 = a1[15];
    v10 = a1[16];
    v11 = a1[17];
    v30 = a1[18];
    v32 = a1[10];
    sub_23C7F5610(v6);
    v31 = v7;
    sub_23C7F5610(v7);
    v12 = v8;
    sub_23C7F5610(v33);
    v13 = v9;
    v14 = v9;
    v15 = v10;
    sub_23C7F5610(v14);
    v16 = v11;
    v17 = v11;
    v18 = v30;
    sub_23C7F5610(v17);
    v5 = a1[19];
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v12 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v6 = 1;
  }
  v19 = a1[9];
  v20 = a1[10];
  v21 = a1[11];
  v22 = a1[12];
  v23 = a1[13];
  v24 = a1[14];
  v25 = a1[15];
  v26 = a1[16];
  v27 = a1[17];
  v28 = a1[18];
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  result = sub_23C88D7B0(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v5);
  *a2 = v6;
  a2[1] = v32;
  a2[2] = v31;
  a2[3] = v34;
  a2[4] = v33;
  a2[5] = v12;
  a2[6] = v13;
  a2[7] = v15;
  a2[8] = v16;
  a2[9] = v18;
  return result;
}

uint64_t sub_23C8BB080(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[6];
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = 0;
  return sub_23C8BB0F0(v1);
}

uint64_t sub_23C8BB0B8()
{
  return sub_23C8BAB5C();
}

uint64_t sub_23C8BB0D8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C8BA4BC(v1, a1);
}

uint64_t sub_23C8BB0F0(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8BB11C(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23C8BB148@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23C8BA5C0(v1[4], v1[5], v1[6], v1[7], v1[2], v1[3], a1);
}

uint64_t sub_23C8BB168(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), void (*a12)(uint64_t, uint64_t), void (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;

  if (result != 1)
  {
    sub_23C7E9C20();
    a11();
    a12(v16, v15);
    ((void (*)(uint64_t, uint64_t))a11)(v14, v13);
    a13(a7, a8);
    v19 = sub_23C7DEAE4();
    return ((uint64_t (*)(uint64_t))a11)(v19);
  }
  return result;
}

uint64_t sub_23C8BB204()
{
  return sub_23C7DB1D4((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23C8BB210()
{
  uint64_t v0;

  return sub_23C8BA6C0(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C8BB218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_23C8BB228()
{
  return swift_release();
}

uint64_t sub_23C8BB230()
{
  sub_23C8BB7E8();
  sub_23C8BB7E0();
  return swift_deallocObject();
}

void sub_23C8BB254()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 40))();
  sub_23C7DE9A8();
}

uint64_t sub_23C8BB270@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8BAB18(v1, a1);
}

uint64_t sub_23C8BB28C()
{
  return sub_23C8BB68C();
}

id sub_23C8BB298()
{
  return sub_23C8BB720((uint64_t)sub_23C88C180, (void (*)(id))sub_23C8BB2AC);
}

uint64_t *sub_23C8BB2AC@<X0>(void (**a1)()@<X8>)
{
  uint64_t *v1;

  return sub_23C8BAA88(v1, a1);
}

void sub_23C8BB2C4()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 32))();
  sub_23C7DB390();
}

uint64_t sub_23C8BB2E0()
{
  return sub_23C7DB1D4((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t *sub_23C8BB2EC()
{
  uint64_t v0;

  return sub_23C8BAE90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C8BB2F4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C8BAF30(v1, a1);
}

uint64_t sub_23C8BB30C()
{
  _QWORD *v0;

  return sub_23C8BB080(v0);
}

void sub_23C8BB324()
{
  sub_23C8BB5EC();
}

uint64_t sub_23C8BB338@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C8BAD28(v1, a1);
}

uint64_t sub_23C8BB350()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void sub_23C8BB3A8()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 8) + 24))();
  sub_23C7DE9A8();
}

uint64_t sub_23C8BB3E0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C8B7560(v1, a1);
}

uint64_t sub_23C8BB3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8B79BC(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_23C8BB414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C8B7E6C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C8BB42C()
{
  sub_23C7E58A8();
  swift_bridgeObjectRelease();
  sub_23C8BB7E8();
  sub_23C7DB484();
  sub_23C8BB7E0();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8BB468(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C8B8C1C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

_QWORD *sub_23C8BB47C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C8B8E84(v1, a1);
}

uint64_t sub_23C8BB494()
{
  uint64_t v0;

  return sub_23C8B8F60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48), *(_QWORD *)(v0 + 56), *(uint64_t (**)(uint64_t))(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(uint64_t **)(v0 + 88));
}

uint64_t *sub_23C8BB4C8(uint64_t *a1, void (*a2)(void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  sub_23C8BB168(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a2, a3, a4);
  return a1;
}

uint64_t sub_23C8BB524()
{
  return sub_23C8BB68C();
}

uint64_t sub_23C8BB530()
{
  return sub_23C8BB634((uint64_t (*)(uint64_t))sub_23C8B958C);
}

uint64_t sub_23C8BB53C()
{
  return sub_23C8BB68C();
}

id sub_23C8BB548()
{
  return sub_23C8BB720((uint64_t)sub_23C8B8E68, (void (*)(id))sub_23C8BB55C);
}

uint64_t *sub_23C8BB55C@<X0>(void (**a1)()@<X8>)
{
  uint64_t *v1;

  return sub_23C8B994C(v1, a1);
}

uint64_t sub_23C8BB574()
{
  sub_23C7DB484();
  return swift_deallocObject();
}

uint64_t sub_23C8BB594()
{
  sub_23C7E58A8();
  swift_release();
  sub_23C7DB484();
  sub_23C8BB7E0();
  return swift_deallocObject();
}

void sub_23C8BB5C4(void *a1, char a2)
{
  uint64_t v2;

  sub_23C8B80C0(a1, a2 & 1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_23C8BB5D8(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 152) != 0;
}

void sub_23C8BB5EC()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 40))(*(_QWORD *)(v0 + 56));
  sub_23C7DE9A8();
}

void sub_23C8BB610(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

uint64_t sub_23C8BB61C()
{
  return sub_23C8BB68C();
}

uint64_t sub_23C8BB628()
{
  return sub_23C8BB634((uint64_t (*)(uint64_t))sub_23C8B885C);
}

uint64_t sub_23C8BB634(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  sub_23C7DF054();
  v1 = sub_23C7E1C3C();
  return a1(v1);
}

id sub_23C8BB674(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

uint64_t sub_23C8BB680()
{
  return sub_23C8BB68C();
}

uint64_t sub_23C8BB68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23C7DF054();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_23C8BB7E8();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

id sub_23C8BB70C()
{
  return sub_23C8BB720((uint64_t)sub_23C88B20C, (void (*)(id))sub_23C8BB774);
}

id sub_23C8BB720(uint64_t a1, void (*a2)(id))
{
  uint64_t v4;
  uint64_t v5;

  sub_23C7DF054();
  v4 = sub_23C7E1C3C();
  return sub_23C8B9850(v4, v5, a1, a2);
}

uint64_t *sub_23C8BB774@<X0>(void (**a1)()@<X8>)
{
  uint64_t *v1;

  return sub_23C8B8AFC(v1, a1);
}

void sub_23C8BB7A0(BOOL *a1@<X8>)
{
  sub_23C8BB5D8(a1);
}

uint64_t sub_23C8BB7C0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 288);
}

uint64_t sub_23C8BB7D4()
{
  return sub_23C910D58();
}

uint64_t sub_23C8BB7E0()
{
  return swift_release();
}

uint64_t sub_23C8BB7E8()
{
  return swift_release();
}

uint64_t sub_23C8BB7F0@<X0>(uint64_t *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE __srca[169];

  v5 = a3;
  v9 = *a4;
  v10 = a4[1];
  v12 = *__src;
  v11 = __src[1];
  v13 = 1;
  if (!a3)
  {
    swift_bridgeObjectRetain();
    v13 = 0;
    a2 = v12;
    v5 = v11;
  }
  memcpy(&__srca[7], __src, 0xA2uLL);
  sub_23C7E79A8(&qword_25430B4A0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = v5;
  *(_BYTE *)(v14 + 48) = v13;
  *(_QWORD *)(v14 + 56) = v12;
  *(_QWORD *)(v14 + 64) = v11;
  *(_QWORD *)(v14 + 72) = v9;
  *(_QWORD *)(v14 + 80) = v10;
  *(_BYTE *)(v14 + 88) = 1;
  memcpy((void *)(v14 + 89), __srca, 0xA9uLL);
  *(_BYTE *)(v14 + 258) = 0;
  *a5 = v14;
  return swift_bridgeObjectRetain();
}

uint64_t BelongsToAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t BelongsToAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*BelongsToAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C8BB918(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8BB944(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C8BB978(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BelongsToAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

uint64_t sub_23C8BB9BC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C8BB9E8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for BelongsToAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BelongsToAssociation);
}

uint64_t sub_23C8BBA20@<X0>(uint64_t *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  _BYTE v16[169];

  v7 = *a4;
  v8 = a4[1];
  v10 = *__src;
  v9 = __src[1];
  if (a3)
  {
    v11 = a3;
    v13 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v13 = 0;
    a2 = v10;
    v11 = v9;
  }
  memcpy(&v16[7], __src, 0xA2uLL);
  sub_23C7E79A8(&qword_25430B4A0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = v11;
  *(_BYTE *)(v14 + 48) = v13;
  *(_QWORD *)(v14 + 56) = v10;
  *(_QWORD *)(v14 + 64) = v9;
  *(_QWORD *)(v14 + 72) = v7;
  *(_QWORD *)(v14 + 80) = v8;
  *(_BYTE *)(v14 + 88) = 0;
  memcpy((void *)(v14 + 89), v16, 0xA9uLL);
  *(_BYTE *)(v14 + 258) = 0;
  *a5 = v14;
  return swift_bridgeObjectRetain();
}

uint64_t HasOneAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t HasOneAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*HasOneAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C8BBB48(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8BBB74(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C8BBBA8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HasOneAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

uint64_t sub_23C8BBBEC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C8BBC18(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HasOneAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HasOneAssociation);
}

uint64_t sub_23C8BBC50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v8;
    v4 = a1 + 40;
    do
    {
      sub_23C7DBBB0();
      sub_23C910F5C();
      sub_23C7E3164();
      sub_23C7DB3DC();
      v5 = *(_QWORD *)(v8 + 16);
      if (v5 >= *(_QWORD *)(v8 + 24) >> 1)
        sub_23C7E649C();
      v4 += 16;
      *(_QWORD *)(v8 + 16) = v5 + 1;
      v6 = v8 + 16 * v5;
      *(_QWORD *)(v6 + 32) = 34;
      *(_QWORD *)(v6 + 40) = 0xE100000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C8BBD54(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    swift_release();
    v10 = MEMORY[0x24BEE4AF8];
LABEL_15:
    swift_bridgeObjectRelease();
    swift_release();
    return v10;
  }
  v35 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  v9 = (char *)(a1 + 40);
  v10 = v35;
  v33 = a2;
  while (1)
  {
    v11 = *((_QWORD *)v9 - 1);
    v12 = *v9;
    v34 = v10;
    if ((*v9 & 1) == 0)
      break;
    sub_23C8C2D1C(v11, 1);
    v13 = qword_25430CC40;
    swift_retain();
    if (v13 != -1)
      swift_once();
    v14 = qword_254310428;
    swift_retain();
    v15 = MEMORY[0x24BEE4AF8];
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    v16 = swift_allocObject();
    v17 = v14;
    v10 = v16;
    sub_23C7E30C0(a2, v17, v15);
    sub_23C8C2D1C(v11, 1);
    swift_retain();
    sub_23C8A9A6C(v11);
    if (v5)
    {
      sub_23C8C2D38(v11, 1);
      swift_release();
      goto LABEL_18;
    }
    sub_23C8C2D38(v11, 1);
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    v18 = sub_23C910E3C();
    v20 = v19;
    swift_release();
    swift_bridgeObjectRelease();
    v21 = v11;
    v22 = 1;
LABEL_10:
    sub_23C8C2D38(v21, v22);
    v10 = v34;
    v28 = *(_QWORD *)(v34 + 16);
    if (v28 >= *(_QWORD *)(v34 + 24) >> 1)
    {
      sub_23C7E649C();
      v10 = v34;
    }
    *(_QWORD *)(v10 + 16) = v28 + 1;
    v29 = v10 + 16 * v28;
    *(_QWORD *)(v29 + 32) = v18;
    *(_QWORD *)(v29 + 40) = v20;
    v9 += 16;
    --v7;
    v5 = 0;
    a2 = v33;
    if (!v7)
    {
      swift_release();
      goto LABEL_15;
    }
  }
  v24 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(a3 + 24);
  sub_23C8C2D1C(v11, 0);
  swift_retain();
  v25 = v23;
  v10 = v11;
  v26 = sub_23C8BFB54(a2, v24, v25, a4);
  if (!v5)
  {
    v18 = v26;
    v20 = v27;
    sub_23C8C2D38(v11, 0);
    v21 = v11;
    v22 = 0;
    goto LABEL_10;
  }
  sub_23C8C2D38(v11, 0);
LABEL_18:
  sub_23C8C2D38(v11, v12);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t sub_23C8BC06C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  _BYTE v17[211];
  _BYTE __dst[224];
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v6 = v19;
    v7 = (char *)(a1 + 32);
    v8 = v4 - 1;
    for (i = a2; ; a2 = i)
    {
      memcpy(__dst, v7, 0xD3uLL);
      memcpy(v17, v7, sizeof(v17));
      sub_23C8C36EC((uint64_t)__dst);
      v9 = sub_23C8BF33C(a2);
      if (v2)
      {
        sub_23C8C20FC((uint64_t)__dst);
        swift_release();
        swift_release();
        return v6;
      }
      v11 = v9;
      v12 = v10;
      sub_23C8C20FC((uint64_t)__dst);
      v19 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      if (v13 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_23C7E649C();
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v12;
      if (!v8)
        break;
      v7 += 216;
      --v8;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t Database.create(table:temporary:ifNotExists:withoutRowID:body:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v6 = 2;
  if ((a3 & 1) == 0)
    v6 = 0;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL | a4 & 1;
  if ((a5 & 1) != 0)
    v7 |= 4uLL;
  v9 = v7;
  return Database.create(table:options:body:)(a1, a2, (uint64_t *)&v9, a6);
}

uint64_t Database.create(table:options:body:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v9 = *a3;
  type metadata accessor for TableDefinition();
  v10 = swift_allocObject();
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 40) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = v11;
  *(_QWORD *)(v10 + 72) = v11;
  *(_QWORD *)(v10 + 80) = v11;
  *(_QWORD *)(v10 + 88) = v11;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = v9;
  sub_23C7DBBB8();
  a4(v10);
  if (v5)
    return sub_23C7DFE08();
  v12 = sub_23C8BC31C(v4);
  sub_23C8C4048(v12, v13, MEMORY[0x24BEE4B00], v15, v16);
  sub_23C7DB3DC();
  sub_23C7DFE08();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8BC31C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  const void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t i;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  _OWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD __src[27];
  uint64_t v231;
  unint64_t v232;
  uint64_t v233[27];
  _QWORD __dst[27];
  uint64_t v235;

  v2 = v1;
  v3 = MEMORY[0x24BEE4AF8];
  v235 = MEMORY[0x24BEE4AF8];
  sub_23C7F16C0();
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 + 1;
  if (v6 >= *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_23C7F16C0();
    v5 = v199;
  }
  *(_QWORD *)(v5 + 16) = v7;
  v8 = v5 + 16 * v6;
  *(_QWORD *)(v8 + 32) = 0x455441455243;
  *(_QWORD *)(v8 + 40) = 0xE600000000000000;
  v9 = v218;
  v10 = v218[4];
  if ((v10 & 2) != 0)
  {
    v11 = v6 + 2;
    if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7F16C0();
      v9 = v218;
      v5 = v202;
    }
    *(_QWORD *)(v5 + 16) = v11;
    v12 = v5 + 16 * v7;
    *(_QWORD *)(v12 + 32) = 0x5241524F504D4554;
    *(_QWORD *)(v12 + 40) = 0xE900000000000059;
    v7 = *(_QWORD *)(v5 + 16);
  }
  v13 = v7 + 1;
  if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
  {
    sub_23C7F16C0();
    v9 = v218;
    v5 = v200;
  }
  *(_QWORD *)(v5 + 16) = v13;
  v14 = v5 + 16 * v7;
  *(_QWORD *)(v14 + 32) = 0x454C424154;
  *(_QWORD *)(v14 + 40) = 0xE500000000000000;
  if ((v10 & 1) != 0)
  {
    v15 = v7 + 2;
    if (v13 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7F16C0();
      v9 = v218;
      v5 = v203;
    }
    *(_QWORD *)(v5 + 16) = v15;
    v16 = v5 + 16 * v13;
    strcpy((char *)(v16 + 32), "IF NOT EXISTS");
    *(_WORD *)(v16 + 46) = -4864;
  }
  v17 = v9[2];
  v18 = v9[3];
  __dst[0] = 34;
  __dst[1] = 0xE100000000000000;
  v219 = v18;
  v220 = v17;
  sub_23C910F5C();
  sub_23C910F5C();
  v19 = *(_QWORD *)(v5 + 16);
  if (v19 >= *(_QWORD *)(v5 + 24) >> 1)
  {
    sub_23C7F16C0();
    v5 = v201;
  }
  *(_QWORD *)(v5 + 16) = v19 + 1;
  v20 = v5 + 16 * v19;
  *(_QWORD *)(v20 + 32) = 34;
  *(_QWORD *)(v20 + 40) = 0xE100000000000000;
  v21 = (uint64_t)v218;
  v22 = (_OWORD *)v218[6];
  if (v22)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  v27 = v218[5];
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = (_BYTE *)(v27 + 40);
    v22 = &unk_250D82650;
    while (1)
    {
      if ((*v29 & 1) == 0)
      {
        v30 = *((_QWORD *)v29 - 1);
        if (*(unsigned __int8 *)(v30 + 49) << 8 != 512)
          break;
      }
      v29 += 16;
      if (!--v28)
        goto LABEL_17;
    }
    sub_23C7E79A8(&qword_25430DA10);
    v21 = (uint64_t)v218;
    v22 = (_OWORD *)swift_allocObject();
    v22[1] = xmmword_23C912A20;
    v44 = *(_QWORD *)(v30 + 24);
    *((_QWORD *)v22 + 4) = *(_QWORD *)(v30 + 16);
    *((_QWORD *)v22 + 5) = v44;
    goto LABEL_16;
  }
  v22 = &unk_250D82650;
LABEL_17:
  __src[0] = v3;
  v23 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRetain();
  sub_23C8BBD54(v24, a1, v21, v22);
  v25 = v2;
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRelease();
  sub_23C7FAE44();
  v31 = *(_QWORD *)(v21 + 48);
  v32 = (_QWORD *)v21;
  v214 = v10;
  v215 = v5;
  if (v31)
  {
    v33 = *(unsigned __int8 *)(v21 + 56);
    swift_bridgeObjectRetain();
    sub_23C7F16C0();
    v35 = v34;
    v36 = *(_QWORD *)(v34 + 16);
    if (v36 >= *(_QWORD *)(v34 + 24) >> 1)
    {
      sub_23C7F16C0();
      v35 = v204;
    }
    *(_QWORD *)(v35 + 16) = v36 + 1;
    v37 = v35 + 16 * v36;
    *(_QWORD *)(v37 + 32) = 0x205952414D495250;
    *(_QWORD *)(v37 + 40) = 0xEB0000000059454BLL;
    __dst[0] = 40;
    __dst[1] = 0xE100000000000000;
    v38 = sub_23C8BBC50(v31);
    swift_bridgeObjectRelease();
    v233[0] = v38;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v39 = *(_QWORD *)(v35 + 16);
    v40 = v39 + 1;
    if (v39 >= *(_QWORD *)(v35 + 24) >> 1)
    {
      sub_23C7F16C0();
      v35 = v205;
    }
    *(_QWORD *)(v35 + 16) = v40;
    v41 = v35 + 16 * v39;
    *(_QWORD *)(v41 + 32) = 40;
    *(_QWORD *)(v41 + 40) = 0xE100000000000000;
    if ((_DWORD)v33 != 5)
    {
      v42 = v39 + 2;
      if (v40 >= *(_QWORD *)(v35 + 24) >> 1)
      {
        sub_23C7F16C0();
        v35 = v212;
      }
      *(_QWORD *)(v35 + 16) = v42;
      v43 = v35 + 16 * v40;
      *(_QWORD *)(v43 + 32) = 0x4C464E4F43204E4FLL;
      *(_QWORD *)(v43 + 40) = 0xEB00000000544349;
      __asm { BR              X9 }
    }
    __dst[0] = v35;
    v45 = sub_23C910E3C();
    v47 = v46;
    swift_bridgeObjectRelease();
    v48 = __src[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7F16C0();
      v48 = v206;
    }
    v49 = *(_QWORD *)(v48 + 16);
    v32 = v218;
    if (v49 >= *(_QWORD *)(v48 + 24) >> 1)
    {
      sub_23C7F16C0();
      v32 = v218;
      v48 = v207;
    }
    *(_QWORD *)(v48 + 16) = v49 + 1;
    v50 = v48 + 16 * v49;
    *(_QWORD *)(v50 + 32) = v45;
    *(_QWORD *)(v50 + 40) = v47;
    __src[0] = v48;
    v23 = a1;
  }
  v51 = *(_QWORD *)(v32[8] + 16);
  if (v51)
  {
    v52 = __src[0];
    v53 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v54 = v25;
      v55 = *((_QWORD *)v53 - 1);
      v56 = *v53;
      swift_bridgeObjectRetain();
      sub_23C7F16C0();
      v58 = v57;
      v59 = *(_QWORD *)(v57 + 16);
      if (v59 >= *(_QWORD *)(v57 + 24) >> 1)
      {
        sub_23C7F16C0();
        v58 = v72;
      }
      *(_QWORD *)(v58 + 16) = v59 + 1;
      v60 = v58 + 16 * v59;
      *(_QWORD *)(v60 + 32) = 0x455551494E55;
      *(_QWORD *)(v60 + 40) = 0xE600000000000000;
      __dst[0] = 40;
      __dst[1] = 0xE100000000000000;
      v61 = sub_23C8BBC50(v55);
      swift_bridgeObjectRelease();
      v233[0] = v61;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v62 = *(_QWORD *)(v58 + 16);
      v63 = v62 + 1;
      if (v62 >= *(_QWORD *)(v58 + 24) >> 1)
      {
        sub_23C7F16C0();
        v58 = v73;
      }
      *(_QWORD *)(v58 + 16) = v63;
      v64 = v58 + 16 * v62;
      *(_QWORD *)(v64 + 32) = 40;
      *(_QWORD *)(v64 + 40) = 0xE100000000000000;
      if ((_DWORD)v56 != 5)
      {
        v65 = v62 + 2;
        if (v63 >= *(_QWORD *)(v58 + 24) >> 1)
        {
          sub_23C7F16C0();
          v58 = v76;
        }
        *(_QWORD *)(v58 + 16) = v65;
        v66 = v58 + 16 * v63;
        *(_QWORD *)(v66 + 32) = 0x4C464E4F43204E4FLL;
        *(_QWORD *)(v66 + 40) = 0xEB00000000544349;
        __asm { BR              X8 }
      }
      __dst[0] = v58;
      v67 = sub_23C910E3C();
      v69 = v68;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        v52 = v74;
      }
      v25 = v54;
      v70 = *(_QWORD *)(v52 + 16);
      if (v70 >= *(_QWORD *)(v52 + 24) >> 1)
      {
        sub_23C7F16C0();
        v52 = v75;
      }
      *(_QWORD *)(v52 + 16) = v70 + 1;
      v71 = v52 + 16 * v70;
      *(_QWORD *)(v71 + 32) = v67;
      *(_QWORD *)(v71 + 40) = v69;
      v53 += 16;
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease();
    __src[0] = v52;
    v23 = a1;
    v32 = v218;
  }
  v77 = v32[9];
  v78 = *(_QWORD *)(v77 + 16);
  if (v78)
  {
    swift_bridgeObjectRetain();
    v79 = 0;
    v221 = v77;
    do
    {
      v224 = v79;
      v225 = v78;
      v80 = *(_QWORD *)(v77 + v79 + 40);
      v81 = *(_QWORD *)(v77 + v79 + 48);
      v82 = *(_QWORD *)(v77 + v79 + 56);
      v226 = *(unsigned __int8 *)(v77 + v79 + 64);
      v227 = *(unsigned __int8 *)(v77 + v79 + 65);
      v223 = *(unsigned __int8 *)(v77 + v79 + 66);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C7F16C0();
      v84 = v83;
      v85 = *(_QWORD *)(v83 + 16);
      if (v85 >= *(_QWORD *)(v83 + 24) >> 1)
      {
        sub_23C7F16C0();
        v84 = v121;
      }
      *(_QWORD *)(v84 + 16) = v85 + 1;
      v86 = v84 + 16 * v85;
      *(_QWORD *)(v86 + 32) = 0x204E474945524F46;
      *(_QWORD *)(v86 + 40) = 0xEB0000000059454BLL;
      __dst[0] = 40;
      __dst[1] = 0xE100000000000000;
      v87 = swift_bridgeObjectRetain();
      v88 = sub_23C8BBC50(v87);
      v89 = v25;
      swift_bridgeObjectRelease();
      v233[0] = v88;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v90 = __dst[0];
      v91 = __dst[1];
      v92 = *(_QWORD *)(v84 + 16);
      v93 = *(_QWORD *)(v84 + 24) >> 1;
      v94 = v92 + 1;
      if (v93 <= v92)
      {
        sub_23C7F16C0();
        v84 = v122;
        v93 = *(_QWORD *)(v122 + 24) >> 1;
      }
      *(_QWORD *)(v84 + 16) = v94;
      v95 = v84 + 16 * v92;
      *(_QWORD *)(v95 + 32) = v90;
      *(_QWORD *)(v95 + 40) = v91;
      if ((uint64_t)v93 < (uint64_t)(v92 + 2))
      {
        sub_23C7F16C0();
        v84 = v123;
      }
      *(_QWORD *)(v84 + 16) = v92 + 2;
      v96 = v84 + 16 * v94;
      *(_QWORD *)(v96 + 32) = 0x434E455245464552;
      *(_QWORD *)(v96 + 40) = 0xEA00000000005345;
      if (v82)
      {
        __dst[0] = 34;
        __dst[1] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        sub_23C910F5C();
        sub_23C910F5C();
        v97 = sub_23C8BBC50(v82);
        v25 = v89;
      }
      else
      {
        v98 = v80 == v220 && v81 == v219;
        if (v98 || (sub_23C911A18() & 1) != 0)
        {
          __dst[0] = 34;
          __dst[1] = 0xE100000000000000;
          sub_23C910F5C();
          sub_23C910F5C();
          sub_23C910F5C();
          v99 = swift_bridgeObjectRetain();
        }
        else
        {
          Database.primaryKey(_:)(v80, v81, __dst);
          v89 = 0;
          v216 = __dst[1];
          v217 = (_OWORD *)__dst[0];
          v100 = LOBYTE(__dst[2]);
          sub_23C815E98(6);
          __dst[0] = 34;
          __dst[1] = 0xE100000000000000;
          sub_23C910F5C();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          sub_23C910F5C();
          if (v100)
          {
            v101 = &unk_250D82620;
            if (v100 == 1)
              v101 = v217;
          }
          else
          {
            sub_23C7E79A8(&qword_25430DA10);
            v101 = (_OWORD *)swift_allocObject();
            v101[1] = xmmword_23C912A20;
            *((_QWORD *)v101 + 4) = v217;
            *((_QWORD *)v101 + 5) = v216;
          }
          v99 = (uint64_t)v101;
        }
        v97 = sub_23C8BBC50(v99);
        v25 = v89;
      }
      swift_bridgeObjectRelease();
      v233[0] = v97;
      sub_23C910E3C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v102 = __dst[0];
      v103 = __dst[1];
      v104 = *(_QWORD *)(v84 + 16);
      v105 = v104 + 1;
      if (v104 >= *(_QWORD *)(v84 + 24) >> 1)
      {
        sub_23C7F16C0();
        v84 = v126;
      }
      *(_QWORD *)(v84 + 16) = v105;
      v106 = v84 + 16 * v104;
      *(_QWORD *)(v106 + 32) = v102;
      *(_QWORD *)(v106 + 40) = v103;
      v108 = v226;
      v107 = v227;
      if ((_DWORD)v226 != 4)
      {
        v109 = v104 + 2;
        if (v105 >= *(_QWORD *)(v84 + 24) >> 1)
        {
          sub_23C7F16C0();
          v108 = v226;
          v84 = v127;
        }
        *(_QWORD *)(v84 + 16) = v109;
        v110 = v84 + 16 * v105;
        *(_QWORD *)(v110 + 32) = 0x54454C4544204E4FLL;
        *(_QWORD *)(v110 + 40) = 0xE900000000000045;
        __asm { BR              X8 }
      }
      if ((_DWORD)v227 != 4)
      {
        v111 = *(_QWORD *)(v84 + 16);
        if (v111 >= *(_QWORD *)(v84 + 24) >> 1)
        {
          sub_23C7F16C0();
          v107 = v227;
          v84 = v128;
        }
        *(_QWORD *)(v84 + 16) = v111 + 1;
        v112 = v84 + 16 * v111;
        *(_QWORD *)(v112 + 32) = 0x5441445055204E4FLL;
        *(_QWORD *)(v112 + 40) = 0xE900000000000045;
        __asm { BR              X8 }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v223)
      {
        v113 = *(_QWORD *)(v84 + 16);
        if (v113 >= *(_QWORD *)(v84 + 24) >> 1)
        {
          sub_23C7F16C0();
          v84 = v129;
        }
        *(_QWORD *)(v84 + 16) = v113 + 1;
        v114 = v84 + 16 * v113;
        *(_QWORD *)(v114 + 32) = 0xD00000000000001DLL;
        *(_QWORD *)(v114 + 40) = 0x800000023C91F7C0;
      }
      __dst[0] = v84;
      v115 = sub_23C910E3C();
      v117 = v116;
      swift_bridgeObjectRelease();
      v118 = __src[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        v118 = v124;
      }
      v119 = *(_QWORD *)(v118 + 16);
      if (v119 >= *(_QWORD *)(v118 + 24) >> 1)
      {
        sub_23C7F16C0();
        v118 = v125;
      }
      *(_QWORD *)(v118 + 16) = v119 + 1;
      v120 = v118 + 16 * v119;
      *(_QWORD *)(v120 + 32) = v115;
      *(_QWORD *)(v120 + 40) = v117;
      __src[0] = v118;
      v79 = v224 + 40;
      v78 = v225 - 1;
      v77 = v221;
    }
    while (v225 != 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = a1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v130 = v218;
  v131 = v218[10];
  v132 = *(_QWORD *)(v131 + 16);
  if (v132)
  {
    v133 = (const void *)(v131 + 32);
    v228 = v218[10];
    swift_bridgeObjectRetain();
    memcpy(__dst, v133, 0xA3uLL);
    v134 = v132 - 1;
    v135 = 200;
    v136 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v231 = 0;
      v232 = 0xE000000000000000;
      sub_23C863D2C();
      sub_23C910F5C();
      v137 = qword_25430CC40;
      swift_retain();
      if (v137 != -1)
        swift_once();
      v138 = qword_254310428;
      swift_retain();
      sub_23C7E0C50();
      type metadata accessor for SQLGenerationContext();
      swift_allocObject();
      sub_23C7E30C0(v23, v138, v136);
      memcpy(v233, __dst, 0xA3uLL);
      sub_23C7EA244();
      swift_release();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v139 = v231;
      v140 = v232;
      sub_23C7F16C0();
      v142 = v141;
      v143 = *(_QWORD *)(v141 + 16);
      if (v143 >= *(_QWORD *)(v141 + 24) >> 1)
      {
        sub_23C7F16C0();
        v142 = v151;
      }
      *(_QWORD *)(v142 + 16) = v143 + 1;
      v144 = v142 + 16 * v143;
      *(_QWORD *)(v144 + 32) = v139;
      *(_QWORD *)(v144 + 40) = v140;
      v233[0] = v142;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      v145 = sub_23C910E3C();
      v147 = v146;
      swift_bridgeObjectRelease();
      v148 = __src[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        v148 = v152;
      }
      v149 = *(_QWORD *)(v148 + 16);
      if (v149 >= *(_QWORD *)(v148 + 24) >> 1)
      {
        sub_23C7F16C0();
        v148 = v153;
      }
      *(_QWORD *)(v148 + 16) = v149 + 1;
      v150 = v148 + 16 * v149;
      *(_QWORD *)(v150 + 32) = v145;
      *(_QWORD *)(v150 + 40) = v147;
      sub_23C863D2C();
      __src[0] = v148;
      if (!v134)
        break;
      memcpy(__dst, (const void *)(v228 + v135), 0xA3uLL);
      v135 += 168;
      --v134;
      v23 = a1;
    }
    swift_bridgeObjectRelease();
    v23 = a1;
    v130 = v218;
  }
  v154 = v130[11];
  v229 = *(_QWORD *)(v154 + 16);
  if (v229)
  {
    swift_bridgeObjectRetain();
    v155 = 0;
    do
    {
      v156 = *(_QWORD *)(v154 + 8 * v155 + 32);
      v157 = qword_25430CC40;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v157 != -1)
        swift_once();
      v158 = qword_254310428;
      swift_retain();
      v159 = MEMORY[0x24BEE4AF8];
      sub_23C7E0C50();
      type metadata accessor for SQLGenerationContext();
      swift_allocObject();
      sub_23C7E30C0(v23, v158, v159);
      swift_bridgeObjectRetain();
      swift_retain();
      v160 = sub_23C8A9A6C(v156);
      swift_bridgeObjectRelease();
      __dst[0] = v160;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      v161 = sub_23C910E3C();
      v163 = v162;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v164 = __src[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        v164 = v167;
      }
      v165 = *(_QWORD *)(v164 + 16);
      if (v165 >= *(_QWORD *)(v164 + 24) >> 1)
      {
        sub_23C7F16C0();
        v164 = v168;
      }
      ++v155;
      *(_QWORD *)(v164 + 16) = v165 + 1;
      v166 = v164 + 16 * v165;
      *(_QWORD *)(v166 + 32) = v161;
      *(_QWORD *)(v166 + 40) = v163;
      swift_release();
      __src[0] = v164;
      v23 = a1;
    }
    while (v229 != v155);
    swift_bridgeObjectRelease();
  }
  else
  {
    v164 = __src[0];
  }
  __dst[0] = 40;
  __dst[1] = 0xE100000000000000;
  v233[0] = v164;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v169 = __dst[0];
  v170 = __dst[1];
  v171 = v215;
  v172 = *(_QWORD *)(v215 + 16);
  v173 = MEMORY[0x24BEE4AF8];
  if (v172 >= *(_QWORD *)(v215 + 24) >> 1)
  {
    sub_23C7F16C0();
    v171 = v208;
  }
  *(_QWORD *)(v171 + 16) = v172 + 1;
  v174 = v171 + 16 * v172;
  *(_QWORD *)(v174 + 32) = v169;
  *(_QWORD *)(v174 + 40) = v170;
  if ((v214 & 4) != 0)
  {
    sub_23C7F16C0();
    v173 = v175;
    v176 = *(_QWORD *)(v175 + 16);
    if (v176 >= *(_QWORD *)(v175 + 24) >> 1)
    {
      sub_23C7F16C0();
      v173 = v213;
    }
    *(_QWORD *)(v173 + 16) = v176 + 1;
    v177 = v173 + 16 * v176;
    strcpy((char *)(v177 + 32), "WITHOUT ROWID");
    *(_WORD *)(v177 + 46) = -4864;
    goto LABEL_134;
  }
  if (*(_QWORD *)(v173 + 16))
  {
LABEL_134:
    __dst[0] = v173;
    v178 = sub_23C910E3C();
    v180 = v179;
    swift_bridgeObjectRelease();
    v181 = *(_QWORD *)(v171 + 16);
    if (v181 >= *(_QWORD *)(v171 + 24) >> 1)
    {
      sub_23C7F16C0();
      v171 = v211;
    }
    *(_QWORD *)(v171 + 16) = v181 + 1;
    v182 = v171 + 16 * v181;
    *(_QWORD *)(v182 + 32) = v178;
    *(_QWORD *)(v182 + 40) = v180;
    goto LABEL_137;
  }
  swift_bridgeObjectRelease();
LABEL_137:
  __dst[0] = v171;
  v183 = sub_23C910E3C();
  v185 = v184;
  swift_bridgeObjectRelease();
  v186 = v235;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C7F16C0();
    v186 = v209;
  }
  v187 = *(_QWORD *)(v186 + 16);
  v188 = v218;
  if (v187 >= *(_QWORD *)(v186 + 24) >> 1)
  {
    sub_23C7F16C0();
    v188 = v218;
    v186 = v210;
  }
  *(_QWORD *)(v186 + 16) = v187 + 1;
  v189 = v186 + 16 * v187;
  *(_QWORD *)(v189 + 32) = v183;
  *(_QWORD *)(v189 + 40) = v185;
  v235 = v186;
  v190 = v188[5];
  v191 = *(_QWORD *)(v190 + 16);
  if (v191)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v192 = v191 - 1;
    v193 = MEMORY[0x24BEE4AF8];
    for (i = 32; ; i += 16)
    {
      if ((*(_BYTE *)(v190 + i + 8) & 1) != 0)
      {
        sub_23C8C357C(v233);
        sub_23C82CBCC((uint64_t)v233, (uint64_t)__dst, &qword_25430B6F8);
      }
      else
      {
        v195 = *(_QWORD *)(v190 + i);
        v233[0] = v214 & 1;
        swift_retain();
        sub_23C8C15C0(v220, v219, v233, (uint64_t)__dst);
        sub_23C8C2D38(v195, 0);
      }
      sub_23C82CBCC((uint64_t)__dst, (uint64_t)&v231, &qword_25430B6F8);
      sub_23C82CBCC((uint64_t)&v231, (uint64_t)v233, &qword_25430B6F8);
      if (sub_23C82CC10((uint64_t)v233) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F2578();
          v193 = v197;
        }
        v196 = *(_QWORD *)(v193 + 16);
        if (v196 >= *(_QWORD *)(v193 + 24) >> 1)
        {
          sub_23C7F2578();
          v193 = v198;
        }
        sub_23C82CBCC((uint64_t)&v231, (uint64_t)__src, &qword_25430B6F8);
        *(_QWORD *)(v193 + 16) = v196 + 1;
        memcpy((void *)(v193 + 216 * v196 + 32), __src, 0xD3uLL);
      }
      if (!v192)
        break;
      --v192;
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v193 = MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  sub_23C8BC06C(v193, a1);
  swift_bridgeObjectRelease();
  sub_23C7FAE44();
  __dst[0] = v235;
  v2 = sub_23C910E3C();
  swift_bridgeObjectRelease();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.rename(table:to:)(Swift::String table, Swift::String to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  sub_23C911634();
  swift_bridgeObjectRelease();
  strcpy((char *)v5, "ALTER TABLE ");
  sub_23C910F5C();
  sub_23C7E3164();
  sub_23C910F5C();
  sub_23C7DC474();
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C7E3164();
  sub_23C7E2610();
  sub_23C7DB398();
  v2 = v5[0];
  v5[0] = MEMORY[0x24BEE4AF8];
  v5[1] = MEMORY[0x24BEE4B00];
  sub_23C7EDCDC(v2, v3, (uint64_t)v5, v4);
  sub_23C7DB398();
  sub_23C7DC474();
  sub_23C7DB3DC();
}

uint64_t Database.alter(table:body:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for TableAlteration();
  v7 = (_QWORD *)swift_allocObject();
  v8 = MEMORY[0x24BEE4AF8];
  v7[3] = a2;
  v7[4] = v8;
  v7[2] = a1;
  sub_23C7DBBB8();
  a3(v7);
  v9 = sub_23C8BE198();
  if (v3)
    return sub_23C7DFE08();
  sub_23C8C4048(v9, v10, MEMORY[0x24BEE4B00], v12, v13);
  sub_23C7DB3DC();
  sub_23C7DFE08();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8BE198()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    v1 = (char *)&loc_23C8BE218 + 4 * word_23C919332[*(unsigned __int8 *)(swift_bridgeObjectRetain() + 64)];
    __asm { BR              X9 }
  }
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v2 = sub_23C910E3C();
  swift_bridgeObjectRelease();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.drop(table:)(Swift::String table)
{
  sub_23C7E11F4(table._countAndFlagsBits, (uint64_t)table._object, 0x42415420504F5244);
}

uint64_t Database.create(index:on:columns:unique:ifNotExists:condition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  v8 = a7 & 1;
  if ((a6 & 1) != 0)
    v8 = a7 & 1 | 2;
  v10 = v8;
  return Database.create(index:on:columns:options:condition:)(a1, a2, a3, a4, a5, &v10, a8);
}

uint64_t Database.create(index:on:columns:options:condition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v23;
  _QWORD __dst[27];
  _QWORD __src[27];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[176];
  uint64_t v30;

  v8 = v7;
  v14 = *a6;
  sub_23C874DBC(a7, (uint64_t)v26);
  v15 = v27;
  if (v27)
  {
    v16 = v28;
    sub_23C7E7E34(v26, v27);
    v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 8);
    v18 = v16;
    v8 = v7;
    v17(__src, v15, v18);
    nullsub_1(__src);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
  }
  else
  {
    sub_23C8B469C((uint64_t)v26);
    sub_23C80A96C((uint64_t)__src);
  }
  sub_23C82CBCC((uint64_t)__src, (uint64_t)v29, &qword_25430CF58);
  __src[0] = a1;
  __src[1] = a2;
  __src[2] = a3;
  __src[3] = a4;
  __src[4] = a5;
  __src[5] = v14;
  sub_23C82CBCC((uint64_t)v29, (uint64_t)&__src[6], &qword_25430CF58);
  memcpy(__dst, __src, 0xD3uLL);
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  sub_23C7E0808();
  v19 = sub_23C8BF33C(v30);
  if (v8)
    return sub_23C8C20FC((uint64_t)__src);
  __dst[0] = MEMORY[0x24BEE4AF8];
  __dst[1] = MEMORY[0x24BEE4B00];
  v23 = __dst;
  Database.execute(sql:arguments:)(*(Swift::String *)&v19, *(GRDBInternal::StatementArguments *)(&v21 - 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C8C20FC((uint64_t)__src);
  return sub_23C7DB398();
}

uint64_t sub_23C8BF33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE __dst[163];
  uint64_t v44;
  unint64_t v45;
  uint64_t v46[21];
  _QWORD __src[21];
  _BYTE v48[176];

  v4 = *(_QWORD *)(v1 + 40);
  sub_23C82CBCC(v1 + 48, (uint64_t)v48, &qword_25430CF58);
  sub_23C7F16C0();
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  v8 = v7 + 1;
  if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
  {
    sub_23C7F16C0();
    v6 = v35;
  }
  *(_QWORD *)(v6 + 16) = v8;
  v9 = v6 + 16 * v7;
  *(_QWORD *)(v9 + 32) = 0x455441455243;
  *(_QWORD *)(v9 + 40) = 0xE600000000000000;
  if ((v4 & 2) != 0)
  {
    v10 = v7 + 2;
    if (v8 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_23C7F16C0();
      v6 = v40;
    }
    *(_QWORD *)(v6 + 16) = v10;
    v11 = v6 + 16 * v8;
    *(_QWORD *)(v11 + 32) = 0x455551494E55;
    *(_QWORD *)(v11 + 40) = 0xE600000000000000;
    v8 = *(_QWORD *)(v6 + 16);
  }
  v12 = v8 + 1;
  if (v8 >= *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_23C7F16C0();
    v6 = v36;
  }
  *(_QWORD *)(v6 + 16) = v12;
  v13 = v6 + 16 * v8;
  *(_QWORD *)(v13 + 32) = 0x5845444E49;
  *(_QWORD *)(v13 + 40) = 0xE500000000000000;
  if ((v4 & 1) != 0)
  {
    v14 = v8 + 2;
    if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_23C7F16C0();
      v6 = v41;
    }
    *(_QWORD *)(v6 + 16) = v14;
    v15 = v6 + 16 * v12;
    strcpy((char *)(v15 + 32), "IF NOT EXISTS");
    *(_WORD *)(v15 + 46) = -4864;
  }
  __src[0] = 34;
  __src[1] = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  v16 = *(_QWORD *)(v6 + 16);
  v17 = *(_QWORD *)(v6 + 24) >> 1;
  v18 = v16 + 1;
  if (v17 <= v16)
  {
    sub_23C7F16C0();
    v6 = v37;
    v17 = *(_QWORD *)(v37 + 24) >> 1;
  }
  *(_QWORD *)(v6 + 16) = v18;
  v19 = v6 + 16 * v16;
  *(_QWORD *)(v19 + 32) = 34;
  *(_QWORD *)(v19 + 40) = 0xE100000000000000;
  if ((uint64_t)v17 < (uint64_t)(v16 + 2))
  {
    sub_23C7F16C0();
    v6 = v38;
  }
  *(_QWORD *)(v6 + 16) = v16 + 2;
  v20 = v6 + 16 * v18;
  *(_QWORD *)(v20 + 32) = 20047;
  *(_QWORD *)(v20 + 40) = 0xE200000000000000;
  __src[0] = 34;
  __src[1] = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  v21 = swift_bridgeObjectRetain();
  v22 = sub_23C8BBC50(v21);
  v23 = v2;
  swift_bridgeObjectRelease();
  v46[0] = v22;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v24 = *(_QWORD *)(v6 + 16);
  if (v24 >= *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_23C7F16C0();
    v6 = v39;
  }
  *(_QWORD *)(v6 + 16) = v24 + 1;
  v25 = v6 + 16 * v24;
  *(_QWORD *)(v25 + 32) = 34;
  *(_QWORD *)(v25 + 40) = 0xE100000000000000;
  sub_23C82CBCC((uint64_t)v48, (uint64_t)__src, &qword_25430CF58);
  if (sub_23C800F80((uint64_t)__src) == 1)
    goto LABEL_27;
  v44 = 0;
  v45 = 0xE000000000000000;
  sub_23C82CBCC((uint64_t)v48, (uint64_t)v46, &qword_25430CF58);
  sub_23C863D2C();
  sub_23C910F5C();
  v26 = qword_25430CC40;
  swift_retain();
  if (v26 != -1)
    swift_once();
  v27 = qword_254310428;
  swift_retain();
  v28 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_allocObject();
  sub_23C7E30C0(a1, v27, v28);
  memcpy(__dst, __src, sizeof(__dst));
  sub_23C7EA244();
  if (!v23)
  {
    swift_release();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v30 = v44;
    v31 = v45;
    v32 = *(_QWORD *)(v6 + 16);
    if (v32 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_23C7F16C0();
      v6 = v42;
    }
    *(_QWORD *)(v6 + 16) = v32 + 1;
    v33 = v6 + 16 * v32;
    *(_QWORD *)(v33 + 32) = v30;
    *(_QWORD *)(v33 + 40) = v31;
    sub_23C8C364C();
LABEL_27:
    v46[0] = v6;
    v29 = sub_23C910E3C();
    swift_bridgeObjectRelease();
    return v29;
  }
  swift_release();
  v29 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C8C364C();
  return v29;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.drop(index:)(Swift::String index)
{
  sub_23C7E11F4(index._countAndFlagsBits, (uint64_t)index._object, 0x444E4920504F5244);
}

uint64_t sub_23C8BF90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a3;
  sub_23C910F5C();
  sub_23C7E3164();
  sub_23C7E2610();
  sub_23C7DB398();
  v3 = v7[0];
  v7[0] = MEMORY[0x24BEE4AF8];
  v7[1] = MEMORY[0x24BEE4B00];
  sub_23C7EDCDC(v3, v4, (uint64_t)v7, v5);
  sub_23C7DB398();
  sub_23C7DC474();
  return sub_23C7DB3DC();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.reindex(collation:)(GRDBInternal::Database::CollationName collation)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  sub_23C7E0808();
  sub_23C910F5C();
  sub_23C7DB398();
  v3[0] = MEMORY[0x24BEE4AF8];
  v3[1] = MEMORY[0x24BEE4B00];
  sub_23C7EDCDC(0x205845444E494552, v1, (uint64_t)v3, v2);
  sub_23C7DB398();
  sub_23C7DC474();
  sub_23C7DB3DC();
}

uint64_t Database.reindex(collation:)(uint64_t a1)
{
  uint64_t v1;
  GRDBInternal::Database::CollationName v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 24);
  v4[0] = *(_QWORD *)(a1 + 16);
  v4[1] = v1;
  swift_bridgeObjectRetain();
  v2.rawValue._countAndFlagsBits = (uint64_t)v4;
  Database.reindex(collation:)(v2);
  return swift_bridgeObjectRelease();
}

uint64_t TableOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static TableOptions.withoutRowID.getter(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

uint64_t sub_23C8BFA9C(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF18C(*a1, *v1);
}

uint64_t sub_23C8BFAA8(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF1A0(*a1, *v1);
}

uint64_t sub_23C8BFAB4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_23C8A7BD0(*a1, *v2, a2);
}

uint64_t sub_23C8BFAC0(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF1A8(*a1, *v1);
}

BOOL sub_23C8BFACC(_QWORD *a1, uint64_t *a2)
{
  return sub_23C8A7BB0(a1, *a2);
}

uint64_t sub_23C8BFAD4(_QWORD *a1)
{
  return sub_23C8E8588(*a1);
}

uint64_t sub_23C8BFADC(_QWORD *a1)
{
  return sub_23C8E85D0(*a1);
}

uint64_t sub_23C8BFAE4(_QWORD *a1)
{
  return sub_23C8A7BC0(*a1);
}

uint64_t sub_23C8BFAEC(_QWORD *a1)
{
  return sub_23C8A7BB8(*a1);
}

uint64_t sub_23C8BFAF4(_QWORD *a1)
{
  return sub_23C8EF180(*a1);
}

uint64_t sub_23C8BFAFC(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF1C0(*a1, *v1);
}

uint64_t sub_23C8BFB08(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF190(*a1, *v1);
}

uint64_t sub_23C8BFB14(_QWORD *a1)
{
  _QWORD *v1;

  return sub_23C8EF198(*a1, *v1);
}

BOOL sub_23C8BFB20()
{
  uint64_t *v0;

  return sub_23C8E867C(*v0);
}

uint64_t sub_23C8BFB28(_QWORD *a1)
{
  return sub_23C8EF15C(*a1);
}

uint64_t type metadata accessor for TableDefinition()
{
  return objc_opt_self();
}

uint64_t sub_23C8BFB54(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[21];
  uint64_t v145;
  unint64_t v146;
  _QWORD v147[21];
  _BYTE __dst[163];
  char v149;
  _BYTE v150[168];
  _QWORD __src[22];

  v5 = v4;
  *(_QWORD *)__dst = 34;
  *(_QWORD *)&__dst[8] = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C7F16C0();
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  v10 = v9 + 1;
  v11 = a1;
  if (v9 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    sub_23C7F16C0();
    v8 = v119;
  }
  *(_QWORD *)(v8 + 16) = v10;
  v12 = v8 + 16 * v9;
  *(_QWORD *)(v12 + 32) = 34;
  *(_QWORD *)(v12 + 40) = 0xE100000000000000;
  v13 = v134;
  v14 = v134[5];
  if (v14)
  {
    v15 = v134[4];
    v16 = *(_QWORD *)(v8 + 24);
    v17 = v9 + 2;
    swift_bridgeObjectRetain();
    if (v10 >= v16 >> 1)
    {
      sub_23C7F16C0();
      v8 = v120;
    }
    *(_QWORD *)(v8 + 16) = v17;
    v18 = v8 + 16 * v10;
    *(_QWORD *)(v18 + 32) = v15;
    *(_QWORD *)(v18 + 40) = v14;
    v13 = v134;
  }
  v19 = *((_WORD *)v13 + 24);
  if ((v19 & 0xFF00) != 0x200)
  {
    v20 = *(_QWORD *)(v8 + 16);
    v21 = v20 + 1;
    if (v20 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v13 = v134;
      v8 = v121;
    }
    *(_QWORD *)(v8 + 16) = v21;
    v22 = v8 + 16 * v20;
    *(_QWORD *)(v22 + 32) = 0x205952414D495250;
    *(_QWORD *)(v22 + 40) = 0xEB0000000059454BLL;
    if (v19 != 5)
    {
      if (v21 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F16C0();
        v8 = v126;
      }
      *(_QWORD *)(v8 + 16) = v20 + 2;
      v23 = v8 + 16 * v21;
      *(_QWORD *)(v23 + 32) = 0x4C464E4F43204E4FLL;
      *(_QWORD *)(v23 + 40) = 0xEB00000000544349;
      __asm { BR              X10 }
    }
    if ((v19 & 0x100) != 0)
    {
      if (v21 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F16C0();
        v13 = v134;
        v8 = v127;
      }
      *(_QWORD *)(v8 + 16) = v20 + 2;
      v24 = v8 + 16 * v21;
      strcpy((char *)(v24 + 32), "AUTOINCREMENT");
      *(_WORD *)(v24 + 46) = -4864;
    }
  }
  v25 = *((unsigned __int8 *)v13 + 51);
  if ((_DWORD)v25 != 5)
  {
    if ((_DWORD)v25 != 1)
    {
      v28 = *(_QWORD *)(v8 + 16);
      if (v28 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F16C0();
        v8 = v123;
      }
      *(_QWORD *)(v8 + 16) = v28 + 1;
      v29 = v8 + 16 * v28;
      *(_QWORD *)(v29 + 32) = 0xD000000000000014;
      *(_QWORD *)(v29 + 40) = 0x800000023C91F780;
      __asm { BR              X9 }
    }
    v26 = *(_QWORD *)(v8 + 16);
    if (v26 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v13 = v134;
      v8 = v122;
    }
    *(_QWORD *)(v8 + 16) = v26 + 1;
    v27 = v8 + 16 * v26;
    *(_QWORD *)(v27 + 32) = 0x4C4C554E20544F4ELL;
    *(_QWORD *)(v27 + 40) = 0xE800000000000000;
  }
  v30 = *((unsigned __int8 *)v13 + 50);
  if ((v30 - 5) >= 2)
  {
    v32 = *(_QWORD *)(v8 + 16);
    v33 = *(_QWORD *)(v8 + 24) >> 1;
    v34 = v32 + 1;
    if ((_DWORD)v30 != 1)
    {
      if (v33 <= v32)
      {
        sub_23C7F16C0();
        v8 = v129;
      }
      *(_QWORD *)(v8 + 16) = v34;
      v36 = v8 + 16 * v32;
      *(_QWORD *)(v36 + 32) = 0xD000000000000012;
      *(_QWORD *)(v36 + 40) = 0x800000023C91F7E0;
      __asm { BR              X9 }
    }
    if (v33 <= v32)
    {
      sub_23C7F16C0();
      v13 = v134;
      v8 = v128;
    }
    v31 = v11;
    *(_QWORD *)(v8 + 16) = v34;
    v35 = v8 + 16 * v32;
    *(_QWORD *)(v35 + 32) = 0x455551494E55;
    *(_QWORD *)(v35 + 40) = 0xE600000000000000;
  }
  else
  {
    v31 = v11;
  }
  v37 = v13[7];
  v38 = *(_QWORD *)(v37 + 16);
  v141 = v31;
  if (v38)
  {
    v39 = v5;
    v40 = (const void *)(v37 + 32);
    v142 = v13[7];
    swift_bridgeObjectRetain();
    memcpy(__dst, v40, sizeof(__dst));
    v41 = v38 - 1;
    for (i = 200; ; i += 168)
    {
      __src[0] = 0;
      __src[1] = 0xE000000000000000;
      sub_23C863D2C();
      sub_23C910F5C();
      v43 = qword_25430CC40;
      swift_retain();
      if (v43 != -1)
        swift_once();
      v44 = qword_254310428;
      swift_retain();
      v45 = MEMORY[0x24BEE4AF8];
      sub_23C7E0C50();
      type metadata accessor for SQLGenerationContext();
      swift_allocObject();
      sub_23C7E30C0(v31, v44, v45);
      memcpy(v147, __dst, 0xA3uLL);
      sub_23C7EA244();
      if (v39)
      {
        swift_release();
        v51 = __src[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C863D2C();
        return v51;
      }
      swift_release();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v46 = __src[0];
      v47 = __src[1];
      v48 = *(_QWORD *)(v8 + 16);
      if (v48 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F16C0();
        v8 = v50;
      }
      *(_QWORD *)(v8 + 16) = v48 + 1;
      v49 = v8 + 16 * v48;
      *(_QWORD *)(v49 + 32) = v46;
      *(_QWORD *)(v49 + 40) = v47;
      sub_23C863D2C();
      if (!v41)
        break;
      memcpy(__dst, (const void *)(v142 + i), sizeof(__dst));
      --v41;
      v31 = v141;
    }
    swift_bridgeObjectRelease();
    v5 = 0;
    v31 = v141;
    v13 = v134;
  }
  sub_23C82CBCC((uint64_t)(v13 + 9), (uint64_t)v150, &qword_25430CF58);
  sub_23C82CBCC((uint64_t)v150, (uint64_t)__src, &qword_25430CF58);
  if (sub_23C800F80((uint64_t)__src) != 1)
  {
    v147[0] = 0;
    v147[1] = 0xE000000000000000;
    sub_23C8C364C();
    sub_23C910F5C();
    v52 = qword_25430CC40;
    swift_retain();
    if (v52 != -1)
      swift_once();
    v53 = qword_254310428;
    swift_retain();
    v54 = MEMORY[0x24BEE4AF8];
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    swift_allocObject();
    sub_23C7E30C0(v31, v53, v54);
    memcpy(__dst, __src, sizeof(__dst));
    sub_23C7EA244();
    if (v5)
    {
      swift_release();
      v51 = v147[1];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C8C364C();
      return v51;
    }
    swift_release();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v55 = v147[0];
    v56 = v147[1];
    v57 = *(_QWORD *)(v8 + 16);
    if (v57 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v8 = v130;
    }
    *(_QWORD *)(v8 + 16) = v57 + 1;
    v58 = v8 + 16 * v57;
    *(_QWORD *)(v58 + 32) = v55;
    *(_QWORD *)(v58 + 40) = v56;
    sub_23C8C364C();
  }
  v59 = v134;
  v60 = v134[31];
  v135 = v5;
  if (v60)
  {
    v61 = v134[30];
    v62 = *(_QWORD *)(v8 + 16);
    v63 = *(_QWORD *)(v8 + 24) >> 1;
    v64 = v62 + 1;
    swift_bridgeObjectRetain();
    if (v63 <= v62)
    {
      sub_23C7F16C0();
      v8 = v124;
      v63 = *(_QWORD *)(v124 + 24) >> 1;
    }
    *(_QWORD *)(v8 + 16) = v64;
    v65 = v8 + 16 * v62;
    *(_QWORD *)(v65 + 32) = 0x4554414C4C4F43;
    *(_QWORD *)(v65 + 40) = 0xE700000000000000;
    if ((uint64_t)v63 < (uint64_t)(v62 + 2))
    {
      sub_23C7F16C0();
      v8 = v125;
    }
    v59 = v134;
    *(_QWORD *)(v8 + 16) = v62 + 2;
    v66 = v8 + 16 * v64;
    *(_QWORD *)(v66 + 32) = v61;
    *(_QWORD *)(v66 + 40) = v60;
  }
  v136 = v59[8];
  v67 = *(_QWORD *)(v136 + 16);
  if (v67)
  {
    swift_bridgeObjectRetain();
    v68 = 0;
    while (1)
    {
      v69 = *(_QWORD *)(v136 + v68 + 32);
      v70 = *(_QWORD *)(v136 + v68 + 56);
      v138 = *(unsigned __int8 *)(v136 + v68 + 64);
      v139 = *(unsigned __int8 *)(v136 + v68 + 65);
      v137 = *(unsigned __int8 *)(v136 + v68 + 66);
      v72 = *(_QWORD *)(v8 + 16);
      v71 = *(_QWORD *)(v8 + 24);
      v143 = *(_QWORD *)(v136 + v68 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v72 >= v71 >> 1)
      {
        sub_23C7F16C0();
        v8 = v101;
      }
      *(_QWORD *)(v8 + 16) = v72 + 1;
      v73 = v8 + 16 * v72;
      *(_QWORD *)(v73 + 32) = 0x434E455245464552;
      *(_QWORD *)(v73 + 40) = 0xEA00000000005345;
      v140 = v67;
      if (!v70)
        break;
      *(_QWORD *)__dst = 34;
      *(_QWORD *)&__dst[8] = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      sub_23C910F5C();
      sub_23C910F5C();
      v147[0] = 34;
      v147[1] = 0xE100000000000000;
      sub_23C910F5C();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v75 = *(_QWORD *)__dst;
      v74 = *(_QWORD *)&__dst[8];
      v76 = *(_QWORD *)(v8 + 16);
      v77 = v76 + 1;
      if (v76 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F16C0();
        v8 = v102;
      }
LABEL_90:
      *(_QWORD *)(v8 + 16) = v77;
      v93 = v8 + 16 * v76;
      *(_QWORD *)(v93 + 32) = v75;
      v95 = v138;
      v94 = v139;
      *(_QWORD *)(v93 + 40) = v74;
      if ((_DWORD)v138 != 4)
      {
        if (v77 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7F16C0();
          v95 = v138;
          v8 = v103;
        }
        *(_QWORD *)(v8 + 16) = v77 + 1;
        v96 = v8 + 16 * v77;
        *(_QWORD *)(v96 + 32) = 0x54454C4544204E4FLL;
        *(_QWORD *)(v96 + 40) = 0xE900000000000045;
        __asm { BR              X8 }
      }
      if ((_DWORD)v139 != 4)
      {
        v97 = *(_QWORD *)(v8 + 16);
        if (v97 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7F16C0();
          v94 = v139;
          v8 = v104;
        }
        *(_QWORD *)(v8 + 16) = v97 + 1;
        v98 = v8 + 16 * v97;
        *(_QWORD *)(v98 + 32) = 0x5441445055204E4FLL;
        *(_QWORD *)(v98 + 40) = 0xE900000000000045;
        __asm { BR              X8 }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v137)
      {
        v99 = *(_QWORD *)(v8 + 16);
        v31 = v141;
        if (v99 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7F16C0();
          v8 = v105;
        }
        *(_QWORD *)(v8 + 16) = v99 + 1;
        v100 = v8 + 16 * v99;
        *(_QWORD *)(v100 + 32) = 0xD00000000000001DLL;
        *(_QWORD *)(v100 + 40) = 0x800000023C91F7C0;
      }
      else
      {
        v31 = v141;
      }
      v68 += 40;
      v67 = v140 - 1;
      if (v140 == 1)
      {
        swift_bridgeObjectRelease();
        v59 = v134;
        goto LABEL_106;
      }
    }
    v78 = sub_23C910E18();
    v80 = v79;
    if (v78 == sub_23C910E18() && v80 == v81)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v83 = sub_23C911A18();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v83 & 1) == 0)
      {
        v51 = v141;
        v84 = v135;
        Database.primaryKey(_:)(v69, v143, __dst);
        if (v135)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_111:
          swift_bridgeObjectRelease();
          return v51;
        }
        v85 = *(_QWORD *)__dst;
        if (__dst[16])
        {
          v86 = &unk_250D828D0;
          if (__dst[16] == 1)
            v86 = *(_OWORD **)__dst;
        }
        else
        {
          v91 = *(_QWORD *)&__dst[8];
          sub_23C7E79A8(&qword_25430DA10);
          v86 = (_OWORD *)swift_allocObject();
          v86[1] = xmmword_23C912A20;
          *((_QWORD *)v86 + 4) = v85;
          *((_QWORD *)v86 + 5) = v91;
        }
        sub_23C815E98(6);
        *(_QWORD *)__dst = 34;
        *(_QWORD *)&__dst[8] = 0xE100000000000000;
        sub_23C910F5C();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        sub_23C910F5C();
        v88 = (uint64_t)v86;
        goto LABEL_88;
      }
    }
    if (a4)
    {
      v87 = a4;
    }
    else
    {
      v51 = v141;
      Database.primaryKey(_:)(v69, v143, __dst);
      if (v135)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v51;
      }
      v89 = *(_QWORD *)__dst;
      if (__dst[16])
      {
        v87 = &unk_250D82900;
        if (__dst[16] == 1)
          v87 = *(_OWORD **)__dst;
      }
      else
      {
        v90 = *(_QWORD *)&__dst[8];
        sub_23C7E79A8(&qword_25430DA10);
        v87 = (_OWORD *)swift_allocObject();
        v87[1] = xmmword_23C912A20;
        *((_QWORD *)v87 + 4) = v89;
        *((_QWORD *)v87 + 5) = v90;
      }
    }
    *(_QWORD *)__dst = 34;
    *(_QWORD *)&__dst[8] = 0xE100000000000000;
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    v88 = (uint64_t)v87;
    v84 = v135;
LABEL_88:
    v92 = sub_23C8BBC50(v88);
    v135 = v84;
    swift_bridgeObjectRelease();
    v147[0] = v92;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v75 = *(_QWORD *)__dst;
    v74 = *(_QWORD *)&__dst[8];
    v76 = *(_QWORD *)(v8 + 16);
    v77 = v76 + 1;
    if (v76 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v8 = v106;
    }
    goto LABEL_90;
  }
LABEL_106:
  sub_23C82CBCC((uint64_t)(v59 + 32), (uint64_t)v147, &qword_25430CA58);
  sub_23C82CBCC((uint64_t)v147, (uint64_t)__dst, &qword_25430CA58);
  if (sub_23C800F80((uint64_t)__dst) != 1)
  {
    sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E7E58);
    sub_23C911634();
    v145 = 0;
    v146 = 0xE000000000000000;
    sub_23C910F5C();
    swift_retain();
    sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E7E58);
    if (qword_25430CC40 != -1)
      swift_once();
    v107 = qword_254310428;
    swift_retain();
    v108 = MEMORY[0x24BEE4AF8];
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    swift_allocObject();
    sub_23C7E30C0(v31, v107, v108);
    memcpy(v144, __dst, 0xA3uLL);
    sub_23C7EA244();
    if (v135)
    {
      swift_release();
      sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
      sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
      v51 = v146;
      swift_bridgeObjectRelease();
      goto LABEL_111;
    }
    swift_release();
    sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v109 = v145;
    v110 = v146;
    v111 = *(_QWORD *)(v8 + 16);
    v112 = *(_QWORD *)(v8 + 24) >> 1;
    v113 = v111 + 1;
    if (v112 <= v111)
    {
      sub_23C7F16C0();
      v8 = v131;
      v112 = *(_QWORD *)(v131 + 24) >> 1;
    }
    *(_QWORD *)(v8 + 16) = v113;
    v114 = v8 + 16 * v111;
    *(_QWORD *)(v114 + 32) = v109;
    *(_QWORD *)(v114 + 40) = v110;
    if (v149)
      v115 = 0x4445524F5453;
    else
      v115 = 0x4C415554524956;
    if (v149)
      v116 = 0xE600000000000000;
    else
      v116 = 0xE700000000000000;
    if (v112 <= v113)
    {
      sub_23C7F16C0();
      v8 = v132;
    }
    *(_QWORD *)(v8 + 16) = v111 + 2;
    v117 = v8 + 16 * v113;
    *(_QWORD *)(v117 + 32) = v115;
    *(_QWORD *)(v117 + 40) = v116;
    sub_23C8C3584((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
  }
  v144[0] = v8;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v51 = sub_23C910E3C();
  swift_bridgeObjectRelease();
  return v51;
}

void TableDefinition.autoIncrementedPrimaryKey(_:onConflict:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  __int16 v3;
  uint64_t v4;

  v3 = *a3;
  TableDefinition.column(_:_:)();
  *(_WORD *)(v4 + 48) = v3 | 0x100;
}

void TableDefinition.column(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C7E684C();
  v1 = sub_23C7DF090();
  sub_23C7DFD28(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  sub_23C7DBCC8();
  swift_retain();
  sub_23C7DC46C();
  sub_23C7F13D4();
  sub_23C8C405C();
  sub_23C8C408C();
  *(_QWORD *)(v9 + 32) = v0;
  *(_BYTE *)(v9 + 40) = 0;
  sub_23C7E0914();
}

uint64_t ColumnDefinition.primaryKey(onConflict:autoincrement:)(unsigned __int8 *a1, char a2)
{
  uint64_t v2;
  __int16 v3;

  if ((a2 & 1) != 0)
    v3 = 256;
  else
    v3 = 0;
  *(_WORD *)(v2 + 48) = v3 | *a1;
  return sub_23C7DC47C();
}

Swift::Void __swiftcall TableDefinition.column(sql:)(Swift::String sql)
{
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v4[23];

  sub_23C7E3418();
  sub_23C7E79A8(&qword_25430DA08);
  v1 = (__n128 *)sub_23C7E41DC();
  sub_23C7E9A00(v1, (__n128)xmmword_23C912A20);
  v4[2] = MEMORY[0x24BEE4AF8];
  v4[3] = MEMORY[0x24BEE4B00];
  v2 = sub_23C7F96B0(v4);
  sub_23C7E4520((uint64_t)v2);
  sub_23C7DBBB0();
  sub_23C7F13D4();
  sub_23C8C405C();
  sub_23C8C408C();
  *(_QWORD *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 40) = 1;
  sub_23C7E8684();
}

Swift::Void __swiftcall TableDefinition.column(literal:)(GRDBInternal::SQL literal)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)literal.elements._rawValue;
  sub_23C7DC46C();
  sub_23C7F13D4();
  sub_23C8C406C(*(_QWORD *)(v1 + 40));
  sub_23C7F1600();
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v4 + 16) = v2 + 1;
  v5 = v4 + 16 * v2;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = 1;
  sub_23C7DB3A0();
}

Swift::Void __swiftcall TableDefinition.primaryKey(_:onConflict:)(Swift::OpaquePointer _, GRDBInternal::Database::ConflictResolution_optional onConflict)
{
  uint64_t v2;
  char v3;

  if (*(_QWORD *)(v2 + 48))
  {
    sub_23C9117B4();
    __break(1u);
  }
  else
  {
    v3 = *(_BYTE *)onConflict.value;
    *(Swift::OpaquePointer *)(v2 + 48) = _;
    *(_BYTE *)(v2 + 56) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall TableDefinition.uniqueKey(_:onConflict:)(Swift::OpaquePointer _, GRDBInternal::Database::ConflictResolution_optional onConflict)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_BYTE *)onConflict.value;
  swift_bridgeObjectRetain();
  sub_23C7F13F8();
  sub_23C8C406C(*(_QWORD *)(v2 + 64));
  sub_23C7F1624();
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v6 + 16) = v3 + 1;
  v7 = v6 + 16 * v3;
  *(Swift::OpaquePointer *)(v7 + 32) = _;
  *(_BYTE *)(v7 + 40) = v5;
}

Swift::Void __swiftcall TableDefinition.foreignKey(_:references:columns:onDelete:onUpdate:deferred:)(Swift::OpaquePointer _, Swift::String references, Swift::OpaquePointer_optional columns, GRDBInternal::Database::ForeignKeyAction_optional onDelete, GRDBInternal::Database::ForeignKeyAction_optional onUpdate, Swift::Bool deferred)
{
  uint64_t v6;
  uint64_t v7;

  sub_23C7E9710();
  swift_bridgeObjectRetain();
  sub_23C7DBBB8();
  sub_23C7E0808();
  sub_23C7F1404();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 16);
  sub_23C7F1630();
  sub_23C7EE59C(v7 + 1);
}

void *TableDefinition.check(_:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _BYTE v4[168];

  v1 = a1[3];
  sub_23C7E7E34(a1, v1);
  sub_23C7E69D4();
  sub_23C7F12E4();
  sub_23C7E1C58();
  v2 = (void *)sub_23C7DF95C(v1 + 1);
  return sub_23C7E3190(v2, v4);
}

Swift::Void __swiftcall TableDefinition.check(sql:)(Swift::String sql)
{
  uint64_t v1;
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;

  sub_23C7E3418();
  sub_23C7E79A8(&qword_25430DA08);
  v2 = (__n128 *)sub_23C7E41DC();
  sub_23C7E9A00(v2, (__n128)xmmword_23C912A20);
  v14 = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4B00];
  v3 = sub_23C7F96B0(v13);
  sub_23C7E4520((uint64_t)v3);
  v35 = v2;
  v4 = sub_23C80A840((uint64_t)&v35);
  sub_23C8C4078(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13[0], v13[1], v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    (char)v35);
  sub_23C7DBBB0();
  sub_23C7F12E4();
  sub_23C7E1C58();
  sub_23C7E1900(v1 + 1);
}

Swift::Void __swiftcall TableDefinition.constraint(sql:)(Swift::String sql)
{
  uint64_t v1;
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[23];

  sub_23C7E3418();
  sub_23C7E79A8(&qword_25430DA08);
  v2 = (__n128 *)sub_23C7E41DC();
  sub_23C7E9A00(v2, (__n128)xmmword_23C912A20);
  v6[2] = MEMORY[0x24BEE4AF8];
  v6[3] = MEMORY[0x24BEE4B00];
  v3 = sub_23C7F96B0(v6);
  sub_23C7E4520((uint64_t)v3);
  sub_23C7DBBB0();
  sub_23C7F1428();
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 16);
  sub_23C7F1654();
  v5 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  *(_QWORD *)(v5 + 8 * v4 + 32) = v2;
  sub_23C7E8684();
}

Swift::Void __swiftcall TableDefinition.constraint(literal:)(GRDBInternal::SQL literal)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)literal.elements._rawValue;
  sub_23C7DC46C();
  sub_23C7F1428();
  sub_23C8C406C(*(_QWORD *)(v1 + 88));
  sub_23C7F1654();
  v4 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v4 + 16) = v2 + 1;
  *(_QWORD *)(v4 + 8 * v2 + 32) = v3;
  sub_23C7DB3A0();
}

uint64_t sub_23C8C15C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[168];
  _QWORD __src[27];
  _QWORD __dst[27];

  if (*(_BYTE *)(v4 + 50) == 6)
  {
    v9 = *a3;
    __dst[0] = a1;
    __dst[1] = a2;
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    v11 = *(_QWORD *)(v4 + 16);
    v10 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v12 = __dst[0];
    v13 = __dst[1];
    sub_23C7E79A8(&qword_25430DA10);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v14 + 32) = v11;
    *(_QWORD *)(v14 + 40) = v10;
    sub_23C80A96C((uint64_t)v15);
    __src[0] = v12;
    __src[1] = v13;
    __src[2] = a1;
    __src[3] = a2;
    __src[4] = v14;
    __src[5] = v9;
    sub_23C82CBCC((uint64_t)v15, (uint64_t)&__src[6], &qword_25430CF58);
    memcpy(__dst, __src, 0xD3uLL);
    nullsub_1(__dst);
    sub_23C82CBCC((uint64_t)__dst, a4, &qword_25430B6F8);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_23C8C357C(__dst);
    return sub_23C82CBCC((uint64_t)__dst, a4, &qword_25430B6F8);
  }
}

uint64_t TableDefinition.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableDefinition.__deallocating_deinit()
{
  TableDefinition.deinit();
  return swift_deallocClassInstance();
}

void TableAlteration.add(column:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C7E684C();
  v1 = sub_23C7DF090();
  sub_23C7DFD28(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  sub_23C7DBCC8();
  swift_retain();
  sub_23C7DC46C();
  sub_23C7F144C();
  sub_23C7DC638();
  sub_23C7DB538();
  *(_QWORD *)(v9 + 32) = v0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_BYTE *)(v9 + 64) = 0;
  sub_23C7E0914();
}

Swift::Void __swiftcall TableAlteration.addColumn(sql:)(Swift::String sql)
{
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v4[23];

  sub_23C7E3418();
  sub_23C7E79A8(&qword_25430DA08);
  v1 = (__n128 *)sub_23C7E41DC();
  sub_23C7E9A00(v1, (__n128)xmmword_23C912A20);
  v4[2] = MEMORY[0x24BEE4AF8];
  v4[3] = MEMORY[0x24BEE4B00];
  v2 = sub_23C7F96B0(v4);
  sub_23C7E4520((uint64_t)v2);
  sub_23C7DBBB0();
  sub_23C7F144C();
  sub_23C7DC638();
  sub_23C7DB538();
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 64) = 1;
  sub_23C7E8684();
}

Swift::Void __swiftcall TableAlteration.addColumn(literal:)(GRDBInternal::SQL literal)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)literal.elements._rawValue;
  sub_23C7DC46C();
  sub_23C7F144C();
  sub_23C8C406C(*(_QWORD *)(v1 + 32));
  sub_23C7F1678();
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v4 + 16) = v2 + 1;
  v5 = v4 + 40 * v2;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = 1;
  sub_23C7DB3A0();
}

void sub_23C8C18D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F144C();
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16);
  sub_23C7F1678();
  v10 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v10 + 16) = v9 + 1;
  v11 = v10 + 40 * v9;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  *(_QWORD *)(v11 + 48) = a3;
  *(_QWORD *)(v11 + 56) = a4;
  *(_BYTE *)(v11 + 64) = 2;
}

void sub_23C8C1964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_23C7F144C();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  sub_23C7F1678();
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = v6 + 40 * v5;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 64) = 3;
}

uint64_t TableAlteration.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableAlteration.__deallocating_deinit()
{
  TableAlteration.deinit();
  return swift_deallocClassInstance();
}

BOOL static ColumnDefinition.GeneratedColumnQualification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ColumnDefinition.GeneratedColumnQualification.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t ColumnDefinition.GeneratedColumnQualification.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

uint64_t sub_23C8C1AAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[168];
  _BYTE v11[176];

  v6 = *a3;
  v7 = a3[1];
  *(_DWORD *)(v3 + 48) = 84214272;
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 56) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 64) = v8;
  sub_23C80A96C((uint64_t)v10);
  sub_23C82CBCC((uint64_t)v10, v3 + 72, &qword_25430CF58);
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  sub_23C8C3390((uint64_t)v11);
  sub_23C82CBCC((uint64_t)v11, v3 + 256, &qword_25430CA58);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  return v3;
}

uint64_t ColumnDefinition.notNull(onConflict:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;

  v2 = *a1;
  if (v2 == 5)
    LOBYTE(v2) = 1;
  *(_BYTE *)(v1 + 51) = v2;
  return sub_23C7DC47C();
}

uint64_t ColumnDefinition.unique(onConflict:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;

  v2 = *a1;
  if (v2 == 5)
    LOBYTE(v2) = 1;
  *(_BYTE *)(v1 + 50) = v2;
  return sub_23C7DC47C();
}

uint64_t ColumnDefinition.indexed()()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 50) == 5)
    *(_BYTE *)(v0 + 50) = 6;
  return swift_retain();
}

uint64_t ColumnDefinition.check(_:)(void (*a1)(_QWORD *__return_ptr, _QWORD *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[3];
  uint64_t v8;
  _QWORD v9[21];

  v3 = *(_QWORD *)(v1 + 24);
  v9[0] = *(_QWORD *)(v1 + 16);
  v9[1] = v3;
  sub_23C7DBCC8();
  a1(v7, v9);
  swift_bridgeObjectRelease();
  v4 = v8;
  sub_23C7E7E34(v7, v8);
  sub_23C7E69D4();
  sub_23C7F12E4();
  sub_23C7E1C58();
  v5 = (void *)sub_23C7DF95C(v4 + 1);
  sub_23C7E3190(v5, v9);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v7);
  return sub_23C7DB634();
}

uint64_t ColumnDefinition.check(sql:)()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;

  sub_23C7E3418();
  sub_23C7E79A8(&qword_25430DA08);
  v1 = (__n128 *)sub_23C7E41DC();
  sub_23C7E9A00(v1, (__n128)xmmword_23C912A20);
  v14 = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4B00];
  v2 = sub_23C7F96B0(v13);
  sub_23C7E4520((uint64_t)v2);
  v35 = v1;
  v3 = sub_23C80A840((uint64_t)&v35);
  sub_23C8C4078(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13[0], v13[1], v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    (char)v35);
  sub_23C7DBBB0();
  sub_23C7F12E4();
  sub_23C7E1C58();
  sub_23C7E1900(v0 + 1);
  return sub_23C7DB634();
}

uint64_t ColumnDefinition.defaults(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[21];
  _BYTE v7[168];

  v2 = v1;
  v4 = a1[3];
  v3 = a1[4];
  sub_23C7E7E34(a1, v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v6, v4);
  nullsub_1(v6);
  sub_23C82CBCC(v2 + 72, (uint64_t)v7, &qword_25430CF58);
  sub_23C82CBCC((uint64_t)v6, v2 + 72, &qword_25430CF58);
  sub_23C8C364C();
  return sub_23C7DB634();
}

uint64_t ColumnDefinition.defaults(sql:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[23];
  _QWORD v9[21];
  _BYTE v10[168];
  _BYTE v11[168];
  _BYTE v12[168];

  sub_23C7E79A8(&qword_25430DA08);
  v5 = sub_23C7E41DC();
  *(_OWORD *)(v5 + 16) = xmmword_23C912A20;
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = MEMORY[0x24BEE4AF8];
  v8[3] = MEMORY[0x24BEE4B00];
  v6 = sub_23C7F96B0(v8);
  sub_23C7E4520((uint64_t)v6);
  v9[0] = v5;
  sub_23C80A840((uint64_t)v9);
  sub_23C800B48(v9, v10);
  sub_23C7E3190(v11, v10);
  nullsub_1(v11);
  sub_23C82CBCC(v2 + 72, (uint64_t)v12, &qword_25430CF58);
  sub_23C82CBCC((uint64_t)v11, v2 + 72, &qword_25430CF58);
  swift_bridgeObjectRetain();
  sub_23C8C364C();
  return swift_retain();
}

uint64_t ColumnDefinition.collate(_:)(uint64_t *a1)
{
  sub_23C7DF450(a1[1], *a1);
  swift_bridgeObjectRelease();
  return sub_23C7E6D94();
}

uint64_t ColumnDefinition.collate(_:)(uint64_t a1)
{
  sub_23C7DF450(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  return sub_23C7E6D94();
}

uint64_t ColumnDefinition.references(_:column:onDelete:onUpdate:deferred:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E9710();
  swift_bridgeObjectRetain();
  sub_23C7DBBB0();
  sub_23C7F1470();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
  sub_23C7F169C();
  sub_23C7EE59C(v1 + 1);
  return swift_retain();
}

uint64_t ColumnDefinition.deinit()
{
  uint64_t v0;
  _BYTE v2[168];
  _BYTE v3[176];

  sub_23C7EE024();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C82CBCC(v0 + 72, (uint64_t)v2, &qword_25430CF58);
  sub_23C8C364C();
  swift_bridgeObjectRelease();
  sub_23C82CBCC(v0 + 256, (uint64_t)v3, &qword_25430CA58);
  sub_23C8C3584((uint64_t)v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
  return v0;
}

uint64_t ColumnDefinition.__deallocating_deinit()
{
  ColumnDefinition.deinit();
  return swift_deallocClassInstance();
}

uint64_t IndexOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

GRDBInternal::IndexOptions __swiftcall IndexOptions.init(rawValue:)(GRDBInternal::IndexOptions rawValue)
{
  GRDBInternal::IndexOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static IndexOptions.ifNotExists.getter(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

void static IndexOptions.unique.getter(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

GRDBInternal::IndexOptions sub_23C8C200C(Swift::Int *a1)
{
  return IndexOptions.init(rawValue:)(*a1);
}

void sub_23C8C2014(_QWORD *a1@<X8>)
{
  sub_23C8E8564(a1);
}

uint64_t sub_23C8C2020@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_23C8A6D28(*a1, *v2, a2);
}

void sub_23C8C202C(_QWORD *a1@<X8>)
{
  sub_23C8E8574(a1);
}

BOOL sub_23C8C2038(_QWORD *a1, uint64_t *a2)
{
  return sub_23C8A6D40(a1, *a2);
}

void sub_23C8C2040(uint64_t *a1)
{
  sub_23C8A6D98(*a1);
}

void sub_23C8C2048(uint64_t *a1)
{
  sub_23C8A6DB4(*a1);
}

uint64_t sub_23C8C2050(uint64_t *a1)
{
  return sub_23C8E8604(*a1);
}

void sub_23C8C2058(_QWORD *a1@<X8>)
{
  sub_23C8E8624(a1);
}

BOOL sub_23C8C2064(uint64_t *a1)
{
  uint64_t *v1;

  return sub_23C8E8640(*a1, *v1);
}

BOOL sub_23C8C2070(uint64_t *a1)
{
  uint64_t *v1;

  return sub_23C8E864C(*a1, *v1);
}

BOOL sub_23C8C207C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_23C8E8670(*a1, *v1);
}

uint64_t sub_23C8C2088(uint64_t *a1)
{
  return sub_23C8E8694(*a1);
}

GRDBInternal::IndexOptions sub_23C8C2090@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  GRDBInternal::IndexOptions result;

  result.rawValue = IndexOptions.init(rawValue:)(*a1).rawValue;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_23C8C20B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IndexOptions.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for TableAlteration()
{
  return objc_opt_self();
}

uint64_t sub_23C8C20FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v10 = *(_OWORD *)(a1 + 176);
  v11 = *(_OWORD *)(a1 + 160);
  v6 = *(unsigned __int16 *)(a1 + 208) | (*(unsigned __int8 *)(a1 + 210) << 16);
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_QWORD *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C8C3688(v18, v17, v16, v2, v3, v4, v5, v15, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((unint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v7,
    v8,
    v6,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
  return a1;
}

uint64_t type metadata accessor for ColumnDefinition()
{
  return objc_opt_self();
}

unint64_t sub_23C8C2220()
{
  unint64_t result;

  result = qword_256BCD860;
  if (!qword_256BCD860)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for TableOptions, &type metadata for TableOptions);
    atomic_store(result, (unint64_t *)&qword_256BCD860);
  }
  return result;
}

unint64_t sub_23C8C2260()
{
  unint64_t result;

  result = qword_256BCD868;
  if (!qword_256BCD868)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for TableOptions, &type metadata for TableOptions);
    atomic_store(result, (unint64_t *)&qword_256BCD868);
  }
  return result;
}

unint64_t sub_23C8C22A0()
{
  unint64_t result;

  result = qword_25430CA50;
  if (!qword_25430CA50)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for TableOptions, &type metadata for TableOptions);
    atomic_store(result, (unint64_t *)&qword_25430CA50);
  }
  return result;
}

unint64_t sub_23C8C22E0()
{
  unint64_t result;

  result = qword_25430CA70;
  if (!qword_25430CA70)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for TableOptions, &type metadata for TableOptions);
    atomic_store(result, (unint64_t *)&qword_25430CA70);
  }
  return result;
}

unint64_t sub_23C8C2320()
{
  unint64_t result;

  result = qword_256BCD870;
  if (!qword_256BCD870)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for ColumnDefinition.GeneratedColumnQualification, &type metadata for ColumnDefinition.GeneratedColumnQualification);
    atomic_store(result, (unint64_t *)&qword_256BCD870);
  }
  return result;
}

unint64_t sub_23C8C2360()
{
  unint64_t result;

  result = qword_256BCD878;
  if (!qword_256BCD878)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for IndexOptions, &type metadata for IndexOptions);
    atomic_store(result, (unint64_t *)&qword_256BCD878);
  }
  return result;
}

unint64_t sub_23C8C23A0()
{
  unint64_t result;

  result = qword_256BCD880[0];
  if (!qword_256BCD880[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for IndexOptions, &type metadata for IndexOptions);
    atomic_store(result, qword_256BCD880);
  }
  return result;
}

unint64_t sub_23C8C23E0()
{
  unint64_t result;

  result = qword_25430B620;
  if (!qword_25430B620)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for IndexOptions, &type metadata for IndexOptions);
    atomic_store(result, (unint64_t *)&qword_25430B620);
  }
  return result;
}

unint64_t sub_23C8C2420()
{
  unint64_t result;

  result = qword_25430B628;
  if (!qword_25430B628)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for IndexOptions, &type metadata for IndexOptions);
    atomic_store(result, (unint64_t *)&qword_25430B628);
  }
  return result;
}

void type metadata accessor for TableOptions()
{
  sub_23C7DFB90();
}

uint64_t method lookup function for TableDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for TableAlteration()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for ColumnDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for ColumnDefinition.GeneratedColumnQualification(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8C24D8 + 4 * byte_23C919366[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8C250C + 4 * byte_23C919361[v4]))();
}

uint64_t sub_23C8C250C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8C2514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8C251CLL);
  return result;
}

uint64_t sub_23C8C2528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8C2530);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8C2534(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8C253C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ColumnDefinition.GeneratedColumnQualification()
{
  sub_23C7DFB90();
}

void type metadata accessor for IndexOptions()
{
  sub_23C7DFB90();
}

uint64_t initializeWithCopy for ColumnDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColumnDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t assignWithTake for ColumnDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

ValueMetadata *type metadata accessor for ColumnDefinition.ForeignKeyConstraint()
{
  return &type metadata for ColumnDefinition.ForeignKeyConstraint;
}

uint64_t sub_23C8C2694(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 5)
      v7 = v6 - 4;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C8C26E4 + 4 * byte_23C91936B[v4]))();
  }
}

uint64_t sub_23C8C273C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23C8C2790 + 4 * byte_23C919375[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23C8C27C4 + 4 * byte_23C919370[v5]))();
}

uint64_t sub_23C8C27C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8C27CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8C27D4);
  return result;
}

uint64_t sub_23C8C27E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8C27E8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23C8C27EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8C27F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8C2800(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 5)
    return v1 - 4;
  else
    return 0;
}

_BYTE *sub_23C8C2814(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 4;
  return result;
}

void type metadata accessor for ColumnDefinition.Index()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8C2830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  switch(a5)
  {
    case 0:
      result = swift_retain();
      break;
    case 1:
    case 3:
      goto LABEL_3;
    case 2:
      swift_bridgeObjectRetain();
LABEL_3:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for TableAlteration.TableAlterationKind(uint64_t a1)
{
  return sub_23C8C28A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_23C8C28A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  switch(a5)
  {
    case 0:
      result = swift_release();
      break;
    case 1:
    case 3:
      goto LABEL_3;
    case 2:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for TableAlteration.TableAlterationKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C8C2830(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TableAlteration.TableAlterationKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C8C2830(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_23C8C28A8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TableAlteration.TableAlterationKind(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_23C8C28A8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableAlteration.TableAlterationKind(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableAlteration.TableAlterationKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableAlteration.TableAlterationKind()
{
  return &type metadata for TableAlteration.TableAlterationKind;
}

uint64_t destroy for TableDefinition.ForeignKeyConstraint()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t assignWithTake for TableDefinition.ForeignKeyConstraint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableDefinition.ForeignKeyConstraint(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 35))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableDefinition.ForeignKeyConstraint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableDefinition.ForeignKeyConstraint()
{
  return &type metadata for TableDefinition.ForeignKeyConstraint;
}

uint64_t initializeBufferWithCopyOfBuffer for TableDefinition.ColumnItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23C8C2D1C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_23C8C2D1C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t destroy for TableDefinition.ColumnItem(uint64_t a1)
{
  return sub_23C8C2D38(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_23C8C2D38(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_release();
}

uint64_t assignWithCopy for TableDefinition.ColumnItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23C8C2D1C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_23C8C2D38(v5, v6);
  return a1;
}

uint64_t assignWithTake for TableDefinition.ColumnItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_23C8C2D38(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableDefinition.ColumnItem(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableDefinition.ColumnItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C8C2E54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_23C8C2E5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TableDefinition.ColumnItem()
{
  return &type metadata for TableDefinition.ColumnItem;
}

uint64_t destroy for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1)
{
  return sub_23C7E6F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
}

uint64_t initializeWithCopy for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a2 + 128);
  v22 = *(_QWORD *)(a2 + 136);
  v25 = *(unsigned __int8 *)(a2 + 162);
  v26 = *(unsigned __int16 *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 144);
  v24 = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23C7E7E58(*(_QWORD *)a2, v4, v5, v6, v7, v8, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23,
    v24,
    v26 | (v25 << 16));
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 120) = v20;
  *(_QWORD *)(a1 + 128) = v21;
  *(_QWORD *)(a1 + 136) = v22;
  *(_QWORD *)(a1 + 144) = v23;
  *(_QWORD *)(a1 + 152) = v24;
  *(_BYTE *)(a1 + 162) = v25;
  *(_WORD *)(a1 + 160) = v26;
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  return a1;
}

uint64_t assignWithCopy for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v35 = *(_QWORD *)(a2 + 112);
  v36 = *(_QWORD *)(a2 + 120);
  v37 = *(_QWORD *)(a2 + 128);
  v38 = *(_QWORD *)(a2 + 136);
  v41 = *(unsigned __int16 *)(a2 + 160);
  v42 = *(unsigned __int8 *)(a2 + 162);
  v39 = *(_QWORD *)(a2 + 144);
  v40 = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23C7E7E58(*(_QWORD *)a2, v10, v4, v5, v6, v7, v8, v11, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144),
    *(_QWORD *)(a2 + 152),
    v41 | (v42 << 16));
  v12 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v11;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v23 = *(_OWORD *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v25 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_WORD *)(a1 + 160) = v41;
  *(_BYTE *)(a1 + 162) = v42;
  v26 = *(_QWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  sub_23C7E6F90(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    v27,
    v12);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  return a1;
}

void *initializeWithTake for ColumnDefinition.GeneratedColumnConstraint(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA4uLL);
}

uint64_t assignWithTake for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = *(_WORD *)(a2 + 160);
  v5 = *(_BYTE *)(a2 + 162);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 152);
  v21 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v22;
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v23;
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v24;
  v25 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v25;
  v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v26;
  *(_BYTE *)(a1 + 162) = v5;
  *(_WORD *)(a1 + 160) = v4;
  sub_23C7E6F90(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    v20,
    v21);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 164))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 64) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ColumnDefinition.GeneratedColumnConstraint(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 164) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 147) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 164) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnDefinition.GeneratedColumnConstraint()
{
  return &type metadata for ColumnDefinition.GeneratedColumnConstraint;
}

double sub_23C8C3390(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  return result;
}

uint64_t sub_23C8C33C0(uint64_t a1)
{
  sub_23C8C3438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(unsigned __int16 *)(a1 + 208) | (*(unsigned __int8 *)(a1 + 210) << 16));
  return a1;
}

void sub_23C8C3438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C8C3688(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25,
      a26,
      a27,
      (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E6F90);
  }
}

void sub_23C8C357C(void *a1)
{
  bzero(a1, 0xD3uLL);
}

void sub_23C8C3584(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_23C8C35EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_DWORD *)(a1 + 160),
    a2);
  sub_23C7E4C90();
}

void sub_23C8C35EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22;

  v22 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v22 || (a21 & 0xFE7E00) != 0)
    sub_23C7E8C00(a1, a2, a3, a4, a5, a6, a22);
  else
    sub_23C7E59D0();
}

void sub_23C8C364C()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_23C7DF394();
  v22 = v0;
  sub_23C7DA514();
  sub_23C8C3688(v1, v8, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  sub_23C7E4C90();
}

void sub_23C8C3688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22;

  v22 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v22 || (a21 & 0xFE7E00) != 0)
    sub_23C7E8C00(a1, a2, a3, a4, a5, a6, a22);
  else
    sub_23C7E59D0();
}

uint64_t sub_23C8C36EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v10 = *(_OWORD *)(a1 + 176);
  v11 = *(_OWORD *)(a1 + 160);
  v6 = *(unsigned __int16 *)(a1 + 208) | (*(unsigned __int8 *)(a1 + 210) << 16);
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_QWORD *)(a1 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C8C3688(v18, v17, v16, v2, v3, v4, v5, v15, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((unint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v7,
    v8,
    v6,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E7E58);
  return a1;
}

uint64_t destroy for IndexDefinition(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 152);
  if (v3 >> 1 != 0xFFFFFFFF
    || v4 > 1
    || (*(_WORD *)(a1 + 208) & 0x7E00 | (*(unsigned __int8 *)(a1 + 210) << 16) & 0xFE7FFF) != 0)
  {
    return sub_23C7E6F90(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v3, *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v4, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192),
             *(_QWORD *)(a1 + 200),
             *(unsigned __int16 *)(a1 + 208) | (*(unsigned __int8 *)(a1 + 210) << 16));
  }
  return result;
}

uint64_t initializeWithCopy for IndexDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(unsigned __int16 *)(a2 + 208) | (*(unsigned __int8 *)(a2 + 210) << 16);
  v9 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v7 >> 1 != 0xFFFFFFFF || v9 > 1;
  if (v10 || (v8 & 0xFE7E00) != 0)
  {
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 72);
    v14 = *(_QWORD *)(a2 + 80);
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_QWORD *)(a2 + 96);
    v17 = *(_QWORD *)(a2 + 104);
    v26 = *(_QWORD *)(a2 + 120);
    v27 = *(_QWORD *)(a2 + 128);
    v28 = *(_QWORD *)(a2 + 136);
    v29 = *(_QWORD *)(a2 + 144);
    v30 = *(_QWORD *)(a2 + 160);
    v31 = *(_QWORD *)(a2 + 168);
    v32 = *(_QWORD *)(a2 + 176);
    v33 = *(_QWORD *)(a2 + 184);
    v34 = *(_QWORD *)(a2 + 192);
    v35 = *(_QWORD *)(a2 + 200);
    v23 = v9;
    v22 = v7;
    v18 = *(_QWORD *)(a2 + 64);
    v24 = v7;
    v25 = v9;
    v19 = v16;
    v20 = v17;
    sub_23C7E7E58(v11, v12, v18, v13, v14, v15, v16, v17, v22, v26, v27, v28, v29, v23, v30, v31, v32, v33, v34,
      v35,
      v8);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 120) = v26;
    *(_QWORD *)(a1 + 128) = v27;
    *(_QWORD *)(a1 + 136) = v28;
    *(_QWORD *)(a1 + 144) = v29;
    *(_QWORD *)(a1 + 152) = v25;
    *(_QWORD *)(a1 + 160) = v30;
    *(_QWORD *)(a1 + 168) = v31;
    *(_QWORD *)(a1 + 176) = v32;
    *(_QWORD *)(a1 + 184) = v33;
    *(_QWORD *)(a1 + 192) = v34;
    *(_QWORD *)(a1 + 200) = v35;
    *(_BYTE *)(a1 + 210) = BYTE2(v8);
    *(_WORD *)(a1 + 208) = v8;
  }
  else
  {
    memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0xA3uLL);
  }
  return a1;
}

uint64_t assignWithCopy for IndexDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 152);
  v6 = *(unsigned __int16 *)(a2 + 208) | (*(unsigned __int8 *)(a2 + 210) << 16);
  v8 = v4 >> 1 == 0xFFFFFFFF && v5 < 2;
  if ((v6 & 0xFE7E00) != 0)
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 112) >> 1 != 0xFFFFFFFFLL || *(_QWORD *)(a1 + 152) > 1uLL;
  if (v9 || *(_WORD *)(a1 + 208) & 0x7E00 | (*(unsigned __int8 *)(a1 + 210) << 16) & 0xFE7FFF)
  {
    if (!v8)
    {
      v17 = *(_QWORD *)(a2 + 48);
      v18 = *(_QWORD *)(a2 + 56);
      v19 = *(_QWORD *)(a2 + 72);
      v20 = *(_QWORD *)(a2 + 80);
      v21 = *(_QWORD *)(a2 + 88);
      v22 = *(_QWORD *)(a2 + 104);
      v44 = v22;
      v46 = *(_QWORD *)(a2 + 96);
      v48 = *(_QWORD *)(a2 + 120);
      v50 = *(_QWORD *)(a2 + 128);
      v52 = *(_QWORD *)(a2 + 136);
      v54 = *(_QWORD *)(a2 + 144);
      v56 = *(_QWORD *)(a2 + 160);
      v58 = *(_QWORD *)(a2 + 168);
      v60 = *(_QWORD *)(a2 + 176);
      v62 = *(_QWORD *)(a2 + 184);
      v64 = *(_QWORD *)(a2 + 192);
      v66 = *(_QWORD *)(a2 + 200);
      v23 = *(_QWORD *)(a2 + 64);
      sub_23C7E7E58(v17, v18, v23, v19, v20, v21, v46, v22, v4, v48, v50, v52, v54, v5, v56, v58, v60, v62, v64,
        v66,
        v6);
      v24 = *(unsigned __int16 *)(a1 + 208);
      v25 = *(_QWORD *)(a1 + 48);
      v26 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v17;
      *(_QWORD *)(a1 + 56) = v18;
      v27 = *(_QWORD *)(a1 + 64);
      v28 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 72) = v19;
      v29 = *(_QWORD *)(a1 + 80);
      v30 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v20;
      *(_QWORD *)(a1 + 88) = v21;
      v31 = *(_QWORD *)(a1 + 96);
      v32 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) = v46;
      v33 = *(_OWORD *)(a1 + 112);
      v34 = *(_OWORD *)(a1 + 128);
      v35 = *(_OWORD *)(a1 + 144);
      v36 = *(_OWORD *)(a1 + 160);
      v37 = *(_OWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 104) = v44;
      *(_QWORD *)(a1 + 112) = v4;
      *(_QWORD *)(a1 + 120) = v48;
      *(_QWORD *)(a1 + 128) = v50;
      v38 = *(_QWORD *)(a1 + 192);
      v39 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 136) = v52;
      *(_QWORD *)(a1 + 144) = v54;
      *(_QWORD *)(a1 + 152) = v5;
      *(_QWORD *)(a1 + 160) = v56;
      *(_QWORD *)(a1 + 168) = v58;
      *(_QWORD *)(a1 + 176) = v60;
      *(_QWORD *)(a1 + 184) = v62;
      *(_QWORD *)(a1 + 192) = v64;
      *(_QWORD *)(a1 + 200) = v66;
      *(_WORD *)(a1 + 208) = v6;
      v40 = *(unsigned __int8 *)(a1 + 210);
      *(_BYTE *)(a1 + 210) = BYTE2(v6);
      sub_23C7E6F90(v25, v26, v27, v28, v29, v30, v31, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38,
        v39,
        v24 | (v40 << 16));
      return a1;
    }
    sub_23C8C3DAC(a1 + 48);
    goto LABEL_18;
  }
  if (v8)
  {
LABEL_18:
    memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0xA3uLL);
    return a1;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 104);
  v43 = v15;
  v45 = *(_QWORD *)(a2 + 96);
  v47 = *(_QWORD *)(a2 + 120);
  v49 = *(_QWORD *)(a2 + 128);
  v51 = *(_QWORD *)(a2 + 136);
  v53 = *(_QWORD *)(a2 + 144);
  v55 = *(_QWORD *)(a2 + 160);
  v57 = *(_QWORD *)(a2 + 168);
  v59 = *(_QWORD *)(a2 + 176);
  v61 = *(_QWORD *)(a2 + 184);
  v63 = *(_QWORD *)(a2 + 192);
  v65 = *(_QWORD *)(a2 + 200);
  v42 = *(_OWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 64);
  sub_23C7E7E58(v10, v11, v16, v12, v13, v14, v45, v15, v4, v47, v42, *((uint64_t *)&v42 + 1), v53, v5, v55, v57, v59, v61, v63,
    v65,
    v6);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v45;
  *(_QWORD *)(a1 + 104) = v43;
  *(_QWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 120) = v47;
  *(_QWORD *)(a1 + 128) = v49;
  *(_QWORD *)(a1 + 136) = v51;
  *(_QWORD *)(a1 + 144) = v53;
  *(_QWORD *)(a1 + 152) = v5;
  *(_QWORD *)(a1 + 160) = v55;
  *(_QWORD *)(a1 + 168) = v57;
  *(_QWORD *)(a1 + 176) = v59;
  *(_QWORD *)(a1 + 184) = v61;
  *(_QWORD *)(a1 + 192) = v63;
  *(_QWORD *)(a1 + 200) = v65;
  *(_BYTE *)(a1 + 210) = BYTE2(v6);
  *(_WORD *)(a1 + 208) = v6;
  return a1;
}

uint64_t sub_23C8C3DAC(uint64_t a1)
{
  destroy for SQLExpression.Impl();
  return a1;
}

void *initializeWithTake for IndexDefinition(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD3uLL);
}

uint64_t assignWithTake for IndexDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(unsigned __int16 *)(a1 + 208) | (*(unsigned __int8 *)(a1 + 210) << 16);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 152);
  v11 = v6 >> 1 != 0xFFFFFFFF || v7 > 1;
  if (v11 || (v8 & 0xFE7E00) != 0)
  {
    v12 = *(unsigned __int16 *)(a2 + 208) | (*(unsigned __int8 *)(a2 + 210) << 16);
    v13 = v9 >> 1 != 0xFFFFFFFF || v10 > 1;
    if (v13 || (v12 & 0xFE7E00) != 0)
    {
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(_QWORD *)(a1 + 72);
      v18 = *(_QWORD *)(a1 + 80);
      v19 = *(_QWORD *)(a1 + 88);
      v20 = *(_QWORD *)(a1 + 96);
      v21 = *(_QWORD *)(a1 + 104);
      v22 = *(_OWORD *)(a1 + 120);
      v23 = *(_QWORD *)(a1 + 136);
      v24 = *(_QWORD *)(a1 + 144);
      v25 = *(_OWORD *)(a1 + 160);
      v26 = *(_OWORD *)(a1 + 176);
      v27 = *(_QWORD *)(a1 + 192);
      v28 = *(_QWORD *)(a1 + 200);
      v29 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v29;
      v30 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v30;
      *(_QWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = v10;
      v31 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v31;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_WORD *)(a1 + 208) = v12;
      *(_BYTE *)(a1 + 210) = BYTE2(v12);
      sub_23C7E6F90(v14, v15, v16, v17, v18, v19, v20, v21, v6, v22, *((uint64_t *)&v22 + 1), v23, v24, v7, v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27,
        v28,
        v8);
      return a1;
    }
    sub_23C8C3DAC(a1 + 48);
  }
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0xA3uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 211))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 210) = 0;
    *(_WORD *)(result + 208) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 211) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 211) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexDefinition()
{
  return &type metadata for IndexDefinition;
}

void sub_23C8C4048(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v7;

  a4 = v6;
  a5 = a3;
  v7 = &a4;
  Database.execute(sql:arguments:)(*(Swift::String *)&a1, *(GRDBInternal::StatementArguments *)(&a2 - 1));
}

void sub_23C8C405C()
{
  sub_23C7F1600();
}

uint64_t sub_23C8C406C@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_23C8C4078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  return sub_23C800B48(&a33, (void *)(v33 - 232));
}

void sub_23C8C4084(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

void sub_23C8C408C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) = v1 + 1;
}

uint64_t sub_23C8C40A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for OnDemandFutureSubscription.State(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_23C8C411C(uint64_t a1, uint64_t a2)
{
  id result;
  void (*v3)(uint64_t);
  uint64_t v4;
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v6 = a1;
  v7 = a2;
  result = sub_23C88850C((uint64_t)sub_23C8C6018, (uint64_t)v5, (void (*)(id))sub_23C8C6020);
  v3 = v8;
  if (v8)
  {
    v4 = swift_retain();
    v3(v4);
    sub_23C7E8C1C();
    return (id)sub_23C7E8C1C();
  }
  return result;
}

void sub_23C8C4198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v19[5];

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OnDemandFutureSubscription(0, v14, v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a6);
  swift_retain();
  v17 = sub_23C8C427C(a2, a3, (uint64_t)v12);
  v19[3] = v16;
  v19[4] = MEMORY[0x242626100](&unk_23C919A20, v16);
  v19[0] = v17;
  sub_23C7E0AB8();
  sub_23C910C5C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
  sub_23C7DEEA8();
}

uint64_t *sub_23C8C427C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return sub_23C8C42DC(a1, a2, a3);
}

void sub_23C8C42CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  sub_23C8C4198(a1, *v5, v5[1], a4, a5, a2);
}

uint64_t *sub_23C8C42DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 104);
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  v9 = (uint64_t)v3 + *(_QWORD *)(*v3 + 96);
  v10 = *(_QWORD *)(v7 + 80);
  sub_23C7DDB10(qword_25430D568);
  v11 = (_QWORD *)(v9 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  *v11 = a1;
  v11[1] = a2;
  type metadata accessor for OnDemandFutureSubscription.State(0, v10, *(_QWORD *)(v7 + 88), v12);
  swift_storeEnumTagMultiPayload();
  return v3;
}

id sub_23C8C43BC()
{
  return sub_23C88850C((uint64_t)sub_23C825B94, 0, (void (*)(id))sub_23C8C62FC);
}

uint64_t sub_23C8C4418(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t (*)(uint64_t), uint64_t *);
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t (*)(uint64_t), uint64_t *);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v32 = a2;
  v33 = v5;
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OnDemandFutureSubscription.State(0, v4, *(_QWORD *)(v3 + 88), v8);
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v28 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - v17;
  v19 = (uint64_t)a1 + *(_QWORD *)(v3 + 96);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v10)[2](v18, v19, v9);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v4);
  }
  else
  {
    sub_23C7DDB10(qword_25430D568);
    v21 = &v18[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v23 = *(void (**)(uint64_t (*)(uint64_t), uint64_t *))v21;
    v22 = *((_QWORD *)v21 + 1);
    v29 = v23;
    v30 = v22;
    v24 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v31 = v7;
    v24(v7, v18, v4);
    sub_23C910CA4();
    v25 = v32;
    result = sub_23C910C8C();
    if ((result & 1) == 0)
    {
      if (v25 < 0)
      {
        __break(1u);
        return result;
      }
      if (!v25)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v4);
        return swift_release();
      }
    }
    v26 = v33;
    v27 = v31;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v16, v31, v4);
    swift_storeEnumTagMultiPayload();
    ((void (**)(char *, char *, uint64_t))v10)[4](v13, v16, v9);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v10)[5](v19, v13, v9);
    swift_endAccess();
    swift_retain();
    v29(sub_23C8C6314, a1);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v4);
  }
  return result;
}

uint64_t sub_23C8C46AC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = sub_23C910C80();
  v19 = *(_QWORD *)(v2 - 8);
  v20 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - v4;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v18 - v7;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  v13 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, v21, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v15, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v5, v8, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v5, 0, 1, AssociatedTypeWitness);
    sub_23C8C4E14((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23C8C4A00((uint64_t)v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

id sub_23C8C48E8()
{
  return sub_23C88850C((uint64_t)sub_23C826280, 0, (void (*)(id))sub_23C8C62E4);
}

uint64_t sub_23C8C493C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for OnDemandFutureSubscription.State(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  swift_storeEnumTagMultiPayload();
  v9 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  return swift_endAccess();
}

id sub_23C8C4A00(uint64_t a1)
{
  return sub_23C8C4E28(a1, (uint64_t)sub_23C8263E0);
}

uint64_t sub_23C8C4A14(uint64_t (**a1)(), uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t v36;
  void (*v37)(unint64_t, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();

  v40 = a3;
  v45 = a1;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 80);
  v6 = *(_QWORD *)(*a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v43 = AssociatedTypeWitness;
  v39 = *(_QWORD *)(v42 + 64);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v41 = (char *)&v36 - v9;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v36 - v13;
  v44 = v6;
  v16 = type metadata accessor for OnDemandFutureSubscription.State(0, v5, v6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v36 - v21;
  v23 = (uint64_t)a2 + *(_QWORD *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v22, v23, v16);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      sub_23C88E0F8(*v45, v45[1]);
      v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v25(v14, v22, v5);
      v26 = v25;
      v37 = (void (*)(unint64_t, char *, uint64_t))v25;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v23, v20, v16);
      swift_endAccess();
      v27 = v38;
      v26(v38, v14, v5);
      v29 = v41;
      v28 = v42;
      v30 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v40, v43);
      v31 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v32 = (v11 + *(unsigned __int8 *)(v28 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v33 = swift_allocObject();
      v34 = v44;
      *(_QWORD *)(v33 + 16) = v5;
      *(_QWORD *)(v33 + 24) = v34;
      v37(v33 + v31, v27, v5);
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v28 + 32))(v33 + v32, v29, v30);
      v35 = v45;
      *v45 = sub_23C8C6270;
      v35[1] = (uint64_t (*)())v33;
    }
  }
  else
  {
    sub_23C7DDB10(qword_25430D568);
    swift_getTupleTypeMetadata2();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v22, v5);
  }
  return result;
}

uint64_t sub_23C8C4D10()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v1 = sub_23C910C80();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v6 - v3;
  sub_23C910C68();
  sub_23C7DE70C((uint64_t)v4, 1, 1, AssociatedTypeWitness);
  sub_23C910C50();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_23C8C4E14(uint64_t a1)
{
  return sub_23C8C4E28(a1, (uint64_t)sub_23C899460);
}

id sub_23C8C4E28(uint64_t a1, uint64_t a2)
{
  return sub_23C8C411C(a2, 0);
}

uint64_t sub_23C8C4E6C(void (**a1)(), uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (**v34)();
  uint64_t v35;
  void (*v36)(unint64_t, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)();

  v42 = a3;
  v44 = a1;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 80);
  v6 = *(_QWORD *)(*a2 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v43 = sub_23C910C80();
  v41 = *(_QWORD *)(v43 - 8);
  v38 = *(_QWORD *)(v41 + 64);
  v7 = MEMORY[0x24BDAC7A8](v43);
  v40 = (char *)&v35 - v8;
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - v12;
  v39 = v6;
  v15 = type metadata accessor for OnDemandFutureSubscription.State(0, v5, v6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v22 = (uint64_t)a2 + *(_QWORD *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v22, v15);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      sub_23C88E0F8(*v44, v44[1]);
      v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v24(v13, v21, v5);
      v25 = v24;
      v36 = (void (*)(unint64_t, char *, uint64_t))v24;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 40))(v22, v19, v15);
      swift_endAccess();
      v26 = v37;
      v25(v37, v13, v5);
      v28 = v40;
      v27 = v41;
      v29 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v42, v43);
      v30 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v31 = (v10 + v30 + *(unsigned __int8 *)(v27 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      v32 = swift_allocObject();
      v33 = v39;
      *(_QWORD *)(v32 + 16) = v5;
      *(_QWORD *)(v32 + 24) = v33;
      v36(v32 + v30, v26, v5);
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v27 + 32))(v32 + v31, v28, v29);
      v34 = v44;
      *v44 = sub_23C8C6120;
      v34[1] = (void (*)())v32;
    }
  }
  else
  {
    sub_23C7DDB10(qword_25430D568);
    swift_getTupleTypeMetadata2();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v21, v5);
  }
  return result;
}

uint64_t sub_23C8C519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
  v6 = type metadata accessor for OnDemandFutureSubscription.State(0, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  return v4;
}

uint64_t sub_23C8C51F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8C519C(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDemandFutureSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnDemandFutureSubscription);
}

uint64_t type metadata accessor for OnDemandFutureSubscription.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnDemandFutureSubscription.State);
}

uint64_t sub_23C8C522C()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  _QWORD v3[6];

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v3[4] = v3;
    v3[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *sub_23C8C52B8(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || v7 + 1 > 0x18)
  {
    v10 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    v11 = __src[v7];
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X14 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + v7) = 1;
      return v4;
    }
    (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v13 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    v14 = v13[1];
    v15 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v15[1] = v14;
    *((_BYTE *)v4 + v7) = 0;
  }
  swift_retain();
  return v4;
}

uint64_t sub_23C8C5424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v3 > v4)
    v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 == 1)
    return (*(uint64_t (**)(uint64_t))(v2 + 8))(a1);
  (*(void (**)(uint64_t))(v2 + 8))(a1);
  return swift_release();
}

_BYTE *sub_23C8C5518(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = __src[v7];
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v10 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
    __dst[v7] = 0;
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_23C8C5648(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = __dst[v8];
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v11 = __src[v8];
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v8] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v13 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      v14 = v13[1];
      v15 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v15 = *v13;
      v15[1] = v14;
      __dst[v8] = 0;
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *sub_23C8C5848(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = __src[v7];
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_23C8C5974(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v8 = *(_QWORD *)(v6 + 64);
    v9 = __dst[v8];
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    else
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v11 = __src[v8];
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v8] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v8] = 0;
    }
  }
  return __dst;
}

uint64_t sub_23C8C5B70(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v3 > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_21:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_21;
LABEL_14:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 254);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23C8C5C3C + 4 * byte_23C919928[(v5 - 1)]))();
}

void sub_23C8C5C88(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v6 <= 3)
  {
    v10 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_23C8C5E34(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v3 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v2 > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23C8C5E84 + 4 * byte_23C919936[v4]))();
}

void sub_23C8C5ECC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v4 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for OnDemandFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnDemandFuture);
}

id sub_23C8C5FA8()
{
  return sub_23C8C43BC();
}

id sub_23C8C5FC8()
{
  return sub_23C8C48E8();
}

void sub_23C8C5FE8()
{
  JUMPOUT(0x242626100);
}

void sub_23C8C5FF8()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C8C6008(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_23C8C6010(void (**a1)())
{
  uint64_t v1;

  return sub_23C8C4E6C(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C8C6018()
{
  uint64_t v0;

  return sub_23C890878(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23C8C6020()
{
  uint64_t v0;

  return sub_23C890898(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23C8C603C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;

  v1 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7E0AB8();
  swift_getAssociatedConformanceWitness();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C910C80() - 8) + 80);
  v4 = (v1 + v3) & ~v3;
  sub_23C7E452C();
  if (!sub_23C7DE718(v0 + v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + v4, AssociatedTypeWitness);
  return sub_23C7E869C();
}

void sub_23C8C6120()
{
  sub_23C7E4F48();
  sub_23C7E0AB8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_23C910C80();
  sub_23C910C50();
  sub_23C7DEEA8();
}

uint64_t sub_23C8C61C8(uint64_t (**a1)())
{
  uint64_t v1;

  return sub_23C8C4A14(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C8C61D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_23C7E452C();
  return sub_23C7E869C();
}

uint64_t sub_23C8C6270()
{
  sub_23C7E4F48();
  sub_23C7E0AB8();
  swift_getAssociatedTypeWitness();
  return sub_23C8C4D10();
}

uint64_t sub_23C8C62E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C8C493C(v4, a2, a3, a4);
}

uint64_t sub_23C8C62FC()
{
  uint64_t v0;

  return sub_23C8C4418(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C8C6314(uint64_t a1)
{
  return sub_23C8C46AC(a1);
}

ValueMetadata *type metadata accessor for CaseInsensitiveIdentifier()
{
  return &type metadata for CaseInsensitiveIdentifier;
}

uint64_t sub_23C8C632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a5 && a2 == a6)
    return 1;
  else
    return sub_23C911A18();
}

uint64_t sub_23C8C6350()
{
  swift_bridgeObjectRetain();
  sub_23C7E93E4();
  return swift_bridgeObjectRelease();
}

void sub_23C8C6390()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C7E93E4();
  swift_bridgeObjectRelease();
  sub_23C911BF8();
  sub_23C7E63C0();
}

void sub_23C8C63DC()
{
  sub_23C8C6390();
}

uint64_t sub_23C8C63E4()
{
  return sub_23C8C6350();
}

void sub_23C8C63EC()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  sub_23C911BF8();
  sub_23C7E63C0();
}

uint64_t sub_23C8C6438(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_23C8C632C(*a1, a1[1], a3, a4, *a2, a2[1]);
}

unint64_t sub_23C8C6450()
{
  unint64_t result;

  result = qword_25430DAA0;
  if (!qword_25430DAA0)
  {
    result = MEMORY[0x242626100](&unk_23C919ABC, &type metadata for CaseInsensitiveIdentifier);
    atomic_store(result, (unint64_t *)&qword_25430DAA0);
  }
  return result;
}

uint64_t FTS5TokenFlags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FTS5TokenFlags.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

void static FTS5TokenFlags.colocated.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23C8C64A8@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return FTS5TokenFlags.init(rawValue:)(*a1, a2);
}

void sub_23C8C64B0(_DWORD *a1@<X8>)
{
  sub_23C8E856C(a1);
}

uint64_t sub_23C8C64BC@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  return sub_23C8A6D34(*a1, *v2, a2);
}

void sub_23C8C64C8(_DWORD *a1@<X8>)
{
  sub_23C8E857C(a1);
}

BOOL sub_23C8C64D4(_DWORD *a1, int *a2)
{
  return sub_23C8A6D6C(a1, *a2);
}

uint64_t sub_23C8C64DC(unsigned int *a1)
{
  return sub_23C8A6DA4(*a1);
}

uint64_t sub_23C8C64E4(unsigned int *a1)
{
  return sub_23C8A6DC0(*a1);
}

uint64_t sub_23C8C64EC(unsigned int *a1)
{
  return sub_23C8E8614(*a1);
}

void sub_23C8C64F4(_DWORD *a1@<X8>)
{
  sub_23C8E862C(a1);
}

BOOL sub_23C8C6500(int *a1)
{
  int *v1;

  return sub_23C8E8634(*a1, *v1);
}

BOOL sub_23C8C650C(int *a1)
{
  int *v1;

  return sub_23C8E8658(*a1, *v1);
}

BOOL sub_23C8C6518(int *a1)
{
  int *v1;

  return sub_23C8E8664(*a1, *v1);
}

uint64_t sub_23C8C6524(unsigned int *a1)
{
  return sub_23C8E86A4(*a1);
}

uint64_t sub_23C8C652C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = FTS5TokenFlags.init(rawValue:)(*a1, (_DWORD *)a2);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_23C8C6554@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = FTS5TokenFlags.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t FTS5WrapperTokenizer.tokenize(context:tokenization:pText:nText:tokenCallback:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v15[1] = a7;
  v15[2] = a1;
  v16 = v11;
  v17 = a5;
  swift_unknownObjectRetain();
  sub_23C8C6638((uint64_t)v15, v11, a3, a4, a6, a7, &v14);
  v12 = v14;
  swift_unknownObjectRelease();
  return v12;
}

uint64_t sub_23C8C6638@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _DWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t result;
  int v16;

  (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  v13 = v12;
  ObjectType = swift_getObjectType();
  v16 = a2;
  LODWORD(a4) = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t))(v13 + 8))(a1, &v16, a3, a4, sub_23C8C6B9C, ObjectType, v13);
  result = swift_unknownObjectRelease();
  *a7 = a4;
  return result;
}

unint64_t sub_23C8C66EC()
{
  unint64_t result;

  result = qword_256BCDA08;
  if (!qword_256BCDA08)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5TokenFlags, &type metadata for FTS5TokenFlags);
    atomic_store(result, (unint64_t *)&qword_256BCDA08);
  }
  return result;
}

unint64_t sub_23C8C672C()
{
  unint64_t result;

  result = qword_256BCDA10;
  if (!qword_256BCDA10)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5TokenFlags, &type metadata for FTS5TokenFlags);
    atomic_store(result, (unint64_t *)&qword_256BCDA10);
  }
  return result;
}

unint64_t sub_23C8C676C()
{
  unint64_t result;

  result = qword_256BCA500;
  if (!qword_256BCA500)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5TokenFlags, &type metadata for FTS5TokenFlags);
    atomic_store(result, (unint64_t *)&qword_256BCA500);
  }
  return result;
}

unint64_t sub_23C8C67AC()
{
  unint64_t result;

  result = qword_256BCA5D8;
  if (!qword_256BCA5D8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5TokenFlags, &type metadata for FTS5TokenFlags);
    atomic_store(result, (unint64_t *)&qword_256BCA5D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FTS5TokenFlags()
{
  return &type metadata for FTS5TokenFlags;
}

uint64_t dispatch thunk of FTS5WrapperTokenizer.wrappedTokenizer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FTS5WrapperTokenizer.accept(token:flags:for:tokenCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t sub_23C8C6818(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(uint64_t, uint64_t, _DWORD *, uint64_t *, uint64_t (*)(uint64_t, unint64_t, unsigned int *), uint64_t *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[4];
  uint64_t v34;

  v12 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23C910AA0();
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
    return 0;
  (*(void (**)(char *, _QWORD))(v14 + 104))(v16, *MEMORY[0x24BDCDB98]);
  v17 = MEMORY[0x2426246D8](a3, a4, v16);
  v19 = v18;
  sub_23C910EA8();
  v20 = sub_23C910E90();
  v22 = v21;
  result = sub_23C7EEE1C(v17, v19);
  if (!v22)
    return 0;
  v32 = v20;
  if (a1)
  {
    v24 = a6;
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32);
    ObjectType = swift_getObjectType();
    v31 = (uint64_t)&v31;
    v33[0] = a2;
    LODWORD(v34) = v27;
    MEMORY[0x24BDAC7A8](ObjectType);
    *(&v31 - 4) = v28;
    *(&v31 - 3) = v26;
    *((_DWORD *)&v31 - 4) = a5;
    *((_DWORD *)&v31 - 3) = v24;
    v30 = *(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t *, uint64_t (*)(uint64_t, unint64_t, unsigned int *), uint64_t *, uint64_t, uint64_t))(v25 + 24);
    swift_unknownObjectRetain_n();
    v30(v32, v22, v33, &v34, sub_23C8C6BA0, &v31 - 6, ObjectType, v25);
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8C6A98(uint64_t a1, unint64_t a2, unsigned int *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;

  v9 = *a3;
  swift_bridgeObjectRetain();
  v10 = sub_23C8C6BBC(a1, a2);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + 16) >> 31)
  {
    __break(1u);
  }
  else
  {
    v12 = a4(a5, v9, v10 + 32);
    if (v12)
    {
      v13 = v12;
      sub_23C7EF5D4();
      swift_allocError();
      *(_DWORD *)v14 = v13;
      *(_QWORD *)(v14 + 8) = 0xD000000000000015;
      *(_QWORD *)(v14 + 16) = 0x800000023C91F820;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_BYTE *)(v14 + 56) = 0;
      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8C6BA0(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  uint64_t v3;

  return sub_23C8C6A98(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_23C8C6BBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  char v5;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23C8C6C54(v2, 0);
      result = sub_23C911640();
      if ((v5 & 1) != 0)
        break;
      if (result == v2)
        return (uint64_t)v3;
      __break(1u);
LABEL_9:
      v2 = sub_23C910F98();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23C8C6C54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23C7E79A8(&qword_25430B178);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23C8C6CB8(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  char *v26;
  void (*v27)(char *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[40];
  uint64_t v50;

  v37 = a5;
  v38 = a8;
  v44 = a1;
  v45 = a2;
  v36 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7E16D4();
  v46 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v41 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7E16D4();
  v40 = v15;
  v16 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v35 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v32 - v19;
  v42 = v8;
  v21 = a6;
  v22 = sub_23C9112D4();
  if (!v22)
    return sub_23C911124();
  v23 = v22;
  v33 = v16;
  v50 = sub_23C911700();
  v43 = sub_23C91170C();
  sub_23C9116C4();
  v34 = v20;
  result = sub_23C9112C8();
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    v47 = v21;
    v25 = v41;
    v26 = v34;
    while (1)
    {
      v27 = (void (*)(char *, _QWORD))sub_23C911394();
      (*(void (**)(char *))(v12 + 16))(v25);
      v27(v49, 0);
      v28 = v48;
      v44(v25, v46);
      if (v28)
        break;
      v48 = 0;
      sub_23C7E8C28();
      sub_23C9116F4();
      sub_23C9112EC();
      if (!--v23)
      {
        v29 = v39;
        v30 = v35;
        v31 = v33;
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v35, v26, v33);
        sub_23C9115E0();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
        return v50;
      }
    }
    sub_23C7E8C28();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v33);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v46, v37);
  }
  return result;
}

GRDBInternal::SQL __swiftcall SQL.init(sql:arguments:)(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  uint64_t *v2;
  __int128 *rawValue;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  uint64_t v7;
  GRDBInternal::SQL result;
  _QWORD v9[2];
  __int128 v10;

  rawValue = (__int128 *)arguments.values._rawValue;
  object = sql._object;
  countAndFlagsBits = sql._countAndFlagsBits;
  v6 = v2;
  sub_23C7E79A8(&qword_25430DA08);
  v7 = sub_23C7E41DC();
  *(_OWORD *)(v7 + 16) = xmmword_23C912A20;
  v9[0] = countAndFlagsBits;
  v9[1] = object;
  v10 = *rawValue;
  sub_23C7F96B0(v9);
  sub_23C7F96E0(v9, (void *)(v7 + 32));
  *v6 = v7;
  sub_23C7E8684();
  return result;
}

uint64_t SQL.sqlExpression.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8C7458((void (*)(_QWORD *))sub_23C80A840, (void (*)(_QWORD *, uint64_t))sub_23C800B48, a1);
}

void SQL.init(_:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[23];

  sub_23C7E79A8(&qword_25430DA08);
  v4 = sub_23C7E41DC();
  *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
  v6 = a1[3];
  v5 = a1[4];
  sub_23C7E7E34(a1, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v7, v6);
  sub_23C7FCC1C(v7);
  sub_23C7F96E0(v7, (void *)(v4 + 32));
  *a2 = v4;
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a1);
  sub_23C7E8684();
}

uint64_t SQL.isEmpty.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[184];
  _BYTE v9[184];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (!v2)
    return 1;
  sub_23C7F96E0((const void *)(v1 + 32), v8);
  sub_23C7F96E0(v8, v9);
  if (!sub_23C8A22E4((uint64_t)v9))
  {
    v4 = (char *)(v1 + 216);
    do
    {
      v5 = (_QWORD *)sub_23C8A22F0((uint64_t)v9);
      v6 = v5[1];
      v7 = *v5 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0x2000000000000000) != 0)
        v7 = HIBYTE(v6) & 0xF;
      if (v7)
        break;
      if (!--v2)
        return 1;
      sub_23C7F96E0(v4, v8);
      sub_23C7F96E0(v8, v9);
      v4 += 184;
    }
    while (!sub_23C8A22E4((uint64_t)v9));
  }
  return 0;
}

uint64_t SQL.build(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = *v2;
  type metadata accessor for StatementArgumentsSink();
  swift_allocObject();
  swift_retain();
  v7 = sub_23C7E0B8C(0);
  v8 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_allocObject();
  sub_23C7E30C0(a2, v7, v8);
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  sub_23C8A9A6C(v9);
  if (v3)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E127C((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    v6 = sub_23C910E3C();
    swift_bridgeObjectRelease();
    sub_23C7E0BF0(a1);
    swift_release();
  }
  return v6;
}

void static SQL.+ infix(_:_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7ED9B0();
}

void static SQL.+= infix(_:_:)()
{
  swift_bridgeObjectRetain();
  sub_23C7ED9B0();
}

Swift::Void __swiftcall SQL.append(sql:arguments:)(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[184];
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)arguments.values._rawValue;
  v3 = *((_QWORD *)arguments.values._rawValue + 1);
  v5 = sql;
  v6 = v2;
  v7 = v3;
  sub_23C7F96B0(&v5);
  sub_23C7F96E0(&v5, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C887444(v4);
}

uint64_t SQL.sqlSelection.getter@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  _QWORD v4[23];

  v4[0] = *v1;
  sub_23C801118(v4);
  sub_23C801054(v4, a1);
  return swift_bridgeObjectRetain();
}

uint64_t SQL.sqlOrdering.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8C7458((void (*)(_QWORD *))sub_23C863D64, (void (*)(_QWORD *, uint64_t))sub_23C8634F8, a1);
}

uint64_t sub_23C8C7458@<X0>(void (*a1)(_QWORD *)@<X0>, void (*a2)(_QWORD *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD v7[21];

  v7[0] = *v3;
  a1(v7);
  a2(v7, a3);
  return swift_bridgeObjectRetain();
}

void Sequence<>.joined(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[184];
  _QWORD v48[23];

  sub_23C7E4F5C();
  if (v9)
  {
    v10 = v8;
    v11 = v7;
    v12 = sub_23C7E79A8(&qword_25430AF30);
    sub_23C891CA0((uint64_t)sub_23C8C75D4, 0, a3, v12, MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], v13);
    v24 = v11;
    v25 = v10;
    v26 = MEMORY[0x24BEE4AF8];
    v27 = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(&v24);
    v14 = sub_23C7F96E0(&v24, v47);
    sub_23C7E0AC4(v14, v15, v16, v17, v18, v19, v20, v21, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47[0]);
    sub_23C7DBAC4(v48);
    sub_23C7E63CC();
    swift_bridgeObjectRelease();
    sub_23C7E3428();
  }
  else
  {
    sub_23C7E79A8(&qword_25430AF30);
    sub_23C7E127C(&qword_256BCDA18, &qword_25430AF30, MEMORY[0x24BEE12C8]);
    v22 = sub_23C91107C();
  }
  *v4 = v22;
  sub_23C7DB750();
}

uint64_t sub_23C8C75D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

GRDBInternal::SQL sub_23C8C75FC(Swift::String *a1)
{
  return SQL.init(stringLiteral:)(*a1);
}

unint64_t sub_23C8C760C()
{
  unint64_t result;

  result = qword_256BCDA20;
  if (!qword_256BCDA20)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQL, &type metadata for SQL);
    atomic_store(result, (unint64_t *)&qword_256BCDA20);
  }
  return result;
}

unint64_t sub_23C8C764C()
{
  unint64_t result;

  result = qword_256BCDA28;
  if (!qword_256BCDA28)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQL, &type metadata for SQL);
    atomic_store(result, (unint64_t *)&qword_256BCDA28);
  }
  return result;
}

unint64_t sub_23C8C768C()
{
  unint64_t result;

  result = qword_256BCDA30;
  if (!qword_256BCDA30)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQL, &type metadata for SQL);
    atomic_store(result, (unint64_t *)&qword_256BCDA30);
  }
  return result;
}

uint64_t assignWithCopy for SQL.Element(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v28 = a2[9];
  v29 = a2[10];
  v30 = a2[11];
  v31 = a2[12];
  v32 = a2[13];
  v33 = a2[14];
  v34 = a2[15];
  v35 = a2[16];
  v36 = a2[17];
  v37 = a2[18];
  v38 = a2[19];
  v39 = a2[20];
  v40 = a2[21];
  v41 = a2[22];
  sub_23C7E523C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_QWORD *)(a1 + 144) = v37;
  *(_QWORD *)(a1 + 152) = v38;
  v26 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v39;
  *(_QWORD *)(a1 + 168) = v40;
  *(_QWORD *)(a1 + 176) = v41;
  sub_23C7E509C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26);
  return a1;
}

uint64_t assignWithTake for SQL.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)(a2 + 176);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v3;
  sub_23C7E509C(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18);
  return a1;
}

_QWORD *sub_23C8C78FC(_QWORD *result, char a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = result[13] & 1;
  v3 = result[20] & 0xE000000000FFC1FFLL;
  result[8] &= 1uLL;
  result[13] = v2;
  result[20] = v3 | ((unint64_t)(a2 & 7) << 58);
  return result;
}

ValueMetadata *type metadata accessor for SQL.Element()
{
  return &type metadata for SQL.Element;
}

void sub_23C8C7944(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  _BYTE v23[184];
  _BYTE v24[184];
  _BYTE v25[184];
  _BYTE v26[184];
  _BYTE v27[184];
  _BYTE v28[184];
  _BYTE v29[192];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v6 = *(_QWORD *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    sub_23C7DBF00();
    v3 = *v1;
    v6 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  v7 = v6 - *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    if (v7 < v2)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    swift_arrayInitWithCopy();
    if (v2)
    {
      v9 = *(_QWORD *)(v3 + 16);
      v10 = __OFADD__(v9, v2);
      v11 = v9 + v2;
      if (v10)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      *(_QWORD *)(v3 + 16) = v11;
    }
  }
  else if (v2)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v2 != v7)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(a1 + 16);
  if (v8 == v13)
  {
    sub_23C800F98((uint64_t)v28);
    sub_23C8C8030((uint64_t)v28, (uint64_t)v29);
LABEL_16:
    sub_23C8C8030((uint64_t)v29, (uint64_t)v27);
    sub_23C8C8030((uint64_t)v27, (uint64_t)v28);
    if (sub_23C800F80((uint64_t)v28) == 1)
      goto LABEL_17;
    while (1)
    {
      if (v12 + 1 > *(_QWORD *)(v3 + 24) >> 1)
        sub_23C7DBF00();
      v3 = *v1;
      v14 = *(_QWORD *)(*v1 + 24) >> 1;
      sub_23C8C8030((uint64_t)v29, (uint64_t)v25);
      sub_23C8C8030((uint64_t)v25, (uint64_t)v26);
      if (sub_23C800F80((uint64_t)v26) != 1 && v12 < v14)
        break;
      v16 = v8;
LABEL_39:
      *(_QWORD *)(v3 + 16) = v12;
      sub_23C8C8030((uint64_t)v29, (uint64_t)v27);
      sub_23C8C8030((uint64_t)v27, (uint64_t)v28);
      v8 = v16;
      if (sub_23C800F80((uint64_t)v28) == 1)
        goto LABEL_17;
    }
    v16 = v8;
    while (1)
    {
      v17 = (char *)(v3 + 32 + 184 * v12);
      v18 = v12 + 1;
      while (1)
      {
        v12 = v18;
        sub_23C8C8030((uint64_t)v25, (uint64_t)v24);
        sub_23C7F96E0(v24, v17);
        if (v16 != v13)
          break;
        sub_23C800F98((uint64_t)v23);
        sub_23C8C8030((uint64_t)v23, (uint64_t)v29);
        sub_23C8C8030((uint64_t)v29, (uint64_t)v25);
        sub_23C8C8030((uint64_t)v25, (uint64_t)v26);
        v19 = sub_23C800F80((uint64_t)v26);
        v17 += 184;
        v18 = v12 + 1;
        if (v19 == 1 || v12 >= v14)
        {
          v16 = v13;
          goto LABEL_39;
        }
      }
      if ((v8 & 0x8000000000000000) != 0)
        break;
      if (v16 >= *(_QWORD *)(a1 + 16))
        goto LABEL_42;
      sub_23C7F96E0((const void *)(a1 + 32 + 184 * v16), v23);
      sub_23C7F96E0(v23, v29);
      ++v16;
      nullsub_1(v29);
      sub_23C8C7FC8((uint64_t)v23);
      sub_23C8C8030((uint64_t)v29, (uint64_t)v25);
      sub_23C8C8030((uint64_t)v25, (uint64_t)v26);
      if (sub_23C800F80((uint64_t)v26) == 1 || v12 >= v14)
        goto LABEL_39;
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v8 < v13)
  {
    sub_23C7F96E0((const void *)(a1 + 184 * v8 + 32), v28);
    sub_23C7F96E0(v28, v29);
    ++v8;
    nullsub_1(v29);
    sub_23C8C7FC8((uint64_t)v28);
    goto LABEL_16;
  }
LABEL_47:
  __break(1u);
}

void sub_23C8C7C94(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  _BYTE v20[184];
  _BYTE v21[184];
  _BYTE v22[184];
  _BYTE v23[184];
  _BYTE v24[184];
  _BYTE v25[184];
  _BYTE v26[192];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v6 = *(_QWORD *)(v3 + 24) >> 1, v6 < (uint64_t)(v4 + v2)))
  {
    sub_23C7DBF00();
    v3 = *v1;
    v6 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = v6 - v7;
  if (v2)
  {
    if (v8 < (uint64_t)v2)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    swift_arrayInitWithCopy();
    v9 = *(_QWORD *)(v3 + 16);
    v7 = v9 + v2;
    if (__OFADD__(v9, v2))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    *(_QWORD *)(v3 + 16) = v7;
  }
  if (v2 != v8)
  {
LABEL_15:
    swift_release();
    *v1 = v3;
    return;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v2 == v10)
  {
    sub_23C800F98((uint64_t)v25);
    sub_23C8C8030((uint64_t)v25, (uint64_t)v26);
LABEL_14:
    sub_23C8C8030((uint64_t)v26, (uint64_t)v24);
    sub_23C8C8030((uint64_t)v24, (uint64_t)v25);
    if (sub_23C800F80((uint64_t)v25) == 1)
      goto LABEL_15;
    while (1)
    {
      if (v7 + 1 > *(_QWORD *)(v3 + 24) >> 1)
        sub_23C7DBF00();
      v3 = *v1;
      v11 = *(_QWORD *)(*v1 + 24) >> 1;
      sub_23C8C8030((uint64_t)v26, (uint64_t)v22);
      sub_23C8C8030((uint64_t)v22, (uint64_t)v23);
      if (sub_23C800F80((uint64_t)v23) != 1 && v7 < v11)
        break;
      v13 = v2;
LABEL_37:
      *(_QWORD *)(v3 + 16) = v7;
      sub_23C8C8030((uint64_t)v26, (uint64_t)v24);
      sub_23C8C8030((uint64_t)v24, (uint64_t)v25);
      v2 = v13;
      if (sub_23C800F80((uint64_t)v25) == 1)
        goto LABEL_15;
    }
    v13 = v2;
    while (1)
    {
      v14 = (char *)(v3 + 32 + 184 * v7);
      v15 = v7 + 1;
      while (1)
      {
        v7 = v15;
        sub_23C8C8030((uint64_t)v22, (uint64_t)v21);
        sub_23C7F96E0(v21, v14);
        if (v13 != v10)
          break;
        sub_23C800F98((uint64_t)v20);
        sub_23C8C8030((uint64_t)v20, (uint64_t)v26);
        sub_23C8C8030((uint64_t)v26, (uint64_t)v22);
        sub_23C8C8030((uint64_t)v22, (uint64_t)v23);
        v16 = sub_23C800F80((uint64_t)v23);
        v14 += 184;
        v15 = v7 + 1;
        if (v16 == 1 || v7 >= v11)
        {
          v13 = v10;
          goto LABEL_37;
        }
      }
      if ((v2 & 0x8000000000000000) != 0)
        break;
      if (v13 >= *(_QWORD *)(a1 + 16))
        goto LABEL_40;
      sub_23C7F96E0((const void *)(a1 + 32 + 184 * v13), v20);
      sub_23C7F96E0(v20, v26);
      ++v13;
      nullsub_1(v26);
      sub_23C8C7FC8((uint64_t)v20);
      sub_23C8C8030((uint64_t)v26, (uint64_t)v22);
      sub_23C8C8030((uint64_t)v22, (uint64_t)v23);
      if (sub_23C800F80((uint64_t)v23) == 1 || v7 >= v11)
        goto LABEL_37;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v2 < v10)
  {
    sub_23C7F96E0((const void *)(a1 + 184 * v2 + 32), v25);
    sub_23C7F96E0(v25, v26);
    ++v2;
    nullsub_1(v26);
    sub_23C8C7FC8((uint64_t)v25);
    goto LABEL_14;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_23C8C7FC8(uint64_t a1)
{
  sub_23C7E523C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160));
  return a1;
}

uint64_t sub_23C8C8030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCA510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C8C8078@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C8C75D4(a1, a2);
}

uint64_t TableRequest<>.matching(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[2];
  char v23;
  _BYTE v24[168];
  _QWORD v25[21];
  _BYTE v26[176];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v7[1];
  if (!v12)
    return FilteredRequest.none()(a2, v8);
  v13 = *v7;
  v19 = v9;
  v20 = v8;
  type metadata accessor for TableAlias();
  v14 = sub_23C7DB388();
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 0;
  v22[0] = v13;
  v22[1] = v12;
  v23 = 2;
  sub_23C8027EC((uint64_t)v22);
  sub_23C800B48(v22, v24);
  v15 = sub_23C7DB388();
  *(_QWORD *)(v15 + 16) = v14;
  sub_23C7E3190((void *)(v15 + 24), v24);
  v25[0] = v15;
  sub_23C874BFC((uint64_t)v25);
  sub_23C800B48(v25, v26);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  swift_bridgeObjectRetain();
  v17 = swift_retain();
  v16(v17, a2, a4);
  v21[3] = &type metadata for SQLExpression;
  v21[4] = &protocol witness table for SQLExpression;
  v21[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v21[0] + 16), v26);
  swift_retain();
  FilteredRequest.filter(_:)((uint64_t)v21, a2, v20);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a2);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[2];
  char v23;
  _BYTE v24[168];
  _QWORD v25[21];
  _BYTE v26[176];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v7[1];
  if (!v12)
    return FilteredRequest.none()(a2, v8);
  v13 = *v7;
  v19 = v9;
  v20 = v8;
  type metadata accessor for TableAlias();
  v14 = sub_23C7DB388();
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 0;
  v22[0] = v13;
  v22[1] = v12;
  v23 = 2;
  sub_23C8027EC((uint64_t)v22);
  sub_23C800B48(v22, v24);
  v15 = sub_23C7DB388();
  *(_QWORD *)(v15 + 16) = v14;
  sub_23C7E3190((void *)(v15 + 24), v24);
  v25[0] = v15;
  sub_23C874BFC((uint64_t)v25);
  sub_23C800B48(v25, v26);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  swift_bridgeObjectRetain();
  v17 = swift_retain();
  v16(v17, a2, a4);
  v21[3] = &type metadata for SQLExpression;
  v21[4] = &protocol witness table for SQLExpression;
  v21[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v21[0] + 16), v26);
  swift_retain();
  FilteredRequest.filter(_:)((uint64_t)v21, a2, v20);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a2);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
}

uint64_t sub_23C8C825C()
{
  uint64_t v0;

  swift_release();
  sub_23C7E8430(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 184) | (*(unsigned __int8 *)(v0 + 186) << 16), *(__n128 *)(v0 + 88), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152));
  return sub_23C7DF00C();
}

uint64_t sub_23C8C82BC()
{
  __n128 *v0;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  return sub_23C7DF00C();
}

_QWORD *static TableRecord.matching(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t InterfaceRequest;
  _QWORD v10[2];
  _BYTE __dst[162];
  _QWORD __src[21];

  v4 = *a1;
  v5 = a1[1];
  static TableRecord.all()(a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  v10[0] = v4;
  v10[1] = v5;
  InterfaceRequest = type metadata accessor for QueryInterfaceRequest(0, a2, v6, v7);
  TableRequest<>.matching(_:)((uint64_t)v10, InterfaceRequest, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  return sub_23C7FA5C4(__src);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t InterfaceRequest;
  _QWORD v10[2];
  _BYTE __dst[162];
  _QWORD __src[21];

  v4 = *a1;
  v5 = a1[1];
  static TableRecord.all()(a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  v10[0] = v4;
  v10[1] = v5;
  InterfaceRequest = type metadata accessor for QueryInterfaceRequest(0, a2, v6, v7);
  TableRequest<>.matching(_:)((uint64_t)v10, InterfaceRequest, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  return sub_23C7FA5C4(__src);
}

uint64_t ColumnExpression.match(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[168];
  _BYTE v9[168];
  _QWORD v10[21];
  _QWORD v11[2];
  char v12;
  _BYTE v13[176];

  v6 = *a1;
  v5 = a1[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8))(v10, a2);
  sub_23C7E3190(v9, v10);
  v11[0] = v6;
  v11[1] = v5;
  v12 = 2;
  sub_23C8027EC((uint64_t)v11);
  sub_23C800B48(v11, v13);
  sub_23C7E3190(v8, v13);
  swift_bridgeObjectRetain();
  sub_23C86FFB4(0x484354414DLL, 0xE500000000000000, v9, v8, a4);
  swift_bridgeObjectRelease();
  return sub_23C80114C((uint64_t)v10);
}

{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[168];
  _BYTE v13[168];
  _QWORD v14[22];

  v6 = *a1;
  v5 = a1[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8))(v14, a2);
  sub_23C7E3190(v12, v14);
  if (v5)
  {
    v9 = v6;
    v10 = v5;
    v7 = 2;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v7 = 4;
  }
  v11 = v7;
  sub_23C8027EC((uint64_t)&v9);
  sub_23C800B48(&v9, v13);
  sub_23C7E3190(&v9, v13);
  swift_bridgeObjectRetain();
  sub_23C86FFB4(0x484354414DLL, 0xE500000000000000, v12, &v9, a4);
  sub_23C80114C((uint64_t)v13);
  return sub_23C80114C((uint64_t)v14);
}

uint64_t sub_23C8C862C()
{
  uint64_t v0;

  swift_release();
  sub_23C7E8430(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 184) | (*(unsigned __int8 *)(v0 + 186) << 16), *(__n128 *)(v0 + 88), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152));
  return sub_23C7DF00C();
}

uint64_t sub_23C8C868C()
{
  __n128 *v0;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  return sub_23C7DF00C();
}

void sub_23C8C8840(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  char v20;
  uint64_t v21;

  v4 = v3;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_23C7E56C8();
    v9 = v21;
    v10 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v11 = *v10;
      v18[0] = *(v10 - 1);
      v18[1] = v11;
      sub_23C7DB3B8();
      sub_23C7E7ABC((uint64_t)v18, a2, a3, &v17, (uint64_t)&v19);
      if (v4)
        break;
      v4 = 0;
      sub_23C7DBCD0();
      v12 = v19;
      v13 = v20;
      v21 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      if (v14 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        sub_23C7DBC04();
        v12 = v16;
        v9 = v21;
      }
      v10 += 2;
      *(_QWORD *)(v9 + 16) = v14 + 1;
      v15 = v9 + 24 * v14;
      *(_OWORD *)(v15 + 32) = v12;
      *(_BYTE *)(v15 + 48) = v13;
      if (!--v6)
      {
        sub_23C7DFE08();
        goto LABEL_10;
      }
    }
    sub_23C7DFE08();
    sub_23C7DFA18();
    sub_23C7DBCD0();
  }
  else
  {
    sub_23C7DFE08();
  }
LABEL_10:
  sub_23C7DF620();
}

void sub_23C8C8974(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  sub_23C7E56C8();
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (char *)(a1 + 48);
    do
    {
      v4 = *v3;
      v9 = *((_QWORD *)v3 - 2);
      v10 = *((_QWORD *)v3 - 1);
      sub_23C7E56A4(v9, v10, *v3);
      swift_getAtKeyPath();
      sub_23C7E5640(v9, v10, v4);
      v5 = v11;
      v6 = *(_QWORD *)(v13 + 16);
      if (v6 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        sub_23C7DBC04();
        v5 = v8;
      }
      v3 += 24;
      *(_QWORD *)(v13 + 16) = v6 + 1;
      v7 = v13 + 24 * v6;
      *(_OWORD *)(v7 + 32) = v5;
      *(_BYTE *)(v7 + 48) = v12;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_23C7DFB3C();
  swift_bridgeObjectRelease();
  sub_23C7DF620();
}

uint64_t sub_23C8C8A98(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v20;
  _QWORD v21[2];
  uint64_t v22;

  v3 = v2;
  result = sub_23C8F74D0();
  if ((v7 & 1) != 0)
    goto LABEL_23;
  v8 = *(_DWORD *)(a1 + 36);
  if (v8 != v6)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  v9 = result;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  if (result != v10)
  {
    v11 = a1 + 64;
    v18 = a1 + 64;
    while ((v9 & 0x8000000000000000) == 0 && v9 < v10)
    {
      if (v8 != v6 || (*(_QWORD *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
        goto LABEL_18;
      v20 = v8;
      v12 = a1;
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
      v14 = v13[1];
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
      v21[0] = *v13;
      v21[1] = v14;
      v22 = v15;
      swift_bridgeObjectRetain();
      swift_retain();
      v16 = v3;
      v17 = a2(v21, &v22);
      swift_release();
      result = swift_bridgeObjectRelease();
      if (v16 || (v17 & 1) != 0)
        return v9;
      if (v9 >= -(-1 << *(_BYTE *)(v12 + 32)))
        goto LABEL_19;
      a1 = v12;
      v11 = v18;
      if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
        goto LABEL_20;
      if (*(_DWORD *)(a1 + 36) != v20)
        goto LABEL_21;
      v3 = 0;
      result = sub_23C91158C();
      v9 = result;
      v6 = *(_DWORD *)(a1 + 36);
      v10 = 1 << *(_BYTE *)(a1 + 32);
      v8 = v6;
      if (result == v10)
        return 0;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  return 0;
}

uint64_t Database.makeStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return sub_23C8C8C84(a1, a2, 0);
}

uint64_t sub_23C8C8C84(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[2];

  v5 = v4;
  type metadata accessor for SQLStatementCursor();
  v17[0] = 0;
  v17[1] = 0;
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7E130C(v3, a1, a2, v17, a3);
  v9 = sub_23C7E156C();
  if (!v4)
  {
    v5 = v9;
    if (v9)
    {
      v11 = sub_23C7E156C();
      swift_release();
      if (!v11)
      {
        sub_23C7DFA18();
        return v5;
      }
      sub_23C7EF5D4();
      v12 = (void *)sub_23C7DB694();
      sub_23C7E93F0((uint64_t)v12, v13);
      swift_willThrow();
      sub_23C7EF5D4();
      v14 = sub_23C7DB694();
      sub_23C7E93F0(v14, v15);
      swift_willThrow();

      sub_23C7DFA18();
    }
    else
    {
      sub_23C7EF5D4();
      sub_23C7DB694();
      *(_DWORD *)v10 = 1;
      *(_OWORD *)(v10 + 8) = xmmword_23C919E50;
      *(_QWORD *)(v10 + 24) = a1;
      *(_QWORD *)(v10 + 32) = a2;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_BYTE *)(v10 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  swift_release();
  return v5;
}

void Database.makeStatement(literal:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7E6864();
  sub_23C7DB388();
  sub_23C7E2620();
  sub_23C7E21BC();
  sub_23C7E0C50();
  sub_23C7EC808();
  sub_23C7DB388();
  sub_23C7E63D8();
  swift_retain();
  v3 = sub_23C7E0808();
  v4 = sub_23C7EE1D4(v3);
  if (v0)
  {
    sub_23C7DC4C4();
    sub_23C7DB398();
  }
  else
  {
    v5 = v4;
    sub_23C7DB398();
    sub_23C7E9B8C();
    sub_23C7E59E0((unint64_t *)&qword_25430DB98, v6, MEMORY[0x24BEE12B0]);
    sub_23C7EDCEC();
    v7 = sub_23C7DEAF0();
    sub_23C7E69F0(v7, v8);
    sub_23C7DC4C4();
    sub_23C8C8C84(v2, v1, 0);
    v9 = sub_23C7DBCD0();
    if (*(_QWORD *)(v18 + 16) || *(_QWORD *)(v19 + 16))
    {
      sub_23C7E8F04(v9, v10, v11, v12, v13, v14, v15, v16, v17, v5, v18, v19);
      sub_23C7DB3DC();
      sub_23C7DB398();
    }
    else
    {
      sub_23C7DB3DC();
      sub_23C7DB398();
    }
  }
  sub_23C7E21A4();
}

uint64_t Database.makeSelectStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return sub_23C8C8C84(a1, a2, 0);
}

void Database.makeSelectStatement(literal:)()
{
  Database.makeStatement(literal:)();
}

uint64_t Database.cachedSelectStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return Database.cachedStatement(sql:)(a1, a2);
}

void Database.cachedSelectStatement(literal:)()
{
  Database.cachedStatement(literal:)();
}

void Database.allStatements(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = *a3;
  type metadata accessor for SQLStatementCursor();
  sub_23C7DB388();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7E76BC(v6);
  sub_23C7E130C(v3, a1, a2, &v6, 0);
  sub_23C7EE5C0();
}

uint64_t sub_23C8C9050@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C7E156C();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23C8C9078()
{
  return Statement.sql.getter();
}

double sub_23C8C9098@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  Statement.arguments.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t Database.statementDidFail(_:withResultCode:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;

  v4 = v2;
  v5 = sub_23C7E0408();
  v7 = v6;
  sub_23C8C9558();
  sub_23C7E65F8(v7, (uint64_t (*)(_QWORD *, uint64_t *))sub_23C8C9374);
  sub_23C7ED194();
  v10 = v9 & ~v8;
  sub_23C7DE934();
  if (v10)
  {
    sub_23C7E79A8(qword_25430B190);
    sub_23C7E3434();
    sub_23C7DFD40();
    sub_23C7DE904();
    v7 = v32;
  }
  sub_23C7E03FC(v5, v7);
  v11 = sub_23C7E03F0();
  v13 = v12;
  sub_23C8C9558();
  sub_23C7E65F8(v13, (uint64_t (*)(_QWORD *, uint64_t *))sub_23C8C9540);
  sub_23C7ED194();
  v16 = v15 & ~v14;
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_23C7E79A8(qword_25430B190);
    sub_23C7E3434();
    sub_23C7DFD40();
    sub_23C7DE904();
  }
  sub_23C7E03E4(v11, v32);
  sub_23C7E23F4();
  sub_23C806B24();
  result = sub_23C7DE904();
  if (!v3)
  {
    v18 = (uint64_t)Database.lastErrorMessage.getter();
    v20 = v19;
    v21 = Statement.sql.getter();
    v23 = v22;
    Statement.arguments.getter(v31);
    v24 = v31[0];
    v25 = v31[1];
    v26 = *(_BYTE *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
    sub_23C7EF5D4();
    sub_23C7DB694();
    v28 = v27;
    if (!v20)
    {
      result = (uint64_t)sqlite3_errstr(a2);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v18 = sub_23C910F74();
      v20 = v29;
    }
    *(_DWORD *)v28 = a2;
    *(_QWORD *)(v28 + 8) = v18;
    *(_QWORD *)(v28 + 16) = v20;
    *(_QWORD *)(v28 + 24) = v21;
    *(_QWORD *)(v28 + 32) = v23;
    *(_QWORD *)(v28 + 40) = v24;
    *(_QWORD *)(v28 + 48) = v25;
    *(_BYTE *)(v28 + 56) = v26;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23C8C92A4()
{
  swift_arrayDestroy();
  sub_23C7E9734();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8C92CC()
{
  swift_arrayDestroy();
  sub_23C7E9734();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8C92F4()
{
  swift_arrayDestroy();
  sub_23C7E9734();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8C931C()
{
  sub_23C7E79A8(&qword_256BCBCB8);
  swift_arrayDestroy();
  sub_23C7E9734();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8C9364()
{
  return sub_23C8C9078();
}

double sub_23C8C936C@<D0>(_OWORD *a1@<X8>)
{
  return sub_23C8C9098(a1);
}

BOOL sub_23C8C9374(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return *a2 == v2;
}

uint64_t sub_23C8C9384(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_23C7F91AC(result, a2, a3 & 1);
  return result;
}

uint64_t method lookup function for SQLStatementCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SQLStatementCursor.next()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t destroy for StatementCache()
{
  swift_unownedRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *_s12GRDBInternal14StatementCacheVwCP_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_unownedRetain();
  v5 = *(_QWORD *)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for StatementCache(uint64_t *a1, uint64_t a2)
{
  *a1 = swift_unownedRetain();
  swift_unownedRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for StatementCache(_OWORD *a1, _OWORD *a2)
{
  swift_unownedRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StatementCache()
{
  return &type metadata for StatementCache;
}

uint64_t sub_23C8C94D0()
{
  return 24;
}

__n128 sub_23C8C94DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void Database.makeUpdateStatement(literal:)()
{
  Database.makeSelectStatement(literal:)();
}

void Database.cachedUpdateStatement(literal:)()
{
  Database.cachedSelectStatement(literal:)();
}

uint64_t Database.cachedUpdateStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return Database.cachedSelectStatement(sql:)(a1, a2);
}

uint64_t Database.makeUpdateStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return Database.makeSelectStatement(sql:)(a1, a2);
}

BOOL sub_23C8C9540(uint64_t a1, _QWORD *a2)
{
  return sub_23C8C9374(a1, a2);
}

uint64_t sub_23C8C9558()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8C9564()
{
  uint64_t result;

  sub_23C7E79A8(&qword_25430DB90);
  swift_allocObject();
  result = sub_23C910D1C();
  qword_25430DA90 = result;
  return result;
}

uint64_t sub_23C8C95A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v2 = v1;
  *(_QWORD *)(v2 + 24) = 0;
  sub_23C7E79A8(&qword_25430DBC8);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23C9134B0;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = v4;
  sub_23C9110DC();
  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_23C8C9610(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (qword_25430D950 != -1)
    swift_once();
  sub_23C911400();
  result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    swift_allocObject();
    sub_23C8C95A4(a1);
    swift_retain();
    sub_23C911418();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8C96E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8C971C(a1, a2, a3, a4, a5, (void (*)(uint64_t))sub_23C8C9A78);
}

uint64_t sub_23C8C9700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8C971C(a1, a2, a3, a4, a5, (void (*)(uint64_t))sub_23C8C9BCC);
}

uint64_t sub_23C8C971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  sub_23C7E8C38();
  sub_23C7E6180();
  v7 = *(_QWORD *)(v6 + 16);
  sub_23C7E86B4();
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v8 = sub_23C7DB3D4();
  sub_23C7FAFD4(v8);
  sub_23C7E0AD4();
  v9 = sub_23C7E4F74();
  a6(v9);
  *(_QWORD *)(v6 + 16) = v7;
  sub_23C7DE904();
  return sub_23C7DB3DC();
}

uint64_t sub_23C8C97D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  sub_23C7E6180();
  v7 = *(_QWORD *)(a2 + 16);
  sub_23C7E86B4();
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v8 = sub_23C7DB3D4();
  sub_23C7FAFD4(v8);
  sub_23C7E0AD4();
  sub_23C8C9C60(a3, a4);
  v10 = v9 & 1;
  *(_QWORD *)(a2 + 16) = v7;
  sub_23C7DE904();
  sub_23C7DB3DC();
  return v10;
}

uint64_t sub_23C8C98A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8C98C0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_23C8C9B54);
}

uint64_t sub_23C8C98C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7E8C38();
  sub_23C7E6180();
  v8 = *(_QWORD *)(v6 + 16);
  sub_23C7E86B4();
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v9 = sub_23C7DB3D4();
  sub_23C7FAFD4(v9);
  sub_23C7E0AD4();
  v10 = sub_23C7E4F74();
  v11 = a6(v10);
  *(_QWORD *)(v6 + 16) = v8;
  sub_23C7DE904();
  sub_23C7DB3DC();
  return v11;
}

uint64_t sub_23C8C9978(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_23C7E6180();
  v4 = *(_QWORD *)(v2 + 16);
  sub_23C7E86B4();
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v5 = sub_23C7DB3D4();
  sub_23C7FAFD4(v5);
  v6 = sub_23C7E0AD4();
  a2(v6);
  *(_QWORD *)(v2 + 16) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8C9A34()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_23C8C9A58()
{
  sub_23C8C9A34();
  return swift_deallocClassInstance();
}

void sub_23C8C9A78(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  a2(v4);
  if (v2)
  {
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 119, a1);
  }
  else if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 41) & 1) == 0
         && (Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C9117B4();
    __break(1u);
  }
}

void sub_23C8C9B54(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  a2(&v4, v3);
  sub_23C8D296C(v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 119, a1);
}

void sub_23C8C9BCC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  unsigned __int8 v5;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = Database.isInsideTransaction.getter();
  a2(v4);
  if ((v5 & 1) == 0)
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 185, a1);
}

void sub_23C8C9C60(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = Database.isInsideTransaction.getter();
  a2(&v6, v4);
  if ((v5 & 1) == 0)
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 185, a1);
}

void sub_23C8C9D08()
{
  const void *v0;
  char *v1;
  _BYTE v2[168];
  _BYTE v3[176];

  sub_23C8634F8(v0, v2);
  sub_23C8634F8(v2, v3);
  v1 = (char *)sub_23C8C9D58 + 4 * byte_23C919F34[sub_23C863534((uint64_t)v3)];
  __asm { BR              X10 }
}

void sub_23C8C9D58()
{
  void *v0;
  uint64_t v1;
  const void *v2;
  _BYTE v3[544];

  v2 = (const void *)sub_23C86361C(v1 - 192);
  sub_23C7E3190(v3, v2);
  sub_23C863648((uint64_t)v3);
  sub_23C8634F8(v3, v0);
  sub_23C8CA858();
}

void sub_23C8C9E00()
{
  uint64_t v0;

  sub_23C86361C(v0 - 192);
  sub_23C9117B4();
  __break(1u);
}

void sub_23C8C9E54()
{
  const void *v0;
  char *v1;
  _BYTE v2[168];
  _BYTE v3[168];

  sub_23C8634F8(v0, v2);
  sub_23C8634F8(v2, v3);
  v1 = (char *)sub_23C8C9EAC + 4 * byte_23C919F3A[sub_23C863534((uint64_t)v3)];
  __asm { BR              X10 }
}

void *sub_23C8C9EAC()
{
  void *v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[168];
  uint64_t v8;

  v2 = (const void *)sub_23C86361C(v1 - 200);
  sub_23C7E3190(v7, v2);
  v3 = sub_23C8634F8(&v8, &v5);
  sub_23C7E1C64((uint64_t)v3);
  sub_23C8CA858();
  sub_23C7E8C54();
  sub_23C7E4F88();
  sub_23C7E3190(v7, &v6);
  sub_23C863DB0((uint64_t)v7);
  return sub_23C8634F8(v7, v0);
}

void sub_23C8CA0D4()
{
  const void *v0;
  char *v1;
  _BYTE v2[168];
  _BYTE v3[168];

  sub_23C8634F8(v0, v2);
  sub_23C8634F8(v2, v3);
  v1 = (char *)sub_23C8CA130 + 4 * byte_23C919F40[sub_23C863534((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23C8CA130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v3 = (void *)sub_23C86361C(v2 - 216);
  sub_23C7E453C(v3);
  v4 = sub_23C8634F8(&v36, &v35);
  sub_23C7E9A10((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35);
  sub_23C8CA858();
  sub_23C7E61C0();
  if (!v1)
    v0 = v12;
  sub_23C7EC818();
  return v0;
}

void SQLOrdering.sqlOrdering.getter(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E3190(v3, v1);
  sub_23C7E3190(a1, v1);
  sub_23C8CA858();
}

ValueMetadata *type metadata accessor for SQLOrdering()
{
  return &type metadata for SQLOrdering;
}

uint64_t dispatch thunk of SQLOrderingTerm.sqlOrdering.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _s12GRDBInternal11SQLOrderingVwxx_0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v22 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 152);
  sub_23C7E3398();
  return sub_23C800EA4(v8, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t _s12GRDBInternal11SQLOrderingV4ImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v24 = *(unsigned __int8 *)(a2 + 162);
  v25 = *(unsigned __int16 *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23C7FD7E4(*(_QWORD *)a2, v10, v3, v4, v5, v6, v7, v11, v8, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v25 | (v24 << 16));
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_BYTE *)(a1 + 162) = v24;
  *(_WORD *)(a1 + 160) = v25;
  return a1;
}

uint64_t _s12GRDBInternal11SQLOrderingV4ImplOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v37 = *(_QWORD *)(a2 + 64);
  v38 = *(_QWORD *)(a2 + 72);
  v39 = *(_QWORD *)(a2 + 80);
  v40 = *(_QWORD *)(a2 + 88);
  v41 = *(_QWORD *)(a2 + 96);
  v42 = *(_QWORD *)(a2 + 104);
  v43 = *(_QWORD *)(a2 + 112);
  v44 = *(_QWORD *)(a2 + 120);
  v45 = *(_QWORD *)(a2 + 128);
  v46 = *(_QWORD *)(a2 + 136);
  v49 = *(unsigned __int8 *)(a2 + 162);
  v11 = *(unsigned __int16 *)(a2 + 160);
  v47 = *(_QWORD *)(a2 + 144);
  v48 = *(_QWORD *)(a2 + 152);
  sub_23C7FD7E4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,
    v48,
    v11 | (v49 << 16));
  v12 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v37;
  *(_QWORD *)(a1 + 72) = v38;
  *(_QWORD *)(a1 + 80) = v39;
  *(_QWORD *)(a1 + 88) = v40;
  *(_QWORD *)(a1 + 96) = v41;
  *(_QWORD *)(a1 + 104) = v42;
  *(_QWORD *)(a1 + 112) = v43;
  *(_QWORD *)(a1 + 120) = v44;
  *(_QWORD *)(a1 + 128) = v45;
  *(_QWORD *)(a1 + 136) = v46;
  *(_WORD *)(a1 + 160) = v11;
  *(_BYTE *)(a1 + 162) = v49;
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v47;
  *(_QWORD *)(a1 + 152) = v48;
  v36 = v12;
  v34 = v13;
  v35 = v14;
  sub_23C7E3398();
  sub_23C800EA4(v15, v16, v17, v18, v19, v20, v21, v22, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  return a1;
}

void _s12GRDBInternal11SQLOrderingV4ImplOwta_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  sub_23C7E3248();
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v6 = v5[1];
  *(_OWORD *)a1 = *v5;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v5[5];
  *(_OWORD *)(a1 + 64) = v5[4];
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v5[7];
  *(_OWORD *)(a1 + 96) = v5[6];
  *(_OWORD *)(a1 + 112) = v9;
  v10 = v5[9];
  *(_OWORD *)(a1 + 128) = v5[8];
  *(_OWORD *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 162) = v11;
  *(_WORD *)(a1 + 160) = v12;
  v33 = v4;
  v31 = v2;
  v32 = v3;
  sub_23C7E3398();
  sub_23C800EA4(v13, v20, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  sub_23C7E4C90();
}

uint64_t sub_23C8CA7CC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF9BFFF;
  *(_WORD *)result = v2 & 0xBFFF;
  *(_BYTE *)(result + 2) = BYTE2(v3);
  return result;
}

uint64_t sub_23C8CA7F4(uint64_t a1, int a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;

  v3 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v4 = *(_QWORD *)(result - 56) & 1;
  v5 = ((a2 << 16) | ((a2 & 1) << 14)) & 0x64000 | (v3 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v5;
  *(_BYTE *)(result + 2) = BYTE2(v5);
  return result;
}

ValueMetadata *type metadata accessor for SQLOrdering.Impl()
{
  return &type metadata for SQLOrdering.Impl;
}

void sub_23C8CA858()
{
  void (*v0)(void);

  sub_23C7E3248();
  sub_23C7E3398();
  v0();
  sub_23C7E4C90();
}

uint64_t static FTS3TokenizerDescriptor.simple.getter()
{
  if (qword_256BCBA78 != -1)
    swift_once();
  sub_23C7E86C8(&qword_256BCDA38);
  return sub_23C7E8B74();
}

void sub_23C8CA8F8()
{
  qword_256BCDA38 = 0x656C706D6973;
  unk_256BCDA40 = 0xE600000000000000;
  qword_256BCDA48 = MEMORY[0x24BEE4AF8];
}

void sub_23C8CA924()
{
  qword_256BCDA50 = 0x726574726F70;
  *(_QWORD *)algn_256BCDA58 = 0xE600000000000000;
  qword_256BCDA60 = MEMORY[0x24BEE4AF8];
}

uint64_t static FTS3TokenizerDescriptor.porter.getter()
{
  if (qword_256BCBA80 != -1)
    swift_once();
  sub_23C7E86C8(&qword_256BCDA50);
  return sub_23C7E8B74();
}

void static FTS3TokenizerDescriptor.unicode61(diacritics:separators:tokenCharacters:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;

  v4 = *a1;
  sub_23C8CA9C8(&v4, a2, a3, a4);
}

void sub_23C8CA9C8(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v7 = MEMORY[0x24BEE4AF8];
  if (*a1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    if (*a1 == 1)
      goto LABEL_8;
    sub_23C7F16C0();
    v8 = v9;
    v11 = *(_QWORD *)(v9 + 16);
    v10 = *(_QWORD *)(v9 + 24);
    v12 = v11 + 1;
    v13 = "remove_diacritics=2";
  }
  else
  {
    sub_23C7F16C0();
    v8 = v14;
    v11 = *(_QWORD *)(v14 + 16);
    v10 = *(_QWORD *)(v14 + 24);
    v12 = v11 + 1;
    v13 = "remove_diacritics=0";
  }
  v15 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  if (v11 >= v10 >> 1)
  {
    sub_23C7F16C0();
    v8 = v47;
  }
  *(_QWORD *)(v8 + 16) = v12;
  v16 = v8 + 16 * v11;
  *(_QWORD *)(v16 + 32) = 0xD000000000000013;
  *(_QWORD *)(v16 + 40) = v15;
LABEL_8:
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    sub_23C7FD14C();
    v18 = v17;
    swift_bridgeObjectRelease();
    v55 = v18;
    sub_23C8CAEF8(&v55);
    v19 = v55;
    v20 = *(_QWORD *)(v55 + 16);
    if (v20)
    {
      v52 = a3;
      v53 = v8;
      v55 = v7;
      sub_23C7E649C();
      v21 = v55;
      v22 = (uint64_t *)(v19 + 40);
      do
      {
        v23 = *(v22 - 1);
        v24 = *v22;
        v55 = v21;
        v26 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        swift_bridgeObjectRetain();
        if (v26 >= v25 >> 1)
        {
          sub_23C7E649C();
          v21 = v55;
        }
        v22 += 2;
        *(_QWORD *)(v21 + 16) = v26 + 1;
        v27 = v21 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v23;
        *(_QWORD *)(v27 + 40) = v24;
        --v20;
      }
      while (v20);
      swift_release();
      v8 = v53;
      a3 = v52;
    }
    else
    {
      swift_release();
      v21 = MEMORY[0x24BEE4AF8];
    }
    v55 = v21;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    v55 = 0x6F74617261706573;
    v56 = 0xEB000000003D7372;
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v28 = v55;
    v29 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7F16C0();
      v8 = v48;
    }
    v30 = *(_QWORD *)(v8 + 16);
    v7 = MEMORY[0x24BEE4AF8];
    if (v30 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v8 = v49;
    }
    *(_QWORD *)(v8 + 16) = v30 + 1;
    v31 = v8 + 16 * v30;
    *(_QWORD *)(v31 + 32) = v28;
    *(_QWORD *)(v31 + 40) = v29;
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_23C7FD14C();
    v33 = v32;
    swift_bridgeObjectRelease();
    v55 = v33;
    sub_23C8CAEF8(&v55);
    v34 = v55;
    v35 = *(_QWORD *)(v55 + 16);
    if (v35)
    {
      v54 = v8;
      v55 = v7;
      sub_23C7E649C();
      v36 = v55;
      v37 = (uint64_t *)(v34 + 40);
      do
      {
        v39 = *(v37 - 1);
        v38 = *v37;
        v55 = v36;
        v41 = *(_QWORD *)(v36 + 16);
        v40 = *(_QWORD *)(v36 + 24);
        swift_bridgeObjectRetain();
        if (v41 >= v40 >> 1)
        {
          sub_23C7E649C();
          v36 = v55;
        }
        v37 += 2;
        *(_QWORD *)(v36 + 16) = v41 + 1;
        v42 = v36 + 16 * v41;
        *(_QWORD *)(v42 + 32) = v39;
        *(_QWORD *)(v42 + 40) = v38;
        --v35;
      }
      while (v35);
      swift_release();
      v8 = v54;
    }
    else
    {
      swift_release();
      v36 = MEMORY[0x24BEE4AF8];
    }
    v55 = v36;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    v55 = 0x6168636E656B6F74;
    v56 = 0xEB000000003D7372;
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v43 = v55;
    v44 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7F16C0();
      v8 = v50;
    }
    v45 = *(_QWORD *)(v8 + 16);
    if (v45 >= *(_QWORD *)(v8 + 24) >> 1)
    {
      sub_23C7F16C0();
      v8 = v51;
    }
    *(_QWORD *)(v8 + 16) = v45 + 1;
    v46 = v8 + 16 * v45;
    *(_QWORD *)(v46 + 32) = v43;
    *(_QWORD *)(v46 + 40) = v44;
  }
  *a4 = 0x3665646F63696E75;
  a4[1] = 0xE900000000000031;
  a4[2] = v8;
}

_QWORD *sub_23C8CAEAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for FTS3TokenizerDescriptor()
{
  return &type metadata for FTS3TokenizerDescriptor;
}

uint64_t sub_23C8CAEF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DEA28();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C8CAF60(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_23C8CAF60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      return sub_23C895B7C(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_146;
  v99 = result;
  v96 = a1;
  if (v3 <= 1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v102 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v36 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v8 = MEMORY[0x24BEE4AF8];
      goto LABEL_113;
    }
    v98 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v98 = result;
    v102 = (char *)(result + 32);
  }
  v6 = 0;
  v7 = *a1;
  v97 = v7 + 8;
  v8 = MEMORY[0x24BEE4AF8];
  v100 = v3;
  while (1)
  {
    v9 = v6++;
    if (v6 >= v3)
      goto LABEL_39;
    v10 = (uint64_t *)(v7 + 16 * v6);
    result = *v10;
    v11 = v10[1];
    v12 = (_QWORD *)(v7 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_38;
      v14 = 0;
    }
    else
    {
      result = sub_23C911A18();
      v14 = result;
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_30;
    }
    v16 = (_QWORD *)(v97 + 16 * v15);
    do
    {
      result = *(v16 - 1);
      v17 = (_QWORD *)(v7 + 16 * v6);
      if (result == *v17 && *v16 == v17[1])
      {
        if ((v14 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = sub_23C911A18();
        if (((v14 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v16 += 2;
      v19 = v15 + 1;
      v6 = v15;
      v15 = v19;
    }
    while (v19 < v3);
    v15 = v19;
LABEL_30:
    v6 = v15;
    if ((v14 & 1) != 0)
    {
LABEL_31:
      if (v15 < v9)
        goto LABEL_150;
      if (v9 < v15)
      {
        v20 = 16 * v15;
        v21 = 16 * v9;
        v22 = v15;
        v23 = v9;
        do
        {
          if (v23 != --v22)
          {
            if (!v7)
              goto LABEL_153;
            v24 = v7 + v20;
            v25 = *(_QWORD *)(v7 + v21);
            v26 = *(_QWORD *)(v7 + v21 + 8);
            *(_OWORD *)(v7 + v21) = *(_OWORD *)(v7 + v20 - 16);
            *(_QWORD *)(v24 - 16) = v25;
            *(_QWORD *)(v24 - 8) = v26;
          }
          ++v23;
          v20 -= 16;
          v21 += 16;
        }
        while (v23 < v22);
      }
LABEL_38:
      v6 = v15;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9))
        goto LABEL_145;
      if (v6 - v9 < v99)
        break;
    }
LABEL_59:
    if (v6 < v9)
      goto LABEL_140;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
    }
    v35 = *(_QWORD *)(v8 + 16);
    v34 = *(_QWORD *)(v8 + 24);
    v36 = v35 + 1;
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)sub_23C8DE884((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v36;
    v37 = v8 + 32;
    v38 = (uint64_t *)(v8 + 32 + 16 * v35);
    *v38 = v9;
    v38[1] = v6;
    if (v35)
    {
      v101 = v6;
      while (1)
      {
        v39 = v36 - 1;
        if (v36 >= 4)
        {
          v44 = v37 + 16 * v36;
          v45 = *(_QWORD *)(v44 - 64);
          v46 = *(_QWORD *)(v44 - 56);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_129;
          v49 = *(_QWORD *)(v44 - 48);
          v48 = *(_QWORD *)(v44 - 40);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_130;
          v51 = v36 - 2;
          v52 = (uint64_t *)(v37 + 16 * (v36 - 2));
          v54 = *v52;
          v53 = v52[1];
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_131;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_133;
          if (v56 >= v47)
          {
            v74 = (uint64_t *)(v37 + 16 * v39);
            v76 = *v74;
            v75 = v74[1];
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_139;
            v67 = v42 < v77;
            goto LABEL_97;
          }
        }
        else
        {
          if (v36 != 3)
          {
            v68 = *(_QWORD *)(v8 + 32);
            v69 = *(_QWORD *)(v8 + 40);
            v50 = __OFSUB__(v69, v68);
            v61 = v69 - v68;
            v62 = v50;
            goto LABEL_91;
          }
          v41 = *(_QWORD *)(v8 + 32);
          v40 = *(_QWORD *)(v8 + 40);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
        }
        if ((v43 & 1) != 0)
          goto LABEL_132;
        v51 = v36 - 2;
        v57 = (uint64_t *)(v37 + 16 * (v36 - 2));
        v59 = *v57;
        v58 = v57[1];
        v60 = __OFSUB__(v58, v59);
        v61 = v58 - v59;
        v62 = v60;
        if (v60)
          goto LABEL_134;
        v63 = (uint64_t *)(v37 + 16 * v39);
        v65 = *v63;
        v64 = v63[1];
        v50 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v50)
          goto LABEL_136;
        if (__OFADD__(v61, v66))
          goto LABEL_138;
        if (v61 + v66 >= v42)
        {
          v67 = v42 < v66;
LABEL_97:
          if (v67)
            v39 = v51;
          goto LABEL_99;
        }
LABEL_91:
        if ((v62 & 1) != 0)
          goto LABEL_135;
        v70 = (uint64_t *)(v37 + 16 * v39);
        v72 = *v70;
        v71 = v70[1];
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_137;
        if (v73 < v61)
          goto LABEL_108;
LABEL_99:
        v78 = v39 - 1;
        if (v39 - 1 >= v36)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        v79 = v7;
        if (!v7)
          goto LABEL_152;
        v80 = v8;
        v81 = (uint64_t *)(v37 + 16 * v78);
        v82 = *v81;
        v83 = v37;
        v84 = v39;
        v85 = (_QWORD *)(v37 + 16 * v39);
        v86 = v85[1];
        v87 = v79;
        result = sub_23C895F2C((char *)(v79 + 16 * *v81), (char *)(v79 + 16 * *v85), v79 + 16 * v86, v102);
        if (v1)
        {
LABEL_110:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v98 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v86 < v82)
          goto LABEL_126;
        if (v84 > *(_QWORD *)(v80 + 16))
          goto LABEL_127;
        *v81 = v82;
        *(_QWORD *)(v83 + 16 * v78 + 8) = v86;
        v88 = *(_QWORD *)(v80 + 16);
        if (v84 >= v88)
          goto LABEL_128;
        v8 = v80;
        v36 = v88 - 1;
        result = (uint64_t)memmove(v85, v85 + 2, 16 * (v88 - 1 - v84));
        v37 = v83;
        *(_QWORD *)(v80 + 16) = v88 - 1;
        v7 = v87;
        v6 = v101;
        if (v88 <= 2)
          goto LABEL_108;
      }
    }
    v36 = 1;
LABEL_108:
    v3 = v100;
    if (v6 >= v100)
    {
      v5 = v98;
LABEL_113:
      result = v8;
      v98 = v5;
      if (v36 >= 2)
      {
        v89 = *v96;
        do
        {
          v90 = v36 - 2;
          if (v36 < 2)
            goto LABEL_141;
          if (!v89)
            goto LABEL_154;
          v91 = result;
          v92 = *(_QWORD *)(result + 32 + 16 * v90);
          v93 = *(_QWORD *)(result + 32 + 16 * (v36 - 1) + 8);
          result = sub_23C895F2C((char *)(v89 + 16 * v92), (char *)(v89 + 16 * *(_QWORD *)(result + 32 + 16 * (v36 - 1))), v89 + 16 * v93, v102);
          if (v1)
            goto LABEL_110;
          if (v93 < v92)
            goto LABEL_142;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v91 = result;
          }
          if (v90 >= *(_QWORD *)(v91 + 16))
            goto LABEL_143;
          v94 = (_QWORD *)(v91 + 32 + 16 * v90);
          *v94 = v92;
          v94[1] = v93;
          v95 = *(_QWORD *)(v91 + 16);
          if (v36 > v95)
            goto LABEL_144;
          memmove((void *)(v91 + 32 + 16 * (v36 - 1)), (const void *)(v91 + 32 + 16 * v36), 16 * (v95 - v36));
          result = v91;
          *(_QWORD *)(v91 + 16) = v95 - 1;
          v36 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v98 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v9, v99))
    goto LABEL_148;
  if (v9 + v99 >= v3)
    v27 = v3;
  else
    v27 = v9 + v99;
  if (v27 >= v9)
  {
    if (v6 != v27)
    {
      v28 = (uint64_t *)(v7 + 16 * v6);
      do
      {
        v29 = (uint64_t *)(v7 + 16 * v6);
        result = *v29;
        v30 = v29[1];
        v31 = v9;
        v32 = v28;
        do
        {
          if (result == *(v32 - 2) && v30 == *(v32 - 1))
            break;
          result = sub_23C911A18();
          if ((result & 1) == 0)
            break;
          if (!v7)
            goto LABEL_151;
          result = *v32;
          v30 = v32[1];
          *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = result;
          v32 -= 2;
          ++v31;
        }
        while (v6 != v31);
        ++v6;
        v28 += 2;
      }
      while (v6 != v27);
      v6 = v27;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}

uint64_t sub_23C8CB600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

void sub_23C8CB694(char a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *(_BYTE *)(v1 + 16) = a1;
  sub_23C7DB390();
}

uint64_t sub_23C8CB6D0(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v3;
  return v1;
}

uint64_t sub_23C8CB70C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_23C9117C0())
  {
    v3 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x242625290](v3 - 4, a1);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 8 * v3);
        swift_retain();
      }
      v5 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      if (v7 == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v4;
      }
      swift_release();
      ++v3;
      if (v5 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23C8CB844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[40];
  _BYTE v17[40];
  _OWORD v18[3];
  char v19;
  _QWORD v20[23];

  sub_23C7DF56C(a6, (uint64_t)v17);
  sub_23C7E79A8(&qword_25430DA08);
  v10 = sub_23C7DB388();
  *(_OWORD *)(v10 + 16) = xmmword_23C912A20;
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  sub_23C7F96B0(v20);
  sub_23C7F96E0(v20, (void *)(v10 + 32));
  sub_23C7DF56C((uint64_t)v17, (uint64_t)v16);
  v13 = 0u;
  v14 = 0u;
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = v10;
  swift_bridgeObjectRetain();
  sub_23C7E0808();
  swift_bridgeObjectRetain();
  sub_23C811CFC((uint64_t)v16, (uint64_t)&v13);
  v19 = 2;
  v18[0] = v13;
  v18[1] = v14;
  v18[2] = v15;
  sub_23C7E7900((uint64_t)v17, &qword_25430DBD0);
  v11 = sub_23C81169C();
  sub_23C7E7900((uint64_t)v18, &qword_25430DA18);
  return v11;
}

void sub_23C8CB984(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C84AB34(a1, a2);
  *(_BYTE *)(a2 + 1) = 1;
  *(_BYTE *)(a2 + 40) = 0;
  if (*(unsigned __int8 *)(a2 + 88) == 255)
  {
    *(_OWORD *)(a2 + 72) = xmmword_23C919FA0;
    *(_BYTE *)(a2 + 88) = 0;
  }
  sub_23C7DB390();
}

void sub_23C8CB9CC(uint64_t a1, uint64_t a2)
{
  sub_23C8CBA14(a1, a2, &qword_25430CE90);
}

void sub_23C8CB9F0(uint64_t a1, uint64_t a2)
{
  sub_23C8CBA14(a1, a2, &qword_25430B600);
}

void sub_23C8CBA14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  id v5;

  v5 = *(id *)(v3 + 24);
  sub_23C7E79A8(a3);
  sub_23C911460();

}

uint64_t sub_23C8CBA94()
{
  return sub_23C8CBABC();
}

uint64_t sub_23C8CBAA8()
{
  return sub_23C8CBABC();
}

uint64_t sub_23C8CBABC()
{
  sub_23C8CBCFC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8CBB04(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *a1 = a2;
  return swift_bridgeObjectRetain();
}

void sub_23C8CBB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t v13;

  v11[0] = a2;
  v4 = sub_23C910D34();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v2 + 24);
  sub_23C7E79A8(&qword_25430D558);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23C912A20;
  v10 = v8;
  sub_23C910D28();
  v13 = v9;
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  sub_23C911574();
  v11[4] = a1;
  v11[5] = v11[0];
  v12 = v2;
  sub_23C7E79A8(&qword_256BCDA70);
  sub_23C911454();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

}

void sub_23C8CBCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  void *v5;
  id v6;

  v2 = sub_23C910D34();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_23C7EC60C();
  v5 = *(void **)(v0 + 24);
  sub_23C7E79A8(&qword_25430D558);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23C912A20;
  v6 = v5;
  sub_23C910D28();
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, v3, MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  sub_23C911574();
  sub_23C911454();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);

}

uint64_t sub_23C8CBE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v1;
  v10 = sub_23C911430();
  v5 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7E2548();
  sub_23C910D58();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE95C();
  v7 = sub_23C9113F4();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7EC60C();
  *(_QWORD *)(v1 + 16) = a1;
  sub_23C7E3048();
  sub_23C7E79A8(&qword_25430D560);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23C912A20;
  swift_bridgeObjectRetain();
  sub_23C9113E8();
  sub_23C7E45DC((unint64_t *)&qword_25430DBA8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_23C7E79A8(qword_25430D970);
  sub_23C88DDCC((unint64_t *)&qword_25430DBA0, qword_25430D970);
  sub_23C911574();
  sub_23C910D40();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, *MEMORY[0x24BEE5750], v10);
  v8 = sub_23C911478();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = v8;
  return v3;
}

uint64_t sub_23C8CC064(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  a1(&v8, &v7);
  result = swift_bridgeObjectRelease();
  if (!v3)
    return v8;
  return result;
}

uint64_t sub_23C8CC0F8(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = a3 + 16;
  swift_beginAccess();
  a1(&v7, v5);
  result = swift_endAccess();
  if (!v3)
    return v7;
  return result;
}

uint64_t sub_23C8CC170(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3 + 16;
  swift_beginAccess();
  a1(v4);
  return swift_endAccess();
}

uint64_t DatabasePool.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C84AB34(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, a1);
}

_QWORD *DatabasePool.makeSnapshot()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  type metadata accessor for Configuration();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD **)(v0 + 16);
  if ((sub_23C7DE1E0() & 1) != 0)
  {
    sub_23C8D29F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 209, (uint64_t)v4);
    if ((Database.isInsideTransaction.getter() & 1) != 0)
    {
      sub_23C7DC648();
      v13 = 775;
      sub_23C7DC484();
      sub_23C7E9418();
      sub_23C7E5F48();
    }
  }
  v6 = v4[3];
  v5 = v4[4];
  sub_23C84AB34(v4[2] + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, (uint64_t)v3);
  v13 = 0x746F687370616E73;
  v14 = 0xE90000000000002ELL;
  sub_23C7E0808();
  v7 = sub_23C7DC47C();
  v8 = sub_23C80149C(v7);
  swift_release();
  v15 = v8;
  sub_23C911880();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  v9 = v13;
  v10 = v14;
  type metadata accessor for DatabaseSnapshot();
  sub_23C7DB388();
  sub_23C7DC484();
  return sub_23C897144(v6, v5, (uint64_t)v3, 0xD000000000000011, v11, v9, v10);
}

void DatabasePool.asyncWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2)
{
  sub_23C8D1B1C(a1, a2);
  sub_23C7DB390();
}

void DatabasePool.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_semaphore_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = dispatch_semaphore_create(0);
  sub_23C7DDB10(&qword_25430CCC8);
  v7 = sub_23C911C04();
  sub_23C9114E4();
  v8 = swift_allocBox();
  sub_23C7DE70C(v9, 1, 1, v7);
  v10 = (_QWORD *)sub_23C7DB388();
  v10[2] = a3;
  v10[3] = v8;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = v6;
  sub_23C7DC590();
  swift_retain();
  v11 = v6;
  DatabasePool.asyncConcurrentRead(_:)((void (*)(void *, uint64_t))sub_23C8CEC74, (uint64_t)v10);
  swift_release();
  type metadata accessor for DatabaseFuture(0, a3, v12, v13);
  v14 = (_QWORD *)sub_23C7DB388();
  v14[2] = a3;
  v14[3] = v11;
  v14[4] = v8;
  sub_23C7F4BC4((uint64_t)sub_23C8CECA8, (uint64_t)v14);
}

uint64_t DatabasePool.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatabasePool.__allocating_init(path:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7EC5FC();
  v6 = swift_allocObject();
  DatabasePool.init(path:configuration:)(a1, a2, a3);
  return v6;
}

_QWORD *DatabasePool.init(path:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  intptr_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;

  v6 = v3;
  v25 = a1;
  v24[1] = *v3;
  sub_23C910D58();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7DE95C();
  v12 = v11 - v10;
  type metadata accessor for Configuration();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7EC60C();
  v3[3] = 0;
  sub_23C7E79A8(qword_25430D220);
  sub_23C7DB388();
  v3[4] = sub_23C8CB6D0(0);
  v14 = *(_QWORD *)(a3 + 96);
  if (v14 < 1)
  {
    sub_23C7DC648();
    v24[0] = 39;
    sub_23C7DC484();
    sub_23C7E9418();
    sub_23C7E5F48();
  }
  sub_23C84AB34(a3, v5);
  type metadata accessor for SerializedDatabase();
  sub_23C7DB388();
  sub_23C7E0808();
  sub_23C7DC484();
  v15 = sub_23C8D21C8();
  if (v4)
  {
    sub_23C7DB398();
    sub_23C7DF45C();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = v15;
    v16 = swift_allocBox();
    v18 = v17;
    sub_23C8CB984(a3, v17);
    *(_BYTE *)(v18 + 41) = 0;
    v19 = sub_23C7DB388();
    *(_QWORD *)(v19 + 16) = 0;
    sub_23C849508(v12);
    v20 = (_QWORD *)sub_23C7DB388();
    v21 = v25;
    v20[2] = v19;
    v20[3] = v21;
    v20[4] = a2;
    v20[5] = v16;
    sub_23C7E79A8(&qword_25430D218);
    sub_23C7DB388();
    sub_23C7E0808();
    swift_retain();
    swift_retain();
    v6[3] = sub_23C8CED1C(v14, v12, (uint64_t)sub_23C8CED00, (uint64_t)v20);
    v22 = swift_release();
    if ((*(_BYTE *)(a3 + 1) & 1) != 0)
    {
      sub_23C7DB398();
    }
    else
    {
      MEMORY[0x24BDAC7A8](v22);
      v24[-2] = v25;
      v24[-1] = a2;
      sub_23C7DC47C();
      sub_23C8A4EEC((uint64_t)sub_23C8CF0DC, (uint64_t)&v24[-4]);
      swift_release();
      sub_23C7DB398();
    }
    sub_23C8CCD2C();
    sub_23C7DF45C();
    swift_release();
    swift_release();
  }
  return v6;
}

uint64_t sub_23C8CC8A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v5 = type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)(a1 + 16);
  v9 = swift_projectBox();
  result = swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    *v8 = v12;
    swift_beginAccess();
    sub_23C84AB34(v9, (uint64_t)v7);
    v13[2] = 0x2E726564616572;
    v13[3] = 0xE700000000000000;
    v13[1] = v12;
    swift_bridgeObjectRetain();
    sub_23C911880();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    type metadata accessor for SerializedDatabase();
    swift_allocObject();
    result = (uint64_t)sub_23C8D21C8();
    if (!v2)
      *a2 = result;
  }
  return result;
}

void sub_23C8CCA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  Swift::String v17;
  __int128 *v18;
  uint64_t v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v7 = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4B00];
  v9 = sub_23C8CB844(a1, 0xD000000000000019, 0x800000023C91FC70, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)&v30);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E7900((uint64_t)&v30, &qword_25430DBD0);
  if (!v3)
  {
    if (!v11)
    {
LABEL_8:
      *(_QWORD *)&v30 = 0;
      *((_QWORD *)&v30 + 1) = 0xE000000000000000;
      sub_23C911634();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v30 = 0xD000000000000025;
      *((_QWORD *)&v30 + 1) = 0x800000023C91FC90;
      sub_23C910F5C();
      v15 = v30;
      sub_23C7EF5D4();
      swift_allocError();
      *(_DWORD *)v16 = 1;
      *(_OWORD *)(v16 + 8) = v15;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_BYTE *)(v16 + 56) = 0;
      swift_willThrow();
      return;
    }
    if (v9 == 7102839 && v11 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_23C911A18();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_8;
    }
    *(_QWORD *)&v30 = v7;
    *((_QWORD *)&v30 + 1) = v8;
    v17._countAndFlagsBits = 0xD00000000000001BLL;
    v17._object = (void *)0x800000023C91FCC0;
    v18 = &v30;
    Database.execute(sql:arguments:)(v17, *(GRDBInternal::StatementArguments *)(&v14 - 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v19)
    {
      v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      *(_QWORD *)&v30 = a2;
      *((_QWORD *)&v30 + 1) = a3;
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      v21 = (void *)sub_23C910E6C();
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v20, sel_fileExistsAtPath_, v21);

      if ((v22 & 1) == 0)
      {
        v23 = swift_retain();
        sub_23C8E6E98(v23, a1, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, v33, v34, v35, v36, v37, v38,
          v39,
          v40,
          v41);
      }
    }
  }
}

uint64_t sub_23C8CCCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v4;
  _QWORD *v5;
  _QWORD v7[2];

  v7[0] = MEMORY[0x24BEE4AF8];
  v7[1] = MEMORY[0x24BEE4B00];
  v4._object = (void *)0x800000023C91FCE0;
  v5 = v7;
  v4._countAndFlagsBits = 0xD000000000000050;
  Database.execute(sql:arguments:)(v4, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23C8CCD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  id v5;
  uint64_t v6;

  v1 = type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DatabasePool.configuration.getter((uint64_t)v3);
  v4 = v3[25];
  sub_23C84AB78((uint64_t)v3);
  if (v4 == 1)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (qword_256BCBA90 != -1)
      swift_once();
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_suspend_, qword_256BCDC08, 0);
    if (qword_256BCBA98 != -1)
      swift_once();
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_resume_, qword_256BCDC10, 0);

  }
}

void DatabasePool.deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  *(_QWORD *)(v0 + 24) = 0;
  swift_release();
  sub_23C7E58A8();
  sub_23C7E17F8();
  sub_23C8BB7E8();
  sub_23C7DB390();
}

uint64_t DatabasePool.__deallocating_deinit()
{
  DatabasePool.deinit();
  sub_23C7EC5FC();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8CCEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return DatabasePool.barrierWriteWithoutTransaction<A>(_:)(a1, a2, a3);
}

uint64_t DatabasePool.barrierWriteWithoutTransaction<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  if (*(_QWORD *)(v3 + 24))
  {
    v6 = MEMORY[0x24BDAC7A8](result);
    v9[2] = v7;
    v9[3] = v3;
    v9[4] = v6;
    v9[5] = v8;
    sub_23C7E62C0();
    sub_23C8D4C54((uint64_t)sub_23C8CF0F4, (uint64_t)v9, a2, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DatabasePool.asyncBarrierWriteWithoutTransaction(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  if (*(_QWORD *)(v2 + 24))
  {
    v4 = result;
    v5 = (_QWORD *)sub_23C7DB388();
    v5[2] = v2;
    v5[3] = v4;
    v5[4] = a2;
    sub_23C7DC590();
    sub_23C7DC47C();
    swift_retain();
    sub_23C8CE620((uint64_t)sub_23C8CF11C, (uint64_t)v5);
    sub_23C7E6604();
    return sub_23C7EDD04();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C8CD014()
{
  DatabasePool.unsafeReentrantWrite<A>(_:)();
}

void DatabasePool.unsafeReentrantWrite<A>(_:)()
{
  sub_23C8D201C();
  sub_23C7DE9A8();
}

Swift::Void __swiftcall DatabasePool.releaseMemory()()
{
  uint64_t v0;

  sub_23C8A4EEC((uint64_t)sub_23C88EB80, 0);
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23C7DC47C();
    sub_23C8CD148((uint64_t)sub_23C8CF128, v0);
    sub_23C7EE5D8();
  }
  else
  {
    sub_23C7E252C();
  }
}

uint64_t sub_23C8CD0B0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    swift_retain();
    sub_23C8CD104();
    result = swift_release();
  }
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_23C8CD104()
{
  swift_retain();
  sub_23C8CBABC();
  return swift_release();
}

uint64_t sub_23C8CD148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  unsigned __int8 v14;

  v13[0] = a2;
  v3 = v2;
  v5 = sub_23C910D34();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E79A8(&qword_25430D558);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23C912A20;
  sub_23C910D28();
  v13[7] = v10;
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, v6, MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  sub_23C911574();
  v13[4] = v3;
  v13[5] = a1;
  v13[6] = v13[0];
  sub_23C7E79A8(qword_25430B4A8);
  v11 = v13[1];
  sub_23C911454();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  return v14;
}

Swift::Void __swiftcall DatabasePool.releaseMemoryEventually()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    sub_23C7DC47C();
    sub_23C8CD104();
    swift_release();
  }
  sub_23C8D1B1C((uint64_t)sub_23C8CD330, 0);
  sub_23C7DB390();
}

void sub_23C8CD330()
{
  Database.releaseMemory()();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabasePool.close()()
{
  uint64_t v0;
  _QWORD v1[4];

  if (*(_QWORD *)(v0 + 24))
  {
    ((void (*)())MEMORY[0x24BDAC7A8])();
    v1[2] = sub_23C8CF140;
    v1[3] = v0;
    swift_retain();
    sub_23C8CD148((uint64_t)sub_23C8CF158, (uint64_t)v1);
    swift_release();
  }
  sub_23C7DEF1C();
}

uint64_t sub_23C8CD3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C8A4EEC((uint64_t)sub_23C8CFA40, 0);
  if (!v1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      swift_retain();
      sub_23C7DE22C();
      swift_release();
    }
    *(_QWORD *)(a1 + 24) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8CD460()
{
  return sub_23C8A4EEC((uint64_t)sub_23C88E760, 0);
}

Swift::Void __swiftcall DatabasePool.interrupt()()
{
  uint64_t v0;

  sub_23C8D1ADC();
  if (*(_QWORD *)(v0 + 24))
  {
    sub_23C7DC47C();
    sub_23C7DE22C();
    sub_23C7EE5D8();
  }
  else
  {
    sub_23C7E252C();
  }
}

void sub_23C8CD4E0()
{
  sub_23C8D1ADC();
}

void sub_23C8CD508()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E830C();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v1);
  DatabasePool.configuration.getter((uint64_t)&v3 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23C7DB55C();
  if ((v0 & 1) == 0)
    sub_23C8E9654();
  sub_23C7DB3A0();
}

void sub_23C8CD568()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E830C();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v1);
  DatabasePool.configuration.getter((uint64_t)&v3 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23C7DB55C();
  if ((v0 & 1) == 0)
    sub_23C8E9AD0();
  sub_23C7DB3A0();
}

uint64_t sub_23C8CD5EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_23C910938();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE95C();
  v9 = v8 - v7;
  sub_23C91092C();
  sub_23C7DC590();
  a4(v9);
  sub_23C7E6604();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void DatabasePool.asyncRead(_:)(void (*a1)(void), uint64_t a2)
{
  sub_23C8CDBB4(a1, a2, (uint64_t)&unk_250D8F2B0, (uint64_t)sub_23C8CF1A4);
}

void sub_23C8CD698(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v8 = v5;
    sub_23C7E79A8(&qword_25430CCC8);
    swift_willThrowTypedImpl();
    v9 = v5;
    a2(v5, 1);
    sub_23C8CF7E0(v5, v6, v7, 1);
    sub_23C8CF7E0(v5, v6, v7, 1);
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v6;
    *(_QWORD *)(v10 + 24) = v7;
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = sub_23C8CFA3C;
    v11[3] = v10;
    v11[4] = a2;
    v11[5] = a3;
    sub_23C8CF81C(v5, v6, v7, 0);
    swift_retain();
    swift_retain();
    sub_23C8D1B1C((uint64_t)sub_23C8CF8C8, (uint64_t)v11);
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_23C8CD7FC(void *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void *, uint64_t))
{
  void *v7;
  id v8;
  void *v9;
  char v11;

  v11 = 0;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v11);
  if (v7)
  {
    v8 = v7;
    a4(v7, 1);

  }
  else
  {
    sub_23C7DF1EC();
    a4(a1, 0);
  }
  Database.commit()();
  if (v9)

  return a2();
}

uint64_t sub_23C8CD8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_23C910D34();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23C910D58();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(v3 + 64);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v3;
  aBlock[4] = sub_23C8CF87C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C88B2C0;
  aBlock[3] = &unk_250D8A300;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_23C910D40();
  v18[1] = MEMORY[0x24BEE4AF8];
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, v7, MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  sub_23C911574();
  MEMORY[0x242625098](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void DatabasePool.unsafeRead<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_23C7E4F90(a1);
  v3 = swift_release();
  if (v2)
  {
    sub_23C7DC648();
    sub_23C7DC484();
    sub_23C7E9418();
    sub_23C7E5F48();
  }
  if (*(_QWORD *)(v1 + 24))
  {
    MEMORY[0x24BDAC7A8](v3);
    sub_23C7E454C();
    sub_23C7E1C6C((uint64_t (*)(char *))sub_23C8CF1AC);
    sub_23C7E9C34();
  }
  else
  {
    sub_23C7EF5D4();
    v4 = sub_23C7DB694();
    sub_23C7E8C64(v4, v5);
    sub_23C7E86DC(v6, v7);
  }
  sub_23C7E4BEC();
}

void DatabasePool.asyncUnsafeRead(_:)(void (*a1)(void), uint64_t a2)
{
  sub_23C8CDBB4(a1, a2, (uint64_t)&unk_250D8F2D8, (uint64_t)sub_23C8CF1CC);
}

void sub_23C8CDBB4(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v4 + 24))
  {
    v8 = sub_23C7DB388();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    sub_23C7DC590();
    sub_23C7E62C0();
    sub_23C8CD8D4(a4, v8);
    sub_23C7E6604();
    sub_23C7EDD04();
  }
  else
  {
    sub_23C7EF5D4();
    v9 = (void *)sub_23C7DB694();
    sub_23C7E8C64((uint64_t)v9, v10);
    *(_QWORD *)(v11 + 8) = v12;
    *(_QWORD *)(v11 + 16) = 0x800000023C91FB30;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_BYTE *)(v11 + 56) = 0;
    a1();

  }
}

void sub_23C8CDC7C(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v8 = v5;
    sub_23C7E79A8(&qword_25430CCC8);
    swift_willThrowTypedImpl();
    v9 = v5;
    a2(v5, 1);
    sub_23C8CF7E0(v5, v6, v7, 1);
    sub_23C8CF7E0(v5, v6, v7, 1);
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v6;
    *(_QWORD *)(v10 + 24) = v7;
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = sub_23C8CFA3C;
    v11[3] = v10;
    v11[4] = a2;
    v11[5] = a3;
    sub_23C8CF81C(v5, v6, v7, 0);
    swift_retain();
    swift_retain();
    sub_23C8D1B1C((uint64_t)sub_23C8CF810, (uint64_t)v11);
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_23C8CDDE0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD))
{
  uint64_t v7;

  sub_23C7DF1EC();
  v7 = a4(a1, 0);
  return a2(v7);
}

void DatabasePool.unsafeReentrantRead<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (sub_23C7E4F90(a1))
  {
    sub_23C8D201C();
    swift_release();
  }
  else if (*(_QWORD *)(v1 + 24))
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E454C();
    sub_23C7E1C6C((uint64_t (*)(char *))sub_23C8CF1D4);
    sub_23C7E9C34();
  }
  else
  {
    sub_23C7EF5D4();
    v2 = sub_23C7DB694();
    sub_23C7E8C64(v2, v3);
    sub_23C7E86DC(v4, v5);
  }
  sub_23C7E4BEC();
}

uint64_t sub_23C8CDF34(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[8];
  char v21;

  v20[1] = a6;
  sub_23C7DDB10(&qword_25430CCC8);
  v12 = sub_23C911C04();
  v13 = sub_23C9114E4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v20 - v15;
  v17 = swift_projectBox();
  v20[6] = a5;
  v20[7] = a1;
  v21 = a2 & 1;
  v20[4] = a7;
  v20[5] = a4;
  v18 = sub_23C7E79A8(&qword_256BCBC50);
  sub_23C8CFB70((void (*)(uint64_t))sub_23C8CF9BC, v18, (uint64_t)v16);
  sub_23C7DE70C((uint64_t)v16, 0, 1, v12);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v17, v16, v13);
  return sub_23C91149C();
}

void sub_23C8CE07C(uint64_t a1@<X8>)
{
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C88E1A4((void (*)(uint64_t))sub_23C8CF9CC, a1);
}

void DatabasePool.asyncConcurrentRead(_:)(void (*a1)(void *, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  __int128 v17;

  v6 = sub_23C910D70();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7E2548();
  sub_23C8D29F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 209, *(_QWORD *)(v2 + 16));
  if ((Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C7DC648();
    sub_23C7DC484();
    sub_23C9117B4();
    sub_23C7E5F48();
  }
  v8 = dispatch_semaphore_create(0);
  if (*(_QWORD *)(v2 + 24))
  {
    swift_retain();
    sub_23C7E79A8(&qword_256BCDA68);
    sub_23C911460();
    v14 = sub_23C7DB388();
    *(_OWORD *)(v14 + 16) = v17;
    v15 = (_QWORD *)sub_23C7DB388();
    v15[2] = sub_23C7DE2F8;
    v15[3] = v14;
    v15[4] = v8;
    v15[5] = a1;
    v15[6] = a2;
    sub_23C7DC590();
    v16 = v8;
    sub_23C7E62C0();
    sub_23C8D1B1C((uint64_t)sub_23C8CF6B8, (uint64_t)v15);
    swift_release();
    swift_release();
    sub_23C7E6604();
    swift_release();
  }
  else
  {
    sub_23C7EF5D4();
    v9 = (void *)sub_23C7DB694();
    sub_23C7E8C64((uint64_t)v9, v10);
    *(_QWORD *)(v11 + 8) = v12;
    *(_QWORD *)(v11 + 16) = 0x800000023C91FB30;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_BYTE *)(v11 + 56) = 0;
    swift_willThrow();
    sub_23C91149C();
    v13 = v9;
    a1(v9, 1);

  }
  sub_23C910D64();
  sub_23C911484();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_23C7DBCB0();
}

uint64_t sub_23C8CE338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  sub_23C7DDB10(&qword_25430CCC8);
  v1 = sub_23C911C04();
  v2 = sub_23C9114E4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - v4;
  v6 = sub_23C910D70();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_projectBox();
  sub_23C910D64();
  sub_23C911484();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
  result = sub_23C7DE718((uint64_t)v5, 1, v1);
  if ((_DWORD)result != 1)
    return sub_23C8CB600(v1, (uint64_t)&v14, v13);
  __break(1u);
  return result;
}

uint64_t sub_23C8CE4AC(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  void *v8;
  id v9;
  void *v10;
  char v12;

  v12 = 0;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v12);
  if (v8)
  {
    sub_23C91149C();
    v9 = v8;
    a5(v8, 1);

  }
  else
  {
    sub_23C7DF1EC();
    sub_23C91149C();
    a5(a1, 0);
  }
  Database.commit()();
  if (v10)

  return a2();
}

Swift::Void __swiftcall DatabasePool.invalidateReadOnlyConnections()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    sub_23C7DC47C();
    sub_23C8CD104();
    swift_release();
  }
  else
  {
    sub_23C7DB390();
  }
}

uint64_t sub_23C8CE5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a3;
  return sub_23C8A4EEC((uint64_t)sub_23C8CF9A0, (uint64_t)v4);
}

uint64_t sub_23C8CE620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = v2;
  v19 = a1;
  v21 = sub_23C910D58();
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910D34();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v3 + 56);
  sub_23C7E79A8(&qword_25430D558);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  sub_23C910D28();
  aBlock[0] = v13;
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, v9, MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  sub_23C911574();
  v14 = (_QWORD *)swift_allocObject();
  v15 = v19;
  v14[2] = v3;
  v14[3] = v15;
  v14[4] = a2;
  aBlock[4] = sub_23C8CF994;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C88B2C0;
  aBlock[3] = &unk_250D8F480;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_23C910D40();
  MEMORY[0x242625098](0, v7, v12, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
  return swift_release();
}

void DatabasePool.writeInTransaction(_:_:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[24];
  uint64_t v4;
  uint64_t v5;

  v3[16] = *a1;
  v4 = a2;
  v5 = a3;
  sub_23C8A4EEC((uint64_t)sub_23C88F058, (uint64_t)v3);
  sub_23C7E8904();
}

void DatabasePool._add<A>(observation:scheduling:onChange:)(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v36 = *v7;
  sub_23C7E830C();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7DE95C();
  v12 = v11 - v10;
  v13 = *a1;
  v28 = a1[1];
  v14 = a1[2];
  v29 = a1[3];
  v15 = a1[4];
  v30 = a1[5];
  v16 = a1[6];
  v31 = a1[7];
  v17 = a1[8];
  v32 = a1[9];
  v34 = *((unsigned __int8 *)a1 + 80);
  v18 = a1[11];
  v33 = a1[12];
  v19 = a1[13];
  DatabasePool.configuration.getter(v11 - v10);
  LODWORD(a1) = *(unsigned __int8 *)(v12 + 1);
  sub_23C84AB78(v12);
  if ((_DWORD)a1 == 1)
  {
    v42 = v13;
    v43 = v28;
    v44 = v14;
    v45 = v29;
    v46 = v15;
    v47 = v30;
    v48 = v16;
    v49 = v31;
    v50 = v17;
    v51 = v32;
    v52 = v34;
    v53 = v18;
    v54 = v33;
    v55 = v19;
    sub_23C8CFC88(a2, a3, a4, v36, a5, (uint64_t)&protocol witness table for DatabasePool, a6, a7);
  }
  else
  {
    if (v34)
    {
      v42 = v13;
      v43 = v28;
      sub_23C8CFAC0();
      v52 = 1;
      v53 = v18;
      v54 = v20;
      v55 = v19;
      sub_23C7F3064();
    }
    v42 = v13;
    v43 = v28;
    sub_23C8CFAC0();
    v52 = 0;
    v53 = v18;
    v54 = v21;
    v55 = v19;
    sub_23C8CEA84(&v42, v22, v23, v24, v25, v26, v27);
  }
  sub_23C7DBCB0();
}

uint64_t sub_23C8CEA84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  char *v11;
  void (*v12)(unint64_t);
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t __dst[10];

  v22[0] = a2;
  v23 = a4;
  v24 = a3;
  v25 = a7;
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, a1, sizeof(__dst));
  v13 = a1[11];
  v12 = (void (*)(unint64_t))a1[12];
  v22[2] = type metadata accessor for ValueConcurrentObserver(0, a5, a6, v14);
  swift_retain();
  swift_retain();
  v15 = sub_23C7F5600(v13);
  v12(v15);
  v16 = __dst[2];
  v17 = __dst[4];
  v18 = __dst[6];
  v19 = __dst[8];
  sub_23C7F5610(__dst[0]);
  sub_23C7F5610(v16);
  sub_23C7F5610(v17);
  sub_23C7F5610(v18);
  sub_23C7F5610(v19);
  v20 = v23;
  swift_retain();
  sub_23C8B667C(v22[1], v22[0], v13, (uint64_t)v11, (uint64_t)__dst, v24, v20);
  sub_23C8B701C(v25);
  return swift_release();
}

void sub_23C8CEBE8()
{
  DatabasePool.close()();
}

void sub_23C8CEC00(uint64_t a1)
{
  DatabasePool.read<A>(_:)(a1);
}

void sub_23C8CEC18(uint64_t a1)
{
  DatabasePool.unsafeRead<A>(_:)(a1);
}

void sub_23C8CEC30(uint64_t a1)
{
  DatabasePool.unsafeReentrantRead<A>(_:)(a1);
}

uint64_t sub_23C8CEC48()
{
  uint64_t v0;

  sub_23C7E17F8();
  sub_23C7DB484();

  return swift_deallocObject();
}

uint64_t sub_23C8CEC74(uint64_t a1, char a2)
{
  uint64_t *v2;

  return sub_23C8CDF34(a1, a2 & 1, v2[3], v2[4], v2[5], v2[6], v2[2]);
}

uint64_t sub_23C8CEC88()
{
  uint64_t v0;

  sub_23C8BB7E8();
  sub_23C7EC5FC();
  return swift_deallocObject();
}

uint64_t sub_23C8CECA8@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8CE338(a1);
}

uint64_t sub_23C8CECC4()
{
  return swift_deallocObject();
}

uint64_t sub_23C8CECD4()
{
  sub_23C7E58A8();
  swift_bridgeObjectRelease();
  sub_23C7DB484();
  return swift_deallocObject();
}

uint64_t sub_23C8CED00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CC8A4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_23C8CED1C(intptr_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[5];
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;

  v35 = sub_23C911430();
  v31 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v34 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23C9113F4();
  MEMORY[0x24BDAC7A8](v33);
  v32 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23C910D58();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E79A8(&qword_25430D188);
  swift_allocObject();
  v4[4] = sub_23C8CBE80(MEMORY[0x24BEE4AF8]);
  if (a1 < 1)
  {
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    v4[2] = a3;
    v4[3] = a4;
    v36 = v4;
    swift_retain();
    v4[5] = dispatch_semaphore_create(a1);
    v4[6] = dispatch_group_create();
    v27[4] = sub_23C7E3048();
    v28 = v11;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v30 = v12;
    v37 = v14;
    v29(v14, a2, v11);
    sub_23C7E79A8(&qword_25430D560);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_23C912A20;
    sub_23C9113E8();
    v38 = v15;
    sub_23C7E45DC((unint64_t *)&qword_25430DBA8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
    v27[1] = v16;
    v27[0] = sub_23C7E79A8(qword_25430D970);
    sub_23C88DDCC((unint64_t *)&qword_25430DBA0, qword_25430D970);
    v27[2] = v17;
    sub_23C911574();
    v18 = *MEMORY[0x24BEE5750];
    v27[3] = a4;
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 104);
    v20 = v34;
    v21 = v35;
    v19(v34, v18, v35);
    v22 = v37;
    v36[7] = sub_23C911478();
    v23 = v22;
    v24 = v28;
    v29(v23, a2, v28);
    v38 = MEMORY[0x24BEE4AF8];
    sub_23C911574();
    v19(v20, v18, v21);
    v25 = sub_23C911478();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a2, v24);
    result = (uint64_t)v36;
    v36[8] = v25;
  }
  return result;
}

void sub_23C8CF0DC(uint64_t a1)
{
  uint64_t v1;

  sub_23C8CCA2C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C8CF0F4()
{
  sub_23C7DDEE4();
  sub_23C7DE9A8();
}

uint64_t sub_23C8CF11C()
{
  uint64_t *v0;

  return sub_23C8CE5DC(v0[2], v0[3], v0[4]);
}

uint64_t sub_23C8CF128@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CD0B0(v1, a1);
}

uint64_t sub_23C8CF140()
{
  uint64_t v0;

  return sub_23C8CD3D8(v0);
}

uint64_t sub_23C8CF158@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = 0;
  return result;
}

uint64_t sub_23C8CF184()
{
  sub_23C7E17F8();
  return swift_deallocObject();
}

void sub_23C8CF1A4(uint64_t a1)
{
  uint64_t v1;

  sub_23C8CD698(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C8CF1AC()
{
  sub_23C7E1118();
  sub_23C7DDEB0();
}

void sub_23C8CF1CC(uint64_t a1)
{
  uint64_t v1;

  sub_23C8CDC7C(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C8CF1D4()
{
  sub_23C7E1118();
  sub_23C7DDEB0();
}

uint64_t sub_23C8CF1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 40);
  sub_23C911490();
  v4 = *(NSObject **)(a1 + 48);
  dispatch_group_enter(v4);
  swift_retain();
  sub_23C8CBB48((uint64_t)sub_23C8CF714, a1);
  if (v1)
  {
    swift_release();
    v6 = v3;
    sub_23C91149C();
    dispatch_group_leave(v4);
    swift_willThrow();
  }
  else
  {
    v7 = v5;
    swift_release();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = v7;
    v6 = *(_QWORD *)(v7 + 16);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_23C8CF750;
    *(_QWORD *)(v9 + 24) = v8;
    swift_retain();
    swift_retain();
  }
  return v6;
}

uint64_t sub_23C8CF304(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for SerializedDatabase();
  swift_getKeyPath();
  swift_retain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_23C8CB70C(v5);
  swift_release();
  v7 = swift_bridgeObjectRelease();
  if (v6)
  {
    *(_BYTE *)(v6 + 24) = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v11, v7);
    if (!v2)
    {
      v8 = v11;
      sub_23C7E79A8(&qword_256BCDA70);
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v8;
      *(_BYTE *)(v6 + 24) = 0;
      swift_retain();
      v9 = swift_retain();
      MEMORY[0x242624CE4](v9);
      sub_23C7DD090(*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10));
      sub_23C911148();
      sub_23C9110DC();
      swift_release();
    }
  }
  return v6;
}

void sub_23C8CF434()
{
  uint64_t v0;

  swift_retain();
  sub_23C8CBCFC();
  swift_release();
  sub_23C91149C();
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 48));
}

void sub_23C8CF4A4(void (*a1)(_QWORD *))
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  char v8;

  swift_retain();
  v2 = (void *)sub_23C8CF548();
  v4 = v3;
  v6 = v5;
  swift_release();
  v7[0] = v2;
  v7[1] = v4;
  v7[2] = v6;
  v8 = 0;
  a1(v7);
  sub_23C8CF7E0(v2, v4, v6, 0);
}

uint64_t sub_23C8CF548()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  sub_23C7E79A8(&qword_256BCDA68);
  result = sub_23C911460();
  if (!v0)
    return v2;
  return result;
}

_QWORD *sub_23C8CF5B4(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = sub_23C9113DC();
  result = a2(&v6, v4);
  if (!v2)
    return (_QWORD *)v6;
  return result;
}

uint64_t sub_23C8CF60C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = sub_23C9113DC();
  return a2(v3);
}

uint64_t sub_23C8CF644@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23C8CF1F4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_23C8CF670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CF644(v1, a1);
}

uint64_t sub_23C8CF688()
{
  uint64_t v0;

  sub_23C7E17F8();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8CF6B8(void *a1)
{
  uint64_t v1;

  return sub_23C8CE4AC(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(void *, uint64_t))(v1 + 40));
}

uint64_t method lookup function for DatabasePool()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabasePool.__allocating_init(path:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_23C8CF6EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_23C8CF304(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_23C8CF714@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C8CF6EC(a1, v2, a2);
}

uint64_t sub_23C8CF72C()
{
  sub_23C7E58A8();
  sub_23C7E17F8();
  return swift_deallocObject();
}

void sub_23C8CF750()
{
  sub_23C8CF434();
  sub_23C7DB390();
}

void sub_23C8CF770()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 24) = 1;
}

uint64_t sub_23C8CF77C@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = sub_23C8CC0F8(a1, a2, a3);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_23C8CF7A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CF77C(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_23C8CF7C8()
{
  return 8;
}

_QWORD *sub_23C8CF7D4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_23C8CF7E0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {

  }
  else
  {
    swift_release();
    swift_release();
  }
}

uint64_t sub_23C8CF810(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8CDDE0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t, _QWORD))(v1 + 32));
}

id sub_23C8CF81C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return a1;
  swift_retain();
  return (id)swift_retain();
}

void sub_23C8CF848()
{
  uint64_t v0;
  void (*v1)(uint64_t);

  sub_23C7E1118();
  sub_23C7DF1AC(v0, v1);
}

uint64_t sub_23C8CF860()
{
  sub_23C7E17F8();
  sub_23C8BB7E8();
  sub_23C7EC5FC();
  return swift_deallocObject();
}

void sub_23C8CF87C()
{
  uint64_t v0;

  sub_23C8CF4A4(*(void (**)(_QWORD *))(v0 + 16));
}

uint64_t sub_23C8CF888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_23C8CF898()
{
  return swift_release();
}

uint64_t sub_23C8CF8A4()
{
  sub_23C7E17F8();
  sub_23C7DB484();
  return swift_deallocObject();
}

uint64_t sub_23C8CF8C8(void *a1)
{
  uint64_t v1;

  return sub_23C8CD7FC(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void *, uint64_t))(v1 + 32));
}

_QWORD *sub_23C8CF8D4@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, uint64_t)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_23C8CF5B4(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t sub_23C8CF900(_QWORD *a1, uint64_t *a2)
{
  return sub_23C8CBB04(a1, *a2);
}

uint64_t sub_23C8CF918@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = sub_23C8CC064(a1, a2, a3);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_23C8CF940(_QWORD *a1)
{
  uint64_t v1;

  return sub_23C8CF900(a1, *(uint64_t **)(v1 + 16));
}

_QWORD *sub_23C8CF958@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CF8D4(*(_QWORD *)(v1 + 16), *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(v1 + 24), a1);
}

uint64_t sub_23C8CF978()
{
  sub_23C7E58A8();
  sub_23C8BB7E8();
  sub_23C7EC5FC();
  return swift_deallocObject();
}

uint64_t sub_23C8CF994()
{
  uint64_t v0;

  return sub_23C8CF60C(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

void sub_23C8CF9A0()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_23C7DE9A8();
}

void sub_23C8CF9BC()
{
  uint64_t v0;

  sub_23C7E1118();
  sub_23C8CE07C(v0);
}

uint64_t sub_23C8CF9CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v1 + 24))(*(_QWORD *)(v1 + 40));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_23C8CFA04()
{
  uint64_t v0;

  return sub_23C8CC170(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23C8CFA20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8CF918(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_23C8CFA40()
{
  sub_23C88E760();
}

void sub_23C8CFA70()
{
  sub_23C8CF848();
}

uint64_t sub_23C8CFA84()
{
  return sub_23C8CFA04();
}

uint64_t sub_23C8CFA98@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C8CFA20(a1);
}

uint64_t sub_23C8CFAAC(_QWORD *a1)
{
  return sub_23C8CF940(a1);
}

void sub_23C8CFAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 - 184) = v2;
  *(_QWORD *)(v8 - 176) = v1;
  *(_QWORD *)(v8 - 168) = v3;
  *(_QWORD *)(v8 - 160) = v0;
  *(_QWORD *)(v8 - 152) = v6;
  *(_QWORD *)(v8 - 144) = v7;
  *(_QWORD *)(v8 - 136) = v5;
  *(_QWORD *)(v8 - 128) = v4;
}

uint64_t sub_23C8CFAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_throwingResume();
}

uint64_t sub_23C8CFB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v6, a1, a4);
  return swift_continuation_throwingResumeWithError();
}

void sub_23C8CFB70(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  v10 = v9 - v8;
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE95C();
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13 - v12, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23C7E5F8C(a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32));
    sub_23C911C04();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_23C7E5F8C(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    a1(v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_23C7DBCB0();
}

void sub_23C8CFC88(_QWORD *a1@<X1>, void (*a2)(char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  void (*v25)(uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34[6];

  v32 = a4;
  v30 = a2;
  v31 = a3;
  v33 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  sub_23C7E9360(v34);
  v16 = a1[5];
  v17 = a1[6];
  sub_23C7E7E34(a1 + 2, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = v33;
    MEMORY[0x24BDAC7A8](v18);
    *(&v29 - 6) = v32;
    *(&v29 - 5) = a5;
    *(&v29 - 4) = a6;
    *(&v29 - 3) = a7;
    *(&v29 - 2) = (uint64_t)v34;
    (*(void (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>)))(a6 + 64))(sub_23C8D1840);
    v30(v15);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v15, AssociatedTypeWitness);
    v27 = type metadata accessor for AnyDatabaseCancellable();
    sub_23C7DB388();
    v28 = AnyDatabaseCancellable.init(cancel:)((uint64_t)nullsub_1, 0);
    v19[3] = v27;
    v19[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;
  }
  else
  {
    v20 = sub_23C7DB388();
    *(_BYTE *)(v20 + 16) = 0;
    v21 = (_QWORD *)sub_23C7DB388();
    v22 = v32;
    v21[2] = v32;
    v21[3] = a5;
    v21[4] = a6;
    v21[5] = a7;
    v21[6] = v20;
    sub_23C7E9360(v21 + 7);
    v23 = v30;
    v24 = v31;
    v21[21] = a1;
    v21[22] = v23;
    v21[23] = v24;
    v25 = *(void (**)(uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t))(a6 + 40);
    swift_retain();
    sub_23C83D298(v34);
    swift_retain();
    swift_retain();
    v25(sub_23C8D17F8, v21, v22, a6);
    swift_release();
    v26 = type metadata accessor for AnyDatabaseCancellable();
    sub_23C7DB388();
    swift_retain();
    v28 = AnyDatabaseCancellable.init(cancel:)((uint64_t)sub_23C8D1838, v20);
    v19 = v33;
    v33[3] = v26;
    v19[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;
    swift_release();
  }
  *v19 = v28;
  sub_23C7DBCB0();
}

uint64_t DatabaseReader.backup(to:pagesPerStep:progress:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD v16[4];
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  ObjectType = swift_getObjectType();
  v16[2] = a6;
  v16[3] = a7;
  v17 = v7;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  return (*(uint64_t (**)(void (*)(uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a2 + 24))(sub_23C8CFFBC, v16, MEMORY[0x24BEE4AE0] + 8, ObjectType, a2);
}

void sub_23C8CFFBC(uint64_t a1)
{
  uint64_t v1;

  sub_23C8CFFF0(a1, *(_DWORD *)(v1 + 40), 0, 0, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  sub_23C7DE9A8();
}

uint64_t sub_23C8CFFF0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[3];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9[2] = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  return (*(uint64_t (**)(void (*)(), _QWORD *, uint64_t, uint64_t, uint64_t))(a8 + 32))(sub_23C8D1720, v9, MEMORY[0x24BEE4AE0] + 8, a7, a8);
}

void sub_23C8D0040(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  sub_23C8E908C(a2, a3, a4, a5, a6);
  sub_23C7DE9A8();
}

uint64_t DatabaseReader.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C8D0090()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = swift_task_alloc();
  sub_23C7E19A8(v1);
  v2 = (_QWORD *)sub_23C7E66AC();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = sub_23C8D00EC;
  sub_23C7DFB24();
  return sub_23C7E4C00(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C8D00EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E06EC();
  if (v0)
    return sub_23C7E199C();
  swift_task_dealloc();
  return sub_23C7EC554(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_23C8D0134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  void (*v14)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v14 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a7 + 40);
  swift_retain();
  v14(sub_23C8D16F8, v13, a5, a7);
  return swift_release();
}

uint64_t sub_23C8D01D0(uint64_t a1)
{
  return sub_23C7F3774(a1, sub_23C8D0134);
}

uint64_t DatabaseReader.unsafeRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C8D01F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = swift_task_alloc();
  sub_23C7E19A8(v1);
  v2 = (_QWORD *)sub_23C7E66AC();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = sub_23C8D0254;
  sub_23C7DFB24();
  return sub_23C7E4C00(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C8D0254()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E06EC();
  if (v0)
    return sub_23C7E199C();
  swift_task_dealloc();
  return sub_23C7EC554(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_23C8D029C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C8D02D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  void (*v14)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v14 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a7 + 56);
  swift_retain();
  v14(sub_23C8D16F8, v13, a5, a7);
  return swift_release();
}

uint64_t sub_23C8D036C(uint64_t a1)
{
  return sub_23C7F3774(a1, sub_23C8D02D0);
}

uint64_t sub_23C8D0378(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v17;
  uint64_t v18;
  void *v19;

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  v13 = v12 - v11;
  if ((v14 & 1) != 0)
  {
    v17 = a1;
    sub_23C7E79A8(&qword_25430CCC8);
    swift_willThrowTypedImpl();
    v19 = a1;
    v18 = sub_23C7E79A8(&qword_25430CCC8);
    return sub_23C8CFB0C((uint64_t)&v19, a3, a7, v18);
  }
  else
  {
    v15 = swift_retain();
    a4(v15);
    sub_23C8BB610(a1, 0);
    sub_23C7E79A8(&qword_25430CCC8);
    return sub_23C8CFAD4(v13, a3, a7);
  }
}

void DatabaseReader.readPublisher<A>(value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = sub_23C7E3048();
  v12 = sub_23C911448();
  v11 = sub_23C7F3FDC();
  DatabaseReader.readPublisher<A, B>(receiveOn:value:)((uint64_t)&v12, a1, a2, a3, v10, a4, v11, a5);
}

void sub_23C8D051C()
{
  void *v0;

}

void DatabaseReader.readPublisher<A, B>(receiveOn:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[18];

  v16[4] = a4;
  v16[7] = a3;
  v16[8] = a6;
  v16[6] = a2;
  v16[12] = a1;
  v16[13] = a8;
  v16[9] = swift_getAssociatedTypeWitness();
  v10 = sub_23C9114E4();
  v16[10] = *(_QWORD *)(v10 - 8);
  v16[11] = v10;
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v11);
  v16[1] = (char *)v16 - v12;
  sub_23C7DDB10(&qword_25430CCC8);
  v13 = sub_23C910CC8();
  MEMORY[0x242626100](MEMORY[0x24BDB9E58], v13);
  v14 = sub_23C910CEC();
  v16[3] = *(_QWORD *)(v14 - 8);
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v15);
  v16[0] = MEMORY[0x242626100](MEMORY[0x24BDB9E90], v14);
  v16[14] = v14;
  v16[15] = a5;
  v16[16] = v16[0];
  v16[17] = a7;
  type metadata accessor for ReceiveValuesOn();
}

void sub_23C8D0674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v13 - 208) = *(_QWORD *)(a1 - 8);
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&a9 - v15;
  v17 = (_QWORD *)sub_23C7DB388();
  v17[2] = *(_QWORD *)(v13 - 192);
  v17[3] = v12;
  v18 = *(_QWORD *)(v13 - 160);
  v17[4] = v11;
  v17[5] = v18;
  v17[6] = v10;
  v19 = *(_QWORD *)(v13 - 176);
  v17[7] = *(_QWORD *)(v13 - 184);
  v17[8] = v19;
  v17[9] = *(_QWORD *)(v13 - 168);
  swift_unknownObjectRetain();
  swift_retain();
  sub_23C910CE0();
  v20 = *(_QWORD *)(v13 - 216);
  sub_23C7DE70C(v20, 1, 1, *(_QWORD *)(v13 - 152));
  sub_23C8979CC(*(_QWORD *)(v13 - 128), v20, v9, v12, *(_QWORD *)(v13 - 224), (uint64_t)v16);
}

void sub_23C8D0738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 144) + 8))(v1, *(_QWORD *)(v5 - 136));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(v3, v0);
  MEMORY[0x242626100](&unk_23C917C50, v4);
  **(_QWORD **)(v5 - 120) = sub_23C910D04();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 208) + 8))(v2, v4);
  sub_23C7DBCB0();
}

uint64_t sub_23C8D07A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  _QWORD *v17;
  uint64_t result;

  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C910CC8();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a1;
  v17[8] = a2;
  v17[9] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  result = sub_23C910CD4();
  *a9 = result;
  return result;
}

uint64_t sub_23C8D0888@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_23C8D07A4(v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t sub_23C8D089C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  void (*v18)(uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t);

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a9;
  v17[6] = a10;
  v17[7] = a1;
  v17[8] = a2;
  v17[9] = a4;
  v17[10] = a5;
  v18 = *(void (**)(uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t))(a9 + 40);
  swift_retain();
  swift_retain();
  v18(sub_23C8D164C, v17, a6, a9);
  return swift_release();
}

uint64_t sub_23C8D0960(uint64_t a1, char a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v21 = a5;
  v22 = a6;
  v23 = a4;
  v24 = a3;
  sub_23C7DDB10(&qword_25430CCC8);
  v15 = sub_23C911C04();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  v32 = a1;
  v33 = a2 & 1;
  v25 = a7;
  v26 = a8;
  v27 = a9;
  v28 = a10;
  v29 = a11;
  v30 = v21;
  v31 = v22;
  v19 = sub_23C7E79A8(&qword_256BCBC50);
  sub_23C8CFB70((void (*)(uint64_t))sub_23C8D1688, v19, (uint64_t)v18);
  v24(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void sub_23C8D0A7C(uint64_t a1@<X8>)
{
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C88E1A4((void (*)(uint64_t))sub_23C8D169C, a1);
}

uint64_t DatabasePublishers.Read.receive<A>(subscriber:)()
{
  sub_23C7E79A8(&qword_25430CCC8);
  return sub_23C910CB0();
}

uint64_t sub_23C8D0B48()
{
  return DatabasePublishers.Read.receive<A>(subscriber:)();
}

uint64_t sub_23C8D0B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  _QWORD v10[8];

  v10[7] = a1;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_23C7DE574(1, (uint64_t)sub_23C8D1860, (uint64_t)v10, AssociatedTypeWitness, a7);
}

uint64_t sub_23C8D0BE0@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[112];

  memcpy(v12, __src, sizeof(v12));
  v10 = type metadata accessor for ValueObservation(0, a3, a4, v9);
  return sub_23C83CED0(a2, v10, a5);
}

uint64_t sub_23C8D0C5C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *);
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t (*)(), char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;

  v38 = a8;
  v39 = a6;
  v42 = a7;
  v43 = a4;
  v40 = a5;
  swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v41 = sub_23C911C04();
  v14 = *(_QWORD *)(v41 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v41);
  v17 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v35 - v18;
  result = swift_beginAccess();
  if ((*(_BYTE *)(a3 + 16) & 1) == 0)
  {
    v36 = a10;
    v37 = &v35;
    v44 = a1;
    v45 = a2 & 1;
    MEMORY[0x24BDAC7A8](result);
    v35 = a11;
    v21 = v38;
    *(&v35 - 6) = v38;
    *(&v35 - 5) = a9;
    *(&v35 - 4) = v22;
    *(&v35 - 3) = a11;
    *(&v35 - 2) = (uint64_t)v43;
    v23 = sub_23C7E79A8(&qword_256BCBC50);
    sub_23C8CFB70((void (*)(uint64_t))sub_23C8D1880, v23, (uint64_t)v19);
    v24 = *(void (**)(char *, char *))(v14 + 16);
    v25 = v19;
    v37 = (uint64_t *)v19;
    v26 = v41;
    v24(v17, v25);
    v27 = (*(unsigned __int8 *)(v14 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v28 = (char *)swift_allocObject();
    *((_QWORD *)v28 + 2) = v21;
    *((_QWORD *)v28 + 3) = a9;
    v29 = v35;
    *((_QWORD *)v28 + 4) = v36;
    *((_QWORD *)v28 + 5) = v29;
    v30 = v39;
    *((_QWORD *)v28 + 6) = a3;
    *((_QWORD *)v28 + 7) = v30;
    *((_QWORD *)v28 + 8) = v42;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v28[v27], v17, v26);
    v31 = v43;
    memcpy(&v28[(v15 + v27 + 7) & 0xFFFFFFFFFFFFFFF8], v43, 0x70uLL);
    v32 = v40[5];
    v33 = v40[6];
    sub_23C7E7E34(v40 + 2, v32);
    v34 = *(void (**)(uint64_t (*)(), char *, uint64_t, uint64_t))(v33 + 8);
    swift_retain();
    swift_retain();
    sub_23C83D298(v31);
    v34(sub_23C8D19EC, v28, v32, v33);
    swift_release();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v37, v26);
  }
  return result;
}

void sub_23C8D0EE8(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C88E1A4((void (*)(uint64_t))sub_23C8D1AB0, a1);
}

uint64_t sub_23C8D0F74@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[112];

  memcpy(v15, __src, sizeof(v15));
  v13 = type metadata accessor for ValueObservation(0, a3, a4, v12);
  result = sub_23C83CED0(a2, v13, a6);
  if (v6)
    *a5 = v6;
  return result;
}

uint64_t sub_23C8D1000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  _QWORD v16[2];
  uint64_t v17;

  v16[0] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v7 = sub_23C911C04();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v16 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v16 - v13;
  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4, v7);
    sub_23C8CB600(v7, (uint64_t)&v17, (uint64_t)v14);
    ((void (*)(char *))v16[0])(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_23C8D1184(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t AnyDatabaseReader.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23C7DB388();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t AnyDatabaseReader.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void AnyDatabaseReader.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  sub_23C7DB3A0();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyDatabaseReader.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
}

Swift::Void __swiftcall AnyDatabaseReader.interrupt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  sub_23C7DB3A0();
}

void AnyDatabaseReader.read<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

void AnyDatabaseReader.asyncRead(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7E168C();
  sub_23C7DFB10(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 40));
  sub_23C7DF5B4();
}

void AnyDatabaseReader.unsafeRead<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

void AnyDatabaseReader.asyncUnsafeRead(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7E168C();
  sub_23C7DFB10(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 56));
  sub_23C7DF5B4();
}

void AnyDatabaseReader.unsafeReentrantRead<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

uint64_t AnyDatabaseReader._add<A>(observation:scheduling:onChange:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;

  v18 = a1[1];
  v19 = *a1;
  v16 = a1[3];
  v17 = a1[2];
  v9 = *((_QWORD *)a1 + 8);
  v10 = *((_QWORD *)a1 + 9);
  v11 = *((_BYTE *)a1 + 80);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v6 + 24);
  ObjectType = swift_getObjectType();
  v24[0] = v19;
  v24[1] = v18;
  v24[2] = v17;
  v24[3] = v16;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = a1[6];
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 72))(v24, a2, a3, a4, a5, a6, ObjectType, v13);
}

uint64_t AnyDatabaseReader.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t AnyDatabaseReader.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void sub_23C8D14C8()
{
  AnyDatabaseReader.close()();
}

void sub_23C8D14E0()
{
  AnyDatabaseReader.read<A>(_:)();
}

void sub_23C8D14F8()
{
  AnyDatabaseReader.unsafeRead<A>(_:)();
}

void sub_23C8D1510()
{
  AnyDatabaseReader.unsafeReentrantRead<A>(_:)();
}

uint64_t dispatch thunk of DatabaseReader.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DatabaseReader.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DatabaseReader.interrupt()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DatabaseReader.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of DatabaseReader.asyncRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of DatabaseReader.unsafeRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of DatabaseReader.asyncUnsafeRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of DatabaseReader.unsafeReentrantRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of DatabaseReader._add<A>(observation:scheduling:onChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t type metadata accessor for DatabasePublishers.Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabasePublishers.Read);
}

uint64_t type metadata accessor for AnyDatabaseReader()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyDatabaseReader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyDatabaseReader.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23C8D15F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C8D089C(a1, a2, v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_23C8D1624()
{
  sub_23C7E6DAC();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D164C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_23C8D0960(a1, a2 & 1, *(void (**)(char *))(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_23C8D1688(uint64_t a1@<X8>)
{
  sub_23C8D0A7C(a1);
}

uint64_t sub_23C8D169C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v1 + 56))(*(_QWORD *)(v1 + 72));
  if (v2)
    *a1 = v2;
  return result;
}

uint64_t sub_23C8D16D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D16FC(void *a1, char a2)
{
  uint64_t v2;

  return sub_23C8D0378(a1, a2 & 1, *(_QWORD *)(v2 + 40), *(void (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_23C8D1720()
{
  uint64_t v0;

  sub_23C8E908C(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_23C7DE9A8();
}

uint64_t sub_23C8D1750()
{
  return swift_deallocObject();
}

uint64_t sub_23C8D1760()
{
  _QWORD *v0;

  swift_release();
  if (v0[7])
    sub_23C7E6DAC();
  if (v0[9])
    swift_release();
  if (v0[11])
    swift_release();
  if (v0[13])
    swift_release();
  if (v0[15])
    swift_release();
  if (v0[18] >= 2uLL)
    swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D17F8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_23C8D0C5C(a1, a2 & 1, *(_QWORD *)(v2 + 48), (uint64_t *)(v2 + 56), *(_QWORD **)(v2 + 168), *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23C8D1838()
{
  uint64_t v0;

  return sub_23C8D1184(v0);
}

uint64_t sub_23C8D1840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C8D0B5C(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_23C8D1860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C8D0BE0(*(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

void sub_23C8D1880(uint64_t a1@<X8>)
{
  sub_23C8D0EE8(a1);
}

uint64_t sub_23C8D1890()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id *v5;
  _QWORD *v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v2 = *(_QWORD *)(sub_23C911C04() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_23C7E6DAC();
  v5 = (id *)(v0 + v3);
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  if (v6[2])
    swift_release();
  if (v6[4])
    swift_release();
  if (v6[6])
    swift_release();
  if (v6[8])
    swift_release();
  if (v6[11] >= 2uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D19EC()
{
  uint64_t *v0;
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C911C04() - 8) + 80);
  return sub_23C8D1000(v0[6], v0[7], v0[8], (uint64_t)v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_23C8D1AB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8D0F74(*(void **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a1, a2);
}

void sub_23C8D1ADC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  sqlite3_interrupt(*(sqlite3 **)(v1 + 16));
}

uint64_t sub_23C8D1B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v5 = sub_23C910D34();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23C910D58();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v2;
  aBlock[4] = sub_23C8D2B8C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C88B2C0;
  aBlock[3] = &unk_250D8A328;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_23C910D40();
  v16[1] = MEMORY[0x24BEE4AF8];
  sub_23C7E7A2C();
  sub_23C7E79A8(&qword_25430D600);
  sub_23C7E79E8();
  sub_23C911574();
  MEMORY[0x242625098](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_23C8D1CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  type metadata accessor for SchedulingWatchdog();
  if (sub_23C7E2FE0())
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = sub_23C7E5C18(v2);
    if ((v3 & 1) != 0)
    {
      v4 = Database.isInsideTransaction.getter();
      sub_23C8E93EC();
      if ((v4 & 1) == 0)
        sub_23C8D296C(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 172, a1);
      return swift_release();
    }
    else
    {
      MEMORY[0x24BDAC7A8](v3);
      sub_23C911460();
      return swift_release();
    }
  }
  else
  {
    MEMORY[0x24BDAC7A8](0);
    return sub_23C911460();
  }
}

uint64_t sub_23C8D1E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t result;
  BOOL v8;

  sub_23C7E40EC();
  if (!sub_23C7E3188())
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E79A8(qword_25430B4A8);
    result = sub_23C911460();
    if (v1)
      return result;
    return v8;
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_23C7E5C18(v3);
  if ((v4 & 1) != 0)
  {
    v5 = Database.isInsideTransaction.getter();
    Database.commit()();
    if ((v5 & 1) != 0)
    {
      if (v6)
      {

        sub_23C7DE904();
        return 1;
      }
      else
      {
        sub_23C7DE904();
        return 0;
      }
    }
    else
    {
      if (v6)

      v8 = v6 != 0;
      sub_23C8D296C(v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 172, a1);
      sub_23C7DE904();
    }
    return v8;
  }
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7E79A8(qword_25430B4A8);
  sub_23C911460();
  result = sub_23C7DE904();
  if (!v1)
    return v8;
  return result;
}

void sub_23C8D201C()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  sub_23C7DEF5C();
  v2 = v1;
  sub_23C7E40EC();
  if (sub_23C7E3188())
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = sub_23C7E5C18(v3);
    if ((v4 & 1) != 0)
    {
      v5 = Database.isInsideTransaction.getter();
      v2(v3);
      if ((v5 & 1) == 0)
        sub_23C8D296C(v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 172, v0);
      swift_release();
    }
    else
    {
      MEMORY[0x24BDAC7A8](v4);
      sub_23C7E63F8();
      swift_release();
    }
  }
  else
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E63F8();
  }
  sub_23C7DEF28();
}

uint64_t sub_23C8D2160(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  sub_23C8D29F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 209, v1);
  return a1(*(_QWORD *)(v1 + 16));
}

_QWORD *sub_23C8D21C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_23C7DEF5C();
  v39 = v2;
  v40 = v3;
  v38 = v1;
  v4 = v0;
  v6 = v5;
  v35 = v7;
  v36 = v8;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v37 = v15;
  v34 = *v0;
  v17 = type metadata accessor for Configuration();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v34 - v21;
  sub_23C84AB34(v12, (uint64_t)&v34 - v21);
  v22[*(int *)(v17 + 80)] = 1;
  v4[3] = v16;
  v4[4] = v14;
  swift_bridgeObjectRetain();
  v23 = sub_23C8498E8(v35, v10, v36, v6);
  v25 = v24;
  v26 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C84AB34((uint64_t)v22, (uint64_t)v20);
  type metadata accessor for Database();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v27 = v38;
  v28 = sub_23C8E9B08(v37, v14, v26, v25, (uint64_t)v20);
  if (v27)
  {
    swift_bridgeObjectRelease();
    sub_23C84AB78(v12);
    sub_23C84AB78((uint64_t)v22);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v4[2] = v28;
    if (v22[1] == 1)
      sub_23C849BC0(v26, v25);
    else
      sub_23C849994(v26, v25);
    v30 = v29;
    swift_bridgeObjectRelease();
    v4[5] = v30;
    sub_23C7E40EC();
    v31 = v4[2];
    swift_retain();
    v32 = v30;
    sub_23C8C9610(v31);
    swift_release();

    sub_23C911460();
    sub_23C84AB78(v12);
    sub_23C84AB78((uint64_t)v22);
  }
  return v4;
}

uint64_t sub_23C8D2414()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23C8E9304();
  if (v0)
  {
    sub_23C8E93EC();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23C8D2450()
{
  uint64_t v0;

  sub_23C8D1CE0(v0);
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

void sub_23C8D2498()
{
  sub_23C8E93EC();
}

uint64_t sub_23C8D24C0()
{
  sub_23C8D2450();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SerializedDatabase()
{
  return objc_opt_self();
}

void sub_23C8D2500(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  unsigned __int8 v5;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = Database.isInsideTransaction.getter();
  a2(v4);
  if ((v5 & 1) == 0)
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 159, a1);
}

void sub_23C8D2594()
{
  uint64_t v0;

  sub_23C8D2500(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_23C8D25B0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = Database.isInsideTransaction.getter();
  a2(&v6, v4);
  if ((v5 & 1) == 0)
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 159, a1);
}

uint64_t sub_23C8D2658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  type metadata accessor for SchedulingWatchdog();
  result = sub_23C7E2FE0();
  if (result)
  {
    v9 = result;
    swift_retain();
    sub_23C8C9700(a1, v9, a2, a3, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8D26F4()
{
  uint64_t *v0;

  return sub_23C8D2658(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_23C8D2710(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t result;
  uint64_t v7;
  char v8;

  type metadata accessor for SchedulingWatchdog();
  result = sub_23C7E2FE0();
  if (result)
  {
    v7 = result;
    swift_retain();
    v8 = sub_23C8C97D8(a1, v7, a2, a3);
    swift_release();
    return v8 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C8D27A4()
{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7DEF5C();
  v1 = v0;
  v3 = v2;
  sub_23C7E40EC();
  v4 = sub_23C7E3188();
  if (v4)
  {
    MEMORY[0x24BDAC7A8](v4);
    sub_23C8C9978(v3, v1);
    swift_release();
    sub_23C7DEF28();
  }
  else
  {
    __break(1u);
  }
}

void sub_23C8D2844()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  sub_23C7DEF5C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = Database.isInsideTransaction.getter();
  v3(v6);
  if ((v7 & 1) == 0)
    sub_23C8D296C(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, v1, v5);
  sub_23C7DEF28();
}

uint64_t sub_23C8D28C8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 16);
  result = a1(v3);
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 41) & 1) == 0)
  {
    result = (uint64_t)Database.isInsideTransaction.getter();
    if ((result & 1) != 0)
    {
      result = sub_23C9117B4();
      __break(1u);
    }
  }
  return result;
}

void sub_23C8D296C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*(_BYTE *)(*(_QWORD *)(a6 + 16) + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 41) & 1) == 0
    && (Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C7E8C78();
    __break(1u);
  }
  else
  {
    sub_23C7E0914();
  }
}

void sub_23C8D29F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(*(_QWORD *)(a5 + 16)) & 1) != 0)
  {
    sub_23C7E0914();
  }
  else
  {
    sub_23C7E8C78();
    __break(1u);
  }
}

void sub_23C8D2A7C(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  char v5;

  sub_23C8D25B0(a1, a2);
  if (!v3)
    *a3 = v5 & 1;
}

void sub_23C8D2AA8(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_23C8D2A7C(*(_QWORD *)(v1 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 24), a1);
}

uint64_t sub_23C8D2AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t)@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = sub_23C8D2710(a1, a2, a3);
  if (!v4)
    *a4 = result & 1;
  return result;
}

uint64_t sub_23C8D2AF0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23C8D2AC4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32), a1);
}

void sub_23C8D2B0C()
{
  sub_23C7E1C80();
  sub_23C8D2844();
}

void sub_23C8D2B28()
{
  sub_23C8D2BE4();
}

void sub_23C8D2B44()
{
  sub_23C7E1C80();
  sub_23C8D2844();
}

uint64_t sub_23C8D2B60()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D2B8C()
{
  uint64_t v0;

  return sub_23C8D28C8(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23C8D2B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_23C8D2BA8()
{
  return swift_release();
}

uint64_t sub_23C8D2BB0()
{
  return sub_23C8D2414();
}

void sub_23C8D2BC8()
{
  sub_23C8D2BE4();
}

void sub_23C8D2BE4()
{
  sub_23C8D27A4();
}

void sub_23C8D2C08()
{
  uint64_t v0;
  void (*v1)(uint64_t);

  v0 = sub_23C7E1C80();
  sub_23C8C9A78(v0, v1);
}

uint64_t sub_23C8D2C20()
{
  return static FetchableRecord.databaseDecodingUserInfo.getter();
}

uint64_t static FetchableRecord.databaseDecodingUserInfo.getter()
{
  sub_23C91176C();
  return sub_23C910DAC();
}

void sub_23C8D2C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_23C910800();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7DE95C();
  v4 = v3 - v2;
  v5 = sub_23C9107DC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE95C();
  v9 = v8 - v7;
  v10 = sub_23C9107D0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7DE95C();
  v14 = v13 - v12;
  sub_23C91083C();
  sub_23C7DF09C();
  sub_23C910830();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x24BDCB1B8], v10);
  sub_23C9107E8();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BDCB1C8], v5);
  sub_23C9107F4();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x24BDCB1F8], v0);
  sub_23C91080C();
  sub_23C91176C();
  sub_23C910DAC();
  sub_23C910824();
  sub_23C7DBCB0();
}

void static FetchableRecord.databaseJSONDecoder(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = sub_23C910800();
  v4 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  sub_23C7DE95C();
  v7 = v6 - v5;
  v8 = sub_23C9107DC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7DE95C();
  v12 = v11 - v10;
  v13 = sub_23C9107D0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7DE95C();
  v17 = v16 - v15;
  sub_23C91083C();
  sub_23C7DF09C();
  sub_23C910830();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v17, *MEMORY[0x24BDCB1B8], v13);
  sub_23C9107E8();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x24BDCB1C8], v8);
  sub_23C9107F4();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x24BDCB1F8], v18);
  sub_23C91080C();
  (*(void (**)(uint64_t))(a4 + 16))(a3);
  sub_23C910824();
  sub_23C7DBCB0();
}

void sub_23C8D2F48(uint64_t a1@<X8>)
{
  static FetchableRecord.databaseDateDecodingStrategy.getter(a1);
}

void sub_23C8D2F5C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void static FetchableRecord.databaseDateDecodingStrategy.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void sub_23C8D2F7C(_QWORD *a1@<X8>)
{
  static FetchableRecord.databaseColumnDecodingStrategy.getter(a1);
}

void FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8D2FC8(a1, a2, a3, a4, (void (*)(uint64_t))static FetchableRecord.fetchCursor<A>(_:_:));
}

{
  sub_23C8D57DC(a1, a2, a3, a4, (void (*)(uint64_t))static DatabaseValueConvertible.fetchCursor<A>(_:_:));
}

void FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8D2FC8(a1, a2, a3, a4, (void (*)(uint64_t))static FetchableRecord.fetchAll<A>(_:_:));
}

{
  sub_23C8D57DC(a1, a2, a3, a4, (void (*)(uint64_t))static DatabaseValueConvertible.fetchAll<A>(_:_:));
}

void sub_23C8D2FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;

  sub_23C7E6A0C();
  sub_23C7DB568();
  v6 = sub_23C7E262C();
  a5(v6);
  sub_23C7EE330();
}

uint64_t FetchRequest<>.fetchOne(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static FetchableRecord.fetchOne<A>(_:_:)(a1, AssociatedTypeWitness, a2, a4, a3, a5);
}

void FetchRequest<>.fetchSet(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7E6A0C();
  sub_23C7DB568();
  v7 = sub_23C7E262C();
  static FetchableRecord<>.fetchSet<A>(_:_:)(v7, v8, v9, v10, v11, a5, v5);
  sub_23C7EE330();
}

void static FetchableRecord.fetchCursor(_:sql:arguments:adapter:)()
{
  sub_23C8D3120();
}

void static FetchableRecord.fetchAll(_:sql:arguments:adapter:)()
{
  sub_23C8D3120();
}

void sub_23C8D3120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t);

  sub_23C7DEF5C();
  v139 = (uint64_t (*)(uint64_t))v5;
  sub_23C7E8C8C(v6, v7, v8, v9, v10, v11, v12, v5, v57, v0, v68, v73, v78, v83, v88, v93, v97, v101, v104, v107);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7DB388() + 16) = xmmword_23C912A20;
  v135 = v4;
  v136 = v3;
  v137 = v2;
  v138 = v1;
  v13 = sub_23C7F96B0(&v135);
  v21 = sub_23C7ECBF4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v58, v63, v69, v74, v79, v84, v89, v94, v98, v102, v105,
          v108,
          v110,
          v112,
          v114,
          v116,
          v118,
          v120,
          v122,
          v124,
          v126,
          v128,
          v129,
          v130,
          v131,
          v132,
          v133,
          v134,
          v135);
  sub_23C7E5EA4((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28, v59, v64);
  sub_23C7E1C8C();
  sub_23C7DB3B8();
  v29 = sub_23C7DBBB8();
  v31 = sub_23C7E17A4(v29, v30);
  *(_QWORD *)&v39 = sub_23C7E41C0(v31, v32, v33, v34, v35, v36, v37, v38, v60, v65, v70, v75, v80, v85, v90).n128_u64[0];
  sub_23C8D4BE8(v40, &qword_25430DBD0, v41, v42, v43, v44, v45, v46, v61, v66, v71, v76, v81, v86, v91, v95, v99, v39);
  sub_23C7DBD08();
  sub_23C7DF970((unint64_t *)&qword_25430CF08, v47, (uint64_t)&protocol conformance descriptor for SQLRequest<A>);
  v48 = sub_23C7E660C();
  v49 = v139(v48);
  sub_23C7EDF6C(v49, v50, v51, v52, v53, v54, v55, v56, v62, v67, v72, v77, v82, v87, v92, v96, v100, v103, v106,
    v109,
    v111,
    v113,
    v115,
    v117,
    v119,
    v121,
    v123,
    v125,
    v127);
  sub_23C7DEF28();
}

void sub_23C8D31F4()
{
  sub_23C8D2C70();
}

void static FetchableRecord<>.fetchSet(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  sub_23C7DEF5C();
  sub_23C7E8C8C(v4, v5, v6, v7, v8, v9, v10, v11, v61, v11, v72, v77, v82, v87, v92, v97, v101, v105, v108, v111);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7DB388() + 16) = xmmword_23C912A20;
  v139 = v3;
  v140 = v2;
  v141 = v1;
  v142 = v0;
  v12 = sub_23C7F96B0(&v139);
  v20 = sub_23C7ECBF4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v62, v67, v73, v78, v83, v88, v93, v98, v102, v106, v109,
          v112,
          v114,
          v116,
          v118,
          v120,
          v122,
          v124,
          v126,
          v128,
          v130,
          v132,
          v133,
          v134,
          v135,
          v136,
          v137,
          v138,
          v139);
  sub_23C7E5EA4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v63, v68);
  sub_23C7E1C8C();
  sub_23C7DB3B8();
  v28 = sub_23C7DBBB8();
  v30 = sub_23C7E17A4(v28, v29);
  *(_QWORD *)&v38 = sub_23C7E41C0(v30, v31, v32, v33, v34, v35, v36, v37, v64, v69, v74, v79, v84, v89, v94).n128_u64[0];
  sub_23C8D4BE8(v39, &qword_25430DBD0, v40, v41, v42, v43, v44, v45, v65, v70, v75, v80, v85, v90, v95, v99, v103, v38);
  sub_23C7DBD08();
  sub_23C7DF970((unint64_t *)&qword_25430CF08, v46, (uint64_t)&protocol conformance descriptor for SQLRequest<A>);
  v47 = sub_23C7E660C();
  v53 = static FetchableRecord<>.fetchSet<A>(_:_:)(v47, v48, v49, v50, v51, v71, v52);
  sub_23C7EDF6C(v53, v54, v55, v56, v57, v58, v59, v60, v66, v71, v76, v81, v86, v91, v96, v100, v104, v107, v110,
    v113,
    v115,
    v117,
    v119,
    v121,
    v123,
    v125,
    v127,
    v129,
    v131);
  sub_23C7DEF28();
}

void static FetchableRecord.fetchAll(_:arguments:adapter:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  sub_23C7E3454(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  if (!v8)
  {
    v11 = sub_23C91119C();
    v13 = type metadata accessor for RecordCursor(0, a4, a5, v12);
    MEMORY[0x242626100](MEMORY[0x24BEE12E8], v11);
    MEMORY[0x242626100](&protocol conformance descriptor for RecordCursor<A>, v13);
    RangeReplaceableCollection.init<A>(_:)(v11, (uint64_t)&v15);
  }
  sub_23C7DB764();
}

void static FetchableRecord<>.fetchSet(_:arguments:adapter:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  sub_23C7E3454(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  if (!v8)
  {
    sub_23C7DB778();
    v13 = type metadata accessor for RecordCursor(v9, v10, v11, v12);
    MEMORY[0x242626100](&protocol conformance descriptor for RecordCursor<A>, v13);
    sub_23C7DB778();
    Set.init<A>(_:)();
  }
  sub_23C7DB764();
}

uint64_t static FetchableRecord.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23C7DFD64(a1, 0, a3, a4, a5, a6);
  if (v6)
    return a2;
  a2 = v17;
  if (!v17)
  {
    sub_23C7F5610(0);
    sub_23C7F1754(0);
    v14[0] = 0;
    v14[1] = 0;
    v10 = swift_retain();
    static FetchableRecord.fetchCursor(_:arguments:adapter:)(v10, v14, (uint64_t)&v16, a3, a5);
    sub_23C7E2090();
    sub_23C812C40((uint64_t)&v15);
    sub_23C7DC4C4();
    return a2;
  }
  v12 = v18;
  v13 = sub_23C7DB388();
  *(_QWORD *)(v13 + 16) = v17;
  *(_QWORD *)(v13 + 24) = v12;
  sub_23C7F5610(a2);
  result = sub_23C8D4BCC((uint64_t)sub_23C8D3D28);
  __break(1u);
  return result;
}

void static FetchableRecord.fetchAll<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[8];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v28[40];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_23C7DFD64(v9, 0, v7, v5, v3, v1);
  if (!v0)
  {
    v31 = v29;
    if (v29)
    {
      v25 = v8;
      sub_23C7E16A0();
      v27 = 0uLL;
      v26 = v30;
      sub_23C7F5610(v29);
      v10 = swift_retain();
      static Row.fetchAll(_:arguments:adapter:)(v10, &v27, (uint64_t)v28);
      v16 = v15;
      sub_23C7DC4C4();
      v17 = sub_23C7E1200();
      v24[1] = v24;
      *(_QWORD *)&v27 = v16;
      MEMORY[0x24BDAC7A8](v17);
      v24[0] = v16;
      v18 = v25;
      v23[2] = v25;
      v23[3] = v6;
      v23[4] = v4;
      v23[5] = v2;
      v23[6] = v25;
      v19 = sub_23C7E79A8(qword_25430CAC0);
      sub_23C7E6ADC(&qword_256BCBCD0, v20, MEMORY[0x24BEE12E0]);
      sub_23C8C6CB8((void (*)(char *, uint64_t))sub_23C8D3D50, (uint64_t)v23, v19, v18, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
      sub_23C7E2090();
      sub_23C7F1754(v31);
      sub_23C7EE1E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = 0uLL;
      v11 = sub_23C7DF5CC();
      static FetchableRecord.fetchAll(_:arguments:adapter:)(v11, &v27, (uint64_t)v28, v8, v4, v12, v13, v14);
      sub_23C7E2090();
      sub_23C7EE1E0();
      sub_23C7DFE08();
    }
  }
  sub_23C7DEF28();
}

void static FetchableRecord.fetchOne(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[5];
  uint64_t v86[8];
  _QWORD v87[4];
  uint64_t v88;
  uint64_t v89;

  sub_23C7DEF5C();
  v88 = v0;
  v89 = v1;
  v59 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v15 = *v13;
  v14 = v13[1];
  sub_23C7DF56C(v16, (uint64_t)v85);
  sub_23C7E79A8(&qword_25430DA08);
  v17 = sub_23C7DB388();
  *(_OWORD *)(v17 + 16) = xmmword_23C912A20;
  v87[0] = v8;
  v87[1] = v6;
  v87[2] = v15;
  v87[3] = v14;
  v18 = sub_23C7F96B0(v87);
  v26 = sub_23C7ECBF4((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, v55, v59, v64, v66, v68, v70, v72, v75, v77, v79, v80,
          v81,
          v82,
          v83,
          v84,
          v85[0],
          v85[1],
          v85[2],
          v85[3],
          v85[4],
          v86[0],
          v86[1],
          v86[2],
          v86[3],
          v86[4],
          v86[5],
          v86[6],
          v86[7],
          v87[0]);
  sub_23C7E5EA4((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v56, v60);
  *(_QWORD *)&v73 = 0;
  *((_QWORD *)&v73 + 1) = v17;
  sub_23C7DB3B8();
  swift_bridgeObjectRetain();
  v34 = sub_23C7DBBB8();
  v36 = sub_23C7E17A4(v34, v35);
  *(_QWORD *)&v44 = sub_23C7E41C0(v36, v37, v38, v39, v40, v41, v42, v43, v57, v61, 0, 0, 0, 0, v73).n128_u64[0];
  sub_23C8D4BE8(v45, &qword_25430DBD0, v46, v47, v48, v49, v50, v51, v58, v62, v65, v67, v69, v71, v74, v76, v78, v44);
  v52 = sub_23C7DBD08();
  sub_23C7DF970((unint64_t *)&qword_25430CF08, v53, (uint64_t)&protocol conformance descriptor for SQLRequest<A>);
  static FetchableRecord.fetchOne<A>(_:_:)(v10, v4, v52, v63, v54, v12);
  sub_23C7E7900((uint64_t)v86, &qword_25430DA18);
}

uint64_t static FetchableRecord.fetchOne<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[40];
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  result = sub_23C7DFD64(a1, 1, a2, a3, a4, a5);
  if (!v6)
  {
    v12 = v37;
    if (v37)
    {
      v38 = a2;
      sub_23C7E16A0();
      v35 = 0uLL;
      sub_23C7F5610((uint64_t)v37);
      v13 = swift_retain();
      v22 = static Row.fetchOne(_:arguments:adapter:)(v13, &v35, (uint64_t)v36);
      v23 = swift_release();
      if (v22)
      {
        sub_23C7E79A8(&qword_25430DBC8);
        v27 = sub_23C7DB388();
        *(_OWORD *)(v27 + 16) = xmmword_23C9134B0;
        *(_QWORD *)(v27 + 32) = v22;
        *(_QWORD *)&v35 = v27;
        sub_23C9110DC();
        v28 = v35;
        swift_retain();
        v12(a1, v28);
        swift_bridgeObjectRelease();
        v29 = v38;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(v22, v38, a4);
        v30 = sub_23C8D4BCC((uint64_t)v12);
        sub_23C7DEB00(v30, v31, v32, v33);
        v34 = 0;
      }
      else
      {
        sub_23C7DEB00(v23, v24, v25, v26);
        sub_23C7F1754((uint64_t)v12);
        v34 = 1;
        v29 = v38;
      }
      return sub_23C7DE70C(a6, v34, 1, v29);
    }
    else
    {
      v35 = 0uLL;
      v14 = swift_retain();
      v18 = static FetchableRecord.fetchOne(_:arguments:adapter:)(v14, &v35, (uint64_t)v36, a2, a4, v15, v16, v17, a6);
      sub_23C7DEB00(v18, v19, v20, v21);
      return swift_release();
    }
  }
  return result;
}

uint64_t static FetchableRecord<>.fetchSet<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  (*(void (**)(uint64_t *__return_ptr))(a7 + 32))(&v45);
  if (!v7)
  {
    v49 = v47;
    if (v47)
    {
      v14 = v48;
      sub_23C7E16A0();
      v44 = 0uLL;
      sub_23C7F5610(v49);
      v15 = sub_23C7DF5CC();
      static Row.fetchAll(_:arguments:adapter:)(v15, &v44, (uint64_t)v46);
      sub_23C7DFE08();
      sub_23C7E1200();
      v28 = (_QWORD *)sub_23C7DB388();
      v28[2] = a3;
      v28[3] = a4;
      v28[4] = a5;
      v28[5] = a6;
      v28[6] = a7;
      v28[7] = a3;
      sub_23C7E79A8(&qword_256BCDB08);
      sub_23C7E6ADC(&qword_256BCDB10, v29, MEMORY[0x24BEE25B0]);
      sub_23C7DB778();
      sub_23C9117FC();
      sub_23C7DFE08();
      swift_bridgeObjectRelease();
      sub_23C7DDB10(qword_25430CAC0);
      sub_23C7E6ADC(&qword_256BCDB18, v30, MEMORY[0x24BEE12C8]);
      v31 = sub_23C911724();
      MEMORY[0x242626100](MEMORY[0x24BEE2B40], v31);
      a2 = sub_23C9112BC();
      v32 = sub_23C7F1754(v49);
      sub_23C8D4BB8(v32, v33, v34, v35, v36, v37, v38, v39, v40, a3, a6, v14);
    }
    else
    {
      a2 = a3;
      v44 = 0uLL;
      v16 = sub_23C7DF5CC();
      static FetchableRecord<>.fetchSet(_:arguments:adapter:)(v16, &v44, (uint64_t)v46, a3, a5, a6, v17, v18);
      sub_23C7E2090();
      sub_23C8D4BB8(v19, v20, v21, v22, v23, v24, v25, v26, v40, v41, v42, v43);
      sub_23C7DFE08();
    }
  }
  return a2;
}

uint64_t sub_23C8D3CDC(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*a1, *a2);
}

uint64_t sub_23C8D3D04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8D3D28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_23C8D3D50()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 8);
  swift_retain();
  sub_23C7DB778();
  return v1();
}

uint64_t sub_23C8D3DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 8);
  v8 = swift_retain();
  return v7(v8, a3, a5);
}

uint64_t sub_23C8D3DFC()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C8D3E08(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C8D3DA8(a1, v1[7], v1[2], v1[3], v1[4]);
}

uint64_t RecordCursor._isDone.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C7E6180();
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RecordCursor._isDone.modify())()
{
  sub_23C7E6180();
  return j__swift_endAccess;
}

uint64_t sub_23C8D3E88(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for RecordCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C8D3EB8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RecordCursor._isDone.modify();
  return sub_23C801E38;
}

uint64_t sub_23C8D3EFC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for RecordCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of FetchableRecord.init(row:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static FetchableRecord.databaseDecodingUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static FetchableRecord.databaseJSONDecoder(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static FetchableRecord.databaseDateDecodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static FetchableRecord.databaseColumnDecodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_23C8D3F50()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for RecordCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C8D3FB0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C824ABC(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseDateDecodingStrategy()
{
  return &type metadata for DatabaseDateDecodingStrategy;
}

ValueMetadata *type metadata accessor for DatabaseColumnDecodingStrategy()
{
  return &type metadata for DatabaseColumnDecodingStrategy;
}

uint64_t sub_23C8D4018()
{
  void (**v0)(uint64_t);
  void (*v1)(uint64_t);
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  v1 = *v0;
  if (!*v0)
  {
    sub_23C7DBBB8();
    sub_23C7EE074();
    return sub_23C7E69FC();
  }
  if (v1 == (void (*)(uint64_t))1)
  {
    v2 = sub_23C7EE074();
    sub_23C8D40EC(v2, v3);
    return sub_23C7E69FC();
  }
  swift_retain();
  v5 = sub_23C7EE074();
  v1(v5);
  sub_23C7E7E34(v6, v6[3]);
  sub_23C7EE074();
  sub_23C911C40();
  sub_23C7E69FC();
  sub_23C7EFD08((unint64_t)v1);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

void sub_23C8D40EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[6];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
LABEL_14:
    sub_23C7DBCC8();
    return;
  }
  v5 = 0;
  v6 = 4 * v4;
  v7 = 15;
  while (1)
  {
    if (sub_23C7EE5E8() == 95 && v8 == 0xE100000000000000)
    {
      sub_23C8D4BD4();
      goto LABEL_13;
    }
    v10 = sub_23C7E9A28();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      break;
LABEL_13:
    v7 = sub_23C7E6408();
    v5 = v7 >> 14;
    if (v7 >> 14 == v6)
      goto LABEL_14;
  }
  v11 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v11 = 11;
  v62 = v11 | (v4 << 16);
  sub_23C7EDD14();
  sub_23C7ED1AC();
  if (!v12)
  {
    if (sub_23C7EE5E8() == 95 && v13 == 0xE100000000000000)
    {
      sub_23C8D4BD4();
    }
    else
    {
      v15 = sub_23C7E9A28();
      sub_23C7E072C();
      if ((v15 & 1) == 0)
        goto LABEL_35;
    }
    sub_23C7EDD14();
    sub_23C7ED1AC();
    while (!v12)
    {
      if (sub_23C7EE5E8() == 95 && v16 == 0xE100000000000000)
      {
        sub_23C8D4BD4();
      }
      else
      {
        v18 = sub_23C7E9A28();
        sub_23C7E072C();
        if ((v18 & 1) == 0)
          break;
      }
      sub_23C7EDD14();
      sub_23C7ED1AC();
    }
  }
LABEL_35:
  if (v5 > 0xE100000000000000)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v64 = v6;
  v65 = sub_23C7E6408();
  if (v6 < v65 >> 14)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  sub_23C7DBCC8();
  sub_23C7E6408();
  v19 = sub_23C7E0AEC();
  v21 = v20;
  v22 = swift_bridgeObjectRelease();
  v63 = a1;
  *(_QWORD *)&v67 = 95;
  *((_QWORD *)&v67 + 1) = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v22);
  v60[2] = &v67;
  sub_23C7DB3B8();
  v23 = sub_23C8D46D4(0x7FFFFFFFFFFFFFFFLL, 1u, sub_23C8638E0, (uint64_t)v60, v19, v21);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 == 1)
  {
    swift_bridgeObjectRelease();
    sub_23C7DBCC8();
    sub_23C7E6408();
    sub_23C7E0AEC();
    swift_bridgeObjectRelease();
    v25 = sub_23C7E5848();
    v26 = MEMORY[0x242624B34](v25);
    v28 = v27;
    goto LABEL_49;
  }
  sub_23C7E79A8(&qword_25430DA10);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23C912A20;
  if (!v24)
    goto LABEL_61;
  v30 = v29;
  sub_23C7DBBB8();
  sub_23C7E5848();
  v31 = sub_23C9114F0();
  v33 = v32;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 40) = v33;
  v61 = v30;
  v34 = sub_23C8D4678(1, v23);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  swift_bridgeObjectRelease();
  v41 = v40 >> 1;
  v42 = (v40 >> 1) - v38;
  if (__OFSUB__(v40 >> 1, v38))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (!v42)
  {
LABEL_48:
    swift_unknownObjectRelease();
    *(_QWORD *)&v67 = v61;
    sub_23C7FAE44();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    v26 = sub_23C910E3C();
    v28 = v53;
LABEL_49:
    swift_bridgeObjectRelease();
    v54 = v64;
    v55 = v65 >> 14;
    if (v7 >> 14)
    {
      v56 = sub_23C7E0AEC();
      MEMORY[0x242624B34](v56);
      swift_bridgeObjectRelease();
      if (v55 == v54)
      {
        sub_23C8D4BDC();
        sub_23C7E9C40();
        swift_bridgeObjectRelease();
LABEL_57:
        swift_bridgeObjectRelease();
        return;
      }
      sub_23C8D4BDC();
      sub_23C7E9C40();
      swift_bridgeObjectRelease();
      sub_23C7E072C();
      v28 = *((_QWORD *)&v67 + 1);
      v58 = v67;
      v59 = sub_23C7E0AEC();
      MEMORY[0x242624B34](v59);
      sub_23C7E6F14();
      *(_QWORD *)&v67 = v58;
    }
    else
    {
      if (v55 == v64)
        return;
      v57 = sub_23C7E0AEC();
      MEMORY[0x242624B34](v57);
      sub_23C7E6F14();
      *(_QWORD *)&v67 = v26;
    }
    *((_QWORD *)&v67 + 1) = v28;
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    sub_23C7E072C();
    goto LABEL_57;
  }
  v60[5] = v34;
  v70 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  if ((v42 & 0x8000000000000000) == 0)
  {
    v43 = v70;
    v44 = (uint64_t *)(v36 + 32 * v38 + 24);
    v66 = a2;
    while (v38 < v41)
    {
      v45 = v41;
      v46 = *(v44 - 1);
      v47 = *v44;
      v67 = *(_OWORD *)(v44 - 3);
      v68 = v46;
      v69 = v47;
      sub_23C8D4B4C();
      v48 = sub_23C91152C();
      v50 = v49;
      v70 = v43;
      v51 = *(_QWORD *)(v43 + 16);
      if (v51 >= *(_QWORD *)(v43 + 24) >> 1)
      {
        sub_23C7E649C();
        v43 = v70;
      }
      *(_QWORD *)(v43 + 16) = v51 + 1;
      v52 = v43 + 16 * v51;
      *(_QWORD *)(v52 + 32) = v48;
      *(_QWORD *)(v52 + 40) = v50;
      ++v38;
      v44 += 4;
      v41 = v45;
      if (v45 == v38)
        goto LABEL_48;
    }
    __break(1u);
    goto LABEL_59;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_23C8D4678(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8D46D4(uint64_t result, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[4];

  v46[3] = a4;
  if (result < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  v9 = result;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v35 = (unint64_t *)(v10 + 16);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = a5;
  if (!v9 || (v44 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    sub_23C8D4A8C(a6, v42, a2 & 1, v10);
    swift_bridgeObjectRelease();
    a6 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  v43 = MEMORY[0x24BEE4AF8];
  v11 = a5;
  v12 = a5;
  v39 = a5;
  while (1)
  {
    v46[0] = sub_23C911508();
    v46[1] = v13;
    v14 = a3(v46);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a6;
    }
    v15 = v14;
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v11 = sub_23C9114FC();
      goto LABEL_21;
    }
    v16 = (v12 >> 14 == v11 >> 14) & a2;
    if (v16 != 1)
    {
      if (v11 >> 14 < v12 >> 14)
      {
        __break(1u);
        goto LABEL_32;
      }
      v17 = sub_23C911514();
      v38 = v18;
      v40 = v17;
      v36 = v20;
      v37 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F2274();
        v43 = v24;
      }
      v21 = *(_QWORD *)(v43 + 16);
      if (v21 >= *(_QWORD *)(v43 + 24) >> 1)
      {
        sub_23C7F2274();
        v43 = v25;
      }
      *(_QWORD *)(v43 + 16) = v21 + 1;
      v22 = (_QWORD *)(v43 + 32 * v21);
      v22[4] = v40;
      v22[5] = v38;
      v22[6] = v37;
      v22[7] = v36;
      *v35 = v43;
    }
    v23 = sub_23C9114FC();
    v11 = v23;
    *(_QWORD *)(v42 + 16) = v23;
    if ((v16 & 1) == 0 && *(_QWORD *)(v43 + 16) == v9)
      break;
    v12 = v23;
    v39 = v23;
LABEL_21:
    if (v44 == v11 >> 14)
      goto LABEL_25;
  }
  v39 = v23;
  v12 = v23;
LABEL_25:
  if (v44 == v12 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a6 = v43;
  }
  else
  {
    result = v39;
    if (v44 < v39 >> 14)
      goto LABEL_33;
    v26 = sub_23C911514();
    v28 = v27;
    v30 = v29;
    v32 = v31;
    swift_bridgeObjectRelease();
    sub_23C7F1338();
    v33 = *(_QWORD *)(*v35 + 16);
    sub_23C7F1564();
    a6 = *v35;
    *(_QWORD *)(a6 + 16) = v33 + 1;
    v34 = (_QWORD *)(a6 + 32 * v33);
    v34[4] = v26;
    v34[5] = v28;
    v34[6] = v30;
    v34[7] = v32;
    *v35 = a6;
  }
  swift_bridgeObjectRetain();
  swift_release();
LABEL_5:
  swift_release();
  return a6;
}

unint64_t sub_23C8D4A8C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t result;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  result = *(_QWORD *)(a2 + 16);
  v6 = (result >> 14 == a1 >> 14) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (a1 >> 14 >= result >> 14)
  {
    v8 = sub_23C911514();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    sub_23C7F1338();
    v15 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_23C7F1564();
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = (_QWORD *)(v16 + 32 * v15);
    v17[4] = v8;
    v17[5] = v10;
    v17[6] = v12;
    v17[7] = v14;
    return v6 ^ 1u;
  }
  __break(1u);
  return result;
}

unint64_t sub_23C8D4B4C()
{
  unint64_t result;

  result = qword_256BCDB20;
  if (!qword_256BCDB20)
  {
    result = MEMORY[0x242626100](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_256BCDB20);
  }
  return result;
}

uint64_t sub_23C8D4B88()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C8D4BAC()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C8D4BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return sub_23C812C40((uint64_t)va);
}

uint64_t sub_23C8D4BC0()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C8D4BCC(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C8D4BD4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8D4BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v0;
  *(_QWORD *)(v2 - 120) = v1;
  return swift_bridgeObjectRetain();
}

void sub_23C8D4BE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_23C7E7900((uint64_t)va, a2);
}

uint64_t sub_23C8D4BF0()
{
  return swift_initClassMetadata2();
}

void sub_23C8D4C54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a4;
  v5 = v4;
  v14 = a2;
  v8 = sub_23C910D34();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E79A8(&qword_25430D558);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23C912A20;
  sub_23C910D28();
  v20 = v12;
  sub_23C7E7A2C();
  sub_23C7E79A8(&qword_25430D600);
  sub_23C7E79E8();
  sub_23C911574();
  v16 = a3;
  v17 = v5;
  v18 = a1;
  v19 = v14;
  sub_23C911454();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_23C7DEF28();
}

uint64_t sub_23C8D4D94()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
}

uint64_t sub_23C8D4DA4(uint64_t a1, char a2)
{
  swift_allocObject();
  return sub_23C8D4DEC(a1, a2);
}

uint64_t sub_23C8D4DEC(uint64_t a1, char a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  *(_BYTE *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96)) = a2;
  return v2;
}

uint64_t sub_23C8D4E34()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t sub_23C8D4E60()
{
  sub_23C8D4E34();
  return swift_deallocClassInstance();
}

id *sub_23C8D4E80()
{
  id *v0;

  sub_23C7E17F8();
  swift_release();

  return v0;
}

uint64_t sub_23C8D4EC0()
{
  sub_23C8D4E80();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Pool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Pool);
}

uint64_t sub_23C8D4EEC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23C8D4F64()
{
  sub_23C7E17F8();
  return swift_deallocObject();
}

uint64_t sub_23C8D4F84()
{
  swift_release();
  sub_23C7E17F8();
  return swift_deallocObject();
}

uint64_t sub_23C8D4FB4()
{
  return 8;
}

_QWORD *sub_23C8D4FC0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23C8D4FCC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  v2 = sub_23C9113DC();
  return v1(v2);
}

void sub_23C8D5020(uint64_t a1@<X8>)
{
  id v2;

  v2 = (id)sub_23C910A64();
  NSURL.databaseValue.getter(a1);

}

void *sub_23C8D505C@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSNull, a1);
}

void *DatabaseValueConvertible.sqlExpression.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __int128 v4;
  char v5;
  __int128 v6;
  char v7;

  (*(void (**)(__int128 *__return_ptr))(a1 + 24))(&v4);
  v6 = v4;
  v7 = v5;
  sub_23C8027EC((uint64_t)&v6);
  return sub_23C800B48(&v6, a2);
}

uint64_t sub_23C8D50BC(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

uint64_t sub_23C8D50C8(Swift::OpaquePointer a1, Swift::Int32 a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;

  v4 = (void *)sub_23C910A64();
  NSURL.databaseValue.getter((uint64_t)v10);

  v5 = v10[0];
  v6 = v10[1];
  v7 = v11;
  v8 = DatabaseValue.bind(to:at:)(a1, a2);
  sub_23C7E5640(v5, v6, v7);
  return v8;
}

uint64_t sub_23C8D514C(sqlite3_stmt *a1, int a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void (__cdecl *v8)(void *);
  uint64_t v9;
  uint64_t v10;

  if (qword_25430B418 != -1)
    swift_once();
  v4 = (void *)qword_25430B410;
  v5 = (void *)sub_23C910B3C();
  v6 = objc_msgSend(v4, sel_stringFromDate_, v5);

  sub_23C910E78();
  v7 = qword_25430D368;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = (void (__cdecl *)(void *))qword_254310430;
  v9 = sub_23C910EFC();
  v10 = sqlite3_bind_text(a1, a2, (const char *)(v9 + 32), -1, v8);
  swift_bridgeObjectRelease_n();
  swift_release();
  return v10;
}

uint64_t sub_23C8D5268(Swift::OpaquePointer a1, Swift::Int32 a2)
{
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16 = sub_23C910B9C();
  LOWORD(v17) = v4;
  BYTE2(v17) = v5;
  BYTE3(v17) = v6;
  BYTE4(v17) = v7;
  BYTE5(v17) = v8;
  BYTE6(v17) = v9;
  HIBYTE(v17) = v10;
  v11 = MEMORY[0x242624738](&v16, 16);
  v13 = v12;
  v16 = v11;
  v17 = v12;
  v18 = 3;
  v14 = DatabaseValue.bind(to:at:)(a1, a2);
  sub_23C7EEE1C(v11, v13);
  return v14;
}

uint64_t sub_23C8D538C(sqlite3_stmt *a1, int a2)
{
  uint64_t v4;
  void (__cdecl *v5)(void *);
  uint64_t v6;
  uint64_t v7;

  v4 = qword_25430D368;
  swift_bridgeObjectRetain_n();
  if (v4 != -1)
    swift_once();
  v5 = (void (__cdecl *)(void *))qword_254310430;
  v6 = sub_23C910EFC();
  v7 = sqlite3_bind_text(a1, a2, (const char *)(v6 + 32), -1, v5);
  swift_bridgeObjectRelease_n();
  swift_release();
  return v7;
}

uint64_t sub_23C8D5444(Swift::OpaquePointer a1, Swift::Int32 a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  DatabaseDateComponents.databaseValue.getter((uint64_t)v9);
  v4 = v9[0];
  v5 = v9[1];
  v6 = v10;
  v7 = DatabaseValue.bind(to:at:)(a1, a2);
  sub_23C7E5640(v4, v5, v6);
  return v7;
}

uint64_t sub_23C8D54C0(sqlite3_stmt *a1, int a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  __int16 v5;
  __int16 v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void (__cdecl *v21)(void *);
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unsigned int v26;
  sqlite3_stmt *v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v28 = a2;
  v27 = a1;
  v8 = HIDWORD(a3);
  v9 = HIWORD(a3);
  v10 = a4 >> 16;
  v11 = HIDWORD(a4);
  v25 = HIWORD(a4);
  v26 = HIWORD(a5);
  v12 = sub_23C910BCC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_allocWithZone(MEMORY[0x24BDD1518]);
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v6;
  v33 = v10;
  v34 = v11;
  v35 = v25;
  v36 = v5;
  v37 = v26;
  v17 = objc_msgSend(v16, sel_initWithDecimal_, &v29);
  sub_23C910BB4();
  v18 = (void *)sub_23C910BC0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19 = objc_msgSend(v17, sel_descriptionWithLocale_, v18);

  sub_23C910E78();
  v20 = qword_25430D368;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    swift_once();
  v21 = (void (__cdecl *)(void *))qword_254310430;
  v22 = sub_23C910EFC();
  v23 = sqlite3_bind_text(v27, v28, (const char *)(v22 + 32), -1, v21);
  swift_bridgeObjectRelease_n();
  swift_release();
  return v23;
}

Swift::Int32 __swiftcall DatabaseValueConvertible.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  Swift::Int32 v8;
  _QWORD v10[2];
  char v11;

  (*(void (**)(_QWORD *__return_ptr))(v2 + 24))(v10);
  v5 = v10[0];
  v6 = v10[1];
  v7 = v11;
  v8 = DatabaseValue.bind(to:at:)(to, at);
  sub_23C7E5640(v5, v6, v7);
  return v8;
}

void *sub_23C8D5734@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSDate, a1);
}

uint64_t sub_23C8D5740(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

void sub_23C8D5754()
{
  char *v0;

  sub_23C82D560(*v0);
}

void sub_23C8D575C()
{
  char *v0;

  sub_23C82D7AC(*v0);
}

void sub_23C8D5764()
{
  __int16 *v0;

  sub_23C82D7E0(*v0);
}

void sub_23C8D576C()
{
  int *v0;

  sub_23C82D814(*v0);
}

uint64_t sub_23C8D5774()
{
  _QWORD *v0;

  return sub_23C82D7A8(*v0);
}

void sub_23C8D577C()
{
  unsigned __int8 *v0;

  sub_23C82D878(*v0);
}

void sub_23C8D5784()
{
  unsigned __int16 *v0;

  sub_23C82D8AC(*v0);
}

void sub_23C8D578C()
{
  unsigned int *v0;

  sub_23C82D8E0(*v0);
}

void sub_23C8D5794()
{
  float *v0;

  sub_23C82D5CC(*v0);
}

uint64_t sub_23C8D579C()
{
  _QWORD *v0;

  return sub_23C82D464(*v0, v0[1]);
}

void sub_23C8D57DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;

  sub_23C7E6A0C();
  sub_23C7EE1E8();
  v6 = sub_23C7E262C();
  a5(v6);
  sub_23C7EE330();
}

_QWORD *FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible.fetchOne<A>(_:_:)(a1, v4, AssociatedTypeWitness, a2, a4, a3);
}

void sub_23C8D593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  sub_23C7E57AC();
  sub_23C8D6A10();
  sub_23C7DBC30();
  v7 = sub_23C8D69F8();
  a6(v7);
  sub_23C7DEFC0();
}

uint64_t sub_23C8D5AAC(sqlite3_stmt *a1, int a2)
{
  double *v2;

  return j__sqlite3_bind_double(a1, a2, *v2);
}

void *sub_23C8D5AB4@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSUUID, a1);
}

uint64_t sub_23C8D5AC0(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

void *sub_23C8D5AD4@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C82D608(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16), a1);
}

uint64_t sub_23C8D5AE0(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;

  return sub_23C8D54C0(a1, a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16));
}

uint64_t sub_23C8D5AEC@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C82D4AC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void *sub_23C8D5AF4@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSNumber, a1);
}

uint64_t sub_23C8D5B00(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

uint64_t sub_23C8D5B0C(sqlite3_stmt *a1, int a2)
{
  return sub_23C8D538C(a1, a2);
}

void *sub_23C8D5B24@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSData, a1);
}

uint64_t sub_23C8D5B30(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

void *sub_23C8D5B3C@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSURL, a1);
}

uint64_t sub_23C8D5B48(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

uint64_t sub_23C8D5B64(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD v6[2];
  char v7;

  sub_23C7EEF08(a1, a2, (uint64_t)v6);
  v2 = v6[0];
  v3 = v6[1];
  v4 = v7;
  sub_23C7EFD1C();
  return sub_23C7E5640(v2, v3, v4);
}

void static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)()
{
  sub_23C8D5C78();
}

void static DatabaseValueConvertible.decodeIfPresent(fromRow:atUncheckedIndex:)()
{
  sub_23C8D5C78();
}

void sub_23C8D5C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(_QWORD *, uint64_t);

  sub_23C7DEF5C();
  v5 = v1;
  v7 = v6;
  v8 = v6[8];
  if (!v8)
  {
    v12 = v7[5];
    v13 = v7[6];
    v22 = v0;
    v20 = v2;
    v28 = v4;
    v19 = v3;
    sub_23C7E7E34(v7 + 2, v12);
    v14 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v13 + 48))(&v25, v5, v12, v13);
    v21 = &v18;
    v16 = v25;
    v15 = v26;
    v17 = v27;
    v23[0] = v25;
    v23[1] = v26;
    v24 = v27;
    MEMORY[0x24BDAC7A8](v14);
    v28(v23, v19);
    sub_23C7E5640(v16, v15, v17);
    goto LABEL_6;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    v9 = MEMORY[0x24BDAC7A8](v8);
    v11(v9, v5, v10);
LABEL_6:
    sub_23C7DD150();
    sub_23C7DEF28();
    return;
  }
  __break(1u);
}

void sub_23C8D5DD4(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  char v5;

  v4 = a1;
  v5 = 1;
  v3 = (_QWORD *)swift_retain();
  RowDecodingContext.init(row:key:)(v3, &v4, a2);
  sub_23C7DF2C8();
}

void DatabaseValueCursor._isDone.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  sub_23C7DF2C8();
}

uint64_t (*DatabaseValueCursor._isDone.modify())()
{
  sub_23C7DF364();
  return j__swift_endAccess;
}

void DatabaseValueCursor._element(sqliteStatement:)(uint64_t a1)
{
  sub_23C7EE8BC(a1, (uint64_t)sub_23C8D67EC, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_23C8D5B64);
}

void (*sub_23C8D5E8C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = DatabaseValueCursor._isDone.modify();
  return sub_23C831CD0;
}

void sub_23C8D5ED0(uint64_t a1)
{
  DatabaseValueCursor._element(sqliteStatement:)(a1);
}

uint64_t (*NullableDatabaseValueCursor._isDone.modify())()
{
  sub_23C7DF364();
  return j_j__swift_endAccess;
}

uint64_t sub_23C8D5F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(a1 + 28);
  v2 = swift_retain();
  return RowDecodingContext.init(statement:index:)(v2, v1);
}

void (*sub_23C8D5F5C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = NullableDatabaseValueCursor._isDone.modify();
  return sub_23C831CD0;
}

void static DatabaseValueConvertible.fetchCursor(_:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_23C8D69C0();
  v4 = type metadata accessor for DatabaseValueCursor(v0, v1, v2, v3);
  sub_23C7EFA7C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  sub_23C7DF5CC();
  v12 = sub_23C7DFA20();
  sub_23C7ED1BC(v12);
  sub_23C7DB40C();
}

void static DatabaseValueConvertible.fetchAll(_:arguments:adapter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C8D69E0(a1, a2);
  static DatabaseValueConvertible.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_23C91119C();
    v4 = sub_23C7EFA20();
    v8 = type metadata accessor for DatabaseValueCursor(v4, v5, v6, v7);
    MEMORY[0x242626100](MEMORY[0x24BEE12E8], v3);
    v9 = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValueCursor<A>, v8);
    sub_23C7E8F2C(v9, v10, v11);
  }
  sub_23C7DB764();
}

void static DatabaseValueConvertible<>.fetchSet(_:arguments:adapter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  static DatabaseValueConvertible.fetchCursor(_:arguments:adapter:)();
  if (!v5)
  {
    v9 = type metadata accessor for DatabaseValueCursor(0, a4, a5, v8);
    MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValueCursor<A>, v9);
    Set.init<A>(_:)();
  }
  sub_23C7DB764();
}

void static DatabaseValueConvertible.fetchCursor(_:sql:arguments:adapter:)()
{
  sub_23C8D6148();
}

uint64_t static DatabaseValueConvertible.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23C8D6208(a1, a2, a3, a4, a5, a6, static DatabaseValueConvertible.fetchCursor(_:arguments:adapter:));
}

void static DatabaseValueConvertible.fetchAll(_:sql:arguments:adapter:)()
{
  sub_23C8D6148();
}

void sub_23C8D6148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  sub_23C7DEF5C();
  sub_23C7E8C8C(v5, v6, v7, v8, v9, v10, v11, v12, v63, v0, v76, v82, v88, v94, v100, v106, v111, v116, v120, v124);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7E41DC() + 16) = xmmword_23C912A20;
  v162 = v4;
  v163 = v3;
  v164 = v2;
  v165 = v1;
  v13 = sub_23C7F96B0(&v162);
  v21 = sub_23C7ECBF4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v64, v70, v77, v83, v89, v95, v101, v107, v112, v117, v121,
          v125,
          v128,
          v131,
          v134,
          v137,
          v140,
          v143,
          v146,
          v149,
          v152,
          v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162);
  sub_23C7E5EA4((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28, v65, v71);
  sub_23C7E1C8C();
  sub_23C7DB3B8();
  v29 = sub_23C7DBBB8();
  v31 = sub_23C7E17A4(v29, v30);
  *(_QWORD *)&v39 = sub_23C7E41C0(v31, v32, v33, v34, v35, v36, v37, v38, v66, v72, v78, v84, v90, v96, v102).n128_u64[0];
  sub_23C7DB6A8(v40, &qword_25430DBD0, v41, v42, v43, v44, v45, v46, v67, v73, v79, v85, v91, v97, v103, v108, v113, v39);
  sub_23C7DBD08();
  v47 = sub_23C7DB6A0();
  v55 = sub_23C7DFD70(v47, v48, v49, v50, v51, v52, v53, v54, v68, v74, v80, v86, v92, v98, v104, v109, v114, v118, v122,
          v126,
          v129,
          v132,
          v135,
          v138,
          v141,
          v144,
          v147,
          v150,
          v153);
  sub_23C7E8E18(v55, v56, v57, v58, v59, v60, v61, v62, v69, v75, v81, v87, v93, v99, v105, v110, v115, v119, v123,
    v127,
    v130,
    v133,
    v136,
    v139,
    v142,
    v145,
    v148,
    v151,
    v154);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

uint64_t static DatabaseValueConvertible.fetchAll<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23C8D6208(a1, a2, a3, a4, a5, a6, static DatabaseValueConvertible.fetchAll(_:arguments:adapter:));
}

#error "23C8D622C: call analysis failed (funcsize=16)"

void static DatabaseValueConvertible.fetchOne(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[5];
  uint64_t v80[8];
  _QWORD v81[24];

  sub_23C7DEF5C();
  v53 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v11 = *v9;
  v10 = v9[1];
  sub_23C7DF56C(v12, (uint64_t)v79);
  sub_23C7E79A8(&qword_25430DA08);
  v13 = sub_23C7E41DC();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  v81[0] = v6;
  v81[1] = v4;
  v81[2] = v11;
  v81[3] = v10;
  v14 = sub_23C7F96B0(v81);
  v22 = sub_23C7ECBF4((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v49, v53, v58, v60, v62, v64, v66, v69, v71, v73, v74,
          v75,
          v76,
          v77,
          v78,
          v79[0],
          v79[1],
          v79[2],
          v79[3],
          v79[4],
          v80[0],
          v80[1],
          v80[2],
          v80[3],
          v80[4],
          v80[5],
          v80[6],
          v80[7],
          v81[0]);
  sub_23C7E5EA4((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, v50, v54);
  *(_QWORD *)&v67 = 0;
  *((_QWORD *)&v67 + 1) = v13;
  sub_23C7DB3B8();
  swift_bridgeObjectRetain();
  v30 = sub_23C7DBBB8();
  v32 = sub_23C7E17A4(v30, v31);
  *(_QWORD *)&v40 = sub_23C7E41C0(v32, v33, v34, v35, v36, v37, v38, v39, v51, v55, 0, 0, 0, 0, v67).n128_u64[0];
  sub_23C7DB6A8(v41, &qword_25430DBD0, v42, v43, v44, v45, v46, v47, v52, v56, v59, v61, v63, v65, v68, v70, v72, v40);
  sub_23C7DBD08();
  v48 = sub_23C7DB6A0();
  static DatabaseValueConvertible.fetchOne<A>(_:_:)(v8, (uint64_t)v80, v2, v13 + 32, v57, v48);
  sub_23C7E7938((uint64_t)v80, &qword_25430DA18);
  sub_23C7DEF28();
}

_QWORD *static DatabaseValueConvertible.fetchOne<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *result;
  _QWORD v8[8];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 32))(v8, a1, 1, a4, a6);
  if (!v6)
  {
    swift_retain();
    static DatabaseValueConvertible.fetchOne(_:arguments:adapter:)();
    sub_23C812C40((uint64_t)v8);
    return (_QWORD *)swift_release();
  }
  return result;
}

#error "23C8D64B4: call analysis failed (funcsize=17)"

void static Optional<A>.fetchSet(_:arguments:adapter:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v14 = *a2;
  static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v6)
  {
    v10 = sub_23C7EF968();
    v12 = type metadata accessor for NullableDatabaseValueCursor(0, a4, a5, v11);
    v13 = a6;
    MEMORY[0x242626100](MEMORY[0x24BEE4AB0], v10, &v13);
    MEMORY[0x242626100](&protocol conformance descriptor for NullableDatabaseValueCursor<A>, v12);
    Set.init<A>(_:)();
  }
}

uint64_t static Optional<A>.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23C8D6208(a1, a2, a3, a4, a5, a6, static Optional<A>.fetchCursor(_:arguments:adapter:));
}

uint64_t static Optional<A>.fetchAll<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23C8D6208(a1, a2, a3, a4, a5, a6, static Optional<A>.fetchAll(_:arguments:adapter:));
}

#error "23C8D67A4: call analysis failed (funcsize=17)"

void sub_23C8D67D4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C8D5DD4(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C8D67EC()
{
  uint64_t v0;

  return sub_23C8D5F20(v0);
}

uint64_t type metadata accessor for DatabaseValueCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabaseValueCursor);
}

uint64_t sub_23C8D6810(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8D683C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8D6868(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for NullableDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8D6894(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for NullableDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of DatabaseValueConvertible.databaseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static DatabaseValueConvertible.fromDatabaseValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for DatabaseValueCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C8D68E0()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for NullableDatabaseValueCursor()
{
  return swift_lookUpClassMethod();
}

void *sub_23C8D6948@<X0>(void *a1@<X8>)
{
  return DatabaseValueConvertible.sqlExpression.getter((uint64_t)&protocol witness table for NSString, a1);
}

uint64_t sub_23C8D6954(Swift::OpaquePointer to, Swift::Int32 at)
{
  return DatabaseValueConvertible.bind(to:at:)(to, at);
}

uint64_t sub_23C8D6960()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_23C8D6990(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_23C7DC0A0(a1, a2, a3);
}

uint64_t sub_23C8D69A8()
{
  return swift_release();
}

uint64_t sub_23C8D69C0()
{
  return 0;
}

__n128 sub_23C8D69E0(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)a2;
}

uint64_t sub_23C8D69F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8D6A10()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C8D6A20@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23C8D6A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  v4 = sub_23C8F74D0(a2);
  v6 = v5;
  v8 = v7 & 1;
  v9 = sub_23C8D6AC8(v4, v5, v7 & 1, 1 << *(_BYTE *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a1, a2);
  sub_23C7F91AC(v4, v6, v8);
  return v9;
}

uint64_t sub_23C8D6AC8(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_36;
  v9 = result;
  if (a4 < result)
    goto LABEL_34;
  if (a5 != (_DWORD)a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v13 = a8 + 64;
    v22 = a8 + 96;
    v11 = 1;
    while (1)
    {
      if ((v9 & 0x8000000000000000) != 0 || (v14 = 1 << *(_BYTE *)(a8 + 32), (uint64_t)v9 >= v14))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v15 = v9 >> 6;
      v16 = *(_QWORD *)(v13 + 8 * (v9 >> 6));
      if (((v16 >> v9) & 1) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(a8 + 36) != a5)
        goto LABEL_33;
      v17 = v16 & (-2 << (v9 & 0x3F));
      if (v17)
      {
        result = sub_23C7E6878(result, a2);
        v9 = __clz(__rbit64(v17)) | v9 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v18 = v15 + 1;
        if (v15 + 1 >= (unint64_t)(v14 + 63) >> 6)
          goto LABEL_26;
        v19 = *(_QWORD *)(v13 + 8 * v18);
        if (!v19)
        {
          v20 = (unint64_t)(v14 + 63) >> 6;
          v18 = v15 + 2;
          if (v15 + 2 >= v20)
            goto LABEL_26;
          v19 = *(_QWORD *)(v13 + 8 * v18);
          if (!v19)
          {
            v18 = v15 + 3;
            if (v15 + 3 >= v20)
              goto LABEL_26;
            v19 = *(_QWORD *)(v13 + 8 * v18);
            if (!v19)
            {
              while (v15 + 4 < v20)
              {
                v19 = *(_QWORD *)(v22 + 8 * v15++);
                if (v19)
                {
                  v18 = v15 + 3;
                  goto LABEL_17;
                }
              }
LABEL_26:
              result = sub_23C7F91AC(v9, a2, 0);
              v9 = v14;
              goto LABEL_27;
            }
          }
        }
LABEL_17:
        result = sub_23C7E6878(result, a2);
        v9 = __clz(__rbit64(v19)) | (v18 << 6);
      }
LABEL_27:
      if (v9 == a4)
        return v11;
      a2 = a5;
      if (__OFADD__(v11++, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t sub_23C8D6C88()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_23C8D6C94(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_23C8D6CA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    result = sub_23C910F20();
    if (!__OFSUB__(result, v1))
    {
      sub_23C910F44();
      v2 = sub_23C911010();
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8D6D90(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C8DEA4C(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23C8D6E00()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23C8D6E54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_23C8D6E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[40];
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 8);
  sub_23C842BEC(v2, (uint64_t)&v16);
  if (v17)
  {
    sub_23C7DB5CC(&v16, (uint64_t)v18);
    swift_beginAccess();
    if (!*(_QWORD *)(Row.PrefetchedRowsView.keys.getter() + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23C911634();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C7FCB94();
    v4 = v3;
    swift_bridgeObjectRelease();
    v19 = v4;
    sub_23C8DDF48(&v19);
    if (!v1)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x242624CFC](v19, MEMORY[0x24BEE0D00]);
      sub_23C910F5C();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_6:
      v5 = sub_23C911694();
      swift_allocError();
      v7 = v6;
      sub_23C7E79A8(&qword_256BCDB30);
      sub_23C7EFC04((uint64_t)v18, v7);
      v8 = sub_23C8D6D90(1, v2);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      swift_bridgeObjectRetain();
      sub_23C876088(v8, v10, v12, v14);
      sub_23C911688();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, *MEMORY[0x24BEE26C8], v5);
      swift_willThrow();
      return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v18);
    }
  }
  else
  {
    sub_23C7E7900((uint64_t)&v16, qword_25430D620);
    sub_23C9117B4();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_23C8D7108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[3];
  uint64_t v39;

  v6 = (_QWORD *)*v3;
  v7 = v3[1];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    sub_23C7EFC04(v7 + 40 * v8 - 8, (uint64_t)v38);
    sub_23C7E7E34(v38, v39);
    v9 = sub_23C911C40();
    v11 = v10;
    v12 = v6[5];
    v13 = v6[6];
    sub_23C7E7E34(v6 + 2, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 88))(v9, v11, v12, v13);
    LOBYTE(v12) = v15;
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      sub_23C7E7E34(v38, v39);
      v20 = sub_23C911C40();
      v22 = v21;
      v28 = 0;
      *(_QWORD *)&v29 = 0;
      BYTE8(v29) = -1;
      v23 = (_QWORD *)swift_retain();
      RowDecodingContext.init(row:key:)(v23, (__int128 *)&v28, (uint64_t)&v33);
      v28 = v33;
      v29 = v34;
      v30 = v35;
      v31 = v36;
      v32 = v37;
      sub_23C83256C();
      swift_allocError();
      static RowDecodingError.columnNotFound(_:context:)(v20, v22, (uint64_t)&v28, v24);
      swift_bridgeObjectRelease();
      v25 = v29;
      v26 = v32;
      v27 = v30;
      swift_release();
      sub_23C815EF0(v25, *((uint64_t *)&v25 + 1), v27);
      swift_bridgeObjectRelease();
      sub_23C7E13C4(v26);
      swift_willThrow();
    }
    else
    {
      v17 = type metadata accessor for ColumnDecoder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
      a3[3] = v17;
      a3[4] = MEMORY[0x242626100](&unk_23C91A648, v17);
      *a3 = v6;
      a3[1] = v14;
      a3[2] = v7;
      swift_bridgeObjectRetain();
      swift_retain();
    }
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v38);
  }
  else
  {
    v18 = type metadata accessor for ColumnDecoder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
    a3[3] = v18;
    a3[4] = MEMORY[0x242626100](&unk_23C91A648, v18);
    *a3 = v6;
    a3[1] = 0;
    a3[2] = v7;
    swift_bridgeObjectRetain();
    return swift_retain();
  }
}

uint64_t sub_23C8D7354()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 96))
  {
    v1 = *(_QWORD *)(v0 + 96);
  }
  else
  {
    v1 = sub_23C8D73B0(v0);
    *(_QWORD *)(v0 + 96) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C8D73B0(uint64_t a1)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  char v13;
  __int128 v14;
  void (*v15)(uint64_t *@<X0>, _QWORD *@<X8>);
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 88))
  {
    swift_bridgeObjectRetain();
    v2 = sub_23C7F742C();
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 72);
    swift_retain();
    v4 = sub_23C911298();
    v17 = (_QWORD *)v4;
    v14 = v1;
    v15 = sub_23C8F40DC;
    v16 = 0;
    if (v3)
    {
      v5 = 0;
      do
      {
        Row.subscript.getter();
        v6 = v12[2];
        v7 = v12[3];
        v8 = v13;
        swift_bridgeObjectRetain();
        sub_23C7E56A4(v6, v7, v8);
        swift_bridgeObjectRelease();
        sub_23C7E5640(v6, v7, v8);
        sub_23C8F4024(v12, v5);
        sub_23C7E5640(v6, v7, v8);
        v5 = v12[0];
        *((_QWORD *)&v14 + 1) = v12[0];
        sub_23C8FA41C();
        swift_bridgeObjectRelease();
      }
      while (v5 != *(_QWORD *)(v1 + 72));
      v2 = v17;
    }
    else
    {
      v2 = (_QWORD *)v4;
    }
    swift_release();
    swift_release();
  }
  v17 = v2;
  Row.scopes.getter();
  Row.ScopesTreeView.names.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C8F15E4();
  swift_beginAccess();
  v14 = *(_OWORD *)(v1 + 80);
  Row.PrefetchedRowsView.keys.getter();
  sub_23C8F15E4();
  *(_QWORD *)&v14 = v17;
  MEMORY[0x24BDAC7A8](v9);
  swift_bridgeObjectRetain();
  sub_23C7E79A8(&qword_256BCDB50);
  sub_23C7E1240(qword_256BCDB58, &qword_256BCDB50, MEMORY[0x24BEE1718]);
  v10 = sub_23C911034();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23C8D7668()
{
  swift_bridgeObjectRetain();
  return sub_23C911C4C();
}

BOOL sub_23C8D76CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 88);
  if (v2)
  {
    v3 = sub_23C911C40();
    sub_23C86616C(v3, v4, v2);
    v6 = v5;
    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  else
  {
    v7 = sub_23C911C40();
    v9 = v8;
    v10 = v1[5];
    v11 = v1[6];
    sub_23C7E7E34(v1 + 2, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 88))(v7, v9, v10, v11);
    LOBYTE(v7) = v12;
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      return 1;
  }
  Row.scopes.getter();
  v13 = sub_23C911C40();
  v15 = Row.ScopesTreeView.subscript.getter(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!v15)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C911C40();
    v17 = Row.PrefetchedRowsView.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v17 != 0;
  }
  return 1;
}

BOOL sub_23C8D78AC()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *v0;
  v3 = v0[2];
  v4 = sub_23C7D92E0();
  if (v1)
  {

  }
  else
  {
    Row.subscript.getter(v4, v5, (uint64_t)&v18);
    swift_bridgeObjectRelease();
    v17 = v21;
    sub_23C7E7900((uint64_t)&v18, (uint64_t *)&unk_25430D6B8);
    if (v17)
      return 0;
  }
  Row.scopes.getter();
  v6 = v18;
  v7 = v19;
  v9 = v20;
  v8 = v21;
  v24 = *(_QWORD *)(v2 + 88);
  v10 = sub_23C911C40();
  v18 = v6;
  v19 = v7;
  v20 = v9;
  v21 = v8;
  v12 = Row.ScopesTreeView.subscript.getter(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!v12)
  {
    swift_beginAccess();
    v14 = *(_QWORD *)(v3 + 80);
    v13 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C911C40();
    v22 = v14;
    v23 = v13;
    v15 = Row.PrefetchedRowsView.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v15 == 0;
  }
  return 0;
}

uint64_t sub_23C8D7A38()
{
  char v0;
  uint64_t v1;
  char v3;

  sub_23C7D92E0();
  if (!v1)
  {
    sub_23C855540();
    v0 = v3;
    swift_bridgeObjectRelease();
  }
  return v0 & 1;
}

void sub_23C8D7AA0()
{
  sub_23C8D7B48();
}

void sub_23C8D7ABC()
{
  sub_23C8D7B48();
}

void sub_23C8D7AD8()
{
  sub_23C8D7B48();
}

uint64_t sub_23C8D7AF4()
{
  return sub_23C7F07C0();
}

uint64_t sub_23C8D7B10()
{
  return sub_23C7F07C0();
}

void sub_23C8D7B2C()
{
  sub_23C8D7B48();
}

void sub_23C8D7B48()
{
  uint64_t v0;

  sub_23C7E4FA8();
  if (!v0)
  {
    sub_23C7E6428();
    sub_23C7DB62C();
  }
  sub_23C7DFA88();
}

void sub_23C8D7B94()
{
  sub_23C8D7B48();
}

void sub_23C8D7BB0()
{
  sub_23C8D7B48();
}

uint64_t sub_23C8D7BCC()
{
  return sub_23C7F07C0();
}

float sub_23C8D7BE8()
{
  uint64_t v0;
  float v1;
  float v3;

  sub_23C7D92E0();
  if (!v0)
  {
    sub_23C855DA4();
    v1 = v3;
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_23C8D7C58(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  sqlite3_stmt *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v99 = (uint64_t *)a4;
  v100 = a1;
  v103 = a5;
  v105 = *(uint64_t **)v5;
  v9 = sub_23C7E79A8(&qword_25430CEB0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23C910B6C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v5 + 16);
  v127 = a2;
  v98 = v5;
  v17 = sub_23C7D92E0();
  v101 = (uint64_t *)v16;
  if (v6)
  {
    v102 = a3;

    v104 = 0;
LABEL_12:
    Row.scopes.getter();
    v43 = v111;
    v45 = v112;
    v44 = v113;
    v46 = v105[11];
    v47 = v105[13];
    v48 = sub_23C911C40();
    v111 = v43;
    v112 = v45;
    v113 = v44;
    v50 = Row.ScopesTreeView.subscript.getter(v48, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (!v50)
    {
      v57 = (uint64_t)v101;
      swift_beginAccess();
      v58 = *(_QWORD *)(v57 + 80);
      v59 = *(_QWORD *)(v57 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C911C40();
      *(_QWORD *)&v111 = v58;
      *((_QWORD *)&v111 + 1) = v59;
      v60 = Row.PrefetchedRowsView.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = v104;
      v62 = v102;
      if (v60)
      {
        v63 = sub_23C7F0920();
        v113 = type metadata accessor for PrefetchedRowsDecoder(0, v105[10], v105[12], v64);
        v65 = MEMORY[0x242626100](&unk_23C91AA48, v113);
        *(_QWORD *)&v111 = v60;
        *((_QWORD *)&v111 + 1) = v63;
        v114 = v65;
        v112 = 0;
        v66 = v103;
        sub_23C91128C();
        if (v61)
          return;
        v67 = v66;
        v68 = 0;
      }
      else
      {
        v67 = v103;
        v68 = 1;
      }
      v69 = v62;
      goto LABEL_46;
    }
    Row.containsNonNullValue.getter();
    v51 = v104;
    if ((v52 & 1) != 0)
    {
      v53 = sub_23C7F0920();
      sub_23C7E79A8(&qword_25430CEC0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23C912A20;
      *(_QWORD *)(inited + 56) = v46;
      *(_QWORD *)(inited + 64) = v47;
      sub_23C7EF8B0((uint64_t *)(inited + 32));
      (*(void (**)(void))(*(_QWORD *)(v46 - 8) + 16))();
      *(_QWORD *)&v111 = v53;
      sub_23C7EFB60();
      v55 = v103;
      v56 = v102;
      sub_23C8D8B54(v100, v50, v111, (uint64_t)v102);
      if (v51)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      swift_release();
      v67 = v55;
      v68 = 0;
      v69 = v56;
      goto LABEL_46;
    }
    swift_release();
    goto LABEL_20;
  }
  v19 = v17;
  v20 = v18;
  v104 = 0;
  v21 = (_QWORD *)(v16 + 16);
  v22 = *(_QWORD *)(v16 + 40);
  v23 = *(_QWORD *)(v16 + 48);
  v102 = v21;
  sub_23C7E7E34(v21, v22);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 88))(v19, v20, v22, v23);
  LOBYTE(v19) = v25;
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
    v102 = a3;
    goto LABEL_12;
  }
  v26 = v100;
  if (v12 == v100)
  {
    (*(void (**)(__int128 *__return_ptr))(v105[12] + 32))(&v111);
    v71 = *((_QWORD *)&v111 + 1);
    v70 = (void *)v111;
    v72 = a3;
    v73 = v112;
    v106 = v111;
    LOBYTE(v107) = v112;
    v74 = v104;
    sub_23C8D86B8((uint64_t)v101, v24, v11);
    v75 = v70;
    v76 = v72;
    sub_23C81ABB8(v75, v71, v73);
    v77 = v103;
    if (v74)
      return;
    v78 = v100;
    if (sub_23C7DE718((uint64_t)v11, 1, v100) == 1)
    {
      sub_23C7E7900((uint64_t)v11, &qword_25430CEB0);
      v67 = v77;
      v68 = 1;
LABEL_45:
      v69 = v76;
      goto LABEL_46;
    }
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v78);
LABEL_44:
    swift_dynamicCast();
    v67 = v77;
    v68 = 0;
    goto LABEL_45;
  }
  v27 = v24;
  v28 = sub_23C7EF810((uint64_t)a3);
  v31 = v104;
  if (v28)
  {
    v32 = v28;
    v105 = v29;
    v127 = v30;
    v102 = a3;
    v33 = sub_23C9114E4();
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(_QWORD *)(v34 + 64);
    v36 = MEMORY[0x24BDAC7A8](v33);
    v38 = (char *)&v98 - v37;
    v39 = (sqlite3_stmt *)v101[8];
    v100 = v36;
    if (v39)
    {
      v99 = &v98;
      if (v27 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (v27 <= 0x7FFFFFFF)
      {
        v40 = v27;
        MEMORY[0x24BDAC7A8](v36);
        *(&v98 - 2) = (uint64_t)v101;
        *(&v98 - 1) = v27;
        v41 = sqlite3_column_type(v39, v27);
        if ((_DWORD)v41 == 5)
        {
          v42 = 1;
        }
        else
        {
          v101 = &v98;
          v98 = (uint64_t)&v98;
          MEMORY[0x24BDAC7A8](v41);
          v89 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
          v90 = v127;
          (*(void (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(v127 + 8))(v39, v40, v32, v127);
          if (sub_23C7DE718((uint64_t)v89, 1, v32) == 1)
          {
            v91 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v89, v100);
            MEMORY[0x24BDAC7A8](v91);
            *(&v98 - 2) = (uint64_t)sub_23C846440;
            *(&v98 - 1) = (uint64_t)(&v98 - 4);
            static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)((uint64_t)v39, v40, (uint64_t)sub_23C7DE2F0, (uint64_t)(&v98 - 4), v32, (uint64_t)v105, v90, v92, v98, (uint64_t)v99, v100, (uint64_t)v101, (uint64_t)v102, v103, v104, (uint64_t)v105, v106, *((uint64_t *)&v106 + 1), v107,
              v108,
              v109,
              v110,
              v111,
              *((uint64_t *)&v111 + 1),
              v112,
              v113,
              v114,
              v115,
              v116,
              v117,
              v118,
              v119,
              v120,
              v121,
              v122,
              v123,
              v124,
              v125,
              v126,
              v127,
              v128,
              v129,
              v130,
              v131,
              v132,
              v133,
              v134,
              v135);
            return;
          }
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v38, v89, v32);
          v42 = 0;
        }
        sub_23C7DE70C((uint64_t)v38, v42, 1, v32);
        v88 = v127;
        goto LABEL_41;
      }
      __break(1u);
      return;
    }
    v88 = v127;
    Row.fastDecodeIfPresent<A>(_:atUncheckedIndex:)();
    if (v31)
      return;
LABEL_41:
    if (sub_23C7DE718((uint64_t)v38, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v100);
LABEL_20:
      v67 = v103;
      v68 = 1;
      v69 = v102;
LABEL_46:
      sub_23C7DE70C(v67, v68, 1, (uint64_t)v69);
      return;
    }
    v108 = v32;
    v109 = (uint64_t)v105;
    v110 = v88;
    sub_23C7EF8B0((uint64_t *)&v106);
    (*(void (**)(void))(*(_QWORD *)(v32 - 8) + 32))();
    sub_23C8DEB7C(&v106, &v111);
    sub_23C7E79A8(&qword_25430CA60);
    v77 = v103;
    v76 = v102;
    goto LABEL_44;
  }
  v79 = sub_23C7EF87C((uint64_t)a3);
  if (v79)
  {
    v81 = v79;
    v82 = v80;
    v83 = a3;
    v84 = sub_23C9114E4();
    v85 = *(_QWORD *)(v84 - 8);
    MEMORY[0x24BDAC7A8](v84);
    v87 = (char *)&v98 - v86;
    static DatabaseValueConvertible.decodeIfPresent(fromRow:atUncheckedIndex:)();
    if (v31)
      return;
    if (sub_23C7DE718((uint64_t)v87, 1, v81) == 1)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
      v67 = v103;
      v68 = 1;
    }
    else
    {
      v108 = v81;
      v109 = v82;
      sub_23C7EF8B0((uint64_t *)&v106);
      (*(void (**)(void))(*(_QWORD *)(v81 - 8) + 32))();
      sub_23C7DB5CC(&v106, (uint64_t)&v111);
      sub_23C7E79A8(&qword_25430CEB8);
      v97 = v103;
      swift_dynamicCast();
      v67 = v97;
      v68 = 0;
    }
    v69 = v83;
    goto LABEL_46;
  }
  v93 = (uint64_t)v101;
  v94 = v101[5];
  v95 = v101[6];
  sub_23C7E7E34(v102, v94);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 40))(v27, v94, v95) & 1) != 0)
  {
    v67 = v103;
    v68 = 1;
LABEL_50:
    v69 = a3;
    goto LABEL_46;
  }
  v96 = v103;
  sub_23C7D9F74(v26, v93, v27);
  if (!v31)
  {
    v67 = v96;
    v68 = 0;
    goto LABEL_50;
  }
}

void sub_23C8D86B8(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  uint64_t v8;
  char v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char *v17;
  _QWORD v18[5];
  uint64_t v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  char v26;
  char *v27;

  v27 = a3;
  v7 = *(char **)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_BYTE *)(v3 + 16);
  v10 = *(sqlite3_stmt **)(a1 + 64);
  if (!v10)
  {
    v24 = *(char **)v3;
    v25 = v8;
    v26 = v9;
    sub_23C8DDEB0(a2, (uint64_t)&v21);
    if (!v4)
    {
      v14 = v21;
      v15 = v22;
      v16 = v23;
      v19[0] = v21;
      v19[1] = v22;
      v20 = v23;
      swift_retain();
      sub_23C8DBAAC(v19, (uint64_t)&v24, a2, (uint64_t)v27);
      sub_23C7E5640(v14, v15, v16);
      return;
    }
    goto LABEL_14;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_unexpectedError();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  v18[2] = a1;
  v18[3] = a2;
  if (sqlite3_column_type(v10, a2) == 5)
  {
    v11 = sub_23C910B6C();
    v12 = v27;
    v13 = 1;
  }
  else
  {
    v24 = v7;
    v25 = v8;
    v26 = v9;
    v17 = v27;
    sub_23C8DBCC8(v10, a2, &v24, (void (*)(uint64_t *__return_ptr))sub_23C8DEB94, (uint64_t)v18, v27);
    if (v4)
      return;
    v11 = sub_23C910B6C();
    v12 = v17;
    v13 = 0;
  }
  sub_23C7DE70C((uint64_t)v12, v13, 1, v11);
}

uint64_t sub_23C8D886C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  sqlite3_stmt *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;

  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_BYTE *)(v3 + 16);
  v10 = *(sqlite3_stmt **)(a1 + 64);
  if (v10)
  {
    v20 = *(char **)v3;
    v21 = v8;
    v22 = v9;
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      swift_retain();
      return sub_23C8DCA0C(v10, a2, &v20, a1, a2, a3);
    }
    __break(1u);
  }
  else
  {
    v20 = *(char **)v3;
    v21 = v8;
    v22 = v9;
    sub_23C8DDEB0(a2, (uint64_t)&v17);
    if (!v4)
    {
      v12 = v17;
      v13 = v18;
      v14 = v19;
      v15[0] = v17;
      v15[1] = v18;
      v16 = v19;
      swift_retain();
      sub_23C8DD7D4(v15, (uint64_t)&v20, a2, (uint64_t)a3);
      return sub_23C7E5640(v12, v13, v14);
    }
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_23C8D8990()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C8D89F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;

  v0 = sub_23C911694();
  swift_allocError();
  v2 = v1;
  sub_23C7E79A8(&qword_256BCDB40);
  *v2 = sub_23C7E79A8(&qword_256BCDB48);
  sub_23C7F0920();
  sub_23C911688();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v2, *MEMORY[0x24BEE26D0], v0);
  return swift_willThrow();
}

unint64_t sub_23C8D8AB0@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *v2;
  v5 = v2[2];
  v6 = v2[3];
  v8 = v2[4];
  v7 = v2[5];
  v9 = type metadata accessor for _RowDecoder(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 96), a1);
  a2[3] = v9;
  a2[4] = MEMORY[0x242626100](&unk_23C91A600, v9);
  v10 = (_QWORD *)swift_allocObject();
  *a2 = v10;
  v10[2] = v5;
  v10[3] = v6;
  v10[4] = v8;
  v10[5] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_23C7EFCF4(v8);
}

uint64_t sub_23C8D8B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  v7 = *v4;
  v8 = sub_23C7EF87C(a4);
  if (v8)
  {
    v11 = v8;
    v12 = v9;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    v18 = v8;
    v19 = v9;
    sub_23C7EF8B0(v17);
    v14 = swift_retain();
    v13(v14, v11, v12);
    sub_23C7E79A8(&qword_25430B278);
    return swift_dynamicCast();
  }
  else
  {
    v18 = type metadata accessor for _RowDecoder(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 96), v10);
    MEMORY[0x242626100](&unk_23C91A600, v18);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = a2;
    v16[3] = a3;
    v16[4] = 0;
    v16[5] = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    return sub_23C91128C();
  }
}

uint64_t sub_23C8D8CA0(uint64_t a1)
{
  uint64_t result;

  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16) >= 2uLL)
    return swift_release();
  return result;
}

_QWORD *sub_23C8D8CE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2 + 2;
  v5 = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  if (v5 >= 2)
  {
    v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v6;
  }
  return a1;
}

_QWORD *sub_23C8D8D5C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v4 >= 2)
    {
      v6 = a2[3];
      a1[2] = v4;
      a1[3] = v6;
      swift_retain();
      swift_release();
      return a1;
    }
    swift_release();
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  return a1;
}

uint64_t sub_23C8D8E1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >= 2uLL)
  {
    if (v4 >= 2)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v6;
      swift_release();
      return a1;
    }
    swift_release();
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t _s12GRDBInternal3RowC10ScopesViewVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C8D8EF8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23C8D8F38()
{
  return sub_23C7F0920();
}

uint64_t sub_23C8D8F58()
{
  return sub_23C8D7354();
}

BOOL sub_23C8D8F78()
{
  return sub_23C8D76CC();
}

BOOL sub_23C8D8F9C()
{
  return sub_23C8D78AC();
}

uint64_t sub_23C8D8FC0()
{
  return sub_23C8D7A38() & 1;
}

float sub_23C8D8FE4()
{
  return sub_23C8D7BE8();
}

void sub_23C8D9004()
{
  sub_23C8D7AA0();
}

void sub_23C8D9024()
{
  sub_23C8D7ABC();
}

void sub_23C8D9044()
{
  sub_23C8D7AD8();
}

uint64_t sub_23C8D9064()
{
  return sub_23C8D7AF4();
}

void sub_23C8D9084()
{
  sub_23C8D915C();
}

uint64_t sub_23C8D90A0()
{
  return sub_23C8D7B10();
}

void sub_23C8D90C0()
{
  sub_23C8D7B2C();
}

void sub_23C8D90E0()
{
  sub_23C8D7B94();
}

void sub_23C8D9100()
{
  sub_23C8D7BB0();
}

uint64_t sub_23C8D9120()
{
  return sub_23C8D7BCC();
}

void sub_23C8D9140()
{
  sub_23C8D915C();
}

void sub_23C8D915C()
{
  sub_23C7E8700();
}

uint64_t sub_23C8D9190()
{
  uint64_t (*v0)(void);

  return v0();
}

void sub_23C8D91A8()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

uint64_t sub_23C8D91DC()
{
  return sub_23C911A9C();
}

void sub_23C8D9204()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

uint64_t sub_23C8D9238()
{
  return sub_23C911A90();
}

void sub_23C8D9260()
{
  sub_23C8D94B4();
}

void sub_23C8D927C()
{
  sub_23C8D9448();
}

void sub_23C8D9298()
{
  sub_23C8D94B4();
}

void sub_23C8D92B4()
{
  sub_23C8D9378();
}

void sub_23C8D92D0()
{
  sub_23C8D93E0();
}

void sub_23C8D92EC()
{
  sub_23C8D9448();
}

void sub_23C8D9308()
{
  sub_23C8D94B4();
}

void sub_23C8D9324()
{
  sub_23C8D9528();
}

void sub_23C8D9340()
{
  sub_23C8D94B4();
}

void sub_23C8D935C()
{
  sub_23C8D9378();
}

void sub_23C8D9378()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

void sub_23C8D93B0(uint64_t a1)
{
  __int16 v1;

  v1 = sub_23C7EC84C(a1);
  sub_23C7DFD94(v1 & 0x1FF);
  sub_23C7EDD20();
}

void sub_23C8D93C4()
{
  sub_23C8D93E0();
}

void sub_23C8D93E0()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

void sub_23C8D9418(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_23C7EC84C(a1);
  sub_23C7DFD94(v1 & 0x1FFFF);
  sub_23C7EDD20();
}

void sub_23C8D942C()
{
  sub_23C8D9448();
}

void sub_23C8D9448()
{
  sub_23C7E8700();
}

uint64_t sub_23C8D947C()
{
  uint64_t (*v0)(void);
  unint64_t v1;

  v1 = v0();
  return sub_23C7EDF80(v1);
}

void sub_23C8D9498()
{
  sub_23C8D94B4();
}

void sub_23C8D94B4()
{
  sub_23C7E8700();
}

uint64_t sub_23C8D94E8()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = v0();
  if (v1)
    return v3;
  return result;
}

void sub_23C8D950C()
{
  sub_23C8D9528();
}

void sub_23C8D9528()
{
  sub_23C7E8700();
}

uint64_t sub_23C8D955C()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = v0();
  if (v1)
    return v3;
  return result;
}

void sub_23C8D9584(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_23C8D7C58(a1, a2, a3, a4, a5);
}

void sub_23C8D95A4()
{
  sub_23C8D8990();
}

uint64_t sub_23C8D95C4()
{
  return sub_23C8D89F0();
}

unint64_t sub_23C8D95E4@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  return sub_23C8D8AB0(a1, a2);
}

uint64_t sub_23C8D9604()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8D9610()
{
  return sub_23C8D6E7C();
}

uint64_t sub_23C8D9624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  return sub_23C8D7108(a1, a2, a3);
}

void sub_23C8D9638()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C8D9690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;

  v10 = type metadata accessor for PrefetchedRowsDecoder(0, a4, a5, a4);
  a6[3] = v10;
  a6[4] = MEMORY[0x242626100](&unk_23C91A700, v10);
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_23C8D9710()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C8D9768(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA1D8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DECB8);
}

uint64_t sub_23C8D9774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8DB9E8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_23C8D9638);
}

uint64_t sub_23C8D9790(uint64_t a1, uint64_t a2)
{
  return sub_23C7EFF18(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8D9690);
}

uint64_t sub_23C8D97AC(uint64_t a1, uint64_t a2)
{
  return sub_23C7EFF18(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8D9710);
}

uint64_t sub_23C8D97C8(unint64_t a1)
{
  uint64_t v1;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v1 = sub_23C9117C0();
  swift_bridgeObjectRelease();
  return v1;
}

BOOL sub_23C8D9828(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v4 <= a3;
}

uint64_t sub_23C8D9894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a4;
  v5 = v4;
  if (sub_23C7EF87C(a3))
  {
    (*(void (**)(_QWORD *__return_ptr))(v7 + 40))(v23);
    v9 = v23[0];
    v8 = v23[1];
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = v4[2];
  v11 = *v5;
  v12 = *v5 & 0xC000000000000001;
  sub_23C8E61E8(v5[2]);
  if (v12)
  {
    v13 = MEMORY[0x242625290](v10, v11);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 8 * v10 + 32);
    swift_retain();
  }
  v15 = v5[1];
  v24 = type metadata accessor for _RowDecoder(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v14);
  v25 = MEMORY[0x242626100](&unk_23C91A600, v24);
  v16 = (_QWORD *)swift_allocObject();
  v23[0] = v16;
  v16[2] = v13;
  v16[3] = v15;
  v16[4] = v9;
  v16[5] = v8;
  swift_bridgeObjectRetain();
  result = sub_23C91128C();
  v18 = v5[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  v21 = v19;
  if (v22)
  {
    if (!v21)
    {
LABEL_13:
      v5[2] = v20;
      return result;
    }
    __break(1u);
  }
  if (!v21)
    goto LABEL_13;
  __break(1u);
  return result;
}

void sub_23C8D99F4()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C8D9A54()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C8D9AB4()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C8D9B14()
{
  unint64_t *v0;

  return sub_23C8D97C8(*v0);
}

uint64_t sub_23C8D9B3C(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA1D8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8D9828);
}

uint64_t sub_23C8D9B48()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_23C8D9B50()
{
  return sub_23C807CE0() & 1;
}

uint64_t sub_23C8D9B68(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v4;

  sub_23C8D9894(MEMORY[0x24BEE1328], a1, MEMORY[0x24BEE1328], MEMORY[0x24BEE1348]);
  if (!v1)
    v2 = v4;
  return v2 & 1;
}

uint64_t sub_23C8D9BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_23C8D9894(MEMORY[0x24BEE0D00], a1, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D38]);
  if (!v1)
    return v3;
  return result;
}

double sub_23C8D9BF4(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;

  sub_23C8D9894(MEMORY[0x24BEE13C8], a1, MEMORY[0x24BEE13C8], MEMORY[0x24BEE1400]);
  if (!v1)
    return v3;
  return result;
}

float sub_23C8D9C38(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;

  sub_23C8D9894(MEMORY[0x24BEE14E8], a1, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1520]);
  if (!v1)
    return v3;
  return result;
}

uint64_t sub_23C8D9C7C(uint64_t a1, uint64_t a2)
{
  return sub_23C8D9E7C(a1, a2, MEMORY[0x24BEE1768], MEMORY[0x24BEE1798]);
}

void sub_23C8D9CA0(uint64_t a1, uint64_t a2)
{
  sub_23C8D9D8C(a1, a2, MEMORY[0x24BEE3E50], MEMORY[0x24BEE3E70]);
}

void sub_23C8D9CC4(uint64_t a1, uint64_t a2)
{
  sub_23C8D9DDC(a1, a2, MEMORY[0x24BEE3F30], MEMORY[0x24BEE3F50]);
}

void sub_23C8D9CE8(uint64_t a1, uint64_t a2)
{
  sub_23C8D9E2C(a1, a2, MEMORY[0x24BEE3F88], MEMORY[0x24BEE3FB8]);
}

uint64_t sub_23C8D9D0C(uint64_t a1, uint64_t a2)
{
  return sub_23C8D9E7C(a1, a2, MEMORY[0x24BEE4008], MEMORY[0x24BEE4038]);
}

uint64_t sub_23C8D9D30()
{
  return sub_23C9118F8();
}

uint64_t sub_23C8D9D44(uint64_t a1, uint64_t a2)
{
  return sub_23C8D9E7C(a1, a2, MEMORY[0x24BEE1E88], MEMORY[0x24BEE1EB8]);
}

void sub_23C8D9D68(uint64_t a1, uint64_t a2)
{
  sub_23C8D9D8C(a1, a2, MEMORY[0x24BEE4260], MEMORY[0x24BEE4290]);
}

void sub_23C8D9D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7EE5F4(a1, a1, a3, a4);
  sub_23C7E1A0C();
}

void sub_23C8D9DB8(uint64_t a1, uint64_t a2)
{
  sub_23C8D9DDC(a1, a2, MEMORY[0x24BEE4478], MEMORY[0x24BEE44A8]);
}

void sub_23C8D9DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7EE5F4(a1, a1, a3, a4);
  sub_23C7E1A0C();
}

void sub_23C8D9E08(uint64_t a1, uint64_t a2)
{
  sub_23C8D9E2C(a1, a2, MEMORY[0x24BEE44F0], MEMORY[0x24BEE4520]);
}

void sub_23C8D9E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7EE5F4(a1, a1, a3, a4);
  sub_23C7E1A0C();
}

uint64_t sub_23C8D9E58(uint64_t a1, uint64_t a2)
{
  return sub_23C8D9E7C(a1, a2, MEMORY[0x24BEE4568], MEMORY[0x24BEE4598]);
}

uint64_t sub_23C8D9E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_23C7EE5F4(a1, a1, a3, a4);
  if (!v4)
    return v6;
  return result;
}

uint64_t sub_23C8D9EAC()
{
  return sub_23C911904();
}

uint64_t sub_23C8D9EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C8D9894(a1, a4, a2, a3);
}

uint64_t sub_23C8D9EE4()
{
  return sub_23C9118A4();
}

uint64_t sub_23C8D9EF8()
{
  return sub_23C911898();
}

uint64_t sub_23C8D9F0C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23C9118B0();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_23C8D9F2C(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA0AC(a1, a2, MEMORY[0x24BEE3690]);
}

uint64_t sub_23C8D9F48()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23C9118BC();
  if (v0)
    return v2;
  return result;
}

void sub_23C8D9F68(uint64_t a1, uint64_t a2)
{
  sub_23C8DA034(a1, a2, MEMORY[0x24BEE36B0]);
}

void sub_23C8D9F84(uint64_t a1, uint64_t a2)
{
  sub_23C8DA070(a1, a2, MEMORY[0x24BEE36B8]);
}

uint64_t sub_23C8D9FA0(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA0AC(a1, a2, MEMORY[0x24BEE36C0]);
}

uint64_t sub_23C8D9FBC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23C9118E0();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_23C8D9FDC(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA108(a1, a2, MEMORY[0x24BEE36D8]);
}

uint64_t sub_23C8D9FF8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23C9118C8();
  if (v0)
    return v2;
  return result;
}

void sub_23C8DA018(uint64_t a1, uint64_t a2)
{
  sub_23C8DA034(a1, a2, MEMORY[0x24BEE36D0]);
}

void sub_23C8DA034(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  __int16 v3;

  v3 = a3();
  sub_23C7DFD94(v3 & 0x1FF);
  sub_23C7E1A0C();
}

void sub_23C8DA054(uint64_t a1, uint64_t a2)
{
  sub_23C8DA070(a1, a2, MEMORY[0x24BEE36E0]);
}

void sub_23C8DA070(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;

  v3 = a3();
  sub_23C7DFD94(v3 & 0x1FFFF);
  sub_23C7E1A0C();
}

uint64_t sub_23C8DA090(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA0AC(a1, a2, MEMORY[0x24BEE36E8]);
}

uint64_t sub_23C8DA0AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;

  v3 = a3();
  return sub_23C7EDF80(v3);
}

uint64_t sub_23C8DA0CC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23C9118EC();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_23C8DA0EC(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA108(a1, a2, MEMORY[0x24BEE36F8]);
}

uint64_t sub_23C8DA108(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t sub_23C8DA12C()
{
  return sub_23C9118D4();
}

void sub_23C8DA154()
{
  sub_23C8D99F4();
}

void sub_23C8DA178()
{
  sub_23C8D9A54();
}

void sub_23C8DA18C()
{
  sub_23C8D9AB4();
}

uint64_t sub_23C8DA1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
}

uint64_t sub_23C8DA1CC(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA1D8(a1, a2, sub_23C8DA1A0);
}

uint64_t sub_23C8DA1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8DB9E8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_23C7DAECC);
}

uint64_t sub_23C8DA1F8(uint64_t a1, uint64_t a2)
{
  return sub_23C7EFF18(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7DAECC);
}

BOOL sub_23C8DA214(int a1, Swift::Int atIndex)
{
  return Row.hasNull(atIndex:)(atIndex);
}

uint64_t sub_23C8DA23C(uint64_t a1, unint64_t a2)
{
  sqlite3_stmt *v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  _QWORD v7[4];

  if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a1 + 72) > (int64_t)a2)
  {
    v3 = *(sqlite3_stmt **)(a1 + 64);
    if (!v3)
    {
      sub_23C84BD20();
      return v5 & 1;
    }
    if (!(a2 >> 31))
    {
      MEMORY[0x24BDAC7A8](a1);
      v7[2] = v4;
      v7[3] = a2;
      if (sqlite3_column_type(v3, a2) == 5)
        v5 = sub_23C831014(v3, a2, sub_23C859F74, v7);
      else
        v5 = sqlite3_column_int64(v3, a2) != 0;
      return v5 & 1;
    }
    __break(1u);
  }
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

void sub_23C8DA388(uint64_t a1, unint64_t a2)
{
  sqlite3_stmt *v3;
  uint64_t v4;
  _QWORD v5[4];

  if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BCD4();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  v5[2] = v4;
  v5[3] = a2;
  if (sqlite3_column_type(v3, a2) == 5)
    sub_23C830FB8(v3, a2, sub_23C859F74, v5);
  else
    sqlite3_column_int64(v3, a2);
}

void sub_23C8DA4C0(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;
  sqlite3_int64 v4;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BD70();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (v4 = sqlite3_column_int64(v3, v2), v4 != (char)v4))
    sub_23C83113C(v3);
}

void sub_23C8DA608(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;
  sqlite3_int64 v4;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BDBC();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (v4 = sqlite3_column_int64(v3, v2), v4 != (__int16)v4))
    sub_23C831198(v3);
}

void sub_23C8DA750(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;
  sqlite3_int64 v4;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BE08();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (v4 = sqlite3_column_int64(v3, v2), v4 != (int)v4))
    sub_23C8310CC();
}

void sub_23C8DA898(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BE54();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5)
    sub_23C831070(v3);
  else
    sqlite3_column_int64(v3, v2);
}

void sub_23C8DA9D0(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BEA0();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || sqlite3_column_int64(v3, v2) < 0)
    sub_23C8311F4(v3);
}

void sub_23C8DAB14(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BEEC();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (unint64_t)sqlite3_column_int64(v3, v2) >= 0x100)
    sub_23C831250(v3);
}

void sub_23C8DAC5C(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BF38();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (unint64_t)sqlite3_column_int64(v3, v2) >= 0x10000)
    sub_23C8312AC(v3);
}

void sub_23C8DADA4(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BF84();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || (unint64_t)sqlite3_column_int64(v3, v2) >> 32)
    sub_23C831308(v3);
}

void sub_23C8DAEEC(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84BFD0();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5 || sqlite3_column_int64(v3, v2) < 0)
    sub_23C831364(v3);
}

void sub_23C8DB030(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_10;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_10;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84C01C();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_10:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5)
    sub_23C8313C0(v3);
  else
    sqlite3_column_double(v3, v2);
}

void sub_23C8DB174(uint64_t a1, unint64_t a2)
{
  int v2;
  sqlite3_stmt *v3;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v2 = a2;
  if (*(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_11;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
  {
    sub_23C84C074();
    return;
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sub_23C9117B4();
    __break(1u);
    return;
  }
  MEMORY[0x24BDAC7A8](a1);
  if (sqlite3_column_type(v3, v2) == 5)
    sub_23C83141C(v3);
  else
    sqlite3_column_double(v3, v2);
}

uint64_t sub_23C8DB2AC(uint64_t a1, unint64_t a2)
{
  sqlite3_stmt *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];

  if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(a1 + 72) <= (int64_t)a2)
    goto LABEL_13;
  v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3)
    return sub_23C84BC74();
  if (a2 >> 31)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    result = sub_23C9117B4();
    __break(1u);
    return result;
  }
  MEMORY[0x24BDAC7A8](a1);
  v6[2] = v4;
  v6[3] = a2;
  if (sqlite3_column_type(v3, a2) == 5)
    return sub_23C830F5C(v3, a2, sub_23C859F74, v6);
  if (!sqlite3_column_text(v3, a2))
    goto LABEL_12;
  return sub_23C910F80();
}

#error "23C8DB5F0: call analysis failed (funcsize=249)"

uint64_t sub_23C8DB7F4(uint64_t a1, uint64_t a2)
{
  return sub_23C8DA1D8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA214);
}

uint64_t sub_23C8DB800()
{
  uint64_t v0;

  return sub_23C8DA23C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8)) & 1;
}

uint64_t sub_23C8DB828()
{
  uint64_t v0;

  return sub_23C8DB2AC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_23C8DB84C()
{
  uint64_t v0;

  sub_23C8DB174(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_23C8DB870()
{
  uint64_t v0;

  sub_23C8DB030(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_23C8DB894(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA4C0);
}

uint64_t sub_23C8DB8B0(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA608);
}

uint64_t sub_23C8DB8CC(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA750);
}

uint64_t sub_23C8DB8E8(uint64_t a1, uint64_t a2)
{
  return sub_23C7F00BC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA898);
}

uint64_t sub_23C8DB904()
{
  return sub_23C911A30();
}

uint64_t sub_23C8DB918(uint64_t a1, uint64_t a2)
{
  return sub_23C7F00BC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA9D0);
}

uint64_t sub_23C8DB934(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DAB14);
}

uint64_t sub_23C8DB950(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return sub_23C7E942C(a1, a2, a3);
}

uint64_t sub_23C8DB964(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DAC5C);
}

uint64_t sub_23C8DB980(uint64_t a1, uint64_t a2)
{
  return sub_23C8DB950(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DADA4);
}

uint64_t sub_23C8DB99C(uint64_t a1, uint64_t a2)
{
  return sub_23C7F00BC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DAEEC);
}

uint64_t sub_23C8DB9B8()
{
  return sub_23C911A3C();
}

uint64_t sub_23C8DB9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C8DB9E8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))sub_23C8DB3F0);
}

uint64_t sub_23C8DB9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))
{
  _QWORD *v6;

  return a6(a1, *v6, v6[1], v6[2], *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
}

uint64_t sub_23C8DBA18(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 104);
}

id sub_23C8DBA20()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  result = objc_msgSend(v0, sel_setFormatOptions_, 1907);
  qword_256BCDB28 = (uint64_t)v0;
  return result;
}

uint64_t sub_23C8DBA6C@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v5;
  char v6;

  v5 = a1;
  v6 = 1;
  v3 = (_QWORD *)swift_retain();
  return RowDecodingContext.init(row:key:)(v3, &v5, a2);
}

uint64_t sub_23C8DBAAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  char v27;
  uint64_t v28;
  __int128 v29;
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[24];
  unsigned __int8 v34;
  __int128 v35;
  __int128 v36;

  v8 = sub_23C7E79A8(&qword_25430CEB0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  v13 = *((unsigned __int8 *)a1 + 16);
  if (v13 == 4 && (v12 | v11) == 0)
  {
    v22 = sub_23C910B6C();
    v23 = a4;
    v24 = 1;
LABEL_9:
    sub_23C7DE70C(v23, v24, 1, v22);
    return swift_release();
  }
  v15 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)v33 = *(_OWORD *)a2;
  v33[16] = v15;
  v28 = v11;
  *(_QWORD *)&v29 = v12;
  BYTE8(v29) = v13;
  sub_23C8DD9B0((uint64_t)&v28, (uint64_t)v10);
  v16 = sub_23C910B6C();
  if (sub_23C7DE718((uint64_t)v10, 1, v16) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a4, v10, v16);
    v23 = a4;
    v24 = 0;
    v22 = v16;
    goto LABEL_9;
  }
  sub_23C7E7900((uint64_t)v10, &qword_25430CEB0);
  v28 = a3;
  *(_QWORD *)&v29 = 0;
  BYTE8(v29) = 1;
  v17 = (_QWORD *)swift_retain();
  RowDecodingContext.init(row:key:)(v17, (__int128 *)&v28, (uint64_t)v33);
  v28 = *(_QWORD *)v33;
  v29 = *(_OWORD *)&v33[8];
  v30 = v34;
  v31 = v35;
  v32 = v36;
  v26[1] = v11;
  v26[2] = v12;
  v27 = v13;
  sub_23C83256C();
  swift_allocError();
  sub_23C8152BC(v16, (uint64_t)&v28, v18);
  v19 = v29;
  v20 = v32;
  v21 = v30;
  swift_release();
  sub_23C815EF0(v19, *((uint64_t *)&v19 + 1), v21);
  swift_bridgeObjectRelease();
  sub_23C7E13C4(v20);
  swift_willThrow();
  return swift_release();
}

void sub_23C8DBCC8(sqlite3_stmt *a1@<X0>, int a2@<W1>, char **a3@<X2>, void (*a4)(uint64_t *__return_ptr)@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  sqlite3_stmt *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  id v49;
  sqlite3_stmt *v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int8 v59;
  _QWORD v60[5];
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t *__return_ptr);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  sqlite3_stmt *v71;
  __int128 v72;
  char v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  unsigned __int8 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  unsigned __int8 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v66 = a5;
  v67 = a4;
  LODWORD(v86) = a2;
  v71 = a1;
  v68 = a6;
  v61 = sub_23C910A40();
  v60[4] = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v60[3] = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C7E79A8(&qword_25430B238);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v62 = type metadata accessor for DatabaseDateComponents();
  v11 = MEMORY[0x24BDAC7A8](v62);
  v60[1] = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v60[2] = (char *)v60 - v15;
  v69 = sub_23C910B6C();
  v65 = *(_QWORD *)(v69 - 8);
  v16 = MEMORY[0x24BDAC7A8](v69);
  v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v60[0] = (char *)v60 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v64 = (char *)v60 - v21;
  v22 = sub_23C7E79A8(&qword_25430CEB0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v60 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v31 = *a3;
  if (*((_BYTE *)a3 + 16))
  {
    if (*((_BYTE *)a3 + 16) != 1)
      __asm { BR              X9 }
    v32 = *a3;
    v33 = (uint64_t)a3[1];
    swift_retain();
    v34 = v71;
    v35 = v86;
    sub_23C7EEF08(v71, v86, (uint64_t)&v81);
    v36 = v81;
    v37 = v82;
    v38 = BYTE8(v82);
    v64 = v32;
    ((void (*)(uint64_t *))v32)(&v81);
    v39 = v69;
    if (sub_23C7DE718((uint64_t)v30, 1, v69) != 1)
    {
      sub_23C81ABB8(v64, v33, 1);
      sub_23C7E5640(v36, v37, v38);
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v68, v30, v39);
      return;
    }
    sub_23C7E7900((uint64_t)v30, &qword_25430CEB0);
    v67(&v81);
    v76 = v81;
    v77 = v82;
    v78 = v83;
    v79 = v84;
    v80 = v85;
    sub_23C7EEF08(v34, v35, (uint64_t)&v74);
    v72 = v74;
    v73 = v75;
    sub_23C83256C();
    v70 = swift_allocError();
    sub_23C8152BC(v39, (uint64_t)&v76, v40);
    sub_23C7E5640(v72, *((unint64_t *)&v72 + 1), v73);
    v41 = v77;
    v42 = v80;
    v86 = v33;
    v43 = v78;
    swift_release();
    sub_23C815EF0(v41, *((uint64_t *)&v41 + 1), v43);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v42);
    swift_willThrow();
    sub_23C7E5640(v36, v37, v38);
    v44 = v64;
    v45 = v86;
    v46 = 1;
  }
  else
  {
    v47 = (uint64_t)a3[1];
    v48 = *a3;
    v49 = v31;
    v50 = v71;
    v51 = v86;
    if (!sqlite3_column_text(v71, v86))
    {
      __break(1u);
      JUMPOUT(0x23C8DC9F4);
    }
    sub_23C910F80();
    v52 = (void *)sub_23C910E6C();
    swift_bridgeObjectRelease();
    v53 = objc_msgSend(v49, sel_dateFromString_, v52);

    v54 = v69;
    if (v53)
    {
      sub_23C910B60();

      v55 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
      v55(v25, v18, v54);
      sub_23C7DE70C((uint64_t)v25, 0, 1, v54);
      if (sub_23C7DE718((uint64_t)v25, 1, v54) != 1)
      {
        sub_23C81ABB8(v48, v47, 0);
        v55(v68, v25, v54);
        return;
      }
    }
    else
    {
      sub_23C7DE70C((uint64_t)v25, 1, 1, v69);
    }
    sub_23C7E7900((uint64_t)v25, &qword_25430CEB0);
    v67(&v81);
    v76 = v81;
    v77 = v82;
    v78 = v83;
    v79 = v84;
    v80 = v85;
    sub_23C7EEF08(v50, v51, (uint64_t)&v74);
    v72 = v74;
    v73 = v75;
    sub_23C83256C();
    swift_allocError();
    sub_23C8152BC(v54, (uint64_t)&v76, v56);
    sub_23C7E5640(v72, *((unint64_t *)&v72 + 1), v73);
    v57 = v77;
    v58 = v80;
    v59 = v78;
    swift_release();
    sub_23C815EF0(v57, *((uint64_t *)&v57 + 1), v59);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v58);
    swift_willThrow();
    v44 = v48;
    v45 = v47;
    v46 = 0;
  }
  sub_23C81ABB8(v44, v45, v46);
}

uint64_t sub_23C8DCA0C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  sqlite3_stmt *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  void *v45;
  uint64_t v46;
  char v47;
  void *v48;
  id v49;
  sqlite3_stmt *v50;
  int v51;
  void *v52;
  id v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unsigned __int8 v61;
  _QWORD v62[6];
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  sqlite3_stmt *v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  __int128 v80;
  unsigned __int8 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  unsigned __int8 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v69 = a5;
  v89 = a4;
  v72 = a2;
  v73 = a1;
  v70 = a6;
  v63 = sub_23C910A40();
  v62[5] = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v66 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C7E79A8(&qword_25430B238);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v64 = type metadata accessor for DatabaseDateComponents();
  v11 = MEMORY[0x24BDAC7A8](v64);
  v62[3] = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v62[4] = (char *)v62 - v15;
  v71 = sub_23C910B6C();
  v68 = *(_QWORD *)(v71 - 8);
  v16 = MEMORY[0x24BDAC7A8](v71);
  v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v62[2] = (char *)v62 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v67 = (char *)v62 - v21;
  v22 = sub_23C7E79A8(&qword_25430CEB0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v62 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v31 = *a3;
  if (*((_BYTE *)a3 + 16))
  {
    if (*((_BYTE *)a3 + 16) != 1)
      __asm { BR              X9 }
    v32 = *a3;
    v33 = (uint64_t)a3[1];
    swift_retain();
    v34 = v73;
    v35 = v72;
    sub_23C7EEF08(v73, v72, (uint64_t)&v84);
    v36 = v84;
    v37 = v85;
    v38 = BYTE8(v85);
    v67 = (char *)v33;
    v66 = v32;
    ((void (*)(uint64_t *))v32)(&v84);
    v39 = v71;
    if (sub_23C7DE718((uint64_t)v30, 1, v71) != 1)
    {
      sub_23C81ABB8(v66, (uint64_t)v67, 1);
      sub_23C7E5640(v36, v37, v38);
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v70, v30, v39);
      return swift_release();
    }
    sub_23C7E7900((uint64_t)v30, &qword_25430CEB0);
    v79 = v69;
    *(_QWORD *)&v80 = 0;
    BYTE8(v80) = 1;
    v40 = (_QWORD *)swift_retain();
    RowDecodingContext.init(row:key:)(v40, (__int128 *)&v79, (uint64_t)&v84);
    v79 = v84;
    v80 = v85;
    v81 = v86;
    v82 = v87;
    v83 = v88;
    sub_23C7EEF08(v34, v35, (uint64_t)&v77);
    v75 = v77;
    v76 = v78;
    sub_23C83256C();
    v74 = swift_allocError();
    sub_23C8152BC(v39, (uint64_t)&v79, v41);
    sub_23C7E5640(v75, *((unint64_t *)&v75 + 1), v76);
    v42 = v80;
    v43 = v83;
    v44 = v81;
    swift_release();
    sub_23C815EF0(v42, *((uint64_t *)&v42 + 1), v44);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v43);
    swift_willThrow();
    sub_23C7E5640(v36, v37, v38);
    v45 = v66;
    v46 = (uint64_t)v67;
    v47 = 1;
    goto LABEL_13;
  }
  v67 = a3[1];
  v48 = v31;
  v49 = v31;
  v50 = v73;
  v51 = v72;
  if (!sqlite3_column_text(v73, v72))
  {
    __break(1u);
    JUMPOUT(0x23C8DD7BCLL);
  }
  sub_23C910F80();
  v52 = (void *)sub_23C910E6C();
  swift_bridgeObjectRelease();
  v53 = objc_msgSend(v49, sel_dateFromString_, v52);

  v54 = v71;
  if (!v53)
  {
    sub_23C7DE70C((uint64_t)v25, 1, 1, v71);
    goto LABEL_12;
  }
  sub_23C910B60();

  v55 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
  v55(v25, v18, v54);
  sub_23C7DE70C((uint64_t)v25, 0, 1, v54);
  if (sub_23C7DE718((uint64_t)v25, 1, v54) == 1)
  {
LABEL_12:
    sub_23C7E7900((uint64_t)v25, &qword_25430CEB0);
    v79 = v69;
    *(_QWORD *)&v80 = 0;
    BYTE8(v80) = 1;
    v57 = (_QWORD *)swift_retain();
    RowDecodingContext.init(row:key:)(v57, (__int128 *)&v79, (uint64_t)&v84);
    v79 = v84;
    v80 = v85;
    v81 = v86;
    v82 = v87;
    v83 = v88;
    sub_23C7EEF08(v50, v51, (uint64_t)&v77);
    v75 = v77;
    v76 = v78;
    sub_23C83256C();
    swift_allocError();
    sub_23C8152BC(v54, (uint64_t)&v79, v58);
    sub_23C7E5640(v75, *((unint64_t *)&v75 + 1), v76);
    v59 = v80;
    v60 = v83;
    v61 = v81;
    swift_release();
    sub_23C815EF0(v59, *((uint64_t *)&v59 + 1), v61);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v60);
    swift_willThrow();
    v45 = v48;
    v46 = (uint64_t)v67;
    v47 = 0;
LABEL_13:
    sub_23C81ABB8(v45, v46, v47);
    return swift_release();
  }
  sub_23C81ABB8(v48, (uint64_t)v67, 0);
  v55(v70, v25, v54);
  return swift_release();
}

uint64_t sub_23C8DD7D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v21[3];
  char v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[24];
  unsigned __int8 v29;
  __int128 v30;
  __int128 v31;

  v8 = sub_23C7E79A8(&qword_25430CEB0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  v13 = *((_BYTE *)a1 + 16);
  LOBYTE(v9) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)v28 = *(_OWORD *)a2;
  v28[16] = v9;
  v23 = v11;
  *(_QWORD *)&v24 = v12;
  BYTE8(v24) = v13;
  sub_23C8DD9B0((uint64_t)&v23, (uint64_t)v10);
  v14 = sub_23C910B6C();
  if (sub_23C7DE718((uint64_t)v10, 1, v14) == 1)
  {
    sub_23C7E7900((uint64_t)v10, &qword_25430CEB0);
    v23 = a3;
    *(_QWORD *)&v24 = 0;
    BYTE8(v24) = 1;
    v15 = (_QWORD *)swift_retain();
    RowDecodingContext.init(row:key:)(v15, (__int128 *)&v23, (uint64_t)v28);
    v23 = *(_QWORD *)v28;
    v24 = *(_OWORD *)&v28[8];
    v25 = v29;
    v26 = v30;
    v27 = v31;
    v21[1] = v11;
    v21[2] = v12;
    v22 = v13;
    sub_23C83256C();
    swift_allocError();
    sub_23C8152BC(v14, (uint64_t)&v23, v16);
    v17 = v24;
    v18 = v27;
    v19 = v25;
    swift_release();
    sub_23C815EF0(v17, *((uint64_t *)&v17 + 1), v19);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v18);
    swift_willThrow();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a4, v10, v14);
  }
  return swift_release();
}

void sub_23C8DD9B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char v27;

  v5 = sub_23C7E79A8(&qword_25430CEB0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned __int8 *)(a1 + 16);
  v12 = *(void **)v2;
  v13 = *(_QWORD *)(v2 + 8);
  if (!*(_BYTE *)(v2 + 16))
  {
    if (v11 != 2)
    {
      if (v11 == 3)
      {
        sub_23C7E56A4(v10, v9, 3);
        sub_23C824ABC(v12, v13, 0);
        sub_23C910EA8();
        sub_23C910E90();
        v18 = v17;
        sub_23C7E5640(v10, v9, 3);
        if (v18)
          goto LABEL_10;
      }
      else
      {
        v22 = v12;
      }
      v23 = sub_23C910B6C();
      sub_23C7DE70C(a2, 1, 1, v23);
      swift_bridgeObjectRelease();
LABEL_16:
      v14 = v12;
      v15 = v13;
      v16 = 0;
      goto LABEL_17;
    }
    sub_23C7E56A4(v10, v9, 2);
    sub_23C824ABC(v12, v13, 0);
LABEL_10:
    swift_bridgeObjectRetain();
    v19 = (void *)sub_23C910E6C();
    v20 = objc_msgSend(v12, sel_dateFromString_, v19);

    if (v20)
    {
      sub_23C910B60();

      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    v24 = sub_23C910B6C();
    sub_23C7DE70C((uint64_t)v7, v21, 1, v24);
    sub_23C8DEAE8((uint64_t)v7, a2, &qword_25430CEB0);
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  if (*(_BYTE *)(v2 + 16) != 1)
    __asm { BR              X10 }
  v26[0] = v10;
  v26[1] = v9;
  v27 = v11;
  swift_retain();
  ((void (*)(_QWORD *))v12)(v26);
  v14 = v12;
  v15 = v13;
  v16 = 1;
LABEL_17:
  sub_23C81ABB8(v14, v15, v16);
}

uint64_t sub_23C8DDDD8@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_256BCBA88 != -1)
    swift_once();
  v2 = (void *)qword_256BCDB28;
  v3 = (void *)sub_23C910E6C();
  v4 = objc_msgSend(v2, sel_dateFromString_, v3);

  if (v4)
  {
    sub_23C910B60();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = sub_23C910B6C();
  return sub_23C7DE70C(a1, v5, 1, v6);
}

sqlite3_stmt *sub_23C8DDEB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  sqlite3_stmt *result;

  if ((a1 & 0x8000000000000000) == 0 && v2[9] > a1)
    return sub_23C7F892C(v2, a1, a2);
  result = (sqlite3_stmt *)sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t sub_23C8DDF34(uint64_t *a1)
{
  return sub_23C8DDF48(a1);
}

uint64_t sub_23C8DDF48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DEA08();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C8DDFB0(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_23C8DDFB0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      return sub_23C8DE614(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_146;
  v121 = result;
  v118 = a1;
  if (v3 <= 1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v124 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v41 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_113;
    }
    v120 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v120 = result;
    v124 = (char *)(result + 32);
  }
  v11 = 0;
  v12 = *a1;
  v119 = v12 + 8;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v122 = v3;
  while (1)
  {
    v14 = v11++;
    if (v11 >= v3)
      goto LABEL_39;
    v15 = (uint64_t *)(v12 + 16 * v11);
    result = *v15;
    v16 = v15[1];
    v17 = (_QWORD *)(v12 + 16 * v14);
    if (result == *v17 && v16 == v17[1])
    {
      v20 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_38;
      v19 = 0;
    }
    else
    {
      result = sub_23C7E1CA0();
      v19 = result;
      v20 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_30;
    }
    v21 = (_QWORD *)(v119 + 16 * v20);
    do
    {
      result = *(v21 - 1);
      v22 = (_QWORD *)(v12 + 16 * v11);
      if (result == *v22 && *v21 == v22[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = sub_23C7E1CA0();
        if (((v19 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v21 += 2;
      v24 = v20 + 1;
      v11 = v20;
      v20 = v24;
    }
    while (v24 < v3);
    v20 = v24;
LABEL_30:
    v11 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_31:
      if (v20 < v14)
        goto LABEL_150;
      if (v14 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v14;
        v27 = v20;
        v28 = v14;
        do
        {
          if (v28 != --v27)
          {
            if (!v12)
              goto LABEL_153;
            v29 = v12 + v25;
            v30 = *(_QWORD *)(v12 + v26);
            v31 = *(_QWORD *)(v12 + v26 + 8);
            *(_OWORD *)(v12 + v26) = *(_OWORD *)(v12 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_38:
      v11 = v20;
    }
LABEL_39:
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_145;
      if (v11 - v14 < v121)
        break;
    }
LABEL_59:
    if (v11 < v14)
      goto LABEL_140;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C7ECD30(0, v13[2] + 1);
      v13 = (_QWORD *)result;
    }
    v40 = v13[2];
    v39 = v13[3];
    v41 = v40 + 1;
    if (v40 >= v39 >> 1)
    {
      result = (uint64_t)sub_23C7ECD30((char *)(v39 > 1), v40 + 1);
      v13 = (_QWORD *)result;
    }
    v13[2] = v41;
    v42 = v13 + 4;
    v43 = &v13[2 * v40 + 4];
    *v43 = v14;
    v43[1] = v11;
    if (v40)
    {
      v123 = v11;
      while (1)
      {
        v44 = v41 - 1;
        if (v41 >= 4)
        {
          v49 = &v42[2 * v41];
          v50 = *(v49 - 8);
          v51 = *(v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_129;
          v54 = *(v49 - 6);
          v53 = *(v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_130;
          v56 = v41 - 2;
          v57 = &v42[2 * v41 - 4];
          v59 = *v57;
          v58 = v57[1];
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_131;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_133;
          if (v61 >= v52)
          {
            v79 = &v42[2 * v44];
            v81 = *v79;
            v80 = v79[1];
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_139;
            v72 = v47 < v82;
            goto LABEL_97;
          }
        }
        else
        {
          if (v41 != 3)
          {
            v73 = v13[4];
            v74 = v13[5];
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_91;
          }
          v46 = v13[4];
          v45 = v13[5];
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_132;
        v56 = v41 - 2;
        v62 = &v42[2 * v41 - 4];
        v64 = *v62;
        v63 = v62[1];
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_134;
        v68 = &v42[2 * v44];
        v70 = *v68;
        v69 = v68[1];
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_136;
        if (__OFADD__(v66, v71))
          goto LABEL_138;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_97:
          if (v72)
            v44 = v56;
          goto LABEL_99;
        }
LABEL_91:
        if ((v67 & 1) != 0)
          goto LABEL_135;
        v75 = &v42[2 * v44];
        v77 = *v75;
        v76 = v75[1];
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_137;
        if (v78 < v66)
          goto LABEL_108;
LABEL_99:
        v83 = v44 - 1;
        if (v44 - 1 >= v41)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        v84 = v12;
        if (!v12)
          goto LABEL_152;
        v85 = v13;
        v86 = &v42[2 * v83];
        v87 = *v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[2 * v44];
        v91 = v90[1];
        v92 = v84;
        result = sub_23C7E1930((char *)(v84 + 16 * *v86), (char *)(v84 + 16 * *v90), v84 + 16 * v91, v5, v6, v7, v8, v9, v117, (uint64_t)v118, v119, v120, v121, v122, v123, v124);
        if (v1)
        {
LABEL_110:
          v94 = swift_bridgeObjectRelease();
          return sub_23C7E8F50(v94, v95, v96, v97, v98, v99, v100, v101, v117, (uint64_t)v118, v119, v120);
        }
        if (v91 < v87)
          goto LABEL_126;
        if (v89 > v85[2])
          goto LABEL_127;
        *v86 = v87;
        v88[2 * v83 + 1] = v91;
        v93 = v85[2];
        if (v89 >= v93)
          goto LABEL_128;
        v13 = v85;
        v41 = v93 - 1;
        result = (uint64_t)memmove(v90, v90 + 2, 16 * (v93 - 1 - v89));
        v42 = v88;
        v85[2] = v93 - 1;
        v12 = v92;
        v11 = v123;
        if (v93 <= 2)
          goto LABEL_108;
      }
    }
    v41 = 1;
LABEL_108:
    v3 = v122;
    if (v11 >= v122)
    {
      v10 = v120;
LABEL_113:
      result = (uint64_t)v13;
      v120 = v10;
      if (v41 >= 2)
      {
        v102 = *v118;
        do
        {
          v103 = v41 - 2;
          if (v41 < 2)
            goto LABEL_141;
          if (!v102)
            goto LABEL_154;
          v104 = result;
          v105 = *(_QWORD *)(result + 32 + 16 * v103);
          v106 = *(_QWORD *)(result + 32 + 16 * (v41 - 1) + 8);
          result = sub_23C7E1930((char *)(v102 + 16 * v105), (char *)(v102 + 16 * *(_QWORD *)(result + 32 + 16 * (v41 - 1))), v102 + 16 * v106, v5, v6, v7, v8, v9, v117, (uint64_t)v118, v119, v120, v121, v122, v123, v124);
          if (v1)
            goto LABEL_110;
          if (v106 < v105)
            goto LABEL_142;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v104 = result;
          }
          if (v103 >= *(_QWORD *)(v104 + 16))
            goto LABEL_143;
          v107 = (_QWORD *)(v104 + 32 + 16 * v103);
          *v107 = v105;
          v107[1] = v106;
          v108 = *(_QWORD *)(v104 + 16);
          if (v41 > v108)
            goto LABEL_144;
          memmove((void *)(v104 + 32 + 16 * (v41 - 1)), (const void *)(v104 + 32 + 16 * v41), 16 * (v108 - v41));
          result = v104;
          *(_QWORD *)(v104 + 16) = v108 - 1;
          v41 = v108 - 1;
        }
        while (v108 > 2);
      }
      v109 = swift_bridgeObjectRelease();
      return sub_23C7E8F50(v109, v110, v111, v112, v113, v114, v115, v116, v117, (uint64_t)v118, v119, v120);
    }
  }
  if (__OFADD__(v14, v121))
    goto LABEL_148;
  if (v14 + v121 >= v3)
    v32 = v3;
  else
    v32 = v14 + v121;
  if (v32 >= v14)
  {
    if (v11 != v32)
    {
      v33 = (uint64_t *)(v12 + 16 * v11);
      do
      {
        v34 = (uint64_t *)(v12 + 16 * v11);
        result = *v34;
        v35 = v34[1];
        v36 = v14;
        v37 = v33;
        do
        {
          if (result == *(v37 - 2) && v35 == *(v37 - 1))
            break;
          result = sub_23C7E1CA0();
          if ((result & 1) == 0)
            break;
          if (!v12)
            goto LABEL_151;
          result = *v37;
          v35 = v37[1];
          *(_OWORD *)v37 = *((_OWORD *)v37 - 1);
          *(v37 - 1) = v35;
          *(v37 - 2) = result;
          v37 -= 2;
          ++v36;
        }
        while (v11 != v36);
        ++v11;
        v33 += 2;
      }
      while (v11 != v32);
      v11 = v32;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}

uint64_t sub_23C8DE614(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = sub_23C7E1CA0();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C8DE6D4(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_23C8F9018(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v12 - 16;
      v21 = *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v12 - 1) == *((_QWORD *)v6 - 1);
      if (v21 || (sub_23C7E1CA0() & 1) == 0)
      {
        v23 = v19 != v12 || v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_23C8F9018(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (sub_23C7E1CA0() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  v25 = (v12 - v4) / 16;
  if (v6 != v4 || v6 >= &v4[16 * v25])
    memmove(v6, v4, 16 * v25);
  return 1;
}

char *sub_23C8DE884(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_256BCDB38);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23C8DE978()
{
  char *v0;
  int64_t v1;
  char v2;
  char *v3;

  v0 = (char *)sub_23C7E43C4();
  return sub_23C8DE884(v0, v1, v2, v3);
}

void sub_23C8DE988()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = sub_23C7E43C4();
  sub_23C7FDCC8(v0, v1, v2, v3);
}

void sub_23C8DE998()
{
  sub_23C7E43C4();
  sub_23C7FDE98();
}

void sub_23C8DE9A8()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = sub_23C7E43C4();
  sub_23C7FDEB4(v0, v1, v2, v3);
}

void sub_23C8DE9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_23C7E43C4();
  sub_23C7FDF6C(v0, v1, v2, v3);
}

void sub_23C8DE9C8()
{
  sub_23C7E43C4();
  sub_23C7FDD80();
}

void sub_23C8DE9D8()
{
  sub_23C7E43C4();
  JUMPOUT(0x242625494);
}

void sub_23C8DE9E8()
{
  sub_23C7E43C4();
  sub_23C7FE4DC();
}

void sub_23C8DE9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_23C7E43C4();
  sub_23C7FE5EC(v0, v1, v2, v3);
}

void sub_23C8DEA08()
{
  sub_23C7E43C4();
  sub_23C7E64D0();
}

void sub_23C8DEA18()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = sub_23C7E43C4();
  sub_23C7FE6CC(v0, v1, v2, v3);
}

void sub_23C8DEA28()
{
  sub_23C7E43C4();
  sub_23C7FE818();
}

void sub_23C8DEA38()
{
  sub_23C7E43C4();
  sub_23C7FEA74();
}

uint64_t sub_23C8DEA4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t sub_23C8DEAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(qword_25430D620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23C8DEAE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_23C7E79A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_23C7DB390();
}

uint64_t sub_23C8DEB28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(qword_25430D620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PrefetchedRowsDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrefetchedRowsDecoder);
}

_OWORD *sub_23C8DEB7C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_23C8DEB94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C8DBA6C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C8DEB9C()
{
  return sub_23C8D7668();
}

void sub_23C8DEBC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7DB390();
}

_QWORD *sub_23C8DEBFC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_23C8DEC60(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t ValueReducers.Fetch._fetch(_:)()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t ValueReducers.Fetch._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, a1, v4);
  return sub_23C7DE70C(a3, 0, 1, v4);
}

uint64_t sub_23C8DED28(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Fetch<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8DED54()
{
  return ValueReducers.Fetch._fetch(_:)();
}

uint64_t sub_23C8DED68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ValueReducers.Fetch._value(_:)(a1, a2, a3);
}

uint64_t type metadata accessor for ValueReducers.Fetch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueReducers.Fetch);
}

uint64_t sub_23C8DED88(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E649C();
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C8DEFA4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E649C();
    v2 = sub_23C8F74D0(a1);
    if ((v4 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x23C8DF2ECLL);
    }
    if (v2 < 0 || v2 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
    }
    else if ((*(_QWORD *)(a1 + 64 + 8 * ((unint64_t)v2 >> 6)) & (1 << v2)) != 0)
    {
      if (v3 == *(_DWORD *)(a1 + 36))
      {
        v5 = *(_QWORD *)(a1 + 56) + 24 * v2;
        v7 = *(_QWORD *)v5;
        v6 = *(_QWORD *)(v5 + 8);
        v8 = *(unsigned __int8 *)(v5 + 16);
        swift_bridgeObjectRetain();
        sub_23C7E56A4(v7, v6, v8);
        swift_bridgeObjectRetain();
        sub_23C7E56A4(v7, v6, v8);
        swift_bridgeObjectRelease();
        sub_23C7E5640(v7, v6, v8);
        swift_bridgeObjectRetain();
        sub_23C910EE4();
        sub_23C910F5C();
        __asm { BR              X8 }
      }
LABEL_11:
      __break(1u);
      JUMPOUT(0x23C8DF2DCLL);
    }
    __break(1u);
    goto LABEL_11;
  }
  return MEMORY[0x24BEE4AF8];
}

void sub_23C8DF300(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;

  v2 = a1;
  v3 = HIDWORD(a1);
  if (a1 < 0 != (int)a1 < 0)
  {
    if ((int)a1 >= 0)
      v4 = a1;
    else
      v4 = -(int)a1;
    if (a1 >= 0)
      v5 = HIDWORD(a1);
    else
      v5 = -HIDWORD(a1);
    v6 = __CFADD__(v4, v5);
    v7 = (v4 + v5);
    if (v6)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if ((int)a1 < 0)
      v8 = v7;
    else
      v8 = -v7;
    if (v8)
    {
LABEL_13:
      v22 = MEMORY[0x24BEE4AF8];
      sub_23C7FD348();
      if ((int)v3 >= v2 && (v8 & 0x8000000000000000) == 0)
      {
        v9 = v2 ^ 0x7FFFFFFFu;
        v10 = (v3 - v2);
        v11 = v2 + 1;
        while (v8)
        {
          if (!v9)
            goto LABEL_30;
          if (sqlite3_bind_parameter_name(*(sqlite3_stmt **)(a2 + 16), v11))
          {
            v12 = sub_23C910F74();
            v14 = sub_23C8A6DD0(1uLL, v12, v13);
            v15 = MEMORY[0x242624B34](v14);
            v17 = v16;
            swift_bridgeObjectRelease();
          }
          else
          {
            v15 = 0;
            v17 = 0;
          }
          v18 = *(_QWORD *)(v22 + 16);
          if (v18 >= *(_QWORD *)(v22 + 24) >> 1)
            sub_23C7FD348();
          *(_QWORD *)(v22 + 16) = v18 + 1;
          v19 = v22 + 16 * v18;
          *(_QWORD *)(v19 + 32) = v15;
          *(_QWORD *)(v19 + 40) = v17;
          if (!v10)
            goto LABEL_31;
          --v10;
          --v9;
          ++v11;
          if (!--v8)
            goto LABEL_25;
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      __break(1u);
      goto LABEL_33;
    }
LABEL_25:
    swift_release();
    return;
  }
  v20 = HIDWORD(a1) - a1;
  if (!__OFSUB__(HIDWORD(a1), (_DWORD)a1))
  {
    v8 = v20;
    if (v20)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_34:
  __break(1u);
}

uint64_t Statement.sql.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  sub_23C7DA548();
  v1 = sub_23C8E36A0();
  if ((sub_23C7E2FA0(v1) & 1) == 0)
    goto LABEL_7;
  swift_release();
  if (!sqlite3_sql(*(sqlite3_stmt **)(v0 + 16)))
  {
    __break(1u);
LABEL_7:
    sub_23C7DC484();
    result = sub_23C8E36DC();
    __break(1u);
    return result;
  }
  sub_23C910F74();
  if (qword_25430B2E0 != -1)
    swift_once();
  v2 = sub_23C910920();
  sub_23C805EE8(v2, (uint64_t)qword_254310410);
  sub_23C7EEE60();
  sub_23C911544();
  swift_bridgeObjectRelease();
  return sub_23C7DF8B0();
}

uint64_t sub_23C8DF5D8(sqlite3_stmt *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(unsigned int *)(v1 + 28);
  if (sqlite3_column_type(a1, *(_DWORD *)(v1 + 28)) != 5)
  {
    if (sqlite3_column_text(a1, v3))
      return sub_23C910F80();
    __break(1u);
  }
  sub_23C830F5C(a1, v3, sub_23C8E3614, v1);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_23C8DF668()
{
  sub_23C7DC66C();
  sub_23C7E57A4();
}

void sub_23C8DF688(uint64_t a1)
{
  sub_23C7E6438(a1);
  sub_23C7ECD3C();
}

void sub_23C8DF694()
{
  sub_23C7EDD30();
  sub_23C82D110();
}

void sub_23C8DF6B4(uint64_t a1)
{
  sub_23C7E3464(a1);
  sub_23C7E4150();
}

void sub_23C8DF6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23C8DF6F8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23C8E0874);
}

void sub_23C8DF6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23C8DF6F8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23C8E0B34);
}

void sub_23C8DF6F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  _BYTE *v9;
  uint64_t v10;

  v9 = (_BYTE *)(a1 + 24);
  sub_23C7E6180();
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    swift_retain_n();
    swift_retain();
    v10 = swift_retain();
    a4(v10, a1, a2, a3);
    if (v4)
    {
      sub_23C7DFA18();
    }
    else
    {
      sub_23C7DFB3C();
      *v9 = 1;
    }
    sub_23C7DFA18();
  }
  sub_23C7DFA18();
  sub_23C7DF978();
}

uint64_t sub_23C8DF7C0(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  result = swift_beginAccess();
  if ((*(_BYTE *)(v2 + 24) & 1) == 0)
  {
    swift_retain();
    v7 = swift_retain();
    sub_23C8E0DC0(v7, a1, a2, v2);
    result = swift_release();
    if (!v3)
      *(_BYTE *)(v2 + 24) = 1;
  }
  return result;
}

uint64_t sub_23C8DF860(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
  {
    swift_retain();
    v5 = swift_retain();
    sub_23C8E15C4(v5, a1);
    result = swift_release();
    if (!v2)
      *(_BYTE *)(v1 + 24) = 1;
  }
  return result;
}

void DatabaseCursor.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a4 + 8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(a3, v7) & 1) == 0)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
    MEMORY[0x24BDAC7A8](v8);
    Statement.forEachStep(_:)((void (*)(sqlite3_stmt *))sub_23C8E1EB0);
    sub_23C7DFA18();
    if (!v4)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(1, a3, v7);
  }
  sub_23C7DEF28();
}

const unsigned __int8 *sub_23C8DF9D8(sqlite3_stmt *a1)
{
  uint64_t v1;
  int v3;
  const unsigned __int8 *result;

  v3 = *(_DWORD *)(v1 + 28);
  if (sqlite3_column_type(a1, v3) == 5)
    return 0;
  result = sqlite3_column_text(a1, v3);
  if (result)
    return (const unsigned __int8 *)sub_23C910F80();
  __break(1u);
  return result;
}

sqlite3_int64 sub_23C8DFA2C(sqlite3_stmt *a1)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(v1 + 28);
  if (sqlite3_column_type(a1, v3) == 5)
    return 0;
  else
    return sqlite3_column_int64(a1, v3);
}

uint64_t sub_23C8DFA84(sqlite3_stmt *a1)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(v1 + 28);
  if (sqlite3_column_type(a1, v3) == 5)
    return 2;
  else
    return sqlite3_column_int64(a1, v3) != 0;
}

uint64_t sub_23C8DFAD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(a1 + 28);
  v2 = sub_23C7DC47C();
  return RowDecodingContext.init(statement:index:)(v2, v1);
}

void sub_23C8DFB08()
{
  sub_23C7DC66C();
  sub_23C7E57A4();
}

void sub_23C8DFB28(uint64_t a1)
{
  sub_23C7E6438(a1);
  sub_23C7ECD3C();
}

void sub_23C8DFB34()
{
  sub_23C7EDD30();
  sub_23C82D110();
}

void sub_23C8DFB54(uint64_t a1)
{
  sub_23C7E3464(a1);
  sub_23C7E4150();
}

BOOL StatementArguments.isEmpty.getter()
{
  _QWORD *v0;

  return !*(_QWORD *)(*v0 + 16) && *(_QWORD *)(v0[1] + 16) == 0;
}

Swift::Int_optional __swiftcall Statement.index(ofColumn:)(Swift::String ofColumn)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  Swift::Bool v8;
  Swift::Int v9;
  Swift::Int_optional result;

  v1 = sub_23C910E18();
  v3 = v2;
  sub_23C8E040C();
  v5 = sub_23C7DA7B4(v1, v3, v4);
  v7 = v6;
  sub_23C7E072C();
  swift_bridgeObjectRelease();
  v8 = v7 & 1;
  v9 = v5;
  result.value = v9;
  result.is_nil = v8;
  return result;
}

void StatementArguments.init<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X7>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C891CA0((uint64_t)sub_23C8E20D4, 0, a2, (uint64_t)&type metadata for DatabaseValue, MEMORY[0x24BEE4078], a3, MEMORY[0x24BEE40A8], a4);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v10 = MEMORY[0x24BEE4B00];
  *a5 = v9;
  a5[1] = v10;
  sub_23C7E252C();
}

Swift::Void __swiftcall Statement.setUncheckedArguments(_:)(GRDBInternal::StatementArguments a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)a1.values._rawValue;
  v3 = *((_QWORD *)a1.values._rawValue + 1);
  *(_QWORD *)(v1 + 104) = *(_QWORD *)a1.values._rawValue;
  *(_QWORD *)(v1 + 112) = v3;
  sub_23C7DB3B8();
  sub_23C7DEF00();
  sub_23C7E072C();
  sub_23C7DB624();
  *(_BYTE *)(v1 + 96) = 0;
  sub_23C7E2E68();
  sub_23C7ED650();
  sub_23C7DB3B8();
  v42 = v1;
  sub_23C7E1F74();
  v38 = v4;
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_13:
    sub_23C7DBCD0();
    swift_bridgeObjectRelease();
    return;
  }
  v6 = 0;
  v7 = 0;
  v39 = v2 + 32;
  v40 = v3;
  v8 = (_QWORD *)(v4 + 40);
  v41 = v2;
  while (1)
  {
    v9 = v6 + 1;
    if (*v8 && *(_QWORD *)(v3 + 16))
    {
      sub_23C7DBBB8();
      v10 = sub_23C7E94B8();
      if ((v11 & 1) != 0)
      {
        v12 = *(_QWORD *)(v3 + 56) + 24 * v10;
        v13 = *(_QWORD *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(unsigned __int8 *)(v12 + 16);
        sub_23C8E374C(*(_QWORD *)v12);
        swift_bridgeObjectRelease();
        sub_23C7EBC80(v13, v14, v15, v16, v17, v18, v19, v20, v38, v39, v40, v41, v42);
        v21 = v13;
        v22 = v14;
        v3 = v40;
        v2 = v41;
        sub_23C7E5640(v21, v22, v15);
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    v23 = *(_QWORD *)(v2 + 16);
    if (v7 != v23)
    {
      if (v7 >= v23)
        goto LABEL_15;
      v24 = sub_23C7DF644();
      sub_23C7E56A4(v24, v25, v26);
      v27 = sub_23C7DF644();
      sub_23C7EBC80(v27, v28, v29, v30, v31, v32, v33, v34, v38, v39, v40, v41, v42);
      v35 = sub_23C7DF644();
      v3 = v40;
      v2 = v41;
      sub_23C7E5640(v35, v36, v37);
      ++v7;
    }
LABEL_11:
    if ((_DWORD)v6 == 2147483645)
      break;
    v8 += 2;
    ++v6;
    if (v5 == v9)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  swift_unexpectedError();
  __break(1u);
}

uint64_t StatementArguments.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = a2;
  v19 = a3;
  v20 = a4;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  KeyPath = swift_getKeyPath();
  sub_23C891CA0((uint64_t)sub_23C87389C, (uint64_t)&v13, v14, (uint64_t)&type metadata for DatabaseValue, MEMORY[0x24BEE4078], v15, MEMORY[0x24BEE40A8], v8);
  v10 = v9;
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v12 = MEMORY[0x24BEE4B00];
  *a5 = v10;
  a5[1] = v12;
  return result;
}

uint64_t Statement.columnCount.getter()
{
  uint64_t v0;

  return sqlite3_column_count(*(sqlite3_stmt **)(v0 + 16));
}

void sub_23C8DFF18(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  type metadata accessor for StatementCursor();
  swift_allocObject();
  sub_23C7DC47C();
  sub_23C7E76BC(v2);
  sub_23C8E1ED0(v1, &v2);
  sub_23C7DB764();
}

double sub_23C8DFF80@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  type metadata accessor for RowDecoder();
  swift_initStackObject();
  v2 = swift_retain();
  sub_23C85548C(v2, &v7);
  swift_release();
  v3 = v8;
  v4 = v9;
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  result = *(double *)&v10;
  v6 = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v6;
  return result;
}

void sub_23C8E001C()
{
  sub_23C7DC66C();
  sub_23C7E57A4();
}

void sub_23C8E003C(uint64_t a1)
{
  sub_23C7E6438(a1);
  sub_23C7ECD3C();
}

void sub_23C8E0048()
{
  sub_23C7EDD30();
  sub_23C82D110();
}

void sub_23C8E0068(uint64_t a1)
{
  sub_23C7E3464(a1);
  sub_23C7E4150();
}

void sub_23C8E0074()
{
  sub_23C7DC66C();
  sub_23C7E57A4();
}

void sub_23C8E0094(uint64_t a1)
{
  sub_23C7E6438(a1);
  sub_23C7ECD3C();
}

void sub_23C8E00A0()
{
  sub_23C7EDD30();
  sub_23C82D110();
}

void sub_23C8E00C0(uint64_t a1)
{
  sub_23C7E3464(a1);
  sub_23C7E4150();
}

void sub_23C8E00CC()
{
  sub_23C7DC66C();
  sub_23C7E57A4();
}

void sub_23C8E00EC(uint64_t a1)
{
  sub_23C7E6438(a1);
  sub_23C7ECD3C();
}

void sub_23C8E00F8()
{
  sub_23C7EDD30();
  sub_23C82D110();
}

void sub_23C8E0118(uint64_t a1)
{
  sub_23C7E3464(a1);
  sub_23C7E4150();
}

uint64_t sub_23C8E0124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  v0 = sub_23C910920();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v10 - v6;
  sub_23C805F48(v5, qword_254310410);
  sub_23C805EE8(v0, (uint64_t)qword_254310410);
  sub_23C9108E4();
  sub_23C910908();
  sub_23C910914();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v0);
}

uint64_t Statement.sqliteStatement.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_23C8E020C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return Statement.columnNames.setter(v0);
}

uint64_t Statement.columnNames.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

void sub_23C8E0244(uint64_t a1)
{
  sqlite3_stmt *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(sqlite3_stmt **)(a1 + 16);
  v2 = sqlite3_column_count(v1);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v2;
    if (!v2)
      return;
    v10 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v4 = 0;
    while (v3 != v4)
    {
      if (!sqlite3_column_name(v1, v4))
        goto LABEL_12;
      v5 = sub_23C910F74();
      v7 = v6;
      v8 = *(_QWORD *)(v10 + 16);
      if (v8 >= *(_QWORD *)(v10 + 24) >> 1)
        sub_23C7E649C();
      ++v4;
      *(_QWORD *)(v10 + 16) = v8 + 1;
      v9 = v10 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v7;
      if (v3 == v4)
        return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t (*Statement.columnNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  Statement.columnNames.getter();
  *a1 = v3;
  return sub_23C8E0374;
}

uint64_t sub_23C8E0374(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return Statement.columnNames.setter(*a1);
  v2 = sub_23C7DF858();
  Statement.columnNames.setter(v2);
  return swift_bridgeObjectRelease();
}

void Statement.databaseRegion.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_23C7DF2E4();
  *a1 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23C7DF890();
}

BOOL Statement.isReadonly.getter()
{
  uint64_t v0;

  return sqlite3_stmt_readonly(*(sqlite3_stmt **)(v0 + 16)) != 0;
}

uint64_t Statement.database.getter()
{
  return swift_unownedRetainStrong();
}

void sub_23C8E040C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 88))
  {
    *(_QWORD *)(v0 + 88) = sub_23C8E045C();
    swift_bridgeObjectRetain();
    sub_23C7E072C();
  }
  swift_bridgeObjectRetain();
  sub_23C7DB3A0();
}

uint64_t sub_23C8E045C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  Statement.columnNames.getter();
  v1 = v0;
  v11 = MEMORY[0x24BEE4AF8];
  sub_23C7DAC44();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = v1 + 40;
    do
    {
      v5 = sub_23C910E18();
      v7 = v6;
      v8 = *(_QWORD *)(v11 + 16);
      if (v8 >= *(_QWORD *)(v11 + 24) >> 1)
        sub_23C7DAC44();
      v4 += 16;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = (_QWORD *)(v11 + 24 * v8);
      v9[5] = v7;
      v9[6] = v3;
      v9[4] = v5;
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return sub_23C7DAC78(v11);
}

double sub_23C8E0570@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  Statement.arguments.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_23C8E05A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Statement.arguments.setter(v4, v2);
}

uint64_t Statement.arguments.setter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v3 = v6;
  Statement.setArguments(_:)(*(GRDBInternal::StatementArguments *)(&a2 - 1));
  if (v4)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    sub_23C7DB62C();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void (*Statement.arguments.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;

  a1[2] = v1;
  Statement.arguments.getter(a1);
  return sub_23C8E0688;
}

void sub_23C8E0688(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  if ((a2 & 1) != 0)
  {
    sub_23C7DC46C();
    sub_23C7DF858();
    Statement.arguments.setter(v4, v3);
    sub_23C7E072C();
    swift_bridgeObjectRelease();
  }
  else
  {
    Statement.arguments.setter(v4, a2);
    sub_23C7E252C();
  }
}

uint64_t sub_23C8E06EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t result;
  _OWORD v6[4];
  _OWORD v7[5];

  sub_23C7E40EC();
  v3 = sub_23C7E9C50();
  if ((sub_23C7E2FA0(v3) & 1) != 0)
  {
    sub_23C7DFE08();
    if (!sub_23C7E120C())
    {
      sub_23C7E9C50();
      sub_23C7EDF98(a1);
      if (v1)
      {
LABEL_12:
        sub_23C7DFB3C();
        return sub_23C7DFE08();
      }
      sub_23C7DFE08();
    }
    if (sub_23C7E5F98() == 101)
      goto LABEL_9;
    sub_23C8E36B0();
    if (!v4)
      goto LABEL_10;
    do
    {
      sub_23C8DFF80((uint64_t)v6);
      v7[0] = v6[0];
      v7[1] = v6[1];
      v7[2] = v6[2];
      v7[3] = v6[3];
      sub_23C86A9EC((uint64_t)v7);
      sub_23C8FA828();
      swift_bridgeObjectRelease();
      sub_23C7DE934();
      sub_23C7E087C();
      swift_bridgeObjectRelease();
      sub_23C86AA40((uint64_t)v7);
    }
    while (sub_23C7E5F98() == 100);
    sub_23C7E1CA8();
    if (v4)
    {
LABEL_9:
      sub_23C7E9C50();
      sub_23C7E9770(a1);
    }
    else
    {
LABEL_10:
      sub_23C7E9C50();
      sub_23C7EC860(a1, v1);
    }
    goto LABEL_12;
  }
  sub_23C7DFB3C();
  sub_23C7DEB2C();
  sub_23C7DC484();
  result = sub_23C7E9444();
  __break(1u);
  return result;
}

uint64_t sub_23C8E0874(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  sqlite3_stmt *v10;
  int v11;
  int v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v5 = v4;
  type metadata accessor for SchedulingWatchdog();
  v9 = *(_QWORD *)(a1 + 80);
  swift_unownedRetainStrong();
  swift_retain();
  if ((sub_23C7E2FA0(v9) & 1) == 0)
  {
    swift_release_n();
    swift_release();
    result = sub_23C9117B4();
    __break(1u);
    return result;
  }
  swift_release();
  v10 = *(sqlite3_stmt **)(a1 + 16);
  if (!sqlite3_stmt_busy(v10))
  {
    swift_unownedRetainStrong();
    Database.statementWillExecute(_:)(a1);
    if (v4)
      goto LABEL_17;
    swift_release();
  }
  v11 = sqlite3_step(v10);
  if (v11 == 100)
  {
    do
    {
      v19 = *(_QWORD *)(a2 + 32);
      v13 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(a3 + 24);
      swift_retain();
      swift_retain();
      v13(&v18, &v19);
      if (v4)
      {
        swift_release();
        swift_release();
        swift_release();
        return swift_release_n();
      }
      v14 = swift_retain();
      MEMORY[0x242624CE4](v14);
      if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_23C91110C();
      sub_23C911148();
      sub_23C9110DC();
      swift_release();
      swift_release();
      swift_release();
      v15 = sqlite3_step(v10);
    }
    while (v15 == 100);
    v12 = v15;
    if (v15 != 101)
      goto LABEL_16;
LABEL_13:
    swift_unownedRetainStrong();
    Database.statementDidExecute(_:)(a1);
    if (!v5)
    {
      swift_release_n();
      swift_release();
      return swift_release();
    }
    goto LABEL_17;
  }
  v12 = v11;
  if (v11 == 101)
    goto LABEL_13;
LABEL_16:
  swift_unownedRetainStrong();
  Database.statementDidFail(_:withResultCode:)(a1, v12);
LABEL_17:
  swift_release();
  swift_release();
  return swift_release_n();
}

#error "23C8E0C50: call analysis failed (funcsize=159)"

uint64_t sub_23C8E0DC0(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  sqlite3_stmt *v5;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;

  type metadata accessor for SchedulingWatchdog();
  v9 = swift_unownedRetainStrong();
  if ((sub_23C7E2FA0(v9) & 1) == 0)
  {
    swift_release();
    sub_23C9117B4();
    __break(1u);
    goto LABEL_6;
  }
  swift_release();
  v5 = *(sqlite3_stmt **)(a1 + 16);
  if (sqlite3_stmt_busy(v5))
    goto LABEL_7;
  swift_unownedRetainStrong();
  Database.statementWillExecute(_:)(a1);
  if (!v4)
  {
LABEL_6:
    while (1)
    {
      swift_release();
LABEL_7:
      v10 = sqlite3_step(v5);
      if (v10 != 100)
        break;
      v13 = *(_QWORD *)(a4 + 32);
      swift_retain();
      a2(&v13);
      if (v4)
        goto LABEL_13;
    }
    v11 = v10;
    if (v10 == 101)
    {
      swift_unownedRetainStrong();
      Database.statementDidExecute(_:)(a1);
    }
    else
    {
      swift_unownedRetainStrong();
      Database.statementDidFail(_:withResultCode:)(a1, v11);
    }
  }
LABEL_13:
  swift_release();
  return swift_release();
}

uint64_t sub_23C8E0F74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  sqlite3_stmt *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  sqlite3_stmt *v32;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  sub_23C7E40EC();
  v6 = sub_23C7DD1F4();
  if ((sub_23C7E2FA0(v6) & 1) != 0)
  {
    sub_23C7DE904();
    v7 = *(sqlite3_stmt **)(a1 + 16);
    if (!sqlite3_stmt_busy(v7))
    {
      sub_23C7DD1F4();
      Database.statementWillExecute(_:)(a1);
      if (v3)
        goto LABEL_20;
      sub_23C7DE904();
    }
    if (sub_23C8E3668() == 100)
    {
      v31 = a1;
      v32 = v7;
      do
      {
        sub_23C7DC47C();
        LODWORD(v3) = v4;
        sub_23C7D8184();
        if (v4)
        {
          swift_unexpectedError();
          __break(1u);
          goto LABEL_22;
        }
        v10 = v9;
        sub_23C7D8F9C();
        v12 = v11;
        sub_23C7D8F9C();
        v14 = v13;
        v36 = v15;
        v37 = v10;
        sub_23C855540();
        v17 = v16;
        v18 = sub_23C852D4C(0x6C61765F746C6664, 0xEA00000000006575);
        v20 = v19;
        sub_23C7D8184();
        v22 = v21;
        v35 = sub_23C852E10(0x6E6564646968, 0xE600000000000000);
        v34 = v23;
        sub_23C7DFA18();
        v24 = *a3;
        sub_23C7DBBB8();
        sub_23C7DEF00();
        sub_23C7DF858();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23C830AE4();
          sub_23C7F1EC4();
          v24 = v28;
          *a3 = v28;
        }
        v26 = *(_QWORD *)(v24 + 16);
        if (v26 >= *(_QWORD *)(v24 + 24) >> 1)
        {
          sub_23C7F1EC4();
          v24 = v29;
          *a3 = v29;
        }
        *(_QWORD *)(v24 + 16) = v26 + 1;
        v27 = v24 + 88 * v26;
        *(_QWORD *)(v27 + 32) = v37;
        *(_QWORD *)(v27 + 40) = v35;
        *(_BYTE *)(v27 + 48) = v34 & 1;
        *(_QWORD *)(v27 + 56) = 0;
        *(_QWORD *)(v27 + 64) = v12;
        *(_QWORD *)(v27 + 72) = v36;
        *(_QWORD *)(v27 + 80) = v14;
        *(_BYTE *)(v27 + 88) = v17 & 1;
        *(_QWORD *)(v27 + 96) = v18;
        *(_QWORD *)(v27 + 104) = v20;
        *(_QWORD *)(v27 + 112) = v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C7E087C();
        v4 = 0;
      }
      while (sqlite3_step(v32) == 100);
      sub_23C7E1CA8();
      if (!v8)
      {
        a1 = v31;
        goto LABEL_19;
      }
      a1 = v31;
    }
    else
    {
      sub_23C7E1CA8();
      if (!v8)
      {
LABEL_19:
        sub_23C7DD1F4();
        Database.statementDidFail(_:withResultCode:)(a1, v3);
        goto LABEL_20;
      }
    }
    sub_23C7DD1F4();
    Database.statementDidExecute(_:)(a1);
LABEL_20:
    swift_release();
    return sub_23C7DE904();
  }
LABEL_22:
  swift_release();
  sub_23C7DEB2C();
  sub_23C7DC484();
  result = sub_23C7E9444();
  __break(1u);
  return result;
}

uint64_t sub_23C8E12CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;

  sub_23C7E40EC();
  v6 = sub_23C8E3650();
  if ((sub_23C7E2FA0(v6) & 1) != 0)
  {
    sub_23C7DFB3C();
    if (!sub_23C7E120C())
    {
      sub_23C8E3650();
      sub_23C7EDF98(a1);
      if (v3)
      {
LABEL_18:
        sub_23C7DFE08();
        return sub_23C7DFB3C();
      }
      sub_23C7DFB3C();
    }
    if (sub_23C7E5F98() == 101)
      goto LABEL_16;
    sub_23C8E36B0();
    if (!v16)
      goto LABEL_17;
    do
    {
      v7 = sub_23C8E36F4();
      v9 = v8;
      v10 = *a3;
      sub_23C8A3D34();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C830AE4();
        sub_23C7F16C0();
        v10 = v14;
        *a3 = v14;
      }
      v12 = *(_QWORD *)(v10 + 16);
      if (v12 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_23C7F16C0();
        v10 = v15;
        *a3 = v15;
      }
      *(_QWORD *)(v10 + 16) = v12 + 1;
      v13 = v10 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v7;
      *(_QWORD *)(v13 + 40) = v9;
      sub_23C7DE934();
    }
    while (sub_23C7E5F98() == 100);
    sub_23C7E1CA8();
    if (v16)
    {
LABEL_16:
      sub_23C8E3650();
      sub_23C7E9770(a1);
    }
    else
    {
LABEL_17:
      sub_23C8E3650();
      sub_23C7EC860(a1, v3);
    }
    goto LABEL_18;
  }
  sub_23C7DFE08();
  sub_23C7DEB2C();
  sub_23C7DC484();
  result = sub_23C7E9444();
  __break(1u);
  return result;
}

void sub_23C8E148C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  sub_23C7E40EC();
  v3 = sub_23C8E3650();
  if ((sub_23C7E2FA0(v3) & 1) != 0)
  {
    sub_23C7DFB3C();
    if (!sub_23C7E120C())
    {
      sub_23C8E3650();
      sub_23C7EDF98(a1);
      if (v1)
      {
LABEL_12:
        sub_23C7DFE08();
        sub_23C7DFB3C();
        sub_23C7E21A4();
        return;
      }
      sub_23C7DFB3C();
    }
    if (sub_23C7E5F98() == 101)
      goto LABEL_9;
    sub_23C8E36B0();
    if (!v4)
      goto LABEL_10;
    do
    {
      LODWORD(v1) = sub_23C8E36F4();
      sub_23C8A3D34();
      sub_23C8FA41C();
      sub_23C7E087C();
      sub_23C7DE934();
    }
    while (sub_23C7E5F98() == 100);
    sub_23C7E1CA8();
    if (v4)
    {
LABEL_9:
      sub_23C8E3650();
      sub_23C7E9770(a1);
    }
    else
    {
LABEL_10:
      sub_23C8E3650();
      sub_23C7EC860(a1, v1);
    }
    goto LABEL_12;
  }
  sub_23C7DFE08();
  sub_23C7DEB2C();
  sub_23C7DC484();
  sub_23C7E9444();
  __break(1u);
}

uint64_t sub_23C8E15C4(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  sqlite3_stmt *v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;

  v3 = v2;
  type metadata accessor for SchedulingWatchdog();
  v6 = swift_unownedRetainStrong();
  if ((sub_23C7E2FA0(v6) & 1) != 0)
  {
    swift_release();
    v7 = *(sqlite3_stmt **)(a1 + 16);
    if (!sqlite3_stmt_busy(v7))
    {
      swift_unownedRetainStrong();
      Database.statementWillExecute(_:)(a1);
      if (v2)
        goto LABEL_12;
      swift_release();
    }
    v8 = sqlite3_step(v7);
    if (v8 == 101)
    {
LABEL_8:
      swift_unownedRetainStrong();
      Database.statementDidExecute(_:)(a1);
    }
    else
    {
      v9 = v8;
      if (v8 == 100)
      {
        while (1)
        {
          a2();
          if (v3)
            return swift_release();
          v10 = sqlite3_step(v7);
          if (v10 != 100)
          {
            v9 = v10;
            if (v10 != 101)
              break;
            goto LABEL_8;
          }
        }
      }
      swift_unownedRetainStrong();
      Database.statementDidFail(_:withResultCode:)(a1, v9);
    }
LABEL_12:
    swift_release();
    return swift_release();
  }
  swift_release();
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

void Statement.forEachStep(_:)(void (*a1)(sqlite3_stmt *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  sqlite3_stmt *v6;
  char v7;

  v3 = v2;
  sub_23C7E40EC();
  v5 = sub_23C7E9C50();
  if ((sub_23C7E2FA0(v5) & 1) != 0)
  {
    sub_23C7DFE08();
    v6 = *(sqlite3_stmt **)(v1 + 16);
    if (sqlite3_stmt_busy(v6) || (sub_23C7E9C50(), sub_23C7EDF98(v1), v3 = v2, sub_23C7DFE08(), !v2))
    {
      if (sub_23C7E5F98() == 101)
      {
LABEL_10:
        sub_23C7E9C50();
        sub_23C7E9770(v1);
      }
      else
      {
        sub_23C8E36B0();
        if (v7)
        {
          while (1)
          {
            LODWORD(v2) = v3;
            a1(v6);
            if (v3)
              goto LABEL_15;
            if (sub_23C7E5F98() != 100)
            {
              sub_23C7E1CA8();
              if (v7)
                goto LABEL_10;
              break;
            }
          }
        }
        sub_23C7E9C50();
        sub_23C7EC860(v1, v2);
      }
      sub_23C7DFE08();
    }
LABEL_15:
    sub_23C7EE5C0();
    return;
  }
  sub_23C7DEB2C();
  sub_23C7DC484();
  sub_23C7E9444();
  __break(1u);
}

uint64_t sub_23C8E1888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  sqlite3_stmt *v5;
  const unsigned __int8 **v6;
  uint64_t v7;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_11;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
  {
    v5 = (sqlite3_stmt *)sub_23C8E3658();
    sub_23C8E3594(v5, v6);
    if (!v1)
    {
      sub_23C7DFE08();
      return v7;
    }
    return sub_23C7DFE08();
  }
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_11:
    sub_23C7DFE08();
    return sub_23C7DFE08();
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  result = sub_23C7DFA18();
  if (!v1)
    return 0;
  return result;
}

void sub_23C8E1958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_9;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
    goto LABEL_10;
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_9:
    sub_23C7DFE08();
LABEL_10:
    sub_23C7DFE08();
    goto LABEL_11;
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  sub_23C7DFA18();
LABEL_11:
  sub_23C7DFA88();
}

uint64_t sub_23C8E1A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v7;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_11;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
  {
    v5 = (sqlite3_stmt *)sub_23C8E3658();
    sub_23C8E35BC(v5, v6);
    if (!v1)
    {
      sub_23C7DFE08();
      return v7;
    }
    return sub_23C7DFE08();
  }
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_11:
    sub_23C7DFE08();
    return sub_23C7DFE08();
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  result = sub_23C7DFA18();
  if (!v1)
    return 0;
  return result;
}

void sub_23C8E1AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  sqlite3_stmt *v4;
  _BYTE *v5;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_9;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
  {
    v4 = (sqlite3_stmt *)sub_23C8E3658();
    sub_23C8E35EC(v4, v5);
LABEL_10:
    sub_23C7DFE08();
    goto LABEL_11;
  }
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_9:
    sub_23C7DFE08();
    goto LABEL_10;
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  sub_23C7DFA18();
LABEL_11:
  sub_23C7DFA88();
}

uint64_t sub_23C8E1B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  sqlite3_stmt *v5;
  char v6;
  uint64_t result;

  v5 = *(sqlite3_stmt **)(a1 + 16);
  if (!sqlite3_stmt_busy(v5))
  {
    sub_23C7E5DE8();
    sub_23C7EDF98(a1);
    if (v2)
      goto LABEL_10;
    sub_23C7DFA18();
  }
  if (sqlite3_step(v5) == 100)
  {
    sub_23C8E1D88(a2);
    return sub_23C7DFE08();
  }
  sub_23C7E1CA8();
  if (!v6)
  {
    sub_23C7E5DE8();
    sub_23C7E9A38(a1);
LABEL_10:
    sub_23C7DFE08();
    return sub_23C7DFE08();
  }
  sub_23C7E5DE8();
  sub_23C7E9770(a1);
  sub_23C7DFE08();
  result = sub_23C7DFA18();
  if (!v2)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t Statement.description.getter()
{
  uint64_t v0;
  char v1;

  sub_23C7DA548();
  v0 = sub_23C8E36A0();
  v1 = sub_23C7E2FA0(v0);
  swift_release();
  if ((v1 & 1) != 0)
    return Statement.sql.getter();
  else
    return 0x6E656D6574617453;
}

uint64_t sub_23C8E1CEC()
{
  return Statement.description.getter();
}

const unsigned __int8 *sub_23C8E1D0C(sqlite3_stmt *a1)
{
  return sub_23C8DF9D8(a1);
}

sqlite3_int64 sub_23C8E1D34(sqlite3_stmt *a1)
{
  return sub_23C8DFA2C(a1);
}

uint64_t sub_23C8E1D60(sqlite3_stmt *a1)
{
  return sub_23C8DFA84(a1);
}

uint64_t sub_23C8E1D88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return ForeignKeyViolation.init(row:)(v2, a1);
}

uint64_t sub_23C8E1DBC(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(char *);

  v16 = a2;
  v9 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(a1, a5, v9);
  if (!v6)
  {
    v16(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_23C8E1EB0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E1DBC(a1, *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C8E1ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  v6 = v4;
  swift_retain();
  sub_23C7E1D24(&v6, v5);
  if (v3)
    sub_23C7DE904();
  sub_23C7DFA18();
  sub_23C7E13C4(v4);
  sub_23C7DB764();
}

void sub_23C8E1F38()
{
  sub_23C7E2E68();
  swift_release();
  sub_23C7E252C();
}

uint64_t sub_23C8E1F7C()
{
  sub_23C8E1F38();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8E1F9C()
{
  return swift_retain();
}

uint64_t sub_23C8E1FA4()
{
  uint64_t v0;

  sub_23C7DF2E4();
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_23C8E1FC8(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  sub_23C7DF890();
}

uint64_t (*sub_23C8E1FFC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23C8E2038@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C8EFE00();
  if (!v1)
    *a1 = result & 1;
  return result;
}

uint64_t sub_23C8E2064(void (*a1)(void))
{
  return sub_23C8DF860(a1);
}

uint64_t sub_23C8E2078()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 1 || v1 == 2)
    return 1;
  if (v1 == 3)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    if (!(v2 ^ 1 | v3) || !(v2 ^ 2 | v3))
    {
      sub_23C7E711C(v2, v3, 3u);
      return 1;
    }
  }
  return 0;
}

uint64_t sub_23C8E20D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_23C7DB5E4(a1, (uint64_t)v11, (uint64_t *)&unk_25430D6B8);
  v3 = v12;
  if (v12)
  {
    v4 = v13;
    sub_23C7E7E34(v11, v12);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 24))(&v9, v3, v4);
    v8 = v9;
    v5 = v10;
    result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
    v7 = v8;
  }
  else
  {
    result = sub_23C7E7A6C((uint64_t)v11);
    v7 = 0uLL;
    v5 = 4;
  }
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

double sub_23C8E2184@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  char v7;
  double result;
  __int128 v9;
  char v10;

  v4 = *(_QWORD *)(a2 + a1 - 8);
  v5 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(&v9, AssociatedTypeWitness, v4);
  v7 = v10;
  result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

GRDBInternal::StatementArguments_optional __swiftcall StatementArguments.init(_:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;
  __int128 v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  GRDBInternal::StatementArguments_optional result;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20[32];
  __int128 v21;
  char v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _BYTE v25[40];

  v2 = v1;
  v3 = *((_QWORD *)a1._rawValue + 2);
  if (v3)
  {
    v16 = v1;
    v4 = (char *)a1._rawValue + 32;
    v5 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      sub_23C802224((uint64_t)v4, (uint64_t)v25);
      sub_23C802224((uint64_t)v25, (uint64_t)v20);
      sub_23C7E79A8(&qword_25430CEB8);
      if ((sub_23C8E36CC() & 1) == 0)
        break;
      sub_23C7DB5CC(&v17, (uint64_t)&v21);
      v6 = v23;
      v7 = v24;
      sub_23C8E3758(&v21);
      ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v7[3])(&v17, v6, v7);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v25);
      v8 = v17;
      v9 = v18;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v21);
      v23 = &type metadata for DatabaseValue;
      v24 = &protocol witness table for DatabaseValue;
      v21 = v8;
      v22 = v9;
      sub_23C8E374C(v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C830AE4();
        sub_23C7F29C0();
        v5 = v11;
      }
      v10 = *(_QWORD *)(v5 + 16);
      if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_23C7F29C0();
        v5 = v12;
      }
      *(_QWORD *)(v5 + 16) = v10 + 1;
      sub_23C800FCC((uint64_t)&v21, v5 + 40 * v10 + 32, (uint64_t *)&unk_25430D6B8);
      sub_23C7E5640(v8, *((unint64_t *)&v8 + 1), v9);
      v4 += 32;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        v2 = v16;
        goto LABEL_12;
      }
    }
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v25);
    sub_23C7E7A6C((uint64_t)&v17);
    sub_23C7DB62C();
    v13 = (void *)swift_bridgeObjectRelease();
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
LABEL_12:
    sub_23C7E53DC(v5, &v21);
    *v2 = v21;
  }
  result.value.namedValues._rawValue = v14;
  result.value.values._rawValue = v13;
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  GRDBInternal::StatementArguments_optional result;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  _QWORD *rawValue;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75[32];
  _QWORD v76[4];
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v62 = v1;
  rawValue = a1._rawValue;
  sub_23C7DF3C0();
  v4 = v3 & v2;
  v65 = (char *)v80 + 8;
  v68 = (_OWORD *)(v6 + 40);
  v69 = 0;
  v63 = v7;
  v64 = (unint64_t)(v5 + 63) >> 6;
  v61 = v64 - 1;
  v8 = MEMORY[0x24BEE4B00];
  v67 = MEMORY[0x24BEE4AD8] + 8;
  if ((v3 & v2) == 0)
    goto LABEL_4;
LABEL_2:
  v9 = __clz(__rbit64(v4));
  v10 = (v4 - 1) & v4;
  v11 = v9 | (v69 << 6);
LABEL_3:
  sub_23C8E3394(rawValue[6] + 40 * v11, (uint64_t)&v78);
  sub_23C802224(rawValue[7] + 32 * v11, (uint64_t)v65);
  while (1)
  {
    sub_23C800FCC((uint64_t)&v78, (uint64_t)&v82, &qword_256BCDBF0);
    if (!*((_QWORD *)&v83 + 1))
    {
      swift_release();
      v49 = sub_23C8E3108(v8);
      v50 = (void *)swift_bridgeObjectRelease();
      *v62 = MEMORY[0x24BEE4AF8];
      v62[1] = v49;
      goto LABEL_43;
    }
    sub_23C83B550(v68, v77);
    v78 = v82;
    v79 = v83;
    *(_QWORD *)&v80[0] = v84;
    if ((sub_23C8E36CC() & 1) == 0)
      goto LABEL_37;
    v15 = v72;
    sub_23C802224((uint64_t)v77, (uint64_t)v76);
    sub_23C802224((uint64_t)v76, (uint64_t)v75);
    sub_23C7E79A8(&qword_25430CEB8);
    if ((sub_23C8E36CC() & 1) == 0)
    {
      v74 = 0;
      v72 = 0u;
      v73 = 0u;
      v52 = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v76);
      sub_23C7E7DF0(v52, v53, v54, v55, v56, v57, v58, v59, v61, (uint64_t)v62);
      sub_23C7DBCD0();
LABEL_37:
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v77);
      swift_bridgeObjectRelease();
      v50 = (void *)swift_release();
      *v62 = 0;
      v62[1] = 0;
      goto LABEL_43;
    }
    v70 = v10;
    sub_23C7DB5CC(&v72, (uint64_t)&v78);
    v16 = *((_QWORD *)&v79 + 1);
    v17 = *(_QWORD *)&v80[0];
    sub_23C8E3758(&v78);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 24))(&v72, v16, v17);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v76);
    v18 = v72;
    v19 = v73;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v78);
    *((_QWORD *)&v79 + 1) = &type metadata for DatabaseValue;
    *(_QWORD *)&v80[0] = &protocol witness table for DatabaseValue;
    v78 = v18;
    LOBYTE(v79) = v19;
    sub_23C800FCC((uint64_t)&v78, (uint64_t)&v72, (uint64_t *)&unk_25430D6B8);
    sub_23C7E56A4(v18, *((unint64_t *)&v18 + 1), v19);
    swift_isUniquelyReferenced_nonNull_native();
    v76[0] = v8;
    sub_23C7E94B8();
    sub_23C8E3700();
    if (__OFADD__(v22, v23))
      break;
    v24 = v20;
    v25 = v21;
    sub_23C7E79A8(&qword_25430CEF8);
    v26 = sub_23C911778();
    if ((v26 & 1) != 0)
    {
      v26 = sub_23C7E94B8();
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_42;
      v24 = v26;
    }
    v8 = v76[0];
    if ((v25 & 1) != 0)
    {
      v34 = sub_23C8E3760(v26, v27, v28, v29, v30, v31, v32, v33, v61, (uint64_t)v62, v63, v64, (uint64_t)v65, (uint64_t)rawValue, v67, (uint64_t)v68, v69, v70, v72);
      sub_23C83B508((uint64_t)v34, v35);
    }
    else
    {
      sub_23C7DBD7C(v76[0] + 8 * (v24 >> 6));
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24) = v15;
      v44 = sub_23C8E3760(v36, v37, v38, v39, v40, v41, v42, v43, v61, (uint64_t)v62, v63, v64, (uint64_t)v65, (uint64_t)rawValue, v67, (uint64_t)v68, v69, v70, v72);
      sub_23C800FCC((uint64_t)v44, v45, (uint64_t *)&unk_25430D6B8);
      v46 = *(_QWORD *)(v8 + 16);
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_39;
      *(_QWORD *)(v8 + 16) = v48;
      sub_23C7DB3B8();
    }
    sub_23C7DBCD0();
    sub_23C865348();
    sub_23C7E5640(v18, *((unint64_t *)&v18 + 1), v19);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v77);
    v4 = v71;
    if (v71)
      goto LABEL_2;
LABEL_4:
    v12 = v69 + 1;
    if (__OFADD__(v69, 1))
      goto LABEL_40;
    if (v12 < v64)
    {
      v13 = *(_QWORD *)(v63 + 8 * v12);
      if (v13)
        goto LABEL_7;
      v14 = v69 + 2;
      ++v69;
      if (v12 + 1 < v64)
      {
        v13 = *(_QWORD *)(v63 + 8 * v14);
        if (v13)
          goto LABEL_10;
        v69 = v12 + 1;
        if (v12 + 2 < v64)
        {
          v13 = *(_QWORD *)(v63 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_7;
          }
          v14 = v12 + 3;
          v69 = v12 + 2;
          if (v12 + 3 < v64)
          {
            v13 = *(_QWORD *)(v63 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v12 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_41;
                if (v12 >= v64)
                {
                  v69 = v61;
                  goto LABEL_21;
                }
                v13 = *(_QWORD *)(v63 + 8 * v12);
                ++v14;
                if (v13)
                  goto LABEL_7;
              }
            }
LABEL_10:
            v12 = v14;
LABEL_7:
            v10 = (v13 - 1) & v13;
            v11 = __clz(__rbit64(v13)) + (v12 << 6);
            v69 = v12;
            goto LABEL_3;
          }
        }
      }
    }
LABEL_21:
    v10 = 0;
    v81 = 0;
    memset(v80, 0, sizeof(v80));
    v78 = 0u;
    v79 = 0u;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  v50 = (void *)sub_23C911B50();
  __break(1u);
LABEL_43:
  result.value.namedValues._rawValue = v51;
  result.value.values._rawValue = v50;
  return result;
}

GRDBInternal::StatementArguments __swiftcall StatementArguments.init(_:)(Swift::OpaquePointer a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  GRDBInternal::StatementArguments result;

  v2 = v1;
  v3 = sub_23C8E3108((uint64_t)a1._rawValue);
  sub_23C7DB624();
  *v2 = MEMORY[0x24BEE4AF8];
  v2[1] = v3;
  sub_23C7E252C();
  result.namedValues._rawValue = v5;
  result.values._rawValue = v4;
  return result;
}

uint64_t sub_23C8E2448@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;

  v4 = (_QWORD *)sub_23C910DA0();
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v25 = a2;
    v6 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23C7DB5E4(v6, (uint64_t)v33, &qword_25430B6E8);
      v7 = v33[0];
      v8 = v33[1];
      sub_23C800FCC((uint64_t)&v34, (uint64_t)v30, (uint64_t *)&unk_25430D6B8);
      v9 = v31;
      if (v31)
      {
        v10 = v32;
        sub_23C7E7E34(v30, v31);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 24))(v28, v9, v10);
        v26 = v28[1];
        v27 = v28[0];
        v11 = v29;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v30);
      }
      else
      {
        sub_23C7E7A6C((uint64_t)v30);
        v26 = 0;
        v27 = 0;
        v11 = 4;
      }
      swift_isUniquelyReferenced_nonNull_native();
      v30[0] = v4;
      v12 = sub_23C7E94B8();
      if (__OFADD__(v4[2], (v13 & 1) == 0))
        break;
      v14 = v12;
      v15 = v13;
      sub_23C7E79A8(&qword_25430B610);
      if ((sub_23C911778() & 1) != 0)
      {
        v16 = sub_23C7E94B8();
        if ((v15 & 1) != (v17 & 1))
          goto LABEL_19;
        v14 = v16;
      }
      v4 = (_QWORD *)v30[0];
      if ((v15 & 1) != 0)
      {
        v18 = *(_QWORD *)(v30[0] + 56) + 24 * v14;
        sub_23C7E5640(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
        *(_QWORD *)v18 = v27;
        *(_QWORD *)(v18 + 8) = v26;
        *(_BYTE *)(v18 + 16) = v11;
      }
      else
      {
        *(_QWORD *)(v30[0] + 8 * (v14 >> 6) + 64) |= 1 << v14;
        v19 = (_QWORD *)(v4[6] + 16 * v14);
        *v19 = v7;
        v19[1] = v8;
        v20 = v4[7] + 24 * v14;
        *(_QWORD *)v20 = v27;
        *(_QWORD *)(v20 + 8) = v26;
        *(_BYTE *)(v20 + 16) = v11;
        v21 = v4[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_18;
        v4[2] = v23;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 += 56;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        a2 = v25;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = sub_23C911B50();
    __break(1u);
  }
  else
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *a2 = MEMORY[0x24BEE4AF8];
    a2[1] = v4;
  }
  return result;
}

uint64_t StatementArguments.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[2];
  char v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v42 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v37 - v9;
  sub_23C911028();
  v11 = (_QWORD *)sub_23C910DA0();
  v39 = v5;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v40 = a1;
  v12(v7, a1, a2);
  sub_23C91101C();
  v41 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = v10;
  v46 = AssociatedTypeWitness;
  v44 = AssociatedConformanceWitness;
  sub_23C911520();
  v14 = v53;
  if (v53)
  {
    v43 = &v54;
    while (1)
    {
      v15 = v52;
      sub_23C800FCC((uint64_t)v43, (uint64_t)v49, (uint64_t *)&unk_25430D6B8);
      v16 = v50;
      if (v50)
      {
        v17 = v51;
        sub_23C8E3758(v49);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v47, v16, v17);
        v18 = v47[0];
        v19 = v47[1];
        v20 = v48;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v49);
      }
      else
      {
        sub_23C7E7A6C((uint64_t)v49);
        v18 = 0;
        v19 = 0;
        v20 = 4;
      }
      swift_isUniquelyReferenced_nonNull_native();
      v49[0] = v11;
      sub_23C7E94B8();
      sub_23C8E3700();
      if (__OFADD__(v23, v24))
        break;
      v25 = v21;
      v26 = v22;
      sub_23C7E79A8(&qword_25430B610);
      if ((sub_23C911778() & 1) != 0)
      {
        v27 = sub_23C7E94B8();
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_18;
        v25 = v27;
      }
      v11 = (_QWORD *)v49[0];
      if ((v26 & 1) != 0)
      {
        v29 = *(_QWORD *)(v49[0] + 56) + 24 * v25;
        sub_23C8E36E8();
        *(_QWORD *)v29 = v18;
        *(_QWORD *)(v29 + 8) = v19;
        *(_BYTE *)(v29 + 16) = v20;
      }
      else
      {
        sub_23C7DBD7C(v49[0] + 8 * (v25 >> 6));
        v30 = (_QWORD *)(v11[6] + 16 * v25);
        *v30 = v15;
        v30[1] = v14;
        v31 = v11[7] + 24 * v25;
        *(_QWORD *)v31 = v18;
        *(_QWORD *)(v31 + 8) = v19;
        *(_BYTE *)(v31 + 16) = v20;
        v32 = v11[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_17;
        v11[2] = v34;
        sub_23C7DBCC8();
      }
      sub_23C7DB62C();
      sub_23C865348();
      sub_23C911520();
      v14 = v53;
      if (!v53)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result = sub_23C911B50();
    __break(1u);
  }
  else
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v46);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
    v36 = v42;
    *v42 = MEMORY[0x24BEE4AF8];
    v36[1] = v11;
  }
  return result;
}

void static StatementArguments.+ infix(_:_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = a1[1];
  *a2 = *a1;
  a2[1] = v3;
  sub_23C8E3690();
  sub_23C7DB3D4();
  static StatementArguments.+= infix(_:_:)((uint64_t)a2, &v4);
  sub_23C8E3684();
}

uint64_t static StatementArguments.&+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  sub_23C8E3690();
  sub_23C7DF858();
  StatementArguments.append(contentsOf:)((uint64_t)&v4);
  return swift_bridgeObjectRelease();
}

uint64_t static StatementArguments.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((sub_23C8485FC(*a1, *a2) & 1) == 0)
    return 0;
  v2 = sub_23C7DF8B0();
  return sub_23C878E28(v2, v3);
}

uint64_t StatementArguments.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23C7DF858();
  sub_23C8DED88(v0);
  sub_23C7DB624();
  v1 = sub_23C7DB3D4();
  sub_23C8DEFA4(v1);
  sub_23C8E3734();
  sub_23C7FAE44();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
  sub_23C910E3C();
  sub_23C7DB624();
  sub_23C8E3740();
  sub_23C7DB62C();
  sub_23C7DF858();
  sub_23C910F5C();
  sub_23C7DB624();
  return 91;
}

void StatementArguments.init(dictionaryLiteral:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  sub_23C8E2448(a1, &v3);
  *a2 = v3;
  sub_23C8E3684();
}

void sub_23C8E30A8(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_23C7D9D70();
  if (!v1)
    *a1 = v3;
}

uint64_t sub_23C8E30D0(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_23C8DF7C0(a1, a2);
}

uint64_t sub_23C8E30E8()
{
  return 24;
}

__n128 sub_23C8E30F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C8E3108(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  uint64_t v38;

  sub_23C7E79A8(qword_25430B708);
  result = sub_23C9117CC();
  v3 = (_QWORD *)result;
  v4 = 0;
  v38 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v29 = v6;
  v30 = (unint64_t)(v8 + 63) >> 6;
  v31 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    sub_23C7DB5E4(*(_QWORD *)(v38 + 56) + 40 * i, (uint64_t)v37, (uint64_t *)&unk_25430D6B8);
    sub_23C7DB5E4((uint64_t)v37, (uint64_t)v34, (uint64_t *)&unk_25430D6B8);
    v19 = v35;
    if (v35)
    {
      v20 = v36;
      sub_23C7E7E34(v34, v35);
      v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24);
      swift_bridgeObjectRetain();
      v21(v32, v19, v20);
      v22 = v32[0];
      v19 = v32[1];
      v23 = v33;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v34);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_23C7E7A6C((uint64_t)v34);
      v22 = 0;
      v23 = 4;
    }
    result = sub_23C7E7A6C((uint64_t)v37);
    *(_QWORD *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v24 = (_QWORD *)(v3[6] + 16 * i);
    *v24 = v17;
    v24[1] = v18;
    v25 = v3[7] + 24 * i;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v19;
    *(_BYTE *)(v25 + 16) = v23;
    v26 = v3[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v3[2] = v28;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_27;
    if (v13 >= v30)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v30)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v29 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v30)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v29 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v30)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v30)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v29 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23C8E3394(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

void sub_23C8E33D0(_QWORD *a1@<X8>)
{
  uint64_t v2;

  Statement.columnNames.getter();
  *a1 = v2;
}

uint64_t method lookup function for Statement()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _DatabaseCursor._isDone.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _DatabaseCursor._isDone.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _DatabaseCursor._element(sqliteStatement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata accessor for StatementCursor()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of StatementBinding.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for Statement.TransactionEffect(uint64_t a1)
{
  return sub_23C7E7288(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void _s12GRDBInternal9StatementC17TransactionEffectOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C7E711C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C7DB3A0();
}

uint64_t assignWithCopy for Statement.TransactionEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C7E711C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C7E7288(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Statement.TransactionEffect(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C7E7288(v4, v5, v6);
  return a1;
}

uint64_t sub_23C8E3554(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_23C8E356C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Statement.TransactionEffect()
{
  return &type metadata for Statement.TransactionEffect;
}

const unsigned __int8 *sub_23C8E3594@<X0>(sqlite3_stmt *a1@<X0>, const unsigned __int8 **a2@<X8>)
{
  uint64_t v2;
  const unsigned __int8 *result;
  const unsigned __int8 *v5;

  result = sub_23C8E1D0C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

sqlite3_int64 sub_23C8E35BC@<X0>(sqlite3_stmt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  sqlite3_int64 result;
  char v5;

  result = sub_23C8E1D34(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_23C8E35EC@<X0>(sqlite3_stmt *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23C8E1D60(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23C8E3614()
{
  uint64_t v0;

  return sub_23C8DFAD0(v0);
}

uint64_t sub_23C8E362C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C8E3650()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C8E3658()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8E3668()
{
  sqlite3_stmt *v0;

  return sqlite3_step(v0);
}

uint64_t sub_23C8E3670()
{
  return swift_deallocPartialClassInstance();
}

uint64_t sub_23C8E3690()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8E36A0()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C8E36BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8E36CC()
{
  return swift_dynamicCast();
}

unint64_t sub_23C8E36D4()
{
  return sub_23C7EF5D4();
}

uint64_t sub_23C8E36DC()
{
  return sub_23C9117B4();
}

uint64_t sub_23C8E36E8()
{
  uint64_t v0;

  return sub_23C7E5640(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_23C8E36F4()
{
  sqlite3_stmt *v0;

  return sub_23C8DF5D8(v0);
}

uint64_t sub_23C8E370C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C8E3718()
{
  uint64_t v0;

  sub_23C7E2E54(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8E3734()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8E3740()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8E374C(uint64_t a1)
{
  unint64_t v1;
  char v2;

  return sub_23C7E56A4(a1, v1, v2);
}

_QWORD *sub_23C8E3758(_QWORD *a1)
{
  uint64_t v1;

  return sub_23C7E7E34(a1, v1);
}

char *sub_23C8E3760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  return &a19;
}

uint64_t sub_23C8E3774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  _QWORD __src[23];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v2 = v12;
    v4 = (_QWORD *)(a1 + 32);
    for (i = v1 - 1; ; --i)
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_23C7E7E34(v4, v6);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(__src, v6, v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7DEF40();
        sub_23C7FD588();
        v2 = v12;
      }
      v9 = *(_QWORD *)(v2 + 16);
      if (v9 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD588();
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 184 * v9 + 32), __src, 0xB8uLL);
      if (!i)
        break;
      v4 += 5;
    }
  }
  return v2;
}

uint64_t sub_23C8E389C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[22];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    ((void (*)(_QWORD, uint64_t, _QWORD))a3)(0, v3, 0);
    v4 = v17;
    v7 = (_QWORD *)(a1 + 32);
    for (i = v3 - 1; ; --i)
    {
      v9 = v7[3];
      v10 = v7[4];
      sub_23C7E7E34(v7, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v16, v9, v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v12 = sub_23C7DEF40();
        a3(v12);
        v4 = v17;
      }
      v14 = *(_QWORD *)(v4 + 16);
      v13 = *(_QWORD *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))a3)(v13 > 1, v14 + 1, 1);
        v4 = v17;
      }
      *(_QWORD *)(v4 + 16) = v14 + 1;
      memcpy((void *)(v4 + 168 * v14 + 32), v16, 0xA3uLL);
      if (!i)
        break;
      v7 += 5;
    }
  }
  return v4;
}

void sub_23C8E39C8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E39EC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E2644(v0, v1);
}

void AssociationToMany.forKey(_:)(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_23C7DF464(sub_23C8E6110, a1, a2);
  sub_23C8E6454();
}

void sub_23C8E3A2C()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E3A4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void Association.distinct()(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  sub_23C7E6648((unint64_t)sub_23C811F50, a1, a2, a3);
  sub_23C7EE340();
}

void sub_23C8E3A88()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E3AAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void Association.limit(_:offset:)(uint64_t a1@<X3>, uint64_t a2@<X4>, unint64_t a3@<X8>)
{
  sub_23C7E6648((unint64_t)sub_23C8E6124, a1, a2, a3);
  sub_23C7E2024();
}

void sub_23C8E3AF4()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3B18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void Association.with<A>(_:)(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  _BYTE __dst[187];

  memcpy(__dst, __src, sizeof(__dst));
  sub_23C7E6648((unint64_t)sub_23C8E613C, a2, a3, a4);
}

void sub_23C8E3B9C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3BC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void Association.group(_:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E6158, a3);
}

void sub_23C8E3BD8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3BFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void Association.having(_:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E6170, a3);
}

void sub_23C8E3C14()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3C38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void Association.filter(_:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E6188, a3);
}

void sub_23C8E3C50()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3C74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void Association.order(_:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E61A0, a3);
}

void sub_23C8E3C8C()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E3CAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void Association.reversed()(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  sub_23C7E6648((unint64_t)sub_23C80F844, a1, a2, a3);
  sub_23C7EE340();
}

void sub_23C8E3CE8()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E3D08()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void Association.unordered()(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  sub_23C7E6648((unint64_t)sub_23C8E5C68, a1, a2, a3);
  sub_23C7EE340();
}

void sub_23C8E3D44()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3D68()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void Association.select(_:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E61B8, a3);
}

void sub_23C8E3D80()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E3DA4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void Association.annotated(with:)(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  sub_23C8E3DBC(a1, a2, (unint64_t)sub_23C8E61D0, a3);
}

void sub_23C8E3DBC(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X4>, unint64_t a4@<X8>)
{
  sub_23C7E6648(a3, a1, a2, a4);
  sub_23C7E2024();
}

void sub_23C8E3DE4()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E3E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

_QWORD *Association.databaseTableName.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19[64];
  uint64_t v20;

  result = sub_23C7E5A1C(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  v15 = *(_QWORD *)(v18 + 16);
  if (v15)
  {
    sub_23C8E6448((int)result, (const void *)(v18 + 232 * v15 - 200), v9, v10, v11, v12, v13, v14, v18, v19[0]);
    sub_23C800974((uint64_t)v19);
    swift_bridgeObjectRelease();
    v16 = v20;
    sub_23C837C80(&v20);
    sub_23C812FA8((uint64_t)v19);
    swift_bridgeObjectRetain();
    sub_23C7FA5C4(&v20);
    return (_QWORD *)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C8E3E9C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void Association.aliased(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C7E6648((unint64_t)sub_23C8E6234, a1, a2, a3);
  sub_23C7EE340();
}

void sub_23C8E3EF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void Association._including(all:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C8E4010(a1, a2, (unint64_t)sub_23C8E624C, a3);
}

void sub_23C8E3F30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void Association._including(optional:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C8E4010(a1, a2, (unint64_t)sub_23C8E6268, a3);
}

void sub_23C8E3F68()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void Association._including(required:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C8E4010(a1, a2, (unint64_t)sub_23C8E6284, a3);
}

void sub_23C8E3FA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void Association._joining(optional:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C8E4010(a1, a2, (unint64_t)sub_23C8E62A0, a3);
}

void sub_23C8E3FD8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

void Association._joining(required:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  sub_23C8E4010(a1, a2, (unint64_t)sub_23C8E62C4, a3);
}

void sub_23C8E4010(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X8>)
{
  sub_23C7E6648(a3, a1, a2, a4);
}

void AssociationToOne.forKey(_:)(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_23C7DF464(sub_23C8E6110, a1, a2);
  sub_23C8E6454();
}

void sub_23C8E4084()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E40A8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E6A20(v0, v1);
}

void sub_23C8E40B4()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E40D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void sub_23C8E40E0()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E4104()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void sub_23C8E4110()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4134()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void sub_23C8E4140()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4164()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void sub_23C8E4170()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4194()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void sub_23C8E41A0()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E41C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void sub_23C8E41D0()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E41F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void sub_23C8E4200()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4220()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void sub_23C8E422C()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E424C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void sub_23C8E4258()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E427C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void sub_23C8E4288()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E42AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void sub_23C8E42B8()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E42D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_23C8E42E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void sub_23C8E430C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void sub_23C8E4338()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void sub_23C8E4364()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void sub_23C8E4390()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void sub_23C8E43BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

_QWORD *sub_23C8E43E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];
  unsigned __int8 v20;

  result = sub_23C7E5A1C(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  v15 = *(_QWORD *)(v18 + 16);
  if (v15)
  {
    sub_23C8E6448((int)result, (const void *)(v18 + 232 * v15 - 200), v9, v10, v11, v12, v13, v14, v18, v19[0]);
    sub_23C800974((uint64_t)v19);
    swift_bridgeObjectRelease();
    v16 = v19[0];
    sub_23C800A8C(v19[0], v19[1], v20);
    sub_23C812FA8((uint64_t)v19);
    return (_QWORD *)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C8E4470()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4494()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E6A20(v0, v1);
}

void sub_23C8E44A0()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E44C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void sub_23C8E44CC()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E44F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void sub_23C8E44FC()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4520()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void sub_23C8E452C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4550()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void sub_23C8E455C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4580()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void sub_23C8E458C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E45B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void sub_23C8E45BC()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E45E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void sub_23C8E45EC()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E460C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void sub_23C8E4618()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4638()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void sub_23C8E4644()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4668()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void sub_23C8E4674()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4698()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void sub_23C8E46A4()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E46C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_23C8E46CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void sub_23C8E46F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void sub_23C8E4724()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void sub_23C8E4750()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void sub_23C8E477C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void sub_23C8E47A8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

void sub_23C8E47D4()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E47F8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E2644(v0, v1);
}

void sub_23C8E4804()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4824()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void sub_23C8E4830()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E4854()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void sub_23C8E4860()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4884()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void sub_23C8E4890()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E48B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void sub_23C8E48C0()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E48E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void sub_23C8E48F0()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4914()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void sub_23C8E4920()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4944()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void sub_23C8E4950()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4970()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void sub_23C8E497C()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E499C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void sub_23C8E49A8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E49CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void sub_23C8E49D8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E49FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void sub_23C8E4A08()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E4A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_23C8E4A30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void sub_23C8E4A5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void sub_23C8E4A88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void sub_23C8E4AB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void sub_23C8E4AE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void sub_23C8E4B0C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

void sub_23C8E4B38()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4B5C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E6A20(v0, v1);
}

void sub_23C8E4B68()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4B88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void sub_23C8E4B94()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E4BB8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void sub_23C8E4BC4()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4BE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void sub_23C8E4BF4()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4C18()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void sub_23C8E4C24()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4C48()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void sub_23C8E4C54()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4C78()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void sub_23C8E4C84()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4CA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void sub_23C8E4CB4()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4CD4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void sub_23C8E4CE0()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4D00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void sub_23C8E4D0C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4D30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void sub_23C8E4D3C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4D60()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void sub_23C8E4D6C()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E4D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_23C8E4D94()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void sub_23C8E4DC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void sub_23C8E4DEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void sub_23C8E4E18()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void sub_23C8E4E44()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void sub_23C8E4E70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for BelongsToAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

void sub_23C8E4E9C()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4EC0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E8724();
  sub_23C7E6A20(v0, v1);
}

void sub_23C8E4ECC()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E4EEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E6DB4(v0, v1, v2);
}

void sub_23C8E4EF8()
{
  sub_23C8E641C();
  sub_23C8E6434();
}

void sub_23C8E4F1C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7ED1D4();
  sub_23C7E9A44(v0, v1, v2);
}

void sub_23C8E4F28()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4F4C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = (void *)sub_23C7DC67C();
  sub_23C7EC868(v0, v1, v2, v3);
}

void sub_23C8E4F58()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4F7C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E347C(v0, v1, v2);
}

void sub_23C8E4F88()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4FAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDFA0(v0, v1, v2);
}

void sub_23C8E4FB8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E4FDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E644C(v0, v1, v2);
}

void sub_23C8E4FE8()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E500C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E9778(v0, v1, v2);
}

void sub_23C8E5018()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E5038()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E1960(v0, v1, v2);
}

void sub_23C8E5044()
{
  sub_23C7E627C();
  sub_23C8E6414();
}

void sub_23C8E5064()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_23C7E4FCC();
  sub_23C7E5FA0(v0, v1, v2);
}

void sub_23C8E5070()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E5094()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7EDD44(v0, v1, v2);
}

void sub_23C8E50A0()
{
  sub_23C7E9460();
  sub_23C7E0AF8();
}

void sub_23C8E50C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8724();
  sub_23C7E1CB4(v0, v1, v2);
}

void sub_23C8E50D0()
{
  sub_23C8E6414();
}

_QWORD *sub_23C8E50EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_23C8E643C();
  return sub_23C7E9C58(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_23C8E50F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DFDA0(v0, v1, v2);
}

void sub_23C8E5124()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E8F5C(v0, v1, v2);
}

void sub_23C8E5150()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7E6884(v0, v1, v2);
}

void sub_23C8E517C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7DEB3C(v0, v1, v2);
}

void sub_23C8E51A8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7EE5FC(v0, v1, v2);
}

void sub_23C8E51D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E8CF4();
  MEMORY[0x242626100](&protocol conformance descriptor for HasOneAssociation<A, B>);
  sub_23C7E4574();
  sub_23C7ECD48(v0, v1, v2);
}

void sub_23C8E5200(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[232];
  _BYTE v25[227];
  _BYTE __src[232];
  _BYTE v27[32];
  _BYTE __dst[240];
  void (*v29)(_BYTE *, uint64_t);

  v10 = a4;
  v11 = *(_QWORD *)(a2 - 8);
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(a4, v4);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(a3 + 16) + 24))(v27, a2);
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 16);
  if (!v15)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v13;
  v29 = (void (*)(_BYTE *, uint64_t))v12;
  v16 = (const void *)(v14 + 232 * v15 - 200);
  memcpy(__dst, v16, 0xE3uLL);
  memcpy(__src, v16, 0xE3uLL);
  sub_23C800974((uint64_t)__dst);
  ((void (*)(_BYTE *))a1)(&__src[64]);
  if (v5)
  {
    memcpy(v25, __src, sizeof(v25));
    v17 = *v6;
    a1 = *(_QWORD *)(*v6 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if (a1)
        goto LABEL_5;
      goto LABEL_13;
    }
LABEL_12:
    sub_23C890984();
    v17 = v22;
    *v6 = v22;
    if (a1)
    {
LABEL_5:
      if (a1 <= *(_QWORD *)(v17 + 16))
      {
        memcpy(v24, (const void *)(v17 + 232 * a1 - 200), 0xE3uLL);
        memcpy((void *)(v17 + 232 * a1 - 200), v25, 0xE3uLL);
        sub_23C812FA8((uint64_t)v24);
        v29(v27, 1);
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v10, a2);
        return;
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    sub_23C890984();
    v19 = v23;
    *v6 = v23;
    if (!v10)
      goto LABEL_16;
    goto LABEL_9;
  }
  memcpy(v25, __src, sizeof(v25));
  v19 = *v6;
  v10 = *(_QWORD *)(*v6 + 16);
  v20 = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v19;
  if ((v20 & 1) == 0)
    goto LABEL_15;
  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_9:
  if (v10 <= *(_QWORD *)(v19 + 16))
  {
    v21 = (void *)(v19 + 232 * v10 - 200);
    memcpy(v24, v21, 0xE3uLL);
    memcpy(v21, v25, 0xE3uLL);
    sub_23C812FA8((uint64_t)v24);
    v29(v27, 0);
    return;
  }
LABEL_17:
  __break(1u);
}

void *sub_23C8E542C(void *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD v6[23];

  sub_23C7E0718(v6, a1);
  v6[22] = a2;
  sub_23C85CF78();
  sub_23C7FA5C4(v6);
  return sub_23C7E0718(a1, &v5);
}

void *sub_23C8E54A8(void *a1, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v3;
  void *result;
  _QWORD v8[21];
  _QWORD v9[21];

  sub_23C7E0718(v9, a1);
  v8[0] = a2;
  swift_bridgeObjectRetain();
  a3(v8);
  if (v3)
  {
    result = (void *)swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    sub_23C85CF78();
    swift_bridgeObjectRelease();
    sub_23C7FA5C4(v9);
    return sub_23C7E0718(a1, v8);
  }
  return result;
}

uint64_t Association.forKey(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_23C7E7E34(a1, a1[3]);
  v4 = sub_23C911C40();
  (*(void (**)(uint64_t))(a3 + 32))(v4);
  return swift_bridgeObjectRelease();
}

double sub_23C8E55DC(char *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE __dst[162];

  memcpy(__dst, __src, sizeof(__dst));
  v4 = *(_QWORD *)__dst;
  v5 = *(_QWORD *)&__dst[8];
  v6 = *(_QWORD *)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    sub_23C837C80(__dst);
    v7 = swift_retain();
    sub_23C880AE4(v7);
    swift_release();
  }
  else
  {
    sub_23C837C80(__dst);
    sub_23C880F04(v4, v5);
    swift_retain();
    v6 = a2;
  }
  sub_23C7FA5C4(__dst);
  *(_OWORD *)(__src + 24) = *(_OWORD *)&__dst[24];
  *(_OWORD *)(__src + 40) = *(_OWORD *)&__dst[40];
  *(_OWORD *)(__src + 72) = *(_OWORD *)&__dst[72];
  *(_OWORD *)(__src + 88) = *(_OWORD *)&__dst[88];
  result = *(double *)&__dst[112];
  v9 = *(_OWORD *)&__dst[128];
  v10 = *(_OWORD *)&__dst[144];
  *((_OWORD *)__src + 7) = *(_OWORD *)&__dst[112];
  *((_OWORD *)__src + 8) = v9;
  v11 = __dst[160];
  v12 = __dst[161];
  v13 = __dst[104];
  v14 = *(_QWORD *)&__dst[56];
  v15 = __dst[64];
  *(_QWORD *)__src = v4;
  *((_QWORD *)__src + 1) = v5;
  *((_QWORD *)__src + 2) = v6;
  *((_QWORD *)__src + 7) = v14;
  __src[64] = v15;
  __src[104] = v13;
  *((_OWORD *)__src + 9) = v10;
  __src[160] = v11;
  __src[161] = v12;
  return result;
}

__n128 sub_23C8E56F4(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __int128 v21;
  char v22;

  v6 = *((_QWORD *)a1 + 2);
  v15 = *a1;
  v16 = *(__int128 *)((char *)a1 + 40);
  v7 = *((_QWORD *)a1 + 7);
  v8 = *((_BYTE *)a1 + 64);
  v22 = *((_BYTE *)a1 + 104);
  v20 = (__n128)a1[8];
  v21 = a1[7];
  v18 = *((_QWORD *)a1 + 19);
  v19 = *((_QWORD *)a1 + 18);
  v17 = *((_BYTE *)a1 + 160);
  v9 = *((_BYTE *)a1 + 161);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_23C8E6350;
  *(_QWORD *)(v11 + 24) = v10;
  swift_retain();
  v13 = *(__int128 *)((char *)a1 + 88);
  v14 = *(__int128 *)((char *)a1 + 72);
  swift_release();
  *a1 = v15;
  *((_QWORD *)a1 + 2) = v6;
  *((_QWORD *)a1 + 3) = sub_23C7FA730;
  *((_QWORD *)a1 + 4) = v11;
  *(__int128 *)((char *)a1 + 40) = v16;
  *((_QWORD *)a1 + 7) = v7;
  *((_BYTE *)a1 + 64) = v8;
  *(__int128 *)((char *)a1 + 72) = v14;
  *(__int128 *)((char *)a1 + 88) = v13;
  *((_BYTE *)a1 + 104) = v22;
  result = v20;
  a1[7] = v21;
  a1[8] = (__int128)v20;
  *((_QWORD *)a1 + 18) = v19;
  *((_QWORD *)a1 + 19) = v18;
  *((_BYTE *)a1 + 160) = v17;
  *((_BYTE *)a1 + 161) = v9;
  return result;
}

uint64_t sub_23C8E5854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v19 = *(_OWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 144);
  v14 = *(_BYTE *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 161);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v12 + 32) = sub_23C8E6400;
  *(_QWORD *)(v12 + 40) = v11;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = sub_23C812D9C;
  *(_QWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 104) = v20;
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v16;
  *(_QWORD *)(a1 + 152) = v15;
  *(_BYTE *)(a1 + 160) = v14;
  *(_BYTE *)(a1 + 161) = v10;
  return swift_retain();
}

void sub_23C8E597C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2();
  if (!v2)
  {
    sub_23C8E3774(v3);
    sub_23C7DB590();
  }
  sub_23C7EDFF0();
}

uint64_t sub_23C8E59C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 104);
  v10 = *(_BYTE *)(a1 + 161);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = sub_23C812D7C;
  if (v7)
  {
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = v7;
    v13[3] = v6;
    v13[4] = sub_23C812D7C;
    v13[5] = v11;
    v12 = sub_23C812CE0;
    v11 = (uint64_t)v13;
  }
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 161) = v10;
  return swift_retain();
}

__n128 sub_23C8E5A8C(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __int128 v22;
  char v23;

  v17 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v23 = *((_BYTE *)a1 + 104);
  v21 = (__n128)a1[8];
  v22 = a1[7];
  v19 = *((_QWORD *)a1 + 19);
  v20 = *((_QWORD *)a1 + 18);
  v18 = *((_BYTE *)a1 + 160);
  v9 = *((_BYTE *)a1 + 161);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  sub_23C7E79A8(&qword_25430CBC8);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_23C8E6368;
  *(_QWORD *)(v12 + 24) = v10;
  *(_QWORD *)(v11 + 32) = sub_23C8E6388;
  *(_QWORD *)(v11 + 40) = v12;
  *(_BYTE *)(v11 + 48) = 0;
  swift_retain();
  v16 = *(__int128 *)((char *)a1 + 72);
  v14 = *(__int128 *)((char *)a1 + 24);
  v15 = *(__int128 *)((char *)a1 + 88);
  swift_bridgeObjectRelease();
  *a1 = v17;
  *((_QWORD *)a1 + 2) = v6;
  *(__int128 *)((char *)a1 + 24) = v14;
  *((_QWORD *)a1 + 5) = v7;
  *((_QWORD *)a1 + 6) = v8;
  *((_QWORD *)a1 + 7) = v11;
  *((_BYTE *)a1 + 64) = 0;
  *(__int128 *)((char *)a1 + 72) = v16;
  *(__int128 *)((char *)a1 + 88) = v15;
  *((_BYTE *)a1 + 104) = v23;
  result = v21;
  a1[7] = v22;
  a1[8] = (__int128)v21;
  *((_QWORD *)a1 + 18) = v20;
  *((_QWORD *)a1 + 19) = v19;
  *((_BYTE *)a1 + 160) = v18;
  *((_BYTE *)a1 + 161) = v9;
  return result;
}

void sub_23C8E5C18(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[8];

  v6 = a2();
  if (!v4)
  {
    sub_23C8E389C(v6, (uint64_t)v7, a4);
    sub_23C7DB590();
  }
  sub_23C7EDFF0();
}

__n128 sub_23C8E5C68(char *__src)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD __dst[11];
  int v20;
  char v21;

  memcpy(__dst, __src, 0xA2uLL);
  v17 = *((_QWORD *)&__dst[9] + 1);
  v18 = *(_QWORD *)&__dst[9];
  v20 = LOBYTE(__dst[10]);
  v2 = BYTE1(__dst[10]);
  v15 = __dst[7];
  v16 = (__n128)__dst[8];
  v14 = BYTE8(__dst[6]);
  v12 = *(_QWORD *)&__dst[3];
  v13 = *((_QWORD *)&__dst[2] + 1);
  v3 = *(_QWORD *)&__dst[1];
  v9 = *(_OWORD *)((char *)&__dst[1] + 8);
  v10 = __dst[0];
  v11 = *(_OWORD *)((char *)&__dst[4] + 8);
  sub_23C837C80(__dst);
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x24BEE4AF8];
  sub_23C910DAC();
  v5 = sub_23C85BE98();
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7FA5C4(__dst);
  v21 = v2;
  *(_OWORD *)__src = v10;
  *((_QWORD *)__src + 2) = v3;
  *(_OWORD *)(__src + 24) = v9;
  *((_QWORD *)__src + 5) = v13;
  *((_QWORD *)__src + 6) = v12;
  *((_QWORD *)__src + 7) = v4;
  __src[64] = 0;
  *(_OWORD *)(__src + 72) = v11;
  *((_QWORD *)__src + 11) = v5;
  *((_QWORD *)__src + 12) = v7;
  __src[104] = v14;
  result = v16;
  *((_OWORD *)__src + 7) = v15;
  *((__n128 *)__src + 8) = v16;
  *((_QWORD *)__src + 18) = v18;
  *((_QWORD *)__src + 19) = v17;
  __src[160] = v20;
  __src[161] = v21;
  return result;
}

__n128 sub_23C8E5E00(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  char v23;

  v16 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v18 = *(__int128 *)((char *)a1 + 40);
  v7 = *((_QWORD *)a1 + 7);
  v17 = *((_BYTE *)a1 + 64);
  v19 = *((_BYTE *)a1 + 104);
  v8 = *((_QWORD *)a1 + 14);
  v22 = (__n128)a1[8];
  v20 = *((_QWORD *)a1 + 19);
  v21 = *((_QWORD *)a1 + 18);
  v23 = *((_BYTE *)a1 + 160);
  v9 = *((_BYTE *)a1 + 161);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_23C8E63A8;
  *(_QWORD *)(v11 + 24) = v10;
  swift_retain();
  v15 = *(__int128 *)((char *)a1 + 72);
  v13 = *(__int128 *)((char *)a1 + 24);
  v14 = *(__int128 *)((char *)a1 + 88);
  sub_23C7F1754(v8);
  *a1 = v16;
  *((_QWORD *)a1 + 2) = v6;
  *(__int128 *)((char *)a1 + 24) = v13;
  *(__int128 *)((char *)a1 + 40) = v18;
  *((_QWORD *)a1 + 7) = v7;
  *((_BYTE *)a1 + 64) = v17;
  *(__int128 *)((char *)a1 + 72) = v15;
  *(__int128 *)((char *)a1 + 88) = v14;
  *((_BYTE *)a1 + 104) = v19;
  *((_QWORD *)a1 + 14) = sub_23C8E63C8;
  *((_QWORD *)a1 + 15) = v11;
  result = v22;
  a1[8] = (__int128)v22;
  *((_QWORD *)a1 + 18) = v21;
  *((_QWORD *)a1 + 19) = v20;
  *((_BYTE *)a1 + 160) = v23;
  *((_BYTE *)a1 + 161) = v9;
  return result;
}

uint64_t sub_23C8E5F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v10 = *(_BYTE *)(a1 + 161);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = sub_23C813BB8;
  if (v9)
  {
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = v9;
    v13[3] = v8;
    v13[4] = sub_23C813BB8;
    v13[5] = v11;
    v12 = sub_23C812CE0;
    v11 = (uint64_t)v13;
  }
  *(_BYTE *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v11;
  *(_BYTE *)(a1 + 161) = v10;
  return swift_retain();
}

uint64_t sub_23C8E6040(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v11 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 8))(&v14, a5, v11);
  v13 = v14;
  swift_bridgeObjectRetain();
  sub_23C8B5BA0(&v13, a2, a3, a4);
  if (v6)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = v13;
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v14, a5, v11);
  }
  return result;
}

uint64_t sub_23C8E6110(uint64_t a1)
{
  return sub_23C8E62E8(a1);
}

__n128 sub_23C8E6124(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[2].n128_u8[0];
  result = v1[1];
  a1[9] = result;
  a1[10].n128_u16[0] = v2;
  return result;
}

uint64_t sub_23C8E613C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C810210(a1, *(uint64_t **)(v1 + 40));
}

double sub_23C8E6158(__int128 *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_23C8E5E00(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_23C8E6170(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E5F78(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C8E6188(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E59C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_23C8E61A0(__int128 *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_23C8E5A8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)).n128_u64[0];
  return result;
}

double sub_23C8E61B8(__int128 *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_23C8E56F4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_23C8E61D0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E5854(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_23C8E61EC(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_23C8E6214(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

double sub_23C8E6234(char *a1)
{
  uint64_t v1;

  return sub_23C8E55DC(a1, v1);
}

void *sub_23C8E624C(void *a1)
{
  uint64_t v1;

  return sub_23C8E542C(a1, *(_QWORD *)(v1 + 16));
}

void *sub_23C8E6268(void *a1)
{
  uint64_t v1;

  return sub_23C8E542C(a1, *(_QWORD *)(v1 + 16));
}

void *sub_23C8E6284(void *a1)
{
  uint64_t v1;

  return sub_23C8E542C(a1, *(_QWORD *)(v1 + 16));
}

void *sub_23C8E62A0(void *a1)
{
  uint64_t v1;

  return sub_23C8E54A8(a1, *(_QWORD *)(v1 + 16), (void (*)(_QWORD *))sub_23C85DDB4);
}

void *sub_23C8E62C4(void *a1)
{
  uint64_t v1;

  return sub_23C8E54A8(a1, *(_QWORD *)(v1 + 16), (void (*)(_QWORD *))sub_23C85DEAC);
}

uint64_t sub_23C8E62E8(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E6040(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t dispatch thunk of _Association._sqlAssociation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _Association._sqlAssociation.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _Association._sqlAssociation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Association.forKey(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_23C8E6328()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C8E6350(uint64_t a1)
{
  uint64_t v1;

  sub_23C8E597C(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_23C8E6368(uint64_t a1)
{
  uint64_t v1;

  sub_23C8E5C18(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(_QWORD))sub_23C7FDA0C);
}

uint64_t sub_23C8E6388@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C811BF0(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

void sub_23C8E63A8(uint64_t a1)
{
  uint64_t v1;

  sub_23C8E5C18(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(_QWORD))sub_23C7FD468);
}

uint64_t sub_23C8E63C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C813BE0(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

void sub_23C8E6400(uint64_t a1)
{
  sub_23C8E6350(a1);
}

void sub_23C8E6414()
{
  JUMPOUT(0x242626100);
}

void sub_23C8E6434()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C8E643C()
{
  uint64_t v0;

  return v0;
}

void *sub_23C8E6448(int a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, a2, 0xE3uLL);
}

uint64_t NSString.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23C910E78();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

id static NSString.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v2);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 3)
  {
    result = 0;
    if (v3 != 2)
      return result;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  v5 = sub_23C7E873C();
  sub_23C7ED944(v5, v6);
  sub_23C910EA8();
  sub_23C7E873C();
  sub_23C910E90();
  v8 = v7;
  v9 = sub_23C7E873C();
  sub_23C7E5640(v9, v10, 3);
  if (v8)
  {
LABEL_5:
    sub_23C7E873C();
    return sub_23C8A7894();
  }
  return 0;
}

uint64_t sub_23C8E6568@<X0>(uint64_t a1@<X8>)
{
  return NSString.databaseValue.getter(a1);
}

id sub_23C8E6588@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = static NSString.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

void DatabaseCollation.__allocating_init(_:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v9 = sub_23C7E18F4();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  v8[4] = sub_23C8E69CC;
  v8[5] = v9;
  sub_23C7DF5B4();
}

uint64_t DatabaseCollation.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *DatabaseCollation.init(_:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;

  v4[2] = a1;
  v4[3] = a2;
  v7 = sub_23C7E18F4();
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  v4[4] = sub_23C8E6BCC;
  v4[5] = v7;
  return v4;
}

void sub_23C8E6688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C910EA8();
  v1 = sub_23C7E9474();
  if (v2)
  {
    v3 = v1;
    v4 = v2;
    sub_23C910EA8();
    v5 = sub_23C7E9474();
    if (v6)
    {
      sub_23C817FD4(v3, v4, v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7DF5B4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_23C8E676C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8E679C(a1, a2, a3, a4, MEMORY[0x24BDD0580]);
}

void sub_23C8E6778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8E679C(a1, a2, a3, a4, MEMORY[0x24BDD05C8]);
}

void sub_23C8E6784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8E679C(a1, a2, a3, a4, MEMORY[0x24BDD0510]);
}

void sub_23C8E6790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8E679C(a1, a2, a3, a4, MEMORY[0x24BDD05A0]);
}

void sub_23C8E679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, unint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];

  v6 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C910EA8();
  v7 = sub_23C7E9474();
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    sub_23C910EA8();
    v11 = sub_23C7E9474();
    if (v12)
    {
      v14[2] = v9;
      v14[3] = v10;
      v14[0] = v11;
      v14[1] = v12;
      v13 = sub_23C7EEE60();
      a5(v14, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D00], v13, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7DF5B4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_23C8E68A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C910EA8();
  result = sub_23C910E60();
  if (v8)
  {
    v9 = result;
    v10 = v8;
    sub_23C910EA8();
    result = sub_23C910E60();
    if (v11)
    {
      v12 = a5(v9, v10, result, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8E69A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8E69CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C8E68A0(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

uint64_t DatabaseCollation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DatabaseCollation.__deallocating_deinit()
{
  DatabaseCollation.deinit();
  return swift_deallocClassInstance();
}

uint64_t DatabaseCollation.hash(into:)()
{
  return sub_23C7E0B00();
}

BOOL static DatabaseCollation.== infix(_:_:)()
{
  const char *v0;
  uint64_t v1;
  int v2;

  v0 = (const char *)(sub_23C910EFC() + 32);
  v1 = sub_23C910EFC();
  v2 = sqlite3_stricmp(v0, (const char *)(v1 + 32));
  swift_release();
  swift_release();
  return v2 == 0;
}

void DatabaseCollation.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C7E0B00();
  sub_23C911BF8();
  sub_23C7E63C0();
}

void sub_23C8E6AE0()
{
  DatabaseCollation.hashValue.getter();
}

uint64_t sub_23C8E6AF4()
{
  return DatabaseCollation.hash(into:)();
}

void sub_23C8E6B08()
{
  sub_23C911BBC();
  sub_23C7E0B00();
  sub_23C911BF8();
  sub_23C7E63C0();
}

unint64_t sub_23C8E6B3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430DA88;
  if (!qword_25430DA88)
  {
    v1 = type metadata accessor for DatabaseCollation();
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseCollation, v1);
    atomic_store(result, (unint64_t *)&qword_25430DA88);
  }
  return result;
}

uint64_t type metadata accessor for DatabaseCollation()
{
  return objc_opt_self();
}

BOOL sub_23C8E6B98()
{
  return static DatabaseCollation.== infix(_:_:)();
}

uint64_t method lookup function for DatabaseCollation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseCollation.__allocating_init(_:function:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_23C8E6BD4(uint64_t a1, _BYTE *a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t *v25;
  void *v26;
  char v27;
  Swift::String v28;
  GRDBInternal::StatementArguments v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  int v37;

  swift_retain_n();
  if ((Database.isInsideTransaction.getter() & 1) != 0)
  {
    v11 = MEMORY[0x24BEE4AF8];
    v12 = MEMORY[0x24BEE4B00];
    v35 = MEMORY[0x24BEE4AF8];
    v36 = MEMORY[0x24BEE4B00];
    v13 = &v35;
    v14._countAndFlagsBits = 0x4E494F5045564153;
    v14._object = (void *)0xEE00626472672054;
    Database.execute(sql:arguments:)(v14, *(GRDBInternal::StatementArguments *)(&v10 - 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v15)
    {
      v37 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
      v16 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
      *(_BYTE *)(a1 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
      swift_retain();
      v17 = sub_23C8EB374(a2, a3, a4, a5);
      if ((v17 & 1) != 0)
      {
        v31 = 0;
        v27 = v37;
      }
      else
      {
        sub_23C7E2414();
        v27 = v37;
        *(_BYTE *)(a1 + v16) = v37;
        v35 = v11;
        v36 = v12;
        v28._object = (void *)0x800000023C9203B0;
        v29.values._rawValue = &v35;
        v28._countAndFlagsBits = 0xD000000000000016;
        Database.execute(sql:arguments:)(v28, v29);
        if (!v30)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v30;
      }
      v35 = v11;
      v36 = v12;
      v19._countAndFlagsBits = 0xD000000000000026;
      v19._object = (void *)0x800000023C920380;
      v20 = &v35;
      Database.execute(sql:arguments:)(v19, *(GRDBInternal::StatementArguments *)(&v18 - 1));
      v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21)
        goto LABEL_6;
      v35 = v11;
      v36 = v12;
      v24._object = (void *)0x800000023C9203B0;
      v25 = &v35;
      v24._countAndFlagsBits = 0xD000000000000016;
      Database.execute(sql:arguments:)(v24, *(GRDBInternal::StatementArguments *)(&v23 - 1));
      v22 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_6:
        if (!v31)
        {
          v32 = v22;
          goto LABEL_14;
        }

      }
      else if (!v31)
      {
        goto LABEL_15;
      }
      v22 = v31;
LABEL_14:
      v33 = v31;
      swift_willThrow();

LABEL_15:
      *(_BYTE *)(a1 + v16) = v27;
    }
  }
  else
  {
    LOBYTE(v35) = 3;
    swift_retain();
    sub_23C8E7264((char *)&v35, a1, a2, a3, a4, a5);
  }
  return swift_release_n();
}

uint64_t sub_23C8E6E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C8E70C4(a1, a2, a3, a4);
}

void sub_23C8E6E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  GRDBInternal::StatementArguments v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  Swift::String v38;
  GRDBInternal::StatementArguments v39;
  uint64_t v40;
  id v41;
  void *v42;
  Swift::String v43;
  GRDBInternal::StatementArguments v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  GRDBInternal::StatementArguments v48;

  sub_23C8EF41C();
  a21 = v23;
  a22 = v24;
  v26 = v25;
  v28 = v27;
  swift_retain();
  if ((Database.isInsideTransaction.getter() & 1) == 0)
  {
    LOBYTE(a9) = 3;
    sub_23C7DB634();
    sub_23C8E73BC((char *)&a9, v28);
LABEL_16:
    sub_23C8EF580();
    goto LABEL_17;
  }
  a9 = MEMORY[0x24BEE4AF8];
  a10 = MEMORY[0x24BEE4B00];
  v29.values._rawValue = &a9;
  v46._countAndFlagsBits = 0x4E494F5045564153;
  v46._object = (void *)0xEE00626472672054;
  sub_23C8EF3F8(v46, v29);
  if (!v22)
  {
    v30 = MEMORY[0x24BEE4B00];
    sub_23C7DB398();
    v31 = MEMORY[0x24BEE4AF8];
    sub_23C7DB3DC();
    v32 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v33 = *(_BYTE *)(v28 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(v28 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    v37 = sub_23C8CCCB0(v26, v34, v35, v36);
    if ((v37 & 1) != 0)
    {
      v42 = 0;
    }
    else
    {
      sub_23C8EF500();
      *(_BYTE *)(v28 + v32) = v33;
      a9 = v31;
      a10 = v30;
      v43._countAndFlagsBits = sub_23C8EF51C();
      Database.execute(sql:arguments:)(v43, v44);
      if (!v45)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = v45;
    }
    a9 = v31;
    a10 = v30;
    sub_23C8EF3B8();
    Database.execute(sql:arguments:)(v38, v39);
    sub_23C7DB398();
    sub_23C7DB3DC();
    if (v40)
    {
      if (v42)
        sub_23C8EF254();
      else
        sub_23C8EF514();
    }
    else
    {
      a9 = v31;
      a10 = v30;
      v47._countAndFlagsBits = sub_23C8EF51C();
      sub_23C8EF3F8(v47, v48);
      sub_23C7DB398();
      sub_23C7DB3DC();
      if (!v42)
        goto LABEL_15;
    }
    v41 = v42;
    sub_23C8EF2A8();
    sub_23C8EF254();
LABEL_15:
    *(_BYTE *)(v28 + v32) = v33;
    goto LABEL_16;
  }
  sub_23C8EF580();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_17:
  sub_23C7E936C();
}

#error "23C8E71A4: call analysis failed (funcsize=99)"

uint64_t sub_23C8E7264(char *a1, uint64_t a2, _BYTE *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char v21;

  v21 = *a1;
  swift_retain();
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v21);
  if (!v11)
  {
    v12 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v13 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    swift_retain();
    if ((sub_23C8EB3C8(a3, a4, a5, a6) & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      sub_23C7E2414();
      *(_BYTE *)(a2 + v12) = v13;
      Database.commit()();
      if (!v14)
        goto LABEL_13;
      v15 = v14;
    }
    Database.rollback()();
    v17 = v16;
    if (v16)
    {
      if (!v15)
      {
        v18 = v16;
        goto LABEL_12;
      }

LABEL_10:
      v17 = v15;
LABEL_12:
      v19 = v15;
      swift_willThrow();

      goto LABEL_13;
    }
    if (v15)
      goto LABEL_10;
LABEL_13:
    *(_BYTE *)(a2 + v12) = v13;
  }
  return swift_release_n();
}

uint64_t sub_23C8E73BC(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  char v18;

  v18 = *a1;
  swift_retain();
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v18);
  if (!v3)
  {
    v4 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v5 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    v6 = swift_retain();
    v10 = sub_23C8CCCB0(v6, v7, v8, v9);
    swift_release();
    if ((v10 & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      sub_23C7E2414();
      *(_BYTE *)(a2 + v4) = v5;
      Database.commit()();
      if (!v11)
        goto LABEL_13;
      v12 = v11;
    }
    Database.rollback()();
    v14 = v13;
    if (v13)
    {
      if (!v12)
      {
        v15 = v13;
        goto LABEL_12;
      }

LABEL_10:
      v14 = v12;
LABEL_12:
      v16 = v12;
      swift_willThrow();

      goto LABEL_13;
    }
    if (v12)
      goto LABEL_10;
LABEL_13:
    *(_BYTE *)(a2 + v4) = v5;
  }
  return swift_release_n();
}

void sub_23C8E7510(char *a1, uint64_t a2, _BYTE *a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v12 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v12);
  if (!v7)
  {
    v8 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v9 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    a4(&v13);
    *a3 = 0;
    sub_23C7DF654();
    *(_BYTE *)(a2 + v8) = v9;
    Database.commit()();
    if (v10)
    {
      Database.rollback()();
      if (v11)
        sub_23C7E6308();
      sub_23C8EF514();
      sub_23C8EF2A8();
      sub_23C8EF254();
    }
    *(_BYTE *)(a2 + v8) = v9;
  }
  sub_23C7E8F68();
}

void sub_23C8E75EC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  char v21;

  v21 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v21);
  if (!v16)
  {
    v17 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v18 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    (*(void (**)(uint64_t))(a3 + 24))(a4);
    sub_23C83386C();
    Database.foreignKeyViolations()();
    sub_23C852154();
    swift_release();
    sub_23C7E2414();
    *(_BYTE *)(a2 + v17) = v18;
    Database.commit()();
    if (!v19)
    {
      *(_BYTE *)(a2 + v17) = v18;
      v20 = *(__n128 *)a3;
      sub_23C880200((uint64_t)&v20);
      sub_23C7DE904();
      goto LABEL_8;
    }
    sub_23C8EF530();
    sub_23C7E6308();
    v7 = sub_23C8EF31C();
    *(_BYTE *)(a2 + v17) = v18;
  }
  sub_23C8EF45C(*(__n128 *)a3, v7, v8, v9, v10, v11, v12, v13, v14, v20.n128_i64[0], v20.n128_i64[1], v15);
  sub_23C7DE904();
LABEL_8:
  swift_release();
  sub_23C8EF1DC();
}

uint64_t sub_23C8E7754(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C8E777C(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_23C8E7768(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C8E79BC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23C8E777C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;

  sub_23C8EF240(a1, a2, a3, a4, a5, a6, a7, a8, v25, v27, SWORD2(v27), SBYTE6(v27), SHIBYTE(v27));
  if (!v8)
  {
    v12 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v13 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    (*(void (**)(uint64_t))(a3 + 24))(a4);
    sub_23C83386C();
    sub_23C7E2414();
    *(_BYTE *)(a2 + v12) = v13;
    Database.commit()();
    if (!v23)
    {
      *(_BYTE *)(a2 + v12) = v13;
      sub_23C8EF45C(*(__n128 *)a3, v14, v15, v16, v17, v18, v19, v20, v21, v26, v28, v22);
      sub_23C7DE904();
      return swift_release();
    }
    sub_23C8EF530();
    sub_23C7E6308();
    sub_23C8EF2A8();
    *(_BYTE *)(a2 + v12) = v13;
  }
  v29 = *(__n128 *)a3;
  sub_23C880200((uint64_t)&v29);
  sub_23C7DE904();
  return swift_release();
}

void sub_23C8E78A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int16 v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12 = a3;
  sub_23C8EF34C(a1, a2, a3, a4, a5, a6, a7, a8, v19, v20, SWORD2(v20), SBYTE6(v20), SHIBYTE(v20));
  if (!v8)
  {
    v14 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v15 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if ((sub_23C8AFA08(v12 & 0x101, a4, a5, a6) & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      sub_23C8EF500();
      *(_BYTE *)(a2 + v14) = v15;
      Database.commit()();
      if (!v16)
        goto LABEL_13;
      v17 = v16;
    }
    Database.rollback()();
    if (v18)
    {
      if (v17)
        sub_23C8EF3C8();
      else
        sub_23C8EF55C();
      goto LABEL_12;
    }
    if (v17)
    {
LABEL_12:
      sub_23C8EF554();
      sub_23C8EF31C();
      sub_23C8EF3C8();
    }
LABEL_13:
    *(_BYTE *)(a2 + v14) = v15;
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7E8F68();
}

void sub_23C8E79BC(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23C8EF240(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v17, v18, SWORD2(v18), SBYTE6(v18), SHIBYTE(v18));
  if (!v8)
  {
    v12 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v13 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if ((a3(a5) & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      sub_23C7E2414();
      *(_BYTE *)(a2 + v12) = v13;
      Database.commit()();
      if (!v14)
        goto LABEL_13;
      v15 = v14;
    }
    Database.rollback()();
    if (v16)
    {
      if (v15)
        sub_23C8EF3C8();
      else
        sub_23C8EF55C();
      goto LABEL_12;
    }
    if (v15)
    {
LABEL_12:
      sub_23C8EF554();
      sub_23C8EF31C();
      sub_23C8EF3C8();
    }
LABEL_13:
    *(_BYTE *)(a2 + v12) = v13;
  }
  sub_23C7DE904();
  sub_23C7E8F68();
}

uint64_t sub_23C8E7AC8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v8;

  sub_23C8EF400();
  v1 = (int *)sub_23C7E830C();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)v3 = 1;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_DWORD *)(v3 + 23) = 0;
  *((_QWORD *)v3 + 4) = MEMORY[0x24BEE4AF8];
  *((_WORD *)v3 + 20) = 0;
  v3[64] = 2;
  *((_QWORD *)v3 + 9) = 0;
  *((_QWORD *)v3 + 10) = 0;
  v3[88] = -1;
  *((_QWORD *)v3 + 12) = 5;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 7) = 0;
  sub_23C910D4C();
  *(_QWORD *)&v3[v1[17]] = 0;
  *(_QWORD *)&v3[v1[18]] = 0;
  v3[v1[19]] = 1;
  v3[v1[20]] = 0;
  v4 = &v3[v1[21]];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v3[v1[22]];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v3[v1[23]];
  type metadata accessor for DatabaseQueue();
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v3);
  sub_23C8E9054(v0, -1, 0, 0, 0, 0);
  return sub_23C7DFA18();
}

void Database.lastInsertedRowID.getter()
{
  uint64_t v0;

  sub_23C7DA548();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    sub_23C7E07C4();
    sqlite3_last_insert_rowid(*(sqlite3 **)(v0 + 16));
    sub_23C7E070C();
  }
  else
  {
    sub_23C7DC484();
    sub_23C7E947C();
    __break(1u);
  }
}

void Database.changesCount.getter()
{
  uint64_t v0;

  sub_23C7DA548();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    sub_23C7E07C4();
    sqlite3_changes(*(sqlite3 **)(v0 + 16));
    sub_23C7E070C();
  }
  else
  {
    sub_23C7DC484();
    sub_23C7E947C();
    __break(1u);
  }
}

id sub_23C8E7CE4()
{
  return sub_23C8E7D24((void (*)(uint64_t))sub_23C8EEFB8);
}

id sub_23C8E7D24(void (*a1)(uint64_t))
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 24), sel_lock);
  swift_beginAccess();
  a1(v1 + 16);
  swift_endAccess();
  return objc_msgSend(*(id *)(v1 + 24), sel_unlock);
}

void sub_23C8E7DC0()
{
  sub_23C7ED1F0();
  sub_23C8EF4A8();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E7DF4()
{
  sub_23C8E7E90();
}

void sub_23C8E7E00()
{
  sub_23C8E7E90();
}

uint64_t sub_23C8E7E0C()
{
  sub_23C911BBC();
  sub_23C911BE0();
  return sub_23C911BF8();
}

void sub_23C8E7E50()
{
  sub_23C7ED1F0();
  swift_bridgeObjectRetain();
  sub_23C8EF1D4();
  sub_23C7DB624();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E7E90()
{
  uint64_t v0;

  v0 = sub_23C7ED1F0();
  sub_23C8EF488(v0);
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

uint64_t sub_23C8E7EBC()
{
  return sub_23C8E82C0();
}

void sub_23C8E7EC8()
{
  sub_23C8E83F0();
}

void sub_23C8E7ED4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23C8E7F14()
{
  sub_23C8EF1D4();
  return sub_23C7EDFB0();
}

void sub_23C8E7F70(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23C8E7FB0()
{
  sub_23C910F14();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8E8014()
{
  sub_23C910F14();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8E8094()
{
  return sub_23C911BE0();
}

uint64_t sub_23C8E80B8()
{
  swift_bridgeObjectRetain();
  sub_23C8EF1D4();
  return swift_bridgeObjectRelease();
}

void sub_23C8E80FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23C8E8140()
{
  sub_23C8EF1D4();
  return sub_23C7EDFB0();
}

uint64_t sub_23C8E81DC()
{
  sub_23C8EF1D4();
  return sub_23C7EDFB0();
}

void sub_23C8E8228(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23C8E825C()
{
  sub_23C8EF1D4();
  return sub_23C7EDFB0();
}

void sub_23C8E8294()
{
  sub_23C911BE0();
  sub_23C7DB390();
}

uint64_t sub_23C8E82C0()
{
  sub_23C911BBC();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  return sub_23C911BF8();
}

uint64_t sub_23C8E8364()
{
  sub_23C911BBC();
  sub_23C911BE0();
  return sub_23C911BF8();
}

void sub_23C8E83A4()
{
  sub_23C8EF344();
  swift_bridgeObjectRetain();
  sub_23C8EF1D4();
  sub_23C7DB624();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E83E4()
{
  sub_23C8E845C();
}

void sub_23C8E83F0()
{
  sub_23C8EF344();
  sub_23C8EF1D4();
  sub_23C7DB624();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E8450()
{
  sub_23C8E845C();
}

void sub_23C8E845C()
{
  uint64_t v0;

  v0 = sub_23C8EF344();
  sub_23C8EF488(v0);
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E8488()
{
  sub_23C8EF344();
  sub_23C8EF4A8();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8E84C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  *a2 = v4;
  sub_23C7DB390();
}

void sub_23C8E8514(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  *a2 = v4;
  sub_23C7DB390();
}

void sub_23C8E8564(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

void sub_23C8E856C(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void sub_23C8E8574(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

void sub_23C8E857C(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void sub_23C8E858C(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  if ((*v2 & a2) != 0)
    *v2 &= ~a2;
  sub_23C8EF5A4(a1);
}

void sub_23C8E85AC(uint64_t a1@<X8>, int a2@<W0>)
{
  _DWORD *v2;

  if ((*v2 & a2) != 0)
    *v2 &= ~a2;
  sub_23C8EF598(a1);
}

void sub_23C8E85D4(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  *v2 |= a2;
  sub_23C8EF5A4(a1);
}

void sub_23C8E85EC(uint64_t a1@<X8>, int a2@<W0>)
{
  _DWORD *v2;

  *v2 |= a2;
  sub_23C8EF598(a1);
}

uint64_t sub_23C8E8604(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_23C8E8614(uint64_t result)
{
  _DWORD *v1;

  *v1 ^= result;
  return result;
}

void sub_23C8E8624(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

void sub_23C8E862C(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

BOOL sub_23C8E8634(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_23C8E8640(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_23C8E864C(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_23C8E8658(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_23C8E8664(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_23C8E8670(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_23C8E867C(uint64_t a1)
{
  return a1 == 0;
}

BOOL sub_23C8E8688(int a1)
{
  return a1 == 0;
}

uint64_t sub_23C8E8694(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

uint64_t sub_23C8E86A4(uint64_t result)
{
  _DWORD *v1;

  *v1 &= ~(_DWORD)result;
  return result;
}

uint64_t Database.ConflictResolution.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C8E86E4 + 4 * byte_23C91AF44[*v0]))(0x4B4341424C4C4F52, 0xE800000000000000);
}

uint64_t sub_23C8E86E4()
{
  return 0x54524F4241;
}

uint64_t sub_23C8E86F8()
{
  return 1279869254;
}

uint64_t sub_23C8E8708()
{
  return 0x45524F4E4749;
}

uint64_t sub_23C8E871C()
{
  return 0x4543414C504552;
}

uint64_t sub_23C8E8734(char a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t result;
  _QWORD v18[6];
  char v19;

  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v19 = 1;
  swift_retain();
  if ((a1 & 1) == 0)
  {
    swift_retain();
    sub_23C8E6BD4(a2, &v19, a3, a4, a5);
    v11 = v5;
    swift_release();
    if (!v5)
      goto LABEL_5;
    return swift_release();
  }
  swift_retain();
  sub_23C8E8E7C();
  v11 = v5;
  if (v5)
  {
    swift_release();
LABEL_14:
    swift_release();
    return swift_release();
  }
  while (1)
  {
    v12 = swift_retain();
    v13 = v11;
    sub_23C8E70C4(v12, &v19, sub_23C8EF030, v18);
    v14 = v11;
    if (v11)
      v15 = v11;
    else
      v15 = 0;
    if (v11)
      v13 = 0;
    sub_23C8E8F18();
    v11 = v13;
    if (v15)
    {
      v16 = v15;
      swift_willThrow();

      swift_release_n();
      goto LABEL_14;
    }
    result = swift_release();
    if (v14)
      break;
    swift_release();
    swift_release();
LABEL_5:
    if ((v19 & 1) == 0)
      return swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23C8E88AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  if (*a1)
  {
    v3 = OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion;
    v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion);
    v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_selectedRegion);
    sub_23C7E6180();
    v5 = *v4;
    *(_BYTE *)(v1 + v3) = 1;
    sub_23C7E3084();
    swift_bridgeObjectRetain();
    *v4 = sub_23C910DAC();
    swift_bridgeObjectRelease();
    sub_23C8EF494();
    sub_23C8EAB54(a1, v1, v6, v5);
    sub_23C7DBCD0();
  }
  else
  {
    sub_23C8EF494();
  }
  sub_23C8EF1DC();
}

void sub_23C8E899C()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3 *v2;
  uint64_t v3;
  void (*v4)(sqlite3 *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(int *, unint64_t, unint64_t);
  sqlite3_stmt *stmt;
  sqlite3_stmt *v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;

  v1 = v0;
  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(v0) & 1) == 0)
  {
LABEL_18:
    sub_23C7DC484();
    sub_23C8EF4F4();
    __break(1u);
    return;
  }
  sub_23C7E6180();
  v2 = *(sqlite3 **)(v0 + 16);
  if (v2)
  {
    v27 = (_QWORD *)(v0 + 16);
    v3 = v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration;
    v25 = sub_23C7E830C();
    v26 = v3;
    v4 = *(void (**)(sqlite3 *))(v3 + *(int *)(v25 + 88));
    if (v4)
      v4(v2);
    v5 = sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
    type metadata accessor for Statement();
    v6 = sub_23C7E7774();
    sub_23C7E087C();
    sub_23C7E02DC(v5, v6, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
    v7 = sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
    v8 = sub_23C7E7774();
    sub_23C7E087C();
    sub_23C7E02DC(v7, v8, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
    v9 = sqlite3_close(v2);
    if ((_DWORD)v9)
    {
      v17 = v9;
      sub_23C7E07C4();
      v18 = (void (*)(int *, unint64_t, unint64_t))off_256BCDBF8;
      if (off_256BCDBF8 && v17 == 5)
      {
        sub_23C7EFAC4();
        stmt = sqlite3_next_stmt(v2, 0);
        if (stmt)
        {
          v20 = stmt;
          while (1)
          {
            v28 = 5;
            sub_23C911634();
            swift_bridgeObjectRelease();
            if (!sqlite3_sql(v20))
              break;
            sub_23C910F74();
            sub_23C910F5C();
            sub_23C7E087C();
            v18(&v28, 0xD000000000000017, 0x800000023C920700);
            sub_23C7E087C();
            v20 = sqlite3_next_stmt(v2, v20);
            if (!v20)
              goto LABEL_12;
          }
          __break(1u);
          __break(1u);
          goto LABEL_18;
        }
LABEL_12:
        sub_23C7F1754((uint64_t)v18);
        v17 = 5;
      }
      Database.lastErrorMessage.getter();
      sub_23C8EF5C4();
      sub_23C7EF5D4();
      sub_23C7DB694();
      *(_DWORD *)v21 = v17;
      *(_QWORD *)(v21 + 8) = v1;
      *(_QWORD *)(v21 + 16) = v2;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_BYTE *)(v21 + 56) = 0;
      sub_23C8EF31C();
      return;
    }
    sub_23C8EF2D0(v9, v10, v11, v12, v13, v14, v15, v16, v23, v24, v25, v26, v27);
    if (v22)
      v22();
  }
}

uint64_t sub_23C8E8C98(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];

  v3[3] = a2;
  v3[2] = a1;
  return sub_23C8A4EEC((uint64_t)sub_23C8EF018, (uint64_t)v3);
}

Swift::Void __swiftcall Database.releaseMemory()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7DA548();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    sub_23C7E07C4();
    sqlite3_db_release_memory(*(sqlite3 **)(v0 + 16));
    v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache);
    sub_23C7E6180();
    swift_bridgeObjectRelease();
    *v1 = 0;
    sub_23C7E79A8(&qword_25430D7E8);
    sub_23C910DD0();
    swift_endAccess();
    sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
    sub_23C8EF5C4();
    sub_23C8EF5BC();
    v2 = sub_23C7DFADC();
    swift_bridgeObjectRelease();
    sub_23C7EBCE4(v0, v2);
    sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
    sub_23C8EF5C4();
    v3 = sub_23C7DFADC();
    swift_bridgeObjectRelease();
    sub_23C7EBCE4(v0, v3);
  }
  else
  {
    sub_23C7DC484();
    sub_23C7E947C();
    __break(1u);
  }
}

uint64_t sub_23C8E8E2C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3)
{
  swift_retain();
  return sub_23C8E8734(1, a1, a2, a3, a1);
}

void sub_23C8E8E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1) & 1) != 0)
    goto LABEL_7;
  v2 = OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth);
  if (!v3)
  {
    sub_23C7E1218();
    sub_23C8EF47C();
    v8 = sub_23C7DF68C(v6, v7);
    if (v1)
      goto LABEL_7;
    sub_23C8EF2BC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
    sub_23C7DFA18();
    v3 = *(_QWORD *)(v0 + v2);
  }
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (!v4)
  {
    *(_QWORD *)(v0 + v2) = v5;
LABEL_7:
    sub_23C7DF2C8();
    return;
  }
  __break(1u);
}

void sub_23C8E8F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth) = v4;
      if (!v4)
      {
        v5 = sub_23C7E1218();
        v7 = sub_23C7DF68C(v5, v6);
        if (!v1)
        {
          sub_23C8EF2BC(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
          sub_23C7DFA18();
        }
      }
    }
  }
}

const char *Database.lastErrorMessage.getter()
{
  uint64_t v0;
  const char *result;

  sub_23C7E07C4();
  result = sqlite3_errmsg(*(sqlite3 **)(v0 + 16));
  if (result)
    return (const char *)sub_23C910F74();
  __break(1u);
  return result;
}

uint64_t Database.ForeignKeyAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C8E9004 + 4 * byte_23C91AF49[*v0]))(0x45444143534143, 0xE700000000000000);
}

uint64_t sub_23C8E9004()
{
  return 0x5443495254534552;
}

uint64_t sub_23C8E901C()
{
  return 0x4C4C554E20544553;
}

uint64_t sub_23C8E9034()
{
  return 0x4146454420544553;
}

uint64_t sub_23C8E9054(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[2] = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return sub_23C8E8C98((uint64_t)sub_23C8EEFF4, (uint64_t)v7);
}

void sub_23C8E908C(uint64_t a1, int a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  sqlite3 *v11;
  sqlite3_backup *v12;
  sqlite3_backup *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  sub_23C7E07C4();
  v11 = *(sqlite3 **)(a1 + 16);
  sub_23C7E07C4();
  v12 = sqlite3_backup_init(v11, "main", *(sqlite3 **)(v5 + 16), "main");
  if (v12)
  {
    v13 = v12;
    if (v12 == (sqlite3_backup *)1)
    {
      sub_23C7EF5D4();
      sub_23C7DB694();
      sub_23C7DB5A0();
      if (sqlite3_errstr(1))
      {
        v14 = sub_23C910F74();
        *(_DWORD *)v5 = 1;
        *(_QWORD *)(v5 + 8) = v14;
        *(_QWORD *)(v5 + 16) = v15;
        goto LABEL_21;
      }
      goto LABEL_31;
    }
    if (a3)
      a3();
    while (1)
    {
      v18 = sqlite3_backup_step(v13, a2);
      v19 = sqlite3_backup_pagecount(v13);
      v20 = sqlite3_backup_remaining(v13);
      if (v18)
        break;
      if (a5)
      {
        v24 = (int)v20;
        v25 = v19;
        v26 = 0;
        sub_23C8EF324(v20);
        if (v6)
          goto LABEL_26;
      }
    }
    if (v18 != 101)
    {
      v22 = a1;
      Database.lastErrorMessage.getter();
      sub_23C8EF2B0();
      sub_23C7DB694();
      sub_23C7DB5A0();
      if (!a5)
      {
        if (!sqlite3_errstr(v18))
          goto LABEL_33;
        a1 = sub_23C910F74();
        a5 = v23;
      }
      *(_DWORD *)v22 = v18;
      *(_QWORD *)(v22 + 8) = a1;
      *(_QWORD *)(v22 + 16) = a5;
      sub_23C8EF214();
LABEL_26:
      sqlite3_backup_finish(v13);
      goto LABEL_27;
    }
    if (a5)
    {
      v24 = (int)v20;
      v25 = v19;
      v26 = 1;
      sub_23C8EF324(v20);
      if (v6)

    }
    v21 = sqlite3_backup_finish(v13);
    if (!v21)
    {
      Database.clearSchemaCache()();
      return;
    }
    v16 = v21;
    v5 = a1;
    Database.lastErrorMessage.getter();
    sub_23C8EF2B0();
    sub_23C7DB694();
    sub_23C7DB5A0();
    if (a5)
      goto LABEL_20;
    if (!sqlite3_errstr(v16))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      return;
    }
    goto LABEL_7;
  }
  v5 = a1;
  Database.lastErrorCode.getter((int *)&v24);
  v16 = v24;
  Database.lastErrorMessage.getter();
  sub_23C8EF2B0();
  sub_23C7DB694();
  sub_23C7DB5A0();
  if (!a5)
  {
    if (!sqlite3_errstr(v16))
      goto LABEL_32;
LABEL_7:
    a1 = sub_23C910F74();
    a5 = v17;
  }
LABEL_20:
  *(_DWORD *)v5 = v16;
  *(_QWORD *)(v5 + 8) = a1;
  *(_QWORD *)(v5 + 16) = a5;
LABEL_21:
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_BYTE *)(v5 + 56) = 0;
LABEL_27:
  swift_willThrow();
}

uint64_t sub_23C8E9304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (**v8)(void);

  sub_23C8EF400();
  sub_23C8EA02C();
  v2 = sub_23C8EA1B0();
  result = sub_23C8EA220(v2, v3, v4, v5);
  if (!v0)
  {
    sub_23C8EA2B0();
    sub_23C8EA3F4();
    sub_23C8EA474();
    v7 = v1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1) & 1) == 0)
    {
      sub_23C7E2378(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___observationBroker, (void (*)(void))type metadata accessor for DatabaseObservationBroker, 57, sub_23C806314);
      sub_23C80738C();
      sub_23C7DFA18();
    }
    sub_23C8EF47C();
    sub_23C8EA4E4();
    sub_23C84984C(v1);
    sub_23C8EF47C();
    sub_23C8EA59C();
    result = sub_23C7E830C();
    v8 = (uint64_t (**)(void))(v7 + *(int *)(result + 84));
    if (*v8)
      return (*v8)();
  }
  return result;
}

void sub_23C8E93EC()
{
  uint64_t v0;
  sqlite3 *v1;
  uint64_t v2;
  void (*v3)(sqlite3 *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(int *, unint64_t, unint64_t);
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;

  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(v0) & 1) == 0)
    goto LABEL_13;
  sub_23C7E6180();
  v1 = *(sqlite3 **)(v0 + 16);
  if (!v1)
    return;
  v23 = (_QWORD *)(v0 + 16);
  v2 = v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration;
  v21 = type metadata accessor for Configuration();
  v22 = v2;
  v3 = *(void (**)(sqlite3 *))(v2 + *(int *)(v21 + 88));
  if (v3)
    v3(v1);
  v4 = sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
  sub_23C8EF5BC();
  v5 = sub_23C7E6B40();
  swift_bridgeObjectRelease();
  sub_23C7E02DC(v4, v5, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
  v6 = sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
  v7 = sub_23C7E6B40();
  swift_bridgeObjectRelease();
  sub_23C7E02DC(v6, v7, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
  v8 = sqlite3_close_v2(v1);
  if ((_DWORD)v8)
  {
    v16 = v8;
    v8 = sub_23C7E07C4();
    v17 = (void (*)(int *, unint64_t, unint64_t))off_256BCDBF8;
    if (off_256BCDBF8)
    {
      swift_retain();
      if (sqlite3_errmsg(v1))
      {
        sub_23C910F74();
        v24 = v16;
        sub_23C911634();
        swift_bridgeObjectRelease();
        sub_23C8EF58C();
        swift_bridgeObjectRelease();
        v17(&v24, 0xD00000000000001ALL, 0x800000023C920660);
        sub_23C8EF4C8((uint64_t)v17);
        v8 = sub_23C7DB624();
        goto LABEL_9;
      }
      __break(1u);
LABEL_13:
      sub_23C7DC484();
      sub_23C9117B4();
      __break(1u);
      return;
    }
  }
LABEL_9:
  sub_23C8EF2D0(v8, v9, v10, v11, v12, v13, v14, v15, v19, v20, v21, v22, v23);
  if (v18)
    v18();
}

uint64_t sub_23C8E9654()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7DC47C();
  v1 = sub_23C7DB634();
  sub_23C801518(v1, v0);
  return swift_release();
}

void sub_23C8E96A0()
{
  qword_254310430 = -1;
}

uint64_t Database.sqliteConnection.getter()
{
  uint64_t v0;

  sub_23C7E07C4();
  return *(_QWORD *)(v0 + 16);
}

void Database.sqliteConnection.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23C7E6180();
  *(_QWORD *)(v1 + 16) = a1;
  sub_23C7DF890();
}

void Database.sqliteConnection.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t sub_23C8E973C()
{
  uint64_t (*v0)(uint64_t, int, uint64_t);

  swift_beginAccess();
  if (off_256BCDBF8)
    v0 = sub_23C8E9840;
  else
    v0 = 0;
  return sub_23C8EEFD0((uint64_t)v0);
}

uint64_t sub_23C8E9794(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  void (*v6)(int *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = swift_beginAccess();
  v6 = (void (*)(int *, uint64_t, uint64_t))off_256BCDBF8;
  if (off_256BCDBF8)
  {
    if (a3)
    {
      swift_retain();
      v7 = sub_23C910F74();
      v9 = a2;
      v6(&v9, v7, v8);
      sub_23C7F1754((uint64_t)v6);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void static Database.logError.getter()
{
  sub_23C7E07C4();
  sub_23C7F5610((uint64_t)off_256BCDBF8);
  sub_23C7DF2C8();
}

uint64_t static Database.logError.setter(void *a1, uint64_t a2)
{
  void *v4;

  sub_23C7E6180();
  v4 = off_256BCDBF8;
  off_256BCDBF8 = a1;
  qword_256BCDC00 = a2;
  sub_23C7F5610((uint64_t)a1);
  sub_23C8EF4C8((uint64_t)v4);
  sub_23C8E973C();
  return sub_23C7F1754((uint64_t)a1);
}

void static Database.logError.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_23C7E6180();
  sub_23C7DB390();
}

void sub_23C8E9944(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    sub_23C8E973C();
  sub_23C7DB390();
}

uint64_t Database.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C84AB34(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, a1);
}

void Database.description.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void Database.debugDescription.getter()
{
  swift_bridgeObjectRetain();
  sub_23C8EF58C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  sub_23C7DF2C8();
}

void Database.totalChangesCount.getter()
{
  uint64_t v0;

  sub_23C7DA548();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    sub_23C7E07C4();
    sqlite3_total_changes(*(sqlite3 **)(v0 + 16));
    sub_23C7E070C();
  }
  else
  {
    sub_23C7DC484();
    sub_23C7E947C();
    __break(1u);
  }
}

void Database.lastErrorCode.getter(int *a1@<X8>)
{
  uint64_t v1;

  sub_23C7E07C4();
  *a1 = sqlite3_errcode(*(sqlite3 **)(v1 + 16));
  sub_23C7DF890();
}

uint64_t sub_23C8E9AD0()
{
  sub_23C7DC47C();
  sub_23C8E7CE4();
  return swift_release();
}

uint64_t sub_23C8E9B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;

  *(_QWORD *)(v5 + 16) = 0;
  v10 = v5 + OBJC_IVAR____TtC12GRDBInternal8Database__lastSchemaVersion;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = (_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache);
  sub_23C8EF0DC();
  v12 = sub_23C910DAC();
  *v11 = 0;
  v11[1] = v12;
  sub_23C8EF35C(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
  sub_23C8EF35C(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___authorizer) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___observationBroker) = 0;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion) = 0;
  v13 = OBJC_IVAR____TtC12GRDBInternal8Database_selectedRegion;
  sub_23C7E3084();
  *(_QWORD *)(v5 + v13) = sub_23C910DAC();
  *(_BYTE *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 0;
  v14 = OBJC_IVAR____TtC12GRDBInternal8Database__isSuspended;
  sub_23C7E79A8(&qword_25430DB88);
  swift_allocObject();
  sub_23C8CB694(0);
  *(_QWORD *)(v5 + v14) = v15;
  sub_23C8EF35C(OBJC_IVAR____TtC12GRDBInternal8Database_journalModeCache);
  sub_23C8EF35C(OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback);
  sub_23C8EF35C(OBJC_IVAR____TtC12GRDBInternal8Database_trace);
  v16 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_functions) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_collations) = v16;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth) = 0;
  if (*(_BYTE *)(a5 + 1))
    v17 = 1;
  else
    v17 = 6;
  v18 = sub_23C7E830C();
  v19 = sub_23C8E9E08(a1, a2, v17 | (*(unsigned __int8 *)(a5 + *(int *)(v18 + 80)) << 15));
  if (v6)
  {
    swift_bridgeObjectRelease();
    sub_23C7DBCD0();
    sub_23C84AB78(a5);
    swift_bridgeObjectRelease();
    sub_23C7DB398();
    sub_23C8EF4D0(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
    sub_23C8EF4D0(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
    sub_23C7DFE98();
    sub_23C7DFE98();
    sub_23C8EF4B4();
    sub_23C7DFE98();
    swift_bridgeObjectRelease();
    sub_23C8EF4DC(OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback);
    sub_23C8EF4DC(OBJC_IVAR____TtC12GRDBInternal8Database_trace);
    sub_23C8EF4B4();
    sub_23C8EF4B4();
    sub_23C7DF8B0();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v20 = v19;
    sub_23C7DBCD0();
    sub_23C7E6180();
    *(_QWORD *)(v5 + 16) = v20;
    v21 = (_QWORD *)(v5 + OBJC_IVAR____TtC12GRDBInternal8Database_description);
    *v21 = a3;
    v21[1] = a4;
    sub_23C8EF118(a5, v5 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration);
  }
  return v5;
}

const char *sub_23C8E9E08(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  const char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3 *v12[2];

  v12[1] = *(sqlite3 **)MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v4 = sub_23C910EFC();
  v5 = sqlite3_open_v2((const char *)(v4 + 32), v12, a3, 0);
  swift_release();
  result = (const char *)v12[0];
  if (v5)
  {
    sqlite3_close(v12[0]);
    sub_23C7EF5D4();
    swift_allocError();
    v8 = v7;
    result = sqlite3_errstr(v5);
    if (result)
    {
LABEL_3:
      v9 = sub_23C910F74();
      *(_DWORD *)v8 = v5;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_BYTE *)(v8 + 56) = 0;
      return (const char *)swift_willThrow();
    }
    __break(1u);
  }
  else if (!v12[0])
  {
    sub_23C7EF5D4();
    swift_allocError();
    v8 = v11;
    v5 = 2;
    if (!sqlite3_errstr(2))
      __break(1u);
    goto LABEL_3;
  }
  return result;
}

void Database.deinit()
{
  uint64_t v0;

  sub_23C84AB78(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration);
  sub_23C8EF53C();
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  sub_23C8EF548(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
  sub_23C8EF548(OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
  sub_23C8EF4A0();
  sub_23C8EF4A0();
  sub_23C7EF7E8();
  sub_23C8EF4A0();
  sub_23C8EF53C();
  sub_23C7EFAFC(OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback);
  sub_23C7EFAFC(OBJC_IVAR____TtC12GRDBInternal8Database_trace);
  sub_23C7EF7E8();
  sub_23C7EF7E8();
  sub_23C7DB390();
}

uint64_t Database.__deallocating_deinit()
{
  Database.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8EA02C()
{
  sqlite3 **v0;
  char *v1;
  int v2;
  double *v3;
  uint64_t *v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  int v11;

  v1 = (char *)v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration;
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1) == 1
    && (v2 = v1[88], v2 != 255))
  {
    v3 = (double *)(v1 + 72);
    v4 = (uint64_t *)(v1 + 80);
  }
  else
  {
    v3 = (double *)(v1 + 48);
    v4 = (uint64_t *)(v1 + 56);
    v2 = v1[64];
  }
  v5 = *v3;
  if (!v2)
  {
    v10 = v5 * 1000.0;
    if ((~COERCE__INT64(v5 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v10 > -2147483650.0)
      {
        if (v10 < 2147483650.0)
        {
          v11 = (int)v10;
          swift_beginAccess();
          return sqlite3_busy_timeout(v0[2], v11);
        }
LABEL_15:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v2 == 1)
  {
    v6 = *v4;
    v7 = (char *)v0 + OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback;
    v8 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback);
    *(double *)v7 = v5;
    *((_QWORD *)v7 + 1) = v6;
    sub_23C849D78(*(uint64_t *)&v5, v6, 1);
    sub_23C849D78(*(uint64_t *)&v5, v6, 1);
    swift_retain();
    sub_23C7F1754(v8);
    swift_beginAccess();
    sqlite3_busy_handler(v0[2], (int (__cdecl *)(void *, int))sub_23C8EA6B4, v0);
    sub_23C849D90(*(uint64_t *)&v5, v6, 1);
    return sub_23C849D90(*(uint64_t *)&v5, v6, 1);
  }
  return result;
}

uint64_t sub_23C8EA1B0()
{
  uint64_t v0;
  sqlite3 **v1;

  v1 = (sqlite3 **)(v0 + 16);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 24) == 1)
  {
    swift_beginAccess();
    return sub_23C8EF098(*v1);
  }
  else
  {
    swift_beginAccess();
    return sub_23C8EF058(*v1);
  }
}

uint64_t sub_23C8EA220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD v8[2];

  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration) == 1)
  {
    v8[0] = MEMORY[0x24BEE4AF8];
    v8[1] = MEMORY[0x24BEE4B00];
    v5._object = (void *)0x800000023C91D410;
    v6 = v8;
    v5._countAndFlagsBits = 0xD000000000000018;
    Database.execute(sql:arguments:)(v5, *(GRDBInternal::StatementArguments *)(&a4 - 1));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23C8EA2B0()
{
  if (qword_25430DC20 != -1)
    swift_once();
  Database.add(function:)();
  if (qword_25430D958 != -1)
    swift_once();
  Database.add(function:)();
  if (qword_25430DA78 != -1)
    swift_once();
  Database.add(function:)();
  if (qword_25430DA60 != -1)
    swift_once();
  Database.add(function:)();
  if (qword_25430DA40 != -1)
    swift_once();
  Database.add(function:)();
  if (qword_25430DA50 != -1)
    swift_once();
  Database.add(function:)();
}

uint64_t sub_23C8EA3F4()
{
  type metadata accessor for DatabaseCollation();
  swift_initStaticObject();
  Database.add(collation:)();
  swift_initStaticObject();
  Database.add(collation:)();
  swift_initStaticObject();
  Database.add(collation:)();
  swift_initStaticObject();
  Database.add(collation:)();
  swift_initStaticObject();
  return Database.add(collation:)();
}

uint64_t sub_23C8EA474()
{
  uint64_t v0;
  void *v1;
  void *v2;

  sub_23C7E2378(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___authorizer, (void (*)(void))type metadata accessor for StatementAuthorizer, 66, sub_23C847174);
  v2 = v1;
  swift_release();
  swift_beginAccess();
  return sqlite3_set_authorizer(*(sqlite3 **)(v0 + 16), (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))sub_23C7EF610, v2);
}

const char *sub_23C8EA4E4()
{
  uint64_t v0;
  sqlite3 **v1;
  const char *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (sqlite3 **)(v0 + 16);
  swift_beginAccess();
  result = (const char *)sqlite3_extended_result_codes(*(sqlite3 **)(v0 + 16), 1);
  if ((_DWORD)result)
  {
    v3 = (int)result;
    result = sqlite3_errmsg(*v1);
    if (result)
    {
      v4 = sub_23C910F74();
      v6 = v5;
      sub_23C7EF5D4();
      swift_allocError();
      *(_DWORD *)v7 = v3;
      *(_QWORD *)(v7 + 8) = v4;
      *(_QWORD *)(v7 + 16) = v6;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_BYTE *)(v7 + 56) = 0;
      return (const char *)swift_willThrow();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_23C8EA59C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2[2];

  result = sub_23C8C8C84(0xD000000000000023, 0x800000023C920740, 0);
  if (!v0)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_23C8DFF18(v2);
    swift_release();
    sub_23C8EFE00();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8EA630(uint64_t result, int a2)
{
  uint64_t (*v3)(_QWORD);
  char v4;

  if (result)
  {
    v3 = *(uint64_t (**)(_QWORD))(result + OBJC_IVAR____TtC12GRDBInternal8Database_busyCallback);
    result = swift_retain();
    if (v3)
    {
      swift_retain();
      v4 = v3(a2);
      sub_23C7F1754((uint64_t)v3);
      swift_release();
      return v4 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Database.add(function:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8EF4E8();
  sub_23C7E6180();
  v1 = swift_retain();
  sub_23C8EDA38(v1, (uint64_t (*)(uint64_t, uint64_t))sub_23C8EEA10, (uint64_t (*)(uint64_t, uint64_t))sub_23C8FBA14);
  sub_23C8EF1F8();
  sub_23C7DFA18();
  sub_23C90431C(v0);
  sub_23C7DF304();
}

uint64_t Database.add(collation:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  sqlite3 *v3;
  uint64_t v4;
  int collation_v2;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  sub_23C8EF4E8();
  sub_23C7E6180();
  v2 = swift_retain();
  sub_23C8EDA38(v2, (uint64_t (*)(uint64_t, uint64_t))sub_23C8EECA8, (uint64_t (*)(uint64_t, uint64_t))sub_23C8FBA34);
  sub_23C8EF1F8();
  sub_23C7DFA18();
  sub_23C7E07C4();
  v3 = *(sqlite3 **)(v0 + 16);
  v4 = sub_23C910EFC();
  collation_v2 = sqlite3_create_collation_v2(v3, (const char *)(v4 + 32), 1, v1, (int (__cdecl *)(void *, int, const void *, int, const void *))sub_23C8EA9F8, 0);
  result = swift_release();
  if (collation_v2)
  {
    v7 = (uint64_t)Database.lastErrorMessage.getter();
    if (!v8)
    {
      if (!sqlite3_errstr(collation_v2))
        __break(1u);
      v7 = sub_23C910F74();
    }
    *(_QWORD *)&v10 = v7;
    *((_QWORD *)&v10 + 1) = v8;
    swift_bridgeObjectRetain();
    sub_23C7E76BC(0);
    sub_23C7EF5D4();
    if (sub_23C9119E8())
    {
      swift_bridgeObjectRelease();
      sub_23C7DB624();
      sub_23C7E13C4(0);
    }
    else
    {
      swift_allocError();
      *(_DWORD *)v9 = collation_v2;
      *(_OWORD *)(v9 + 8) = v10;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_BYTE *)(v9 + 56) = 0;
    }
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t Database.maximumStatementArgumentCount.getter()
{
  uint64_t v0;

  sub_23C7E07C4();
  return sqlite3_limit(*(sqlite3 **)(v0 + 16), 9, -1);
}

void Database.remove(function:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8EF4E8();
  sub_23C7E6180();
  sub_23C8ECDD4(v1);
  sub_23C8EF1F8();
  sub_23C7DFA18();
  sub_23C9044B0(v0);
  sub_23C7DF304();
}

uint64_t sub_23C8EA960(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (result)
  {
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 32);
    swift_retain();
    v10 = v9(a2, a3, a4, a5);
    result = swift_release();
    if (v10 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v10 <= 0x7FFFFFFF)
    {
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void Database.remove(collation:)()
{
  uint64_t v0;
  sqlite3 *v1;
  uint64_t v2;

  sub_23C8EF4E8();
  sub_23C7E6180();
  sub_23C8ECF7C();
  sub_23C8EF1F8();
  sub_23C7DFA18();
  sub_23C7E07C4();
  v1 = *(sqlite3 **)(v0 + 16);
  v2 = sub_23C910EFC();
  sqlite3_create_collation_v2(v1, (const char *)(v2 + 32), 1, 0, 0, 0);
  sub_23C7DFA18();
  sub_23C7DF304();
}

void sub_23C8EAA84(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_23C8E8E7C();
  if (!v1)
  {
    v3 = swift_retain();
    a1(&v4, v3);
    sub_23C8E8F18();
    swift_release();
  }
}

uint64_t sub_23C8EAB54(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (uint64_t *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_selectedRegion);
  swift_beginAccess();
  v9 = *a1;
  v11 = *v8;
  v12 = v9;
  swift_bridgeObjectRetain();
  DatabaseRegion.union(_:)(&v11, &v13);
  swift_bridgeObjectRelease();
  *a1 = v13;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion) = a3;
  if ((a3 & 1) != 0)
  {
    v11 = *v8;
    v12 = a4;
    DatabaseRegion.union(_:)(&v11, &v13);
    *v8 = v13;
  }
  else
  {
    *v8 = a4;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

void static Database.TracingOptions.statement.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

uint64_t Database.trace(options:_:)(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  sqlite3 **v3;
  sqlite3 **v4;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  sqlite3 *v10;
  int (__cdecl *v11)(unsigned int, void *, void *, void *);
  unsigned int v12;
  sqlite3 **v13;
  uint64_t result;

  v4 = v3;
  v7 = *a1;
  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    v8 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC12GRDBInternal8Database_trace);
    v9 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC12GRDBInternal8Database_trace);
    *v8 = a2;
    v8[1] = a3;
    sub_23C7F5610(a2);
    sub_23C8EF4C8(v9);
    if (v7 && a2)
    {
      sub_23C7E07C4();
      v10 = v4[2];
      v11 = (int (__cdecl *)(unsigned int, void *, void *, void *))sub_23C8EAE8C;
      v12 = v7;
      v13 = v4;
    }
    else
    {
      sub_23C7E07C4();
      v10 = v4[2];
      v12 = 0;
      v11 = 0;
      v13 = 0;
    }
    return sqlite3_trace_v2(v10, v12, v11, v13);
  }
  else
  {
    sub_23C7DC484();
    result = sub_23C7E947C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8EAD48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  if (a2)
  {
    v6 = result;
    swift_retain();
    sub_23C8EADAC(v6, a3, a4, MEMORY[0x24BEDE120]);
    swift_release();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8EADAC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  double v13;

  v5 = *(void (**)(uint64_t *))(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_trace);
  if (v5)
  {
    if ((_DWORD)result == 2)
    {
      if (a2 && a3)
      {
        v7 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
        v8 = (double)*a3 / 1000000000.0;
        v9 = a2;
        v10 = 0;
        v11 = a4;
        v12 = v7 | 0x8000000000000080;
        v13 = v8;
        goto LABEL_10;
      }
    }
    else if ((_DWORD)result == 1 && a2 && a3)
    {
      v6 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26) | 0x80;
      v9 = a2;
      v10 = a3;
      v11 = a4;
      v12 = v6;
      v13 = 0.0;
LABEL_10:
      swift_retain();
      v5(&v9);
      return sub_23C7F1754((uint64_t)v5);
    }
  }
  return result;
}

Swift::tuple_walFrameCount_Int_checkpointedFrameCount_Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkpoint(_:on:)(GRDBInternal::Database::CheckpointMode _, Swift::String_optional on)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  sqlite3 *v7;
  const char *v8;
  int v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::tuple_walFrameCount_Int_checkpointedFrameCount_Int result;
  int pnCkpt;
  int pnLog;
  uint64_t v19;

  sub_23C8EF400();
  v4 = v3;
  v19 = *MEMORY[0x24BDAC8D0];
  v6 = *v5;
  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(v2) & 1) == 0)
    goto LABEL_15;
  pnCkpt = -1;
  pnLog = -1;
  sub_23C7E07C4();
  v7 = *(sqlite3 **)(v2 + 16);
  if (v4)
    v8 = (const char *)(sub_23C910EFC() + 32);
  else
    v8 = 0;
  v9 = sqlite3_wal_checkpoint_v2(v7, v8, v6, &pnLog, &pnCkpt);
  swift_unknownObjectRelease();
  if (!v9)
    goto LABEL_9;
  if (v9 != 21)
  {
    v7 = (sqlite3 *)v2;
    v12 = (uint64_t)Database.lastErrorMessage.getter();
    v14 = v13;
    sub_23C7EF5D4();
    sub_23C7DB694();
    sub_23C7DB5A0();
    if (v14)
    {
LABEL_13:
      *(_DWORD *)v7 = v9;
      *((_QWORD *)v7 + 1) = v12;
      *((_QWORD *)v7 + 2) = v14;
      v10 = sub_23C8EF214();
      goto LABEL_16;
    }
    if (sqlite3_errstr(v9))
    {
LABEL_12:
      v12 = sub_23C910F74();
      v14 = v15;
      goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    sub_23C7DC484();
    v10 = sub_23C8EF4F4();
    __break(1u);
    goto LABEL_16;
  }
  sub_23C7EF5D4();
  sub_23C7DB694();
  sub_23C7DB5A0();
  if (sqlite3_errstr(21))
    goto LABEL_12;
  __break(1u);
LABEL_9:
  v11 = pnCkpt;
  v10 = pnLog;
LABEL_16:
  result.checkpointedFrameCount = v11;
  result.walFrameCount = v10;
  return result;
}

uint64_t Database.CheckpointMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_23C8EB048()
{
  uint64_t result;

  sub_23C7E1218();
  result = sub_23C910E6C();
  qword_256BCDC08 = result;
  return result;
}

id static Database.suspendNotification.getter()
{
  return sub_23C8EB0DC(&qword_256BCBA90, (id *)&qword_256BCDC08);
}

uint64_t sub_23C8EB08C()
{
  uint64_t result;

  result = sub_23C910E6C();
  qword_256BCDC10 = result;
  return result;
}

id static Database.resumeNotification.getter()
{
  return sub_23C8EB0DC(&qword_256BCBA98, (id *)&qword_256BCDC10);
}

id sub_23C8EB0DC(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

const char *sub_23C8EB114()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  uint64_t v4;
  const char *result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  sqlite3_stmt *ppStmt[2];

  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_journalModeCache);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_journalModeCache + 8))
  {
    v2 = *v1;
LABEL_5:
    swift_bridgeObjectRetain();
    return (const char *)v2;
  }
  ppStmt[0] = 0;
  swift_beginAccess();
  sqlite3_prepare_v2(*(sqlite3 **)(v0 + 16), "PRAGMA journal_mode", -1, ppStmt, 0);
  v3 = ppStmt[0];
  sqlite3_step(ppStmt[0]);
  if (sqlite3_column_text(v3, 0))
  {
    v2 = sub_23C910F80();
    *v1 = v2;
    v1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sqlite3_finalize(v3);
    goto LABEL_5;
  }
  Database.lastErrorCode.getter(&v12);
  v6 = v12;
  v7 = (uint64_t)Database.lastErrorMessage.getter();
  v9 = v8;
  sub_23C7EF5D4();
  swift_allocError();
  v2 = v10;
  if (v9)
  {
LABEL_10:
    *(_DWORD *)v2 = v6;
    *(_QWORD *)(v2 + 8) = v7;
    *(_QWORD *)(v2 + 16) = v9;
    *(_QWORD *)(v2 + 24) = 0xD000000000000013;
    *(_QWORD *)(v2 + 32) = 0x800000023C91EC60;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    swift_willThrow();
    sqlite3_finalize(ppStmt[0]);
    return (const char *)v2;
  }
  result = sqlite3_errstr(v6);
  if (result)
  {
    v7 = sub_23C910F74();
    v9 = v11;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8EB2BC()
{
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.rollback()()
{
  Swift::String v0;
  GRDBInternal::StatementArguments v1;

  if ((Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C8EF3B8();
    v0._countAndFlagsBits = 0xD000000000000014;
    Database.execute(sql:arguments:)(v0, v1);
    sub_23C7DB398();
    sub_23C7DB62C();
  }
  sub_23C7DF2C8();
}

uint64_t sub_23C8EB338()
{
  return Database.inSavepoint(_:)(sub_23C8EF16C);
}

uint64_t sub_23C8EB374(_BYTE *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  a2(&v7, a4);
  if (!v4)
    *a1 = 0;
  swift_release();
  return 0;
}

uint64_t sub_23C8EB3C8(_BYTE *a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4)
{
  swift_retain();
  LOBYTE(a3) = sub_23C8EB374(a1, a2, a3, a4);
  swift_release();
  return a3 & 1;
}

uint64_t Database.TransactionKind.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x54414944454D4D49;
  if (*v0 != 1)
    v1 = 0x564953554C435845;
  if (*v0)
    return v1;
  else
    return 0x4445525245464544;
}

void Database.backup(to:pagesPerStep:progress:)(uint64_t a1, int a2, uint64_t a3)
{
  sub_23C8E908C(a1, a2, 0, 0, a3);
}

void sub_23C8EB4B4()
{
  Database.description.getter();
}

void sub_23C8EB4D4()
{
  Database.debugDescription.getter();
}

GRDBInternal::Database::CheckpointMode_optional __swiftcall Database.CheckpointMode.init(rawValue:)(Swift::Int32 rawValue)
{
  char *v1;
  char v2;

  if (rawValue >= 4)
    v2 = 4;
  else
    v2 = rawValue;
  *v1 = v2;
  return (GRDBInternal::Database::CheckpointMode_optional)rawValue;
}

uint64_t sub_23C8EB508()
{
  return sub_23C8E7E0C();
}

uint64_t sub_23C8EB510()
{
  return sub_23C8E8094();
}

uint64_t sub_23C8EB518()
{
  return sub_23C8E8364();
}

GRDBInternal::Database::CheckpointMode_optional sub_23C8EB520(Swift::Int32 *a1)
{
  return Database.CheckpointMode.init(rawValue:)(*a1);
}

void sub_23C8EB528(_DWORD *a1@<X8>)
{
  *a1 = Database.CheckpointMode.rawValue.getter();
  sub_23C7DB390();
}

void static Database.CollationName.binary.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.CollationName.nocase.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.CollationName.rtrim.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

_QWORD *sub_23C8EB584@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C8EB69C(a1, (_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))Database.CollationName.init(rawValue:), a2);
}

uint64_t sub_23C8EB590(_QWORD *a1, _QWORD *a2)
{
  return sub_23C83B574(*a1, a1[1], *a2, a2[1]);
}

void Database.ColumnType.rawValue.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

GRDBInternal::Database::ColumnType __swiftcall Database.ColumnType.init(rawValue:)(GRDBInternal::Database::ColumnType rawValue)
{
  GRDBInternal::Database::ColumnType *v1;

  *v1 = rawValue;
  return rawValue;
}

void static Database.ColumnType.text.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.integer.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.double.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.real.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.numeric.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.BOOLean.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.blob.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.date.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.datetime.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

void static Database.ColumnType.any.getter(_QWORD *a1@<X8>)
{
  sub_23C7EE608(a1);
}

_QWORD *sub_23C8EB690@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C8EB69C(a1, (_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))Database.ColumnType.init(rawValue:), a2);
}

_QWORD *sub_23C8EB69C@<X0>(_QWORD *a1@<X0>, _QWORD *(*a2)(_QWORD *__return_ptr, _QWORD, _QWORD)@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = a2(v6, *a1, a1[1]);
  v5 = v6[1];
  *a3 = v6[0];
  a3[1] = v5;
  return result;
}

void sub_23C8EB6D8(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  Database.ColumnType.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
  sub_23C7DB390();
}

void sub_23C8EB6F8()
{
  sub_23C8E7E50();
}

uint64_t sub_23C8EB710()
{
  return sub_23C8E80B8();
}

void sub_23C8EB728()
{
  sub_23C8E83A4();
}

GRDBInternal::Database::ConflictResolution_optional __swiftcall Database.ConflictResolution.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  char v3;
  GRDBInternal::Database::ConflictResolution_optional result;

  sub_23C8EF40C();
  v2 = sub_23C8EF564();
  sub_23C7DB624();
  v3 = 5;
  if (v2 < 5)
    v3 = v2;
  *v1 = v3;
  sub_23C7DB3A0();
  return result;
}

void sub_23C8EB780()
{
  sub_23C8E7E90();
}

void sub_23C8EB7A0(uint64_t a1)
{
  char *v1;

  sub_23C8E7ED4(a1, *v1);
}

void sub_23C8EB7A8()
{
  sub_23C8E845C();
}

GRDBInternal::Database::ConflictResolution_optional sub_23C8EB7C8(Swift::String *a1)
{
  return Database.ConflictResolution.init(rawValue:)(*a1);
}

void sub_23C8EB7D4(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Database.ConflictResolution.rawValue.getter();
  a1[1] = v2;
  sub_23C7DB390();
}

GRDBInternal::Database::ForeignKeyAction_optional __swiftcall Database.ForeignKeyAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  char v3;
  GRDBInternal::Database::ForeignKeyAction_optional result;

  sub_23C8EF40C();
  v2 = sub_23C8EF564();
  sub_23C7DB624();
  v3 = 4;
  if (v2 < 4)
    v3 = v2;
  *v1 = v3;
  sub_23C7DB3A0();
  return result;
}

void sub_23C8EB834(char *a1)
{
  sub_23C839230(*a1);
}

void sub_23C8EB840()
{
  sub_23C8E7E90();
}

void sub_23C8EB860(uint64_t a1)
{
  char *v1;

  sub_23C8E7F70(a1, *v1);
}

void sub_23C8EB868()
{
  sub_23C8E845C();
}

GRDBInternal::Database::ForeignKeyAction_optional sub_23C8EB888(Swift::String *a1)
{
  return Database.ForeignKeyAction.init(rawValue:)(*a1);
}

void sub_23C8EB894(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Database.ForeignKeyAction.rawValue.getter();
  a1[1] = v2;
  sub_23C7DB390();
}

uint64_t Database.TracingOptions.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t Database.TracingOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Database.TracingOptions.profile.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

uint64_t sub_23C8EB8CC@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return Database.TracingOptions.init(rawValue:)(*a1, a2);
}

void sub_23C8EB8D4(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C8E85AC(a2, *a1);
}

void sub_23C8EB8EC(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C8E85EC(a2, *a1);
}

uint64_t sub_23C8EB904@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = Database.TracingOptions.init(rawValue:)(*a1, (_DWORD *)a2);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_23C8EB92C(_DWORD *a1@<X8>)
{
  *a1 = Database.TracingOptions.rawValue.getter();
  sub_23C7DB390();
}

void sub_23C8EB94C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_23C8E8514(a1, a2);
}

void Database.TraceEvent.Statement.sql.getter()
{
  sub_23C8EB99C();
  sub_23C7DF2C8();
}

void sub_23C8EB99C()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(char *)(v0 + 24) & 0x80000000) == 0)
    goto LABEL_8;
  if (!*(_QWORD *)(v0 + 8) && !sqlite3_sql(*(sqlite3_stmt **)v0))
  {
    __break(1u);
LABEL_8:
    sub_23C7DC484();
    sub_23C9117B4();
    __break(1u);
    return;
  }
  sub_23C910F74();
  if (qword_25430B2E0 != -1)
    swift_once();
  v1 = sub_23C7DF0A8();
  sub_23C805EE8(v1, (uint64_t)qword_254310410);
  sub_23C7EEE60();
  sub_23C911544();
  sub_23C7DB5A0();
  swift_bridgeObjectRelease();
  sub_23C7DF8B0();
  sub_23C7DF2C8();
}

void Database.TraceEvent.Statement.expandedSQL.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v0 + 24) < 0)
  {
    v1 = (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)v0);
    if (v1)
    {
      v2 = (void *)v1;
      sub_23C910F74();
      if (qword_25430B2E0 != -1)
        swift_once();
      v3 = sub_23C7DF0A8();
      sub_23C805EE8(v3, (uint64_t)qword_254310410);
      sub_23C7EEE60();
      sub_23C911544();
      sub_23C7DD194();
      sqlite3_free(v2);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_23C7DF2C8();
}

void Database.TraceEvent.Statement.description.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(char *)(v0 + 24);
  if (v1 < 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)v0);
      if (v2)
      {
        v3 = (void *)v2;
        sub_23C910F74();
        if (qword_25430B2E0 != -1)
          swift_once();
        v4 = sub_23C7DF0A8();
        sub_23C805EE8(v4, (uint64_t)qword_254310410);
        sub_23C7EEE60();
        sub_23C911544();
        sub_23C7DD194();
        sqlite3_free(v3);
        sub_23C7EF974();
      }
      else
      {
        sub_23C7EF974();
      }
    }
    else
    {
      sub_23C8EB99C();
      sub_23C7DB5A0();
    }
  }
  else
  {
    sub_23C8EDB30(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  }
  sub_23C7DF8B0();
  sub_23C7DB648();
}

uint64_t Database.TraceEvent.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C8EF468();
  if (v4 < 0)
  {
    sub_23C7E79A8(&qword_256BCD4B8);
    v6 = sub_23C8EF450();
    v7 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
    v8 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = v8;
    *(_QWORD *)(v6 + 32) = v3;
    sub_23C910E9C();
    sub_23C8EF444();
    if (v5 < 0)
    {
      if ((v4 & 1) != 0)
      {
        if (sub_23C8EF578())
        {
          sub_23C8EF378();
          if (qword_25430B2E0 != -1)
            swift_once();
          v10 = sub_23C7DF0A8();
          sub_23C7E585C(v10, (uint64_t)qword_254310410);
          sub_23C8EF25C();
          sub_23C7DD194();
          sub_23C7DA554();
          sub_23C8EF3D0();
        }
        else
        {
          sub_23C8EF27C();
        }
      }
      else
      {
        sub_23C8EF22C();
      }
    }
    else
    {
      sub_23C7E6F44();
    }
    sub_23C8EF56C();
    swift_bridgeObjectRelease();
  }
  else if (v5 < 0)
  {
    if ((v4 & 1) != 0)
    {
      if (sub_23C8EF578())
      {
        sub_23C8EF378();
        if (qword_25430B2E0 != -1)
          swift_once();
        v9 = sub_23C7DF0A8();
        sub_23C7E585C(v9, (uint64_t)qword_254310410);
        sub_23C8EF25C();
        sub_23C7DD194();
        sub_23C7DA554();
        sub_23C7DEB48();
      }
      else
      {
        sub_23C7DEB48();
      }
    }
    else
    {
      sub_23C8EF22C();
      sub_23C8EDB40(v0, v1, v2, v4, v3);
    }
  }
  else
  {
    sub_23C7E6F44();
  }
  return sub_23C7DF8B0();
}

void Database.TraceEvent.expandedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C8EF468();
  if (v4 < 0)
  {
    sub_23C7E79A8(&qword_256BCD4B8);
    v6 = sub_23C8EF450();
    v7 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
    v8 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = v8;
    *(_QWORD *)(v6 + 32) = v3;
    sub_23C7E6F44();
    sub_23C910E9C();
    sub_23C8EF444();
    if (v5 < 0)
    {
      if (sub_23C8EF578())
      {
        sub_23C8EF378();
        if (qword_25430B2E0 != -1)
          swift_once();
        v10 = sub_23C7DF0A8();
        sub_23C7E585C(v10, (uint64_t)qword_254310410);
        sub_23C8EF25C();
        sub_23C7DD194();
        sub_23C7DA554();
        sub_23C8EF3D0();
      }
      else
      {
        sub_23C8EF27C();
      }
    }
    sub_23C8EF56C();
    swift_bridgeObjectRelease();
  }
  else if (v5 < 0)
  {
    if (v2(v0))
    {
      sub_23C8EF378();
      if (qword_25430B2E0 != -1)
        swift_once();
      v9 = sub_23C7DF0A8();
      sub_23C7E585C(v9, (uint64_t)qword_254310410);
      sub_23C911544();
      swift_bridgeObjectRelease();
      sub_23C7DA554();
      sub_23C8EDB40(v0, v1, v2, v4, v3);
    }
    else
    {
      sub_23C8EDB40(v0, v1, v2, v4, v3);
    }
  }
  else
  {
    sub_23C8EDB30(v0, v1, (uint64_t)v2, v5);
  }
  sub_23C7DF8B0();
  sub_23C7DB648();
}

BOOL static Database.TransactionCompletion.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Database.TransactionCompletion.hash(into:)()
{
  sub_23C911BC8();
  sub_23C7DB390();
}

void Database.TransactionCompletion.hashValue.getter()
{
  sub_23C7ED1F0();
  sub_23C911BC8();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

BOOL sub_23C8EC0E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Database.TransactionCompletion.== infix(_:_:)(*a1, *a2);
}

void sub_23C8EC0F0()
{
  Database.TransactionCompletion.hashValue.getter();
}

void sub_23C8EC0F8()
{
  Database.TransactionCompletion.hash(into:)();
}

GRDBInternal::Database::TransactionKind_optional __swiftcall Database.TransactionKind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  char v3;
  GRDBInternal::Database::TransactionKind_optional result;

  sub_23C8EF40C();
  v2 = sub_23C8EF564();
  sub_23C7DB624();
  v3 = 3;
  if (v2 < 3)
    v3 = v2;
  *v1 = v3;
  sub_23C7DB3A0();
  return result;
}

void sub_23C8EC140()
{
  sub_23C911BC8();
  sub_23C7DB390();
}

void sub_23C8EC160()
{
  sub_23C7ED1F0();
  sub_23C911BC8();
  sub_23C7DA4F4();
  sub_23C7E63C0();
}

void sub_23C8EC190(char *a1, char *a2)
{
  sub_23C839368(*a1, *a2);
}

uint64_t sub_23C8EC19C()
{
  return sub_23C8E7EBC();
}

uint64_t sub_23C8EC1A4()
{
  return sub_23C8E8014();
}

uint64_t sub_23C8EC1AC()
{
  return sub_23C8E82C0();
}

GRDBInternal::Database::TransactionKind_optional sub_23C8EC1B4(Swift::String *a1)
{
  return Database.TransactionKind.init(rawValue:)(*a1);
}

void sub_23C8EC1C0(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Database.TransactionKind.rawValue.getter();
  a1[1] = v2;
  sub_23C7DB390();
}

void sub_23C8EC1E0()
{
  sub_23C8EC160();
}

void sub_23C8EC1E8()
{
  sub_23C8EC140();
}

uint64_t sub_23C8EC1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *v1;
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  DatabaseValue.hash(into:)();
  v3 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X8 }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
  return result;
}

uint64_t sub_23C8ECDD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v15;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    DatabaseFunction.hash(into:)();
    v7 = sub_23C911BF8();
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v9 = v7 & ~v8;
    if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      type metadata accessor for DatabaseFunction();
      v10 = *(_QWORD *)(v3 + 48);
      if (static DatabaseFunction.== infix(_:_:)(*(_QWORD *)(v10 + 8 * v9), a1))
      {
LABEL_12:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v13 = *v1;
        v15 = *v1;
        *v1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_23C8FF4E4();
          v13 = v15;
        }
        v6 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v9);
        sub_23C8ED6F0(v9);
        *v1 = v15;
        goto LABEL_15;
      }
      v11 = ~v8;
      while (1)
      {
        v9 = (v9 + 1) & v11;
        if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          break;
        if (static DatabaseFunction.== infix(_:_:)(*(_QWORD *)(v10 + 8 * v9), a1))
          goto LABEL_12;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_retain();
  v5 = sub_23C9115D4();
  swift_release();
  if ((v5 & 1) == 0)
    goto LABEL_16;
  v6 = sub_23C8ED158(v4, a1);
LABEL_15:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_23C8ECF7C()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v13;

  v1 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    sub_23C911BBC();
    sub_23C911BC8();
    v4 = sub_23C911BF8();
    v5 = -1 << *(_BYTE *)(v1 + 32);
    v6 = v4 & ~v5;
    if (((*(_QWORD *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return 0;
    type metadata accessor for DatabaseCollation();
    swift_bridgeObjectRetain();
    swift_retain();
    v7 = static DatabaseCollation.== infix(_:_:)();
    swift_release();
    if (v7)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v0;
      v13 = *v0;
      *v0 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_23C8FF4F0();
        v11 = v13;
      }
      v3 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v6);
      sub_23C8ED8A0(v6);
      *v0 = v13;
      goto LABEL_12;
    }
    v8 = ~v5;
    while (1)
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        break;
      swift_retain();
      v9 = static DatabaseCollation.== infix(_:_:)();
      swift_release();
      if (v9)
        goto LABEL_9;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v2 = sub_23C9115D4();
  swift_release();
  if ((v2 & 1) == 0)
    goto LABEL_13;
  v3 = sub_23C8ED2D0();
LABEL_12:
  swift_bridgeObjectRelease();
  return v3;
}

#error "23C8ED1A4: call analysis failed (funcsize=94)"

uint64_t sub_23C8ED2D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_23C9115B0();
  v3 = swift_unknownObjectRetain();
  sub_23C8FBA34(v3, v2, v4, v5, v6, v7, v8, v9, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31);
  v11 = v10;
  v30 = v10;
  sub_23C911BBC();
  sub_23C911BC8();
  v12 = sub_23C911BF8();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    type metadata accessor for DatabaseCollation();
    swift_retain();
    swift_retain();
    v15 = static DatabaseCollation.== infix(_:_:)();
    swift_release();
    if (!v15)
    {
      v16 = ~v13;
      do
      {
        v14 = (v14 + 1) & v16;
        if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          goto LABEL_10;
        swift_retain();
        v17 = static DatabaseCollation.== infix(_:_:)();
        swift_release();
      }
      while (!v17);
    }
    swift_release();
    v18 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v14);
    sub_23C8ED8A0(v14);
    if (static DatabaseCollation.== infix(_:_:)())
    {
      *v1 = v30;
      return v18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_23C8ED46C(unint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(*v1 + 32));
  if (((1 << v5) & *(_QWORD *)(v4 + 8 * (v5 >> 6))) != 0)
  {
    swift_retain();
    sub_23C911580();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 24 * v5 + 16);
      sub_23C911BBC();
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
    JUMPOUT(0x23C8ED6DCLL);
  }
  *(_QWORD *)(v3 + 16) = v9;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_23C8ED6F0(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_23C911580();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_23C911BBC();
        swift_retain();
        DatabaseFunction.hash(into:)();
        v10 = sub_23C911BF8();
        swift_release();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= (uint64_t)v11)
          {
LABEL_15:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (_QWORD *)(v14 + 8 * v2);
            v16 = (_QWORD *)(v14 + 8 * v6);
            v17 = v2 != v6 || v15 >= v16 + 1;
            v2 = v6;
            if (v17)
            {
              *v15 = *v16;
              v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= (uint64_t)v11)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_23C8ED8A0(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_23C911580();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_23C911BBC();
        sub_23C911BC8();
        v10 = sub_23C911BF8() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_15:
            v13 = *(_QWORD *)(v3 + 48);
            v14 = (_QWORD *)(v13 + 8 * v2);
            v15 = (_QWORD *)(v13 + 8 * v6);
            v16 = v2 != v6 || v14 >= v15 + 1;
            v2 = v6;
            if (v16)
            {
              *v14 = *v15;
              v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_23C8EDA38(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v5 = v3;
  v7 = *v3;
  if ((v7 & 0xC000000000000001) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v5;
    *v5 = 0x8000000000000000;
    v12 = a2(a1, isUniquelyReferenced_nonNull_native);
    sub_23C8EF5B0(v15);
    return v12;
  }
  if (v7 < 0)
    v9 = v7;
  else
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  sub_23C7DB3D4();
  v10 = sub_23C9115B0();
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v10, 1))
  {
    v14 = a3(v9, v10 + 1);
    v12 = a2(a1, 1);
    *v5 = v14;
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8EDB20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 0x80) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C8EDB30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 0x80) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_23C8EDB48()
{
  unint64_t result;

  result = qword_256BCDC18;
  if (!qword_256BCDC18)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.CheckpointMode, &type metadata for Database.CheckpointMode);
    atomic_store(result, (unint64_t *)&qword_256BCDC18);
  }
  return result;
}

unint64_t sub_23C8EDB88()
{
  unint64_t result;

  result = qword_256BCDC20;
  if (!qword_256BCDC20)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.CollationName, &type metadata for Database.CollationName);
    atomic_store(result, (unint64_t *)&qword_256BCDC20);
  }
  return result;
}

unint64_t sub_23C8EDBC8()
{
  unint64_t result;

  result = qword_256BCDC28;
  if (!qword_256BCDC28)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.ColumnType, &type metadata for Database.ColumnType);
    atomic_store(result, (unint64_t *)&qword_256BCDC28);
  }
  return result;
}

unint64_t sub_23C8EDC08()
{
  unint64_t result;

  result = qword_256BCDC30;
  if (!qword_256BCDC30)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.ConflictResolution, &type metadata for Database.ConflictResolution);
    atomic_store(result, (unint64_t *)&qword_256BCDC30);
  }
  return result;
}

unint64_t sub_23C8EDC48()
{
  unint64_t result;

  result = qword_256BCDC38;
  if (!qword_256BCDC38)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.ForeignKeyAction, &type metadata for Database.ForeignKeyAction);
    atomic_store(result, (unint64_t *)&qword_256BCDC38);
  }
  return result;
}

unint64_t sub_23C8EDC88()
{
  unint64_t result;

  result = qword_256BCDC40;
  if (!qword_256BCDC40)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TracingOptions, &type metadata for Database.TracingOptions);
    atomic_store(result, (unint64_t *)&qword_256BCDC40);
  }
  return result;
}

unint64_t sub_23C8EDCC8()
{
  unint64_t result;

  result = qword_256BCDC48;
  if (!qword_256BCDC48)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TracingOptions, &type metadata for Database.TracingOptions);
    atomic_store(result, (unint64_t *)&qword_256BCDC48);
  }
  return result;
}

unint64_t sub_23C8EDD08()
{
  unint64_t result;

  result = qword_256BCDC50;
  if (!qword_256BCDC50)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TracingOptions, &type metadata for Database.TracingOptions);
    atomic_store(result, (unint64_t *)&qword_256BCDC50);
  }
  return result;
}

unint64_t sub_23C8EDD48()
{
  unint64_t result;

  result = qword_256BCDC58;
  if (!qword_256BCDC58)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TracingOptions, &type metadata for Database.TracingOptions);
    atomic_store(result, (unint64_t *)&qword_256BCDC58);
  }
  return result;
}

unint64_t sub_23C8EDD88()
{
  unint64_t result;

  result = qword_256BCDC60;
  if (!qword_256BCDC60)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TransactionCompletion, &type metadata for Database.TransactionCompletion);
    atomic_store(result, (unint64_t *)&qword_256BCDC60);
  }
  return result;
}

unint64_t sub_23C8EDDC8()
{
  unint64_t result;

  result = qword_256BCDC68;
  if (!qword_256BCDC68)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TransactionKind, &type metadata for Database.TransactionKind);
    atomic_store(result, (unint64_t *)&qword_256BCDC68);
  }
  return result;
}

uint64_t sub_23C8EDE04()
{
  return type metadata accessor for Database();
}

uint64_t type metadata accessor for Database()
{
  uint64_t result;

  result = qword_25430D960;
  if (!qword_25430D960)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23C8EDE44()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Configuration();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for Database()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for Database.BusyMode(uint64_t a1)
{
  return sub_23C849D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12GRDBInternal8DatabaseC8BusyModeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C849D78(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Database.BusyMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C849D78(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C849D90(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Database.BusyMode(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C849D90(v4, v5, v6);
  return a1;
}

void type metadata accessor for Database.BusyMode()
{
  sub_23C7DFB90();
}

void type metadata accessor for Database.CheckpointMode()
{
  sub_23C7DFB90();
}

void type metadata accessor for Database.CollationName()
{
  sub_23C7DFB90();
}

void _s12GRDBInternal8DatabaseC13CollationNameVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23C7DB390();
}

void type metadata accessor for Database.ColumnType()
{
  sub_23C7DFB90();
}

uint64_t getEnumTagSinglePayload for Database.ConflictResolution(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Database.ConflictResolution(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23C8EE170 + 4 * byte_23C91AF52[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23C8EE1A4 + 4 * byte_23C91AF4D[v4]))();
}

uint64_t sub_23C8EE1A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE1AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8EE1B4);
  return result;
}

uint64_t sub_23C8EE1C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8EE1C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23C8EE1CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE1D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Database.ConflictResolution()
{
  sub_23C7DFB90();
}

uint64_t _s12GRDBInternal8DatabaseC16ForeignKeyActionOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return sub_23C8EF50C(-1);
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 4);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 4);
    }
    v4 = a1[1];
    if (a1[1])
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 4);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return sub_23C8EF50C(v8);
}

uint64_t _s12GRDBInternal8DatabaseC16ForeignKeyActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C8EE2BC + 4 * byte_23C91AF5C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C8EE2F0 + 4 * byte_23C91AF57[v4]))();
}

uint64_t sub_23C8EE2F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE2F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8EE300);
  return result;
}

uint64_t sub_23C8EE30C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8EE314);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C8EE318(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE320(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Database.ForeignKeyAction()
{
  sub_23C7DFB90();
}

void type metadata accessor for Database.TracingOptions()
{
  sub_23C7DFB90();
}

uint64_t destroy for Database.TraceEvent(_QWORD *a1)
{
  return sub_23C8EDB40(*a1, a1[1], a1[2], a1[3], a1[4]);
}

_QWORD *initializeWithCopy for Database.TraceEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_23C8EE344(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for Database.TraceEvent(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_23C8EE344(*a2, v4, v5, v6, v7);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  sub_23C8EDB40(v8, v9, v10, v11, v12);
  return a1;
}

_QWORD *assignWithTake for Database.TraceEvent(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  a1[4] = v3;
  sub_23C8EDB40(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Database.TraceEvent(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = (*(_QWORD *)(a1 + 24) >> 2) & 0xFFFFFFC0 | (*(_QWORD *)(a1 + 24) >> 1) & 0x3F;
      if (v2 > 0x80000000)
        v3 = ~v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Database.TraceEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (4 * -a2) & 0x3FFFFFF00 | (2 * (-a2 & 0x3FLL));
      *(_QWORD *)(result + 32) = 0;
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23C8EE518(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

uint64_t sub_23C8EE524(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_23C8EE534(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0x81 | (a2 << 63);
  return result;
}

void type metadata accessor for Database.TraceEvent()
{
  sub_23C7DFB90();
}

void type metadata accessor for Database.TraceEvent.Statement()
{
  sub_23C7DFB90();
}

uint64_t storeEnumTagSinglePayload for Database.TransactionCompletion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8EE5C4 + 4 * byte_23C91AF66[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8EE5F8 + 4 * byte_23C91AF61[v4]))();
}

uint64_t sub_23C8EE5F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE600(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8EE608);
  return result;
}

uint64_t sub_23C8EE614(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8EE61CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8EE620(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE628(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Database.TransactionCompletion()
{
  sub_23C7DFB90();
}

void type metadata accessor for Database.TransactionKind()
{
  sub_23C7DFB90();
}

uint64_t _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwxx_0(uint64_t a1)
{
  return sub_23C8EDB20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_23C7E9C60(a1, a2);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 16) = v5;
  *(_BYTE *)(v2 + 24) = v6;
  sub_23C7DF5B4();
}

void _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  sub_23C7E9C60(a1, a2);
  v7 = *(_QWORD *)v2;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 16) = v5;
  v10 = *(_BYTE *)(v2 + 24);
  *(_BYTE *)(v2 + 24) = v6;
  sub_23C8EDB20(v7, v8, v9, v10);
  sub_23C7DF5B4();
}

void _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_23C8EDB20(v5, v7, v6, v8);
  sub_23C7DB390();
}

uint64_t _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0x7F && *(_BYTE *)(a1 + 25))
      return sub_23C8EF50C(*(_DWORD *)a1 + 126);
    v3 = (*(_BYTE *)(a1 + 24) & 0x7E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x7F;
    if (v3 >= 0x7E)
      return sub_23C8EF50C(-1);
  }
  else
  {
    v3 = -1;
  }
  return sub_23C8EF50C(v3);
}

uint64_t _s12GRDBInternal8DatabaseC10TraceEventO9StatementVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_23C8EE7C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 7;
}

uint64_t sub_23C8EE7CC(uint64_t result)
{
  *(_BYTE *)(result + 24) &= ~0x80u;
  return result;
}

uint64_t sub_23C8EE7DC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 1 | (a2 << 7);
  return result;
}

void type metadata accessor for Database.TraceEvent.Statement.Impl()
{
  sub_23C7DFB90();
}

_QWORD *sub_23C8EE7FC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for Database.SchemaCache()
{
  sub_23C7DFB90();
}

uint64_t _s12GRDBInternal8DatabaseC15TransactionKindOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return sub_23C8EF50C(-1);
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 3);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 3);
    }
    v4 = a1[1];
    if (a1[1])
      return sub_23C8EF50C((*a1 | (v4 << 8)) - 3);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return sub_23C8EF50C(v8);
}

uint64_t _s12GRDBInternal8DatabaseC15TransactionKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C8EE934 + 4 * byte_23C91AF70[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C8EE968 + 4 * byte_23C91AF6B[v4]))();
}

uint64_t sub_23C8EE968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8EE978);
  return result;
}

uint64_t sub_23C8EE984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8EE98CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C8EE990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8EE998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Database.ThreadingMode()
{
  sub_23C7DFB90();
}

unint64_t sub_23C8EE9B4()
{
  unint64_t result;

  result = qword_256BCDC70;
  if (!qword_256BCDC70)
  {
    result = MEMORY[0x242626100](&unk_23C91B804, &unk_250D872D0);
    atomic_store(result, (unint64_t *)&qword_256BCDC70);
  }
  return result;
}

uint64_t sub_23C8EE9F0()
{
  return sub_23C8EB338();
}

#error "23C8EEB78: call analysis failed (funcsize=166)"

uint64_t sub_23C8EECA8(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v3 = v2;
  v6 = *v2;
  sub_23C911BBC();
  sub_23C911BC8();
  v7 = sub_23C911BF8();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    type metadata accessor for DatabaseCollation();
    swift_retain();
    v11 = static DatabaseCollation.== infix(_:_:)();
    swift_release();
    if (v11)
    {
      v12 = 0;
      v13 = 1;
    }
    else
    {
      v14 = ~v8;
      v9 = (v9 + 1) & v14;
      if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
      {
        v12 = 1;
        while (1)
        {
          swift_retain();
          v13 = static DatabaseCollation.== infix(_:_:)();
          swift_release();
          if (v13)
            break;
          v9 = (v9 + 1) & v14;
          if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
            goto LABEL_12;
        }
        v12 = 0;
      }
      else
      {
        v13 = 0;
        v12 = 1;
      }
    }
LABEL_12:
    v3 = v2;
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v15 = *(_QWORD *)(v6 + 16);
  v16 = v15 + v12;
  if (__OFADD__(v15, v12))
  {
    __break(1u);
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v6 + 24);
  if (v17 >= v16 && (a2 & 1) != 0)
  {
    if (!v13)
      goto LABEL_33;
LABEL_30:
    v25 = *(_QWORD *)(*v3 + 48);
    result = *(_QWORD *)(v25 + 8 * v9);
    *(_QWORD *)(v25 + 8 * v9) = a1;
    return result;
  }
  if ((a2 & 1) != 0)
  {
    sub_23C8FCD98();
    goto LABEL_24;
  }
  if (v17 < v16)
  {
    sub_23C90070C();
LABEL_24:
    v18 = *v3;
    sub_23C911BBC();
    sub_23C911BC8();
    v19 = sub_23C911BF8();
    v20 = -1 << *(_BYTE *)(v18 + 32);
    v9 = v19 & ~v20;
    if (((*(_QWORD *)(v18 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      v21 = v3;
      type metadata accessor for DatabaseCollation();
      swift_retain();
      v22 = static DatabaseCollation.== infix(_:_:)();
      swift_release();
      if (v22)
      {
LABEL_29:
        v3 = v21;
        if (v13)
          goto LABEL_30;
LABEL_38:
        type metadata accessor for DatabaseCollation();
        result = sub_23C911B44();
        __break(1u);
        return result;
      }
      v23 = ~v20;
      while (1)
      {
        v9 = (v9 + 1) & v23;
        if (((*(_QWORD *)(v18 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          break;
        swift_retain();
        v24 = static DatabaseCollation.== infix(_:_:)();
        swift_release();
        if (v24)
          goto LABEL_29;
      }
      v3 = v21;
    }
    if (!v13)
      goto LABEL_33;
    goto LABEL_38;
  }
  sub_23C8FF4F0();
  if (v13)
    goto LABEL_30;
LABEL_33:
  v27 = *v3;
  *(_QWORD *)(*v3 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v9) = a1;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = 0;
  *(_QWORD *)(v27 + 16) = v30;
  return result;
}

_BYTE *sub_23C8EEFA0(_BYTE *a1, char *a2)
{
  return sub_23C808D50(a1, *a2);
}

_BYTE *sub_23C8EEFB8(_BYTE *a1)
{
  uint64_t v1;

  return sub_23C8EEFA0(a1, *(char **)(v1 + 16));
}

uint64_t sub_23C8EEFD0(uint64_t a1)
{
  return sqlite3_config(16, a1, 0);
}

void sub_23C8EEFF4(uint64_t a1)
{
  uint64_t v1;

  sub_23C8D0040(a1, *(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24), *(void (**)(void))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23C8EF018(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8E8E2C(a1, *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C8EF030()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_23C8EF058(sqlite3 *a1)
{
  sqlite3_db_config(a1, 1014, 0, 0);
  return sqlite3_db_config(a1, 1013, 0, 0);
}

uint64_t sub_23C8EF098(sqlite3 *a1)
{
  sqlite3_db_config(a1, 1014, 1, 0);
  return sqlite3_db_config(a1, 1013, 1, 0);
}

unint64_t sub_23C8EF0DC()
{
  unint64_t result;

  result = qword_25430DAC8;
  if (!qword_25430DAC8)
  {
    result = MEMORY[0x242626100](&unk_23C915B9C, &unk_250D87620);
    atomic_store(result, (unint64_t *)&qword_25430DAC8);
  }
  return result;
}

uint64_t sub_23C8EF118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C8EF16C()
{
  return sub_23C7DF0C0();
}

uint64_t sub_23C8EF1D4()
{
  return sub_23C910F14();
}

uint64_t sub_23C8EF1F8()
{
  return swift_endAccess();
}

uint64_t sub_23C8EF214()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_BYTE *)(v0 + 56) = 0;
  return swift_willThrow();
}

void sub_23C8EF22C()
{
  sub_23C8EB99C();
}

void sub_23C8EF240(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  a13 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&a13);
}

void sub_23C8EF254()
{
  void *v0;

}

uint64_t sub_23C8EF25C()
{
  return sub_23C911544();
}

void sub_23C8EF268(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v5;

  v4 = (a3 - 32) | 0x8000000000000000;
  v5 = &a4;
  Database.execute(sql:arguments:)(*(Swift::String *)&a1, *(GRDBInternal::StatementArguments *)(&a2 - 1));
}

uint64_t sub_23C8EF27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C8EDB40(v0, v1, v2, v4, v3);
}

uint64_t sub_23C8EF2A8()
{
  return swift_willThrow();
}

unint64_t sub_23C8EF2B0()
{
  return sub_23C7EF5D4();
}

void sub_23C8EF2BC(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  a9 = 0;
  a10 = 0;
  v10 = &a9;
  Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&a2 - 1));
}

void sub_23C8EF2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  *a13 = 0;
}

uint64_t sub_23C8EF2EC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 1);
}

uint64_t sub_23C8EF2FC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 0);
}

uint64_t sub_23C8EF30C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E56A4(v0, v1, 2);
}

uint64_t sub_23C8EF31C()
{
  return swift_willThrow();
}

uint64_t sub_23C8EF324(uint64_t a1, ...)
{
  uint64_t (*v1)(char *);
  va_list va;

  va_start(va, a1);
  return v1(va);
}

uint64_t sub_23C8EF334@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  const void *v2;

  return memcmp(a1, v2, a2);
}

uint64_t sub_23C8EF344()
{
  return sub_23C911BBC();
}

void sub_23C8EF34C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  a13 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&a13);
}

void sub_23C8EF35C(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + a1);
  *v2 = 0;
  v2[1] = 0;
}

uint64_t sub_23C8EF368@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  const void *v2;

  return memcmp(a1, v2, a2);
}

uint64_t sub_23C8EF378()
{
  return sub_23C910F74();
}

uint64_t sub_23C8EF380()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E5640(v1, v2, 1);
  return v0;
}

void sub_23C8EF3A8()
{
  sub_23C7E2414();
}

void sub_23C8EF3C8()
{
  void *v0;

}

uint64_t sub_23C8EF3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C8EDB40(v0, v1, v2, v4, v3);
}

void sub_23C8EF3F8(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  Database.execute(sql:arguments:)(sql, arguments);
}

uint64_t sub_23C8EF438(const void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,size_t __n)
{
  uint64_t v33;

  return memcmp(a1, (const void *)(v33 - 224), __n);
}

uint64_t sub_23C8EF444()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8EF450()
{
  return swift_allocObject();
}

uint64_t sub_23C8EF45C(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __n128 a12)
{
  a12 = a1;
  return sub_23C880200((uint64_t)&a12);
}

uint64_t sub_23C8EF488(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return v1(va, v2);
}

uint64_t sub_23C8EF494()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_23C8EF4A0()
{
  return swift_release();
}

uint64_t sub_23C8EF4A8()
{
  return sub_23C911BE0();
}

uint64_t sub_23C8EF4B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8EF4C8(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C8EF4D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7E02B0(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_23C8EF4DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7F1754(*(_QWORD *)(v1 + a1));
}

uint64_t sub_23C8EF4F4()
{
  return sub_23C9117B4();
}

void sub_23C8EF500()
{
  sub_23C7E2414();
}

uint64_t sub_23C8EF50C@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

id sub_23C8EF514()
{
  void *v0;

  return v0;
}

unint64_t sub_23C8EF51C()
{
  return 0xD000000000000016;
}

void sub_23C8EF530()
{
  Database.rollback()();
}

uint64_t sub_23C8EF53C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8EF548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7E02B0(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

id sub_23C8EF554()
{
  void *v0;

  return v0;
}

id sub_23C8EF55C()
{
  void *v0;

  return v0;
}

uint64_t sub_23C8EF564()
{
  return sub_23C911814();
}

uint64_t sub_23C8EF56C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8EF578()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

uint64_t sub_23C8EF580()
{
  return swift_release_n();
}

uint64_t sub_23C8EF58C()
{
  return sub_23C910F5C();
}

void sub_23C8EF598(uint64_t a1@<X8>)
{
  int v1;
  char v2;

  *(_DWORD *)a1 = v1;
  *(_BYTE *)(a1 + 4) = v2;
}

void sub_23C8EF5A4(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t sub_23C8EF5B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8EF5BC()
{
  return type metadata accessor for Statement();
}

uint64_t sub_23C8EF5D0(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 224), v3, a3);
}

uint64_t sub_23C8EF5DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  char v5;

  result = sub_23C8F74D4(a2);
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 36) == v4)
      return result == 1 << *(_BYTE *)(a2 + 32);
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_23C8EF62C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72) == 0;
}

void Row.copy()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  sub_23C7E7E34(v0 + 2, v0[5]);
  sub_23C9029B8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 112));
  sub_23C7DB3A0();
}

void Row.subscript.getter()
{
  sub_23C8F4FDC();
}

{
  sub_23C8F56B8();
}

{
  sub_23C8F4254();
}

{
  sub_23C8F4254();
}

{
  sub_23C8F4FDC();
}

{
  sub_23C8F4C20();
}

{
  sub_23C8F4C20();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C902828();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
  Row.decode<A>(_:forKey:)(v8, v8, v9, v5, v3, v1);
  sub_23C7DC474();
  sub_23C7E0778();
}

{
  sub_23C8F4FDC();
}

{
  sub_23C8F56B8();
}

{
  sub_23C8F5C2C();
}

uint64_t sub_23C8EF680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    sub_23C7E649C();
    if ((v1 & 0x8000000000000000) == 0)
    {
      Row.subscript.getter();
      swift_bridgeObjectRetain();
      sub_23C7E56A4(v3, v4, v5);
      swift_bridgeObjectRelease();
      sub_23C7E5640(v3, v4, v5);
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x23C8EF918);
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C8EF92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_23C7FD314();
    v4 = a1 + 48;
    do
    {
      v5 = *(_QWORD *)(v4 - 8);
      v14 = *(_QWORD *)(v4 - 16);
      sub_23C7DB5E4(v4, (uint64_t)v17, (uint64_t *)&unk_25430D6B8);
      v6 = v18;
      if (v18)
      {
        v7 = v19;
        sub_23C7E7E34(v17, v18);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 24))(v15, v6, v7);
        v8 = v15[0];
        v9 = v15[1];
        v10 = v16;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
      }
      else
      {
        sub_23C7E7974((uint64_t)v17, (uint64_t *)&unk_25430D6B8);
        v8 = 0;
        v9 = 0;
        v10 = 4;
      }
      v2 = v20;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FD314();
        v2 = v20;
      }
      v11 = *(_QWORD *)(v2 + 16);
      if (v11 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD314();
        v2 = v20;
      }
      *(_QWORD *)(v2 + 16) = v11 + 1;
      v12 = v2 + 40 * v11;
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v5;
      *(_QWORD *)(v12 + 48) = v8;
      *(_QWORD *)(v12 + 56) = v9;
      *(_BYTE *)(v12 + 64) = v10;
      v4 += 56;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8EFD0C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static Row.fetchAll<A>(_:_:));
}

Swift::Int_optional __swiftcall Row.index(forColumn:)(Swift::String forColumn)
{
  Swift::Int v1;
  char v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v1 = sub_23C7DBC68(forColumn._countAndFlagsBits, (uint64_t)forColumn._object);
  v3 = v2 & 1;
  result.value = v1;
  result.is_nil = v3;
  return result;
}

void Row.startIndex.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Row.columnNames.getter()
{
  return swift_retain();
}

uint64_t Row.description.getter()
{
  uint64_t v0;

  sub_23C8EF680(v0);
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7E12BC((uint64_t)&qword_25430DB98);
  sub_23C910E3C();
  sub_23C7DB624();
  sub_23C7DFDFC();
  sub_23C910F5C();
  sub_23C7DB62C();
  sub_23C7DF858();
  sub_23C910F5C();
  sub_23C7DB624();
  return 91;
}

uint64_t sub_23C8EFC18(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_retain();
  a3(v6, a1, &v8);
  swift_release();
  if (v3)
    swift_bridgeObjectRelease();
  return sub_23C7E7E20();
}

void Row.__allocating_init(_:)(uint64_t a1)
{
  sub_23C8F3064(a1, (void (*)(void))sub_23C7F79D4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51[32];
  _QWORD v52[4];
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v42 = a1;
  v39 = a1 + 64;
  sub_23C7DF3C0();
  v3 = v2 & v1;
  v40 = (unint64_t)(v4 + 63) >> 6;
  v41 = (char *)v56 + 8;
  v44 = (_OWORD *)(v5 + 40);
  v45 = 0;
  v37 = v40 - 1;
  v6 = MEMORY[0x24BEE4B00];
  v43 = MEMORY[0x24BEE4AD8] + 8;
  if ((v2 & v1) == 0)
    goto LABEL_4;
LABEL_2:
  sub_23C902FF8();
  v8 = v7 | (v45 << 6);
LABEL_3:
  sub_23C8E3394(*(_QWORD *)(v42 + 48) + 40 * v8, (uint64_t)&v54);
  sub_23C802224(*(_QWORD *)(v42 + 56) + 32 * v8, (uint64_t)v41);
  while (1)
  {
    sub_23C800FCC((uint64_t)&v54, (uint64_t)&v58, &qword_256BCDBF0);
    if (!*((_QWORD *)&v59 + 1))
    {
      swift_release();
      sub_23C7F79D4(v6);
      sub_23C7DB3DC();
      sub_23C9028B4();
      sub_23C7F8DD8();
      return;
    }
    sub_23C83B550(v44, v53);
    v54 = v58;
    v55 = v59;
    *(_QWORD *)&v56[0] = v60;
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_37;
    v13 = v48;
    sub_23C802224((uint64_t)v53, (uint64_t)v52);
    sub_23C802224((uint64_t)v52, (uint64_t)v51);
    sub_23C7E79A8(&qword_25430CEB8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v50 = 0;
      v48 = 0u;
      v49 = 0u;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v52);
      sub_23C7E7974((uint64_t)&v48, (uint64_t *)&unk_25430D6B8);
      sub_23C7DB398();
LABEL_37:
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v53);
      sub_23C7DB3DC();
      swift_release();
      return;
    }
    v46 = v3;
    sub_23C7DB5CC(&v48, (uint64_t)&v54);
    v14 = *((_QWORD *)&v55 + 1);
    v15 = *(_QWORD *)&v56[0];
    sub_23C7E7E34(&v54, *((uint64_t *)&v55 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v15 + 24))(&v48, v14, v15);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v52);
    v16 = v48;
    v17 = v49;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v54);
    *((_QWORD *)&v55 + 1) = &type metadata for DatabaseValue;
    *(_QWORD *)&v56[0] = &protocol witness table for DatabaseValue;
    v54 = v16;
    LOBYTE(v55) = v17;
    sub_23C800FCC((uint64_t)&v54, (uint64_t)&v48, (uint64_t *)&unk_25430D6B8);
    sub_23C7E56A4(v16, *((unint64_t *)&v16 + 1), v17);
    swift_isUniquelyReferenced_nonNull_native();
    v52[0] = v6;
    v18 = sub_23C7E94B8();
    if (__OFADD__(*(_QWORD *)(v6 + 16), (v19 & 1) == 0))
      break;
    v20 = v18;
    v21 = v19;
    sub_23C7E79A8(&qword_25430CEF8);
    v22 = sub_23C911778();
    if ((v22 & 1) != 0)
    {
      v22 = sub_23C7E94B8();
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_42;
      v20 = v22;
    }
    v6 = v52[0];
    if ((v21 & 1) != 0)
    {
      v30 = sub_23C8E3760(v22, v23, v24, v25, v26, v27, v28, v29, v37, v38, v39, v40, (uint64_t)v41, v42, v43, (uint64_t)v44, v45, v46, v48);
      sub_23C9019F8((uint64_t)v30, v31, (uint64_t *)&unk_25430D6B8);
    }
    else
    {
      *(_QWORD *)(v52[0] + 8 * (v20 >> 6) + 64) |= 1 << v20;
      *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v20) = v13;
      v32 = sub_23C8E3760(v22, v23, v24, v25, v26, v27, v28, v29, v37, v38, v39, v40, (uint64_t)v41, v42, v43, (uint64_t)v44, v45, v46, v48);
      sub_23C800FCC((uint64_t)v32, v33, (uint64_t *)&unk_25430D6B8);
      v34 = *(_QWORD *)(v6 + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
        goto LABEL_39;
      *(_QWORD *)(v6 + 16) = v36;
      sub_23C7DEF00();
    }
    sub_23C7E087C();
    swift_bridgeObjectRelease();
    sub_23C7E5640(v16, *((unint64_t *)&v16 + 1), v17);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v53);
    v3 = v47;
    if (v47)
      goto LABEL_2;
LABEL_4:
    if (__OFADD__(v45, 1))
      goto LABEL_40;
    if (v45 + 1 < v40)
    {
      sub_23C902FC8();
      if (v10)
        goto LABEL_7;
      v11 = v9 + 1;
      v45 = v9;
      if (v9 + 1 < v40)
      {
        v10 = *(_QWORD *)(v39 + 8 * v11);
        if (v10)
          goto LABEL_10;
        v45 = v9 + 1;
        if (v9 + 2 < v40)
        {
          v10 = *(_QWORD *)(v39 + 8 * (v9 + 2));
          if (v10)
          {
            v9 += 2;
            goto LABEL_7;
          }
          v11 = v9 + 3;
          v45 = v9 + 2;
          if (v9 + 3 < v40)
          {
            v10 = *(_QWORD *)(v39 + 8 * v11);
            if (!v10)
            {
              while (!__OFADD__(v11, 1))
              {
                if (v11 + 1 >= v40)
                {
                  v45 = v37;
                  goto LABEL_21;
                }
                sub_23C902FC8();
                v11 = v12 + 1;
                if (v10)
                  goto LABEL_7;
              }
              goto LABEL_41;
            }
LABEL_10:
            v9 = v11;
LABEL_7:
            v3 = (v10 - 1) & v10;
            v8 = __clz(__rbit64(v10)) + (v9 << 6);
            v45 = v9;
            goto LABEL_3;
          }
        }
      }
    }
LABEL_21:
    v3 = 0;
    v57 = 0;
    memset(v56, 0, sizeof(v56));
    v54 = 0u;
    v55 = 0u;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  sub_23C911B50();
  __break(1u);
}

uint64_t FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for Row();
  return static Row.fetchCursor<A>(_:_:)(a1, v2, a2);
}

uint64_t FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8EFD0C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static Row.fetchOne<A>(_:_:));
}

uint64_t FetchRequest<>.fetchSet(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8EFD0C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))static Row.fetchSet<A>(_:_:));
}

uint64_t sub_23C8EFD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for Row();
  return a4(a1, v4, a2, a3);
}

uint64_t sub_23C8EFD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7E6A30();
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    return 0;
  sub_23C7DC47C();
  sub_23C7EFAC4();
  sub_23C90280C();
  v2 = sub_23C8E1888(v3);
  v5 = v4;
  sub_23C7DF8F8();
  if (!v1 && v5 == 1)
    *(_BYTE *)(v0 + 24) = 1;
  return v2;
}

uint64_t sub_23C8EFE00()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v2 = (_BYTE *)(v0 + 24);
  v3 = 1;
  sub_23C7E6A30();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    sub_23C7DC47C();
    sub_23C7DF5CC();
    sub_23C90280C();
    sub_23C8E1958(v4);
    v6 = v5;
    sub_23C7DFE08();
    if (!v1)
    {
      if ((v6 & 1) != 0)
      {
        v3 = 1;
        *v2 = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_23C8EFE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;

  sub_23C7E9898();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    sub_23C7DC47C();
    sub_23C7E7764();
    sub_23C90280C();
    sub_23C8E1A00(v2);
    v4 = v3;
    sub_23C7DC4C4();
    if (!v1 && (v4 & 0x100) != 0)
      *(_BYTE *)(v0 + 24) = 1;
  }
  return sub_23C7E7E20();
}

uint64_t sub_23C8EFF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E6A30();
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    return 3;
  sub_23C7DC47C();
  sub_23C7E7764();
  sub_23C90280C();
  sub_23C8E1AE0(v3);
  v2 = v4;
  sub_23C7DC4C4();
  if (!v1 && v2 == 3)
  {
    *(_BYTE *)(v0 + 24) = 1;
    return 3;
  }
  return v2;
}

uint64_t sub_23C8EFFB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_23C7E9898();
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    sub_23C7DC47C();
    sub_23C7E7764();
    sub_23C90280C();
    sub_23C8E1B98(v5, v6);
    result = sub_23C7DC4C4();
    if (!v2)
    {
      if (v8)
      {
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v9;
        *(_BYTE *)(a1 + 24) = v10 & 1;
      }
      else
      {
        *(_BYTE *)(v1 + 24) = 1;
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 24) = v10;
      }
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
    }
  }
  return result;
}

uint64_t sub_23C8F0080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_23C8212B4(a1, a2, a3, a4, a5);
  sub_23C902208(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8F0148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = 0;
    v7 = a1 + 40;
    while (sub_23C910E18() != a2 || v8 != a3)
    {
      v10 = sub_23C911A18();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        goto LABEL_13;
      v7 += 16;
      if (v4 == ++v6)
      {
        v6 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_23C8F0214(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD *);

  v13 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  for (i = (char *)(a1 + 64); ; i += 40)
  {
    v5 = *((_QWORD *)i - 4);
    v6 = *((_QWORD *)i - 3);
    v8 = *((_QWORD *)i - 1);
    v9 = *i;
    v11[0] = *((_QWORD *)i - 2);
    v7 = v11[0];
    v11[1] = v8;
    v12 = v9;
    swift_bridgeObjectRetain();
    sub_23C7E56A4(v7, v8, v9);
    LOBYTE(v5) = v13(v5, v6, v11);
    swift_bridgeObjectRelease();
    sub_23C7E5640(v7, v8, v9);
    if ((v5 & 1) != 0)
      break;
    if (v2 == ++v3)
      return 0;
  }
  return v3;
}

void sub_23C8F0308(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  _BYTE v21[24];
  __int128 v22;
  char v23;
  _BYTE v24[24];
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;

  v12 = sub_23C8F74D4(a3);
  if ((v14 & 1) != 0)
    goto LABEL_17;
  v15 = *(_DWORD *)(a3 + 36);
  v16 = *(_BYTE *)(a3 + 32);
  v22 = *a1;
  v23 = *((_BYTE *)a1 + 16);
  if (v15 != v13)
  {
    __break(1u);
    goto LABEL_12;
  }
  v17 = v12;
  v18 = 1 << v16;
  if (1 << v16 < v12)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_23C800FCC((uint64_t)&v22, (uint64_t)v24, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v24, (uint64_t)&v25, &qword_256BCDD30);
  if ((v27 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v19 = *(__int128 *)((char *)a1 + 24);
  v20 = *((_BYTE *)a1 + 40);
  if (v26 != v15)
    goto LABEL_13;
  if (v25 < v17)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C800FCC((uint64_t)&v19, (uint64_t)v21, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v21, (uint64_t)&v28, &qword_256BCDD30);
  if ((v30 & 1) == 0)
  {
    if (v15 == v29)
    {
      if (v18 >= v28)
      {
        *(_QWORD *)(a6 + 48) = a2;
        *(_QWORD *)(a6 + 56) = a3;
        *(_QWORD *)(a6 + 64) = a4;
        *(_QWORD *)(a6 + 72) = a5;
        *(_OWORD *)a6 = v22;
        *(_BYTE *)(a6 + 16) = v23;
        *(_OWORD *)(a6 + 24) = v19;
        *(_BYTE *)(a6 + 40) = v20;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return;
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_23C8F04AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 72);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 >= a2)
  {
    a3[1] = a2;
    a3[2] = v3;
    *a3 = result;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_23C8F04DC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (4 * v5 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    sub_23C902DBC();
    swift_bridgeObjectRetain();
    return v4;
  }
  return result;
}

uint64_t sub_23C8F0540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = sub_23C8F74D4(a2);
  *(_QWORD *)(a5 + 40) = v7;
  *(_BYTE *)(a5 + 48) = v8 & 1;
  v9 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)(a5 + 56) = 1 << *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a5 + 64) = v9;
  *(_BYTE *)(a5 + 72) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8F05CC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    v7 = a2;
    v8 = result;
    v9 = a3 & 1;
    if (a4)
    {
      result = sub_23C9021FC(result, a2, a3 & 1);
      v11 = 0;
      v12 = a6 + 64;
      v13 = v7;
      v14 = a6 + 96;
      while (1)
      {
        if ((v9 & 1) != 0)
          goto LABEL_31;
        if ((v8 & 0x8000000000000000) != 0 || (v15 = 1 << *(_BYTE *)(a6 + 32), (uint64_t)v8 >= v15))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v16 = v8 >> 6;
        v17 = *(_QWORD *)(v12 + 8 * (v8 >> 6));
        if (((v17 >> v8) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(a6 + 36) != (_DWORD)v7)
          goto LABEL_29;
        v18 = v17 & (-2 << (v8 & 0x3F));
        if (v18)
        {
          v8 = __clz(__rbit64(v18)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = v16 + 1;
          if (v16 + 1 >= (unint64_t)(v15 + 63) >> 6)
            goto LABEL_22;
          v20 = *(_QWORD *)(v12 + 8 * v19);
          if (!v20)
          {
            v21 = (unint64_t)(v15 + 63) >> 6;
            v19 = v16 + 2;
            if (v16 + 2 >= v21)
              goto LABEL_22;
            v20 = *(_QWORD *)(v12 + 8 * v19);
            if (!v20)
            {
              v19 = v16 + 3;
              if (v16 + 3 >= v21)
                goto LABEL_22;
              v20 = *(_QWORD *)(v12 + 8 * v19);
              if (!v20)
              {
                while (v16 + 4 < v21)
                {
                  v20 = *(_QWORD *)(v14 + 8 * v16++);
                  if (v20)
                  {
                    v22 = v8;
                    v23 = v14;
                    result = sub_23C7F91AC(v22, v7, 0);
                    v14 = v23;
                    v19 = v16 + 3;
                    goto LABEL_13;
                  }
                }
                v24 = v8;
                v25 = v14;
                result = sub_23C7F91AC(v24, v7, 0);
                v14 = v25;
LABEL_22:
                v8 = v15;
                goto LABEL_23;
              }
            }
          }
LABEL_13:
          v8 = __clz(__rbit64(v20)) + (v19 << 6);
        }
LABEL_23:
        v9 = 0;
        ++v11;
        v7 = v13;
        if (v11 >= a4)
          return v8;
      }
    }
    sub_23C9021FC(result, a2, a3 & 1);
    return v8;
  }
  return result;
}

uint64_t sub_23C8F07A4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a4 < 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    v13 = a2;
    v14 = result;
    result = sub_23C9021FC(result, a2, a3 & 1);
    if (a4)
    {
      v15 = 0;
      v16 = a7 & 1;
      v17 = (a3 | a7) & 1;
      v18 = a9 + 64;
      v19 = a6;
      v20 = a9 + 96;
      v21 = a5;
      do
      {
        if ((v17 & 1) != 0)
          goto LABEL_34;
        if ((_DWORD)v13 != a6)
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v14 == v21)
          return 0;
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_30;
        v22 = 1 << *(_BYTE *)(a9 + 32);
        if ((uint64_t)v14 >= v22)
          goto LABEL_30;
        v23 = v14 >> 6;
        v24 = *(_QWORD *)(v18 + 8 * (v14 >> 6));
        if (((v24 >> v14) & 1) == 0)
          goto LABEL_31;
        if (*(_DWORD *)(a9 + 36) != a6)
          goto LABEL_32;
        v25 = v24 & (-2 << (v14 & 0x3F));
        if (v25)
        {
          v14 = __clz(__rbit64(v25)) | v14 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v26 = v23 + 1;
          if (v23 + 1 >= (unint64_t)(v22 + 63) >> 6)
            goto LABEL_24;
          v27 = *(_QWORD *)(v18 + 8 * v26);
          if (!v27)
          {
            v28 = (unint64_t)(v22 + 63) >> 6;
            v26 = v23 + 2;
            if (v23 + 2 >= v28)
              goto LABEL_24;
            v27 = *(_QWORD *)(v18 + 8 * v26);
            if (!v27)
            {
              v26 = v23 + 3;
              if (v23 + 3 >= v28)
                goto LABEL_24;
              v27 = *(_QWORD *)(v18 + 8 * v26);
              if (!v27)
              {
                while (v23 + 4 < v28)
                {
                  v27 = *(_QWORD *)(v20 + 8 * v23++);
                  if (v27)
                  {
                    v29 = v14;
                    v30 = v13;
                    v31 = v16;
                    v32 = v19;
                    v33 = v20;
                    result = sub_23C7F91AC(v29, v30, 0);
                    v20 = v33;
                    v19 = v32;
                    v16 = v31;
                    v21 = a5;
                    v26 = v23 + 3;
                    goto LABEL_15;
                  }
                }
                v34 = v14;
                v35 = v13;
                v36 = v16;
                v37 = v19;
                v38 = v20;
                result = sub_23C7F91AC(v34, v35, 0);
                v20 = v38;
                v19 = v37;
                v16 = v36;
                v21 = a5;
LABEL_24:
                v14 = v22;
                goto LABEL_25;
              }
            }
          }
LABEL_15:
          v14 = __clz(__rbit64(v27)) + (v26 << 6);
        }
LABEL_25:
        ++v15;
        v13 = v19;
        v17 = v16;
      }
      while (v15 < a4);
    }
    return v14;
  }
  return result;
}

uint64_t sub_23C8F09D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  BOOL v4;

  if (result >= a2)
  {
    v4 = __OFSUB__(result, a3);
    v3 = result - a3 < 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (v3 == v4)
    __break(1u);
  return result;
}

void sub_23C8F09EC(uint64_t a1, int a2, char a3, __int128 *a4)
{
  __int128 v7;
  char v8;
  _BYTE v9[24];
  __int128 v10;
  char v11;
  _BYTE v12[24];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if ((a3 & 1) != 0)
    goto LABEL_13;
  v10 = *a4;
  v11 = *((_BYTE *)a4 + 16);
  sub_23C800FCC((uint64_t)&v10, (uint64_t)v12, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v12, (uint64_t)&v13, &qword_256BCDD30);
  if ((v15 & 1) != 0)
    goto LABEL_13;
  v7 = *(__int128 *)((char *)a4 + 24);
  v8 = *((_BYTE *)a4 + 40);
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > a1)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_23C800FCC((uint64_t)&v7, (uint64_t)v9, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v9, (uint64_t)&v16, &qword_256BCDD30);
  if ((v18 & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  if (v17 != a2)
    goto LABEL_11;
  if (v16 <= a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

void sub_23C8F0AEC(uint64_t a1, int a2, char a3, __int128 *a4)
{
  __int128 v7;
  char v8;
  _BYTE v9[24];
  __int128 v10;
  char v11;
  _BYTE v12[24];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if ((a3 & 1) != 0)
    goto LABEL_13;
  v10 = *a4;
  v11 = *((_BYTE *)a4 + 16);
  sub_23C800FCC((uint64_t)&v10, (uint64_t)v12, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v12, (uint64_t)&v13, &qword_256BCDD30);
  if ((v15 & 1) != 0)
    goto LABEL_13;
  v7 = *(__int128 *)((char *)a4 + 24);
  v8 = *((_BYTE *)a4 + 40);
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > a1)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_23C800FCC((uint64_t)&v7, (uint64_t)v9, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v9, (uint64_t)&v16, &qword_256BCDD30);
  if ((v18 & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  if (v17 != a2)
    goto LABEL_11;
  if (v16 < a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t sub_23C8F0BEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result)
    __break(1u);
  return result;
}

void sub_23C8F0C00(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  char v9;
  _BYTE v10[24];
  __int128 v11;
  char v12;
  _BYTE v13[24];
  __int128 v14;
  char v15;
  _BYTE v16[24];
  __int128 v17;
  char v18;
  _BYTE v19[24];
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;

  v17 = *a1;
  v18 = *((_BYTE *)a1 + 16);
  sub_23C800FCC((uint64_t)&v17, (uint64_t)v19, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v19, (uint64_t)&v20, &qword_256BCDD30);
  if ((v22 & 1) != 0)
    goto LABEL_14;
  v4 = v20;
  v5 = v21;
  v14 = *a2;
  v15 = *((_BYTE *)a2 + 16);
  sub_23C800FCC((uint64_t)&v14, (uint64_t)v16, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v16, (uint64_t)&v23, &qword_256BCDD30);
  if ((v25 & 1) != 0)
    goto LABEL_14;
  v11 = *(__int128 *)((char *)a2 + 24);
  v12 = *((_BYTE *)a2 + 40);
  if (v5 != v24)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v4 < v23)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  sub_23C800FCC((uint64_t)&v11, (uint64_t)v13, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v13, (uint64_t)&v26, &qword_256BCDD30);
  if ((v28 & 1) != 0)
    goto LABEL_15;
  v6 = v26;
  v7 = v27;
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *((_BYTE *)a1 + 40);
  sub_23C800FCC((uint64_t)&v8, (uint64_t)v10, &qword_256BCDD30);
  sub_23C800FCC((uint64_t)v10, (uint64_t)&v29, &qword_256BCDD30);
  if ((v31 & 1) != 0)
    goto LABEL_15;
  if (v7 != v30)
    goto LABEL_12;
  if (v6 < v29)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

uint64_t sub_23C8F0D88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2)
    __break(1u);
  return result;
}

void Row.unadapted.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  sub_23C7E7E34(v0 + 2, v0[5]);
  sub_23C9029B8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  sub_23C7DB3A0();
}

void static Row.fetchAll(_:sql:arguments:adapter:)()
{
  sub_23C8F137C();
}

#error "23C8F0F4C: call analysis failed (funcsize=88)"

#error "23C8F10E8: call analysis failed (funcsize=97)"

#error "23C8F1340: call analysis failed (funcsize=143)"

void static Row.fetchOne(_:sql:arguments:adapter:)()
{
  sub_23C8F137C();
}

void sub_23C8F137C()
{
  void (*v0)(uint64_t, _OWORD *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[40];
  _BYTE v16[40];
  _OWORD v17[3];
  char v18;
  _QWORD v19[24];
  void (*v20)(uint64_t, _OWORD *);

  sub_23C7DEF5C();
  v20 = v0;
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v9 = *v7;
  v8 = v7[1];
  sub_23C7DB5E4(v10, (uint64_t)v16, &qword_25430DBD0);
  sub_23C7E79A8(&qword_25430DA08);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v19[0] = v4;
  v19[1] = v2;
  v19[2] = v9;
  v19[3] = v8;
  sub_23C7F96B0(v19);
  sub_23C7F96E0(v19, (void *)(v11 + 32));
  sub_23C7DB5E4((uint64_t)v16, (uint64_t)v15, &qword_25430DBD0);
  v12 = 0u;
  v13 = 0u;
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = v11;
  sub_23C7DEF00();
  sub_23C7DB3B8();
  sub_23C7DBBB8();
  sub_23C9019F8((uint64_t)v15, (uint64_t)&v12, &qword_25430DBD0);
  v18 = 2;
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v14;
  sub_23C7E7974((uint64_t)v16, &qword_25430DBD0);
  v20(v6, v17);
  sub_23C7E7974((uint64_t)v17, &qword_25430DA18);
  sub_23C7DEF28();
}

void sub_23C8F14B4(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = 0;
  v3 = a1 + 56;
  sub_23C7DF3C0();
  v6 = v5 & v4;
  v8 = (unint64_t)(v7 + 63) >> 6;
  if ((v5 & v4) == 0)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v2 << 6); ; i = v15 + (v2 << 6))
  {
    sub_23C8FA748(&v16, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i));
    if (v6)
      goto LABEL_2;
LABEL_3:
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v8)
      goto LABEL_21;
    ++v2;
    if (!*(_QWORD *)(v3 + 8 * v11))
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_21;
      if (!*(_QWORD *)(v3 + 8 * v2))
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_21;
        if (!*(_QWORD *)(v3 + 8 * v2))
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_21;
          if (!*(_QWORD *)(v3 + 8 * v2))
            break;
        }
      }
    }
LABEL_18:
    sub_23C902880();
    v6 = v14 & v13;
  }
  v12 = v11 + 4;
  if (v12 >= v8)
  {
LABEL_21:
    swift_release();
    return;
  }
  if (*(_QWORD *)(v3 + 8 * v12))
  {
    v2 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v8)
      goto LABEL_21;
    ++v12;
    if (*(_QWORD *)(v3 + 8 * v2))
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void sub_23C8F15E4()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C902828();
  v0 = 0;
  v2 = v1 + 56;
  sub_23C7DF3C0();
  v5 = v4 & v3;
  v7 = (unint64_t)(v6 + 63) >> 6;
  if ((v4 & v3) == 0)
    goto LABEL_3;
LABEL_2:
  for (v5 &= v5 - 1; ; v5 = v11 & v10)
  {
    sub_23C7DBCC8();
    sub_23C902D9C();
    sub_23C8FA41C();
    sub_23C7DD194();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v8 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v8 >= v7)
      goto LABEL_21;
    ++v0;
    if (!*(_QWORD *)(v2 + 8 * v8))
    {
      v0 = v8 + 1;
      if (v8 + 1 >= v7)
        goto LABEL_21;
      if (!*(_QWORD *)(v2 + 8 * v0))
      {
        v0 = v8 + 2;
        if (v8 + 2 >= v7)
          goto LABEL_21;
        if (!*(_QWORD *)(v2 + 8 * v0))
        {
          v0 = v8 + 3;
          if (v8 + 3 >= v7)
            goto LABEL_21;
          if (!*(_QWORD *)(v2 + 8 * v0))
            break;
        }
      }
    }
LABEL_18:
    sub_23C902880();
  }
  v9 = v8 + 4;
  if (v9 >= v7)
  {
LABEL_21:
    swift_release();
    return;
  }
  if (*(_QWORD *)(v2 + 8 * v9))
  {
    v0 = v9;
    goto LABEL_18;
  }
  while (1)
  {
    v0 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v0 >= v7)
      goto LABEL_21;
    ++v9;
    if (*(_QWORD *)(v2 + 8 * v0))
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void static Row.fetchAll(_:arguments:adapter:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *inited;

  v4 = sub_23C902B48(a1, a2, a3);
  if (!v3)
  {
    v5 = v4;
    sub_23C7E79A8(&qword_25430D548);
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v5;
    inited[3] = sub_23C8F6384;
    inited[4] = 0;
    sub_23C8EFC18((uint64_t)inited, MEMORY[0x24BEE4AF8], (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C8DF6C0);
  }
  sub_23C902F0C();
}

BOOL sub_23C8F1794(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_23C8F17A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t);
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  unsigned __int8 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int8 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = a5;
  v11 = sub_23C910EB4();
  v12 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 == 3)
  {
    result = sub_23C7ED944(a1, a2);
  }
  else
  {
    v23 = a4;
    if (a3 != 2
      || (sub_23C910EA8(),
          v22 = sub_23C910E84(),
          v17 = v16,
          result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11),
          v17 >> 60 == 15))
    {
      v23(&v32, result);
      v27 = v32;
      v28 = v33;
      v29 = v34;
      v30 = v35;
      v31 = v36;
      v24 = a1;
      v25 = a2;
      v26 = a3;
      sub_23C83256C();
      swift_allocError();
      sub_23C8152BC(MEMORY[0x24BDCDDE8], (uint64_t)&v27, v18);
      v19 = v28;
      v20 = v31;
      v21 = v29;
      swift_release();
      sub_23C815EF0(v19, *((uint64_t *)&v19 + 1), v21);
      swift_bridgeObjectRelease();
      sub_23C7E13C4(v20);
      return swift_willThrow();
    }
    a1 = v22;
    a2 = v17;
  }
  *a6 = a1;
  a6[1] = a2;
  return result;
}

uint64_t sub_23C8F196C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  unsigned __int8 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  unsigned __int8 v32;
  __int128 v33;
  __int128 v34;
  void (*v35)(uint64_t *__return_ptr, uint64_t);

  v35 = a4;
  v9 = sub_23C910EB4();
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 == 4)
  {
    if (!(a2 | a1))
    {
      a1 = 0;
      a2 = 0xF000000000000000;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (a3 == 3)
  {
    result = sub_23C7ED944(a1, a2);
    goto LABEL_10;
  }
  v21 = a5;
  if (a3 != 2
    || (sub_23C910EA8(),
        v20 = sub_23C910E84(),
        v15 = v14,
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9),
        v15 >> 60 == 15))
  {
LABEL_7:
    v35(&v30, result);
    v25 = v30;
    v26 = v31;
    v27 = v32;
    v28 = v33;
    v29 = v34;
    v22 = a1;
    v23 = a2;
    v24 = a3;
    sub_23C83256C();
    swift_allocError();
    sub_23C8152BC(MEMORY[0x24BDCDDE8], (uint64_t)&v25, v16);
    v17 = v26;
    v18 = v29;
    v19 = v27;
    swift_release();
    sub_23C815EF0(v17, *((uint64_t *)&v17 + 1), v19);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v18);
    return swift_willThrow();
  }
  a2 = v15;
  a1 = v20;
  a5 = v21;
LABEL_10:
  *a5 = a1;
  a5[1] = a2;
  return result;
}

uint64_t Row.PrefetchedRowsView.keys.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *v0;
  v9 = MEMORY[0x24BEE4B08];
  sub_23C7DF858();
  sub_23C7DC46C();
  v2 = sub_23C7FD1CC(v1);
  sub_23C7E072C();
  sub_23C7DB624();
  v3 = v2[2];
  if (v3)
  {
    do
    {
      v4 = v2[6];
      sub_23C7DC46C();
      sub_23C7DBBB0();
      sub_23C7DBCC8();
      sub_23C7E0808();
      if (!swift_isUniquelyReferenced_nonNull_native() || (unint64_t)(v3 - 1) > v2[3] >> 1)
      {
        sub_23C7F28EC();
        v2 = v5;
      }
      sub_23C7E79A8(&qword_256BCA6A8);
      swift_arrayDestroy();
      v6 = v2[2];
      memmove(v2 + 4, v2 + 9, 40 * v6 - 40);
      v2[2] = v6 - 1;
      if (v4)
        sub_23C8FA41C();
      swift_bridgeObjectRelease();
      sub_23C7DBCC8();
      sub_23C7E0808();
      v7 = sub_23C82CFC8();
      sub_23C7FB634(v7);
      sub_23C7DB398();
      sub_23C7DB62C();
      sub_23C7E072C();
      v3 = v2[2];
    }
    while (v3);
    sub_23C7DE934();
    return v9;
  }
  else
  {
    sub_23C7DFA18();
    return MEMORY[0x24BEE4B08];
  }
}

void Row.scopesTree.getter(_OWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;

  Row.scopes.getter();
  *a1 = v2;
  a1[1] = v3;
  sub_23C7DF2C8();
}

void Row.ScopesTreeView.names.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[40];
  char v42;
  uint64_t v43;

  sub_23C7DE8EC();
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v43 = MEMORY[0x24BEE4B08];
  v4 = sub_23C8F74D4(v1);
  v6 = v5;
  v8 = v7;
  v42 = v7 & 1;
  swift_retain();
  sub_23C7DC46C();
  v37 = v2;
  sub_23C7E0808();
  v36 = v3;
  sub_23C7DBBB8();
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    sub_23C902E08();
    swift_bridgeObjectRelease();
    sub_23C7E072C();
    swift_release();
    sub_23C7F91AC(v4, v6, 0);
    sub_23C7DBCB0();
  }
  else
  {
    while (*(_DWORD *)(v1 + 36) == (_DWORD)v6)
    {
      sub_23C902E4C();
      if (v4 == v9)
        goto LABEL_8;
      sub_23C8F76A8((uint64_t)v41, v4, v6, 0, v1);
      v11 = v10;
      v13 = v12;
      v14 = type metadata accessor for Row();
      sub_23C8461F0((uint64_t)v41, (uint64_t)v38);
      v15 = v39;
      v16 = v40;
      sub_23C800944((uint64_t)v38, v39);
      sub_23C9027A4();
      MEMORY[0x24BDAC7A8](v17);
      sub_23C7DE95C();
      v20 = v19 - v18;
      (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
      v22 = swift_retain();
      v23 = sub_23C846130(v22, v20, v14, v15, v16);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v38);
      sub_23C7DB3B8();
      sub_23C8210FC(v11, v13, v37, v36);
      v25 = v24;
      v27 = v26;
      sub_23C7DBCD0();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v41);
      if (v25)
      {
        sub_23C7DC514();
        sub_23C7E6180();
        *(_QWORD *)(v23 + 80) = v25;
        *(_QWORD *)(v23 + 88) = v27;
        swift_bridgeObjectRelease();
        sub_23C7DC514();
      }
      v28 = v42;
      sub_23C7EFAC4();
      sub_23C7DC46C();
      sub_23C7E6260();
      sub_23C7DC46C();
      v35 = sub_23C901798(v4, v6, v28, v1);
      v34 = v29;
      v31 = v30;
      v32 = v30 & 1;
      sub_23C7F91AC(v4, v6, v28);
      swift_bridgeObjectRelease();
      sub_23C7DC514();
      sub_23C7DBCD0();
      sub_23C7DF8F8();
      v42 = v32;
      sub_23C8FA41C();
      swift_bridgeObjectRelease();
      v33 = Row.scopes.getter();
      Row.ScopesTreeView.names.getter(v33);
      sub_23C7DBCD0();
      sub_23C7DC474();
      sub_23C7DB3DC();
      sub_23C7DE904();
      sub_23C8F15E4();
      swift_release();
      v4 = v35;
      v6 = v34;
      if ((v31 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
  }
}

Swift::Bool __swiftcall Row.hasColumn(_:)(Swift::String a1)
{
  char v1;

  sub_23C7DBC68(a1._countAndFlagsBits, (uint64_t)a1._object);
  return (v1 & 1) == 0;
}

uint64_t Row.ScopesTreeView.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  sub_23C7DF5CC();
  sub_23C7E0808();
  sub_23C7DBBB0();
  sub_23C7DBBB8();
  v4 = sub_23C82CFC8();
  v6 = (_QWORD *)sub_23C7FC968(v4, v5);
  sub_23C7DC474();
  sub_23C7DB3DC();
  sub_23C7DB398();
  sub_23C7DFE08();
  v14 = v6;
  if (v6[2])
  {
    while (1)
    {
      v8 = v6[4];
      v7 = v6[5];
      v9 = v6[6];
      sub_23C7E0808();
      sub_23C7DF5CC();
      sub_23C900C18(0, 1);
      v10 = v8 == a1 && v7 == a2;
      if (v10 || (sub_23C7E16E8() & 1) != 0)
        break;
      sub_23C7DF5CC();
      sub_23C902DF4();
      sub_23C7DFE08();
      sub_23C7FB904(v12, v13);
      sub_23C7DFE08();
      sub_23C7DB398();
      v6 = v14;
      if (!v14[2])
      {
        sub_23C7DE934();
        return 0;
      }
    }
    sub_23C7DB624();
    sub_23C7DE934();
  }
  else
  {
    sub_23C7DFA18();
    return 0;
  }
  return v9;
}

uint64_t Row.PrefetchedRowsView.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  _QWORD *v13;

  sub_23C902828();
  v1 = v0;
  v3 = v2;
  sub_23C7DBCC8();
  sub_23C7E0808();
  v4 = sub_23C82CFC8();
  v5 = sub_23C7FD1CC(v4);
  sub_23C7DB398();
  sub_23C7DB62C();
  v13 = v5;
  if (v5[2])
  {
    while (1)
    {
      v7 = v5[4];
      v6 = v5[5];
      v8 = v5[6];
      sub_23C7DBCC8();
      sub_23C7E0808();
      sub_23C7DBBB0();
      sub_23C7DBBB8();
      sub_23C900AF4(0, 1);
      if (v7 == v3 && v6 == v1)
        break;
      sub_23C7DEAE4();
      v10 = sub_23C7E16E8();
      sub_23C7DC474();
      if ((v10 & 1) != 0)
        goto LABEL_12;
      sub_23C7E0808();
      sub_23C7DBBB0();
      v11 = sub_23C902798();
      sub_23C7FB634(v11);
      sub_23C7DB3DC();
      sub_23C7DB398();
      sub_23C7DB62C();
      v5 = v13;
      if (!v13[2])
      {
        sub_23C7DE934();
        return 0;
      }
    }
    sub_23C7DB624();
LABEL_12:
    sub_23C7DB3DC();
    sub_23C7DB398();
    sub_23C7DB624();
  }
  else
  {
    sub_23C7DFA18();
    return 0;
  }
  return v8;
}

double Row.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  double result;
  uint64_t v20;

  v4 = v3;
  v8 = v4 + 2;
  v9 = v4[5];
  v10 = v4[6];
  sub_23C7E7E34(v4 + 2, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 88))(a1, a2, v9, v10);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    v13 = v11;
    v15 = v4[5];
    v14 = v4[6];
    sub_23C7DEA44(v8);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v14 + 48))(&v20, v13, v15, v14);
    sub_23C90292C();
    v16 = sub_23C902890();
    sub_23C902924(v16, v17, v18);
  }
  return result;
}

#error "23C8F2470: call analysis failed (funcsize=148)"

void Row.containsNonNullValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  sub_23C7DE8EC();
  v1 = v0[9];
  if (v1 < 0)
    goto LABEL_24;
  v35 = *v0;
  if (!v1)
  {
LABEL_7:
    Row.scopes.getter();
    v5 = v41;
    v36 = v42;
    v6 = sub_23C8F74D4(v41);
    v8 = v7;
    v10 = v9;
    v43 = v9 & 1;
    while (1)
    {
      if ((v10 & 1) != 0)
        goto LABEL_25;
      v11 = v8;
      if (*(_DWORD *)(v5 + 36) != (_DWORD)v8)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_23C902E4C();
      if (v6 == v12)
      {
        swift_bridgeObjectRelease();
        sub_23C902E08();
        sub_23C7E087C();
        swift_release();
        sub_23C7F91AC(v6, v8, 0);
        goto LABEL_21;
      }
      sub_23C8F76A8((uint64_t)&v40, v6, v8, 0, v5);
      sub_23C8461F0((uint64_t)&v40, (uint64_t)v37);
      v13 = v38;
      v14 = v39;
      sub_23C800944((uint64_t)v37, v38);
      sub_23C9027A4();
      MEMORY[0x24BDAC7A8](v15);
      sub_23C7DE95C();
      v18 = v17 - v16;
      (*(void (**)(uint64_t))(v19 + 16))(v17 - v16);
      v20 = swift_retain();
      v21 = sub_23C846130(v20, v18, v35, v13, v14);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v37);
      if (!*(_QWORD *)(v36 + 16))
        break;
      sub_23C7DBCC8();
      v22 = sub_23C7E94B8();
      v23 = v11;
      if ((v24 & 1) == 0)
      {
        sub_23C7DB62C();
        goto LABEL_16;
      }
      v25 = *(_QWORD *)(v36 + 56) + 24 * v22;
      v26 = *(_QWORD *)(v25 + 8);
      v27 = *(_QWORD *)(v25 + 16);
      sub_23C7DB3D4();
      sub_23C7E0808();
      sub_23C7DBBB8();
      sub_23C7DB62C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v40);
      sub_23C7DE934();
      sub_23C7E6180();
      *(_QWORD *)(v21 + 80) = v26;
      *(_QWORD *)(v21 + 88) = v27;
      swift_bridgeObjectRelease();
      sub_23C7DE934();
LABEL_17:
      v28 = v43;
      sub_23C7E7764();
      sub_23C7DEF00();
      sub_23C7DEF00();
      sub_23C7DB3B8();
      v6 = sub_23C901798(v6, v23, v28, v5);
      v8 = v29;
      v10 = v30;
      v31 = sub_23C902E10();
      sub_23C7F91AC(v31, v32, v28);
      swift_bridgeObjectRelease();
      sub_23C7DBCD0();
      swift_bridgeObjectRelease();
      sub_23C7DC514();
      v33 = swift_release();
      v43 = v10 & 1;
      v34 = Row.containsNonNullValue.getter(v33);
      sub_23C7DFB3C();
      if ((v34 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_23C902E08();
        sub_23C7E087C();
        swift_release();
        sub_23C7F91AC(v6, v8, v10 & 1);
        goto LABEL_21;
      }
    }
    v23 = v11;
LABEL_16:
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v40);
    goto LABEL_17;
  }
  v2 = 0;
  while (v1 != v2)
  {
    v3 = v0[5];
    v4 = v0[6];
    sub_23C7DEA44(v0 + 2);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v2, v3, v4) & 1) == 0)
    {
LABEL_21:
      sub_23C7DBCB0();
      return;
    }
    if (v1 == ++v2)
      goto LABEL_7;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_23C8F287C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;

  if (a1 < 0 || (sub_23C902A50(), v3 ^ v4 | v2))
  {
    sub_23C7DC484();
    sub_23C7E4588();
    __break(1u);
  }
  else
  {
    sub_23C902EC0();
    sub_23C7E1A4C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 72));
    sub_23C7DB764();
  }
}

Swift::Bool __swiftcall Row.hasNull(atIndex:)(Swift::Int atIndex)
{
  char v1;
  char v2;
  char v3;
  uint64_t (*v4)(void);
  Swift::Bool result;

  if (atIndex < 0 || (sub_23C902A50(), v2 ^ v3 | v1))
  {
    sub_23C7DC484();
    result = sub_23C7E4588();
    __break(1u);
  }
  else
  {
    sub_23C902770();
    sub_23C902D9C();
    return v4() & 1;
  }
  return result;
}

#error "23C8F2AB0: call analysis failed (funcsize=110)"

uint64_t Row.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

void Row.prefetchedRows.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E6180();
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DF2C8();
}

void Row.__allocating_init()()
{
  uint64_t v0;

  v0 = sub_23C9028B4();
  sub_23C7F9024(v0);
}

void Row.__allocating_init(dictionaryLiteral:)(uint64_t a1)
{
  sub_23C8F3064(a1, (void (*)(void))sub_23C8EF92C);
}

void sub_23C8F3064(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_23C7DB624();
  sub_23C9028B4();
  sub_23C7F8DD8();
  sub_23C7E252C();
}

uint64_t Row.hashValue.getter()
{
  sub_23C911BBC();
  Row.hash(into:)();
  return sub_23C7DA4F4();
}

void sub_23C8F30FC()
{
  static Row.== infix(_:_:)();
}

void static Row.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;

  sub_23C7DE8EC();
  if (v2 == v3)
    goto LABEL_79;
  sub_23C902DBC();
  v5 = *(_QWORD *)(v4 + 72);
  if (v5 != *(_QWORD *)(v6 + 72))
    goto LABEL_79;
  v108 = v1;
  v109 = 0;
  v110 = v0;
  v111 = 0;
  v99 = v0;
  v103 = v1;
  if (v5)
  {
    sub_23C7DF5CC();
    sub_23C7DC590();
    v7 = 0;
    v97 = v5;
    while (1)
    {
      v8 = Row.subscript.getter();
      v10 = v9;
      v11 = v105;
      v12 = v106;
      v13 = v107;
      sub_23C8A3D34();
      sub_23C902E34(v11);
      sub_23C7E087C();
      sub_23C902748(v11);
      if (*(_QWORD *)(v1 + 72) <= v7)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        return;
      }
      v109 = v7 + 1;
      if (v7 == v5)
        break;
      v100 = v12;
      v101 = v13;
      v14 = Row.subscript.getter();
      v16 = v15;
      v17 = v0;
      v18 = v105;
      v19 = v106;
      v20 = v107;
      sub_23C8A3D34();
      sub_23C902E34(v18);
      sub_23C7DB62C();
      sub_23C902748(v18);
      if (*(_QWORD *)(v17 + 72) <= v7)
        goto LABEL_82;
      v111 = ++v7;
      if (v8 == v14 && v10 == v16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v22 = sub_23C7E16E8();
        sub_23C7DB62C();
        sub_23C7E087C();
        if ((v22 & 1) == 0)
        {
          sub_23C902DC8();
          swift_release();
          sub_23C7E5640(v18, v19, v20);
          sub_23C7E5640(v11, v100, v101);
          goto LABEL_79;
        }
      }
      v104[0] = v11;
      v104[1] = v100;
      LOBYTE(v105) = v101;
      v112 = v18;
      v113 = v19;
      v114 = v20;
      static DatabaseValue.== infix(_:_:)((uint64_t)v104);
      v24 = v23;
      sub_23C7E5640(v18, v19, v20);
      sub_23C7E5640(v11, v100, v101);
      if ((v24 & 1) == 0)
      {
        sub_23C902DC8();
        swift_release();
        goto LABEL_79;
      }
      v5 = v97;
      v0 = v99;
      v1 = v103;
      if (v7 == v97)
        goto LABEL_21;
    }
    sub_23C7E087C();
    sub_23C902748(v11);
  }
  else
  {
    sub_23C7DF5CC();
    sub_23C7DC590();
  }
LABEL_21:
  sub_23C7E6604();
  sub_23C7DFE08();
  sub_23C902DF4();
  v25 = v109;
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  sub_23C7DE904();
  Row.scopes.getter();
  v26 = v109;
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  sub_23C7DE904();
  if ((sub_23C8F6954(v25, v26) & 1) == 0)
  {
    sub_23C7DC474();
    goto LABEL_78;
  }
  v94 = v26;
  v96 = v25 + 64;
  sub_23C7DF3C0();
  v29 = v28 & v27;
  v98 = (unint64_t)(v30 + 63) >> 6;
  sub_23C7DBBB8();
  v31 = 0;
  while (1)
  {
    if (v29)
    {
      sub_23C9025B0();
      v102 = v29;
      v33 = v32 | (v31 << 6);
      goto LABEL_48;
    }
    v34 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_83;
    if (v34 >= v98)
      break;
    v35 = v31 + 1;
    if (!*(_QWORD *)(v96 + 8 * v34))
    {
      v35 = v34 + 1;
      sub_23C9026C0();
      if (v36 == v37)
        break;
      sub_23C9026B0();
      if (!v39)
      {
        v35 = v38 + 2;
        sub_23C9026C0();
        if (v36 == v37)
          break;
        sub_23C9026B0();
        if (!v41)
        {
          v35 = v40 + 3;
          sub_23C9026C0();
          if (v36 == v37)
            break;
          sub_23C9026B0();
          if (!v43)
          {
            v35 = v42 + 4;
            sub_23C9026C0();
            if (v36 == v37)
              break;
            sub_23C9026B0();
            if (!v45)
            {
              v46 = v44 + 5;
              if (v46 >= v98)
                break;
              if (!*(_QWORD *)(v96 + 8 * v46))
              {
                while (1)
                {
                  v35 = v46 + 1;
                  if (__OFADD__(v46, 1))
                    goto LABEL_84;
                  sub_23C9026C0();
                  if (v36 == v37)
                    goto LABEL_76;
                  sub_23C9026B0();
                  v46 = v47 + 1;
                  if (v48)
                    goto LABEL_47;
                }
              }
              v35 = v46;
            }
          }
        }
      }
    }
LABEL_47:
    sub_23C902880();
    v102 = v50 & v49;
    v33 = v51 + (v35 << 6);
LABEL_48:
    v25 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 16 * v33 + 8);
    sub_23C7DBBB8();
    sub_23C902DF4();
    v52 = v115;
    if (*(_QWORD *)(v113 + 16))
    {
      v53 = sub_23C902A40();
      if ((v54 & 1) != 0)
      {
        sub_23C7EF7F0(v53, v54, v55, v53);
        sub_23C902C90();
        sub_23C902D4C();
        sub_23C9027A4();
        MEMORY[0x24BDAC7A8](v56);
        sub_23C9025C4(v57, v58, v94);
        sub_23C7E66DC();
        sub_23C902F74();
        v31 = sub_23C902C74(v59, v60, v61, v62);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v104);
        if (*(_QWORD *)(v52 + 16))
        {
          sub_23C7DEF00();
          v63 = sub_23C7E94B8();
          if ((v64 & 1) != 0)
          {
            v65 = *(_QWORD *)(v52 + 56) + 24 * v63;
            v66 = *(_QWORD *)(v65 + 8);
            v67 = *(_QWORD *)(v65 + 16);
            sub_23C7DB3D4();
            sub_23C7DC46C();
            sub_23C7DBBB0();
            sub_23C7E087C();
            _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v108);
            sub_23C7DE934();
            sub_23C7E6180();
            *(_QWORD *)(v31 + 80) = v66;
            *(_QWORD *)(v31 + 88) = v67;
            sub_23C7DB624();
            sub_23C7DB62C();
            sub_23C7DB398();
            sub_23C7E8DDC();
            sub_23C7E087C();
            sub_23C7DE934();
LABEL_56:
            sub_23C7E087C();
            goto LABEL_57;
          }
          sub_23C7E087C();
        }
        sub_23C902C88();
        sub_23C7DB624();
        sub_23C7DB62C();
        sub_23C7DB398();
        sub_23C7E8DDC();
        goto LABEL_56;
      }
    }
    sub_23C7DB624();
    sub_23C7DB62C();
    sub_23C7DB398();
    sub_23C7E8DDC();
    v31 = 0;
LABEL_57:
    Row.scopes.getter();
    v68 = v115;
    if (*(_QWORD *)(v113 + 16))
    {
      v69 = sub_23C902A40();
      if ((v70 & 1) != 0)
      {
        sub_23C7EF7F0(v69, v70, v71, v69);
        v25 = v72;
        sub_23C902C90();
        v73 = v107;
        sub_23C902D4C();
        sub_23C9027A4();
        MEMORY[0x24BDAC7A8](v74);
        sub_23C9025C4(v75, v76, v94);
        sub_23C7E66DC();
        sub_23C902F74();
        v81 = sub_23C846130(v77, v78, v79, v80, v73);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v104);
        if (*(_QWORD *)(v68 + 16))
        {
          sub_23C7DBBB8();
          v82 = sub_23C7E94B8();
          if ((v83 & 1) != 0)
          {
            v84 = *(_QWORD *)(v68 + 56) + 24 * v82;
            v85 = *(_QWORD *)(v84 + 8);
            v95 = *(_QWORD *)(v84 + 16);
            sub_23C7DB3D4();
            sub_23C7DC46C();
            sub_23C7DF858();
            sub_23C7DC474();
            _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v108);
            sub_23C7DE934();
            sub_23C7E6180();
            v86 = *(_QWORD *)(v81 + 80);
            *(_QWORD *)(v81 + 80) = v85;
            *(_QWORD *)(v81 + 88) = v95;
            sub_23C902D58();
            sub_23C7DC474();
            v25 = v86;
LABEL_65:
            sub_23C902D58();
            sub_23C7DC474();
            sub_23C7DB62C();
            sub_23C7DB3DC();
            sub_23C7DB398();
            sub_23C7E8DDC();
            goto LABEL_66;
          }
          sub_23C7DC474();
        }
        sub_23C902C88();
        goto LABEL_65;
      }
    }
    sub_23C7DB62C();
    sub_23C7DB3DC();
    sub_23C7DB398();
    sub_23C7E8DDC();
    sub_23C7DC474();
    v81 = 0;
LABEL_66:
    v1 = v103;
    v29 = v102;
    if (v31)
    {
      if (!v81)
      {
        sub_23C7DE904();
        sub_23C7DB624();
        goto LABEL_75;
      }
      sub_23C87572C();
      v87 = sub_23C902740();
      v88 = static Row.== infix(_:_:)(v87, v81);
      sub_23C902E6C();
      sub_23C902E6C();
      sub_23C902D74();
      if ((v88 & 1) == 0)
      {
        sub_23C7DF8F8();
        sub_23C7DC474();
        goto LABEL_78;
      }
    }
    else
    {
      sub_23C902D74();
      if (v81)
      {
        sub_23C7DF8F8();
        sub_23C7DC474();
LABEL_75:
        swift_release();
        goto LABEL_78;
      }
    }
  }
LABEL_76:
  sub_23C7DF8F8();
  sub_23C7E6180();
  v89 = *(_QWORD *)(v1 + 88);
  sub_23C7E6180();
  v90 = *(_QWORD *)(v99 + 88);
  v91 = (_QWORD *)sub_23C7DF8B0();
  v93 = sub_23C8482D8(v91, v92);
  sub_23C7DF858();
  sub_23C7DC46C();
  sub_23C7DB3D4();
  if ((v93 & 1) != 0)
  {
    sub_23C7E0808();
    sub_23C878AF8(v89, v90);
    sub_23C7E072C();
    sub_23C7DB624();
    sub_23C7DB398();
    sub_23C7DE934();
    sub_23C7DC474();
    sub_23C7DB3DC();
    goto LABEL_79;
  }
  sub_23C7E072C();
  sub_23C7DB624();
  sub_23C7DE934();
  sub_23C7DC474();
LABEL_78:
  swift_bridgeObjectRelease();
LABEL_79:
  sub_23C7DBCB0();
}

uint64_t sub_23C8F3944()
{
  return Row.hashValue.getter();
}

uint64_t sub_23C8F3964()
{
  return Row.hash(into:)();
}

uint64_t Row.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v1 = *(_QWORD *)(v0 + 72);
  result = sub_23C911BC8();
  if (v1)
  {
    swift_retain();
    Row.subscript.getter();
    sub_23C8A3D34();
    sub_23C7E56A4(v3, v4, v5);
    sub_23C7DE934();
    sub_23C7E5640(v3, v4, v5);
    if (*(uint64_t *)(v0 + 72) > 0)
    {
      sub_23C910F14();
      sub_23C7DE934();
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x23C8F3B58);
  }
  return result;
}

uint64_t sub_23C8F3B6C()
{
  sub_23C911BBC();
  Row.hash(into:)();
  return sub_23C911BF8();
}

uint64_t sub_23C8F3BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v8;

  result = sub_23C8F3C20(a1, a3);
  if (a2 < 1)
  {
    if (result <= 0 && result > a2)
      goto LABEL_4;
LABEL_10:
    result = sub_23C815DE0(a1, a2, (_QWORD *)a4);
    v8 = 0;
    goto LABEL_11;
  }
  if (result < 0 || result >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  *(_QWORD *)a4 = 0;
  v8 = 1;
LABEL_11:
  *(_BYTE *)(a4 + 8) = v8;
  return result;
}

uint64_t sub_23C8F3C20(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 72);
  if (v3 >= a2 && ((a2 | result) & 0x8000000000000000) == 0 && v3 >= result)
    return a2 - result;
  __break(1u);
  return result;
}

void sub_23C8F3C48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  Row.__allocating_init(dictionaryLiteral:)(a1);
  *a2 = v3;
}

void sub_23C8F3C6C()
{
  Row.description.getter();
  sub_23C7DB390();
}

uint64_t sub_23C8F3C88()
{
  return Row.debugDescription.getter();
}

uint64_t Row.debugDescription.getter()
{
  return sub_23C8F6C94(0);
}

uint64_t sub_23C8F3CB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C8F3CD4(*a1, a2);
}

uint64_t sub_23C8F3CD4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return result;
  }
  *a2 = v3;
  if (v3 < 0 || v3 >= *(_QWORD *)(v2 + 72))
    goto LABEL_6;
  return result;
}

uint64_t sub_23C8F3CFC(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23C8F3CD4(*a1, &v3);
  *a1 = v3;
  return result;
}

uint64_t sub_23C8F3D38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_23C815DE0(*a1, a2, a3);
}

uint64_t sub_23C8F3D5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_23C8F3BA8(*a1, a2, *a3, a4);
}

uint64_t sub_23C8F3D84(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F3C20(*a1, *a2);
}

void sub_23C8F3DAC(_QWORD *a1@<X8>)
{
  Row.startIndex.getter(a1);
}

void sub_23C8F3DC0(_QWORD *a1@<X8>)
{
  Row.endIndex.getter(a1);
  sub_23C7DB390();
}

void Row.endIndex.getter(_QWORD *a1@<X8>)
{
  sub_23C8C4084(a1);
}

void sub_23C8F3DE4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = malloc(0x68uLL);
  *a1 = v2;
  v3 = Row.subscript.getter();
  *((_QWORD *)v2 + 5) = v3;
  *(_QWORD *)v2 = v3;
  *((_QWORD *)v2 + 1) = v4;
  v5 = *((_QWORD *)v2 + 2);
  v6 = *((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 10) = v4;
  *((_QWORD *)v2 + 11) = v5;
  *((_QWORD *)v2 + 12) = v6;
  v7 = *((_BYTE *)v2 + 32);
  *((_BYTE *)v2 + 33) = v7;
  *((_QWORD *)v2 + 6) = v4;
  *((_QWORD *)v2 + 7) = v5;
  *((_QWORD *)v2 + 8) = v6;
  *((_BYTE *)v2 + 72) = v7;
  sub_23C8A3D34();
  sub_23C7E56A4(v5, v6, v7);
  sub_23C7DF5B4();
}

void sub_23C8F3E74()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;

  sub_23C7DF844();
  v1 = *(void **)v0;
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v4 = *(_BYTE *)(*(_QWORD *)v0 + 72);
  v5 = *(_BYTE *)(*(_QWORD *)v0 + 33);
  swift_bridgeObjectRelease();
  v6 = sub_23C902798();
  sub_23C7E5640(v6, v7, v4);
  sub_23C7DB62C();
  sub_23C7E5640(v3, v2, v5);
  free(v1);
}

uint64_t sub_23C8F3EE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23C8F04AC(*a1, a1[1], a2);
}

void sub_23C8F3F0C(_QWORD *a1@<X8>)
{
  sub_23C8F3F2C(a1);
}

void sub_23C8F3F2C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL sub_23C8F3F40()
{
  return sub_23C8EF62C();
}

void sub_23C8F3F64()
{
  Row.count.getter();
  sub_23C7DB390();
}

uint64_t sub_23C8F3F80(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F09D8(*a1, *a2, a2[1]);
}

void sub_23C8F3FAC(uint64_t *a1, uint64_t *a2)
{
  sub_23C8F0BEC(*a1, *a2, a2[1]);
  sub_23C7DB390();
}

uint64_t sub_23C8F3FD4(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F0D88(*a1, a1[1], *a2, a2[1]);
}

void sub_23C8F4004(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_23C8F4024(a2, *a1);
  sub_23C7DB390();
}

void sub_23C8F4024(_QWORD *a1@<X8>, uint64_t a2@<X0>)
{
  uint64_t v2;

  if (a2 < 0 || *(_QWORD *)(v2 + 72) <= a2)
    __break(1u);
  else
    sub_23C8C4084(a1);
}

void sub_23C8F4040(uint64_t *a1)
{
  uint64_t v2;

  sub_23C8F4024(&v2, *a1);
  *a1 = v2;
}

void sub_23C8F407C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

void sub_23C8F4088()
{
  sub_23C8D6C88();
  sub_23C7DB390();
}

void sub_23C8F40A4()
{
  sub_23C815E0C();
  sub_23C7DB390();
}

void sub_23C8F40C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_23C8F0DA0(a1, a2, a3);
  sub_23C7DB390();
}

void sub_23C8F40DC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_23C7DB3D4();
  sub_23C902858();
  *a2 = v4;
  a2[1] = v3;
  sub_23C7DF5B4();
}

uint64_t Row.scopes.getter()
{
  uint64_t v0;
  void (*v1)(void);

  sub_23C902770();
  sub_23C7E6180();
  v1 = *(void (**)(void))(v0 + 24);
  sub_23C7DBBB0();
  sub_23C7DBBB8();
  sub_23C902D9C();
  v1();
  sub_23C7DC474();
  return sub_23C7DB3DC();
}

uint64_t Row.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  if (a1 < 0 || (sub_23C902A50(), v4 ^ v5 | v3))
  {
    sub_23C7DC484();
    result = sub_23C7E4588();
    __break(1u);
  }
  else
  {
    v6 = v1[5];
    v7 = v1[6];
    sub_23C7E7E34(v1 + 2, v6);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 48))(&v12, a1, v6, v7);
    sub_23C90292C();
    v8 = sub_23C902890();
    return sub_23C902924(v8, v9, v10);
  }
  return result;
}

void sub_23C8F4254()
{
  uint64_t v0;
  void (*v1)(void);

  sub_23C9027E0();
  v1();
  if (v0)
  {
    sub_23C7DBDA8();
    __break(1u);
  }
  else
  {
    sub_23C7E252C();
  }
}

void Row.decodeIfPresent<A>(_:atIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 0 || *(_QWORD *)(v2 + 72) <= a2)
  {
    sub_23C7DC484();
    sub_23C7E4588();
    __break(1u);
  }
  else
  {
    static DatabaseValueConvertible.decodeIfPresent(fromRow:atUncheckedIndex:)();
    sub_23C902E88();
  }
}

#error "23C8F4468: call analysis failed (funcsize=116)"

void Row.decode<A>(_:atIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 0 || *(_QWORD *)(v2 + 72) <= a2)
  {
    sub_23C7DC484();
    sub_23C7E4588();
    __break(1u);
  }
  else
  {
    static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)();
    sub_23C902E88();
  }
}

void Row.decodeIfPresent<A>(_:forKey:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  sub_23C7DEF5C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v1[5];
  v9 = v1[6];
  sub_23C7E7E34(v1 + 2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88))(v5, v3, v8, v9);
  if ((v10 & 1) != 0)
    sub_23C7DF37C(v7, 1);
  else
    static DatabaseValueConvertible.decodeIfPresent(fromRow:atUncheckedIndex:)();
  sub_23C7DEF28();
}

#error "23C8F47A8: call analysis failed (funcsize=130)"

void Row.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  v7 = v3[5];
  v6 = v3[6];
  sub_23C7E7E34(v3 + 2, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88))(a2, a3, v7, v6);
  if ((v8 & 1) != 0)
  {
    v15 = 0uLL;
    v16 = -1;
    v9 = (_QWORD *)sub_23C7E62C0();
    RowDecodingContext.init(row:key:)(v9, &v15, (uint64_t)v17);
    sub_23C83256C();
    sub_23C7DB694();
    static RowDecodingError.columnNotFound(_:context:)(a2, a3, (uint64_t)v17, v10);
    v11 = v17[1];
    v12 = v17[2];
    v13 = v18;
    swift_release();
    sub_23C815EF0(v11, v12, v13);
    sub_23C7DB398();
    v14 = sub_23C7EE074();
    sub_23C7E13C4(v14);
    swift_willThrow();
  }
  else
  {
    static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)();
  }
}

uint64_t Row.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_23C902988(a1, a2, a3);
  Row.subscript.getter(v5, v6, a4);
  return swift_bridgeObjectRelease();
}

#error "23C8F4BEC: call analysis failed (funcsize=157)"

void sub_23C8F4C20()
{
  void (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C902828();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
  v1(v8, v8, v9, v5, v3);
  sub_23C7DBCD0();
  sub_23C7E0778();
}

void Row.dataNoCopy(atIndex:)(uint64_t a1)
{
  sub_23C8F4D6C(a1);
  sub_23C7EE340();
}

void sub_23C8F4D6C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;

  if (a1 < 0 || (sub_23C902A50(), v3 ^ v4 | v2))
  {
    sub_23C7DC484();
    sub_23C7E4588();
    __break(1u);
  }
  else
  {
    sub_23C902EC0();
    sub_23C7E1A4C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 80));
    sub_23C7DB764();
  }
}

void Row.dataNoCopy(named:)(uint64_t a1, uint64_t a2)
{
  sub_23C8F4E14(a1, a2);
  sub_23C7EE340();
}

uint64_t sub_23C8F4E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = v2;
  v6 = *(_QWORD *)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = (_QWORD *)sub_23C90297C();
  sub_23C7E7E34(v8, v9);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 88))(a1, a2, v6, v7);
  if ((v11 & 1) != 0)
    return 0;
  v12 = v10;
  v14 = *(_QWORD *)(v3 + 40);
  v13 = *(_QWORD *)(v3 + 48);
  v15 = (_QWORD *)sub_23C902798();
  sub_23C7E7E34(v15, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 80))(v12, v14, v13);
}

uint64_t Row.dataNoCopy<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_23C902988(a1, a2, a3);
  sub_23C8F4E14(v3, v4);
  sub_23C7DB62C();
  return sub_23C7DF8B0();
}

uint64_t Row.databaseValues.getter()
{
  return swift_retain();
}

uint64_t sub_23C8F4F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_23C7E56A4(v3, v4, v5);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void sub_23C8F4FDC()
{
  uint64_t v0;
  void (*v1)(void);

  sub_23C9027E0();
  v1();
  if (v0)
  {
    sub_23C7DBDA8();
    __break(1u);
  }
  else
  {
    sub_23C7E252C();
  }
}

uint64_t sub_23C8F5020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  Row.scopes.getter();
  v76 = a2;
  v62 = a3;
  v9 = Row.ScopesTreeView.subscript.getter(a2, a3);
  sub_23C7DB624();
  sub_23C7DB398();
  sub_23C7DB3DC();
  sub_23C7E8DDC();
  if (v9)
  {
    Row.containsNonNullValue.getter();
    if ((v10 & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(a5 + 8))(v9);
    }
    else
    {
      v25 = v76;
      *(_QWORD *)&v66 = v76;
      *((_QWORD *)&v66 + 1) = v62;
      v67 = 2;
      sub_23C902740();
      sub_23C7DF858();
      RowDecodingContext.init(row:key:)(v5, &v66, (uint64_t)&v68);
      v26 = v70;
      v27 = v71;
      v28 = v73;
      v59 = v72;
      v29 = v74;
      v54 = v69;
      v56 = v75;
      sub_23C902A7C();
      sub_23C911634();
      sub_23C902DD4();
      *(_QWORD *)&v66 = 0x2065706F6373;
      *((_QWORD *)&v66 + 1) = 0xE600000000000000;
      v64 = v25;
      v65 = v62;
      sub_23C7DF858();
      sub_23C902D94();
      sub_23C7DFE4C();
      sub_23C7DB624();
      sub_23C7DFE4C();
      v63 = *((_QWORD *)&v66 + 1);
      v76 = v66;
      v30 = sub_23C902740();
      v31 = sub_23C7FC8A8(v30);
      swift_release();
      sub_23C815EDC(v54, v26, v27);
      sub_23C7DBCC8();
      sub_23C902F6C(v29);
      swift_release();
      sub_23C815EF0(v54, v26, v27);
      sub_23C7DB62C();
      sub_23C7E13C4(v29);
      sub_23C83256C();
      sub_23C7DB694();
      v32 = v76;
      *(_QWORD *)v33 = a4;
      *(_QWORD *)(v33 + 8) = v32;
      *(_QWORD *)(v33 + 16) = v63;
      *(_QWORD *)(v33 + 24) = v31;
      *(_QWORD *)(v33 + 32) = v54;
      *(_QWORD *)(v33 + 40) = v26;
      *(_QWORD *)(v33 + 48) = v27;
      *(_QWORD *)(v33 + 56) = v59;
      *(_QWORD *)(v33 + 64) = v28;
      *(_QWORD *)(v33 + 72) = v29;
      *(_QWORD *)(v33 + 88) = 0;
      *(_QWORD *)(v33 + 96) = 0;
      *(_QWORD *)(v33 + 80) = v56;
      *(_BYTE *)(v33 + 104) = 1;
      swift_willThrow();
      return sub_23C7DF8F8();
    }
  }
  else
  {
    Row.scopes.getter();
    Row.ScopesTreeView.names.getter();
    v13 = v12;
    sub_23C7DB3DC();
    sub_23C7DB398();
    sub_23C7DB62C();
    sub_23C7DE904();
    if (*(_QWORD *)(v13 + 16))
    {
      v67 = -1;
      v14 = (_QWORD *)sub_23C902740();
      sub_23C902DFC(v14, v15, v16, v17, v18, v19, v20, v21, v51, v52, v53);
      sub_23C902A7C();
      sub_23C911634();
      sub_23C902DD4();
      sub_23C7EBCA4();
      *(_QWORD *)&v66 = 0xD000000000000011;
      *((_QWORD *)&v66 + 1) = v22;
      v65 = v62;
      sub_23C7DBBB0();
      sub_23C902D94();
      sub_23C7DFE4C();
      sub_23C7DB624();
      sub_23C7DFE4C();
      sub_23C7DBBB8();
      sub_23C7FCB94();
      v24 = v23;
      sub_23C7DC474();
      v64 = v24;
      sub_23C8DDF34(&v64);
      if (!v58)
      {
        sub_23C7DC474();
        sub_23C902F58();
      }
      result = swift_release();
      __break(1u);
    }
    else
    {
      sub_23C7DC474();
      v67 = -1;
      v34 = (_QWORD *)sub_23C902740();
      sub_23C902DFC(v34, v35, v36, v37, v38, v39, v40, v41, v51, v52, v53);
      v42 = v70;
      v43 = v71;
      v44 = v73;
      v61 = v72;
      v45 = v74;
      v46 = v75;
      sub_23C902A7C();
      sub_23C911634();
      sub_23C902DD4();
      sub_23C7EBCA4();
      *((_QWORD *)&v66 + 1) = v47;
      v64 = v76;
      v65 = v62;
      sub_23C7DBCC8();
      sub_23C902D94();
      sub_23C7DFE4C();
      sub_23C7DB624();
      v57 = *((_QWORD *)&v66 + 1);
      v48 = sub_23C7E66DC();
      v55 = sub_23C7FC8A8(v48);
      sub_23C7E8DDC();
      sub_23C902CB0(v69, v70);
      sub_23C7DBBB8();
      sub_23C7E76BC(v74);
      sub_23C7E8DDC();
      v49 = v69;
      sub_23C902E94(v69);
      sub_23C7DC474();
      sub_23C7E13C4(v74);
      sub_23C83256C();
      sub_23C7DB694();
      *(_QWORD *)v50 = v76;
      *(_QWORD *)(v50 + 8) = v62;
      *(_QWORD *)(v50 + 16) = 2;
      *(_QWORD *)(v50 + 24) = 0xD000000000000011;
      *(_QWORD *)(v50 + 32) = v57;
      *(_QWORD *)(v50 + 40) = v55;
      *(_QWORD *)(v50 + 48) = v49;
      *(_QWORD *)(v50 + 56) = v42;
      *(_QWORD *)(v50 + 64) = v43;
      *(_QWORD *)(v50 + 72) = v61;
      *(_QWORD *)(v50 + 80) = v44;
      *(_QWORD *)(v50 + 88) = v45;
      *(_QWORD *)(v50 + 96) = v46;
      *(_BYTE *)(v50 + 104) = 0;
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t Row.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_23C8F55D4(a1, a2, a3);
}

uint64_t sub_23C8F55D4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  Row.scopes.getter();
  v5 = sub_23C7DEAE4();
  v7 = Row.ScopesTreeView.subscript.getter(v5, v6);
  sub_23C7DB3DC();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  sub_23C7DA9AC();
  if (!v7)
    goto LABEL_5;
  Row.containsNonNullValue.getter();
  if ((v8 & 1) == 0)
  {
    swift_release();
LABEL_5:
    v9 = 1;
    return sub_23C7DF37C(a3, v9);
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v7, a1);
  v9 = 0;
  return sub_23C7DF37C(a3, v9);
}

void sub_23C8F56B8()
{
  uint64_t v0;
  void (*v1)(void);

  sub_23C9027E0();
  v1();
  if (v0)
  {
    sub_23C7DBDA8();
    __break(1u);
  }
  else
  {
    sub_23C7E252C();
  }
}

void sub_23C8F5700()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_23C7DEF5C();
  v33 = v2;
  v4 = v3;
  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  v29 = v0 + 5;
  sub_23C7E07C4();
  v9 = v0[5].n128_i64[1];
  v41 = v0[5].n128_u64[0];
  v42 = v9;
  sub_23C7DEF00();
  sub_23C7E0808();
  v31 = v6;
  v30 = v4;
  v10 = Row.PrefetchedRowsView.subscript.getter();
  sub_23C7DB398();
  v11 = v10;
  swift_bridgeObjectRelease();
  if (v10)
  {
    sub_23C9113C4();
    if (v10 >> 62)
    {
      sub_23C7DEF00();
      sub_23C902BB0();
      sub_23C7E087C();
    }
    sub_23C7EE074();
    sub_23C9113A0();
    if (v10 >> 62)
    {
      sub_23C7DEF00();
      v12 = sub_23C902BB0();
      sub_23C7E087C();
      if (!v12)
      {
LABEL_17:
        sub_23C7E087C();
LABEL_19:
        sub_23C7DEF28();
        return;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v12)
        goto LABEL_17;
    }
    if (v12 >= 1)
    {
      v16 = 0;
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 8);
      do
      {
        if ((v10 & 0xC000000000000001) != 0)
          MEMORY[0x242625290](v16, v11);
        else
          sub_23C87572C();
        ++v16;
        v18 = sub_23C87572C();
        v17(v18, AssociatedTypeWitness, v33);
        sub_23C9113AC();
        sub_23C7DA9AC();
        v11 = v10;
      }
      while (v12 != v16);
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    if (!*(_QWORD *)(sub_23C902C38(*v29) + 16))
    {
      sub_23C7DB624();
      v40 = -1;
      v19 = (_QWORD *)sub_23C902740();
      sub_23C9026E0(v19);
      v20 = v43;
      v35 = v45;
      sub_23C902754(v47);
      swift_bridgeObjectRelease();
      sub_23C7EBCA4();
      v39 = v21;
      v36 = v6;
      v37 = v4;
      sub_23C7DBBB8();
      sub_23C9029F8();
      sub_23C910F5C();
      v22 = v48;
      v23 = v44;
      sub_23C7DB624();
      v34 = v39;
      v24 = sub_23C7DF5CC();
      v32 = sub_23C7FC8A8(v24);
      sub_23C7DFE08();
      v25 = v42;
      sub_23C902CB0(v42, v43);
      v26 = v46;
      sub_23C7E6260();
      sub_23C902F6C(v28);
      sub_23C7DFE08();
      sub_23C902E94(v42);
      sub_23C7DB624();
      sub_23C902C50();
      sub_23C83256C();
      sub_23C7DB694();
      *(_QWORD *)v27 = v31;
      *(_QWORD *)(v27 + 8) = v30;
      *(_QWORD *)(v27 + 16) = 3;
      *(_QWORD *)(v27 + 24) = 0xD000000000000023;
      *(_QWORD *)(v27 + 32) = v34;
      *(_QWORD *)(v27 + 40) = v32;
      *(_QWORD *)(v27 + 48) = v25;
      *(_QWORD *)(v27 + 56) = v20;
      *(_QWORD *)(v27 + 64) = v23;
      *(_QWORD *)(v27 + 72) = v35;
      *(_QWORD *)(v27 + 80) = v26;
      *(_QWORD *)(v27 + 88) = v28;
      *(_QWORD *)(v27 + 96) = v22;
      *(_BYTE *)(v27 + 104) = 0;
      sub_23C7DBBB8();
      swift_willThrow();
      goto LABEL_19;
    }
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v13 = (_QWORD *)sub_23C902740();
    sub_23C9026E0(v13);
    sub_23C90294C();
    sub_23C9028E8();
    v36 = v6;
    v37 = v4;
    swift_bridgeObjectRetain();
    sub_23C9029F8();
    sub_23C910F5C();
    sub_23C7DB398();
    sub_23C902CE0();
    sub_23C7DF858();
    sub_23C7FCB94();
    v15 = v14;
    sub_23C7DB624();
    v36 = v15;
    sub_23C8DDF34(&v36);
    if (!v1)
    {
      sub_23C7DB624();
      sub_23C902F58();
    }
  }
  swift_release();
  __break(1u);
}

void sub_23C8F5C2C()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_23C7DEF5C();
  v44 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v8;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v46 = (char *)v42 - v11;
  v12 = v0 + 5;
  sub_23C7E07C4();
  v13 = v0[5].n128_i64[1];
  v55 = v0[5].n128_i64[0];
  v56 = v13;
  sub_23C7DBBB8();
  sub_23C7DF858();
  v14 = Row.PrefetchedRowsView.subscript.getter();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  if (!v14)
  {
    v21 = v5;
    v63 = v7;
    if (!*(_QWORD *)(sub_23C902C38(*v12) + 16))
    {
      sub_23C7DC474();
      v52 = 0;
      v53 = 0;
      v54 = -1;
      v26 = (_QWORD *)sub_23C7DF5CC();
      sub_23C9026E0(v26);
      v27 = v56;
      v28 = v58;
      v29 = v60;
      v46 = v59;
      v47 = v57;
      v43 = v61;
      sub_23C902754(v62);
      swift_bridgeObjectRelease();
      sub_23C7EBCA4();
      v52 = 0xD000000000000023;
      v53 = v30;
      v50 = v63;
      v51 = v21;
      sub_23C7DF858();
      sub_23C9029F8();
      v31 = v21;
      sub_23C910F5C();
      sub_23C7DB62C();
      sub_23C9029E0();
      v32 = sub_23C7E66DC();
      v42[0] = sub_23C7FC8A8(v32);
      sub_23C7E8DDC();
      v33 = v47;
      v34 = v28;
      LODWORD(v48) = v28;
      sub_23C815EDC(v27, v47, v28);
      sub_23C7DBBB0();
      v35 = v43;
      v36 = v42[1];
      sub_23C7E76BC(v43);
      swift_release();
      sub_23C815EF0(v27, v33, v34);
      v49 = v29;
      v37 = v42[0];
      swift_bridgeObjectRelease();
      sub_23C902D14();
      sub_23C83256C();
      sub_23C7DB694();
      *(_QWORD *)v38 = v63;
      *(_QWORD *)(v38 + 8) = v31;
      v39 = v48;
      *(_QWORD *)(v38 + 16) = 3;
      v40 = v44;
      *(_QWORD *)(v38 + 24) = v45;
      *(_QWORD *)(v38 + 32) = v40;
      *(_QWORD *)(v38 + 40) = v37;
      *(_QWORD *)(v38 + 48) = v27;
      *(_QWORD *)(v38 + 56) = v33;
      *(_QWORD *)(v38 + 64) = v39;
      v41 = v49;
      *(_QWORD *)(v38 + 72) = v46;
      *(_QWORD *)(v38 + 80) = v41;
      *(_QWORD *)(v38 + 88) = v35;
      *(_QWORD *)(v38 + 96) = v36;
      *(_BYTE *)(v38 + 104) = 0;
      sub_23C7E0808();
      swift_willThrow();
      goto LABEL_19;
    }
    v52 = 0;
    v53 = 0;
    v54 = -1;
    v22 = (_QWORD *)sub_23C7DF5CC();
    sub_23C9026E0(v22);
    LODWORD(v48) = v58;
    v46 = v59;
    v47 = v57;
    v49 = v60;
    sub_23C90294C();
    sub_23C9028E8();
    v50 = v7;
    v51 = v5;
    v43 = v5;
    sub_23C7DF858();
    sub_23C9029F8();
    sub_23C910F5C();
    sub_23C7DB624();
    sub_23C902CE0();
    sub_23C7DBBB8();
    sub_23C7FCB94();
    v24 = v23;
    sub_23C7DC474();
    v50 = v24;
    v25 = v44;
    sub_23C8DDF34(&v50);
    if (!v25)
    {
      sub_23C7DC474();
      sub_23C902F58();
    }
    goto LABEL_21;
  }
  if (v14 >> 62)
  {
    sub_23C7DBBB8();
    sub_23C902BB0();
    sub_23C7DC474();
  }
  v55 = sub_23C911298();
  if (v14 >> 62)
  {
    sub_23C7DBBB8();
    v15 = sub_23C902BB0();
    sub_23C7DC474();
    if (v15)
      goto LABEL_6;
LABEL_12:
    sub_23C7DC474();
LABEL_19:
    sub_23C7E7E20();
    sub_23C7DEF28();
    return;
  }
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
    goto LABEL_12;
LABEL_6:
  if (v15 >= 1)
  {
    v45 = v15;
    v16 = 0;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 8);
    v18 = v46;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        v19 = sub_23C90297C();
        MEMORY[0x242625290](v19);
      }
      else
      {
        sub_23C7EFAC4();
      }
      ++v16;
      v20 = sub_23C7EFAC4();
      v17(v20, v3, v49);
      sub_23C9112B0();
      sub_23C87E0FC();
      sub_23C9112A4();
      sub_23C7DF8F8();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v3);
    }
    while (v45 != v16);
    goto LABEL_12;
  }
  __break(1u);
LABEL_21:
  swift_release();
  __break(1u);
}

_QWORD *Row.unscoped.getter()
{
  uint64_t (*v0)(void);
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;

  sub_23C902770();
  sub_23C902D9C();
  v1 = (_QWORD *)v0();
  sub_23C7E6180();
  if (*(_QWORD *)(v1[10] + 16))
  {
    v2 = v1[5];
    v3 = v1[6];
    sub_23C7E7E34(v1 + 2, v2);
    v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 112))(v1, v2, v3);
    sub_23C8461F0(v4 + 16, (uint64_t)v15);
    sub_23C7DFA18();
    v5 = v16;
    v6 = v17;
    sub_23C800944((uint64_t)v15, v16);
    sub_23C9027A4();
    MEMORY[0x24BDAC7A8](v7);
    sub_23C7DE95C();
    (*(void (**)(uint64_t))(v10 + 16))(v9 - v8);
    v11 = sub_23C902E10();
    v13 = sub_23C90181C(v11, v12, v5, v6);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
    sub_23C7E6604();
    return v13;
  }
  return v1;
}

BOOL Row.PrefetchedRowsView.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t RowCursor.statement.getter()
{
  return swift_retain();
}

uint64_t RowCursor._isDone.getter()
{
  uint64_t v0;

  sub_23C7E6180();
  return *(unsigned __int8 *)(v0 + 24);
}

void RowCursor._isDone.setter(char a1)
{
  uint64_t v1;

  sub_23C7E6180();
  *(_BYTE *)(v1 + 24) = a1;
  sub_23C7DF2C8();
}

void RowCursor._isDone.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t (*sub_23C8F631C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_23C8F6358@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RowCursor._element(sqliteStatement:)();
  *a1 = result;
  return result;
}

uint64_t sub_23C8F6384@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23C8F6408(a1, a2);
}

void static Row.fetchSet(_:arguments:adapter:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *inited;

  v4 = sub_23C902B48(a1, a2, a3);
  if (!v3)
  {
    v5 = v4;
    sub_23C7E79A8(&qword_25430D548);
    inited = (_QWORD *)swift_initStackObject();
    inited[2] = v5;
    inited[3] = sub_23C8F6384;
    inited[4] = 0;
    sub_23C8EFC18((uint64_t)inited, MEMORY[0x24BEE4B08], (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C8DF6DC);
  }
  sub_23C902F0C();
}

uint64_t sub_23C8F6408@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  v5 = *(_QWORD *)(*a1 + 48);
  sub_23C7E7E34((_QWORD *)(*a1 + 16), v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 112))(v3, v4, v5);
  *a2 = result;
  return result;
}

void static Row.fetchCursor(_:sql:arguments:adapter:)()
{
  sub_23C8F137C();
}

uint64_t static Row.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C9028DC(a1, a2, a3);
  if (v3)
    return sub_23C7E7E20();
  v4 = v14;
  if (!v14)
  {
    sub_23C7F5610(0);
    sub_23C7F1754(0);
    v11 = 0;
    v12 = 0;
    v5 = sub_23C7DF5CC();
    v6 = static Row.fetchCursor(_:arguments:adapter:)(v5, &v11, (uint64_t)&v13);
    sub_23C7EDB70(v6, v7, v11, v12);
    sub_23C7DFE08();
    return sub_23C7E7E20();
  }
  v9 = v15;
  v10 = sub_23C7DB388();
  *(_QWORD *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 24) = v9;
  sub_23C7F5610(v4);
  result = sub_23C7F1754((uint64_t)sub_23C82CA7C);
  __break(1u);
  return result;
}

uint64_t static Row.fetchAll<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[6];
  uint64_t (*v19)(uint64_t, uint64_t);

  v5 = v3;
  sub_23C9028DC(a1, a2, a3);
  if (!v4)
  {
    sub_23C7E7764();
    sub_23C82CECC();
    static Row.fetchAll(_:arguments:adapter:)(v7, v8, v9);
    if (v18 == (_QWORD *)-8)
    {
      v5 = v10;
      v13 = sub_23C7DC4C4();
      v15 = v19;
      if (v19)
      {
        sub_23C7DC47C();
        v16 = v15(a1, v5);
        sub_23C7EDB70(v16, v17, 0, 0);
        sub_23C7F1754((uint64_t)v15);
        if (v18 != (_QWORD *)-8)
          sub_23C7DB62C();
      }
      else
      {
        sub_23C7EDB70(v13, v14, 0, 0);
      }
    }
    else
    {
      sub_23C7EDB70(v10, v11, 0, 0);
      sub_23C7DC4C4();
    }
  }
  return v5;
}

void static Row.fetchSet(_:sql:arguments:adapter:)()
{
  sub_23C8F137C();
}

void static Row.fetchSet<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[40];
  void (*v17)(uint64_t, unint64_t);

  sub_23C9028DC(a1, a2, a3);
  if (!v3)
  {
    v5 = v17;
    v15 = 0uLL;
    if (v17)
    {
      v6 = sub_23C82CFC8();
      sub_23C7F5610(v6);
      v7 = sub_23C7E7764();
      static Row.fetchAll(_:arguments:adapter:)(v7, &v15, (uint64_t)v16);
      v12 = v11;
      sub_23C7DC4C4();
      v5(a1, v12);
      sub_23C7F72A8(v12);
      v13 = sub_23C902F2C();
      sub_23C7EDB70(v13, v14, v15);
    }
    else
    {
      v8 = sub_23C7E7764();
      static Row.fetchSet(_:arguments:adapter:)(v8, &v15, (uint64_t)v16);
      sub_23C7EDB70(v9, v10, v15);
      sub_23C7DC4C4();
    }
  }
  sub_23C7E7E20();
  sub_23C7E0864();
}

void static Row.fetchOne<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  uint64_t (*v22)(uint64_t, uint64_t);

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v21, a1, 1);
  if (!v4)
  {
    sub_23C7E7764();
    sub_23C82CECC();
    v9 = static Row.fetchOne(_:arguments:adapter:)(v6, v7, v8);
    if (v21 == (_QWORD *)-8)
    {
      v11 = v9;
      v12 = sub_23C7DC4C4();
      if (v11 && (v14 = v22) != 0)
      {
        sub_23C7E79A8(&qword_25430DBC8);
        v15 = sub_23C7DB388();
        *(_OWORD *)(v15 + 16) = xmmword_23C9134B0;
        *(_QWORD *)(v15 + 32) = v11;
        v20 = v15;
        sub_23C9110DC();
        v16 = sub_23C7EE074();
        sub_23C7F5610(v16);
        sub_23C7DF5CC();
        v17 = v14(a1, v20);
        sub_23C7EDB70(v17, v18);
        swift_bridgeObjectRelease();
        v19 = sub_23C7EE074();
        sub_23C7F1754(v19);
      }
      else
      {
        sub_23C7EDB70(v12, v13, 0, 0);
      }
    }
    else
    {
      sub_23C7EDB70(v9, v10, 0, 0);
      swift_release();
    }
  }
  sub_23C7E0864();
}

uint64_t Row.subscript.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_23C902828();
  v2 = *v1;
  if (*v1 < 0 || v2 >= v0[9])
  {
    sub_23C7DC484();
    result = sub_23C7E4588();
    __break(1u);
  }
  else
  {
    v3 = v0[5];
    v4 = v0[6];
    v5 = (_QWORD *)sub_23C902798();
    sub_23C7E7E34(v5, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v4);
    v8 = v0[5];
    v7 = v0[6];
    sub_23C7E7E34(v0 + 2, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v2, v8, v7);
    return sub_23C7EE074();
  }
  return result;
}

uint64_t Row.ScopesView.names.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8F6954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD v15[5];

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  sub_23C901760(a1, v15);
  v3 = v15[1];
  v4 = v15[3];
  v5 = v15[4];
  v6 = (unint64_t)(v15[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v8 = v4;
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_24;
    }
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v9 >= v6)
      goto LABEL_29;
    v10 = *(_QWORD *)(v3 + 8 * v9);
    ++v4;
    if (!v10)
    {
      v4 = v8 + 2;
      if (v8 + 2 >= v6)
        goto LABEL_29;
      v10 = *(_QWORD *)(v3 + 8 * v4);
      if (!v10)
      {
        v4 = v8 + 3;
        if (v8 + 3 >= v6)
          goto LABEL_29;
        v10 = *(_QWORD *)(v3 + 8 * v4);
        if (!v10)
        {
          v4 = v8 + 4;
          if (v8 + 4 >= v6)
            goto LABEL_29;
          v10 = *(_QWORD *)(v3 + 8 * v4);
          if (!v10)
          {
            v4 = v8 + 5;
            if (v8 + 5 >= v6)
              goto LABEL_29;
            v10 = *(_QWORD *)(v3 + 8 * v4);
            if (!v10)
            {
              v4 = v8 + 6;
              if (v8 + 6 >= v6)
                goto LABEL_29;
              v10 = *(_QWORD *)(v3 + 8 * v4);
              if (!v10)
              {
                v11 = v8 + 7;
                while (v11 < v6)
                {
                  v10 = *(_QWORD *)(v3 + 8 * v11++);
                  if (v10)
                  {
                    v4 = v11 - 1;
                    goto LABEL_23;
                  }
                }
LABEL_29:
                v14 = 1;
LABEL_30:
                sub_23C80096C();
                return v14;
              }
            }
          }
        }
      }
    }
LABEL_23:
    v5 = (v10 - 1) & v10;
LABEL_24:
    if (*(_QWORD *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      sub_23C7E94B8();
      v13 = v12;
      result = swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        continue;
    }
    v14 = 0;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void Row.ScopesView.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];

  sub_23C7DE8EC();
  v3 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = sub_23C7E94B8();
    if ((v5 & 1) != 0)
    {
      sub_23C8F76A8((uint64_t)v21, v4, *(_DWORD *)(v3 + 36), 0, v3);
      v7 = v6;
      v9 = v8;
      v10 = type metadata accessor for Row();
      sub_23C902DE8();
      sub_23C902A5C();
      sub_23C9027A4();
      MEMORY[0x24BDAC7A8](v11);
      sub_23C9025E8(v12, v13, v20);
      v14 = sub_23C7E62C0();
      v15 = sub_23C902C74(v14, v2, v10, v1);
      sub_23C902C88();
      sub_23C7DF858();
      sub_23C902FE0(v7, v9);
      v17 = v16;
      v19 = v18;
      sub_23C7DB624();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
      if (v17)
      {
        sub_23C7DB398();
        sub_23C7E6180();
        *(_QWORD *)(v15 + 80) = v17;
        *(_QWORD *)(v15 + 88) = v19;
        sub_23C7DB624();
        sub_23C7DB398();
      }
      sub_23C7DB624();
    }
  }
  sub_23C7DBCB0();
}

BOOL static Row.PrefetchedRowsView.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BOOL8 result;

  result = 0;
  if ((sub_23C8482D8(*a1, *a2) & 1) != 0)
  {
    v2 = sub_23C7DF8B0();
    sub_23C878AF8(v2, v3);
    if ((v4 & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_23C8F6C94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  unsigned __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v2 = v1;
  if (!a1)
  {
    v4 = v1[5];
    v5 = v1[6];
    sub_23C7E7E34(v1 + 2, v4);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104))(v1, v4, v5);
    static Row.== infix(_:_:)();
    v7 = v6;
    swift_release();
    if ((v7 & 1) != 0)
    {
      swift_beginAccess();
      if (!*(_QWORD *)(v2[10] + 16))
        return Row.description.getter();
    }
  }
  v8 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    v32 = a1 + 1;
    v33 = 8224;
    v34 = 0xE200000000000000;
    sub_23C7E79A8(&qword_25430CEA0);
    sub_23C7E12BC((uint64_t)qword_25430CD00);
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    v9 = Row.description.getter();
    if (a1)
    {
      v35 = v9;
      v36 = v10;
    }
    else
    {
      v32 = 549426914;
      v33 = 0xA400000000000000;
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v35 = 549426914;
      v36 = 0xA400000000000000;
      v11 = v2[5];
      v12 = v2[6];
      sub_23C7E7E34(v2 + 2, v11);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v12 + 104))(v2, v11, v12);
      static Row.== infix(_:_:)();
      if ((v13 & 1) == 0)
      {
        sub_23C910F5C();
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        Row.description.getter();
        v32 = 10;
        v33 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    Row.scopes.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = sub_23C7FC968(v32, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)&v31 = v14;
    sub_23C900D3C((uint64_t *)&v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v15 = *(_QWORD *)(v31 + 16);
    if (v15)
    {
      v16 = v31 + 48;
      do
      {
        v16 += 24;
        v32 = 10;
        v33 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23C910F5C();
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        v17 = v32;
        v18 = v33;
        sub_23C8F6C94(v8);
        v32 = v17;
        v33 = v18;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C910F5C();
        swift_release();
        swift_bridgeObjectRelease();
        --v15;
      }
      while (v15);
    }
    swift_release();
    v19 = v2;
    swift_beginAccess();
    v31 = *((_OWORD *)v2 + 5);
    Row.PrefetchedRowsView.keys.getter();
    swift_bridgeObjectRetain();
    sub_23C7FCB94();
    v21 = v20;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v31 = v21;
    sub_23C8DDF34((uint64_t *)&v31);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v31 + 16);
    if (!v22)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_release();
      return v35;
    }
    v23 = v31 + 40;
    while (1)
    {
      v24 = v19[11];
      *(_QWORD *)&v31 = v19[10];
      *((_QWORD *)&v31 + 1) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = Row.PrefetchedRowsView.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v25)
        goto LABEL_28;
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        v26 = sub_23C9117C0();
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v26 > 1)
      {
        *(_QWORD *)&v31 = sub_23C911880();
        *((_QWORD *)&v31 + 1) = v27;
        sub_23C910F5C();
      }
      v23 += 16;
      *(_QWORD *)&v31 = 10;
      *((_QWORD *)&v31 + 1) = 0xE100000000000000;
      sub_23C910F5C();
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = *((_QWORD *)&v31 + 1);
      v28 = v31;
      *(_QWORD *)&v31 = 8250;
      *((_QWORD *)&v31 + 1) = 0xE200000000000000;
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v31 = __PAIR128__(v29, v28);
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      --v22;
      v19 = v2;
      if (!v22)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

BOOL static RowIndex.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_23C8F73C4(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F73D0(*a1, *a2);
}

BOOL sub_23C8F73D0(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_23C8F73DC(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F73E8(*a1, *a2);
}

BOOL sub_23C8F73E8(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_23C8F73F4(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8F1794(*a1, *a2);
}

Swift::Int sub_23C8F7400@<X0>(GRDBInternal::RowIndex a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result;

  result = RowIndex.distance(to:)(a1);
  *a2 = result;
  return result;
}

Swift::Int __swiftcall RowIndex.distance(to:)(GRDBInternal::RowIndex to)
{
  _QWORD *v1;
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(*(_QWORD *)to.index, *v1);
  result = *(_QWORD *)to.index - *v1;
  if (v2)
    __break(1u);
  return result;
}

GRDBInternal::RowIndex sub_23C8F743C(Swift::Int *a1)
{
  return RowIndex.advanced(by:)(*a1);
}

GRDBInternal::RowIndex __swiftcall RowIndex.advanced(by:)(GRDBInternal::RowIndex by)
{
  _QWORD *v1;
  _QWORD *v2;

  if (__OFADD__(*v2, by.index))
    __break(1u);
  else
    sub_23C8C4084(v1);
  return by;
}

_QWORD *sub_23C8F7458(_QWORD *a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  return sub_23C8F7480(a1, a2, a3 & 1, *a4, *a5, *a6);
}

_QWORD *sub_23C8F7480(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (__OFADD__(a4, a6))
  {
    __break(1u);
  }
  else
  {
    *result = a4 + a6;
    return 0;
  }
  return result;
}

BOOL static RowIndex.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t Row.ScopesView.startIndex.getter()
{
  uint64_t v0;

  return sub_23C8F74D4(*(_QWORD *)(v0 + 8));
}

uint64_t sub_23C8F74D4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 128;
  for (i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t Row.ScopesView.endIndex.getter()
{
  uint64_t v0;

  return 1 << *(_BYTE *)(*(_QWORD *)(v0 + 8) + 32);
}

uint64_t Row.ScopesView.index(after:)(uint64_t a1, int a2, char a3)
{
  uint64_t v3;

  return sub_23C901798(a1, a2, a3 & 1, *(_QWORD *)(v3 + 8));
}

uint64_t Row.ScopesView.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[120];
  uint64_t v23;
  uint64_t v24;

  sub_23C7DE8EC();
  v23 = v3;
  v24 = v4;
  sub_23C8F76A8((uint64_t)v22, v6, v7, v5 & 1, *(_QWORD *)(v0 + 8));
  v8 = type metadata accessor for Row();
  sub_23C902DE8();
  sub_23C902A5C();
  sub_23C9027A4();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C9025E8(v10, v11, v21);
  v12 = sub_23C7E62C0();
  v13 = sub_23C902C74(v12, v2, v8, v1);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v21);
  sub_23C7DB3D4();
  v14 = sub_23C7DF8B0();
  sub_23C902FE0(v14, v15);
  v17 = v16;
  v19 = v18;
  sub_23C7DE934();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v22);
  if (v17)
  {
    sub_23C7DB3DC();
    sub_23C7E6180();
    *(_QWORD *)(v13 + 80) = v17;
    *(_QWORD *)(v13 + 88) = v19;
    swift_bridgeObjectRelease();
    sub_23C7DB3DC();
  }
  return sub_23C7DF8B0();
}

void sub_23C8F76A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    sub_23C8461F0(*(_QWORD *)(a5 + 56) + 40 * a2, a1);
    sub_23C7DB3D4();
    sub_23C7DF8B0();
    sub_23C7DB390();
    return;
  }
LABEL_8:
  __break(1u);
}

void sub_23C8F772C(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = Row.ScopesView.startIndex.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3 & 1;
  sub_23C7DB390();
}

void sub_23C8F7754(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = Row.ScopesView.endIndex.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  sub_23C7DB390();
}

void sub_23C8F7778(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = Row.ScopesView.subscript.getter();
  a1[1] = v2;
  a1[2] = v3;
  sub_23C7DB390();
}

uint64_t sub_23C8F77B4()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_23C8F77DC(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];

  v3 = a1[1];
  v4 = *a1;
  v5[0] = v3;
  *(_OWORD *)((char *)v5 + 9) = *(__int128 *)((char *)a1 + 25);
  sub_23C8F0308(&v4, *v2, v2[1], v2[2], v2[3], a2);
}

uint64_t sub_23C8F7814@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23C8F0540(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_23C8F7820()
{
  uint64_t *v0;

  return sub_23C8EF5DC(*v0, v0[1]);
}

uint64_t sub_23C8F782C()
{
  uint64_t *v0;

  return sub_23C8D6A2C(*v0, v0[1]);
}

void sub_23C8F7838(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t sub_23C8F7848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  char v7;

  result = sub_23C8F05CC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *v3, v3[1]);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  return result;
}

uint64_t sub_23C8F788C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v7;
  char v8;

  result = sub_23C8F07A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), *v4, v4[1]);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = v8;
  return result;
}

uint64_t sub_23C8F78EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C8D6AC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *v2, v2[1]);
}

void sub_23C8F792C(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  sub_23C8F7944(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8F09EC);
}

void sub_23C8F7938(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  sub_23C8F7944(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8F0AEC);
}

void sub_23C8F7944(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];

  v6 = *a1;
  v7 = a1[1];
  v8 = *((unsigned __int8 *)a1 + 16);
  v9 = a2[1];
  v10 = *a2;
  v11[0] = v9;
  *(_OWORD *)((char *)v11 + 9) = *(__int128 *)((char *)a2 + 25);
  a5(v6, v7, v8, &v10, *v5, v5[1], v5[2], v5[3]);
  sub_23C7DF2C8();
}

void sub_23C8F798C(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  _OWORD v7[2];

  v2 = a1[1];
  v4 = *a1;
  v5[0] = v2;
  *(_OWORD *)((char *)v5 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v6 = *a2;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(__int128 *)((char *)a2 + 25);
  sub_23C8F0C00(&v4, &v6);
}

void sub_23C8F79D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  *(_QWORD *)a2 = Row.ScopesView.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4 & 1;
  sub_23C7DB390();
}

void sub_23C8F7A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_23C7DF844();
  v1 = v0;
  v2 = sub_23C902890();
  v6 = sub_23C901798(v2, v3, v4, v5);
  v8 = v7;
  v10 = v9;
  v11 = sub_23C902890();
  sub_23C7F91AC(v11, v12, v13);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v8;
  *(_BYTE *)(v1 + 16) = v10 & 1;
  sub_23C7DEEA8();
}

__n128 sub_23C8F7A60@<Q0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;

  v3 = *v1;
  v4 = v1[3];
  v9 = *(_OWORD *)(v1 + 1);
  v5 = sub_23C8F74D4(v1[1]);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7 & 1;
  sub_23C7E252C();
  return result;
}

uint64_t sub_23C8F7AB4()
{
  _QWORD *v0;

  return sub_23C8D6C90(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_23C8F7AC0()
{
  uint64_t *v0;

  return sub_23C815E3C(*v0, v0[1]);
}

uint64_t sub_23C8F7ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_23C8F0D9C(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

uint64_t sub_23C8F7AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  sub_23C7DF844();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v7 = v6;
  v9 = v8;
  if (v10)
  {
    if (!v0)
      return 0;
    sub_23C7E0808();
    v11 = sub_23C7DBBB0();
    v12 = sub_23C84839C(v11, v5);
    sub_23C7DB3DC();
    sub_23C7DB398();
    if ((v12 & 1) == 0)
      return 0;
  }
  else if (v0)
  {
    return 0;
  }
  if ((sub_23C8482D8(v9, v4) & 1) != 0)
  {
    sub_23C878AF8(v7, v2);
    if ((v13 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_23C8F7B78()
{
  return sub_23C8F7AD8();
}

void sub_23C8F7B94(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a2[2])
  {
    v3 = a2[4];
    v4 = a2[5];
    sub_23C8A3D34();
    sub_23C7DBCC8();
    sub_23C9009E4(0, 1);
    if (a2[2])
    {
      sub_23C7DBCC8();
      sub_23C7DA9C0();
      v6 = v5;
      v8 = v7;
      v9 = *(_QWORD *)(v2 + 8);
      swift_bridgeObjectRetain();
      sub_23C7DB3B8();
      v10 = sub_23C7DFDFC();
      v12 = sub_23C866030(v10, v11, v9);
      v14 = v13;
      v16 = v15;
      sub_23C7DB62C();
      if (v14)
      {
        sub_23C7DBCD0();
        sub_23C7DC474();
      }
      else
      {
        v12 = 0;
        v14 = v6;
        v16 = v8;
      }
      v26 = sub_23C902798();
      sub_23C8F7B94(v26);
      sub_23C7DB3DC();
      sub_23C8F0080(v12, v14, v16, v3, v4);
    }
    else
    {
      sub_23C7DB3DC();
      sub_23C7DBCC8();
      sub_23C7DA9C0();
      v18 = v17;
      v19 = *(_QWORD *)(v2 + 8);
      swift_bridgeObjectRetain();
      sub_23C7DBBB0();
      v20 = sub_23C7DFDFC();
      sub_23C866030(v20, v21, v19);
      v23 = v22;
      v25 = v24;
      sub_23C7DB62C();
      if (v23)
      {
        sub_23C7DB3DC();
        sub_23C7DE934();
      }
      else
      {
        v25 = v18;
      }
      sub_23C7E0808();
      sub_23C7E087C();
      v27 = sub_23C90297C();
      sub_23C8F0080(v27, v28, v25, v3, v4);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_23C8F7D30(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Row();
  v2 = swift_allocObject();
  sub_23C7F9024(v2);
  v4 = v3;
  sub_23C7E79A8(&qword_25430D540);
  v5 = sub_23C910DAC();
  sub_23C7DA9C0();
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
}

BOOL sub_23C8F7DB0(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a2 + 16) <= (unint64_t)result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v2 = a2 + 40 * result;
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(unsigned __int8 *)(v2 + 64);
  swift_bridgeObjectRetain();
  sub_23C7E56A4(v3, v4, v5);
  swift_bridgeObjectRelease();
  v7 = v5 == 4 && (v4 | v3) == 0;
  sub_23C7E5640(v3, v4, v5);
  return v7;
}

void sub_23C8F7E40()
{
  sub_23C9117B4();
  __break(1u);
}

BOOL sub_23C8F7E98(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a2 + 16) <= (unint64_t)result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v2 = a2 + 24 * result;
  v4 = *(_BYTE *)(v2 + 48) == 4;
  v3 = *(_QWORD *)(v2 + 40) | *(_QWORD *)(v2 + 32);
  return v4 && v3 == 0;
}

void sub_23C8F7ED4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  char v18;

  sub_23C7DF844();
  v3 = v2;
  v5 = v4;
  sub_23C902DBC();
  v7 = v6;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7DE95C();
  v13 = v12 - v11;
  type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v1, v5);
  v14 = sub_23C7EE074();
  v16 = sub_23C90181C(v14, v15, v5, v3);
  v17 = v0;
  v18 = 1;
  RowDecodingContext.init(row:key:)(v16, &v17, v7);
  sub_23C7DEEA8();
}

unint64_t sub_23C8F7F70(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = result;
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v4 = a2 + 40 * result;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 56);
  v7 = *(_BYTE *)(v4 + 64);
  swift_bridgeObjectRetain();
  sub_23C7E56A4(v5, v6, v7);
  v8 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v8);
  v9[2] = &v11;
  v9[3] = v3;
  sub_23C8F17A0(v5, v6, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23C9021BC, (uint64_t)v9, &v10);
  result = sub_23C7E5640(v5, v6, v7);
  if (!v2)
    return v10;
  return result;
}

unint64_t sub_23C8F8068(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD v8[4];
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v4 = a2 + 24 * result;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_BYTE *)(v4 + 48);
  v8[2] = v10;
  v8[3] = MEMORY[0x24BDAC7A8](result);
  sub_23C7E56A4(v5, v6, v7);
  sub_23C8F17A0(v5, v6, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23C9023D8, (uint64_t)v8, &v9);
  result = sub_23C7E5640(v5, v6, v7);
  if (!v3)
    return v9;
  return result;
}

unint64_t sub_23C8F814C(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8[3];

  v8[2] = a2;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = a2 + 40 * result;
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  v6 = *(_BYTE *)(v3 + 64);
  swift_bridgeObjectRetain();
  sub_23C7E56A4(v4, v5, v6);
  v7 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C8F196C(v4, v5, v6, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23C902430, v8);
  result = sub_23C7E5640(v4, v5, v6);
  if (!v2)
    return v8[0];
  return result;
}

unint64_t sub_23C8F8244(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8[4];

  v8[2] = a2;
  v8[3] = a3;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v4 = a2 + 24 * result;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_BYTE *)(v4 + 48);
  MEMORY[0x24BDAC7A8](result);
  sub_23C7E56A4(v5, v6, v7);
  sub_23C8F196C(v5, v6, v7, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23C902434, v8);
  result = sub_23C7E5640(v5, v6, v7);
  if (!v3)
    return v8[0];
  return result;
}

void sub_23C8F8328(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    v4 = a2 + 40 * a1;
    v5 = *(_QWORD *)(v4 + 48);
    v6 = *(_QWORD *)(v4 + 56);
    v7 = *(_BYTE *)(v4 + 64);
    sub_23C7DB3D4();
    sub_23C7E56A4(v5, v6, v7);
    sub_23C7DE934();
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = v7;
    sub_23C7DF5B4();
    return;
  }
  __break(1u);
}

void sub_23C8F8394(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    sub_23C7DB3D4();
    sub_23C902858();
    sub_23C7DF8B0();
    sub_23C7DF5B4();
    return;
  }
  __break(1u);
}

uint64_t sub_23C8F83E8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C910E18();
  v0 = sub_23C7DF858();
  v1 = sub_23C8F0214(v0, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_23C9021B4);
  sub_23C7DE934();
  sub_23C7DB624();
  return v1;
}

uint64_t sub_23C8F8450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v8;

  if (sub_23C910E18() == a4 && v6 == a5)
    v8 = 1;
  else
    v8 = sub_23C911A18();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23C8F84B8()
{
  uint64_t *v0;

  return sub_23C8D6C94(*v0);
}

void sub_23C8F84C0(_QWORD *a1@<X8>)
{
  sub_23C8F7D30(a1);
}

void sub_23C8F84D0(unint64_t a1)
{
  uint64_t *v1;

  sub_23C8F8394(a1, *v1);
}

BOOL sub_23C8F84D8(_BOOL8 a1)
{
  uint64_t *v1;

  return sub_23C8F7DB0(a1, *v1);
}

void sub_23C8F84E0(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_23C8F8328(a1, *v2, a2);
}

unint64_t sub_23C8F84E8(unint64_t a1)
{
  uint64_t *v1;

  return sub_23C8F7F70(a1, *v1);
}

unint64_t sub_23C8F8500(unint64_t a1)
{
  uint64_t *v1;

  return sub_23C8F814C(a1, *v1);
}

uint64_t sub_23C8F8518()
{
  return sub_23C8F83E8();
}

uint64_t sub_23C8F8534(uint64_t a1)
{
  _QWORD *v1;

  return j__swift_retain(a1, *v1);
}

uint64_t sub_23C8F8540(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t sub_23C8F8548()
{
  return 1;
}

unint64_t sub_23C8F8550(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > result)
  {
    v3 = *(_QWORD *)(a3 + 16 * result + 32);
    swift_bridgeObjectRetain();
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8F8598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_23C910E18();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_23C8F0148(v3, v0, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23C8F8610()
{
  uint64_t *v0;

  return sub_23C8F8540(*v0, v0[1]);
}

uint64_t sub_23C8F8618()
{
  return sub_23C8F8548();
}

void sub_23C8F8620(_QWORD *a1@<X8>)
{
  sub_23C8F7D30(a1);
}

unint64_t sub_23C8F8630(unint64_t a1)
{
  uint64_t *v1;

  return sub_23C8F8550(a1, *v1, v1[1]);
}

BOOL sub_23C8F8638(_BOOL8 a1)
{
  uint64_t *v1;

  return sub_23C8F7E98(a1, *v1);
}

unint64_t sub_23C8F8640(unint64_t a1)
{
  uint64_t *v1;

  return sub_23C8F8068(a1, *v1, v1[1]);
}

unint64_t sub_23C8F8658(unint64_t a1)
{
  uint64_t *v1;

  return sub_23C8F8244(a1, *v1, v1[1]);
}

uint64_t sub_23C8F8670()
{
  return sub_23C8F8598();
}

uint64_t sub_23C8F868C(uint64_t a1)
{
  _QWORD *v1;

  return j__swift_retain(a1, *v1);
}

uint64_t sub_23C8F8694(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_column_count(pStmt);
}

BOOL sub_23C8F86B0(_BOOL8 iCol, int a2, sqlite3_stmt *a3)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (iCol <= 0x7FFFFFFF)
  {
    return sqlite3_column_type(a3, iCol) == 5;
  }
  __break(1u);
  return iCol;
}

uint64_t sub_23C8F86F4@<X0>(uint64_t result@<X0>, sqlite3_stmt *a2@<X2>, uint64_t a3@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return sub_23C7EEF08(a2, result, a3);
  }
  __break(1u);
  return result;
}

#error "23C8F8884: call analysis failed (funcsize=108)"

uint64_t sub_23C8F88D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = swift_retain();
  return RowDecodingContext.init(statement:index:)(v5, a4);
}

#error "23C8F8A74: call analysis failed (funcsize=117)"

const void *sub_23C8F8AE0(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = sub_23C910AA0();
  v7 = *(_QWORD *)(v6 - 8);
  result = (const void *)MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (sqlite3_column_type(a3, a1) == 5)
  {
    sub_23C83256C();
    swift_allocError();
    v51 = v11;
    v12 = *(sqlite3_stmt **)(a2 + 16);
    swift_retain();
    Statement.columnNames.getter();
    v20 = sub_23C7DA18C((int)v12, v13, v14, v15, v16, v17, v18, v19, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46,
            v47,
            v48,
            v49,
            v50,
            v51,
            v52,
            v53,
            v54,
            v55,
            v56,
            v57);
    v22 = v21;
    type metadata accessor for Row();
    v23 = swift_allocObject();
    sub_23C7EFC48(v20, v22, v23);
    v25 = v24;
    v26 = Statement.sql.getter();
    v28 = v27;
    Statement.arguments.getter(&v42);
    swift_release();
    v29 = v42;
    v30 = v43;
    v42 = v25;
    v43 = a1;
    v44 = 0;
    LOBYTE(v45) = 1;
    v46 = v26;
    v47 = v28;
    v48 = v29;
    v49 = v30;
    sub_23C7EEF08(v12, a1, (uint64_t)&v38 + 8);
    v31 = *((_QWORD *)&v38 + 1);
    v32 = v39;
    v33 = v40;
    v36 = *((_QWORD *)&v38 + 1);
    v37 = v39;
    LOBYTE(v38) = v40;
    sub_23C8152BC(MEMORY[0x24BDCDDE8], (uint64_t)&v42, v51);
    sub_23C7E5640(v31, v32, v33);
    swift_release();
    sub_23C815EF0(a1, 0, 1u);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v29);
    return (const void *)swift_willThrow();
  }
  else
  {
    result = sqlite3_column_blob(a3, a1);
    if (result)
    {
      v34 = result;
      v35 = sqlite3_column_bytes(a3, a1);
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x24BDCDB98], v6);
      return (const void *)MEMORY[0x2426246D8](v34, v35, v10);
    }
  }
  return result;
}

const void *sub_23C8F8D1C(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  uint64_t v5;
  uint64_t v6;
  const void *result;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_23C910AA0();
  v6 = *(_QWORD *)(v5 - 8);
  result = (const void *)MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (sqlite3_column_type(a3, a1) == 5)
    return 0;
  result = sqlite3_column_blob(a3, a1);
  if (result)
  {
    v10 = result;
    v11 = sqlite3_column_bytes(a3, a1);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BDCDB98], v5);
    return (const void *)MEMORY[0x2426246D8](v10, v11, v9);
  }
  return result;
}

void sub_23C8F8E30(unint64_t a1)
{
  uint64_t v2;

  Statement.columnNames.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v2 + 16) > a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t sub_23C8F8E98()
{
  uint64_t v0;

  return sub_23C8F8694(*(_QWORD *)v0, *(sqlite3_stmt **)(v0 + 8));
}

uint64_t sub_23C8F8EA4()
{
  return sub_23C8F8548();
}

void sub_23C8F8EB0(_QWORD *a1@<X8>)
{
  sub_23C8F7D30(a1);
}

void sub_23C8F8EC4(unint64_t a1)
{
  sub_23C8F8E30(a1);
}

BOOL sub_23C8F8ED0(_BOOL8 a1)
{
  uint64_t v1;

  return sub_23C8F86B0(a1, *(_QWORD *)v1, *(sqlite3_stmt **)(v1 + 8));
}

uint64_t sub_23C8F8EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8F86F4(a1, *(sqlite3_stmt **)(v2 + 8), a2);
}

uint64_t sub_23C8F8EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return sub_23C8F8720(a1, a2, *v5, v5[1], v5[2], a3, a4, a5);
}

uint64_t sub_23C8F8F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return sub_23C8F8904(a1, a2, *v5, v5[1], v5[2], a3, a4, a5);
}

const void *sub_23C8F8F38(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8F8AE0(a1, *(_QWORD *)v1, *(sqlite3_stmt **)(v1 + 8));
}

const void *sub_23C8F8F54(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8F8D1C(a1, *(_QWORD *)v1, *(sqlite3_stmt **)(v1 + 8));
}

uint64_t sub_23C8F8F70(uint64_t a1)
{
  _QWORD *v1;

  return j__swift_retain(a1, *v1);
}

void sub_23C8F8F7C()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C8F8FD8(_QWORD *a1@<X8>)
{
  sub_23C8F7D30(a1);
}

void sub_23C8F8FEC()
{
  sub_23C8F7E40();
}

uint64_t sub_23C8F9000()
{
  return sub_23C7EDB44();
}

char *sub_23C8F9018(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[16 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9038(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[48 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9060(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[8 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9080(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[24 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F90A8(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[216 * a2] <= a3)
    return (char *)sub_23C7E645C(result, a3, 216 * a2);
  return result;
}

char *sub_23C8F90C8(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[176 * a2] <= a3)
    return (char *)sub_23C7E645C(result, a3, 176 * a2);
  return result;
}

char *sub_23C8F90E8(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[168 * a2] <= a3)
    return (char *)sub_23C7E645C(result, a3, 168 * a2);
  return result;
}

char *sub_23C8F9108(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[88 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9130(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[32 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9150(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[40 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9178(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[232 * a2] <= a3)
    return (char *)sub_23C7E645C(result, a3, 232 * a2);
  return result;
}

char *sub_23C8F9198(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[208 * a2] <= a3)
    return (char *)sub_23C7E645C(result, a3, 208 * a2);
  return result;
}

char *sub_23C8F91B8(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[56 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F91E0(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[40 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

char *sub_23C8F9204(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[216 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

#error "23C8F93FC: call analysis failed (funcsize=126)"

void sub_23C8F9428()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  _QWORD __dst[22];
  _BYTE v35[176];

  sub_23C7E1CC4();
  sub_23C7E79A8(&qword_256BCC598);
  sub_23C902B58();
  sub_23C7DD1FC();
  sub_23C902724();
  if (v5)
  {
    sub_23C902548();
    if (v6 < 64)
      v8 = ~(-1 << v6);
    else
      v8 = -1;
    v9 = v8 & v7;
    v31 = v0;
    v32 = (unint64_t)(v6 + 63) >> 6;
    v10 = v2 + 64;
    sub_23C7DC590();
    v11 = 0;
    if (!v9)
      goto LABEL_7;
LABEL_6:
    sub_23C9025B0();
    while (1)
    {
      sub_23C902F18();
      if ((v2 & 1) != 0)
      {
        v20 = (uint64_t *)(v19 + v17 * v18);
        v21 = *v20;
        sub_23C7E0718(v35, v20 + 1);
        v22 = *((_BYTE *)v20 + 170);
      }
      else
      {
        memcpy(__dst, (const void *)(v19 + v17 * v18), 0xABuLL);
        v22 = BYTE2(__dst[21]);
        v21 = __dst[0];
        sub_23C7DEF00();
        sub_23C8133B0((uint64_t)__dst);
        sub_23C7E0718(v35, &__dst[1]);
      }
      sub_23C911BBC();
      sub_23C910F14();
      sub_23C911BF8();
      sub_23C7DF668();
      sub_23C902EB4();
      if (v23)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v23)
          {
            if ((v25 & 1) != 0)
              break;
          }
          if (v26 == v27)
            v26 = 0;
          if (*(_QWORD *)(v10 + 8 * v26) != -1)
          {
            sub_23C7E09C0();
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_33:
      *(_QWORD *)(v10 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      v28 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v24);
      *v28 = v3;
      v28[1] = v4;
      v29 = *(_QWORD *)(v2 + 56) + 176 * v24;
      *(_QWORD *)v29 = v21;
      sub_23C7E0718((void *)(v29 + 8), v35);
      *(_BYTE *)(v29 + 170) = v22;
      sub_23C7E6DC0();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v12 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_42;
      if (v12 >= v32)
        goto LABEL_35;
      ++v11;
      if (!*(_QWORD *)(v33 + 8 * v12))
      {
        v11 = v12 + 1;
        if (v12 + 1 >= v32)
          goto LABEL_35;
        if (!*(_QWORD *)(v33 + 8 * v11))
        {
          sub_23C902F4C();
          if (v15 == v16)
          {
LABEL_35:
            sub_23C7E6604();
            v0 = v31;
            if ((v2 & 1) != 0)
            {
              sub_23C9024E4();
              if (v15 != v16)
                sub_23C9026D0(v30);
              else
                sub_23C7E6F58(v30);
              *(_QWORD *)(v1 + 16) = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v33 + 8 * v13))
          {
            while (1)
            {
              v11 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_43;
              if (v11 >= v14)
                goto LABEL_35;
              ++v13;
              if (*(_QWORD *)(v33 + 8 * v11))
                goto LABEL_19;
            }
          }
          v11 = v13;
        }
      }
LABEL_19:
      sub_23C902F38();
    }
  }
  sub_23C7E6604();
  *v0 = v2;
}

void sub_23C8F96B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t i;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;

  sub_23C7E1CC4();
  sub_23C7E79A8(&qword_25430D118);
  sub_23C7E5870();
  sub_23C902724();
  if (v3)
  {
    sub_23C902548();
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & v5;
    v30 = (unint64_t)(v4 + 63) >> 6;
    v8 = v2 + 64;
    sub_23C7DC590();
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    sub_23C87E2D0();
    for (i = v10 | (v9 << 6); ; i = v19 + (v9 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * i);
      if ((v32 & 1) == 0)
      {
        sub_23C7DB3B8();
        sub_23C7DBBB8();
      }
      sub_23C902EF4();
      sub_23C902C2C();
      v21 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v2 + 32));
      if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) == 0)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v26)
          {
            if ((v23 & 1) != 0)
              break;
          }
          if (v24 == v25)
            v24 = 0;
          if (*(_QWORD *)(v8 + 8 * v24) != -1)
          {
            sub_23C7E09C0();
            goto LABEL_32;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_32:
      sub_23C902564(v22);
      *(_QWORD *)(v28 + 8 * v27) = v20;
      sub_23C7E6DC0();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_41;
      if (v12 >= v30)
        goto LABEL_34;
      ++v9;
      if (!*(_QWORD *)(v31 + 8 * v12))
      {
        v9 = v12 + 1;
        if (v12 + 1 >= v30)
          goto LABEL_34;
        if (!*(_QWORD *)(v31 + 8 * v9))
        {
          sub_23C902F4C();
          if (v15 == v16)
          {
LABEL_34:
            sub_23C7E6604();
            if ((v32 & 1) != 0)
            {
              sub_23C9024E4();
              if (v15 != v16)
                sub_23C9026D0(v29);
              else
                sub_23C7E6F58(v29);
              *(_QWORD *)(v1 + 16) = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v31 + 8 * v13))
          {
            while (1)
            {
              v9 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_42;
              if (v9 >= v14)
                goto LABEL_34;
              ++v13;
              if (*(_QWORD *)(v31 + 8 * v9))
                goto LABEL_19;
            }
          }
          v9 = v13;
        }
      }
LABEL_19:
      sub_23C7ECC94();
      v7 = v18 & v17;
    }
  }
  sub_23C7E6604();
  *v0 = v2;
  sub_23C902708();
}

void sub_23C8F98A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  char v27;

  sub_23C7E1CC4();
  sub_23C7E79A8(&qword_25430D800);
  sub_23C7E5870();
  sub_23C902724();
  if (v4)
  {
    sub_23C902548();
    sub_23C902960();
    v24 = v0;
    v25 = v5 >> 6;
    sub_23C7DC590();
    v6 = 0;
    if (!v3)
      goto LABEL_4;
LABEL_3:
    sub_23C902A00();
    while (1)
    {
      v13 = (uint64_t *)(v1[6] + 16 * v7);
      v15 = *v13;
      v14 = v13[1];
      v16 = *(_QWORD *)(v1[7] + 8 * v7);
      if ((v27 & 1) == 0)
        sub_23C7DBBB8();
      sub_23C902EF4();
      sub_23C902D40();
      sub_23C911BF8();
      sub_23C7EBCF0();
      if (v17)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v17)
          {
            if ((v19 & 1) != 0)
              break;
          }
          sub_23C9027D0();
          if (!v17)
          {
            sub_23C7E09C0();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_27:
      sub_23C7DB784(v18);
      v22 = (_QWORD *)(v21 + 16 * v20);
      *v22 = v15;
      v22[1] = v14;
      *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v20) = v16;
      sub_23C7E6DC0();
      if (v3)
        goto LABEL_3;
LABEL_4:
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_36;
      if (v8 >= v25)
        goto LABEL_29;
      ++v6;
      if (!*(_QWORD *)(v26 + 8 * v8))
      {
        v6 = v8 + 1;
        if (v8 + 1 >= v25)
          goto LABEL_29;
        if (!*(_QWORD *)(v26 + 8 * v6))
        {
          sub_23C902F4C();
          if (v11 == v12)
          {
LABEL_29:
            sub_23C7E6604();
            v0 = v24;
            if ((v27 & 1) != 0)
            {
              sub_23C9024E4();
              if (v11 != v12)
                sub_23C9026D0(v23);
              else
                sub_23C7E6F58(v23);
              v1[2] = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v26 + 8 * v9))
          {
            while (1)
            {
              v6 = v9 + 1;
              if (__OFADD__(v9, 1))
                goto LABEL_37;
              if (v6 >= v10)
                goto LABEL_29;
              ++v9;
              if (*(_QWORD *)(v26 + 8 * v6))
                goto LABEL_16;
            }
          }
          v6 = v9;
        }
      }
LABEL_16:
      sub_23C902B30();
    }
  }
  sub_23C7E6604();
  *v0 = v2;
  sub_23C902708();
}

void sub_23C8F9A50()
{
  sub_23C8F9A78();
}

void sub_23C8F9A64()
{
  sub_23C8F9A78();
}

void sub_23C8F9A78()
{
  uint64_t *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t *v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t i;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  char v45;

  sub_23C902B94();
  v43 = v1;
  v2 = v0;
  v4 = v3;
  v5 = *v0;
  sub_23C7E79A8(v6);
  v45 = v4;
  v7 = sub_23C9117D8();
  if (*(_QWORD *)(v5 + 16))
  {
    sub_23C902E4C();
    v42 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v41 = (unint64_t)(v8 + 63) >> 6;
    v11 = v7 + 64;
    sub_23C7EFAC4();
    v12 = 0;
    v44 = v5;
    if (!v10)
      goto LABEL_7;
LABEL_6:
    sub_23C902FF8();
    for (i = v14 | (v12 << 6); ; i = v20 + (v12 << 6))
    {
      v21 = *(_QWORD *)(v5 + 56);
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v24 = *v22;
      v23 = v22[1];
      v25 = (uint64_t *)(v21 + i * v13);
      v27 = *v25;
      v26 = v25[1];
      v28 = *((unsigned __int8 *)v25 + 16);
      if ((v45 & 1) == 0)
      {
        sub_23C7DF858();
        v43(v27, v26, v28);
      }
      sub_23C902EEC();
      sub_23C910F14();
      sub_23C902EE4();
      sub_23C7DF668();
      sub_23C902EB4();
      if (v29)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v29)
          {
            if ((v30 & 1) != 0)
              break;
          }
          if (v31 == v32)
            v31 = 0;
          if (*(_QWORD *)(v11 + 8 * v31) != -1)
          {
            sub_23C7E09C0();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_31:
      sub_23C87E268();
      *(_QWORD *)(v11 + v33) |= v34;
      v36 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v35);
      *v36 = v24;
      v36[1] = v23;
      v38 = *(_QWORD *)(v7 + 56) + v35 * v37;
      *(_QWORD *)v38 = v27;
      *(_QWORD *)(v38 + 8) = v26;
      *(_BYTE *)(v38 + 16) = v28;
      sub_23C7E6DC0();
      v5 = v44;
      if (v10)
        goto LABEL_6;
LABEL_7:
      v16 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_40;
      if (v16 >= v41)
        goto LABEL_33;
      ++v12;
      if (!v42[v16])
      {
        v12 = v16 + 1;
        if (v16 + 1 >= v41)
          goto LABEL_33;
        if (!v42[v12])
        {
          v17 = v16 + 2;
          if (v17 >= v41)
          {
LABEL_33:
            sub_23C7DF8F8();
            v2 = v0;
            if ((v45 & 1) != 0)
            {
              v39 = 1 << *(_BYTE *)(v5 + 32);
              if (v39 >= 64)
              {
                sub_23C88CFE0(0, (unint64_t)(v39 + 63) >> 6, v42);
              }
              else
              {
                sub_23C902B24();
                *v42 = v40;
              }
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          if (!v42[v17])
          {
            while (1)
            {
              v12 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_41;
              if (v12 >= v41)
                goto LABEL_33;
              ++v17;
              if (v42[v12])
                goto LABEL_18;
            }
          }
          v12 = v17;
        }
      }
LABEL_18:
      sub_23C7ECC94();
      v10 = v19 & v18;
    }
  }
  sub_23C7DF8F8();
  *v2 = v7;
  sub_23C7E59B4();
}

void sub_23C8F9CF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD __dst[28];

  sub_23C7DE8EC();
  sub_23C7E1CC4();
  sub_23C7E79A8(&qword_256BCC5A8);
  sub_23C7E5870();
  sub_23C902724();
  if (v3)
  {
    sub_23C90260C();
    v6 = v5 & v4;
    v31 = v0;
    v32 = (unint64_t)(v7 + 63) >> 6;
    sub_23C7DC590();
    v8 = 0;
    v34 = v1;
    if (!v6)
      goto LABEL_4;
LABEL_3:
    sub_23C9025B0();
    for (i = v10 | (v8 << 6); ; i = v17 + (v8 << 6))
    {
      v18 = (uint64_t *)(v1[6] + 16 * i);
      v19 = *v18;
      v20 = v18[1];
      if ((v35 & 1) != 0)
      {
        v21 = (char *)(v1[7] + i * v9);
        v56 = *((_QWORD *)v21 + 2);
        v57 = *((_QWORD *)v21 + 1);
        v54 = *((_QWORD *)v21 + 4);
        v55 = *((_QWORD *)v21 + 3);
        v52 = v21[40];
        v53 = *v21;
        v22 = *((_QWORD *)v21 + 7);
        v23 = *((_QWORD *)v21 + 8);
        v36 = *((_QWORD *)v21 + 12);
        v37 = *((_QWORD *)v21 + 6);
        v39 = *((_QWORD *)v21 + 11);
        v40 = *((_QWORD *)v21 + 13);
        v38 = v21[112];
        v47 = *(_OWORD *)(v21 + 72);
        v48 = *(_OWORD *)(v21 + 120);
        v50 = *(_OWORD *)(v21 + 136);
        v42 = v21[152];
        v41 = *((_QWORD *)v21 + 21);
        v46 = *((_QWORD *)v21 + 22);
        v43 = *((_QWORD *)v21 + 23);
        v44 = *((_QWORD *)v21 + 20);
        v51 = *((_QWORD *)v21 + 24);
        v49 = *((_QWORD *)v21 + 25);
        v45 = v21[208];
        v24 = v21[209];
      }
      else
      {
        memcpy(__dst, (const void *)(v1[7] + i * v9), 0xD2uLL);
        v56 = __dst[2];
        v57 = __dst[1];
        v54 = __dst[4];
        v55 = __dst[3];
        v52 = __dst[5];
        v53 = __dst[0];
        v51 = __dst[24];
        v49 = __dst[25];
        v45 = __dst[26];
        v24 = BYTE1(__dst[26]);
        v46 = __dst[22];
        v43 = __dst[23];
        v44 = __dst[20];
        v42 = __dst[19];
        v50 = *(_OWORD *)&__dst[17];
        v40 = __dst[13];
        v41 = __dst[21];
        v38 = __dst[14];
        v39 = __dst[11];
        v47 = *(_OWORD *)&__dst[9];
        v48 = *(_OWORD *)&__dst[15];
        v22 = __dst[7];
        v36 = __dst[12];
        v37 = __dst[6];
        v23 = __dst[8];
        sub_23C7DB3B8();
        sub_23C813864((uint64_t)__dst);
      }
      sub_23C911BBC();
      sub_23C910F14();
      sub_23C911BF8();
      sub_23C7DF668();
      sub_23C902EB4();
      if (v25)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v25)
          {
            if ((v27 & 1) != 0)
              break;
          }
          sub_23C9027D0();
          if (!v25)
          {
            sub_23C7E09C0();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_28:
      LOBYTE(__dst[0]) = v24;
      *(_QWORD *)(v2 + 64 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      v28 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v26);
      *v28 = v19;
      v28[1] = v20;
      v29 = *(_QWORD *)(v2 + 56) + 216 * v26;
      *(_BYTE *)v29 = v53;
      *(_QWORD *)(v29 + 8) = v57;
      *(_QWORD *)(v29 + 16) = v56;
      *(_QWORD *)(v29 + 24) = v55;
      *(_QWORD *)(v29 + 32) = v54;
      *(_BYTE *)(v29 + 40) = v52;
      *(_QWORD *)(v29 + 48) = v37;
      *(_QWORD *)(v29 + 56) = v22;
      *(_QWORD *)(v29 + 64) = v23;
      *(_QWORD *)(v29 + 88) = v39;
      *(_QWORD *)(v29 + 96) = v36;
      *(_QWORD *)(v29 + 104) = v40;
      *(_BYTE *)(v29 + 112) = v38;
      *(_BYTE *)(v29 + 152) = v42;
      *(_QWORD *)(v29 + 160) = v44;
      *(_QWORD *)(v29 + 168) = v41;
      *(_QWORD *)(v29 + 176) = v46;
      *(_QWORD *)(v29 + 184) = v43;
      *(_QWORD *)(v29 + 192) = v51;
      *(_QWORD *)(v29 + 200) = v49;
      *(_BYTE *)(v29 + 208) = v45;
      *(_BYTE *)(v29 + 209) = v24;
      *(_OWORD *)(v29 + 72) = v47;
      *(_OWORD *)(v29 + 120) = v48;
      *(_OWORD *)(v29 + 136) = v50;
      sub_23C7E6DC0();
      v1 = v34;
      if (v6)
        goto LABEL_3;
LABEL_4:
      v12 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v12 >= v32)
        goto LABEL_30;
      ++v8;
      if (!*(_QWORD *)(v33 + 8 * v12))
      {
        v8 = v12 + 1;
        if (v12 + 1 >= v32)
          goto LABEL_30;
        if (!*(_QWORD *)(v33 + 8 * v8))
        {
          sub_23C902F4C();
          if (v15 == v16)
          {
LABEL_30:
            sub_23C7E6604();
            v0 = v31;
            if ((v35 & 1) != 0)
            {
              sub_23C9024E4();
              if (v15 != v16)
                sub_23C9026D0(v30);
              else
                sub_23C7E6F58(v30);
              v1[2] = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v33 + 8 * v13))
          {
            while (1)
            {
              v8 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_38;
              if (v8 >= v14)
                goto LABEL_30;
              ++v13;
              if (*(_QWORD *)(v33 + 8 * v8))
                goto LABEL_16;
            }
          }
          v8 = v13;
        }
      }
LABEL_16:
      sub_23C902F38();
    }
  }
  sub_23C7E6604();
  *v0 = v2;
  sub_23C7DBCB0();
}

void sub_23C8FA100()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;

  sub_23C7E8EB8();
  sub_23C7E1CC4();
  sub_23C7E79A8(&qword_256BCA6E8);
  sub_23C902B58();
  sub_23C7DD1FC();
  sub_23C902724();
  if (v4)
  {
    v21 = v0;
    v22 = v1 + 8;
    sub_23C902960();
    v6 = v5 >> 6;
    sub_23C7DC590();
    v7 = 0;
    if (!v3)
      goto LABEL_4;
LABEL_3:
    sub_23C902A00();
    while (1)
    {
      v11 = *(_QWORD *)(v1[6] + 8 * v8);
      v12 = *(_QWORD *)(v1[7] + 8 * v8);
      if ((v2 & 1) == 0)
      {
        sub_23C7DB3B8();
        sub_23C7DBBB8();
      }
      sub_23C902F00();
      sub_23C824FBC();
      sub_23C902EA0();
      sub_23C7EBCF0();
      if (v13)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v13)
          {
            if ((v15 & 1) != 0)
              break;
          }
          sub_23C9027D0();
          if (!v13)
          {
            sub_23C7E09C0();
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_26:
      sub_23C7DB784(v14);
      *(_QWORD *)(v17 + 8 * v16) = v11;
      *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v16) = v12;
      sub_23C7E6DC0();
      if (v3)
        goto LABEL_3;
LABEL_4:
      v9 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_35;
      if (v9 >= v6)
        goto LABEL_28;
      ++v7;
      if (!v22[v9])
      {
        v7 = v9 + 1;
        if (v9 + 1 >= v6)
          goto LABEL_28;
        if (!v22[v7])
        {
          v10 = v9 + 2;
          if (v10 >= v6)
          {
LABEL_28:
            sub_23C7E6604();
            v0 = v21;
            if ((v2 & 1) != 0)
            {
              sub_23C9024E4();
              if (v19 != v20)
                sub_23C9026D0(v18);
              else
                sub_23C7E6F58(v18);
              v1[2] = 0;
            }
            break;
          }
          if (!v22[v10])
          {
            while (1)
            {
              v7 = v10 + 1;
              if (__OFADD__(v10, 1))
                goto LABEL_36;
              if (v7 >= v6)
                goto LABEL_28;
              ++v10;
              if (v22[v7])
                goto LABEL_15;
            }
          }
          v7 = v10;
        }
      }
LABEL_15:
      sub_23C902B30();
    }
  }
  sub_23C7E6604();
  *v0 = v2;
  sub_23C7E4088();
}

void sub_23C8FA2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  BOOL v35;
  char v36;
  uint64_t v37;

  sub_23C7E268C();
  v12 = v11;
  v37 = v13;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = *v10;
  sub_23C8EF344();
  sub_23C7DEF00();
  sub_23C7E0808();
  sub_23C910F14();
  sub_23C7DB398();
  v21 = sub_23C7DA4F4();
  v22 = -1 << *(_BYTE *)(v20 + 32);
  v23 = v21 & ~v22;
  sub_23C902C18();
  if ((v24 & 1) == 0)
  {
LABEL_16:
    sub_23C7E087C();
    v36 = sub_23C9029CC();
    sub_23C902C04();
    sub_23C7E0808();
    sub_23C7DC46C();
    sub_23C8FCFF0(v17, v15, v37, v12, v23, v36);
    sub_23C9029D4(a10);
    *v19 = v17;
    v19[1] = v15;
    v19[2] = v37;
    v19[3] = v12;
    goto LABEL_17;
  }
  v25 = *(_QWORD *)(v20 + 48);
  v26 = (_QWORD *)(v25 + 32 * v23);
  v27 = *v26 == v17 && v26[1] == v15;
  if (!v27 && (sub_23C7E16E8() & 1) == 0)
  {
    v32 = ~v22;
    do
    {
      v23 = (v23 + 1) & v32;
      sub_23C902C18();
      if ((v33 & 1) == 0)
        goto LABEL_16;
      v34 = (_QWORD *)(v25 + 32 * v23);
      v35 = *v34 == v17 && v34[1] == v15;
    }
    while (!v35 && (sub_23C7E16E8() & 1) == 0);
  }
  sub_23C7DB398();
  sub_23C7E087C();
  sub_23C7E072C();
  v28 = (uint64_t *)(*(_QWORD *)(*v10 + 48) + 32 * v23);
  v29 = v28[1];
  v30 = v28[2];
  v31 = v28[3];
  *v19 = *v28;
  v19[1] = v29;
  v19[2] = v30;
  v19[3] = v31;
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
LABEL_17:
  sub_23C7DB4D4();
}

void sub_23C8FA41C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  BOOL v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;

  sub_23C7E268C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = *v0;
  sub_23C8EF344();
  sub_23C7DBBB8();
  sub_23C910F14();
  v8 = sub_23C7DA4F4();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_23C86AB2C();
  if ((v11 & 1) == 0)
  {
LABEL_16:
    sub_23C7DC474();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v0;
    *v0 = 0x8000000000000000;
    sub_23C7DBCC8();
    sub_23C8FD1AC(v4, v2, v10, isUniquelyReferenced_nonNull_native);
    sub_23C902FD4(v22);
    *v6 = v4;
    v6[1] = v2;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v7 + 48);
  v13 = (_QWORD *)(v12 + 16 * v10);
  v14 = *v13 == v4 && v13[1] == v2;
  if (!v14 && (sub_23C7E16E8() & 1) == 0)
  {
    v17 = ~v9;
    do
    {
      v10 = (v10 + 1) & v17;
      sub_23C86AB2C();
      if ((v18 & 1) == 0)
        goto LABEL_16;
      v19 = (_QWORD *)(v12 + 16 * v10);
      v20 = *v19 == v4 && v19[1] == v2;
    }
    while (!v20 && (sub_23C7E16E8() & 1) == 0);
  }
  sub_23C7DB62C();
  sub_23C7DC474();
  v15 = (uint64_t *)(*(_QWORD *)(*v0 + 48) + 16 * v10);
  v16 = v15[1];
  *v6 = *v15;
  v6[1] = v16;
  swift_bridgeObjectRetain();
LABEL_17:
  sub_23C7DB4D4();
}

#error "23C8FA69C: call analysis failed (funcsize=116)"

uint64_t sub_23C8FA748(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;

  v5 = *v2;
  v6 = sub_23C911BB0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    sub_23C9029CC();
    sub_23C902C04();
    sub_23C8FD50C(a2, v8, v12);
    sub_23C9029D4(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_23C8FA828()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  __int128 v25;
  __int128 v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23C902B94();
  v2 = v1;
  v4 = v3;
  v5 = *v0;
  sub_23C902EEC();
  sub_23C7DBBB0();
  sub_23C853C08();
  sub_23C902EE4();
  sub_23C902B24();
  v8 = v7 & ~v6;
  v38 = v5 + 56;
  v34 = v0;
  v35 = v4;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_32:
    sub_23C7DD194();
    v24 = sub_23C9029CC();
    v39 = *v34;
    *v34 = 0x8000000000000000;
    sub_23C86A9EC(v2);
    sub_23C8FD62C(v2, v8, v24);
    sub_23C9029D4(v39);
    v25 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v2;
    *(_OWORD *)(v35 + 16) = v25;
    v26 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v35 + 32) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v35 + 48) = v26;
    return 1;
  }
  v36 = ~v6;
  v37 = *(_QWORD *)(v5 + 48);
  v9 = *(_QWORD *)v2;
  v10 = *(_QWORD *)(v2 + 8);
  while (1)
  {
    v11 = (_QWORD *)(v37 + (v8 << 6));
    v12 = v11[2];
    v13 = v11[3];
    v14 = v11[4];
    v15 = v11[5];
    v17 = v11[6];
    v16 = v11[7];
    v18 = *v11 == v9 && v11[1] == v10;
    if (!v18 && (sub_23C7E16E8() & 1) == 0)
      goto LABEL_31;
    v19 = v12 == *(_QWORD *)(v2 + 16) && v13 == *(_QWORD *)(v2 + 24);
    if (!v19 && (sub_23C7E16E8() & 1) == 0)
      goto LABEL_31;
    v20 = *(_QWORD *)(v2 + 40);
    if (v15)
    {
      if (!v20)
        goto LABEL_31;
      v21 = v14 == *(_QWORD *)(v2 + 32) && v15 == v20;
      if (!v21 && (sub_23C7E16E8() & 1) == 0)
        goto LABEL_31;
    }
    else if (v20)
    {
      goto LABEL_31;
    }
    v22 = *(_QWORD *)(v2 + 56);
    if (v16)
      break;
    if (!v22)
      goto LABEL_33;
LABEL_31:
    v8 = (v8 + 1) & v36;
    if (((*(_QWORD *)(v38 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_32;
  }
  if (!v22)
    goto LABEL_31;
  v23 = v17 == *(_QWORD *)(v2 + 48) && v16 == v22;
  if (!v23 && (sub_23C7E16E8() & 1) == 0)
    goto LABEL_31;
LABEL_33:
  sub_23C7DD194();
  sub_23C86AA40(v2);
  v28 = *(_QWORD *)(*v34 + 48) + (v8 << 6);
  v29 = *(_QWORD *)(v28 + 8);
  v30 = *(_QWORD *)(v28 + 16);
  v31 = *(_QWORD *)(v28 + 24);
  v32 = *(_QWORD *)(v28 + 32);
  v33 = *(_QWORD *)(v28 + 56);
  *(_QWORD *)v35 = *(_QWORD *)v28;
  *(_QWORD *)(v35 + 8) = v29;
  *(_QWORD *)(v35 + 16) = v30;
  *(_QWORD *)(v35 + 24) = v31;
  *(_QWORD *)(v35 + 32) = v32;
  *(_OWORD *)(v35 + 40) = *(_OWORD *)(v28 + 40);
  *(_QWORD *)(v35 + 56) = v33;
  swift_bridgeObjectRetain();
  sub_23C7DF858();
  sub_23C7DB3D4();
  sub_23C7DC46C();
  return 0;
}

uint64_t sub_23C8FAA68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t __s1;

  v8 = *v4;
  sub_23C911BBC();
  sub_23C7DBBB8();
  DatabaseValue.hash(into:)();
  sub_23C911BF8();
  sub_23C902B24();
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    __asm { BR              X8 }
  sub_23C7DC474();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v17;
  *v17 = 0x8000000000000000;
  sub_23C902B14();
  v13 = sub_23C902B04();
  sub_23C8FD864(v13, v14, v15, v11, isUniquelyReferenced_nonNull_native);
  sub_23C902FD4(__s1);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 1;
  *(_BYTE *)(a1 + 16) = a4;
  return result;
}

#error "23C8FB7A8: call analysis failed (funcsize=113)"

void sub_23C8FB854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  void (*v36)(uint64_t *);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t *);
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  BOOL v56;

  sub_23C7E8EB8();
  a31 = v32;
  a32 = v37;
  if (!v38)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  v39 = v36;
  v40 = v35;
  v41 = v34;
  v42 = v33;
  sub_23C7E79A8(v33);
  a20 = sub_23C911604();
  sub_23C9115A4();
  v43 = sub_23C9115C8();
  if (!v43)
  {
LABEL_16:
    sub_23C7DFE08();
LABEL_18:
    sub_23C7E4088();
    return;
  }
  v44 = v43;
  v40(v41);
  while (1)
  {
    a10 = v44;
    swift_dynamicCast();
    v45 = a20;
    v46 = *(_QWORD *)(a20 + 16);
    if (*(_QWORD *)(a20 + 24) <= v46)
    {
      sub_23C8FCBDC(v46 + 1, v42, v39);
      v45 = a20;
    }
    v47 = a19;
    sub_23C8EF344();
    v39(&a10);
    v48 = sub_23C7DA4F4();
    v49 = -1 << *(_BYTE *)(v45 + 32);
    v50 = v48 & ~v49;
    v51 = v50 >> 6;
    if (((-1 << v50) & ~*(_QWORD *)(v45 + 56 + 8 * (v50 >> 6))) == 0)
      break;
    sub_23C902CB8();
LABEL_15:
    *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
    *(_QWORD *)(*(_QWORD *)(v45 + 48) + 8 * v53) = v47;
    ++*(_QWORD *)(v45 + 16);
    v44 = sub_23C9115C8();
    if (!v44)
      goto LABEL_16;
  }
  v54 = 0;
  v55 = (unint64_t)(63 - v49) >> 6;
  while (++v51 != v55 || (v54 & 1) == 0)
  {
    v56 = v51 == v55;
    if (v51 == v55)
      v51 = 0;
    v54 |= v56;
    if (*(_QWORD *)(v45 + 56 + 8 * v51) != -1)
    {
      sub_23C902C9C();
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_23C8FBA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_23C8FB854(a1, a2, (uint64_t)&unk_25430DBB8, 0, (uint64_t)type metadata accessor for DatabaseFunction, (uint64_t)DatabaseFunction.hash(into:), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

void sub_23C8FBA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;

  sub_23C7E8EB8();
  if (!v19)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  sub_23C7E79A8(&qword_25430DA00);
  sub_23C7DF8B0();
  v30 = sub_23C911604();
  sub_23C9115A4();
  if (!sub_23C9115C8())
  {
LABEL_16:
    sub_23C7DE904();
LABEL_18:
    sub_23C7E4088();
    return;
  }
  type metadata accessor for DatabaseCollation();
  while (1)
  {
    swift_dynamicCast();
    v20 = v30;
    if (*(_QWORD *)(v30 + 24) <= *(_QWORD *)(v30 + 16))
    {
      sub_23C8FCD98();
      v20 = v30;
    }
    sub_23C8EF344();
    sub_23C902940();
    v21 = sub_23C7DA4F4();
    v22 = -1 << *(_BYTE *)(v20 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v20 + 56 + 8 * (v23 >> 6))) == 0)
      break;
    sub_23C902CB8();
LABEL_15:
    *(_QWORD *)(v25 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v26) = a19;
    sub_23C7E6DC0();
    if (!sub_23C9115C8())
      goto LABEL_16;
  }
  v27 = 0;
  v28 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v28 || (v27 & 1) == 0)
  {
    v29 = v24 == v28;
    if (v24 == v28)
      v24 = 0;
    v27 |= v29;
    if (*(_QWORD *)(v20 + 56 + 8 * v24) != -1)
    {
      sub_23C902C9C();
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_23C8FBBCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430DBD8);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      v16 = v2;
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * i);
      v18 = *v17;
      v19 = v17[1];
      v21 = v17[2];
      v20 = v17[3];
      sub_23C911BBC();
      swift_bridgeObjectRetain();
      sub_23C910F14();
      swift_bridgeObjectRelease();
      result = sub_23C911BF8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v8 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v25);
      *v30 = v18;
      v30[1] = v19;
      v30[2] = v21;
      v30[3] = v20;
      ++*(_QWORD *)(v4 + 16);
      v2 = v16;
      if (v7)
        goto LABEL_6;
LABEL_7:
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_38;
      if (v13 >= v32)
        goto LABEL_32;
      v14 = v33[v13];
      ++v10;
      if (!v14)
      {
        v10 = v13 + 1;
        if (v13 + 1 >= v32)
          goto LABEL_32;
        v14 = v33[v10];
        if (!v14)
        {
          v10 = v13 + 2;
          if (v13 + 2 >= v32)
            goto LABEL_32;
          v14 = v33[v10];
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v32)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v31 = 1 << *(_BYTE *)(v2 + 32);
              if (v31 > 63)
                sub_23C88CFE0(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v14 = v33[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_39;
                if (v10 >= v32)
                  goto LABEL_32;
                v14 = v33[v10];
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v10 = v15;
          }
        }
      }
LABEL_20:
      v7 = (v14 - 1) & v14;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23C8FBEE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430DBE0);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      sub_23C911BBC();
      sub_23C910F14();
      result = sub_23C911BF8();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                sub_23C88CFE0(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23C8FC1B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_256BCA610);
  result = sub_23C9115F8();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v7 = (uint64_t *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 56);
    v8 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v8;
    v28 = v1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    if ((v9 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = sub_23C911BB0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v15 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v15 >= v11)
        goto LABEL_32;
      v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        v5 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_32;
        v16 = v7[v5];
        if (!v16)
        {
          v5 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_32;
          v16 = v7[v5];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63)
                sub_23C88CFE0(0, v11, (_QWORD *)(v2 + 56));
              else
                *v7 = v27;
              v1 = v28;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v5 >= v11)
                  goto LABEL_32;
                v16 = v7[v5];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v5 = v17;
          }
        }
      }
LABEL_20:
      v10 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23C8FC438()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430D608);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v38 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v36 = v1;
    v37 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    v39 = v2;
    v40 = v4;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v41 = (v7 - 1) & v7;
    v44 = v10;
    for (i = __clz(__rbit64(v7)) | (v10 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
    {
      v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (i << 6));
      v18 = *v16;
      v17 = v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v21 = v16[4];
      v22 = v16[5];
      v24 = v16[6];
      v23 = v16[7];
      sub_23C911BBC();
      swift_bridgeObjectRetain();
      v43 = v18;
      sub_23C910F14();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v42 = v19;
      sub_23C910F14();
      swift_bridgeObjectRelease();
      if (v22)
      {
        sub_23C911BD4();
        swift_bridgeObjectRetain();
        v25 = v21;
        sub_23C910F14();
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = v21;
        sub_23C911BD4();
      }
      sub_23C911BD4();
      if (v23)
      {
        swift_bridgeObjectRetain();
        sub_23C910F14();
        swift_bridgeObjectRelease();
      }
      result = sub_23C911BF8();
      v4 = v40;
      v26 = -1 << *(_BYTE *)(v40 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6))) == 0)
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          v32 = v28 == v31;
          if (v28 == v31)
            v28 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v8 + 8 * v28);
          if (v33 != -1)
          {
            v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return result;
      }
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
      *(_QWORD *)(v8 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v34 = (_QWORD *)(*(_QWORD *)(v40 + 48) + (v29 << 6));
      v10 = v44;
      *v34 = v43;
      v34[1] = v17;
      v7 = v41;
      v34[2] = v42;
      v34[3] = v20;
      v34[4] = v25;
      v34[5] = v22;
      v34[6] = v24;
      v34[7] = v23;
      ++*(_QWORD *)(v40 + 16);
      v2 = v39;
      if (v41)
        goto LABEL_6;
LABEL_7:
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_43;
      if (v12 >= v37)
        goto LABEL_37;
      v13 = v38[v12];
      v14 = v10 + 1;
      if (!v13)
      {
        v14 = v10 + 2;
        if (v10 + 2 >= v37)
          goto LABEL_37;
        v13 = v38[v14];
        if (!v13)
        {
          v14 = v10 + 3;
          if (v10 + 3 >= v37)
            goto LABEL_37;
          v13 = v38[v14];
          if (!v13)
          {
            v15 = v10 + 4;
            if (v10 + 4 >= v37)
            {
LABEL_37:
              swift_release();
              v1 = v36;
              v35 = 1 << *(_BYTE *)(v2 + 32);
              if (v35 > 63)
                sub_23C88CFE0(0, (unint64_t)(v35 + 63) >> 6, v38);
              else
                *v38 = -1 << v35;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v13 = v38[v15];
            if (!v13)
            {
              while (1)
              {
                v14 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_44;
                if (v14 >= v37)
                  goto LABEL_37;
                v13 = v38[v14];
                ++v15;
                if (v13)
                  goto LABEL_20;
              }
            }
            v14 = v10 + 4;
          }
        }
      }
LABEL_20:
      v41 = (v13 - 1) & v13;
      v44 = v14;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23C8FC820()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  _QWORD *v14;

  v1 = *v0;
  sub_23C7E79A8(&qword_256BCDD48);
  v2 = sub_23C9115F8();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_25;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v14 = (_QWORD *)(v1 + 56);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v13 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v13 > 1)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_19;
    v8 = 2;
    if (v13 > 2)
    {
      v7 = *(_QWORD *)(v1 + 72);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if (v13 > 3)
      {
        v7 = *(_QWORD *)(v1 + 80);
        if (!v7)
        {
          v9 = 4;
          if (v13 > 4)
          {
            v7 = *(_QWORD *)(v1 + 88);
            if (v7)
            {
              v8 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v8 = v9 + 1;
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                JUMPOUT(0x23C8FCBB4);
              }
              if (v8 >= v13)
                break;
              v7 = v14[v8];
              ++v9;
              if (v7)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_20:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 24 * v6 + 16);
        sub_23C911BBC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v11 = 1 << *(_BYTE *)(v1 + 32);
  if (v11 > 63)
    sub_23C88CFE0(0, (unint64_t)(v11 + 63) >> 6, v14);
  else
    *v14 = -1 << v11;
  *(_QWORD *)(v1 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v0 = v2;
  return result;
}

uint64_t sub_23C8FCBC8(uint64_t a1)
{
  return sub_23C8FCBDC(a1, &unk_25430DBB8, DatabaseFunction.hash(into:));
}

#error "23C8FCD6C: call analysis failed (funcsize=111)"

void sub_23C8FCD98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t i;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;

  sub_23C7E268C();
  v3 = v0;
  sub_23C7DFDAC();
  sub_23C7E79A8(&qword_25430DA00);
  sub_23C7EFB08();
  sub_23C902724();
  if (v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(v1 + 56);
    v7 = 1 << *(_BYTE *)(v1 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v1 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    if (!v9)
      goto LABEL_7;
LABEL_6:
    sub_23C87E2D0();
    for (i = v11 | (v5 << 6); ; i = v15 + (v5 << 6))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
      sub_23C8EF344();
      sub_23C902940();
      v17 = sub_23C7DA4F4() & ~(-1 << *(_BYTE *)(v2 + 32));
      if (((-1 << v17) & ~*(_QWORD *)(v2 + 56 + 8 * (v17 >> 6))) == 0)
      {
        sub_23C7E4E00();
        while (1)
        {
          sub_23C902594();
          if (v20)
          {
            if ((v19 & 1) != 0)
              break;
          }
          sub_23C9027D0();
          if (!v20)
          {
            sub_23C7E09C0();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
      sub_23C7E3334();
LABEL_29:
      sub_23C7DB784(v18);
      *(_QWORD *)(v22 + 8 * v21) = v16;
      sub_23C7E6DC0();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v13 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_37;
      if (v13 >= v10)
        goto LABEL_31;
      ++v5;
      if (!v6[v13])
      {
        v5 = v13 + 1;
        if (v13 + 1 >= v10)
          goto LABEL_31;
        if (!v6[v5])
        {
          v5 = v13 + 2;
          if (v13 + 2 >= v10)
            goto LABEL_31;
          if (!v6[v5])
          {
            v14 = v13 + 3;
            if (v14 >= v10)
            {
LABEL_31:
              sub_23C902E58();
              if (v24 ^ v25 | v20)
              {
                sub_23C902B24();
                *v6 = v26;
              }
              else
              {
                sub_23C88CFE0(0, (unint64_t)(v23 + 63) >> 6, (_QWORD *)(v1 + 56));
              }
              v3 = v0;
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            if (!v6[v14])
            {
              while (1)
              {
                v5 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_38;
                if (v5 >= v10)
                  goto LABEL_31;
                ++v14;
                if (v6[v5])
                  goto LABEL_20;
              }
            }
            v5 = v14;
          }
        }
      }
LABEL_20:
      sub_23C902FB4();
    }
  }
  sub_23C7E6604();
  *v3 = v2;
  sub_23C7DB4D4();
}

void sub_23C8FCF64(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _BYTE v7[72];

  sub_23C902DBC();
  sub_23C8EF344();
  a3(v7);
  sub_23C7DA4F4();
  sub_23C902B24();
  v6 = sub_23C911598();
  *(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6) = v4;
  sub_23C902B74();
}

uint64_t sub_23C8FCFF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v6;
  v12 = result;
  v13 = *(_QWORD *)(*v6 + 16);
  v14 = *(_QWORD *)(*v6 + 24);
  if (v14 > v13 && (a6 & 1) != 0)
    goto LABEL_22;
  if ((a6 & 1) != 0)
  {
    sub_23C8FBBCC();
  }
  else
  {
    if (v14 > v13)
    {
      result = (uint64_t)sub_23C8FECD0();
      goto LABEL_22;
    }
    sub_23C8FF5FC();
  }
  v15 = *v6;
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  result = sub_23C911BF8();
  v16 = -1 << *(_BYTE *)(v15 + 32);
  a5 = result & ~v16;
  v17 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v18 = *(_QWORD *)(v15 + 48);
    v19 = (_QWORD *)(v18 + 32 * a5);
    v20 = *v19 == v12 && v19[1] == a2;
    if (v20 || (result = sub_23C911A18(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23C911B44();
      __break(1u);
    }
    else
    {
      v21 = ~v16;
      while (1)
      {
        a5 = (a5 + 1) & v21;
        if (((*(_QWORD *)(v17 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
          break;
        v22 = (_QWORD *)(v18 + 32 * a5);
        if (*v22 != v12 || v22[1] != a2)
        {
          result = sub_23C911A18();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v7;
  *(_QWORD *)(*v7 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v12;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

uint64_t sub_23C8FD1AC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23C8FBEE0();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23C8FEE90();
      goto LABEL_22;
    }
    sub_23C8FF8DC();
  }
  v11 = *v4;
  sub_23C911BBC();
  sub_23C910F14();
  result = sub_23C911BF8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23C911A18(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23C911B44();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23C911A18();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

#error "23C8FD3D8: call analysis failed (funcsize=109)"

uint64_t sub_23C8FD50C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_23C8FC1B8();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_23C8FF040();
      goto LABEL_14;
    }
    sub_23C8FFB84();
  }
  v8 = *v3;
  result = sub_23C911BB0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_23C911B44();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_23C8FD62C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v23;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_23C8FC438();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_23C8FF1D4();
        goto LABEL_39;
      }
      sub_23C8FFDE0();
    }
    v8 = *v3;
    sub_23C911BBC();
    sub_23C853C08();
    result = sub_23C911BF8();
    v9 = -1 << *(_BYTE *)(v8 + 32);
    a2 = result & ~v9;
    v35 = v8 + 56;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v34 = ~v9;
      v33 = *(_QWORD *)(v8 + 48);
      v10 = *v5;
      v11 = v5[1];
      do
      {
        v12 = (uint64_t *)(v33 + (a2 << 6));
        result = *v12;
        v14 = v12[2];
        v13 = v12[3];
        v16 = v12[4];
        v15 = v12[5];
        v18 = v12[6];
        v17 = v12[7];
        if (*v12 != v10 || v12[1] != v11)
        {
          result = sub_23C911A18();
          if ((result & 1) == 0)
            goto LABEL_38;
        }
        if (v14 != v5[2] || v13 != v5[3])
        {
          result = sub_23C911A18();
          if ((result & 1) == 0)
            goto LABEL_38;
        }
        v21 = v5[5];
        if (v15)
        {
          if (!v21)
            goto LABEL_38;
          if (v16 != v5[4] || v15 != v21)
          {
            result = sub_23C911A18();
            if ((result & 1) == 0)
              goto LABEL_38;
          }
        }
        else if (v21)
        {
          goto LABEL_38;
        }
        v23 = v5[7];
        if (v17)
        {
          if (v23)
          {
            if (v18 == v5[6] && v17 == v23)
              goto LABEL_42;
            result = sub_23C911A18();
            if ((result & 1) != 0)
              goto LABEL_42;
          }
        }
        else if (!v23)
        {
          goto LABEL_42;
        }
LABEL_38:
        a2 = (a2 + 1) & v34;
      }
      while (((*(_QWORD *)(v35 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_39:
  v25 = *v32;
  *(_QWORD *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v26 = (_OWORD *)(*(_QWORD *)(v25 + 48) + (a2 << 6));
  v27 = *((_OWORD *)v5 + 1);
  *v26 = *(_OWORD *)v5;
  v26[1] = v27;
  v28 = *((_OWORD *)v5 + 3);
  v26[2] = *((_OWORD *)v5 + 2);
  v26[3] = v28;
  v29 = *(_QWORD *)(v25 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
  {
    __break(1u);
LABEL_42:
    result = sub_23C911B44();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v31;
  }
  return result;
}

void sub_23C8FD864(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 <= v10 || (a5 & 1) == 0)
  {
    if ((a5 & 1) != 0)
    {
      sub_23C8FC820();
    }
    else
    {
      if (v11 > v10)
      {
        sub_23C8FF3C8();
        goto LABEL_10;
      }
      sub_23C9001B0();
    }
    v12 = *v5;
    sub_23C911BBC();
    DatabaseValue.hash(into:)();
    a4 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v12 + 32));
    if (((*(_QWORD *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v13 = *v5;
  *(_QWORD *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v14 = *(_QWORD *)(v13 + 48) + 24 * a4;
  *(_QWORD *)v14 = a1;
  *(_QWORD *)(v14 + 8) = a2;
  *(_BYTE *)(v14 + 16) = a3;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
    JUMPOUT(0x23C8FE9A0);
  }
  *(_QWORD *)(v13 + 16) = v17;
}

#error "23C8FEBA0: call analysis failed (funcsize=108)"

void *sub_23C8FECD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = v0;
  sub_23C7E79A8(&qword_25430DBD8);
  v2 = *v0;
  v3 = sub_23C9115EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v21 = v20[1];
    v22 = v20[2];
    v23 = v20[3];
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * i);
    *v24 = *v20;
    v24[1] = v21;
    v24[2] = v22;
    v24[3] = v23;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23C8FEE90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_23C7E79A8(&qword_25430DBE0);
  v2 = *v0;
  v3 = sub_23C9115EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23C8FF040()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_23C7E79A8(&qword_256BCA610);
  v2 = *v0;
  v3 = sub_23C9115EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23C8FF1D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;

  v1 = v0;
  sub_23C7E79A8(&qword_25430D608);
  v2 = *v0;
  v3 = sub_23C9115EC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = *(_QWORD *)(v2 + 48) + (i << 6);
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(v20 + 24);
    v24 = *(_QWORD *)(v20 + 32);
    v25 = *(_QWORD *)(v20 + 56);
    v26 = *(_QWORD *)(v4 + 48) + (i << 6);
    v27 = *(_OWORD *)(v20 + 40);
    *(_QWORD *)v26 = *(_QWORD *)v20;
    *(_QWORD *)(v26 + 8) = v21;
    *(_QWORD *)(v26 + 16) = v22;
    *(_QWORD *)(v26 + 24) = v23;
    *(_QWORD *)(v26 + 32) = v24;
    *(_OWORD *)(v26 + 40) = v27;
    *(_QWORD *)(v26 + 56) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_23C8FF3C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;

  sub_23C7DF844();
  v6 = v0;
  sub_23C7E79A8(&qword_256BCDD48);
  v7 = sub_23C902BB8();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    sub_23C7E6604();
    *v6 = v7;
    sub_23C7DEEA8();
    return;
  }
  v8 = (void *)sub_23C902688();
  if (v11)
    v12 = (unint64_t)v8 >= v10;
  else
    v12 = 1;
  if (v12)
    sub_23C902BF8(v8, v9);
  sub_23C7E6B54();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  sub_23C902BE0();
  while (1)
  {
    v16 = 3 * v13;
    v17 = *(_QWORD *)(v1 + 48) + 8 * v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = *(_QWORD *)(v7 + 48) + 8 * v16;
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_QWORD *)(v21 + 8) = v19;
    *(_BYTE *)(v21 + 16) = v20;
    sub_23C7E56A4(v18, v19, v20);
    if (v5)
      goto LABEL_9;
LABEL_10:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3)
      goto LABEL_26;
    ++v4;
    if (!*(_QWORD *)(v2 + 8 * v14))
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v3)
        goto LABEL_26;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_26;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_23:
    sub_23C902BC8();
  }
  v15 = v14 + 3;
  if (v15 >= v3)
    goto LABEL_26;
  if (*(_QWORD *)(v2 + 8 * v15))
  {
    v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v3)
      goto LABEL_26;
    ++v15;
    if (*(_QWORD *)(v2 + 8 * v4))
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_23C8FF4E4()
{
  sub_23C8FF4FC();
}

void sub_23C8FF4F0()
{
  sub_23C8FF4FC();
}

void sub_23C8FF4FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23C7DF844();
  v6 = v0;
  sub_23C7E79A8(v7);
  v8 = sub_23C902BB8();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    sub_23C7E6604();
    *v6 = v8;
    sub_23C7DEEA8();
    return;
  }
  v9 = (void *)sub_23C902688();
  if (v12)
    v13 = (unint64_t)v9 >= v11;
  else
    v13 = 1;
  if (v13)
    sub_23C902BF8(v9, v10);
  sub_23C7E6B54();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  sub_23C902BE0();
  while (1)
  {
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    swift_retain();
    if (v5)
      goto LABEL_9;
LABEL_10:
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v3)
      goto LABEL_26;
    ++v4;
    if (!*(_QWORD *)(v2 + 8 * v15))
    {
      v4 = v15 + 1;
      if (v15 + 1 >= v3)
        goto LABEL_26;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        v4 = v15 + 2;
        if (v15 + 2 >= v3)
          goto LABEL_26;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_23:
    sub_23C902BC8();
  }
  v16 = v15 + 3;
  if (v16 >= v3)
    goto LABEL_26;
  if (*(_QWORD *)(v2 + 8 * v16))
  {
    v4 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v3)
      goto LABEL_26;
    ++v16;
    if (*(_QWORD *)(v2 + 8 * v4))
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_23C8FF5FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430DBD8);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  if (!v7)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v17 = *v16;
    v18 = v16[1];
    v20 = v16[2];
    v19 = v16[3];
    sub_23C911BBC();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    swift_bridgeObjectRelease();
    result = sub_23C911BF8();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6))) == 0)
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v8 + 8 * v23);
        if (v28 != -1)
        {
          v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v8 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v24);
    *v29 = v17;
    v29[1] = v18;
    v29[2] = v20;
    v29[3] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v7)
      goto LABEL_6;
LABEL_7:
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_36;
    if (v13 >= v31)
      goto LABEL_32;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v31)
        goto LABEL_32;
      v14 = *(_QWORD *)(v30 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v31)
          goto LABEL_32;
        v14 = *(_QWORD *)(v30 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v31)
      goto LABEL_32;
    v14 = *(_QWORD *)(v30 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23C8FF8DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430DBE0);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    result = sub_23C911BF8();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23C8FFB84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_256BCA610);
  result = sub_23C9115F8();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = sub_23C911BB0();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23C8FFDE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;

  v1 = v0;
  v2 = *v0;
  sub_23C7E79A8(&qword_25430D608);
  v3 = sub_23C9115F8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_39:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v35 = v1;
  v36 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v37 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  v38 = v2;
  v39 = v4;
  if (!v7)
    goto LABEL_7;
LABEL_6:
  v40 = (v7 - 1) & v7;
  v42 = v10;
  for (i = __clz(__rbit64(v7)) | (v10 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (i << 6));
    v18 = *v16;
    v17 = v16[1];
    v20 = v16[2];
    v19 = v16[3];
    v21 = v16[4];
    v22 = v16[5];
    v24 = v16[6];
    v23 = v16[7];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = v18;
    sub_23C910F14();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    swift_bridgeObjectRelease();
    if (v22)
    {
      sub_23C911BD4();
      swift_bridgeObjectRetain();
      v25 = v21;
      sub_23C910F14();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = v21;
      sub_23C911BD4();
    }
    sub_23C911BD4();
    if (v23)
    {
      swift_bridgeObjectRetain();
      sub_23C910F14();
      swift_bridgeObjectRelease();
    }
    result = sub_23C911BF8();
    v4 = v39;
    v26 = -1 << *(_BYTE *)(v39 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v8 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
    *(_QWORD *)(v8 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v39 + 48) + (v29 << 6));
    v10 = v42;
    *v34 = v41;
    v34[1] = v17;
    v34[2] = v20;
    v34[3] = v19;
    v34[4] = v25;
    v34[5] = v22;
    v34[6] = v24;
    v34[7] = v23;
    ++*(_QWORD *)(v39 + 16);
    v2 = v38;
    v7 = v40;
    if (v40)
      goto LABEL_6;
LABEL_7:
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_41;
    if (v12 >= v37)
      goto LABEL_37;
    v13 = *(_QWORD *)(v36 + 8 * v12);
    v14 = v10 + 1;
    if (!v13)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v37)
        goto LABEL_37;
      v13 = *(_QWORD *)(v36 + 8 * v14);
      if (!v13)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v37)
          goto LABEL_37;
        v13 = *(_QWORD *)(v36 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v40 = (v13 - 1) & v13;
    v42 = v14;
  }
  v15 = v10 + 4;
  if (v10 + 4 >= v37)
  {
LABEL_37:
    result = swift_release_n();
    v1 = v35;
    goto LABEL_39;
  }
  v13 = *(_QWORD *)(v36 + 8 * v15);
  if (v13)
  {
    v14 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v37)
      goto LABEL_37;
    v13 = *(_QWORD *)(v36 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_20;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23C9001B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;

  v1 = *v0;
  sub_23C7E79A8(&qword_256BCDD48);
  v2 = sub_23C9115F8();
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v12 > 1)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_19;
    v8 = 2;
    if (v12 > 2)
    {
      v7 = *(_QWORD *)(v1 + 72);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if (v12 > 3)
      {
        v7 = *(_QWORD *)(v1 + 80);
        if (!v7)
        {
          v9 = 4;
          if (v12 > 4)
          {
            v7 = *(_QWORD *)(v1 + 88);
            if (v7)
            {
              v8 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v8 = v9 + 1;
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                JUMPOUT(0x23C90052CLL);
              }
              if (v8 >= v12)
                break;
              v7 = *(_QWORD *)(v1 + 56 + 8 * v8);
              ++v9;
              if (v7)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_20:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 24 * v6 + 16);
        sub_23C911BBC();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
LABEL_23:
  *v0 = v2;
  return result;
}

void sub_23C900540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_23C900554(a1, (uint64_t)&unk_25430DBB8, (uint64_t)DatabaseFunction.hash(into:), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32);
}

void sub_23C900554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *);
  void (*v37)(char *);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t i;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;

  sub_23C7E8EB8();
  a31 = v34;
  a32 = v35;
  v37 = v36;
  sub_23C902A18();
  sub_23C902D64(v38, v39);
  v40 = sub_23C9027F4();
  if (!*(_QWORD *)(v33 + 16))
  {
    sub_23C7DFE08();
LABEL_32:
    *v32 = v40;
    sub_23C7E4088();
    return;
  }
  sub_23C902E4C();
  v41 = v33 + 56;
  sub_23C902CCC();
  v44 = v43 & v42;
  v59 = (unint64_t)(v45 + 63) >> 6;
  sub_23C7DF5CC();
  v46 = 0;
  if (!v44)
    goto LABEL_4;
LABEL_3:
  sub_23C87E2D0();
  for (i = v47 | (v46 << 6); ; i = v51 + (v46 << 6))
  {
    v52 = *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * i);
    sub_23C911BBC();
    sub_23C7E7764();
    v37(&a12);
    sub_23C902EA0();
    sub_23C9028C0();
    if (v53)
    {
      sub_23C7E4E00();
      while (1)
      {
        sub_23C902594();
        if (v53)
        {
          if ((v55 & 1) != 0)
            break;
        }
        if (v56 == v57)
          v56 = 0;
        if (*(_QWORD *)(v40 + 56 + 8 * v56) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_23C7E3334();
LABEL_28:
    sub_23C9027B0(v54);
    *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * v58) = v52;
    sub_23C902B74();
    if (v44)
      goto LABEL_3;
LABEL_4:
    v49 = v46 + 1;
    if (__OFADD__(v46, 1))
      goto LABEL_34;
    if (v49 >= v59)
      goto LABEL_30;
    ++v46;
    if (!*(_QWORD *)(v41 + 8 * v49))
    {
      v46 = v49 + 1;
      if (v49 + 1 >= v59)
        goto LABEL_30;
      if (!*(_QWORD *)(v41 + 8 * v46))
      {
        v46 = v49 + 2;
        if (v49 + 2 >= v59)
          goto LABEL_30;
        if (!*(_QWORD *)(v41 + 8 * v46))
          break;
      }
    }
LABEL_17:
    sub_23C902FB4();
  }
  v50 = v49 + 3;
  if (v50 >= v59)
  {
LABEL_30:
    sub_23C902E6C();
    goto LABEL_32;
  }
  if (*(_QWORD *)(v41 + 8 * v50))
  {
    v46 = v50;
    goto LABEL_17;
  }
  while (1)
  {
    v46 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v46 >= v59)
      goto LABEL_30;
    ++v50;
    if (*(_QWORD *)(v41 + 8 * v46))
      goto LABEL_17;
  }
LABEL_35:
  __break(1u);
}

void sub_23C90070C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  sub_23C7E268C();
  sub_23C902A18();
  sub_23C7E79A8(&qword_25430DA00);
  v2 = sub_23C9027F4();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    sub_23C7DFE08();
LABEL_35:
    *v0 = v3;
    sub_23C7DB4D4();
    return;
  }
  v25 = v0;
  v4 = 0;
  v5 = v1 + 56;
  v6 = 1 << *(_BYTE *)(v1 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v2 + 56;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
    sub_23C8EF344();
    sub_23C902940();
    v17 = sub_23C7DA4F4() & ~(-1 << *(_BYTE *)(v3 + 32));
    if (((-1 << v17) & ~*(_QWORD *)(v10 + 8 * (v17 >> 6))) == 0)
    {
      sub_23C7E4E00();
      while (1)
      {
        sub_23C902594();
        if (v21)
        {
          if ((v18 & 1) != 0)
            break;
        }
        if (v19 == v20)
          v19 = 0;
        if (*(_QWORD *)(v10 + 8 * v19) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    sub_23C7E3334();
LABEL_31:
    sub_23C87E268();
    *(_QWORD *)(v10 + v22) |= v23;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v24) = v16;
    sub_23C902B74();
    sub_23C7E62C0();
    if (v8)
      goto LABEL_6;
LABEL_7:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_37;
    if (v13 >= v9)
      goto LABEL_33;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_33;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          goto LABEL_33;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
  {
LABEL_33:
    sub_23C7DFE08();
    v0 = v25;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      goto LABEL_33;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

void sub_23C9008E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v16;

  sub_23C7DF844();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  sub_23C902DA8();
  if (v6 != v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = v5;
  v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(_QWORD *)(v0 + 24) >> 1)
  {
    sub_23C7F1C58();
    v0 = v11;
  }
  sub_23C7E79A8(&qword_256BCBAF0);
  sub_23C902EA8();
  if (!v9)
    goto LABEL_18;
  v12 = *(_QWORD *)(v0 + 16);
  v13 = v12 - v2;
  if (__OFSUB__(v12, v2))
    goto LABEL_24;
  v14 = (const void *)(v0 + 32 + 48 * v2);
  if (v8 != v2 || (unint64_t)v14 + 48 * v13 <= v0 + 32 + 48 * v8)
  {
    memmove((void *)(v0 + 32 + 48 * v8), v14, 48 * v13);
    v12 = *(_QWORD *)(v0 + 16);
  }
  v7 = __OFADD__(v12, v10);
  v16 = v12 - v9;
  if (!v7)
  {
    *(_QWORD *)(v0 + 16) = v16;
LABEL_18:
    *v1 = v0;
    sub_23C7DEEA8();
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_23C9009E4(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  BOOL v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_23C7F16C0();
    v4 = v9;
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_18;
  v10 = *(_QWORD *)(v4 + 16);
  v11 = v10 - a2;
  if (__OFSUB__(v10, a2))
    goto LABEL_24;
  v12 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || (unint64_t)v12 + 16 * v11 <= v4 + 32 + 16 * v6)
  {
    result = (uint64_t)memmove((void *)(v4 + 32 + 16 * v6), v12, 16 * v11);
    v10 = *(_QWORD *)(v4 + 16);
  }
  v14 = __OFADD__(v10, v8);
  v15 = v10 - v7;
  if (!v14)
  {
    *(_QWORD *)(v4 + 16) = v15;
LABEL_18:
    *v2 = v4;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23C900AF4(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  BOOL v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_23C7F28EC();
    v4 = v9;
  }
  sub_23C7E79A8(&qword_256BCA6A8);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_18;
  v10 = *(_QWORD *)(v4 + 16);
  v11 = v10 - a2;
  if (__OFSUB__(v10, a2))
    goto LABEL_24;
  v12 = (const void *)(v4 + 32 + 40 * a2);
  if (v6 != a2 || (unint64_t)v12 + 40 * v11 <= v4 + 32 + 40 * v6)
  {
    result = (uint64_t)memmove((void *)(v4 + 32 + 40 * v6), v12, 40 * v11);
    v10 = *(_QWORD *)(v4 + 16);
  }
  v14 = __OFADD__(v10, v8);
  v15 = v10 - v7;
  if (!v14)
  {
    *(_QWORD *)(v4 + 16) = v15;
LABEL_18:
    *v2 = v4;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23C900C18(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  BOOL v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    sub_23C7F2908();
    v4 = v9;
  }
  sub_23C7E79A8(&qword_256BCA6B0);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_18;
  v10 = *(_QWORD *)(v4 + 16);
  v11 = v10 - a2;
  if (__OFSUB__(v10, a2))
    goto LABEL_24;
  v12 = (const void *)(v4 + 32 + 24 * a2);
  if (v6 != a2 || (unint64_t)v12 + 24 * v11 <= v4 + 32 + 24 * v6)
  {
    result = (uint64_t)memmove((void *)(v4 + 32 + 24 * v6), v12, 24 * v11);
    v10 = *(_QWORD *)(v4 + 16);
  }
  v14 = __OFADD__(v10, v8);
  v15 = v10 - v7;
  if (!v14)
  {
    *(_QWORD *)(v4 + 16) = v15;
LABEL_18:
    *v2 = v4;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23C900D3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DEA38();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C900DA4(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_23C900DA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      return sub_23C901480(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_146;
  v100 = result;
  v97 = a1;
  if (v3 <= 1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v103 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v8 = MEMORY[0x24BEE4AF8];
      goto LABEL_113;
    }
    v99 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_23C7E79A8(&qword_256BCA6B0);
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v99 = result;
    v103 = (char *)(result + 32);
  }
  v6 = 0;
  v7 = *a1;
  v98 = *a1 + 8;
  v96 = *a1 - 24;
  v8 = MEMORY[0x24BEE4AF8];
  v101 = v3;
  v102 = v7;
  while (1)
  {
    v9 = v6++;
    if (v6 >= v3)
      goto LABEL_39;
    v10 = (uint64_t *)(v7 + 24 * v6);
    result = *v10;
    v11 = v10[1];
    v12 = (_QWORD *)(v7 + 24 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_38;
      v14 = 0;
    }
    else
    {
      result = sub_23C911A18();
      v14 = result;
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_30;
    }
    v16 = (_QWORD *)(v98 + 24 * v15);
    do
    {
      result = *(v16 - 1);
      v17 = (_QWORD *)(v7 + 24 * v6);
      if (result == *v17 && *v16 == v17[1])
      {
        if ((v14 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = sub_23C911A18();
        if (((v14 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v16 += 3;
      v19 = v15 + 1;
      v6 = v15;
      v15 = v19;
    }
    while (v19 < v3);
    v15 = v19;
LABEL_30:
    v6 = v15;
    if ((v14 & 1) != 0)
    {
LABEL_31:
      if (v15 < v9)
        goto LABEL_150;
      if (v9 < v15)
      {
        v20 = 24 * v15;
        v21 = 24 * v9;
        v22 = v15;
        v23 = v9;
        do
        {
          if (v23 != --v22)
          {
            if (!v7)
              goto LABEL_153;
            v24 = v7 + v21;
            v25 = v7 + v20;
            v26 = *(_QWORD *)(v7 + v21);
            v27 = *(_OWORD *)(v7 + v21 + 8);
            v28 = *(_OWORD *)(v7 + v20 - 24);
            *(_QWORD *)(v24 + 16) = *(_QWORD *)(v7 + v20 - 8);
            *(_OWORD *)v24 = v28;
            *(_QWORD *)(v25 - 24) = v26;
            *(_OWORD *)(v25 - 16) = v27;
          }
          ++v23;
          v20 -= 24;
          v21 += 24;
        }
        while (v23 < v22);
      }
LABEL_38:
      v6 = v15;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9))
        goto LABEL_145;
      if (v6 - v9 < v100)
        break;
    }
LABEL_59:
    if (v6 < v9)
      goto LABEL_140;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
    }
    v39 = *(_QWORD *)(v8 + 16);
    v38 = *(_QWORD *)(v8 + 24);
    v40 = v39 + 1;
    if (v39 >= v38 >> 1)
    {
      result = (uint64_t)sub_23C8DE884((char *)(v38 > 1), v39 + 1, 1, (char *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v40;
    v41 = v8 + 32;
    v42 = (uint64_t *)(v8 + 32 + 16 * v39);
    *v42 = v9;
    v42[1] = v6;
    if (v39)
    {
      v7 = v102;
      while (1)
      {
        v43 = v40 - 1;
        if (v40 >= 4)
        {
          v48 = v41 + 16 * v40;
          v49 = *(_QWORD *)(v48 - 64);
          v50 = *(_QWORD *)(v48 - 56);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_129;
          v53 = *(_QWORD *)(v48 - 48);
          v52 = *(_QWORD *)(v48 - 40);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_130;
          v55 = v40 - 2;
          v56 = (uint64_t *)(v41 + 16 * (v40 - 2));
          v58 = *v56;
          v57 = v56[1];
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_131;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_133;
          if (v60 >= v51)
          {
            v78 = (uint64_t *)(v41 + 16 * v43);
            v80 = *v78;
            v79 = v78[1];
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_139;
            v71 = v46 < v81;
            goto LABEL_97;
          }
        }
        else
        {
          if (v40 != 3)
          {
            v72 = *(_QWORD *)(v8 + 32);
            v73 = *(_QWORD *)(v8 + 40);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_91;
          }
          v45 = *(_QWORD *)(v8 + 32);
          v44 = *(_QWORD *)(v8 + 40);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_132;
        v55 = v40 - 2;
        v61 = (uint64_t *)(v41 + 16 * (v40 - 2));
        v63 = *v61;
        v62 = v61[1];
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_134;
        v67 = (uint64_t *)(v41 + 16 * v43);
        v69 = *v67;
        v68 = v67[1];
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_136;
        if (__OFADD__(v65, v70))
          goto LABEL_138;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_97:
          if (v71)
            v43 = v55;
          goto LABEL_99;
        }
LABEL_91:
        if ((v66 & 1) != 0)
          goto LABEL_135;
        v74 = (uint64_t *)(v41 + 16 * v43);
        v76 = *v74;
        v75 = v74[1];
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_137;
        if (v77 < v65)
          goto LABEL_108;
LABEL_99:
        v82 = v43 - 1;
        if (v43 - 1 >= v40)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!v7)
          goto LABEL_152;
        v83 = v7;
        v84 = (uint64_t *)(v41 + 16 * v82);
        v85 = *v84;
        v86 = (_QWORD *)(v41 + 16 * v43);
        v87 = v86[1];
        result = sub_23C90155C((char *)(v83 + 24 * *v84), (char *)(v83 + 24 * *v86), v83 + 24 * v87, v103);
        if (v1)
        {
LABEL_110:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v99 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v87 < v85)
          goto LABEL_126;
        if (v43 > *(_QWORD *)(v8 + 16))
          goto LABEL_127;
        *v84 = v85;
        *(_QWORD *)(v41 + 16 * v82 + 8) = v87;
        v88 = *(_QWORD *)(v8 + 16);
        if (v43 >= v88)
          goto LABEL_128;
        v40 = v88 - 1;
        result = (uint64_t)memmove((void *)(v41 + 16 * v43), v86 + 2, 16 * (v88 - 1 - v43));
        *(_QWORD *)(v8 + 16) = v88 - 1;
        v71 = v88 > 2;
        v7 = v102;
        if (!v71)
          goto LABEL_108;
      }
    }
    v40 = 1;
    v7 = v102;
LABEL_108:
    v3 = v101;
    if (v6 >= v101)
    {
      v5 = v99;
LABEL_113:
      result = v8;
      v99 = v5;
      if (v40 >= 2)
      {
        v89 = *v97;
        do
        {
          v90 = v40 - 2;
          if (v40 < 2)
            goto LABEL_141;
          if (!v89)
            goto LABEL_154;
          v91 = result;
          v92 = *(_QWORD *)(result + 32 + 16 * v90);
          v93 = *(_QWORD *)(result + 32 + 16 * (v40 - 1) + 8);
          result = sub_23C90155C((char *)(v89 + 24 * v92), (char *)(v89 + 24 * *(_QWORD *)(result + 32 + 16 * (v40 - 1))), v89 + 24 * v93, v103);
          if (v1)
            goto LABEL_110;
          if (v93 < v92)
            goto LABEL_142;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v91 = result;
          }
          if (v90 >= *(_QWORD *)(v91 + 16))
            goto LABEL_143;
          v94 = (_QWORD *)(v91 + 32 + 16 * v90);
          *v94 = v92;
          v94[1] = v93;
          v95 = *(_QWORD *)(v91 + 16);
          if (v40 > v95)
            goto LABEL_144;
          memmove((void *)(v91 + 32 + 16 * (v40 - 1)), (const void *)(v91 + 32 + 16 * v40), 16 * (v95 - v40));
          result = v91;
          *(_QWORD *)(v91 + 16) = v95 - 1;
          v40 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v99 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v9, v100))
    goto LABEL_148;
  if (v9 + v100 >= v3)
    v29 = v3;
  else
    v29 = v9 + v100;
  if (v29 >= v9)
  {
    if (v6 != v29)
    {
      v30 = v96 + 24 * v6;
      do
      {
        v31 = (uint64_t *)(v7 + 24 * v6);
        result = *v31;
        v32 = v31[1];
        v33 = v9;
        v34 = v30;
        do
        {
          if (result == *(_QWORD *)v34 && v32 == *(_QWORD *)(v34 + 8))
            break;
          result = sub_23C911A18();
          if ((result & 1) == 0)
            break;
          if (!v7)
            goto LABEL_151;
          v36 = *(_OWORD *)(v34 + 32);
          v37 = *(_QWORD *)(v34 + 16);
          result = *(_QWORD *)(v34 + 24);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)v34;
          *(_QWORD *)(v34 + 40) = v37;
          *(_QWORD *)v34 = result;
          *(_OWORD *)(v34 + 8) = v36;
          v32 = v36;
          v34 -= 24;
          ++v33;
        }
        while (v6 != v33);
        ++v6;
        v30 += 24;
      }
      while (v6 != v29);
      v6 = v29;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}

uint64_t sub_23C901480(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 - 24;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 24 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = v8;
      do
      {
        if (result == *(_QWORD *)v12 && v10 == *(_QWORD *)(v12 + 8))
          break;
        result = sub_23C911A18();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v14 = *(_OWORD *)(v12 + 32);
        v15 = *(_QWORD *)(v12 + 16);
        result = *(_QWORD *)(v12 + 24);
        *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
        *(_QWORD *)(v12 + 40) = v15;
        *(_QWORD *)v12 = result;
        *(_OWORD *)(v12 + 8) = v14;
        v10 = v14;
        v12 -= 24;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 24;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C90155C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  BOOL v15;
  char *v16;
  __int128 v17;
  unint64_t v21;
  char *v22;
  char *v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  __int128 v27;
  uint64_t v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[24 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v13 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_57;
    v21 = a3 - 24;
    while (1)
    {
      v22 = (char *)(v21 + 24);
      v23 = v13 - 24;
      v24 = *((_QWORD *)v13 - 3) == *((_QWORD *)v6 - 3) && *((_QWORD *)v13 - 2) == *((_QWORD *)v6 - 2);
      if (v24 || (sub_23C911A18() & 1) == 0)
      {
        v26 = v22 != v13 || v21 >= (unint64_t)v13;
        v13 -= 24;
        if (!v26)
          goto LABEL_53;
      }
      else
      {
        v25 = v22 != v6 || v21 >= (unint64_t)v6;
        v23 = v6 - 24;
        v6 -= 24;
        if (!v25)
          goto LABEL_53;
      }
      v27 = *(_OWORD *)v23;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v21 = v27;
LABEL_53:
      v21 -= 24;
      if (v6 <= v7 || v13 <= v4)
        goto LABEL_57;
    }
  }
  if (a4 != __dst || &__dst[24 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v13 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v15 && (sub_23C911A18() & 1) != 0)
        break;
      v16 = v4;
      v15 = v7 == v4;
      v4 += 24;
      if (!v15)
        goto LABEL_20;
LABEL_21:
      v7 += 24;
      if (v4 >= v13 || (unint64_t)v6 >= a3)
        goto LABEL_26;
    }
    v16 = v6;
    v15 = v7 == v6;
    v6 += 24;
    if (v15)
      goto LABEL_21;
LABEL_20:
    v17 = *(_OWORD *)v16;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v7 = v17;
    goto LABEL_21;
  }
LABEL_26:
  v6 = v7;
LABEL_57:
  v29 = (v13 - v4) / 24;
  if (v6 != v4 || v6 >= &v4[24 * v29])
    memmove(v6, v4, 24 * v29);
  return 1;
}

uint64_t sub_23C901760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_23C901798(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
      return sub_23C91158C();
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *sub_23C90181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  v11 = sub_23C9018D4((uint64_t)v9, v10, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v11;
}

_QWORD *sub_23C9018D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  v8 = sub_23C812004(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a1, a3);
  sub_23C7DA9C0();
  a2[10] = v9;
  a2[11] = v10;
  a2[7] = 0;
  a2[8] = 0;
  sub_23C8461F0((uint64_t)v12, (uint64_t)(a2 + 2));
  a2[9] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  return a2;
}

void sub_23C90197C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;

  swift_bridgeObjectRetain();
  sub_23C7F8D74();
  sub_23C7DFE34(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_23C7DF2C8();
}

uint64_t sub_23C9019B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  char v11;

  sub_23C7DC590();
  sub_23C7DBCC8();
  sub_23C7DFDFC();
  sub_23C7F8DA4();
  return sub_23C7DFE34(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11);
}

void sub_23C9019F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23C80133C(a1, a2, a3);
  sub_23C7DA4D4(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_23C7DB390();
}

uint64_t sub_23C901A24()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C901A48()
{
  sub_23C901C78((uint64_t)&unk_256BCDC78);
}

void sub_23C901A6C()
{
  sub_23C901C78((uint64_t)&unk_256BCDC80);
}

void sub_23C901A90()
{
  sub_23C901D08((uint64_t)&unk_256BCDC88);
}

unint64_t sub_23C901AB4()
{
  unint64_t result;

  result = qword_256BCDC98;
  if (!qword_256BCDC98)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for RowIndex, &type metadata for RowIndex);
    atomic_store(result, (unint64_t *)&qword_256BCDC98);
  }
  return result;
}

unint64_t sub_23C901AF0()
{
  unint64_t result;

  result = qword_256BCDCA0;
  if (!qword_256BCDCA0)
  {
    result = MEMORY[0x242626100](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256BCDCA0);
  }
  return result;
}

unint64_t sub_23C901B2C()
{
  return sub_23C901BDC((uint64_t)&unk_256BCDCA8);
}

void sub_23C901B60()
{
  sub_23C901C78((uint64_t)&unk_256BCDCC0);
}

void sub_23C901B84()
{
  sub_23C901D08((uint64_t)&unk_256BCDCC8);
}

unint64_t sub_23C901BA8()
{
  return sub_23C901BDC((uint64_t)&unk_256BCDCD0);
}

unint64_t sub_23C901BDC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_23C902B68(a1);
  if (!result)
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_23C7DDB10(&qword_256BCDCB0);
    sub_23C901C78(v6);
    v9 = v8;
    result = MEMORY[0x242626100](v5, v7, &v9);
    atomic_store(result, v1);
  }
  return result;
}

void sub_23C901C54()
{
  sub_23C901C78((uint64_t)&unk_25430B408);
}

void sub_23C901C78(uint64_t a1)
{
  if (!sub_23C902B68(a1))
  {
    type metadata accessor for Row();
    sub_23C902FEC();
  }
  sub_23C7DB390();
}

unint64_t sub_23C901CA8()
{
  unint64_t result;

  result = qword_256BCA5B8;
  if (!qword_256BCA5B8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for RowIndex, &type metadata for RowIndex);
    atomic_store(result, (unint64_t *)&qword_256BCA5B8);
  }
  return result;
}

void sub_23C901CE4()
{
  sub_23C901D08((uint64_t)&unk_256BCDCD8);
}

void sub_23C901D08(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!sub_23C902B68(a1))
  {
    v3 = v2;
    v4 = sub_23C7DDB10(&qword_256BCDC90);
    v5[0] = sub_23C901AB4();
    v5[1] = sub_23C901AF0();
    atomic_store(MEMORY[0x242626100](v3, v4, v5), v1);
  }
  sub_23C7E252C();
}

void sub_23C901D64()
{
  sub_23C7E12BC((uint64_t)&unk_256BCDCE0);
}

void sub_23C901D90()
{
  sub_23C7E12BC((uint64_t)&unk_256BCA5C8);
}

unint64_t sub_23C901DC0()
{
  unint64_t result;

  result = qword_256BCA5C0;
  if (!qword_256BCA5C0)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for RowIndex, &type metadata for RowIndex);
    atomic_store(result, (unint64_t *)&qword_256BCA5C0);
  }
  return result;
}

uint64_t sub_23C901DFC()
{
  return MEMORY[0x24BEE17C0];
}

unint64_t sub_23C901E0C()
{
  unint64_t result;

  result = qword_256BCDCE8;
  if (!qword_256BCDCE8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Row.ScopesView, &type metadata for Row.ScopesView);
    atomic_store(result, (unint64_t *)&qword_256BCDCE8);
  }
  return result;
}

void sub_23C901E48()
{
  sub_23C7E12BC((uint64_t)&unk_256BCDCF0);
}

void sub_23C901E74()
{
  sub_23C7E12BC((uint64_t)&unk_256BCDD00);
}

void sub_23C901EA0()
{
  sub_23C7E12BC((uint64_t)&unk_256BCDD10);
}

void sub_23C901ECC()
{
  sub_23C7E12BC((uint64_t)&unk_256BCDD20);
}

uint64_t method lookup function for Row()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for RowCursor()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for RowIndex()
{
  sub_23C7DFB90();
}

void type metadata accessor for Row.ScopesView()
{
  sub_23C7DFB90();
}

uint64_t _s12GRDBInternal3RowC10ScopesViewVwxx_0(uint64_t a1)
{
  sub_23C902B68(a1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _s12GRDBInternal3RowC10ScopesViewVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C902818(a1, a2);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v2 + 24) = v4;
  swift_retain();
  sub_23C7DB3D4();
  sub_23C7DC46C();
  sub_23C7DBCC8();
  sub_23C7DB3A0();
}

void _s12GRDBInternal3RowC10ScopesViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  sub_23C7E6604();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_23C7E072C();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_23C7E072C();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  sub_23C7DB624();
  sub_23C7DB3A0();
}

void _s12GRDBInternal3RowC10ScopesViewVwta_0(uint64_t a1, uint64_t a2)
{
  swift_release();
  sub_23C902A6C();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  sub_23C7DB390();
}

_QWORD *sub_23C902064(_QWORD *result, int a2, int a3)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
    if (a3 < 0)
      *((_BYTE *)result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_23C902E1C(result, a2);
    }
    *((_BYTE *)result + 32) = 0;
    if (a2)
      return sub_23C902E1C(result, a2);
  }
  return result;
}

void type metadata accessor for Row.ScopesTreeView()
{
  sub_23C7DFB90();
}

void sub_23C9020AC(uint64_t *a1, uint64_t *a2)
{
  sub_23C902818(a1, a2);
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DB390();
}

void assignWithTake for Row.PrefetchedRowsView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_23C9022C0(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

void type metadata accessor for Row.PrefetchedRowsView()
{
  sub_23C7DFB90();
}

void type metadata accessor for ArrayRowImpl()
{
  sub_23C7DFB90();
}

void sub_23C9020FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_23C902818(a1, a2);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DC46C();
  sub_23C7DB3A0();
}

_QWORD *assignWithCopy for Row.Prefetch(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Row.Prefetch()
{
  return &type metadata for Row.Prefetch;
}

uint64_t sub_23C9021B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23C8F8450(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_23C9021BC()
{
  sub_23C90197C();
}

void sub_23C9021D8()
{
  sub_23C8F7ED4();
}

uint64_t sub_23C9021FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C902208(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C902244(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_23C7E56A4(result, a2, a3);
  return result;
}

_QWORD *assignWithCopy for StatementCopyRowImpl(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void assignWithTake for StatementCopyRowImpl(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_23C9022C0(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23C9022C0(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  a4(*a1);
  sub_23C902A6C();
  sub_23C7DB390();
}

_QWORD *sub_23C9022EC(_QWORD *result, int a2, int a3)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
    if (a3 < 0)
      *((_BYTE *)result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return sub_23C902E1C(result, a2);
    }
    *((_BYTE *)result + 16) = 0;
    if (a2)
      return sub_23C902E1C(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for StatementCopyRowImpl()
{
  return &type metadata for StatementCopyRowImpl;
}

ValueMetadata *type metadata accessor for EmptyRowImpl()
{
  return &type metadata for EmptyRowImpl;
}

void sub_23C902344(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_retain();
  sub_23C7DB3D4();
  sub_23C7DB390();
}

uint64_t assignWithTake for StatementRowImpl(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StatementRowImpl()
{
  return &type metadata for StatementRowImpl;
}

uint64_t sub_23C9023CC()
{
  uint64_t *v0;

  return sub_23C8F88D8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_23C9023D8()
{
  return sub_23C9019B0();
}

uint64_t sub_23C90243C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v2, v3, 3);
  return swift_retain();
}

uint64_t sub_23C902494()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v2, v3, 3);
  return sub_23C910950();
}

uint64_t sub_23C9024F8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  return sub_23C7E56A4(v2, v3, 3);
}

uint64_t sub_23C902520()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return v0(v6, v5, v4, v3, v2, v7, v1);
}

void sub_23C902564(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v5 = v4;
  v5[1] = v3;
}

uint64_t sub_23C9025A0()
{
  return swift_retain();
}

uint64_t sub_23C9025C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

uint64_t sub_23C9025E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

_QWORD *sub_23C902638()
{
  uint64_t v0;

  return sub_23C7E7E34((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23C902688()
{
  uint64_t v0;

  return v0 + 56;
}

void sub_23C9026D0(char a1@<W8>)
{
  _QWORD *v1;

  *v1 = -1 << a1;
}

uint64_t sub_23C9026E0(_QWORD *a1)
{
  uint64_t v1;

  return RowDecodingContext.init(row:key:)(a1, (__int128 *)(v1 - 200), v1 - 176);
}

void sub_23C9026EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(a1, v49, a3, a4, v50, *(_QWORD *)(v51 - 104), v48, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

uint64_t sub_23C902730()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 2);
}

uint64_t sub_23C902740()
{
  return swift_retain();
}

uint64_t sub_23C902748(uint64_t a1)
{
  char v1;
  unint64_t v2;

  return sub_23C7E5640(a1, v2, v1);
}

uint64_t sub_23C902754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
  *(_QWORD *)(v1 - 200) = 0;
  *(_QWORD *)(v1 - 192) = 0xE000000000000000;
  return sub_23C911634();
}

_QWORD *sub_23C902770()
{
  uint64_t v0;

  return sub_23C7E7E34((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23C902780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
}

uint64_t sub_23C902798()
{
  uint64_t v0;

  return v0;
}

void sub_23C9027B0(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_23C9027F4()
{
  return sub_23C9115F8();
}

uint64_t sub_23C902818(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return result;
}

uint64_t sub_23C902840()
{
  return swift_dynamicCast();
}

uint64_t sub_23C902858()
{
  uint64_t v0;
  unint64_t v1;
  char v2;

  sub_23C7E56A4(v0, v1, v2);
  return sub_23C7E5640(v0, v1, v2);
}

uint64_t sub_23C902890()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C9028A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 48) + 8 * v2);
  return swift_retain();
}

uint64_t sub_23C9028B4()
{
  return swift_allocObject();
}

_QWORD *sub_23C9028DC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, _QWORD);
  va_list va;

  va_start(va, a3);
  return v3((uint64_t *)va, a1, 0);
}

uint64_t sub_23C9028E8()
{
  return sub_23C910F5C();
}

uint64_t sub_23C9028FC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(a1, v3, v4, v2);
}

uint64_t sub_23C902910()
{
  return sub_23C9114E4();
}

uint64_t sub_23C902924(uint64_t result, unint64_t a2, char a3)
{
  return sub_23C7E5640(result, a2, a3);
}

uint64_t sub_23C90292C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return DatabaseValue.Storage.value.getter(v0, v1, v2);
}

uint64_t sub_23C902940()
{
  return sub_23C911BC8();
}

uint64_t sub_23C90294C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 200) = 0;
  *(_QWORD *)(v0 - 192) = 0xE000000000000000;
  return sub_23C911634();
}

uint64_t sub_23C90297C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C902988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
}

uint64_t _s12GRDBInternal9RowCursorC4_rowAA0B0Cvg_0()
{
  return swift_retain();
}

uint64_t sub_23C9029A4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_23C88CFE0(0, (unint64_t)(a1 + 63) >> 6, a4);
}

uint64_t sub_23C9029B8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v1, v3);
}

uint64_t sub_23C9029CC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C9029D4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return swift_bridgeObjectRelease();
}

void sub_23C9029E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 256) = *(_QWORD *)(v0 - 200);
  *(_QWORD *)(v0 - 264) = *(_QWORD *)(v0 - 192);
}

uint64_t sub_23C9029F8()
{
  return sub_23C910EE4();
}

uint64_t sub_23C902A30()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 4);
}

unint64_t sub_23C902A40()
{
  return sub_23C7E94B8();
}

uint64_t sub_23C902A5C()
{
  uint64_t v0;

  return sub_23C800944(v0 - 160, *(_QWORD *)(v0 - 136));
}

uint64_t sub_23C902A6C()
{
  _OWORD *v0;
  _OWORD *v1;

  *v1 = *v0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C902A8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E5640(v1, v2, 1);
  return v0;
}

uint64_t sub_23C902AB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E5640(v1, v2, 0);
  return v0;
}

uint64_t sub_23C902B04()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C902B14()
{
  unint64_t v0;
  uint64_t v1;
  char v2;

  return sub_23C7E56A4(v1, v0, v2);
}

uint64_t sub_23C902B48(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;

  *(_OWORD *)(v3 - 32) = *a2;
  return static Row.fetchCursor(_:arguments:adapter:)(a1, (uint64_t *)(v3 - 32), a3);
}

uint64_t sub_23C902B58()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C902B68(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_23C902B74()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_23C902B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *v9 = a9;
  return swift_unknownObjectRelease();
}

uint64_t sub_23C902BB0()
{
  return sub_23C9117C0();
}

uint64_t sub_23C902BB8()
{
  return sub_23C9115EC();
}

void *sub_23C902BF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

void sub_23C902C04()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_23C902C2C()
{
  return sub_23C910F14();
}

uint64_t sub_23C902C38(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 - 176) = a1;
  return Row.PrefetchedRowsView.keys.getter();
}

uint64_t sub_23C902C50()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C902C5C(const void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,size_t __n)
{
  uint64_t v32;

  return memcmp(a1, (const void *)(v32 - 224), __n);
}

uint64_t sub_23C902C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return a3(a1, a2, v4, v3);
}

uint64_t sub_23C902C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C846130(a1, a2, a3, a4, v4);
}

uint64_t sub_23C902C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DE70C(a1, a2, 1, v2);
}

uint64_t sub_23C902C88()
{
  uint64_t v0;

  return _s12GRDBInternal13DatabaseEventVwxx_0(v0 - 160);
}

void sub_23C902C90()
{
  uint64_t v0;

  sub_23C8461F0(v0 - 160, v0 - 200);
}

uint64_t sub_23C902CB0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  return sub_23C815EDC(a1, a2, v2);
}

uint64_t sub_23C902CE0()
{
  return sub_23C910F5C();
}

uint64_t sub_23C902D14()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C902D20()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C902D40()
{
  return sub_23C910F14();
}

uint64_t sub_23C902D4C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C800944(v1 - 200, v0);
}

uint64_t sub_23C902D58()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C902D64(uint64_t a1, uint64_t *a2)
{
  return sub_23C7E79A8(a2);
}

uint64_t sub_23C902D6C()
{
  return swift_release();
}

uint64_t sub_23C902D94()
{
  return sub_23C910EE4();
}

uint64_t sub_23C902DC8()
{
  return swift_release();
}

uint64_t sub_23C902DD4()
{
  return swift_bridgeObjectRelease();
}

void sub_23C902DE8()
{
  uint64_t v0;

  sub_23C8461F0(v0 - 120, v0 - 160);
}

uint64_t sub_23C902DF4()
{
  return Row.scopes.getter();
}

uint64_t sub_23C902DFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  __int128 v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, __int128);
  v14 = va_arg(va1, _QWORD);
  return RowDecodingContext.init(row:key:)(a1, (__int128 *)va, (uint64_t)va1);
}

uint64_t sub_23C902E08()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C902E10()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23C902E1C(_QWORD *result, int a2)
{
  *result = (a2 - 1);
  return result;
}

uint64_t sub_23C902E28@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23C902E34(uint64_t a1)
{
  char v1;
  unint64_t v2;

  return sub_23C7E56A4(a1, v2, v1);
}

uint64_t sub_23C902E40@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_23C902E6C()
{
  return swift_release_n();
}

void sub_23C902E74(char a1@<W8>, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = -1 << a1;
}

uint64_t sub_23C902E94(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  return sub_23C815EF0(a1, v1, v2);
}

uint64_t sub_23C902EA0()
{
  return sub_23C911BF8();
}

uint64_t sub_23C902EA8()
{
  return swift_arrayDestroy();
}

_QWORD *sub_23C902EC0()
{
  uint64_t v0;

  return sub_23C7E7E34((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23C902EE4()
{
  return sub_23C911BF8();
}

uint64_t sub_23C902EEC()
{
  return sub_23C911BBC();
}

uint64_t sub_23C902EF4()
{
  return sub_23C911BBC();
}

uint64_t sub_23C902F00()
{
  return sub_23C911BBC();
}

uint64_t sub_23C902F2C()
{
  uint64_t v0;

  return sub_23C7F1754(v0);
}

void sub_23C902F58()
{
  JUMPOUT(0x242624CFCLL);
}

uint64_t sub_23C902F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23C8FCBDC(v3, a2, a3);
}

uint64_t sub_23C902F6C(uint64_t result)
{
  return sub_23C7E76BC(result);
}

void sub_23C902F88()
{
  Row.fastDecodeIfPresent<A>(_:atUncheckedIndex:)();
}

uint64_t sub_23C902F90()
{
  return sub_23C911BBC();
}

void sub_23C902F9C(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v3;
  uint64_t v4;

  sub_23C8FCF64(v4, v3, a3);
}

uint64_t sub_23C902FA8()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_23C902FD4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C902FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C8210FC(a1, a2, v2, v3);
}

void sub_23C902FEC()
{
  JUMPOUT(0x242626100);
}

void static FetchableRecord<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C903044(a1, a2, a3, a4, FetchRequest<>.fetchCursor(_:));
}

void static FetchableRecord<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C903044(a1, a2, a3, a4, FetchRequest<>.fetchAll(_:));
}

#error "23C90306C: call analysis failed (funcsize=16)"

#error "23C903094: call analysis failed (funcsize=7)"

#error "23C9030CC: call analysis failed (funcsize=16)"

#error "23C9030F0: call analysis failed (funcsize=6)"

#error "23C903128: call analysis failed (funcsize=16)"

#error "23C90314C: call analysis failed (funcsize=6)"

void static FetchableRecord<>.fetchCursor<A>(_:keys:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v2 = sub_23C7E26A8(a1, a2);
  static TableRecord.filter<A>(keys:)(v2, v3, v4, v5);
  v14 = sub_23C7E4068(v6, v7, v8, v9, v10, v11, v12, v13, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38,
          v39);
  sub_23C7DFB44((uint64_t)v14, v15, v16, v17);
  sub_23C7E57A4();
}

#error "23C9031B0: call analysis failed (funcsize=5)"

void static FetchableRecord<>.fetchAll<A>(_:keys:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  (*(void (**)(uint64_t))(v3 + 16))(v2 - v1);
  sub_23C903FD0();
  v4 = sub_23C7EE20C();
  sub_23C7E5A34(v4);
  sub_23C82D110();
}

void sub_23C903274()
{
  uint64_t v0;
  uint64_t v1;

  if ((sub_23C911364() & 1) == 0)
  {
    *(_QWORD *)(v1 - 256) = v0;
    sub_23C82D110();
  }
  swift_bridgeObjectRelease();
  sub_23C911124();
  sub_23C7DEF28();
}

uint64_t static FetchableRecord<>.fetchOne<A>(_:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[21];
  _BYTE v35[176];

  v28 = a7;
  v27 = a6;
  v30 = a5;
  v31 = a3;
  v29 = a1;
  v32 = a8;
  v10 = sub_23C9114E4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v26 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v15);
  sub_23C7DE95C();
  v21 = v20 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a2, v10);
  if (sub_23C7DE718((uint64_t)v17, 1, a4) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v21, v17, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, v21, a4);
    sub_23C7DE70C((uint64_t)v14, 0, 1, a4);
    v23 = v31;
    static TableRecord.filter<A>(key:)(v34, v14, v31, a4, v27, v28);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_23C7E0718(v35, v34);
    sub_23C7E0718(&v33, v34);
    type metadata accessor for QueryInterfaceRequest(0, v23, v24, v25);
    sub_23C82D110();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  return sub_23C7DE70C(v32, 1, 1, v31);
}

void static FetchableRecord<>.fetchCursor<A>(_:ids:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  sub_23C903FE0();
  v2 = sub_23C7DC694(v0, v1);
  static TableRecord<>.filter<A>(ids:)(v2, v3, v4, v5);
  v14 = sub_23C7E4068(v6, v7, v8, v9, v10, v11, v12, v13, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38,
          v39);
  sub_23C7DFB44((uint64_t)v14, v15, v16, v17);
  sub_23C7E57A4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  sub_23C903FE0();
  v2 = sub_23C7DC694(v0, v1);
  static TableRecord<>.filter<A>(ids:)(v2, v3, v4, v5, v6, v7);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38,
          v39,
          v40,
          v41);
  sub_23C7DFB44((uint64_t)v16, v17, v18, v19);
  sub_23C7E57A4();
}

#error "23C9035A0: call analysis failed (funcsize=5)"

void static FetchableRecord<>.fetchAll<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  sub_23C7E6DD0();
  a63 = v64;
  a64 = v65;
  if ((sub_23C7EC92C(v66, v67, v68, v69, v70) & 1) == 0)
  {
    v71 = sub_23C7E5FB8();
    static TableRecord<>.filter<A>(ids:)(v71, v72, v73, v74);
    v75 = sub_23C7E0718(&a10, &a31);
    sub_23C7E6E24((uint64_t)v75, v76, v77, v78);
    sub_23C7DB5AC();
  }
  sub_23C903F9C();
  sub_23C7E2074();
}

{
  uint64_t a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  sub_23C7E6DD0();
  a63 = v64;
  a64 = v65;
  if ((sub_23C7EC92C(v66, v67, v68, v69, v70) & 1) == 0)
  {
    v71 = sub_23C7E5FB8();
    static TableRecord<>.filter<A>(ids:)(v71, v72, v73, v74, v75, v76);
    v77 = sub_23C7E0718(&a10, &a31);
    sub_23C7E6E24((uint64_t)v77, v78, v79, v80);
    sub_23C7DB5AC();
  }
  sub_23C903F9C();
  sub_23C7E2074();
}

#error "23C903638: call analysis failed (funcsize=12)"

#error "23C903658: call analysis failed (funcsize=6)"

#error "23C9036B8: call analysis failed (funcsize=5)"

#error "23C903754: call analysis failed (funcsize=13)"

#error "23C903774: call analysis failed (funcsize=6)"

void static FetchableRecord<>.fetchSet<A>(_:keys:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  (*(void (**)(uint64_t))(v3 + 16))(v2 - v1);
  sub_23C903FD0();
  v4 = sub_23C7EE20C();
  sub_23C7E5A34(v4);
  sub_23C7E57A4();
}

void sub_23C903834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((sub_23C911364() & 1) == 0)
  {
    *(_QWORD *)(v2 - 256) = v1;
    sub_23C7E57A4();
  }
  v3 = *(_QWORD *)(v2 - 72);
  swift_bridgeObjectRelease();
  v4 = sub_23C903F9C();
  if (MEMORY[0x242624DB0](v4, v0))
    sub_23C903C90(v4, v0, v3);
  else
    sub_23C7DE934();
  sub_23C7DEF28();
}

void static FetchableRecord<>.fetchSet<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  sub_23C7E6DD0();
  a63 = v64;
  a64 = v65;
  if ((sub_23C7E1CE0(v66, v67, v68, v69, v70) & 1) != 0)
  {
    sub_23C7E667C();
    sub_23C7E6F6C();
  }
  v71 = sub_23C7ECD54();
  static TableRecord<>.filter<A>(ids:)(v71, v72, v73, v74);
  v75 = sub_23C7E0718(&a10, &a31);
  sub_23C7DFB44((uint64_t)v75, v76, v77, v78);
  sub_23C7DB5AC();
}

{
  uint64_t a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  sub_23C7E6DD0();
  a63 = v64;
  a64 = v65;
  if ((sub_23C7E1CE0(v66, v67, v68, v69, v70) & 1) != 0)
  {
    sub_23C7E667C();
    sub_23C7E6F6C();
  }
  v71 = sub_23C7ECD54();
  static TableRecord<>.filter<A>(ids:)(v71, v72, v73, v74, v75, v76);
  v77 = sub_23C7E0718(&a10, &a31);
  sub_23C7DFB44((uint64_t)v77, v78, v79, v80);
  sub_23C7DB5AC();
}

#error "23C903990: call analysis failed (funcsize=3)"

#error "23C903A14: call analysis failed (funcsize=3)"

void static FetchableRecord<>.fetchCursor(_:keys:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  sub_23C7E26A8(a1, a2);
  sub_23C7DF470();
  v10 = sub_23C7E4068(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
          v25,
          v26,
          v27,
          v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35);
  sub_23C7DFB44((uint64_t)v10, v11, v12, v13);
  sub_23C7E57A4();
}

#error "23C903A80: call analysis failed (funcsize=5)"

void static FetchableRecord<>.fetchAll(_:keys:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_23C7DF470();
    v10 = sub_23C7E4068(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
            v25,
            v26,
            v27,
            v28,
            v29,
            v30,
            v31,
            v32,
            v33,
            v34,
            v35);
    sub_23C7E6E24((uint64_t)v10, v11, v12, v13);
    sub_23C82D110();
  }
  sub_23C903F9C();
  sub_23C7E5010();
}

#error "23C903B6C: call analysis failed (funcsize=41)"

#error "23C903C14: call analysis failed (funcsize=23)"

void sub_23C903C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    sub_23C903C90(v1, v3, v2);
    JUMPOUT(0x23C903C74);
  }
  sub_23C7DE934();
  JUMPOUT(0x23C903C50);
}

uint64_t sub_23C903C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(char *, unint64_t, uint64_t);
  uint64_t result;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x242624D80](v12))
  {
    sub_23C91161C();
    v15 = sub_23C911610();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B08];
  }
  v40 = MEMORY[0x242624DB0](v5, a2);
  if (v40)
  {
    v16 = 0;
    v43 = v15 + 56;
    v38 = v14;
    v39 = v5;
    while (1)
    {
      v17 = sub_23C91113C();
      sub_23C9110F4();
      if ((v17 & 1) != 0)
      {
        v18 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v45 + 16);
        result = v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      }
      else
      {
        result = sub_23C911658();
        if (v37 != 8)
          goto LABEL_24;
        v46 = result;
        v18 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v45 + 16);
        v18(v14, (unint64_t)&v46, a2);
        result = swift_unknownObjectRelease();
      }
      v20 = __OFADD__(v16, 1);
      v21 = v16 + 1;
      if (v20)
        break;
      v22 = v45;
      v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v42 = v21;
      v41(v44, v14, a2);
      v23 = sub_23C910E0C();
      v24 = -1 << *(_BYTE *)(v15 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      v27 = *(_QWORD *)(v43 + 8 * (v25 >> 6));
      v28 = 1 << v25;
      v29 = *(_QWORD *)(v22 + 72);
      if (((1 << v25) & v27) != 0)
      {
        v30 = ~v24;
        while (1)
        {
          v18(v8, *(_QWORD *)(v15 + 48) + v29 * v25, a2);
          v31 = a3;
          v32 = sub_23C910E54();
          v33 = *(void (**)(char *, uint64_t))(v45 + 8);
          v33(v8, a2);
          if ((v32 & 1) != 0)
            break;
          v25 = (v25 + 1) & v30;
          v26 = v25 >> 6;
          v27 = *(_QWORD *)(v43 + 8 * (v25 >> 6));
          v28 = 1 << v25;
          a3 = v31;
          if ((v27 & (1 << v25)) == 0)
          {
            v14 = v38;
            v5 = v39;
            goto LABEL_14;
          }
        }
        v33(v44, a2);
        a3 = v31;
        v14 = v38;
        v5 = v39;
      }
      else
      {
LABEL_14:
        v34 = v44;
        *(_QWORD *)(v43 + 8 * v26) = v28 | v27;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v29 * v25, v34, a2);
        v35 = *(_QWORD *)(v15 + 16);
        v20 = __OFADD__(v35, 1);
        v36 = v35 + 1;
        if (v20)
          goto LABEL_23;
        *(_QWORD *)(v15 + 16) = v36;
      }
      v16 = v42;
      if (v42 == v40)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t sub_23C903F9C()
{
  return sub_23C911124();
}

_QWORD *sub_23C903FA8()
{
  uint64_t v0;

  return sub_23C7FA5C4((_QWORD *)(v0 - 256));
}

uint64_t sub_23C903FB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C903FD0()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C903FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  _QWORD v11[21];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v2 = v12;
    v4 = (_QWORD *)(a1 + 32);
    for (i = v1 - 1; ; --i)
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_23C7E7E34(v4, v6);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v11, v6, v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7FD468();
        v2 = v12;
      }
      v9 = *(_QWORD *)(v2 + 16);
      if (v9 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD468();
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 168 * v9 + 32), v11, 0xA3uLL);
      if (!i)
        break;
      v4 += 5;
    }
  }
  return v2;
}

void DatabaseFunction.__allocating_init(_:argumentCount:pure:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  sub_23C7E9498();
  v8 = sub_23C7E8D20();
  DatabaseFunction.init(_:argumentCount:pure:function:)(v8, v9, v10, v11, a5, a6);
  sub_23C7E0778();
}

void *DatabaseFunction.callAsFunction(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (*(_BYTE *)(v1 + 56) == 1)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 24);
    sub_23C7DB3D4();
    v5 = sub_23C7E1D18();
    v9 = v4;
    v10 = v3;
    v11 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
    sub_23C7DB3D4();
    v5 = sub_23C7E1D18();
    v9 = v7;
    v10 = v6;
    v11 = 1;
  }
  v12 = v5;
  sub_23C80A884((uint64_t)&v9);
  return sub_23C800B48(&v9, a1);
}

void sub_23C9041F0(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_context *a4)
{
  sqlite3_context *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = a1;
  v7 = a2;
  v8 = BYTE2(a2);
  v9 = BYTE3(a2);
  v10 = BYTE4(a2);
  v11 = BYTE5(a2);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = a3;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = a4;
  if (qword_25430D368 != -1)
LABEL_7:
    swift_once();
  sqlite3_result_blob(v4, &v6, v5, (void (__cdecl *)(void *))qword_254310430);
}

uint64_t sub_23C90431C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  void *v4;
  sqlite3 *v5;
  int v6;
  int v7;
  BOOL v8;
  void (__cdecl *v9)(sqlite3_context *);
  void (__cdecl *v10)(sqlite3_context *, int, sqlite3_value **);
  void (__cdecl *v11)(sqlite3_context *, int, sqlite3_value **);
  const char *v12;
  int function_v2;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void (__cdecl *xDestroy)(void *);
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v3 = *(unsigned __int8 *)(v1 + 56);
  v4 = (void *)sub_23C904CCC(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
  sub_23C7E07C4();
  v5 = *(sqlite3 **)(a1 + 16);
  v8 = *(_BYTE *)(v1 + 36) == 0;
  v6 = *(_DWORD *)(v1 + 32);
  if (v8)
    v7 = 1;
  else
    v7 = 2049;
  v8 = v3 == 0;
  if (v3)
    v9 = (void (__cdecl *)(sqlite3_context *))sub_23C90580C;
  else
    v9 = 0;
  if (v8)
    v10 = 0;
  else
    v10 = (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_23C9056E4;
  if (v8)
    v11 = (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_23C9051DC;
  else
    v11 = 0;
  v12 = (const char *)(sub_23C910EFC() + 32);
  swift_unknownObjectRetain();
  function_v2 = sqlite3_create_function_v2(v5, v12, v6, v7, v4, v11, v10, v9, (void (__cdecl *)(void *))sub_23C904D40);
  swift_release();
  if (!function_v2)
    return swift_unknownObjectRelease();
  Database.lastErrorMessage.getter();
  if (!v15)
  {
    if (!sqlite3_errstr(function_v2))
      __break(1u);
    sub_23C910F74();
  }
  sub_23C7E45A4();
  sub_23C7E9788();
  sub_23C7EF5D4();
  if (sub_23C9119E8())
  {
    sub_23C7EDD54();
    swift_bridgeObjectRelease();
    sub_23C7EDFB8();
  }
  else
  {
    v16 = sub_23C7DB694();
    sub_23C7E87B0(v16, v17, v18, v19, v20, v21, v22, v23, (uint64_t)xDestroy, v26, v27, function_v2, v24, v28, v29, v30);
  }
  swift_willThrow();
  result = sub_23C7E5024();
  __break(1u);
  return result;
}

uint64_t sub_23C9044B0(uint64_t a1)
{
  uint64_t v1;
  sqlite3 *v3;
  int v4;
  int v5;
  uint64_t v6;
  int function_v2;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  void (__cdecl *xDestroy)(void *);
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  sub_23C7E07C4();
  v3 = *(sqlite3 **)(a1 + 16);
  v4 = *(_DWORD *)(v1 + 32);
  if (*(_BYTE *)(v1 + 36))
    v5 = 2049;
  else
    v5 = 1;
  v6 = sub_23C910EFC();
  function_v2 = sqlite3_create_function_v2(v3, (const char *)(v6 + 32), v4, v5, 0, 0, 0, 0, 0);
  result = swift_release();
  if (function_v2)
  {
    Database.lastErrorMessage.getter();
    if (!v9)
    {
      if (!sqlite3_errstr(function_v2))
        __break(1u);
      sub_23C910F74();
    }
    sub_23C7E45A4();
    sub_23C7E9788();
    sub_23C7EF5D4();
    if (sub_23C9119E8())
    {
      sub_23C7EDD54();
      swift_bridgeObjectRelease();
      sub_23C7EDFB8();
    }
    else
    {
      v10 = sub_23C7DB694();
      sub_23C7E87B0(v10, v11, v12, v13, v14, v15, v16, v17, (uint64_t)xDestroy, v20, v21, function_v2, v18, v22, v23, v24);
    }
    swift_willThrow();
    result = sub_23C7E5024();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C9045DC()
{
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  return sub_23C911BE0();
}

BOOL sub_23C904638(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  char v9;
  _BOOL8 result;

  if (a1 == a4 && a2 == a5)
    return a3 == a6;
  v9 = sub_23C911A18();
  result = 0;
  if ((v9 & 1) != 0)
    return a3 == a6;
  return result;
}

uint64_t sub_23C904688()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  sub_23C911BE0();
  return sub_23C911BF8();
}

uint64_t sub_23C9046FC()
{
  return sub_23C904688();
}

uint64_t sub_23C904708()
{
  return sub_23C9045DC();
}

uint64_t sub_23C904714()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  sub_23C911BE0();
  return sub_23C911BF8();
}

BOOL sub_23C904780(uint64_t a1, uint64_t a2)
{
  return sub_23C904638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

uint64_t DatabaseFunction.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_23C7DB3D4();
  return v1;
}

void DatabaseFunction.init(_:argumentCount:pure:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v9;
  uint64_t v10;

  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  if ((a3 & 0x100000000) != 0)
    v9 = -1;
  else
    v9 = a3;
  *(_DWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 36) = a4;
  v10 = sub_23C7E18F4();
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a6;
  *(_QWORD *)(v6 + 40) = sub_23C904BB4;
  *(_QWORD *)(v6 + 48) = v10;
  *(_BYTE *)(v6 + 56) = 0;
  sub_23C7DB3A0();
}

uint64_t sub_23C90481C(int a1, sqlite3_value **a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v5;
  sqlite3_value *v6;
  double v7;
  unint64_t v8;
  char v9;
  const void *v10;
  const void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v19)(_QWORD);
  __int128 __dst;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1 < 0)
    goto LABEL_26;
  v3 = MEMORY[0x24BEE4AF8];
  if (!a1)
    goto LABEL_24;
  v19 = a3;
  v5 = a1;
  v21 = MEMORY[0x24BEE4AF8];
  sub_23C7E56C8();
  v3 = v21;
  while (2)
  {
    if (!v5)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v6 = *a2;
    if (!*a2)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
    v7 = 0.0;
    v8 = 0;
    v9 = 4;
    switch(sqlite3_value_type(*a2))
    {
      case 1:
        v7 = COERCE_DOUBLE(sqlite3_value_int64(v6));
        v8 = 0;
        v9 = 0;
        goto LABEL_20;
      case 2:
        v8 = 0;
        v7 = sqlite3_value_double(v6);
        v9 = 1;
        goto LABEL_20;
      case 3:
        if (!sqlite3_value_text(v6))
          goto LABEL_28;
        v7 = COERCE_DOUBLE(sub_23C910F80());
        v8 = v15;
        v9 = 2;
LABEL_20:
        v21 = v3;
        v16 = *(_QWORD *)(v3 + 16);
        if (v16 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          sub_23C7E56C8();
          v3 = v21;
        }
        *(_QWORD *)(v3 + 16) = v16 + 1;
        v17 = v3 + 24 * v16;
        *(double *)(v17 + 32) = v7;
        *(_QWORD *)(v17 + 40) = v8;
        *(_BYTE *)(v17 + 48) = v9;
        ++a2;
        if (--v5)
          continue;
        a3 = v19;
        break;
      case 4:
        v10 = sqlite3_value_blob(v6);
        if (v10 && (v11 = v10, (v12 = sqlite3_value_bytes(v6)) != 0))
        {
          v13 = v12;
          if (v12 < 15)
          {
            *(_QWORD *)((char *)&__dst + 6) = 0;
            *(_QWORD *)&__dst = 0;
            BYTE14(__dst) = v12;
            memcpy(&__dst, v11, v12);
            v7 = *(double *)&__dst;
            v8 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          }
          else
          {
            sub_23C910974();
            swift_allocObject();
            if ((_DWORD)v13 == 0x7FFFFFFF)
            {
              v14 = sub_23C910944();
              sub_23C910AD0();
              v7 = COERCE_DOUBLE(swift_allocObject());
              *(_OWORD *)(*(_QWORD *)&v7 + 16) = xmmword_23C91B850;
              v8 = v14 | 0x8000000000000000;
            }
            else
            {
              *(_QWORD *)&v7 = v13 << 32;
              v8 = sub_23C910944() | 0x4000000000000000;
            }
          }
          v9 = 3;
        }
        else
        {
          v7 = 0.0;
          v9 = 3;
          v8 = 0xC000000000000000;
        }
        goto LABEL_20;
      case 5:
        goto LABEL_20;
      default:
        *(_QWORD *)&__dst = 0;
        *((_QWORD *)&__dst + 1) = 0xE000000000000000;
        sub_23C911634();
        swift_bridgeObjectRelease();
        *(_QWORD *)&__dst = 0xD00000000000001ELL;
        *((_QWORD *)&__dst + 1) = 0x800000023C920A40;
        sub_23C911880();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        sub_23C9117B4();
        __break(1u);
        JUMPOUT(0x23C904B7CLL);
    }
    break;
  }
LABEL_24:
  a3(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C904B90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C904BB4(int a1, sqlite3_value **a2)
{
  uint64_t v2;

  return sub_23C90481C(a1, a2, *(void (**)(_QWORD))(v2 + 16));
}

void DatabaseFunction.__allocating_init<A>(_:argumentCount:pure:aggregate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_23C7E9498();
  v9 = sub_23C7E8D20();
  DatabaseFunction.init<A>(_:argumentCount:pure:aggregate:)(v9, v10, v11, v12, v13, a6, a7);
  sub_23C7E0778();
}

void DatabaseFunction.init<A>(_:argumentCount:pure:aggregate:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v10;
  uint64_t v11;

  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  if ((a3 & 0x100000000) != 0)
    v10 = -1;
  else
    v10 = a3;
  *(_DWORD *)(v7 + 32) = v10;
  *(_BYTE *)(v7 + 36) = a4;
  v11 = sub_23C7E18F4();
  *(_QWORD *)(v11 + 16) = a6;
  *(_QWORD *)(v11 + 24) = a7;
  *(_QWORD *)(v7 + 40) = sub_23C904CC4;
  *(_QWORD *)(v7 + 48) = v11;
  *(_BYTE *)(v7 + 56) = 1;
  sub_23C7DB3A0();
}

uint64_t sub_23C904C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (*v5)(uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  a3[3] = a1;
  a3[4] = a2;
  sub_23C812004(a3);
  return v5(a1, a2);
}

uint64_t sub_23C904CB4()
{
  return swift_deallocObject();
}

uint64_t sub_23C904CC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C904C6C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C904CCC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;

  if ((a3 & 1) != 0)
    type metadata accessor for DatabaseFunction.AggregateDefinition();
  else
    type metadata accessor for DatabaseFunction.FunctionDefinition();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  sub_23C905BB4();
  return v5;
}

uint64_t sub_23C904D34(uint64_t result)
{
  if (result)
    return swift_unknownObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_23C904D48()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocClassInstance();
}

_QWORD *sub_23C904D6C(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD v9[5];

  result = sqlite3_user_data(a1);
  if (result)
  {
    v7 = result;
    type metadata accessor for DatabaseFunction();
    v8 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v7[2];
    swift_retain();
    v8(v9, a2, a3);
    sub_23C904E44((uint64_t)v9, a1);
    swift_release();
    return (_QWORD *)sub_23C7E7A6C((uint64_t)v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C904E44(uint64_t a1, sqlite3_context *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  sub_23C7F91B8(a1, (uint64_t)v8);
  v3 = v9;
  if (v9)
  {
    v4 = v10;
    sub_23C7E7E34(v8, v9);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 24))(&v6, v3, v4);
    v5 = v7;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
    __asm { BR              X9 }
  }
  sub_23C7E7A6C((uint64_t)v8);
  sqlite3_result_null(a2);
}

uint64_t sub_23C9050A0(void *a1, sqlite3_context *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  sub_23C7E79A8(&qword_25430CCC8);
  if (swift_dynamicCast())
  {
    if (v8)
    {
      v4 = sub_23C910EFC();
      sqlite3_result_error(a2, (const char *)(v4 + 32), -1);
      swift_release();
    }
    sqlite3_result_error_code(a2, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_23C7E13C4(v9);
  }
  else
  {
    sub_23C911730();
    v6 = sub_23C910EFC();
    swift_bridgeObjectRelease();
    sqlite3_result_error(a2, (const char *)(v6 + 32), -1);
    return swift_release();
  }
}

uint64_t sub_23C9051E0(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  sqlite3_value *v9;
  double v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  const void *v14;
  const void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  __int128 __dst;
  uint64_t v28;

  LODWORD(v4) = a2;
  v28 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for DatabaseFunction();
  v6 = sub_23C90560C(a1);
  swift_retain();
  if ((v4 & 0x80000000) != 0)
    goto LABEL_27;
  v7 = MEMORY[0x24BEE4AF8];
  if (!(_DWORD)v4)
    goto LABEL_25;
  v25 = v6;
  v4 = (int)v4;
  v26 = MEMORY[0x24BEE4AF8];
  v8 = &v26;
  sub_23C7E56C8();
  v7 = v26;
  while (2)
  {
    if (!v4)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v9 = *a3;
    if (!*a3)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    v10 = 0.0;
    v11 = 0;
    v12 = 4;
    switch(sqlite3_value_type(*a3))
    {
      case 1:
        v10 = COERCE_DOUBLE(sqlite3_value_int64(v9));
        v11 = 0;
        v12 = 0;
        goto LABEL_21;
      case 2:
        v11 = 0;
        v10 = sqlite3_value_double(v9);
        v12 = 1;
        goto LABEL_21;
      case 3:
        if (!sqlite3_value_text(v9))
          goto LABEL_29;
        v10 = COERCE_DOUBLE(sub_23C910F80());
        v11 = v19;
        v12 = 2;
LABEL_21:
        v26 = v7;
        v20 = *(_QWORD *)(v7 + 16);
        if (v20 >= *(_QWORD *)(v7 + 24) >> 1)
        {
          sub_23C7E56C8();
          v7 = v26;
        }
        *(_QWORD *)(v7 + 16) = v20 + 1;
        v21 = v7 + 24 * v20;
        *(double *)(v21 + 32) = v10;
        *(_QWORD *)(v21 + 40) = v11;
        *(_BYTE *)(v21 + 48) = v12;
        ++a3;
        if (--v4)
          continue;
        v6 = v25;
        break;
      case 4:
        v13 = v8;
        v14 = sqlite3_value_blob(v9);
        if (v14 && (v15 = v14, (v16 = sqlite3_value_bytes(v9)) != 0))
        {
          v17 = v16;
          if (v16 < 15)
          {
            *(_QWORD *)((char *)&__dst + 6) = 0;
            *(_QWORD *)&__dst = 0;
            BYTE14(__dst) = v16;
            memcpy(&__dst, v15, v16);
            v10 = *(double *)&__dst;
            v11 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          }
          else
          {
            sub_23C910974();
            swift_allocObject();
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v18 = sub_23C910944();
              sub_23C910AD0();
              v10 = COERCE_DOUBLE(swift_allocObject());
              *(_OWORD *)(*(_QWORD *)&v10 + 16) = xmmword_23C91B850;
              v11 = v18 | 0x8000000000000000;
            }
            else
            {
              *(_QWORD *)&v10 = v17 << 32;
              v11 = sub_23C910944() | 0x4000000000000000;
            }
          }
          v12 = 3;
        }
        else
        {
          v10 = 0.0;
          v12 = 3;
          v11 = 0xC000000000000000;
        }
        v8 = v13;
        goto LABEL_21;
      case 5:
        goto LABEL_21;
      default:
        *(_QWORD *)&__dst = 0;
        *((_QWORD *)&__dst + 1) = 0xE000000000000000;
        sub_23C911634();
        swift_bridgeObjectRelease();
        *(_QWORD *)&__dst = 0xD00000000000001ELL;
        *((_QWORD *)&__dst + 1) = 0x800000023C920A40;
        sub_23C911880();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        sub_23C9117B4();
        __break(1u);
        JUMPOUT(0x23C9055F8);
    }
    break;
  }
LABEL_25:
  swift_beginAccess();
  v22 = v6[5];
  v23 = v6[6];
  sub_23C800944((uint64_t)(v6 + 2), v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v7, v22, v23);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t *sub_23C90560C(sqlite3_context *a1)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(_QWORD *__return_ptr, uint64_t);
  uint64_t v8;
  __int128 v9[2];
  _QWORD v10[5];

  result = (uint64_t *)sqlite3_aggregate_context(a1, 8);
  if (result)
  {
    v3 = result;
    if (*(_BYTE *)result)
      return (uint64_t *)*result;
    v4 = 1;
    while (v4 != 8)
    {
      if (*((unsigned __int8 *)result + v4++))
        return (uint64_t *)*result;
    }
    result = (uint64_t *)sqlite3_user_data(a1);
    if (result)
    {
      v7 = (void (*)(_QWORD *__return_ptr, uint64_t))result[2];
      v8 = swift_retain();
      v7(v10, v8);
      swift_release();
      sub_23C7EFC04((uint64_t)v10, (uint64_t)v9);
      type metadata accessor for DatabaseFunction.AggregateContext();
      v6 = swift_allocObject();
      *(_BYTE *)(v6 + 56) = 0;
      sub_23C7DB5CC(v9, v6 + 16);
      *v3 = v6;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
      return (uint64_t *)v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23C9056E8(sqlite3_context *a1)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for DatabaseFunction();
  v2 = sub_23C90560C(a1);
  if ((v2[7] & 1) != 0)
    return swift_release();
  swift_beginAccess();
  sub_23C7EFC04((uint64_t)(v2 + 2), (uint64_t)v7);
  v4 = v8;
  v5 = v9;
  sub_23C7E7E34(v7, v8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 24))(v6, v4, v5);
  sub_23C904E44((uint64_t)v6, a1);
  swift_release();
  sub_23C7E7A6C((uint64_t)v6);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v7);
}

void sub_23C905810(void *a1, uint64_t a2, sqlite3_context *a3)
{
  sqlite3_context *v3;
  const void *v4;
  uint64_t v5;

  if (a1)
    v5 = a2 - (_QWORD)a1;
  else
    v5 = 0;
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = a3;
  v4 = a1;
  if (qword_25430D368 != -1)
LABEL_10:
    swift_once();
  sqlite3_result_blob(v3, v4, v5, (void (__cdecl *)(void *))qword_254310430);
}

uint64_t DatabaseFunction.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_23C9058D4();
  return v0;
}

uint64_t sub_23C9058D4()
{
  return swift_release();
}

uint64_t DatabaseFunction.__deallocating_deinit()
{
  DatabaseFunction.deinit();
  return swift_deallocClassInstance();
}

void DatabaseFunction.hashValue.getter()
{
  sub_23C911BBC();
  DatabaseFunction.hash(into:)();
  sub_23C911BF8();
  sub_23C7E63C0();
}

void sub_23C905930()
{
  DatabaseFunction.hashValue.getter();
}

uint64_t sub_23C905950()
{
  return DatabaseFunction.hash(into:)();
}

uint64_t DatabaseFunction.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23C910F14();
  sub_23C911BE0();
  return swift_bridgeObjectRelease();
}

void sub_23C9059C4()
{
  sub_23C911BBC();
  DatabaseFunction.hash(into:)();
  sub_23C911BF8();
  sub_23C7E63C0();
}

BOOL sub_23C9059F8(uint64_t *a1, uint64_t *a2)
{
  return static DatabaseFunction.== infix(_:_:)(*a1, *a2);
}

BOOL static DatabaseFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return v2 == v3;
  v5 = sub_23C911A18();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

unint64_t sub_23C905A78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430DA80;
  if (!qword_25430DA80)
  {
    v1 = type metadata accessor for DatabaseFunction();
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseFunction, v1);
    atomic_store(result, (unint64_t *)&qword_25430DA80);
  }
  return result;
}

uint64_t type metadata accessor for DatabaseFunction()
{
  return objc_opt_self();
}

uint64_t method lookup function for DatabaseFunction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseFunction.__allocating_init(_:argumentCount:pure:function:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v3 + 104))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of DatabaseFunction.__allocating_init<A>(_:argumentCount:pure:aggregate:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v3 + 112))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t type metadata accessor for DatabaseFunction.FunctionDefinition()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DatabaseFunction.AggregateDefinition()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DatabaseFunction.AggregateContext()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of DatabaseAggregate.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DatabaseAggregate.step(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of DatabaseAggregate.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_23C905BB4()
{
  return swift_retain();
}

uint64_t destroy for DatabaseFunction.Kind()
{
  return sub_23C9058D4();
}

void _s12GRDBInternal16DatabaseFunctionC4KindOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23C905BB4();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C7DB3A0();
}

uint64_t assignWithCopy for DatabaseFunction.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23C905BB4();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C9058D4();
  return a1;
}

uint64_t assignWithTake for DatabaseFunction.Kind(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C9058D4();
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseFunction.Kind()
{
  return &type metadata for DatabaseFunction.Kind;
}

uint64_t sub_23C905CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DatabaseFunction.Identity(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for DatabaseFunction.Identity(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseFunction.Identity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseFunction.Identity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 20))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseFunction.Identity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseFunction.Identity()
{
  return &type metadata for DatabaseFunction.Identity;
}

unint64_t sub_23C905E24()
{
  unint64_t result;

  result = qword_256BCDD58;
  if (!qword_256BCDD58)
  {
    result = MEMORY[0x242626100](&unk_23C91C0C0, &type metadata for DatabaseFunction.Identity);
    atomic_store(result, (unint64_t *)&qword_256BCDD58);
  }
  return result;
}

void sub_23C905E60(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_context *a4)
{
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v7 = (char *)sub_23C910950();
  if (v7)
  {
    v8 = sub_23C910968();
    if (__OFSUB__(a1, v8))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v7 += a1 - v8;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = sub_23C91095C();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = &v7[v12];
  if (v7)
    v14 = (uint64_t)v13;
  else
    v14 = 0;
  sub_23C905810(v7, v14, a4);
}

uint64_t static ValueObservationScheduler.async(onQueue:)(void *a1)
{
  uint64_t v2;
  id v3;
  __int128 v5;
  unint64_t v6;
  _UNKNOWN **v7;

  v6 = sub_23C7E3048();
  v7 = &off_250D882B0;
  *(_QWORD *)&v5 = a1;
  type metadata accessor for ValueObservationScheduler();
  v2 = swift_allocObject();
  sub_23C7DB5CC(&v5, v2 + 16);
  v3 = a1;
  return v2;
}

uint64_t type metadata accessor for ValueObservationScheduler()
{
  return objc_opt_self();
}

uint64_t sub_23C905F84()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  ValueMetadata *v3;
  _UNKNOWN **v4;

  v3 = &type metadata for ImmediateImpl;
  v4 = &off_250D80FD8;
  type metadata accessor for ValueObservationScheduler();
  v0 = swift_allocObject();
  result = sub_23C7DB5CC(&v2, v0 + 16);
  qword_256BCDD60 = v0;
  return result;
}

uint64_t static ValueObservationScheduler.immediate.getter()
{
  if (qword_256BCBAA0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_23C906020(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  sub_23C7E87DC();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6) & 1) != 0)
    return a1();
  v9 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  sub_23C7E87DC();
  return (*(uint64_t (**)(uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, v9, v8);
}

uint64_t ValueObservationScheduler.deinit()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return v0;
}

uint64_t ValueObservationScheduler.__deallocating_deinit()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_23C9060F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD aBlock[6];

  v4 = sub_23C910D34();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910D58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E3048();
  v12 = (void *)sub_23C911448();
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C9062A0;
  aBlock[3] = &unk_250D90468;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_23C910D40();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_23C7E7A2C();
  sub_23C7E79A8(&qword_25430D600);
  sub_23C7E79E8();
  sub_23C911574();
  MEMORY[0x242625098](0, v11, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23C9062A0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_23C9062CC()
{
  uint64_t result;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return 1;
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t sub_23C906358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v4 = sub_23C910D34();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910D58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C88B2C0;
  aBlock[3] = &unk_250D8A350;
  v12 = _Block_copy(aBlock);
  swift_retain();
  sub_23C910D40();
  v14[1] = MEMORY[0x24BEE4AF8];
  sub_23C7E7A2C();
  sub_23C7E79A8(&qword_25430D600);
  sub_23C7E79E8();
  sub_23C911574();
  MEMORY[0x242625098](0, v11, v7, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_23C9064F0(uint64_t a1, uint64_t a2)
{
  return sub_23C906358(a1, a2);
}

uint64_t method lookup function for ValueObservationScheduler()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C90651C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_23C90652C()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for ImmediateImpl()
{
  return &type metadata for ImmediateImpl;
}

uint64_t sub_23C90654C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *(*v11)();
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[8];
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23C7FD37C();
    v5 = v16;
    v6 = (_BYTE *)(a1 + 48);
    do
    {
      v8 = *((_QWORD *)v6 - 2);
      v7 = *((_QWORD *)v6 - 1);
      v9 = *v6;
      if ((*v6 & 1) != 0)
      {
        v10 = (_QWORD *)(*((_QWORD *)v6 - 1) & 1);
        sub_23C8634D8(*((_QWORD *)v6 - 2), *((_QWORD *)v6 - 1), 1);
        sub_23C8634D8(v8, v7, 1);
        swift_retain();
        v11 = (_QWORD *(*)())sub_23C90654C(v8, a2, v15);
        sub_23C8634E8(v8, v7, 1);
        sub_23C8634E8(v8, v7, 1);
      }
      else
      {
        v10 = (_QWORD *)swift_allocObject();
        v10[2] = sub_23C90F7C0;
        v10[3] = a2;
        v10[4] = v8;
        v10[5] = v7;
        sub_23C8634D8(v8, v7, 0);
        swift_retain();
        v11 = sub_23C90F7DC;
      }
      v16 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      if (v12 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_23C7FD37C();
        v5 = v16;
      }
      v6 += 24;
      *(_QWORD *)(v5 + 16) = v12 + 1;
      v13 = v5 + 24 * v12;
      *(_QWORD *)(v13 + 32) = v11;
      *(_QWORD *)(v13 + 40) = v10;
      *(_BYTE *)(v13 + 48) = v9;
      --v3;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

void sub_23C90670C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[192];
  _BYTE __dst[176];
  _QWORD __src[25];
  uint64_t v26;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = v26;
      v9 = (uint64_t *)(a1 + 40);
      while (1)
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        swift_bridgeObjectRetain_n();
        v12 = sub_23C7E94B8();
        if ((v13 & 1) == 0)
          break;
        memcpy(__dst, (const void *)(*(_QWORD *)(a2 + 56) + 176 * v12), 0xABuLL);
        sub_23C8133B0((uint64_t)__dst);
        swift_bridgeObjectRelease();
        __src[0] = v10;
        __src[1] = v11;
        memcpy(&__src[2], __dst, 0xABuLL);
        memcpy(v23, __src, 0xBBuLL);
        swift_bridgeObjectRetain();
        sub_23C8133B0((uint64_t)__dst);
        sub_23C8132C8((uint64_t)__src);
        v14 = a3(v10, v11, &v23[16]);
        if (v4)
        {
          sub_23C8132C8((uint64_t)__src);
          swift_release();
          return;
        }
        v16 = v14;
        v17 = v15;
        v18 = a2;
        sub_23C8132C8((uint64_t)__src);
        v26 = v8;
        v19 = *(_QWORD *)(v8 + 16);
        if (v19 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7E649C();
          v8 = v26;
        }
        *(_QWORD *)(v8 + 16) = v19 + 1;
        v20 = v8 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v16;
        *(_QWORD *)(v20 + 40) = v17;
        if (!--v5)
          return;
        v9 += 2;
        a2 = v18;
        v21 = *(_QWORD *)(v18 + 16);
        v4 = 0;
        if (!v21)
          goto LABEL_14;
      }
      __break(1u);
    }
LABEL_14:
    __break(1u);
  }
}

unint64_t sub_23C9068F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE __dst[184];
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v13 = MEMORY[0x24BEE4AF8];
    result = sub_23C7FD3E4(0, v4, 0);
    if (*(_QWORD *)(a3 + 16))
    {
      v5 = v13;
      v8 = a1 + 40;
      while (1)
      {
        swift_bridgeObjectRetain();
        result = sub_23C7E94B8();
        if ((v9 & 1) == 0)
          break;
        memcpy(__dst, (const void *)(*(_QWORD *)(a3 + 56) + 176 * result), 0xABuLL);
        sub_23C8133B0((uint64_t)__dst);
        swift_bridgeObjectRelease();
        v13 = v5;
        v11 = *(_QWORD *)(v5 + 16);
        v10 = *(_QWORD *)(v5 + 24);
        if (v11 >= v10 >> 1)
        {
          sub_23C7FD3E4(v10 > 1, v11 + 1, 1);
          v5 = v13;
        }
        *(_QWORD *)(v5 + 16) = v11 + 1;
        result = (unint64_t)memcpy((void *)(v5 + 176 * v11 + 32), __dst, 0xABuLL);
        if (!--v4)
          goto LABEL_10;
        v8 += 16;
        if (!*(_QWORD *)(a3 + 16))
          goto LABEL_12;
      }
      __break(1u);
    }
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_23C906A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t i;
  unint64_t v6;
  _BYTE v8[163];
  __n128 __dst[10];
  _BYTE __src[163];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v3 = v11;
    v4 = (char *)(a1 + 32);
    for (i = v1 - 1; ; --i)
    {
      memcpy(__dst, v4, 0xA3uLL);
      memcpy(v8, v4, sizeof(v8));
      sub_23C8811C8(__dst);
      sub_23C86E598();
      sub_23C8811C8(__dst);
      v11 = v3;
      v6 = *(_QWORD *)(v3 + 16);
      if (v6 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_23C7FD468();
        v3 = v11;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      memcpy((void *)(v3 + 168 * v6 + 32), __src, 0xA3uLL);
      if (!i)
        break;
      v4 += 168;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_23C906BAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[163];
  __n128 __dst[11];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v4 = v16;
    v5 = (char *)(a1 + 32);
    for (i = v2 - 1; ; --i)
    {
      memcpy(__dst, v5, 0xA3uLL);
      memcpy(v14, v5, sizeof(v14));
      sub_23C8811C8(__dst);
      sub_23C7EA244();
      if (v1)
      {
        sub_23C8811C8(__dst);
        swift_release();
        swift_release();
        return v4;
      }
      v9 = v7;
      v10 = v8;
      sub_23C8811C8(__dst);
      v16 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_23C7E649C();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v10;
      if (!i)
        break;
      v5 += 168;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

uint64_t sub_23C906D30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[184];
  __n128 __dst[12];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v4 = v16;
    v5 = (char *)(a1 + 32);
    for (i = v2 - 1; ; --i)
    {
      memcpy(__dst, v5, 0xB8uLL);
      memcpy(v14, v5, sizeof(v14));
      sub_23C90F218(__dst);
      sub_23C809E84();
      if (v1)
      {
        sub_23C90F218(__dst);
        swift_release();
        swift_release();
        return v4;
      }
      v9 = v7;
      v10 = v8;
      sub_23C90F218(__dst);
      v16 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_23C7E649C();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v10;
      if (!i)
        break;
      v5 += 184;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

uint64_t sub_23C906EB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[168];
  __n128 v15[11];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_23C7DB5B4(MEMORY[0x24BEE4AF8]);
    v4 = v16;
    v5 = (char *)(a1 + 32);
    for (i = v2 - 1; ; --i)
    {
      sub_23C7E3190(v15, v5);
      sub_23C7E3190(v14, v5);
      sub_23C8811C8(v15);
      sub_23C8CA0D4();
      if (v1)
      {
        sub_23C8811C8(v15);
        sub_23C7DFE08();
        sub_23C7DFB3C();
        return v4;
      }
      v9 = v7;
      v10 = v8;
      sub_23C8811C8(v15);
      v16 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_23C7DBDBC();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v10;
      if (!i)
        break;
      v5 += 168;
    }
    swift_release();
  }
  else
  {
    sub_23C7DFE08();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

void sub_23C906FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __n128 v36[10];
  _BYTE v37[168];
  _QWORD v38[21];
  __n128 v39[11];

  sub_23C7DEF5C();
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
  {
    v15 = v11;
    sub_23C7DB5B4(MEMORY[0x24BEE4AF8]);
    v16 = (_QWORD *)(v15 + 72);
    v17 = v14 - 1;
    while (1)
    {
      v19 = *(v16 - 2);
      v18 = *(v16 - 1);
      sub_23C7E7E34(v16 - 5, v19);
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 8))(v38, v19);
      sub_23C7E3190(v39, v38);
      sub_23C7E3190(v37, v38);
      sub_23C7EC960();
      if (v10)
      {
        sub_23C8811C8(v39);
        swift_release();
        swift_release();
        goto LABEL_13;
      }
      v22 = v20;
      v23 = v21;
      v32 = v17;
      sub_23C9107BC(v39);
      v34 = v22;
      v35 = v23;
      sub_23C7DEF00();
      sub_23C910F5C();
      sub_23C7E087C();
      v24 = v34;
      v25 = v35;
      sub_23C7E3190(v36, v16);
      sub_23C7E3190(&v34, v16);
      sub_23C8811C8(v36);
      v26 = v13;
      sub_23C7EC960();
      sub_23C9107BC(v36);
      v34 = v24;
      v35 = v25;
      sub_23C7DEF00();
      sub_23C910F5C();
      sub_23C7E087C();
      sub_23C7DC514();
      v27 = v34;
      v28 = v35;
      v29 = a10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7E649C();
        v29 = a10;
      }
      v30 = *(_QWORD *)(v29 + 16);
      if (v30 >= *(_QWORD *)(v29 + 24) >> 1)
      {
        sub_23C7DBDBC();
        v29 = a10;
      }
      *(_QWORD *)(v29 + 16) = v30 + 1;
      v31 = v29 + 16 * v30;
      *(_QWORD *)(v31 + 32) = v27;
      *(_QWORD *)(v31 + 40) = v28;
      if (!v32)
        break;
      a10 = v29;
      v16 += 26;
      v17 = v32 - 1;
      v13 = v26;
    }
    sub_23C7DFB3C();
  }
  else
  {
    swift_release();
  }
LABEL_13:
  sub_23C7DEF28();
}

uint64_t sub_23C907240(uint64_t a1, _QWORD *a2)
{
  char *v3;
  _BYTE __dst[184];
  _BYTE v6[192];
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16))
  {
    v7 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
    sub_23C801054(__dst, v6);
    v3 = (char *)&loc_23C9072EC + 4 * byte_23C91C1D0[sub_23C801090((uint64_t)v6)];
    __asm { BR              X9 }
  }
  sub_23C90E024(a2);
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C9075A0(uint64_t a1)
{
  char *v2;
  _BYTE __dst[184];
  _BYTE v5[192];
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
    sub_23C801054(__dst, v5);
    v2 = (char *)&loc_23C907644 + 4 * byte_23C91C1D5[sub_23C801090((uint64_t)v5)];
    __asm { BR              X9 }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

void sub_23C9078F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE __dst[224];
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FDC94();
    if (*(_QWORD *)(a3 + 16))
    {
      v6 = v12;
      v7 = a1 + 40;
      while (1)
      {
        swift_bridgeObjectRetain();
        v8 = sub_23C7E94B8();
        if ((v9 & 1) == 0)
          break;
        memcpy(__dst, (const void *)(*(_QWORD *)(a3 + 56) + 216 * v8), 0xD8uLL);
        sub_23C90EE88((uint64_t)__dst);
        swift_bridgeObjectRelease();
        v12 = v6;
        v10 = *(_QWORD *)(v6 + 16);
        if (v10 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_23C7FDC94();
          v6 = v12;
        }
        *(_QWORD *)(v6 + 16) = v10 + 1;
        memcpy((void *)(v6 + 216 * v10 + 32), __dst, 0xD8uLL);
        if (!--v4)
          goto LABEL_10;
        v7 += 16;
        if (!*(_QWORD *)(a3 + 16))
          goto LABEL_12;
      }
      __break(1u);
    }
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_23C907A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t i;
  unint64_t v5;
  _BYTE v6[168];
  _BYTE v7[168];
  __n128 v8[10];
  _BYTE v9[176];
  uint64_t v10;

  sub_23C7DEF5C();
  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  sub_23C7FD468();
  if (v2)
  {
    v3 = (char *)(v1 + 32);
    sub_23C7DBCC8();
    for (i = v2 - 1; ; --i)
    {
      sub_23C7E3190(v8, v3);
      sub_23C7E3190(v6, v3);
      sub_23C9107BC(v8);
      swift_getAtKeyPath();
      sub_23C8811C8(v8);
      sub_23C7E3190(v9, v7);
      v5 = *(_QWORD *)(v10 + 16);
      if (v5 >= *(_QWORD *)(v10 + 24) >> 1)
        sub_23C7FD468();
      *(_QWORD *)(v10 + 16) = v5 + 1;
      sub_23C7E3190((void *)(v10 + 168 * v5 + 32), v9);
      if (!i)
        break;
      v3 += 168;
    }
  }
  else
  {
    sub_23C7DBCC8();
  }
  sub_23C7DFB3C();
  sub_23C7DB62C();
  sub_23C7DEF28();
}

void sub_23C907B90()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[23];
  _BYTE v101[48];
  _QWORD v102[10];
  uint64_t v103;
  _BYTE v104[24];
  _BYTE v105[16];
  uint64_t v106;
  _QWORD v107[2];
  char v108;
  char v109;

  sub_23C7DEF5C();
  v3 = v2;
  sub_23C90AD18(v2);
  if (v1)
    goto LABEL_7;
  if (!v4)
  {
    sub_23C813BF4(v101, v0);
    if (!*(_QWORD *)(v102[4] + 16))
    {
      sub_23C7DF5CC();
      sub_23C90A170();
      sub_23C910750();
      sub_23C7DB388();
      sub_23C7DBBB8();
      swift_bridgeObjectRetain();
      sub_23C7E21BC();
      sub_23C910730();
      sub_23C7DB388();
      v5 = sub_23C91076C();
      sub_23C910748(v5, v6, v7);
      v100[21] = sub_23C7DBCA4();
      v100[22] = v8;
      sub_23C7EE36C();
      strcpy((char *)v100, "DELETE FROM ");
      BYTE5(v100[1]) = 0;
      HIWORD(v100[1]) = -5120;
      sub_23C910F5C();
      sub_23C7DB3DC();
      sub_23C7DEB90();
      sub_23C7DB3DC();
      sub_23C7E5038((uint64_t)v102, (uint64_t)v105);
      sub_23C7E5038((uint64_t)v105, (uint64_t)&v106);
      if (v106)
      {
        sub_23C7E21E8(v9, v10, v11, v12, v13, v14, v15, v16, v48, v51, v54, v57, v58, v59, v60, v61, v62, v63, v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100[0]);
        sub_23C7E3190(&v78, v100);
        sub_23C7E9630();
        sub_23C7E3190(&v57, &v78);
        sub_23C7EC960();
        sub_23C7DD208();
        v17 = sub_23C7DB3DC();
        sub_23C7EFAD4(v17, (uint64_t)sub_23C7E6F90, v18, v19, v20, v21, v22, v23, v49, v52, v55, v57, v58, v59, v60, v61, v62, v63, v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          v77,
          v24);
      }
      sub_23C7E5038((uint64_t)&v103, (uint64_t)v104);
      sub_23C7E5038((uint64_t)v104, (uint64_t)v107);
      if ((v109 & 1) == 0)
      {
        v41 = v107[0];
        v42 = v107[1];
        v43 = v108;
        sub_23C90A66C();
        sub_23C7E6688();
        v45 = v44;
        sub_23C7DE934();
        if (*(_QWORD *)(v45 + 16))
        {
          sub_23C7E6480();
          sub_23C7E62C0();
          v46 = sub_23C9107A8(v45);
          sub_23C7E087C();
          v100[0] = v46;
          sub_23C7E9B8C();
          sub_23C7E6ADC((unint64_t *)&qword_25430DB98, v47, MEMORY[0x24BEE12B0]);
          sub_23C910E3C();
          sub_23C7DC514();
          sub_23C910F5C();
        }
        sub_23C7E087C();
        sub_23C85E31C(v41, v42, v43);
        sub_23C7E8FA0();
        sub_23C7DB3DC();
        sub_23C7DEB90();
        sub_23C7DB3DC();
      }
      sub_23C7E6A44();
      v25 = sub_23C7DB3DC();
      v33 = sub_23C7DF680(v25, v26, v27, v28, v29, v30, v31, v32, v48, v51, v54, v57, v58, v59, v60, v61, v62, v63, v64,
              v65,
              v66,
              v67,
              v68,
              v69,
              v70,
              v71,
              v72,
              v73,
              v74,
              v75,
              v76,
              v77,
              v78,
              v79,
              v80,
              v81,
              v82,
              v83,
              v84,
              v85,
              v86,
              v87,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              v98,
              v99,
              v100[0]);
      sub_23C7E122C(v33, v34, v35, v36, v37, v38, v39, v40, v50, v53, v56, v57, v58, v59, v60, v61, v62, v63, v64,
        v65,
        v66,
        v67,
        v68,
        v69,
        v70,
        v71,
        v72,
        v73,
        v74,
        v75,
        v76,
        v77,
        v78);
      sub_23C7DFB3C();
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    sub_23C90AFB8(v3);
LABEL_7:
    sub_23C7DEF28();
    return;
  }
  sub_23C7DC484();
  sub_23C7ED278();
  __break(1u);
}

void sub_23C907F04()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;

  sub_23C7DEF5C();
  v3 = v2;
  v5 = *v4;
  sub_23C90AD18(v6);
  if (v1)
    goto LABEL_8;
  if (!v7)
  {
    sub_23C813BF4(v14, v0);
    if (!*(_QWORD *)(v15 + 16))
    {
      if (*(_QWORD *)(v3 + 16))
      {
        sub_23C7DF5CC();
        sub_23C90A170();
        sub_23C910750();
        sub_23C7DB388();
        swift_bridgeObjectRetain();
        sub_23C7DEF00();
        sub_23C7E21BC();
        sub_23C910730();
        sub_23C7DB388();
        v8 = sub_23C91076C();
        sub_23C910748(v8, v9, v10);
        sub_23C7E7788();
        sub_23C90A37C();
        sub_23C7ECD78();
        __asm { BR              X9 }
      }
      goto LABEL_8;
    }
LABEL_7:
    sub_23C7E7788();
    sub_23C90B684(v11, v12, v13);
LABEL_8:
    sub_23C7DEF28();
    return;
  }
  if (v7 == 1)
    goto LABEL_7;
  sub_23C7DC484();
  sub_23C7ED278();
  __break(1u);
}

uint64_t sub_23C90842C(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, _BYTE *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  void *v31;
  uint64_t v33;
  unint64_t v34;
  _BYTE v36[216];
  _BYTE v37[216];
  __n128 v38[13];
  _BYTE v39[216];
  _QWORD v40[27];
  _BYTE v41[232];
  _BYTE __dst[216];
  _QWORD __src[30];
  _QWORD *v44;

  v6 = v5;
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (*(_QWORD *)(a4 + 16))
  {
    v11 = (uint64_t *)(a3 + 40);
    v33 = a4;
    while (1)
    {
      v12 = *(v11 - 1);
      v13 = *v11;
      swift_bridgeObjectRetain_n();
      v14 = sub_23C7E94B8();
      if ((v15 & 1) == 0)
        break;
      memcpy(__dst, (const void *)(*(_QWORD *)(a4 + 56) + 216 * v14), 0xD2uLL);
      sub_23C813864((uint64_t)__dst);
      swift_bridgeObjectRelease();
      __src[0] = v12;
      __src[1] = v13;
      memcpy(&__src[2], __dst, 0xD2uLL);
      swift_bridgeObjectRetain();
      sub_23C813864((uint64_t)__dst);
      sub_23C81394C((uint64_t)__src);
      memcpy(v41, __src, 0xE2uLL);
      v16 = v6;
      a5(v40, &v41[16]);
      if (v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C81394C((uint64_t)__src);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_23C8DEAE8((uint64_t)v40, (uint64_t)v38, &qword_25430B2B8);
      sub_23C8DEAE8((uint64_t)v38, (uint64_t)v39, &qword_25430B2B8);
      if (sub_23C863768((uint64_t)v39) == 1)
      {
        sub_23C81394C((uint64_t)__src);
      }
      else
      {
        v34 = a1;
        sub_23C8DEAE8((uint64_t)v38, (uint64_t)v37, &qword_25430B2B8);
        sub_23C90F67C(v38);
        swift_isUniquelyReferenced_nonNull_native();
        v44 = a2;
        v17 = sub_23C7E94B8();
        if (__OFADD__(a2[2], (v18 & 1) == 0))
          goto LABEL_27;
        a1 = v17;
        v19 = v18;
        sub_23C7E79A8(&qword_25430B3E8);
        if ((sub_23C911778() & 1) != 0)
        {
          v20 = sub_23C7E94B8();
          if ((v19 & 1) != (v21 & 1))
            goto LABEL_30;
          a1 = v20;
        }
        if ((v19 & 1) != 0)
          goto LABEL_29;
        a2 = v44;
        v44[(a1 >> 6) + 8] |= 1 << a1;
        v22 = (_QWORD *)(a2[6] + 16 * a1);
        *v22 = v12;
        v22[1] = v13;
        memcpy((void *)(a2[7] + 216 * a1), v37, 0xD8uLL);
        v23 = a2[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_28;
        a2[2] = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        a1 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F16C0();
          a1 = v28;
        }
        a4 = v33;
        v26 = *(_QWORD *)(a1 + 16);
        if (v26 >= *(_QWORD *)(a1 + 24) >> 1)
        {
          sub_23C7F16C0();
          a1 = v29;
        }
        *(_QWORD *)(a1 + 16) = v26 + 1;
        v27 = a1 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v12;
        *(_QWORD *)(v27 + 40) = v13;
        sub_23C90F67C(v38);
        sub_23C81394C((uint64_t)__src);
        v6 = v16;
      }
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      v11 += 2;
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    __break(1u);
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  v31 = (void *)(v44[7] + 216 * a1);
  memcpy(v36, v31, sizeof(v36));
  memcpy(v31, v37, 0xD8uLL);
  swift_bridgeObjectRelease();
  sub_23C90F08C((uint64_t)v36);
  sub_23C9117B4();
  __break(1u);
LABEL_30:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

uint64_t sub_23C908860(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, _BYTE *))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  void *v30;
  unint64_t v33;
  uint64_t v34;
  _BYTE v35[216];
  _BYTE v36[216];
  _QWORD v37[27];
  _BYTE v38[232];
  _BYTE __dst[216];
  _QWORD __src[30];
  _QWORD *v41;

  v7 = v5;
  v10 = *(_QWORD *)(a3 + 16);
  if (!v10)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (*(_QWORD *)(a4 + 16))
  {
    v6 = a3 + 40;
    while (1)
    {
      v12 = *(_QWORD *)(v6 - 8);
      v13 = *(_QWORD *)v6;
      swift_bridgeObjectRetain_n();
      v14 = sub_23C7E94B8();
      if ((v15 & 1) == 0)
        break;
      memcpy(__dst, (const void *)(*(_QWORD *)(a4 + 56) + 216 * v14), sizeof(__dst));
      sub_23C90EE88((uint64_t)__dst);
      swift_bridgeObjectRelease();
      __src[0] = v12;
      __src[1] = v13;
      memcpy(&__src[2], __dst, 0xD8uLL);
      swift_bridgeObjectRetain();
      sub_23C90EE88((uint64_t)__dst);
      sub_23C90EF78((uint64_t)__src);
      memcpy(v38, __src, sizeof(v38));
      a5(v37, &v38[16]);
      if (v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C90EF78((uint64_t)__src);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      v33 = v6;
      v34 = v10;
      memcpy(v36, v37, sizeof(v36));
      sub_23C90EE88((uint64_t)v36);
      swift_isUniquelyReferenced_nonNull_native();
      v41 = a2;
      v16 = sub_23C7E94B8();
      if (__OFADD__(a2[2], (v17 & 1) == 0))
        goto LABEL_24;
      v6 = v16;
      v18 = v17;
      sub_23C7E79A8(&qword_25430B3E8);
      if ((sub_23C911778() & 1) != 0)
      {
        v19 = sub_23C7E94B8();
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_27;
        v6 = v19;
      }
      if ((v18 & 1) != 0)
        goto LABEL_26;
      a2 = v41;
      v41[(v6 >> 6) + 8] |= 1 << v6;
      v21 = (_QWORD *)(a2[6] + 16 * v6);
      *v21 = v12;
      v21[1] = v13;
      memcpy((void *)(a2[7] + 216 * v6), v36, 0xD8uLL);
      v22 = a2[2];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_25;
      a2[2] = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        a1 = v27;
      }
      v25 = *(_QWORD *)(a1 + 16);
      if (v25 >= *(_QWORD *)(a1 + 24) >> 1)
      {
        sub_23C7F16C0();
        a1 = v28;
      }
      *(_QWORD *)(a1 + 16) = v25 + 1;
      v26 = a1 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v12;
      *(_QWORD *)(v26 + 40) = v13;
      sub_23C90F08C((uint64_t)v36);
      sub_23C90EF78((uint64_t)__src);
      --v10;
      if (v34 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      v6 = v33 + 16;
      v7 = 0;
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  v30 = (void *)(v41[7] + 216 * v6);
  memcpy(v35, v30, sizeof(v35));
  memcpy(v30, v36, 0xD8uLL);
  swift_bridgeObjectRelease();
  sub_23C90F08C((uint64_t)v35);
  sub_23C9117B4();
  __break(1u);
LABEL_27:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

void sub_23C908C50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];
  uint64_t v60;
  uint64_t v61[22];
  uint64_t v62[21];
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[21];
  char v67[184];
  __n128 v68[10];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  sub_23C7DEF5C();
  v2 = v0;
  v4 = v3;
  sub_23C910750();
  sub_23C7DB388();
  swift_retain();
  v5 = sub_23C7E21BC();
  v6 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  sub_23C7DB388();
  sub_23C910748(v4, v5, v6);
  sub_23C7E7788();
  sub_23C909560();
  if (v1)
  {
    swift_release();
LABEL_4:
    sub_23C7DEF28();
    return;
  }
  v9 = sub_23C8C8C84(v7, v8, 0);
  sub_23C7DB624();
  sub_23C7E0BF0(v62);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  Statement.arguments.setter(v61, v10);
  v11 = (uint64_t *)(v9 + 32);
  sub_23C7E6180();
  v61[0] = *(_QWORD *)(v9 + 32);
  sub_23C7DF858();
  sub_23C90AB90(v4, v61, v62);
  sub_23C7DB624();
  *v11 = v62[0];
  swift_bridgeObjectRelease();
  if (*v11 && !*(_QWORD *)(*v11 + 16))
  {
LABEL_29:
    sub_23C7DFE08();
    goto LABEL_4;
  }
  v12 = (_QWORD *)v2[22];
  v51 = *v2;
  v56 = v2[1];
  sub_23C7E3084();
  v13 = sub_23C910DAC();
  v14 = v12[2];
  if (!v14)
  {
LABEL_31:
    sub_23C7E6180();
    v65 = *v11;
    v60 = v13;
    DatabaseRegion.union(_:)(&v60, v61);
    sub_23C7DB624();
    *v11 = v61[0];
    swift_endAccess();
    sub_23C7DFE08();
    sub_23C7DC474();
    goto LABEL_4;
  }
  v50 = v9 + 32;
  sub_23C7DF858();
  v15 = v12[4];
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = v14 - 1;
  v17 = v12 + 5;
  v55 = v4;
  while (1)
  {
    v54 = v13;
    v18 = *(char *)(v15 + 88);
    if (v18 < 0)
      break;
    v52 = v17;
    v53 = v16;
    v19 = *(_QWORD *)(v15 + 56);
    v20 = *(_QWORD *)(v15 + 72);
    v21 = *(_QWORD *)(v15 + 80);
    if ((v18 & 1) != 0)
      v22 = v51;
    else
      v22 = *(_QWORD *)(v15 + 56);
    if ((v18 & 1) != 0)
      v23 = v56;
    else
      v23 = *(_QWORD *)(v15 + 64);
    if ((v18 & 1) != 0)
      v24 = *(_QWORD *)(v15 + 56);
    else
      v24 = v51;
    v25 = *(_QWORD *)(v15 + 64);
    if ((v18 & 1) != 0)
      v26 = *(_QWORD *)(v15 + 64);
    else
      v26 = v56;
    v57 = *(_QWORD *)(v15 + 72);
    v58 = *(_QWORD *)(v15 + 80);
    if (v20)
    {
      v27 = v23;
      swift_bridgeObjectRetain();
      sub_23C7DF858();
      v23 = v27;
      v28 = v20;
    }
    else
    {
      v28 = 0;
      v21 = 0;
    }
    v69 = v22;
    v70 = v23;
    v71 = v24;
    v72 = v26;
    v73 = v28;
    v74 = v21;
    sub_23C7DEF00();
    v29 = sub_23C910780();
    sub_23C800AA4(v29, v30, v31, v32, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C87FA54();
    v35 = v34;
    sub_23C7DBCD0();
    sub_23C7DB3DC();
    sub_23C7DB62C();
    sub_23C7DB624();
    v36 = sub_23C87FD90(v18 & 1, v35);
    sub_23C7DE934();
    sub_23C812DD0(v19, v25, v57, v58, v18);
    sub_23C8358D8((uint64_t)&unk_250D83178, v36, v62);
    sub_23C7E3190(v68, v62);
    v65 = v15;
    sub_23C7DEF00();
    sub_23C811160(&v65, v68);
    v60 = v65;
    sub_23C8B583C(v37, v38, v39, v40, v41, v42, v43, (uint64_t)v66);
    sub_23C7DB62C();
    sub_23C837C80(v66);
    sub_23C909E74(v66, (uint64_t)v61);
    v44 = v66[11];
    v45 = v66[12];
    swift_bridgeObjectRetain();
    sub_23C7DBCC8();
    sub_23C811870(v44, v45);
    v47 = v46;
    sub_23C7DB62C();
    sub_23C7DE934();
    sub_23C813BF4(v62, v61);
    v63 = 0;
    v64 = v47;
    sub_23C7DE93C(v67, v62);
    v48 = sub_23C908C50(v55);
    sub_23C8811C8(v68);
    sub_23C7FA5C4(v66);
    sub_23C811C18(v62);
    sub_23C7E6180();
    v49 = *(_QWORD *)(v48 + 32);
    sub_23C7DBCC8();
    sub_23C7DC474();
    swift_release();
    v59[0] = v49;
    v59[1] = v54;
    DatabaseRegion.union(_:)(v59, &v60);
    sub_23C7E087C();
    sub_23C7DB62C();
    sub_23C7DB3DC();
    v13 = v60;
    if (!v53)
    {
      sub_23C7E588C();
      v11 = (uint64_t *)v50;
      goto LABEL_31;
    }
    v17 = v52 + 1;
    v15 = *v52;
    v16 = v53 - 1;
    if (!*(_QWORD *)(*v52 + 16))
      goto LABEL_28;
  }
  sub_23C7DC484();
  sub_23C7DF478();
  __break(1u);
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_23C9091AC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _UNKNOWN **v9;
  ValueMetadata *v10;

  if (*(_QWORD *)(result + 16))
  {
    v7 = result;
    v8 = (_QWORD *)swift_allocObject();
    v8[5] = &type metadata for RangeRowAdapter;
    v8[6] = &protocol witness table for RangeRowAdapter;
    v8[2] = a2;
    v8[3] = a3;
    v8[7] = v7;
    result = swift_bridgeObjectRetain();
    v9 = &protocol witness table for ScopeAdapter;
    v10 = &type metadata for ScopeAdapter;
    a2 = v8;
  }
  else
  {
    a4[1] = a3;
    v9 = &protocol witness table for RangeRowAdapter;
    v10 = &type metadata for RangeRowAdapter;
  }
  a4[3] = v10;
  a4[4] = v9;
  *a4 = a2;
  return result;
}

uint64_t sub_23C90925C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  swift_bridgeObjectRetain();
  sub_23C7FCB94();
  v6 = v5;
  swift_bridgeObjectRelease();
  sub_23C850514(v6, a1, a2);
  v8 = v7;
  swift_release();
  if (!v2)
  {
    if (v8)
    {
      swift_bridgeObjectRelease();
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
  }
  return v9 & 1;
}

void sub_23C9092F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE v29[184];
  _BYTE v30[184];
  _QWORD v31[22];

  sub_23C7DEF5C();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  sub_23C813BF4(v31, v20);
  sub_23C90DF4C(v31);
  sub_23C90C6F0(v25, (uint64_t)v31, &a10);
  sub_23C90E024(v31);
  if (!v21)
  {
    v26 = a10;
    sub_23C910750();
    v27 = sub_23C7DB388();
    sub_23C7E62C0();
    swift_bridgeObjectRetain();
    sub_23C7DBBB8();
    sub_23C7E21BC();
    sub_23C910730();
    swift_initStackObject();
    sub_23C910748(v25, v27, MEMORY[0x24BEE4AF8]);
    if (*(_QWORD *)(v26 + 16))
    {
      sub_23C7DBCC8();
      sub_23C7DE93C(v29, (const void *)(v26 + 32));
      sub_23C801054(v29, v30);
      v28 = (char *)&loc_23C9093F8 + dword_23C90954C[sub_23C801090((uint64_t)v30)];
      __asm { BR              X9 }
    }
    sub_23C7DB62C();
    sub_23C7DFB3C();
  }
  sub_23C7DEF28();
}

#error "23C909504: call analysis failed (funcsize=14)"

void sub_23C909560()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  void (*v21)(void);
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36[6];
  __n128 v37[6];
  _QWORD v38[12];
  _QWORD v39[2];
  _QWORD v40[29];
  uint64_t v41[2];
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[4];
  char v49;
  char v50;
  uint64_t v51;
  _QWORD v52[2];
  _BYTE v53[16];
  _QWORD *v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57[4];
  uint64_t v58[9];
  uint64_t v59;
  uint64_t v60;

  sub_23C7DEF5C();
  v59 = v2;
  v60 = v3;
  v4 = v0;
  sub_23C813BF4(v41, v0);
  sub_23C90A170();
  sub_23C8807A8();
  v6 = v5;
  sub_23C7DB398();
  v7 = sub_23C7DBCA4();
  if (v1)
  {
    swift_release();
    return;
  }
  v40[27] = v7;
  v40[28] = v8;
  sub_23C910F5C();
  if ((v43 & 1) != 0)
    sub_23C910F5C();
  sub_23C90DF4C(v41);
  sub_23C7EE21C();
  sub_23C90C6F0(v9, (uint64_t)v41, v39);
  sub_23C90E024(v41);
  sub_23C7DFA18();
  v10 = v39[0];
  if (!*(_QWORD *)(v39[0] + 16))
  {
    sub_23C7DC484();
    sub_23C7DF478();
    __break(1u);
    return;
  }
  sub_23C91073C();
  sub_23C7DF5CC();
  v39[0] = sub_23C906D30(v10);
  sub_23C7E9B8C();
  sub_23C7E6ADC((unint64_t *)&qword_25430DB98, v11, MEMORY[0x24BEE12B0]);
  sub_23C910E3C();
  sub_23C7DC474();
  sub_23C910F5C();
  sub_23C7DBCD0();
  sub_23C910F5C();
  v12 = v42;
  sub_23C90A550(v6, v41[0], v41[1], v42);
  sub_23C910F5C();
  sub_23C7DB398();
  v13 = v45;
  v14 = v46;
  v58[0] = v45;
  v15 = *(_QWORD *)(v45 + 16);
  if (v15)
  {
    v33 = v10;
    v54 = v46;
    v34 = v12;
    swift_retain();
    sub_23C863AB4((uint64_t)v58);
    sub_23C863AB4((uint64_t)&v54);
    if (!v14[2])
    {
LABEL_13:
      __break(1u);
      sub_23C7DFE08();
      swift_bridgeObjectRelease();
      swift_release();
      sub_23C7E588C();
      sub_23C863D04((uint64_t)&v54);
      swift_bridgeObjectRelease();
      sub_23C90F08C((uint64_t)v38);
      return;
    }
    v16 = (uint64_t *)(v13 + 40);
    while (1)
    {
      v18 = *(v16 - 1);
      v17 = *v16;
      swift_bridgeObjectRetain_n();
      v19 = sub_23C7E94B8();
      if ((v20 & 1) == 0)
        break;
      sub_23C910794(v38, (const void *)(v14[7] + 216 * v19));
      sub_23C90EE88((uint64_t)v38);
      sub_23C7DB398();
      v39[0] = v18;
      v39[1] = v17;
      sub_23C910794(v40, v38);
      sub_23C90EE88((uint64_t)v38);
      sub_23C90EF78((uint64_t)v39);
      sub_23C91073C();
      sub_23C910794(v37, v38);
      sub_23C90E618(v6, v34, 1);
      sub_23C7DC6B0();
      sub_23C7DB398();
      sub_23C90F08C((uint64_t)v38);
      if (!--v15)
      {
        sub_23C7E588C();
        sub_23C863D04((uint64_t)&v54);
        swift_release();
        v10 = v33;
        goto LABEL_15;
      }
      v16 += 2;
      if (!v14[2])
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_23C7E5038((uint64_t)&v44, (uint64_t)v53);
    sub_23C7E5038((uint64_t)v53, (uint64_t)&v55);
    v21 = v55;
    if (v55)
    {
      sub_23C7EE21C();
      sub_23C7E7788();
      v21();
      sub_23C7DFB3C();
      sub_23C7E3190(v36, v38);
      sub_23C7E3190(v37, v38);
      nullsub_1(v37);
      sub_23C8811C8(v36);
      sub_23C7E9630();
      sub_23C7E3190(&v35, v36);
      sub_23C7EC960();
      sub_23C7DC6B0();
      sub_23C7DB398();
      sub_23C8811C8(v36);
      v22 = v37;
    }
    else
    {
      sub_23C80A96C((uint64_t)v38);
      v22 = (__n128 *)v38;
    }
    sub_23C8DEAE8((uint64_t)v22, (uint64_t)v39, &qword_25430CF58);
    sub_23C7E5038((uint64_t)&v47, (uint64_t)v52);
    sub_23C7E5038((uint64_t)v52, (uint64_t)&v56);
    if (v56)
    {
      sub_23C7EE21C();
      sub_23C7DB7A8();
      v14 = (_QWORD *)v10;
      sub_23C7DF8F8();
      v16 = (uint64_t *)v38[0];
    }
    else
    {
      v14 = (_QWORD *)v10;
      v16 = (uint64_t *)MEMORY[0x24BEE4AF8];
    }
    if (v16[2])
    {
      sub_23C910F5C();
      sub_23C7DF5CC();
      v38[0] = sub_23C906BAC((uint64_t)v16);
      sub_23C7EFA34();
      sub_23C910E3C();
      sub_23C7DB398();
      sub_23C7EDE68();
      sub_23C7DBCD0();
    }
    sub_23C7E5038((uint64_t)v48, (uint64_t)&v51);
    sub_23C7E5038((uint64_t)&v51, (uint64_t)v57);
    if (v57[0])
    {
      sub_23C7EE21C();
      sub_23C7DB7A8();
      sub_23C7DF8F8();
      sub_23C7E3190(v37, v38);
      sub_23C910F5C();
      sub_23C7E3190(v36, v37);
      sub_23C7EC960();
      sub_23C7DC6B0();
      sub_23C7DB398();
      sub_23C8811C8(v37);
    }
    sub_23C90A66C();
    sub_23C7EE21C();
    sub_23C85E408();
    v24 = v23;
    sub_23C7DB398();
    sub_23C7DFA18();
    if (!*(_QWORD *)(v24 + 16))
      goto LABEL_30;
    sub_23C7E6480();
    sub_23C7DF5CC();
    v19 = sub_23C9107A8(v24);
  }
  v25 = v19;
  sub_23C7DC474();
  v38[0] = v25;
  sub_23C7EFA34();
  sub_23C910E3C();
  sub_23C7DB398();
  sub_23C7EDE68();
LABEL_30:
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
  {
    if ((v4[168] & 1) == 0)
    {
      sub_23C7DFE08();
      sub_23C7E087C();
      sub_23C7DC514();
LABEL_33:
      sub_23C7E5FDC();
      return;
    }
    sub_23C7EE21C();
    v31 = v30;
    sub_23C8DEAE8((uint64_t)v39, (uint64_t)v38, &qword_25430CF58);
    v32 = sub_23C90A8C8(v31, v14, (uint64_t)v38, (uint64_t)v16);
    sub_23C7E087C();
    sub_23C7DC514();
    sub_23C7DF8F8();
    if ((v32 & 1) != 0)
    {
      sub_23C7DFE08();
      goto LABEL_33;
    }
    v27 = 0;
    v28 = 1;
    v29 = 1;
  }
  else
  {
    v26 = v49;
    v27 = v48[3];
    v28 = v48[2];
    sub_23C7E087C();
    sub_23C7DC514();
    v29 = v26 & 1;
  }
  sub_23C7ECD78();
  sub_23C85E31C(v28, v27, v29);
  sub_23C7DC6B0();
  sub_23C7DFE08();
  sub_23C7E5FDC();
  sub_23C7DB398();
}

uint64_t sub_23C909E74@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  uint64_t v34;
  void (*v35)();
  uint64_t v36;
  _QWORD *(*v37)();
  _QWORD *v38;
  char v39;
  uint64_t v40;
  void (*v41)();
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v4 = *a1;
  v5 = a1[1];
  v45 = *a1;
  if (a1[2])
  {
    v6 = a1[2];
  }
  else
  {
    type metadata accessor for TableAlias();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 1;
    sub_23C7DBBB8();
  }
  v8 = a1[3];
  v7 = a1[4];
  v9 = (_QWORD *)sub_23C7DF3DC();
  v9[2] = sub_23C90F4B0;
  v9[3] = v6;
  v9[4] = v8;
  v9[5] = v7;
  v43 = v9;
  v10 = a1[5];
  v11 = a1[6];
  if (v10)
  {
    v12 = (_QWORD *)sub_23C7DF3DC();
    v12[2] = sub_23C90F52C;
    v12[3] = v6;
    v12[4] = v10;
    v12[5] = v11;
    v42 = v12;
    sub_23C7E62C0();
    v41 = sub_23C910708;
  }
  else
  {
    v41 = 0;
    v42 = (_QWORD *)a1[6];
  }
  v46 = a1[7];
  v13 = v46;
  v47 = *((_BYTE *)a1 + 64);
  swift_retain_n();
  sub_23C7DBBB8();
  sub_23C7DF5CC();
  sub_23C863AB4((uint64_t)&v46);
  swift_retain();
  sub_23C7DFAF0();
  v40 = sub_23C90654C(v13, v6);
  sub_23C863D04((uint64_t)&v46);
  v39 = v47;
  v14 = a1[14];
  v15 = a1[15];
  v44 = v5;
  if (v14)
  {
    v16 = (_QWORD *)sub_23C7DF3DC();
    v16[2] = sub_23C90F508;
    v16[3] = v6;
    v16[4] = v14;
    v16[5] = v15;
    v38 = v16;
    sub_23C7E62C0();
    v37 = sub_23C90F4D4;
  }
  else
  {
    v37 = 0;
    v38 = (_QWORD *)a1[15];
  }
  v17 = a1[16];
  v18 = a1[17];
  if (v17)
  {
    v19 = (_QWORD *)sub_23C7DF3DC();
    v19[2] = sub_23C91071C;
    v19[3] = v6;
    v19[4] = v17;
    v19[5] = v18;
    sub_23C7E62C0();
    v35 = sub_23C90F4F0;
  }
  else
  {
    v35 = 0;
    v19 = (_QWORD *)a1[17];
  }
  v21 = a1[11];
  v20 = a1[12];
  sub_23C7DFAF0();
  sub_23C7F5610(v17);
  v22 = MEMORY[0x24BEE4AF8];
  v23 = (_QWORD *)sub_23C910DAC();
  v24 = sub_23C90842C(v22, v23, v21, v20, (void (*)(_QWORD *__return_ptr, _BYTE *))sub_23C90E328);
  v26 = v25;
  v36 = a1[18];
  v34 = a1[19];
  v33 = *((_BYTE *)a1 + 160);
  v27 = *((_BYTE *)a1 + 161);
  v28 = *((_BYTE *)a1 + 104);
  v29 = sub_23C85CE3C();
  v31 = v30;
  sub_23C7FA5C4(a1);
  result = swift_release();
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v44;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = sub_23C90F4D4;
  *(_QWORD *)(a2 + 32) = v43;
  *(_BYTE *)(a2 + 40) = v28;
  *(_QWORD *)(a2 + 48) = v41;
  *(_QWORD *)(a2 + 56) = v42;
  *(_QWORD *)(a2 + 64) = v40;
  *(_BYTE *)(a2 + 72) = v39;
  *(_QWORD *)(a2 + 80) = v24;
  *(_QWORD *)(a2 + 88) = v26;
  *(_QWORD *)(a2 + 96) = v37;
  *(_QWORD *)(a2 + 104) = v38;
  *(_QWORD *)(a2 + 112) = v35;
  *(_QWORD *)(a2 + 120) = v19;
  *(_QWORD *)(a2 + 128) = v36;
  *(_QWORD *)(a2 + 136) = v34;
  *(_BYTE *)(a2 + 144) = v33;
  *(_BYTE *)(a2 + 145) = v27;
  *(_QWORD *)(a2 + 152) = v29;
  *(_QWORD *)(a2 + 160) = v31;
  return result;
}

uint64_t sub_23C90A170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  unint64_t v13;
  _BYTE v15[216];
  _QWORD v16[2];
  _BYTE v17[216];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE __dst[168];

  v1 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 80);
  v19 = v1;
  v16[0] = MEMORY[0x24BEE4AF8];
  swift_retain_n();
  sub_23C863AB4((uint64_t)&v20);
  v2 = sub_23C863AB4((uint64_t)&v19);
  MEMORY[0x242624CE4](v2);
  if (*(_QWORD *)((v16[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_13;
  while (1)
  {
    v3 = v20;
    sub_23C911148();
    sub_23C9110DC();
    v4 = v16[0];
    swift_release();
    v18 = v4;
    v5 = *(_QWORD *)(v3 + 16);
    if (!v5)
    {
      sub_23C863D04((uint64_t)&v20);
      sub_23C863D04((uint64_t)&v19);
      return v4;
    }
    v6 = v19;
    sub_23C863AB4((uint64_t)&v20);
    sub_23C863AB4((uint64_t)&v19);
    if (!*(_QWORD *)(v6 + 16))
      break;
    v7 = (uint64_t *)(v3 + 40);
    while (1)
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      swift_bridgeObjectRetain_n();
      v10 = sub_23C7E94B8();
      if ((v11 & 1) == 0)
        break;
      memcpy(v15, (const void *)(*(_QWORD *)(v6 + 56) + 216 * v10), sizeof(v15));
      sub_23C90EE88((uint64_t)v15);
      swift_bridgeObjectRelease();
      v16[0] = v9;
      v16[1] = v8;
      memcpy(v17, v15, sizeof(v17));
      swift_bridgeObjectRetain();
      sub_23C90EE88((uint64_t)v15);
      sub_23C90EF78((uint64_t)v16);
      v12 = memcpy(__dst, &v15[48], sizeof(__dst));
      v13 = sub_23C90A170(v12);
      sub_23C7FAEE4(v13);
      sub_23C90EF78((uint64_t)v16);
      if (!--v5)
        goto LABEL_9;
      v7 += 2;
      if (!*(_QWORD *)(v6 + 16))
        goto LABEL_8;
    }
    __break(1u);
LABEL_13:
    sub_23C91110C();
  }
LABEL_8:
  __break(1u);
LABEL_9:
  sub_23C863D04((uint64_t)&v20);
  sub_23C863D04((uint64_t)&v19);
  sub_23C863D04((uint64_t)&v20);
  sub_23C863D04((uint64_t)&v19);
  return v18;
}

uint64_t sub_23C90A37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 152);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = sub_23C9068F0(v2, v2, v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = 202;
    while ((*(_BYTE *)(v4 + v6) & 1) == 0)
    {
      v6 += 176;
      if (!--v5)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_23C910F5C();
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C90670C(v2, v3, (uint64_t (*)(uint64_t, uint64_t, _BYTE *))sub_23C90F254);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
    return swift_bridgeObjectRelease();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  return 0x2048544957;
}

uint64_t sub_23C90A550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23C8807FC(a4);
  if (v4)
  {
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C910F5C();
    sub_23C910F5C();
  }
  return 34;
}

unint64_t sub_23C90A66C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __dst[216];
  _QWORD v21[2];
  _BYTE v22[216];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[168];

  v1 = v0[10];
  v2 = v0[11];
  v24 = v1;
  v3 = v0[8];
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v23 = v2;
    swift_bridgeObjectRetain();
    sub_23C863AB4((uint64_t)&v23);
    sub_23C863AB4((uint64_t)&v24);
    swift_bridgeObjectRetain();
    sub_23C863AB4((uint64_t)&v23);
    result = sub_23C863AB4((uint64_t)&v24);
    if (*(_QWORD *)(v2 + 16))
    {
      v6 = (uint64_t *)(v1 + 40);
      v7 = v3;
      while (1)
      {
        v9 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain_n();
        result = sub_23C7E94B8();
        if ((v10 & 1) == 0)
          break;
        memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + 216 * result), sizeof(__dst));
        sub_23C90EE88((uint64_t)__dst);
        swift_bridgeObjectRelease();
        v21[0] = v9;
        v21[1] = v8;
        memcpy(v22, __dst, sizeof(v22));
        swift_bridgeObjectRetain();
        sub_23C90EE88((uint64_t)__dst);
        sub_23C90EF78((uint64_t)v21);
        v11 = memcpy(v25, &__dst[48], sizeof(v25));
        v12 = sub_23C90A66C(v11);
        v14 = v13;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v15 = v7;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F1D3C();
          v15 = v18;
        }
        v16 = *(_QWORD *)(v15 + 16);
        if (v16 >= *(_QWORD *)(v15 + 24) >> 1)
        {
          sub_23C7F1D3C();
          v15 = v19;
        }
        *(_QWORD *)(v15 + 16) = v16 + 1;
        v17 = v15 + 24 * v16;
        *(_QWORD *)(v17 + 32) = v12;
        *(_QWORD *)(v17 + 40) = v14 & 1;
        *(_BYTE *)(v17 + 48) = 1;
        swift_bridgeObjectRelease_n();
        sub_23C90EF78((uint64_t)v21);
        result = swift_bridgeObjectRelease();
        if (!--v4)
        {
          sub_23C863D04((uint64_t)&v24);
          sub_23C863D04((uint64_t)&v23);
          swift_bridgeObjectRelease();
          sub_23C863D04((uint64_t)&v24);
          sub_23C863D04((uint64_t)&v23);
          return v15;
        }
        v6 += 2;
        v7 = v15;
        if (!*(_QWORD *)(v2 + 16))
          goto LABEL_16;
      }
      __break(1u);
    }
LABEL_16:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  return result;
}

uint64_t sub_23C90A8C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t i;
  const void *v17;
  char v18;
  _BYTE v19[163];
  _BYTE __dst[163];
  __n128 v21[11];
  _BYTE __src[184];
  __n128 v23[10];

  sub_23C8DEAE8(a3, (uint64_t)v23, &qword_25430CF58);
  if (*(_QWORD *)(v4[10] + 16))
    goto LABEL_2;
  v8 = *v4;
  v9 = (void *)v4[1];
  v10._countAndFlagsBits = *v4;
  v10._object = v9;
  v11 = Database.tableExists(_:)(v10);
  if (v12)
    return v7 & 1;
  if (v11)
  {
    sub_23C8DEAE8((uint64_t)v23, (uint64_t)__src, &qword_25430CF58);
    if (sub_23C800F80((uint64_t)__src) != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      sub_23C8DEAE8((uint64_t)v23, (uint64_t)v21, &qword_25430CF58);
      sub_23C8811C8(v21);
      sub_23C87207C();
      sub_23C8811C8(v23);
      v18 = sub_23C90925C(v8, (uint64_t)v9);
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
      {
LABEL_18:
        v7 = 1;
        return v7 & 1;
      }
    }
  }
  if (!*(_QWORD *)(a4 + 16))
  {
    v14 = a2[2];
    if (v14)
    {
      swift_bridgeObjectRetain();
      sub_23C801054(a2 + 4, v21);
      v15 = (char *)(a2 + 27);
      for (i = v14 - 1; ; --i)
      {
        sub_23C801054(v21, __src);
        if (sub_23C801090((uint64_t)__src) - 1 <= 1)
        {
          v17 = (const void *)sub_23C8011F0((uint64_t)__src);
          memcpy(__dst, v17, sizeof(__dst));
          memcpy(v19, __dst, sizeof(v19));
          if ((sub_23C86E250() & 1) != 0)
            break;
        }
        if (!i)
        {
          swift_bridgeObjectRelease();
          goto LABEL_2;
        }
        sub_23C801054(v15, v21);
        v15 += 184;
      }
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
LABEL_2:
  v7 = 0;
  return v7 & 1;
}

double sub_23C90AAEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  uint64_t v3;
  double result;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[168];

  sub_23C813BF4(v9, v2);
  sub_23C90C02C(a1, 0, 1, &v7);
  if (!v3)
  {
    if (v8)
    {
      sub_23C7DB5CC(&v7, a2);
    }
    else
    {
      sub_23C7E7900((uint64_t)&v7, qword_25430D090);
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
  return result;
}

void sub_23C90AB90(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  const void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[21];
  __n128 v14[10];
  _QWORD __src[21];
  _BYTE __dst[168];
  _BYTE v17[16];
  void (*v18)(_QWORD *__return_ptr, uint64_t);

  v6 = *a2;
  memcpy(__dst, v3, sizeof(__dst));
  v7 = *(_QWORD *)__dst;
  v8 = *(_QWORD *)&__dst[8];
  v9 = *(_QWORD *)&__dst[16];
  v10 = Database.tableExists(_:)(*(Swift::String *)__dst);
  if (!v11)
  {
    if (v10)
    {
      sub_23C8DEAE8((uint64_t)&__dst[48], (uint64_t)v17, &qword_25430CF78);
      sub_23C8DEAE8((uint64_t)v17, (uint64_t)&v18, &qword_25430CF78);
      if (v18)
      {
        v18(__src, a1);
        memcpy(v14, __src, 0xA3uLL);
        memcpy(v13, __src, 0xA3uLL);
        v12 = sub_23C872600(a1, v9);
        if (v12)
        {
          v13[0] = v6;
          sub_23C8670F8(v7, v8, v12, a3);
          sub_23C8811C8(v14);
          swift_bridgeObjectRelease();
          return;
        }
        sub_23C8811C8(v14);
      }
    }
    *a3 = v6;
    swift_bridgeObjectRetain();
  }
}

void sub_23C90AD18(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD v14[21];
  __n128 __src[10];
  _BYTE __dst[168];
  _BYTE v17[16];
  _QWORD v18[5];

  memcpy(__dst, v1, sizeof(__dst));
  sub_23C8DEAE8((uint64_t)&__dst[96], (uint64_t)v17, &qword_25430CF80);
  sub_23C8DEAE8((uint64_t)v17, (uint64_t)v18, &qword_25430CF80);
  if (v18[0])
  {
    ((void (*)(__n128 *__return_ptr, uint64_t))v18[0])(__src, a1);
    if (!v2)
    {
      v4 = __src[0].n128_u64[0];
      v5 = *(_QWORD *)(__src[0].n128_u64[0] + 16);
      if (v5)
      {
        v6 = *(_QWORD *)__dst;
        v7 = *(_QWORD *)&__dst[8];
        v8 = Database.tableExists(_:)(*(Swift::String *)__dst);
        if (v9)
        {
          swift_bridgeObjectRelease();
        }
        else if (v8)
        {
          v18[4] = MEMORY[0x24BEE4B08];
          memcpy(__src, (const void *)(v4 + 32), 0xA3uLL);
          memcpy(v14, __src, 0xA3uLL);
          sub_23C8811C8(__src);
          sub_23C8714F8();
          v11 = v10;
          for (i = 200; ; i += 168)
          {
            if (!v11)
            {
              sub_23C8811C8(__src);
              swift_bridgeObjectRelease();
              goto LABEL_10;
            }
            sub_23C8FA41C();
            sub_23C8811C8(__src);
            swift_bridgeObjectRelease();
            if (!--v5)
              break;
            memcpy(__src, (const void *)(v4 + i), 0xA3uLL);
            memcpy(v14, __src, 0xA3uLL);
            sub_23C8811C8(__src);
            sub_23C8714F8();
            v11 = v13;
          }
          swift_bridgeObjectRelease();
          sub_23C90925C(v6, v7);
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_10:
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_23C90AFB8(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _OWORD v15[11];
  __int128 v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  __int128 v19;
  _QWORD __dst[21];
  _BYTE v21[184];
  _BYTE v22[168];
  _BYTE __src[168];
  _QWORD v24[23];
  _BYTE v25[184];
  _BYTE v26[168];
  _QWORD v27[23];
  __n128 v28[11];
  uint64_t v29;

  v2 = v1;
  memcpy(__dst, v1, sizeof(__dst));
  v4 = __dst[0];
  v5 = __dst[1];
  type metadata accessor for TableAlias();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 1;
  sub_23C7E79A8(&qword_25430DBC8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23C9134B0;
  *(_QWORD *)(v7 + 32) = v6;
  *(_QWORD *)&v15[0] = v7;
  sub_23C9110DC();
  type metadata accessor for StatementArgumentsSink();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v8 = sub_23C7E0B8C(0);
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_allocObject();
  sub_23C7E30C0(a1, v8, *(unint64_t *)&v15[0]);
  sub_23C90A170();
  sub_23C8807A8();
  swift_bridgeObjectRelease();
  sub_23C90F26C((uint64_t)v22);
  sub_23C800B48(v22, __src);
  v9 = v2[168];
  sub_23C7E79A8(&qword_25430D120);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_23C912A20;
  memcpy(v24, __src, 0xA3uLL);
  sub_23C801200(v24);
  sub_23C801054(v24, v25);
  memcpy((void *)(v10 + 32), v25, 0xB8uLL);
  sub_23C90F2A4(v2);
  sub_23C90B4B8(v10, (uint64_t)v26);
  swift_setDeallocating();
  sub_23C8C92CC();
  sub_23C90E024(__dst);
  v11 = *((_QWORD *)v2 + 22);
  memcpy(v27, v26, 0xA8uLL);
  LOBYTE(v27[21]) = v9;
  v27[22] = v11;
  memcpy(v21, v27, sizeof(v21));
  sub_23C911634();
  swift_bridgeObjectRelease();
  strcpy((char *)v15, "DELETE FROM ");
  BYTE13(v15[0]) = 0;
  HIWORD(v15[0]) = -5120;
  *((_QWORD *)&v16 + 1) = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v19 = v15[0];
  v17 = &type metadata for SQLExpression;
  v18 = &protocol witness table for SQLExpression;
  *(_QWORD *)&v16 = swift_allocObject();
  memcpy((void *)(v16 + 16), __src, 0xA3uLL);
  sub_23C8810F8(&v16);
  memcpy(v15, v28, 0xA3uLL);
  v12 = v29;
  sub_23C7EA244();
  if (v12)
  {
    sub_23C811C18(v27);
    swift_release();
    swift_release();
    swift_release();
    sub_23C8811C8(v28);
    swift_bridgeObjectRelease();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v16);
  }
  else
  {
    sub_23C8811C8(v28);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v16);
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C909560();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    a1 = sub_23C8C8C84(v19, *((uint64_t *)&v19 + 1), 0);
    swift_bridgeObjectRelease();
    sub_23C7E0BF0(v15);
    v16 = v15[0];
    Statement.arguments.setter(&v16, v14);
    sub_23C811C18(v27);
    swift_release();
    swift_release();
    swift_release();
  }
  return a1;
}

__n128 sub_23C90B4B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  v3 = v2;
  sub_23C90DF4C(v3);
  v6 = sub_23C907240(a1, v3);
  v20 = *v3;
  v27 = *((_OWORD *)v3 + 3);
  v26 = v3[8];
  v7 = *((_BYTE *)v3 + 72);
  v8 = v3[10];
  v9 = v3[11];
  v24 = *((_OWORD *)v3 + 7);
  v25 = *((_OWORD *)v3 + 6);
  v22 = v3[17];
  v23 = v3[16];
  v21 = *((_BYTE *)v3 + 144);
  v10 = *((_BYTE *)v3 + 145);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v6;
  v18 = *(_OWORD *)(v3 + 1);
  v19 = *(__n128 *)(v3 + 19);
  sub_23C90DF4C(v3);
  swift_bridgeObjectRetain();
  swift_release();
  v12 = MEMORY[0x24BEE4AF8];
  v13 = (_QWORD *)sub_23C910DAC();
  v14 = sub_23C908860(v12, v13, v8, v9, (void (*)(_QWORD *__return_ptr, _BYTE *))sub_23C90E438);
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v20;
  *(_OWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 24) = sub_23C90F46C;
  *(_QWORD *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 64) = v26;
  *(_BYTE *)(a2 + 72) = v7 & 1;
  *(_QWORD *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v16;
  *(_OWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 128) = v23;
  *(_QWORD *)(a2 + 136) = v22;
  *(_BYTE *)(a2 + 144) = v21;
  *(_BYTE *)(a2 + 145) = v10 & 1;
  result = v19;
  *(__n128 *)(a2 + 152) = v19;
  return result;
}

uint64_t sub_23C90B684(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _BYTE v17[168];
  _BYTE __src[168];
  _QWORD v19[23];
  _BYTE v20[184];
  _BYTE v21[168];
  _QWORD v22[23];
  _QWORD __dst[21];
  _BYTE v24[184];
  uint64_t v25;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = v3;
    v6 = *a2;
    memcpy(__dst, v3, sizeof(__dst));
    v7 = __dst[0];
    v8 = __dst[1];
    type metadata accessor for TableAlias();
    v9 = swift_allocObject();
    v25 = v7;
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_BYTE *)(v9 + 48) = 1;
    sub_23C7E79A8(&qword_25430DBC8);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23C9134B0;
    *(_QWORD *)(v10 + 32) = v9;
    v16 = v10;
    sub_23C9110DC();
    type metadata accessor for StatementArgumentsSink();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v11 = sub_23C7E0B8C(0);
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    swift_allocObject();
    sub_23C7E30C0(a1, v11, v16);
    sub_23C90A170();
    sub_23C8807A8();
    swift_bridgeObjectRelease();
    sub_23C90F26C((uint64_t)v17);
    sub_23C800B48(v17, __src);
    v12 = v4[168];
    sub_23C7E79A8(&qword_25430D120);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
    memcpy(v19, __src, 0xA3uLL);
    sub_23C801200(v19);
    sub_23C801054(v19, v20);
    memcpy((void *)(v13 + 32), v20, 0xB8uLL);
    sub_23C90F2A4(v4);
    sub_23C90B4B8(v13, (uint64_t)v21);
    swift_setDeallocating();
    sub_23C8C92CC();
    sub_23C90E024(__dst);
    v14 = *((_QWORD *)v4 + 22);
    memcpy(v22, v21, 0xA8uLL);
    LOBYTE(v22[21]) = v12;
    v22[22] = v14;
    memcpy(v24, v22, sizeof(v24));
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_23C90BDC0(int a1, int a2, uint64_t *__src)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[21];
  uint64_t v9;
  unint64_t v10;
  __n128 __dst[10];

  v4 = *__src;
  memcpy(__dst, __src + 1, 0xA2uLL);
  v9 = 0;
  v10 = 0xE000000000000000;
  if (v4 && *(_QWORD *)(v4 + 16))
  {
    v9 = 40;
    v10 = 0xE100000000000000;
    v8[0] = sub_23C7FA75C(v4);
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
  }
  sub_23C7E0C50();
  sub_23C8807A8();
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v8, __dst, 0xA2uLL);
  sub_23C881AB8(__dst);
  sub_23C88F1DC(v6);
  if (v3)
  {
    swift_release();
    sub_23C881AB8(__dst);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C881AB8(__dst);
    v8[0] = 34;
    v8[1] = 0xE100000000000000;
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_release();
    return v8[0];
  }
}

uint64_t sub_23C90C02C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  void (*v9)(__int128 *__return_ptr);
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43[2];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[40];
  _BYTE __dst[216];
  _QWORD v50[2];
  _BYTE v51[216];
  uint64_t v52;
  _BYTE v53[168];
  uint64_t v54;

  v7 = result;
  if ((a3 & 1) != 0 && !*(_QWORD *)(v4[10] + 16))
  {
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
    return result;
  }
  v9 = (void (*)(__int128 *__return_ptr))v4[3];
  sub_23C880584();
  v9(&v45);
  if (v5)
    return swift_release();
  swift_release();
  v10 = v45;
  v36 = a4;
  v37 = (uint64_t)a2;
  if (*(_QWORD *)(v45 + 16))
  {
    swift_bridgeObjectRetain();
    memcpy(__dst, (const void *)(v10 + 32), 0xB8uLL);
    sub_23C801054(__dst, v50);
    v11 = (char *)&loc_23C90C108 + dword_23C90C6DC[sub_23C801090((uint64_t)v50)];
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v38 = (uint64_t)a2;
  sub_23C7E79A8(&qword_25430B2F0);
  v12 = (_QWORD *)sub_23C910DAC();
  v13 = v4[10];
  v14 = v4[11];
  v54 = v13;
  v52 = v14;
  v15 = *(_QWORD *)(v13 + 16);
  if (!v15)
  {
LABEL_26:
    v35 = v38;
    v17 = v38;
    goto LABEL_28;
  }
  sub_23C863AB4((uint64_t)&v54);
  sub_23C863AB4((uint64_t)&v52);
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = (_QWORD *)(v13 + 40);
  v17 = v38;
  v39 = v14;
  while (1)
  {
    v41 = v16;
    v42 = v15;
    v18 = *(v16 - 1);
    v19 = *v16;
    swift_bridgeObjectRetain_n();
    v20 = sub_23C7E94B8();
    if ((v21 & 1) == 0)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      __break(1u);
      goto LABEL_36;
    }
    v22 = v14;
    memcpy(__dst, (const void *)(*(_QWORD *)(v14 + 56) + 216 * v20), sizeof(__dst));
    sub_23C90EE88((uint64_t)__dst);
    swift_bridgeObjectRelease();
    v50[0] = v18;
    v50[1] = v19;
    memcpy(v51, __dst, sizeof(v51));
    swift_bridgeObjectRetain();
    sub_23C90EE88((uint64_t)__dst);
    sub_23C90EF78((uint64_t)v50);
    memcpy(v53, &__dst[48], sizeof(v53));
    sub_23C90C02C(&v45, v7, v17, 0);
    if (v46)
    {
      v23 = v47;
      sub_23C7DB5CC(&v45, (uint64_t)v43);
      v40 = v23;
      v44 = v23;
      sub_23C7DB5CC(v43, (uint64_t)v48);
      sub_23C7EFC04((uint64_t)v48, (uint64_t)v43);
      swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v45 = v12;
      v24 = sub_23C7E94B8();
      if (__OFADD__(v12[2], (v25 & 1) == 0))
        goto LABEL_34;
      v26 = v24;
      v27 = v25;
      sub_23C7E79A8(&qword_25430B3E0);
      v22 = v39;
      if ((sub_23C911778() & 1) != 0)
      {
        v28 = sub_23C7E94B8();
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_37;
        v26 = v28;
      }
      v12 = (_QWORD *)v45;
      if ((v27 & 1) != 0)
      {
        v30 = *(_QWORD *)(v45 + 56) + 40 * v26;
        _s12GRDBInternal13DatabaseEventVwxx_0(v30);
        sub_23C7DB5CC(v43, v30);
      }
      else
      {
        *(_QWORD *)(v45 + 8 * (v26 >> 6) + 64) |= 1 << v26;
        v31 = (_QWORD *)(v12[6] + 16 * v26);
        *v31 = v18;
        v31[1] = v19;
        sub_23C7DB5CC(v43, v12[7] + 40 * v26);
        v32 = v12[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_35;
        v12[2] = v34;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C90F08C((uint64_t)__dst);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v48);
      v17 = v40;
    }
    else
    {
      sub_23C7E7900((uint64_t)&v45, qword_25430D090);
      swift_bridgeObjectRelease();
      sub_23C90F08C((uint64_t)__dst);
    }
    v15 = v42 - 1;
    if (v42 == 1)
      break;
    v16 = v41 + 2;
    v14 = v22;
    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_25;
  }
  sub_23C863D04((uint64_t)&v54);
  sub_23C863D04((uint64_t)&v52);
  v35 = v38;
LABEL_28:
  if (!v12[2])
  {
    result = swift_bridgeObjectRelease();
    v36[1] = 0u;
    v36[2] = 0u;
    *v36 = 0u;
    return result;
  }
  if (v35 < v37)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x23C90C62CLL);
  }
  if (v37 < 0)
  {
    while (1)
    {
      sub_23C9117B4();
      __break(1u);
LABEL_37:
      sub_23C911B50();
      __break(1u);
    }
  }
  sub_23C9091AC((uint64_t)v12, (_QWORD *)v37, v35, v36);
  result = swift_bridgeObjectRelease();
  *((_QWORD *)v36 + 5) = v17;
  return result;
}

void sub_23C90C6F0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  void (*v36)(_QWORD *__return_ptr, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD *__return_ptr, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *__return_ptr, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD *__return_ptr, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *__return_ptr, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *__return_ptr, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD *__return_ptr, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(_QWORD *__return_ptr, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t j;
  void (*v101)(_QWORD *__return_ptr, uint64_t);
  void (*v102)(_QWORD *__return_ptr, uint64_t);
  void (*v103)(_QWORD *__return_ptr, uint64_t);
  void (*v104)(_QWORD *__return_ptr, uint64_t);
  void (*v105)(_QWORD *__return_ptr, uint64_t);
  uint64_t v106;
  uint64_t v107;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  void (*v114)(_QWORD *__return_ptr, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(_QWORD *__return_ptr, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_QWORD *__return_ptr, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(_QWORD *__return_ptr, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(_QWORD *__return_ptr, uint64_t);
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t i;
  _BYTE v176[216];
  _QWORD v177[27];
  uint64_t v178;
  _QWORD v179[28];
  _QWORD v180[28];
  _QWORD v181[28];
  _QWORD v182[28];
  _QWORD v183[27];
  uint64_t v184;
  _QWORD v185[27];
  _QWORD v186[27];
  _QWORD __src[27];
  _QWORD v188[27];
  _QWORD __dst[28];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(__dst);
  v7 = v3;
  if (!v3)
  {
    v8 = __dst[0];
    v10 = *(_QWORD *)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23C9078F8(v10, v10, v9);
    v12 = v11;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v12 + 16))
    {
      v168 = *(_QWORD *)(v12 + 16);
      swift_bridgeObjectRetain();
      memcpy(__dst, (const void *)(v12 + 32), 0xD8uLL);
      v13 = (void (*)(_QWORD *__return_ptr, uint64_t))__dst[9];
      sub_23C90EE88((uint64_t)__dst);
      sub_23C90DF4C(&__dst[6]);
      v13(v188, a1);
      v161 = v12 + 32;
      v143 = a3;
      v14 = 1;
      for (i = a1; ; v140(v188, i))
      {
        v15 = v188[0];
        v16 = __dst[16];
        v17 = __dst[17];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_23C9078F8(v16, v16, v17);
        v19 = v18;
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
          break;
        swift_bridgeObjectRelease();
        sub_23C90E024(&__dst[6]);
LABEL_136:
        v135 = *(_QWORD *)(v15 + 16);
        v136 = *(_QWORD *)(v8 + 16);
        if (__OFADD__(v136, v135))
          goto LABEL_159;
        if (!swift_isUniquelyReferenced_nonNull_native() || v136 + v135 > *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7F2540();
          v8 = v137;
        }
        if (*(_QWORD *)(v15 + 16))
        {
          if ((*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16) < v135)
            goto LABEL_169;
          swift_arrayInitWithCopy();
          if (v135)
          {
            v138 = *(_QWORD *)(v8 + 16);
            v112 = __OFADD__(v138, v135);
            v139 = v138 + v135;
            if (v112)
              goto LABEL_174;
            *(_QWORD *)(v8 + 16) = v139;
          }
        }
        else if (v135)
        {
          goto LABEL_160;
        }
        swift_bridgeObjectRelease();
        sub_23C90F08C((uint64_t)__dst);
        if (v14 == v168)
        {
          swift_bridgeObjectRelease_n();
          a3 = v143;
          goto LABEL_150;
        }
        memcpy(__dst, (const void *)(v161 + 216 * v14++), 0xD8uLL);
        v140 = (void (*)(_QWORD *__return_ptr, uint64_t))__dst[9];
        sub_23C90EE88((uint64_t)__dst);
        sub_23C90DF4C(&__dst[6]);
      }
      swift_bridgeObjectRetain();
      v159 = v19 + 32;
      memcpy(v188, (const void *)(v19 + 32), sizeof(v188));
      v21 = (void (*)(_QWORD *__return_ptr, uint64_t))v188[9];
      sub_23C90EE88((uint64_t)v188);
      sub_23C90DF4C(&v188[6]);
      v21(__src, i);
      v141 = v14;
      v22 = 1;
      v169 = v8;
      v158 = v20;
      while (1)
      {
        v165 = v22;
        v23 = __src[0];
        v24 = *(_QWORD *)(v188[16] + 16);
        v170 = v15;
        if (v24)
          break;
        v33 = v8;
        v34 = MEMORY[0x24BEE4AF8];
LABEL_17:
        if (*(_QWORD *)(v34 + 16))
        {
          v156 = *(_QWORD *)(v34 + 16);
          v35 = (const void *)(v34 + 32);
          swift_bridgeObjectRetain();
          memcpy(__src, v35, sizeof(__src));
          v36 = (void (*)(_QWORD *__return_ptr, uint64_t))__src[9];
          sub_23C90EE88((uint64_t)__src);
          sub_23C90DF4C(&__src[6]);
          v36(v186, i);
          v8 = v33;
          v37 = 1;
          while (1)
          {
            v164 = v37;
            v172 = v186[0];
            v174 = v23;
            v38 = *(_QWORD *)(__src[16] + 16);
            if (v38)
              break;
            v40 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_30:
            v45 = v40[2];
            if (v45)
            {
              swift_bridgeObjectRetain();
              memcpy(v186, v40 + 4, sizeof(v186));
              v46 = (void (*)(_QWORD *__return_ptr, uint64_t))v186[9];
              sub_23C90EE88((uint64_t)v186);
              sub_23C90DF4C(&v186[6]);
              v46(v185, i);
              v163 = 1;
              v152 = v45;
              while (1)
              {
                v171 = v185[0];
                v47 = *(_QWORD *)(v186[16] + 16);
                if (v47)
                  break;
                v49 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_43:
                v54 = v49[2];
                v55 = i;
                if (v54)
                {
                  swift_bridgeObjectRetain();
                  v151 = v49 + 4;
                  memcpy(v185, v49 + 4, sizeof(v185));
                  v56 = (void (*)(_QWORD *__return_ptr, uint64_t))v185[9];
                  sub_23C90EE88((uint64_t)v185);
                  sub_23C90DF4C(&v185[6]);
                  v56(v183, i);
                  v162 = 1;
                  v150 = v54;
                  while (1)
                  {
                    v57 = v183[0];
                    v58 = v185[16];
                    v59 = v185[17];
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain();
                    sub_23C9078F8(v58, v58, v59);
                    v61 = v60;
                    swift_bridgeObjectRelease();
                    v184 = v57;
                    v62 = *(_QWORD *)(v61 + 16);
                    if (v62)
                    {
                      swift_bridgeObjectRetain();
                      v149 = v61 + 32;
                      memcpy(v183, (const void *)(v61 + 32), sizeof(v183));
                      v63 = (void (*)(_QWORD *__return_ptr, uint64_t))v183[9];
                      sub_23C90EE88((uint64_t)v183);
                      sub_23C90DF4C(&v183[6]);
                      v63(v182, v55);
                      v160 = 1;
                      v148 = v62;
                      while (1)
                      {
                        v64 = v182[0];
                        v65 = v183[16];
                        v66 = v183[17];
                        swift_bridgeObjectRetain_n();
                        swift_bridgeObjectRetain();
                        sub_23C9078F8(v65, v65, v66);
                        v68 = v67;
                        swift_bridgeObjectRelease();
                        v182[27] = v64;
                        if (*(_QWORD *)(v68 + 16))
                        {
                          v147 = *(_QWORD *)(v68 + 16);
                          swift_bridgeObjectRetain();
                          v146 = v68 + 32;
                          memcpy(v182, (const void *)(v68 + 32), 0xD8uLL);
                          v69 = (void (*)(_QWORD *__return_ptr, uint64_t))v182[9];
                          sub_23C90EE88((uint64_t)v182);
                          sub_23C90DF4C(&v182[6]);
                          v69(v181, v55);
                          v157 = 1;
                          while (1)
                          {
                            v70 = v181[0];
                            v71 = v182[16];
                            v72 = v182[17];
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain();
                            sub_23C9078F8(v71, v71, v72);
                            v74 = v73;
                            swift_bridgeObjectRelease();
                            v181[27] = v70;
                            if (*(_QWORD *)(v74 + 16))
                            {
                              v145 = *(_QWORD *)(v74 + 16);
                              swift_bridgeObjectRetain();
                              v144 = v74 + 32;
                              memcpy(v181, (const void *)(v74 + 32), 0xD8uLL);
                              v75 = (void (*)(_QWORD *__return_ptr, uint64_t))v181[9];
                              sub_23C90EE88((uint64_t)v181);
                              sub_23C90DF4C(&v181[6]);
                              v75(v180, v55);
                              v154 = 1;
                              while (1)
                              {
                                v76 = v180[0];
                                v77 = v181[16];
                                v78 = v181[17];
                                swift_bridgeObjectRetain_n();
                                swift_bridgeObjectRetain();
                                sub_23C9078F8(v77, v77, v78);
                                v80 = v79;
                                swift_bridgeObjectRelease();
                                v180[27] = v76;
                                v155 = *(_QWORD *)(v80 + 16);
                                if (v155)
                                {
                                  swift_bridgeObjectRetain();
                                  v142 = v80 + 32;
                                  memcpy(v180, (const void *)(v80 + 32), 0xD8uLL);
                                  v81 = (void (*)(_QWORD *__return_ptr, uint64_t))v180[9];
                                  sub_23C90EE88((uint64_t)v180);
                                  sub_23C90DF4C(&v180[6]);
                                  v81(v179, v55);
                                  v82 = 1;
                                  while (1)
                                  {
                                    v153 = v82;
                                    v83 = v179[0];
                                    v84 = v180[16];
                                    v85 = v180[17];
                                    swift_bridgeObjectRetain_n();
                                    swift_bridgeObjectRetain();
                                    sub_23C9078F8(v84, v84, v85);
                                    v87 = v86;
                                    swift_bridgeObjectRelease();
                                    v179[27] = v83;
                                    if (*(_QWORD *)(v87 + 16))
                                    {
                                      v88 = *(_QWORD *)(v87 + 16);
                                      v89 = v87 + 32;
                                      swift_bridgeObjectRetain();
                                      memcpy(v179, (const void *)(v87 + 32), 0xD8uLL);
                                      v90 = (void (*)(_QWORD *__return_ptr, uint64_t))v179[9];
                                      sub_23C90EE88((uint64_t)v179);
                                      sub_23C90DF4C(&v179[6]);
                                      v90(v177, v55);
                                      v91 = 1;
                                      while (1)
                                      {
                                        v92 = v7;
                                        v93 = v177[0];
                                        v94 = v179[16];
                                        v95 = v179[17];
                                        swift_bridgeObjectRetain_n();
                                        swift_bridgeObjectRetain();
                                        sub_23C9078F8(v94, v94, v95);
                                        v97 = v96;
                                        v98 = v92;
                                        swift_bridgeObjectRelease();
                                        v178 = v93;
                                        v99 = *(_QWORD *)(v97 + 16);
                                        if (v99)
                                        {
                                          swift_bridgeObjectRetain();
                                          memcpy(v177, (const void *)(v97 + 32), sizeof(v177));
                                          memcpy(v176, v177, sizeof(v176));
                                          sub_23C90EE88((uint64_t)v177);
                                          sub_23C90E0F8((uint64_t)&v178, (uint64_t)v176, i);
                                          for (j = 248; ; j += 216)
                                          {
                                            v98 = 0;
                                            sub_23C90F08C((uint64_t)v177);
                                            if (!--v99)
                                              break;
                                            memcpy(v177, (const void *)(v97 + j), sizeof(v177));
                                            memcpy(v176, v177, sizeof(v176));
                                            sub_23C90EE88((uint64_t)v177);
                                            sub_23C90E0F8((uint64_t)&v178, (uint64_t)v176, i);
                                          }
                                          swift_bridgeObjectRelease_n();
                                          sub_23C90E024(&v179[6]);
                                        }
                                        else
                                        {
                                          swift_bridgeObjectRelease();
                                          sub_23C90E024(&v179[6]);
                                        }
                                        sub_23C7FB598();
                                        sub_23C90F08C((uint64_t)v179);
                                        if (v91 == v88)
                                          break;
                                        memcpy(v179, (const void *)(v89 + 216 * v91++), 0xD8uLL);
                                        v101 = (void (*)(_QWORD *__return_ptr, uint64_t))v179[9];
                                        sub_23C90EE88((uint64_t)v179);
                                        sub_23C90DF4C(&v179[6]);
                                        v101(v177, i);
                                        v7 = v98;
                                      }
                                      swift_bridgeObjectRelease_n();
                                      sub_23C90E024(&v180[6]);
                                      v7 = v98;
                                      v8 = v169;
                                      v55 = i;
                                    }
                                    else
                                    {
                                      swift_bridgeObjectRelease();
                                      sub_23C90E024(&v180[6]);
                                    }
                                    sub_23C7FB598();
                                    sub_23C90F08C((uint64_t)v180);
                                    if (v153 == v155)
                                      break;
                                    memcpy(v180, (const void *)(v142 + 216 * v153), 0xD8uLL);
                                    v82 = v153 + 1;
                                    v102 = (void (*)(_QWORD *__return_ptr, uint64_t))v180[9];
                                    sub_23C90EE88((uint64_t)v180);
                                    sub_23C90DF4C(&v180[6]);
                                    v102(v179, v55);
                                  }
                                  swift_bridgeObjectRelease_n();
                                  sub_23C90E024(&v181[6]);
                                }
                                else
                                {
                                  swift_bridgeObjectRelease();
                                  sub_23C90E024(&v181[6]);
                                }
                                sub_23C7FB598();
                                sub_23C90F08C((uint64_t)v181);
                                if (v154 == v145)
                                  break;
                                memcpy(v181, (const void *)(v144 + 216 * v154++), 0xD8uLL);
                                v103 = (void (*)(_QWORD *__return_ptr, uint64_t))v181[9];
                                sub_23C90EE88((uint64_t)v181);
                                sub_23C90DF4C(&v181[6]);
                                v103(v180, v55);
                              }
                              swift_bridgeObjectRelease_n();
                              sub_23C90E024(&v182[6]);
                            }
                            else
                            {
                              swift_bridgeObjectRelease();
                              sub_23C90E024(&v182[6]);
                            }
                            sub_23C7FB598();
                            sub_23C90F08C((uint64_t)v182);
                            if (v157 == v147)
                              break;
                            memcpy(v182, (const void *)(v146 + 216 * v157++), 0xD8uLL);
                            v104 = (void (*)(_QWORD *__return_ptr, uint64_t))v182[9];
                            sub_23C90EE88((uint64_t)v182);
                            sub_23C90DF4C(&v182[6]);
                            v104(v181, v55);
                          }
                          swift_bridgeObjectRelease_n();
                          sub_23C90E024(&v183[6]);
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          sub_23C90E024(&v183[6]);
                        }
                        sub_23C7FB598();
                        sub_23C90F08C((uint64_t)v183);
                        if (v160 == v148)
                          break;
                        memcpy(v183, (const void *)(v149 + 216 * v160++), sizeof(v183));
                        v105 = (void (*)(_QWORD *__return_ptr, uint64_t))v183[9];
                        sub_23C90EE88((uint64_t)v183);
                        sub_23C90DF4C(&v183[6]);
                        v105(v182, v55);
                      }
                      swift_bridgeObjectRelease_n();
                      sub_23C90E024(&v185[6]);
                      v57 = v184;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      sub_23C90E024(&v185[6]);
                    }
                    v106 = *(_QWORD *)(v57 + 16);
                    v107 = *(_QWORD *)(v171 + 16);
                    if (__OFADD__(v107, v106))
                      goto LABEL_166;
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v109 = v171;
                    if (!isUniquelyReferenced_nonNull_native || v107 + v106 > *(_QWORD *)(v171 + 24) >> 1)
                    {
                      sub_23C7F2540();
                      v109 = v110;
                    }
                    v171 = v109;
                    if (*(_QWORD *)(v57 + 16))
                    {
                      if ((*(_QWORD *)(v109 + 24) >> 1) - *(_QWORD *)(v109 + 16) < v106)
                        goto LABEL_173;
                      swift_arrayInitWithCopy();
                      if (v106)
                      {
                        v111 = *(_QWORD *)(v171 + 16);
                        v112 = __OFADD__(v111, v106);
                        v113 = v111 + v106;
                        if (v112)
                          goto LABEL_177;
                        *(_QWORD *)(v171 + 16) = v113;
                      }
                    }
                    else if (v106)
                    {
                      goto LABEL_168;
                    }
                    swift_bridgeObjectRelease();
                    sub_23C90F08C((uint64_t)v185);
                    if (v162 == v150)
                    {
                      swift_bridgeObjectRelease_n();
                      goto LABEL_94;
                    }
                    memcpy(v185, &v151[27 * v162++], sizeof(v185));
                    v114 = (void (*)(_QWORD *__return_ptr, uint64_t))v185[9];
                    sub_23C90EE88((uint64_t)v185);
                    sub_23C90DF4C(&v185[6]);
                    v114(v183, v55);
                  }
                }
                swift_bridgeObjectRelease();
LABEL_94:
                sub_23C90E024(&v186[6]);
                v115 = *(_QWORD *)(v171 + 16);
                v116 = *(_QWORD *)(v172 + 16);
                v15 = v170;
                v23 = v174;
                if (__OFADD__(v116, v115))
                  goto LABEL_165;
                v117 = swift_isUniquelyReferenced_nonNull_native();
                v118 = v172;
                if ((v117 & 1) == 0 || v116 + v115 > *(_QWORD *)(v172 + 24) >> 1)
                {
                  sub_23C7F2540();
                  v118 = v119;
                }
                v172 = v118;
                if (*(_QWORD *)(v171 + 16))
                {
                  if ((*(_QWORD *)(v118 + 24) >> 1) - *(_QWORD *)(v118 + 16) < v115)
                    goto LABEL_172;
                  swift_arrayInitWithCopy();
                  if (v115)
                  {
                    v120 = *(_QWORD *)(v172 + 16);
                    v112 = __OFADD__(v120, v115);
                    v121 = v120 + v115;
                    if (v112)
                      goto LABEL_178;
                    *(_QWORD *)(v172 + 16) = v121;
                  }
                }
                else if (v115)
                {
                  goto LABEL_167;
                }
                swift_bridgeObjectRelease();
                sub_23C90F08C((uint64_t)v186);
                if (v163 == v152)
                {
                  swift_bridgeObjectRelease_n();
                  goto LABEL_108;
                }
                memcpy(v186, &v40[27 * v163++ + 4], sizeof(v186));
                v122 = (void (*)(_QWORD *__return_ptr, uint64_t))v186[9];
                sub_23C90EE88((uint64_t)v186);
                sub_23C90DF4C(&v186[6]);
                v122(v185, i);
              }
              v167 = v7;
              v48 = v186[17];
              v183[0] = MEMORY[0x24BEE4AF8];
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              sub_23C7FDC94();
              if (!*(_QWORD *)(v48 + 16))
                goto LABEL_157;
              v49 = (_QWORD *)v183[0];
              v50 = 40;
              while (1)
              {
                swift_bridgeObjectRetain();
                v51 = sub_23C7E94B8();
                if ((v52 & 1) == 0)
                  goto LABEL_158;
                memcpy(v185, (const void *)(*(_QWORD *)(v48 + 56) + 216 * v51), sizeof(v185));
                sub_23C90EE88((uint64_t)v185);
                swift_bridgeObjectRelease();
                v183[0] = v49;
                v53 = v49[2];
                if (v53 >= v49[3] >> 1)
                {
                  sub_23C7FDC94();
                  v49 = (_QWORD *)v183[0];
                }
                v49[2] = v53 + 1;
                memcpy(&v49[27 * v53 + 4], v185, 0xD8uLL);
                if (!--v47)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  v8 = v169;
                  v7 = v167;
                  goto LABEL_43;
                }
                v50 += 16;
                if (!*(_QWORD *)(v48 + 16))
                  goto LABEL_157;
              }
            }
            swift_bridgeObjectRelease();
LABEL_108:
            sub_23C90E024(&__src[6]);
            v123 = *(_QWORD *)(v172 + 16);
            v124 = *(_QWORD *)(v23 + 16);
            if (__OFADD__(v124, v123))
              goto LABEL_163;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v124 + v123 > *(_QWORD *)(v23 + 24) >> 1)
            {
              sub_23C7F2540();
              v23 = v125;
            }
            if (*(_QWORD *)(v172 + 16))
            {
              if ((*(_QWORD *)(v23 + 24) >> 1) - *(_QWORD *)(v23 + 16) < v123)
                goto LABEL_171;
              swift_arrayInitWithCopy();
              if (v123)
              {
                v126 = *(_QWORD *)(v23 + 16);
                v112 = __OFADD__(v126, v123);
                v127 = v126 + v123;
                if (v112)
                  goto LABEL_175;
                *(_QWORD *)(v23 + 16) = v127;
              }
            }
            else if (v123)
            {
              goto LABEL_164;
            }
            swift_bridgeObjectRelease();
            sub_23C90F08C((uint64_t)__src);
            if (v164 == v156)
            {
              swift_bridgeObjectRelease_n();
              sub_23C90E024(&v188[6]);
              goto LABEL_122;
            }
            memcpy(__src, (const void *)(216 * v164), sizeof(__src));
            v37 = v164 + 1;
            v128 = (void (*)(_QWORD *__return_ptr, uint64_t))__src[9];
            sub_23C90EE88((uint64_t)__src);
            sub_23C90DF4C(&__src[6]);
            v128(v186, i);
          }
          v166 = v7;
          v39 = __src[17];
          v185[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_23C7FDC94();
          if (!*(_QWORD *)(v39 + 16))
            goto LABEL_156;
          v40 = (_QWORD *)v185[0];
          v41 = 40;
          while (1)
          {
            swift_bridgeObjectRetain();
            v42 = sub_23C7E94B8();
            if ((v43 & 1) == 0)
              goto LABEL_155;
            memcpy(v186, (const void *)(*(_QWORD *)(v39 + 56) + 216 * v42), sizeof(v186));
            sub_23C90EE88((uint64_t)v186);
            swift_bridgeObjectRelease();
            v185[0] = v40;
            v44 = v40[2];
            if (v44 >= v40[3] >> 1)
            {
              sub_23C7FDC94();
              v40 = (_QWORD *)v185[0];
            }
            v40[2] = v44 + 1;
            memcpy(&v40[27 * v44 + 4], v186, 0xD8uLL);
            if (!--v38)
            {
              swift_bridgeObjectRelease();
              v8 = v169;
              v15 = v170;
              v7 = v166;
              v23 = v174;
              goto LABEL_30;
            }
            v41 += 16;
            if (!*(_QWORD *)(v39 + 16))
              goto LABEL_156;
          }
        }
        swift_bridgeObjectRelease();
        sub_23C90E024(&v188[6]);
        v8 = v33;
LABEL_122:
        v129 = *(_QWORD *)(v23 + 16);
        v130 = *(_QWORD *)(v15 + 16);
        if (__OFADD__(v130, v129))
          goto LABEL_161;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v130 + v129 > *(_QWORD *)(v15 + 24) >> 1)
        {
          sub_23C7F2540();
          v15 = v131;
        }
        if (*(_QWORD *)(v23 + 16))
        {
          if ((*(_QWORD *)(v15 + 24) >> 1) - *(_QWORD *)(v15 + 16) < v129)
            goto LABEL_170;
          swift_arrayInitWithCopy();
          if (v129)
          {
            v132 = *(_QWORD *)(v15 + 16);
            v112 = __OFADD__(v132, v129);
            v133 = v132 + v129;
            if (v112)
              goto LABEL_176;
            *(_QWORD *)(v15 + 16) = v133;
          }
        }
        else if (v129)
        {
          goto LABEL_162;
        }
        swift_bridgeObjectRelease();
        sub_23C90F08C((uint64_t)v188);
        if (v165 == v158)
        {
          swift_bridgeObjectRelease_n();
          sub_23C90E024(&__dst[6]);
          v14 = v141;
          goto LABEL_136;
        }
        memcpy(v188, (const void *)(v159 + 216 * v165), sizeof(v188));
        v22 = v165 + 1;
        v134 = (void (*)(_QWORD *__return_ptr, uint64_t))v188[9];
        sub_23C90EE88((uint64_t)v188);
        sub_23C90DF4C(&v188[6]);
        v134(__src, i);
      }
      v173 = __src[0];
      v25 = v7;
      v26 = v188[17];
      v186[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23C7FDC94();
      if (*(_QWORD *)(v26 + 16))
      {
        v27 = v186[0];
        v28 = 40;
        while (1)
        {
          swift_bridgeObjectRetain();
          v29 = sub_23C7E94B8();
          if ((v30 & 1) == 0)
            break;
          memcpy(__src, (const void *)(*(_QWORD *)(v26 + 56) + 216 * v29), sizeof(__src));
          sub_23C90EE88((uint64_t)__src);
          swift_bridgeObjectRelease();
          v31 = v27;
          v186[0] = v27;
          v32 = *(_QWORD *)(v27 + 16);
          if (v32 >= *(_QWORD *)(v27 + 24) >> 1)
          {
            sub_23C7FDC94();
            v31 = v186[0];
          }
          *(_QWORD *)(v31 + 16) = v32 + 1;
          v27 = v31;
          memcpy((void *)(v31 + 216 * v32 + 32), __src, 0xD8uLL);
          if (!--v24)
          {
            swift_bridgeObjectRelease();
            v7 = v25;
            v33 = v169;
            v15 = v170;
            v23 = v173;
            v34 = v27;
            goto LABEL_17;
          }
          v28 += 16;
          if (!*(_QWORD *)(v26 + 16))
            goto LABEL_154;
        }
        __break(1u);
      }
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_150:
      *a3 = v8;
    }
  }
}

_QWORD *sub_23C90DF4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[6];
  v3 = a1[12];
  v5 = a1[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_23C7F5610(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v3);
  sub_23C7F5610(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23C90E024(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[6];
  v3 = a1[12];
  v5 = a1[14];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23C90E0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BYTE v13[216];
  _QWORD __src[27];
  uint64_t v15;
  _QWORD __dst[21];

  memcpy(__dst, (const void *)(a2 + 48), sizeof(__dst));
  v5 = (void (*)(_QWORD *__return_ptr, uint64_t))__dst[3];
  sub_23C90DF4C(__dst);
  v5(__src, a3);
  if (v3)
  {
    sub_23C90E024(__dst);
  }
  else
  {
    v6 = __src[0];
    v8 = __dst[10];
    v7 = __dst[11];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23C9078F8(v8, v8, v7);
    v10 = v9;
    swift_bridgeObjectRelease();
    v15 = v6;
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      memcpy(__src, (const void *)(v10 + 32), sizeof(__src));
      memcpy(v13, __src, sizeof(v13));
      sub_23C90EE88((uint64_t)__src);
      sub_23C90E0F8(&v15, v13, a3);
      for (i = 248; ; i += 216)
      {
        sub_23C90F08C((uint64_t)__src);
        if (!--v11)
          break;
        memcpy(__src, (const void *)(v10 + i), sizeof(__src));
        memcpy(v13, __src, sizeof(v13));
        sub_23C90EE88((uint64_t)__src);
        sub_23C90E0F8(&v15, v13, a3);
      }
      swift_bridgeObjectRelease_n();
      sub_23C90E024(__dst);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_23C90E024(__dst);
    }
    sub_23C7FB598();
  }
}

uint64_t sub_23C90E2D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _BYTE *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  _BYTE v9[8];

  v7 = *a1;
  swift_retain();
  result = a3(v7, a2, v9);
  *a4 = result;
  return result;
}

void sub_23C90E328(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD __src[21];
  _BYTE v10[175];
  BOOL v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[175];
  _QWORD __dst[21];

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v8 = a1[40];
  memcpy(__dst, a1 + 48, 0xA2uLL);
  if ((v3 - 2) >= 2)
  {
    sub_23C800AA4(v4, v5, v6, v7, v8);
    sub_23C837C80(__dst);
    sub_23C909E74(__src, __dst);
    memcpy(&v10[7], __src, 0xA8uLL);
    v11[0] = v3 != 0;
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v8;
    memcpy(v17, v10, sizeof(v17));
    nullsub_1(v11);
  }
  else
  {
    sub_23C90F7B8(v11);
  }
  sub_23C8DEAE8((uint64_t)v11, a2, &qword_25430B2B8);
}

void *sub_23C90E438@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __int128 v8;
  _BYTE v9[168];
  _QWORD __dst[27];
  _QWORD __srca[21];
  _BYTE v12[175];

  memcpy(__dst, __src, sizeof(__dst));
  v8 = *(_OWORD *)&__dst[1];
  v3 = __dst[3];
  v4 = __dst[4];
  v5 = __dst[5];
  v6 = __dst[0];
  memcpy(v9, &__dst[6], sizeof(v9));
  sub_23C90EE88((uint64_t)__dst);
  sub_23C90B4B8(__srca, MEMORY[0x24BEE4AF8]);
  sub_23C90E024(&__dst[6]);
  memcpy(&v12[7], __srca, 0xA8uLL);
  *(_BYTE *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = v5;
  return memcpy((void *)(a2 + 41), v12, 0xAFuLL);
}

uint64_t sub_23C90E51C()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_23C911814();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_23C90E56C(char a1)
{
  if ((a1 & 1) != 0)
    return 1313427274;
  else
    return 0x494F4A205446454CLL;
}

void sub_23C90E5A0(char *a1, char *a2)
{
  sub_23C839618(*a1, *a2);
}

void sub_23C90E5AC()
{
  sub_23C8E7EC8();
}

uint64_t sub_23C90E5B4()
{
  return sub_23C8E81DC();
}

void sub_23C90E5BC()
{
  sub_23C8E83F0();
}

uint64_t sub_23C90E5C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C90E51C();
  *a1 = result;
  return result;
}

uint64_t sub_23C90E5F0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23C90E56C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23C90E618(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(_BYTE *__return_ptr);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (**v22)(_BYTE *__return_ptr);
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  void (*v31)(_BYTE *__return_ptr);
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[21];
  _BYTE v40[216];
  _BYTE v41[216];
  _BYTE v42[232];
  __n128 v43[10];
  _BYTE v44[168];
  _QWORD v45[21];
  uint64_t v46;
  uint64_t v47;

  v5 = *v3;
  v6 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))*((_QWORD *)v3 + 1);
  v7 = *((_QWORD *)v3 + 3);
  v35 = *((_QWORD *)v3 + 4);
  v33 = (char)v3[40];
  v38 = *((_QWORD *)v3 + 8);
  v31 = (void (*)(_BYTE *__return_ptr))*((_QWORD *)v3 + 12);
  v32 = *((_QWORD *)v3 + 2);
  v29 = *((_QWORD *)v3 + 16);
  v36 = *((_QWORD *)v3 + 17);
  if (v5 == 1 && (a3 & 1) == 0)
  {
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    v9 = *((_QWORD *)v3 + 6);
    v8 = *((_QWORD *)v3 + 7);
    *(_QWORD *)v42 = 0;
    *(_QWORD *)&v42[8] = 0xE000000000000000;
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C90A550(a1, v9, v8, v38);
    if (v4)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      v30 = v5;
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v46 = *(_QWORD *)v42;
      v47 = *(_QWORD *)&v42[8];
      swift_retain();
      sub_23C800AA4((uint64_t)v6, v32, v7, v35, v33);
      sub_23C880584();
      if (v33 < 0)
      {
        swift_retain();
        v6(v45, a2, v38);
        sub_23C812DD0((uint64_t)v6, v32, v7, v35, v33);
        sub_23C812DD0((uint64_t)v6, v32, v7, v35, v33);
        swift_release();
      }
      else
      {
        *(_QWORD *)v40 = v6;
        *(_QWORD *)&v40[8] = v32;
        *(_QWORD *)&v40[16] = v7;
        *(_QWORD *)&v40[24] = v35;
        v40[32] = v33 & 1;
        sub_23C880978();
        v11 = sub_23C85BB90();
        swift_bridgeObjectRelease();
        sub_23C861B58(a2, v38, v11, v41);
        swift_bridgeObjectRelease();
        sub_23C812DD0((uint64_t)v6, v32, v7, v35, v33);
        swift_release();
        memcpy(v42, v41, 0xA3uLL);
        nullsub_1(v42);
        sub_23C8DEAE8((uint64_t)v42, (uint64_t)v45, &qword_25430CF58);
      }
      sub_23C8DEAE8((uint64_t)v45, (uint64_t)v43, &qword_25430CF58);
      sub_23C8DEAE8((uint64_t)v43, (uint64_t)v44, &qword_25430CF58);
      v12 = v31;
      if (sub_23C800F80((uint64_t)v44) != 1)
      {
        sub_23C8DEAE8((uint64_t)v43, (uint64_t)v42, &qword_25430CF58);
        sub_23C8811C8((__n128 *)v42);
        sub_23C7F1D20();
        v13 = v14;
        v15 = *(_QWORD *)(v14 + 16);
        v16 = (_BYTE *)(v15 + 1);
        if (v15 >= *(_QWORD *)(v14 + 24) >> 1)
          goto LABEL_31;
        goto LABEL_11;
      }
      v13 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v12)
        {
          sub_23C880584();
          v12(v42);
          swift_release();
          memcpy(v40, v42, 0xA3uLL);
          memcpy(v39, v42, 0xA3uLL);
          sub_23C86E598();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7F1D20();
            v13 = v27;
          }
          v17 = *(_QWORD *)(v13 + 16);
          if (v17 >= *(_QWORD *)(v13 + 24) >> 1)
          {
            sub_23C7F1D20();
            v13 = v28;
          }
          *(_QWORD *)(v13 + 16) = v17 + 1;
          memcpy((void *)(v13 + 168 * v17 + 32), v41, 0xA3uLL);
          sub_23C8811C8((__n128 *)v40);
        }
        if (*(_QWORD *)(v13 + 16))
        {
          v18 = sub_23C910F5C();
          *(_QWORD *)v40 = 4476481;
          *(_QWORD *)&v40[8] = 0xE300000000000000;
          *(_OWORD *)&v40[16] = xmmword_23C914530;
          *(_WORD *)&v40[32] = 256;
          v40[34] = 0;
          MEMORY[0x24BDAC7A8](v18);
          sub_23C7E79A8(&qword_25430B3B0);
          sub_23C7E1240((unint64_t *)&qword_25430B3B8, &qword_25430B3B0, MEMORY[0x24BEE12C8]);
          swift_getKeyPath();
          swift_retain();
          sub_23C907A54();
          v20 = v19;
          swift_release();
          sub_23C87019C((uint64_t *)v40, v20, v41);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(v42, v41, 0xA3uLL);
          memcpy(v40, v41, 0xA3uLL);
          sub_23C7EA244();
          sub_23C8811C8((__n128 *)v42);
          sub_23C910F5C();
        }
        swift_bridgeObjectRelease();
        v21 = *(_QWORD *)(v29 + 16);
        v16 = (_BYTE *)v36;
        if (!v21)
          break;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!*(_QWORD *)(v36 + 16))
        {
LABEL_26:
          __break(1u);
          break;
        }
        v22 = (void (**)(_BYTE *__return_ptr))(v29 + 40);
        v15 = (unint64_t)&v42[16];
        while (1)
        {
          v23 = (uint64_t)*(v22 - 1);
          v12 = *v22;
          swift_bridgeObjectRetain_n();
          v24 = sub_23C7E94B8();
          if ((v25 & 1) == 0)
            break;
          memcpy(v41, (const void *)(*((_QWORD *)v16 + 7) + 216 * v24), sizeof(v41));
          sub_23C90EE88((uint64_t)v41);
          swift_bridgeObjectRelease();
          *(_QWORD *)v42 = v23;
          *(_QWORD *)&v42[8] = v12;
          memcpy(&v42[16], v41, 0xD8uLL);
          sub_23C90EE88((uint64_t)v41);
          sub_23C90EF78((uint64_t)v42);
          v39[0] = 0;
          v39[1] = 0xE000000000000000;
          sub_23C910F5C();
          memcpy(v40, v41, sizeof(v40));
          sub_23C90E618(a1, v38, v30);
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          sub_23C90F08C((uint64_t)v41);
          if (!--v21)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v46;
          }
          v22 += 2;
          v16 = (_BYTE *)v36;
          if (!*(_QWORD *)(v36 + 16))
            goto LABEL_26;
        }
        __break(1u);
LABEL_31:
        sub_23C7F1D20();
        v13 = v26;
LABEL_11:
        *(_QWORD *)(v13 + 16) = v16;
        memcpy((void *)(v13 + 168 * v15 + 32), v44, 0xA3uLL);
        sub_23C8811C8(v43);
      }
      swift_release();
      return v46;
    }
  }
  return result;
}

uint64_t sub_23C90EE88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 160);
  sub_23C800AA4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_23C7F5610(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v3);
  sub_23C7F5610(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C90EF78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 176);
  v7 = *(_BYTE *)(a1 + 56);
  swift_bridgeObjectRelease();
  sub_23C812DD0(v2, v3, v4, v5, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v9);
  sub_23C7F1754(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C90F08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 160);
  sub_23C812DD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C90F17C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  BOOL v21;

  v21 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v21 || (a21 & 0xFE7E00) != 0)
    return sub_23C7E6F90(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  return result;
}

uint64_t sub_23C90F1F8()
{
  return 24;
}

__n128 sub_23C90F204(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C90F218(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_23C7DFDD0(a1);
  sub_23C7DB4F0(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

uint64_t sub_23C90F254(int a1, int a2, uint64_t *a3)
{
  return sub_23C90BDC0(a1, a2, a3);
}

void sub_23C90F26C(uint64_t a1)
{
  *(_QWORD *)a1 = 1;
  bzero((void *)(a1 + 8), 0x98uLL);
  *(_BYTE *)(a1 + 162) = -88;
  *(_WORD *)(a1 + 160) = 0;
}

_QWORD *sub_23C90F2A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[6];
  v3 = a1[12];
  v5 = a1[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_23C7F5610(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v3);
  sub_23C7F5610(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C90F38C()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

_QWORD *sub_23C90F3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *(*a4)(_QWORD *__return_ptr)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  result = sub_23C85C1F4(a1, a2, a3, a4);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_23C90F41C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C85C6DC();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23C90F448()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C90F46C@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C90F41C(a1);
}

uint64_t sub_23C90F484()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C90F4B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C90E2D4(a1, v2, (uint64_t (*)(uint64_t, uint64_t, _BYTE *))sub_23C9075A0, a2);
}

_QWORD *sub_23C90F4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD *__return_ptr);
  _QWORD *v4;

  sub_23C91079C();
  return sub_23C90F3F4(v0, v1, v2, v3, v4);
}

void sub_23C90F4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD *__return_ptr);

  sub_23C91079C();
  sub_23C85C208(v0, v1, v2, v3);
}

uint64_t sub_23C90F508@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C90E2D4(a1, v2, (uint64_t (*)(uint64_t, uint64_t, _BYTE *))sub_23C906A4C, a2);
}

void sub_23C90F52C(const void *a1)
{
  _BYTE v1[168];

  sub_23C7E3190(v1, a1);
  sub_23C86E598();
}

uint64_t sub_23C90F584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t result;

  if (a8)
  {
    sub_23C800AA4(a2, a3, a4, a5, a6);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_23C7F5610(a13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C7F5610(a19);
    sub_23C7F5610(a21);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C90F67C(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_23C7DFDD0(a1);
  sub_23C7DB4F0(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

uint64_t sub_23C90F6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t result;

  if (a8)
  {
    sub_23C812DD0(a2, a3, a4, a5, a6);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23C7F1754(a13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7F1754(a19);
    sub_23C7F1754(a21);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23C90F7B8(void *a1)
{
  bzero(a1, 0xD8uLL);
}

uint64_t sub_23C90F7C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23C85E3C0(a1, a2);
}

_QWORD *sub_23C90F7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD *__return_ptr);
  _QWORD *v4;

  sub_23C91079C();
  return sub_23C8634B0(v0, v1, v2, v3, v4);
}

uint64_t destroy for SQLQualifiedJoin(uint64_t a1)
{
  sub_23C812DD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 96))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 144))
    swift_release();
  if (*(_QWORD *)(a1 + 160))
    swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SQLQualifiedJoin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_23C800AA4(v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v9)
  {
    v12 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    v15 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  v16 = *(_QWORD *)(a2 + 160);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 200);
  v19 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v18;
  *(_QWORD *)(a1 + 208) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SQLQualifiedJoin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_23C800AA4(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v13 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_23C812DD0(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_retain();
  swift_release();
  v15 = *(_QWORD *)(a1 + 96);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  if (v15)
  {
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v17;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7900(a1 + 96, &qword_256BCBDD0);
  }
  else if (v16)
  {
    v18 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v18;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_8:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v19;
      *(_QWORD *)(a1 + 152) = v20;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7900(a1 + 144, &qword_256BCBDD8);
  }
  else if (v19)
  {
    v21 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v21;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
LABEL_15:
  v22 = *(_QWORD *)(a2 + 160);
  if (!*(_QWORD *)(a1 + 160))
  {
    if (v22)
    {
      v24 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v22;
      *(_QWORD *)(a1 + 168) = v24;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_22;
  }
  if (!v22)
  {
    sub_23C7E7900(a1 + 160, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v23 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v23;
  swift_retain();
  swift_release();
LABEL_22:
  v25 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v25;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SQLQualifiedJoin(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD8uLL);
}

uint64_t assignWithTake for SQLQualifiedJoin(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_23C812DD0(v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  if (v12)
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v11;
      *(_QWORD *)(a1 + 104) = v13;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7900(a1 + 96, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_6:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v14;
      *(_QWORD *)(a1 + 152) = v15;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7900(a1 + 144, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
LABEL_11:
  v16 = *(_QWORD *)(a2 + 160);
  if (!*(_QWORD *)(a1 + 160))
  {
LABEL_15:
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_16;
  }
  if (!v16)
  {
    sub_23C7E7900(a1 + 160, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v16;
  *(_QWORD *)(a1 + 168) = v17;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLQualifiedJoin(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 216))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLQualifiedJoin(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLQualifiedJoin()
{
  return &type metadata for SQLQualifiedJoin;
}

uint64_t destroy for SQLQualifiedRelation(_QWORD *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (a1[6])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[12])
    swift_release();
  if (a1[14])
    swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SQLQualifiedRelation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = (_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v7;
  }
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    v11 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  v12 = *(_QWORD *)(a2 + 112);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 120) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 152);
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v14;
  *(_QWORD *)(a1 + 160) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SQLQualifiedRelation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7900(a1 + 48, &qword_256BCBDD0);
  }
  else if (v6)
  {
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v9;
      *(_QWORD *)(a1 + 104) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7900(a1 + 96, &qword_256BCBDD8);
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_15:
  v12 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_22;
  }
  if (!v12)
  {
    sub_23C7E7900(a1 + 112, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 120) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  v15 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SQLQualifiedRelation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t assignWithTake for SQLQualifiedRelation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  if (v6)
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v5;
      *(_QWORD *)(a1 + 56) = v7;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7900(a1 + 48, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v8;
      *(_QWORD *)(a1 + 104) = v9;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7900(a1 + 96, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_11:
  v10 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(a1 + 112))
  {
LABEL_15:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_16;
  }
  if (!v10)
  {
    sub_23C7E7900(a1 + 112, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v11;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLQualifiedRelation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 168))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLQualifiedRelation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLQualifiedRelation()
{
  return &type metadata for SQLQualifiedRelation;
}

uint64_t storeEnumTagSinglePayload for SQLQualifiedJoin.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C9105D4 + 4 * byte_23C91C201[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C910608 + 4 * byte_23C91C1FC[v4]))();
}

uint64_t sub_23C910608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C910610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C910618);
  return result;
}

uint64_t sub_23C910624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C91062CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C910630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C910638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLQualifiedJoin.Kind()
{
  return &type metadata for SQLQualifiedJoin.Kind;
}

_QWORD *assignWithCopy for SQLQualifiedSource(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SQLQualifiedSource()
{
  return &type metadata for SQLQualifiedSource;
}

unint64_t sub_23C9106CC()
{
  unint64_t result;

  result = qword_256BCDD68;
  if (!qword_256BCDD68)
  {
    result = MEMORY[0x242626100](&unk_23C91C32C, &type metadata for SQLQualifiedJoin.Kind);
    atomic_store(result, (unint64_t *)&qword_256BCDD68);
  }
  return result;
}

void sub_23C910708()
{
  sub_23C90F4F0();
}

void sub_23C91071C(const void *a1)
{
  sub_23C90F52C(a1);
}

uint64_t sub_23C910730()
{
  return type metadata accessor for SQLGenerationContext();
}

uint64_t sub_23C91073C()
{
  return sub_23C910F5C();
}

void sub_23C910748(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_23C7E30C0(a1, a2, a3);
}

uint64_t sub_23C910750()
{
  return type metadata accessor for StatementArgumentsSink();
}

uint64_t sub_23C910758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  return sub_23C8011F0((uint64_t)&a57);
}

uint64_t sub_23C910760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,__n128 a34)
{
  return sub_23C90F218(&a34);
}

uint64_t sub_23C91076C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C910780()
{
  uint64_t v0;

  return v0;
}

void *sub_23C910794(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD8uLL);
}

uint64_t sub_23C9107A8(uint64_t a1)
{
  return sub_23C906EB0(a1);
}

uint64_t sub_23C9107B0()
{
  return swift_bridgeObjectRelease_n();
}

void sub_23C9107BC(__n128 *a1)
{
  sub_23C8811C8(a1);
}

uint64_t sub_23C9107C4()
{
  return MEMORY[0x24BDCAF28]();
}

uint64_t sub_23C9107D0()
{
  return MEMORY[0x24BDCB1C0]();
}

uint64_t sub_23C9107DC()
{
  return MEMORY[0x24BDCB1E0]();
}

uint64_t sub_23C9107E8()
{
  return MEMORY[0x24BDCB1E8]();
}

uint64_t sub_23C9107F4()
{
  return MEMORY[0x24BDCB1F0]();
}

uint64_t sub_23C910800()
{
  return MEMORY[0x24BDCB200]();
}

uint64_t sub_23C91080C()
{
  return MEMORY[0x24BDCB208]();
}

uint64_t sub_23C910818()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_23C910824()
{
  return MEMORY[0x24BDCB248]();
}

uint64_t sub_23C910830()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_23C91083C()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_23C910848()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t sub_23C910854()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_23C910860()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_23C91086C()
{
  return MEMORY[0x24BDCB330]();
}

uint64_t sub_23C910878()
{
  return MEMORY[0x24BDCB360]();
}

uint64_t sub_23C910884()
{
  return MEMORY[0x24BDCB370]();
}

uint64_t sub_23C910890()
{
  return MEMORY[0x24BDCB378]();
}

uint64_t sub_23C91089C()
{
  return MEMORY[0x24BDCB398]();
}

uint64_t sub_23C9108A8()
{
  return MEMORY[0x24BDCB3A0]();
}

uint64_t sub_23C9108B4()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_23C9108C0()
{
  return MEMORY[0x24BDCB3E0]();
}

uint64_t sub_23C9108CC()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_23C9108D8()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_23C9108E4()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_23C9108F0()
{
  return MEMORY[0x24BDCB670]();
}

uint64_t sub_23C9108FC()
{
  return MEMORY[0x24BDCB678]();
}

uint64_t sub_23C910908()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t sub_23C910914()
{
  return MEMORY[0x24BDCB6D8]();
}

uint64_t sub_23C910920()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_23C91092C()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t sub_23C910938()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t sub_23C910944()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_23C910950()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_23C91095C()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_23C910968()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_23C910974()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_23C910980()
{
  return MEMORY[0x24BDCBC30]();
}

uint64_t sub_23C91098C()
{
  return MEMORY[0x24BDCBC38]();
}

uint64_t sub_23C910998()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t sub_23C9109A4()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t sub_23C9109B0()
{
  return MEMORY[0x24BDCBD08]();
}

uint64_t sub_23C9109BC()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t sub_23C9109C8()
{
  return MEMORY[0x24BDCBD18]();
}

uint64_t sub_23C9109D4()
{
  return MEMORY[0x24BDCBD28]();
}

uint64_t sub_23C9109E0()
{
  return MEMORY[0x24BDCBD38]();
}

uint64_t sub_23C9109EC()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t sub_23C9109F8()
{
  return MEMORY[0x24BDCBD60]();
}

uint64_t sub_23C910A04()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t sub_23C910A10()
{
  return MEMORY[0x24BDCBD70]();
}

uint64_t sub_23C910A1C()
{
  return MEMORY[0x24BDCBD78]();
}

uint64_t sub_23C910A28()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_23C910A34()
{
  return MEMORY[0x24BDCBDD8]();
}

uint64_t sub_23C910A40()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_23C910A4C()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23C910A58()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t sub_23C910A64()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_23C910A70()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t sub_23C910A7C()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_23C910A88()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_23C910A94()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23C910AA0()
{
  return MEMORY[0x24BDCDBB0]();
}

uint64_t sub_23C910AAC()
{
  return MEMORY[0x24BDCDBD8]();
}

uint64_t sub_23C910AB8()
{
  return MEMORY[0x24BDCDBE0]();
}

uint64_t sub_23C910AC4()
{
  return MEMORY[0x24BDCDBF0]();
}

uint64_t sub_23C910AD0()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_23C910ADC()
{
  return MEMORY[0x24BDCDC80]();
}

uint64_t sub_23C910AE8()
{
  return MEMORY[0x24BDCDCC8]();
}

uint64_t sub_23C910AF4()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_23C910B00()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_23C910B0C()
{
  return MEMORY[0x24BDCDD00]();
}

uint64_t sub_23C910B18()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_23C910B24()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_23C910B30()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_23C910B3C()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_23C910B48()
{
  return MEMORY[0x24BDCE778]();
}

uint64_t sub_23C910B54()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_23C910B60()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_23C910B6C()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23C910B78()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_23C910B84()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_23C910B90()
{
  return MEMORY[0x24BDCEA10]();
}

uint64_t sub_23C910B9C()
{
  return MEMORY[0x24BDCEA18]();
}

uint64_t sub_23C910BA8()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23C910BB4()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t sub_23C910BC0()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_23C910BCC()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23C910BD8()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_23C910BE4()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_23C910BF0()
{
  return MEMORY[0x24BDCF140]();
}

uint64_t sub_23C910BFC()
{
  return MEMORY[0x24BDCF1A0]();
}

uint64_t sub_23C910C08()
{
  return MEMORY[0x24BDCF1D0]();
}

uint64_t sub_23C910C14()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23C910C20()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t sub_23C910C2C()
{
  return MEMORY[0x24BDCF4D8]();
}

uint64_t sub_23C910C38()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_23C910C44()
{
  return MEMORY[0x24BDB9410]();
}

uint64_t sub_23C910C50()
{
  return MEMORY[0x24BDB9A28]();
}

uint64_t sub_23C910C5C()
{
  return MEMORY[0x24BDB9A30]();
}

uint64_t sub_23C910C68()
{
  return MEMORY[0x24BDB9A38]();
}

uint64_t sub_23C910C74()
{
  return MEMORY[0x24BDB9A50]();
}

uint64_t sub_23C910C80()
{
  return MEMORY[0x24BDB9A68]();
}

uint64_t sub_23C910C8C()
{
  return MEMORY[0x24BDB9AB0]();
}

uint64_t sub_23C910C98()
{
  return MEMORY[0x24BDB9AB8]();
}

uint64_t sub_23C910CA4()
{
  return MEMORY[0x24BDB9AC0]();
}

uint64_t sub_23C910CB0()
{
  return MEMORY[0x24BDB9AD8]();
}

uint64_t sub_23C910CBC()
{
  return MEMORY[0x24BDB9B20]();
}

uint64_t sub_23C910CC8()
{
  return MEMORY[0x24BDB9E38]();
}

uint64_t sub_23C910CD4()
{
  return MEMORY[0x24BDB9E48]();
}

uint64_t sub_23C910CE0()
{
  return MEMORY[0x24BDB9E78]();
}

uint64_t sub_23C910CEC()
{
  return MEMORY[0x24BDB9E80]();
}

uint64_t sub_23C910CF8()
{
  return MEMORY[0x24BDB9F10]();
}

uint64_t sub_23C910D04()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t sub_23C910D10()
{
  return MEMORY[0x24BDBA150]();
}

uint64_t sub_23C910D1C()
{
  return MEMORY[0x24BEE53F0]();
}

uint64_t sub_23C910D28()
{
  return MEMORY[0x24BEE5450]();
}

uint64_t sub_23C910D34()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_23C910D40()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23C910D4C()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t sub_23C910D58()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23C910D64()
{
  return MEMORY[0x24BEE5548]();
}

uint64_t sub_23C910D70()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t sub_23C910D7C()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t sub_23C910D88()
{
  return MEMORY[0x24BEE01C0]();
}

uint64_t sub_23C910D94()
{
  return MEMORY[0x24BEE0280]();
}

uint64_t sub_23C910DA0()
{
  return MEMORY[0x24BEE0290]();
}

uint64_t sub_23C910DAC()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_23C910DB8()
{
  return MEMORY[0x24BEE02B8]();
}

uint64_t sub_23C910DC4()
{
  return MEMORY[0x24BEE0410]();
}

uint64_t sub_23C910DD0()
{
  return MEMORY[0x24BEE0418]();
}

uint64_t sub_23C910DDC()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_23C910DE8()
{
  return MEMORY[0x24BEE0490]();
}

uint64_t sub_23C910DF4()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_23C910E00()
{
  return MEMORY[0x24BEE0500]();
}

uint64_t sub_23C910E0C()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23C910E18()
{
  return MEMORY[0x24BEE0680]();
}

uint64_t sub_23C910E24()
{
  return MEMORY[0x24BEE0688]();
}

uint64_t sub_23C910E30()
{
  return MEMORY[0x24BEE06E8]();
}

uint64_t sub_23C910E3C()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23C910E48()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_23C910E54()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23C910E60()
{
  return MEMORY[0x24BDCF888]();
}

uint64_t sub_23C910E6C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23C910E78()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23C910E84()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_23C910E90()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_23C910E9C()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_23C910EA8()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_23C910EB4()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_23C910EC0()
{
  return MEMORY[0x24BDCFB30]();
}

uint64_t sub_23C910ECC()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23C910ED8()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_23C910EE4()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_23C910EF0()
{
  return MEMORY[0x24BEE0A20]();
}

uint64_t sub_23C910EFC()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_23C910F08()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_23C910F14()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23C910F20()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_23C910F2C()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_23C910F38()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t sub_23C910F44()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_23C910F50()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_23C910F5C()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23C910F68()
{
  return MEMORY[0x24BEE0BC8]();
}

uint64_t sub_23C910F74()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_23C910F80()
{
  return MEMORY[0x24BEE0BF0]();
}

uint64_t sub_23C910F8C()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_23C910F98()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23C910FA4()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_23C910FB0()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_23C910FBC()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_23C910FC8()
{
  return MEMORY[0x24BEE0C70]();
}

uint64_t sub_23C910FD4()
{
  return MEMORY[0x24BEE0C80]();
}

uint64_t sub_23C910FE0()
{
  return MEMORY[0x24BEE0C90]();
}

uint64_t sub_23C910FEC()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_23C910FF8()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_23C911004()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_23C911010()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23C91101C()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_23C911028()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_23C911034()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_23C911040()
{
  return MEMORY[0x24BEE0E50]();
}

uint64_t sub_23C91104C()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t sub_23C911058()
{
  return MEMORY[0x24BEE0E90]();
}

uint64_t sub_23C911064()
{
  return MEMORY[0x24BEE0E98]();
}

uint64_t sub_23C911070()
{
  return MEMORY[0x24BEE0EB8]();
}

uint64_t sub_23C91107C()
{
  return MEMORY[0x24BEE0ED0]();
}

uint64_t sub_23C911088()
{
  return MEMORY[0x24BEE0F38]();
}

uint64_t sub_23C911094()
{
  return MEMORY[0x24BEE0F40]();
}

uint64_t sub_23C9110A0()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_23C9110AC()
{
  return MEMORY[0x24BEE0FE8]();
}

uint64_t sub_23C9110B8()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_23C9110C4()
{
  return MEMORY[0x24BEE1118]();
}

uint64_t sub_23C9110D0()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_23C9110DC()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23C9110E8()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t sub_23C9110F4()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_23C911100()
{
  return MEMORY[0x24BEE1150]();
}

uint64_t sub_23C91110C()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_23C911118()
{
  return MEMORY[0x24BEE1178]();
}

uint64_t sub_23C911124()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_23C911130()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23C91113C()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_23C911148()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_23C911154()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_23C911160()
{
  return MEMORY[0x24BEE11D0]();
}

uint64_t sub_23C91116C()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_23C911178()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_23C911184()
{
  return MEMORY[0x24BEE1228]();
}

uint64_t sub_23C911190()
{
  return MEMORY[0x24BEE1230]();
}

uint64_t sub_23C91119C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23C9111A8()
{
  return MEMORY[0x24BEE1278]();
}

uint64_t sub_23C9111B4()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_23C9111C0()
{
  return MEMORY[0x24BEE1290]();
}

uint64_t sub_23C9111CC()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_23C9111D8()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23C9111E4()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t sub_23C9111F0()
{
  return MEMORY[0x24BEE6C80]();
}

uint64_t sub_23C9111FC()
{
  return MEMORY[0x24BEE6C90]();
}

uint64_t sub_23C911208()
{
  return MEMORY[0x24BEE6CA8]();
}

uint64_t sub_23C911214()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t sub_23C911220()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t sub_23C91122C()
{
  return MEMORY[0x24BEE6CD0]();
}

uint64_t sub_23C911238()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t sub_23C911244()
{
  return MEMORY[0x24BEE6CF8]();
}

uint64_t sub_23C911250()
{
  return MEMORY[0x24BEE6D08]();
}

uint64_t sub_23C91125C()
{
  return MEMORY[0x24BEE6D28]();
}

uint64_t sub_23C911268()
{
  return MEMORY[0x24BEE6D30]();
}

uint64_t sub_23C911274()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_23C911280()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_23C91128C()
{
  return MEMORY[0x24BEE1478]();
}

uint64_t sub_23C911298()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23C9112A4()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t sub_23C9112B0()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_23C9112BC()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t sub_23C9112C8()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_23C9112D4()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_23C9112E0()
{
  return MEMORY[0x24BEE1900]();
}

uint64_t sub_23C9112EC()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_23C9112F8()
{
  return MEMORY[0x24BEE1938]();
}

uint64_t sub_23C911304()
{
  return MEMORY[0x24BEE1950]();
}

uint64_t sub_23C911310()
{
  return MEMORY[0x24BEE1958]();
}

uint64_t sub_23C91131C()
{
  return MEMORY[0x24BEE1960]();
}

uint64_t sub_23C911328()
{
  return MEMORY[0x24BEE1968]();
}

uint64_t sub_23C911334()
{
  return MEMORY[0x24BEE1970]();
}

uint64_t sub_23C911340()
{
  return MEMORY[0x24BEE1978]();
}

uint64_t sub_23C91134C()
{
  return MEMORY[0x24BEE1988]();
}

uint64_t sub_23C911358()
{
  return MEMORY[0x24BEE1990]();
}

uint64_t sub_23C911364()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_23C911370()
{
  return MEMORY[0x24BEE19C0]();
}

uint64_t sub_23C91137C()
{
  return MEMORY[0x24BEE19F8]();
}

uint64_t sub_23C911388()
{
  return MEMORY[0x24BEE1A18]();
}

uint64_t sub_23C911394()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_23C9113A0()
{
  return MEMORY[0x24BEE1A40]();
}

uint64_t sub_23C9113AC()
{
  return MEMORY[0x24BEE1A50]();
}

uint64_t sub_23C9113B8()
{
  return MEMORY[0x24BEE1A68]();
}

uint64_t sub_23C9113C4()
{
  return MEMORY[0x24BEE1B30]();
}

uint64_t sub_23C9113D0()
{
  return MEMORY[0x24BDCFD70]();
}

uint64_t sub_23C9113DC()
{
  return MEMORY[0x24BEE5658]();
}

uint64_t sub_23C9113E8()
{
  return MEMORY[0x24BEE5678]();
}

uint64_t sub_23C9113F4()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_23C911400()
{
  return MEMORY[0x24BEE56D0]();
}

uint64_t sub_23C91140C()
{
  return MEMORY[0x24BEE56D8]();
}

uint64_t sub_23C911418()
{
  return MEMORY[0x24BEE56E0]();
}

uint64_t sub_23C911424()
{
  return MEMORY[0x24BEE56F0]();
}

uint64_t sub_23C911430()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_23C91143C()
{
  return MEMORY[0x24BEE5768]();
}

uint64_t sub_23C911448()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_23C911454()
{
  return MEMORY[0x24BEE5778]();
}

uint64_t sub_23C911460()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t sub_23C91146C()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_23C911478()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_23C911484()
{
  return MEMORY[0x24BEE5918]();
}

uint64_t sub_23C911490()
{
  return MEMORY[0x24BEE5920]();
}

uint64_t sub_23C91149C()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t sub_23C9114A8()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_23C9114B4()
{
  return MEMORY[0x24BDD0278]();
}

uint64_t sub_23C9114C0()
{
  return MEMORY[0x24BDD0360]();
}

uint64_t sub_23C9114CC()
{
  return MEMORY[0x24BDD0390]();
}

uint64_t sub_23C9114D8()
{
  return MEMORY[0x24BDD03A0]();
}

uint64_t sub_23C9114E4()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23C9114F0()
{
  return MEMORY[0x24BEE1D50]();
}

uint64_t sub_23C9114FC()
{
  return MEMORY[0x24BEE1DA8]();
}

uint64_t sub_23C911508()
{
  return MEMORY[0x24BEE1E50]();
}

uint64_t sub_23C911514()
{
  return MEMORY[0x24BEE1E60]();
}

uint64_t sub_23C911520()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_23C91152C()
{
  return MEMORY[0x24BDD04F0]();
}

uint64_t sub_23C911538()
{
  return MEMORY[0x24BDD0518]();
}

uint64_t sub_23C911544()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_23C911550()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_23C91155C()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_23C911568()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_23C911574()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23C911580()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23C91158C()
{
  return MEMORY[0x24BEE22D8]();
}

uint64_t sub_23C911598()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_23C9115A4()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_23C9115B0()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t sub_23C9115BC()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t sub_23C9115C8()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_23C9115D4()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t sub_23C9115E0()
{
  return MEMORY[0x24BEE2378]();
}

uint64_t sub_23C9115EC()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23C9115F8()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23C911604()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t sub_23C911610()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23C91161C()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_23C911628()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_23C911634()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23C911640()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23C91164C()
{
  return MEMORY[0x24BEE2588]();
}

uint64_t sub_23C911658()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_23C911664()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23C911670()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_23C91167C()
{
  return MEMORY[0x24BEE26B0]();
}

uint64_t sub_23C911688()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23C911694()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23C9116A0()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23C9116AC()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_23C9116B8()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_23C9116C4()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_23C9116D0()
{
  return MEMORY[0x24BEE2978]();
}

uint64_t sub_23C9116DC()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_23C9116E8()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_23C9116F4()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_23C911700()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_23C91170C()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_23C911718()
{
  return MEMORY[0x24BEE2AB8]();
}

uint64_t sub_23C911724()
{
  return MEMORY[0x24BEE2B20]();
}

uint64_t sub_23C911730()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23C91173C()
{
  return MEMORY[0x24BEE2C88]();
}

uint64_t sub_23C911748()
{
  return MEMORY[0x24BEE2C90]();
}

uint64_t sub_23C911754()
{
  return MEMORY[0x24BEE2C98]();
}

uint64_t sub_23C911760()
{
  return MEMORY[0x24BEE2CA0]();
}

uint64_t sub_23C91176C()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t sub_23C911778()
{
  return MEMORY[0x24BEE2E58]();
}

uint64_t sub_23C911784()
{
  return MEMORY[0x24BEE2E68]();
}

uint64_t sub_23C911790()
{
  return MEMORY[0x24BEE2E70]();
}

uint64_t sub_23C91179C()
{
  return MEMORY[0x24BEE2E78]();
}

uint64_t sub_23C9117A8()
{
  return MEMORY[0x24BEE2E90]();
}

uint64_t sub_23C9117B4()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23C9117C0()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23C9117CC()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23C9117D8()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23C9117E4()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23C9117F0()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t sub_23C9117FC()
{
  return MEMORY[0x24BEE3168]();
}

uint64_t sub_23C911808()
{
  return MEMORY[0x24BEE3278]();
}

uint64_t sub_23C911814()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23C911820()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_23C91182C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23C911838()
{
  return MEMORY[0x24BEE33F0]();
}

uint64_t sub_23C911844()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_23C911850()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23C91185C()
{
  return MEMORY[0x24BEE3530]();
}

uint64_t sub_23C911868()
{
  return MEMORY[0x24BEE3540]();
}

uint64_t sub_23C911874()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23C911880()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23C91188C()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_23C911898()
{
  return MEMORY[0x24BEE3678]();
}

uint64_t sub_23C9118A4()
{
  return MEMORY[0x24BEE3680]();
}

uint64_t sub_23C9118B0()
{
  return MEMORY[0x24BEE3688]();
}

uint64_t sub_23C9118BC()
{
  return MEMORY[0x24BEE3698]();
}

uint64_t sub_23C9118C8()
{
  return MEMORY[0x24BEE36A0]();
}

uint64_t sub_23C9118D4()
{
  return MEMORY[0x24BEE36A8]();
}

uint64_t sub_23C9118E0()
{
  return MEMORY[0x24BEE36C8]();
}

uint64_t sub_23C9118EC()
{
  return MEMORY[0x24BEE36F0]();
}

uint64_t sub_23C9118F8()
{
  return MEMORY[0x24BEE3700]();
}

uint64_t sub_23C911904()
{
  return MEMORY[0x24BEE3708]();
}

uint64_t sub_23C911910()
{
  return MEMORY[0x24BEE37D8]();
}

uint64_t sub_23C91191C()
{
  return MEMORY[0x24BEE37E0]();
}

uint64_t sub_23C911928()
{
  return MEMORY[0x24BEE37E8]();
}

uint64_t sub_23C911934()
{
  return MEMORY[0x24BEE37F0]();
}

uint64_t sub_23C911940()
{
  return MEMORY[0x24BEE37F8]();
}

uint64_t sub_23C91194C()
{
  return MEMORY[0x24BEE3800]();
}

uint64_t sub_23C911958()
{
  return MEMORY[0x24BEE3808]();
}

uint64_t sub_23C911964()
{
  return MEMORY[0x24BEE3810]();
}

uint64_t sub_23C911970()
{
  return MEMORY[0x24BEE3818]();
}

uint64_t sub_23C91197C()
{
  return MEMORY[0x24BEE3820]();
}

uint64_t sub_23C911988()
{
  return MEMORY[0x24BEE3828]();
}

uint64_t sub_23C911994()
{
  return MEMORY[0x24BEE3830]();
}

uint64_t sub_23C9119A0()
{
  return MEMORY[0x24BEE3838]();
}

uint64_t sub_23C9119AC()
{
  return MEMORY[0x24BEE3840]();
}

uint64_t sub_23C9119B8()
{
  return MEMORY[0x24BEE3848]();
}

uint64_t sub_23C9119C4()
{
  return MEMORY[0x24BEE3850]();
}

uint64_t sub_23C9119D0()
{
  return MEMORY[0x24BEE3858]();
}

uint64_t sub_23C9119DC()
{
  return MEMORY[0x24BEE3860]();
}

uint64_t sub_23C9119E8()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_23C9119F4()
{
  return MEMORY[0x24BEE3930]();
}

uint64_t sub_23C911A00()
{
  return MEMORY[0x24BEE3938]();
}

uint64_t sub_23C911A0C()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t sub_23C911A18()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23C911A24()
{
  return MEMORY[0x24BEE3A58]();
}

uint64_t sub_23C911A30()
{
  return MEMORY[0x24BEE3AD0]();
}

uint64_t sub_23C911A3C()
{
  return MEMORY[0x24BEE3AD8]();
}

uint64_t sub_23C911A48()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_23C911A54()
{
  return MEMORY[0x24BEE3B70]();
}

uint64_t sub_23C911A60()
{
  return MEMORY[0x24BEE3B78]();
}

uint64_t sub_23C911A6C()
{
  return MEMORY[0x24BEE3B80]();
}

uint64_t sub_23C911A78()
{
  return MEMORY[0x24BEE3B88]();
}

uint64_t sub_23C911A84()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_23C911A90()
{
  return MEMORY[0x24BEE3BE8]();
}

uint64_t sub_23C911A9C()
{
  return MEMORY[0x24BEE3BF0]();
}

uint64_t sub_23C911AA8()
{
  return MEMORY[0x24BEE3C80]();
}

uint64_t sub_23C911AB4()
{
  return MEMORY[0x24BEE3C88]();
}

uint64_t sub_23C911AC0()
{
  return MEMORY[0x24BEE3C90]();
}

uint64_t sub_23C911ACC()
{
  return MEMORY[0x24BEE3CA0]();
}

uint64_t sub_23C911AD8()
{
  return MEMORY[0x24BEE3CA8]();
}

uint64_t sub_23C911AE4()
{
  return MEMORY[0x24BEE3CB0]();
}

uint64_t sub_23C911AF0()
{
  return MEMORY[0x24BEE3CD0]();
}

uint64_t sub_23C911AFC()
{
  return MEMORY[0x24BEE3CE0]();
}

uint64_t sub_23C911B08()
{
  return MEMORY[0x24BEE3CF8]();
}

uint64_t sub_23C911B14()
{
  return MEMORY[0x24BEE3D00]();
}

uint64_t sub_23C911B20()
{
  return MEMORY[0x24BEE3D08]();
}

uint64_t sub_23C911B2C()
{
  return MEMORY[0x24BEE3D10]();
}

uint64_t sub_23C911B38()
{
  return MEMORY[0x24BEE3D18]();
}

uint64_t sub_23C911B44()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23C911B50()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23C911B5C()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_23C911B68()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_23C911B74()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23C911B80()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23C911B8C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23C911B98()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23C911BA4()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_23C911BB0()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_23C911BBC()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23C911BC8()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23C911BD4()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23C911BE0()
{
  return MEMORY[0x24BEE4310]();
}

uint64_t sub_23C911BEC()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23C911BF8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23C911C04()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_23C911C10()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_23C911C1C()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23C911C28()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_23C911C34()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23C911C40()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t sub_23C911C4C()
{
  return MEMORY[0x24BEE49F0]();
}

uint64_t sub_23C911C58()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23C911C64()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23C911C70()
{
  return MEMORY[0x24BEE4A98]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x24BEE4B28]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  return (void *)MEMORY[0x24BEDDF18](a1, *(_QWORD *)&nBytes);
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  return MEMORY[0x24BEDDF20](p);
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  return (sqlite3_backup *)MEMORY[0x24BEDDF28](pDest, zDestName, pSource, zSourceName);
}

int sqlite3_backup_pagecount(sqlite3_backup *p)
{
  return MEMORY[0x24BEDDF30](p);
}

int sqlite3_backup_remaining(sqlite3_backup *p)
{
  return MEMORY[0x24BEDDF38](p);
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  return MEMORY[0x24BEDDF40](p, *(_QWORD *)&nPage);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF48](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x24BEDDF58](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x24BEDDF68](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x24BEDDF70](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDDF78](a1);
}

const char *__cdecl sqlite3_bind_parameter_name(sqlite3_stmt *a1, int a2)
{
  return (const char *)MEMORY[0x24BEDDF88](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_pointer(sqlite3_stmt *a1, int a2, void *a3, const char *a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF90](a1, *(_QWORD *)&a2, a3, a4, a5);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF98](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_busy_handler(sqlite3 *a1, int (__cdecl *a2)(void *, int), void *a3)
{
  return MEMORY[0x24BEDDFE8](a1, a2, a3);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x24BEDDFF0](a1, *(_QWORD *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x24BEDDFF8](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE008](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x24BEDE010](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x24BEDE018](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE020](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE028](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE038](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x24BEDE048](a1, *(_QWORD *)&iCol);
  return result;
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE058](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x24BEDE060](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x24BEDE068](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE078](a1, *(_QWORD *)&iCol);
}

void *__cdecl sqlite3_commit_hook(sqlite3 *a1, int (__cdecl *a2)(void *), void *a3)
{
  return (void *)MEMORY[0x24BEDE088](a1, a2, a3);
}

int sqlite3_config(int a1, ...)
{
  return MEMORY[0x24BEDE090](*(_QWORD *)&a1);
}

int sqlite3_create_collation_v2(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x24BEDE0A0](a1, zName, *(_QWORD *)&eTextRep, pArg, xCompare, xDestroy);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x24BEDE0B0](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x24BEDE0C8](a1, *(_QWORD *)&op);
}

int sqlite3_db_release_memory(sqlite3 *a1)
{
  return MEMORY[0x24BEDE0E8](a1);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x24BEDE100](db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x24BEDE108](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x24BEDE110](*(_QWORD *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x24BEDE118](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x24BEDE130](a1, *(_QWORD *)&onoff);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE140](pStmt);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x24BEDE148](a1);
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  return MEMORY[0x24BEDE150](a1);
}

void sqlite3_interrupt(sqlite3 *a1)
{
  MEMORY[0x24BEDE168](a1);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x24BEDE180](a1);
}

int sqlite3_libversion_number(void)
{
  return MEMORY[0x24BEDE188]();
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  return MEMORY[0x24BEDE190](a1, *(_QWORD *)&id, *(_QWORD *)&newVal);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x24BEDE1B0](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D0](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D8](db, zSql, *(_QWORD *)&nByte, *(_QWORD *)&prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE1E0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x24BEDE1E8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  MEMORY[0x24BEDE1F8](a1, a2);
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  MEMORY[0x24BEDE200](a1, a2, *(_QWORD *)&a3);
}

void sqlite3_result_error_code(sqlite3_context *a1, int a2)
{
  MEMORY[0x24BEDE208](a1, *(_QWORD *)&a2);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  MEMORY[0x24BEDE218](a1, a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x24BEDE220](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x24BEDE238](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  return (void *)MEMORY[0x24BEDE258](a1, a2, a3);
}

int sqlite3_set_authorizer(sqlite3 *a1, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
{
  return MEMORY[0x24BEDE260](a1, xAuth, pUserData);
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  return MEMORY[0x24BEDE280](p1, p2);
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  MEMORY[0x24BEDE288](a1);
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  return MEMORY[0x24BEDE290](db, zSchema, ppSnapshot);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x24BEDE2A0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2A8](a1);
}

int sqlite3_stmt_busy(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2B0](a1);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE2B8](pStmt);
}

int sqlite3_stricmp(const char *a1, const char *a2)
{
  return MEMORY[0x24BEDE2C8](a1, a2);
}

int sqlite3_total_changes(sqlite3 *a1)
{
  return MEMORY[0x24BEDE2E0](a1);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return MEMORY[0x24BEDE2E8](a1, *(_QWORD *)&uMask, xCallback, pCtx);
}

void *__cdecl sqlite3_update_hook(sqlite3 *a1, void (__cdecl *a2)(void *, int, const char *, const char *, sqlite3_int64), void *a3)
{
  return (void *)MEMORY[0x24BEDE2F8](a1, a2, a3);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x24BEDE300](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x24BEDE308](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x24BEDE310](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  double result;

  MEMORY[0x24BEDE320](a1);
  return result;
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x24BEDE340](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x24BEDE358](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x24BEDE368](a1);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x24BEDE398](db, zDb, *(_QWORD *)&eMode, pnLog, pnCkpt);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x24BEE4C88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x24BEE4D60]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

