void sub_23C7D80A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84C074();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_13;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5)
    {
      v8 = sub_23C7E98E4();
      sub_23C83141C(v8);
      sub_23C7E6E94();
    }
    else
    {
      sub_23C85A2EC();
    }
LABEL_9:
    sub_23C7E8E84();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_23C7D8184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v12 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v12);
    sub_23C83256C();
    v13 = sub_23C7DB694();
    sub_23C7E0964(v13, v14);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BCD4();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_13;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5)
    {
      v8 = sub_23C7E98E4();
      sub_23C830FB8(v8, v9, v10, v11);
      sub_23C7E6E94();
    }
    else
    {
      sub_23C7E6750();
    }
LABEL_9:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

#error "23C7D8280: call analysis failed (funcsize=30)"

uint64_t destroy for StatementRowImpl()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static Row.fetchCursor(_:arguments:adapter:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[40];
  uint64_t v8;

  v8 = *a2;
  sub_23C7DB5E4(a3, (uint64_t)v7, &qword_25430DBD0);
  type metadata accessor for RowCursor();
  v4 = sub_23C7DB388();
  sub_23C7DC47C();
  v5 = sub_23C82CFC8();
  sub_23C7E76BC(v5);
  sub_23C7D989C(a1, &v8, (uint64_t)v7);
  return v4;
}

void RowCursor.deinit()
{
  sub_23C7E2E68();
  swift_release();
  swift_release();
  sub_23C7E252C();
}

void sub_23C7D83D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_23C7DF844();
  sub_23C80140C();
  if (v7)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v6;
  v9 = sub_23C7E8D80();
  if (!(_DWORD)v9 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v10 = v5;
    else
      v10 = v4;
    v2 = sub_23C8013D4(v9, v10);
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  sub_23C7EDD70();
  if (v11 != v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_23C7E79A8(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_14:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DEEA8();
    return;
  }
  sub_23C801300();
  if (!v7)
  {
    *(_QWORD *)(v2 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t static Row.fetchOne(_:arguments:adapter:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(uint64_t);
  __int128 v8;

  v8 = *a2;
  static Row.fetchCursor(_:arguments:adapter:)(a1, (uint64_t *)&v8, a3);
  if (!v3)
  {
    sub_23C7D9D70();
    if (v4)
    {
      sub_23C7E7E34((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
      v6 = sub_23C902798();
      v7(v6);
      sub_23C7DFB3C();
    }
    sub_23C7DFE08();
  }
  return sub_23C7E7E20();
}

uint64_t RecordCursor.deinit()
{
  uint64_t v0;

  sub_23C7E2E68();
  swift_release();
  swift_release();
  return v0;
}

uint64_t FetchableRecord<>.init(row:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;

  type metadata accessor for RowDecoder();
  inited = swift_initStackObject();
  sub_23C7D9B34(inited, a1, a2, a3);
  return swift_release();
}

void sub_23C7D8624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  sqlite3_stmt *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint64_t v123;
  uint64_t v124;

  v87 = a4;
  v85 = a1;
  v89 = a5;
  v124 = *v5;
  v9 = sub_23C910B6C();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v5[2];
  v13 = a2;
  v90 = v5;
  v14 = sub_23C7D92E0();
  v88 = (uint64_t *)v12;
  if (v6)
  {
    v84 = a3;

    v91 = 0;
    goto LABEL_14;
  }
  v16 = v14;
  v17 = v15;
  v91 = 0;
  v18 = (_QWORD *)(v12 + 16);
  v19 = *(_QWORD *)(v12 + 40);
  v20 = *(_QWORD *)(v12 + 48);
  sub_23C7E7E34(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88))(v16, v17, v19, v20);
  LOBYTE(v16) = v22;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    v84 = a3;
LABEL_14:
    v39 = v124;
    Row.scopes.getter();
    v40 = v92;
    v42 = v93;
    v41 = v94;
    v43 = v39;
    v44 = *(_QWORD *)(v39 + 88);
    v45 = *(_QWORD *)(v43 + 104);
    v83 = v13;
    v86 = v45;
    v46 = sub_23C911C40();
    v92 = v40;
    v93 = v42;
    v94 = v41;
    v48 = Row.ScopesTreeView.subscript.getter(v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v48)
    {
      v49 = sub_23C7F0920();
      sub_23C7E79A8(&qword_25430CEC0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23C912A20;
      v51 = v86;
      *(_QWORD *)(inited + 56) = v44;
      *(_QWORD *)(inited + 64) = v51;
      sub_23C7EF8B0((uint64_t *)(inited + 32));
      (*(void (**)(void))(*(_QWORD *)(v44 - 8) + 16))();
      *(_QWORD *)&v92 = v49;
      sub_23C7EFB60();
      sub_23C8D8B54(v85, v48, v92, v84);
      swift_release();
LABEL_16:
      swift_bridgeObjectRelease();
      return;
    }
    v52 = (uint64_t)v88;
    swift_beginAccess();
    v53 = *(_QWORD *)(v52 + 80);
    v54 = *(_QWORD *)(v52 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C911C40();
    *(_QWORD *)&v92 = v53;
    *((_QWORD *)&v92 + 1) = v54;
    v55 = Row.PrefetchedRowsView.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = (uint64_t)v90;
    if (v55)
    {
      v57 = sub_23C7F0920();
      v94 = type metadata accessor for PrefetchedRowsDecoder(0, *(_QWORD *)(v124 + 80), *(_QWORD *)(v124 + 96), v58);
      v59 = MEMORY[0x242626100](&unk_23C91AA48, v94);
      *(_QWORD *)&v92 = v55;
      *((_QWORD *)&v92 + 1) = v57;
      v95 = v59;
      v93 = 0;
      sub_23C91128C();
      return;
    }
    swift_beginAccess();
    sub_23C8DEAA0(v56 + 48, (uint64_t)&v121);
    v60 = v84;
    if (!v123)
    {
      sub_23C7E7900((uint64_t)&v121, qword_25430D620);
      v77 = v44;
      v94 = v44;
      v78 = v86;
      v95 = v86;
      sub_23C7EF8B0((uint64_t *)&v92);
      v79 = *(void (**)(void))(*(_QWORD *)(v77 - 8) + 16);
      v79();
      sub_23C8DEAE8((uint64_t)&v92, (uint64_t)&v121, qword_25430D620);
      swift_beginAccess();
      sub_23C8DEB28((uint64_t)&v121, v56 + 48);
      swift_endAccess();
      v80 = sub_23C7F0920();
      sub_23C7E79A8(&qword_25430CEC0);
      v81 = swift_initStackObject();
      *(_OWORD *)(v81 + 16) = xmmword_23C912A20;
      *(_QWORD *)(v81 + 56) = v77;
      *(_QWORD *)(v81 + 64) = v78;
      sub_23C7EF8B0((uint64_t *)(v81 + 32));
      v79();
      *(_QWORD *)&v92 = v80;
      sub_23C7EFB60();
      sub_23C8D8B54(v85, (uint64_t)v88, v92, v60);
      goto LABEL_16;
    }
    sub_23C7DB5CC(&v121, (uint64_t)&v92);
    sub_23C7E79A8(&qword_25430DA10);
    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_23C9157F0;
    sub_23C7E7E34(&v92, v94);
    *(_QWORD *)(v61 + 32) = sub_23C911C40();
    *(_QWORD *)(v61 + 40) = v62;
    v63 = v44;
    v64 = v86;
    *(_QWORD *)(v61 + 48) = sub_23C911C40();
    *(_QWORD *)(v61 + 56) = v65;
    *(_QWORD *)&v121 = v61;
    swift_bridgeObjectRetain();
    v66 = v91;
    sub_23C8DDF48((uint64_t *)&v121);
    if (!v66)
    {
      swift_bridgeObjectRelease();
      v67 = v121;
      v68 = sub_23C911694();
      swift_allocError();
      v70 = v69;
      v124 = (uint64_t)v69 + *(int *)(sub_23C7E79A8(&qword_256BCDB30) + 48);
      v70[3] = v63;
      v70[4] = v64;
      sub_23C7EF8B0(v70);
      (*(void (**)(void))(*(_QWORD *)(v63 - 8) + 16))();
      sub_23C7F0920();
      strcpy((char *)&v121, "No such key: ");
      HIWORD(v121) = -4864;
      v115 = v67;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
      sub_23C910E3C();
      swift_release();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C911688();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v70, *MEMORY[0x24BEE26C8], v68);
      swift_willThrow();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v92);
      return;
    }
    goto LABEL_37;
  }
  v23 = v9 == v85;
  v24 = v85;
  if (v23)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v124 + 96) + 32))(&v92);
    v71 = v92;
    v72 = v93;
    v121 = v92;
    v122 = v93;
    v73 = v91;
    sub_23C8D886C((uint64_t)v88, v21, v11);
    sub_23C81ABB8((void *)v71, *((uint64_t *)&v71 + 1), v72);
    if (v73)
      return;
    goto LABEL_33;
  }
  v25 = sub_23C7EF810(a3);
  if (!v25)
  {
    v74 = sub_23C7EF87C(a3);
    if (!v74)
    {
      sub_23C7D9F74(v24, (uint64_t)v88, v21);
      return;
    }
    v94 = v74;
    v95 = v75;
    sub_23C7EF8B0((uint64_t *)&v92);
    v76 = v91;
    static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)();
    if (v76)
    {
LABEL_29:
      sub_23C863C80((uint64_t)&v92);
      return;
    }
    sub_23C7E79A8(&qword_25430CEB8);
    goto LABEL_33;
  }
  v28 = v25;
  v29 = v26;
  v30 = v27;
  v84 = a3;
  v94 = v25;
  v95 = v26;
  v96 = v27;
  sub_23C7EF8B0((uint64_t *)&v92);
  v32 = v31;
  v33 = (sqlite3_stmt *)v88[8];
  if (v33)
  {
    if (v21 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      v34 = v21;
      v124 = v29;
      if (v21 <= 0x7FFFFFFF)
      {
        MEMORY[0x24BDAC7A8](v31);
        *(&v83 - 2) = (uint64_t)v88;
        *(&v83 - 1) = v21;
        v35 = sqlite3_column_type(v33, v21);
        if ((_DWORD)v35 == 5)
        {
LABEL_12:
          MEMORY[0x24BDAC7A8](v35);
          *(&v83 - 2) = (uint64_t)sub_23C859F74;
          *(&v83 - 1) = (uint64_t)(&v83 - 4);
          static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)((uint64_t)v33, v34, (uint64_t)sub_23C8DECB4, (uint64_t)(&v83 - 4), v28, v124, v30, v38, v83, v84, v85, v86, v87, (uint64_t)v88, v89, (uint64_t)v90, v91, v92, *((uint64_t *)&v92 + 1),
            v93,
            v94,
            v95,
            v96,
            v97,
            v98,
            v99,
            v100,
            v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112,
            v113,
            v114,
            v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121);
          goto LABEL_29;
        }
        v90 = &v83;
        v87 = sub_23C9114E4();
        v88 = &v83;
        v86 = *(_QWORD *)(v87 - 8);
        MEMORY[0x24BDAC7A8](v87);
        v37 = (char *)&v83 - v36;
        (*(void (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(v30 + 8))(v33, v21, v28, v30);
        if (sub_23C7DE718((uint64_t)v37, 1, v28) == 1)
        {
          v35 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v37, v87);
          v34 = v21;
          goto LABEL_12;
        }
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v32, v37, v28);
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_37:
    swift_release();
    __break(1u);
    return;
  }
  v82 = v91;
  Row.fastDecode<A>(_:atUncheckedIndex:)();
  if (v82)
    goto LABEL_29;
LABEL_32:
  sub_23C7E79A8(&qword_25430CA60);
LABEL_33:
  swift_dynamicCast();
}

void sub_23C7D8F9C()
{
  int v0;
  sqlite3_stmt *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7EE2B0();
  sub_23C7E8314(v2, v3);
  if ((v4 & 1) != 0)
  {
    v13 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v13);
    sub_23C83256C();
    v14 = sub_23C7DB694();
    sub_23C7E0964(v14, v15);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v1)
  {
    sub_23C7EDBE4();
    sub_23C84BC74();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v5 != v6)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E5EDC();
  if (!(v5 ^ v6 | v7))
    goto LABEL_14;
  sub_23C7E9B58();
  MEMORY[0x24BDAC7A8](v8);
  if (sub_23C7E42DC() == 5)
  {
    v9 = sub_23C7E98E4();
    sub_23C830F5C(v9, v10, v11, v12);
    sub_23C7E6E94();
LABEL_9:
    sub_23C7E8E84();
    return;
  }
  if (sqlite3_column_text(v1, v0))
  {
    sub_23C910F80();
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
}

void _s12GRDBInternal20StatementCopyRowImplVwCP_0(uint64_t *a1, uint64_t *a2)
{
  sub_23C902818(a1, a2);
  swift_retain();
  sub_23C7DB3D4();
  sub_23C7DB390();
}

uint64_t static FetchableRecord.fetchOne(_:arguments:adapter:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  result = sub_23C7E3454(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  if (!v9)
  {
    v15 = type metadata accessor for RecordCursor(0, a4, a5, v14);
    v16 = MEMORY[0x242626100](&protocol conformance descriptor for RecordCursor<A>, v15);
    DatabaseCursor.next()(v15, v16, a9);
    return sub_23C7DFE08();
  }
  return result;
}

uint64_t sub_23C7D9148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;

  v10 = type metadata accessor for ColumnDecoder(0, a4, a5, a4);
  a6[3] = v10;
  a6[4] = MEMORY[0x242626100](&unk_23C91A648, v10);
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for StatementCopyRowImpl()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7D91F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = static String.fromDatabaseValue(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t static String.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8]();
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 3)
  {
    sub_23C7ED944(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    sub_23C910EA8();
    v5 = sub_23C910E90();
    sub_23C7E5640(v2, v3, 3);
  }
  else
  {
    v5 = 0;
    if (v4 == 2)
    {
      swift_bridgeObjectRetain();
      return v2;
    }
  }
  return v5;
}

uint64_t sub_23C7D92E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 88);
  if (!v1)
    return sub_23C911C40();
  v2 = v0;
  v3 = sub_23C911C40();
  sub_23C86616C(v3, v4, v1);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (*(_QWORD *)(v2 + 32) == 1)
    {
      v9 = sub_23C911C40();
      v11 = v10;
      v12 = sub_23C821FD8();
      v14 = v13;
      sub_23C8D40EC(v12, v13);
      if (v12 != v9 || v14 != v11)
      {
        v45 = v15;
        v18 = v16;
        if ((sub_23C911A18() & 1) == 0)
        {
          v30 = v45 == v9 && v18 == v11;
          if (v30 || (sub_23C911A18() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v37 = 0;
            v38 = 0xE000000000000000;
            sub_23C911634();
            sub_23C911A00();
            sub_23C910F5C();
            sub_23C910F5C();
            swift_bridgeObjectRelease();
          }
          else
          {
            v37 = 0;
            v38 = 0xE000000000000000;
            sub_23C911634();
            sub_23C911A00();
            sub_23C910F5C();
            sub_23C910F5C();
            swift_bridgeObjectRelease();
            sub_23C910F5C();
            sub_23C910F5C();
            swift_bridgeObjectRelease();
          }
          sub_23C910F5C();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = 0;
      v38 = 0xE000000000000000;
      sub_23C911A00();
      sub_23C910F5C();
      sub_23C910F5C();
    }
    else
    {
      v37 = 0;
      v38 = 0xE000000000000000;
      sub_23C911A00();
      sub_23C910F5C();
      sub_23C911C40();
      sub_23C910F5C();
    }
    swift_bridgeObjectRelease();
    sub_23C910F5C();
LABEL_13:
    v45 = sub_23C911C40();
    v34 = v19;
    v35 = 0uLL;
    v36 = -1;
    v20 = (_QWORD *)swift_retain();
    RowDecodingContext.init(row:key:)(v20, &v35, (uint64_t)&v37);
    v21 = v38;
    v22 = v39;
    v23 = v40;
    v24 = v42;
    v33 = v41;
    v25 = v43;
    v26 = v44;
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = 0xE000000000000000;
    sub_23C911634();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35 = 0x20746F6E2079656BLL;
    *((_QWORD *)&v35 + 1) = 0xEF203A646E756F66;
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v31 = *((_QWORD *)&v35 + 1);
    v32 = v35;
    v27 = swift_retain();
    v6 = sub_23C7FC8A8(v27);
    swift_release();
    sub_23C815EDC(v21, v22, v23);
    swift_bridgeObjectRetain();
    sub_23C7E76BC(v25);
    swift_release();
    sub_23C815EF0(v21, v22, v23);
    swift_bridgeObjectRelease();
    sub_23C7E13C4(v25);
    sub_23C83256C();
    swift_allocError();
    *(_QWORD *)v28 = v45;
    *(_QWORD *)(v28 + 8) = v34;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = v32;
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v6;
    *(_QWORD *)(v28 + 48) = v21;
    *(_QWORD *)(v28 + 56) = v22;
    *(_QWORD *)(v28 + 64) = v23;
    *(_QWORD *)(v28 + 72) = v33;
    *(_QWORD *)(v28 + 80) = v24;
    *(_QWORD *)(v28 + 88) = v25;
    *(_QWORD *)(v28 + 96) = v26;
    *(_BYTE *)(v28 + 104) = 0;
    swift_willThrow();
  }
  return v6;
}

void sub_23C7D97E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_9;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
  {
    sub_23C8E3658();
    sub_23C7F0094(v4);
LABEL_10:
    sub_23C7DFE08();
    goto LABEL_11;
  }
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_9:
    sub_23C7DFE08();
    goto LABEL_10;
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  sub_23C7DFA18();
LABEL_11:
  sub_23C7DFA88();
}

uint64_t sub_23C7D989C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14[5];

  v5 = v3;
  v9 = *a2;
  v8 = a2[1];
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  type metadata accessor for Row();
  sub_23C7DB388();
  v10 = swift_retain_n();
  sub_23C7DA924(v10);
  v14[3] = type metadata accessor for Statement();
  v14[4] = (uint64_t)&protocol witness table for Statement;
  v14[0] = a1;
  sub_23C87572C();
  v11 = sub_23C7D9DE4(a3, (uint64_t)v14);
  sub_23C7E8DDC();
  if (v4)
  {
    sub_23C8D4BC0();
    sub_23C7DA9AC();
    sub_23C7E7974(a3, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    *(_QWORD *)(v5 + 32) = v11;
    v14[0] = v9;
    v14[1] = v8;
    sub_23C7E1D24(v14, v12);
    sub_23C7DA9AC();
    sub_23C7E7974(a3, &qword_25430DBD0);
    sub_23C8D4BC0();
  }
  return v5;
}

uint64_t sub_23C7D99E8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7EFD08(v1);
  sub_23C7E7900(v0 + 48, qword_25430D620);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for Row()
{
  return objc_opt_self();
}

void sub_23C7D9A6C()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

uint64_t sub_23C7D9AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7EFCF4(v4);
  v7 = sub_23C7F0788(&v7);
  MEMORY[0x242626100](&unk_23C91A870, a1);
  return sub_23C911838();
}

uint64_t sub_23C7D9B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v7 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v7(v14, a3, a4);
  v8 = v14[0];
  v9 = v14[1];
  v15 = type metadata accessor for _RowDecoder(0, a3, a4, v10);
  v16 = MEMORY[0x242626100](&unk_23C91A600, v15);
  v11 = (_QWORD *)swift_allocObject();
  v14[0] = v11;
  v12 = MEMORY[0x24BEE4AF8];
  v11[2] = a2;
  v11[3] = v12;
  v11[4] = v8;
  v11[5] = v9;
  return sub_23C91128C();
}

uint64_t sub_23C7D9C0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14[5];

  v5 = v3;
  v9 = *a2;
  v8 = a2[1];
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  sub_23C7E16A0();
  sub_23C7DB388();
  v10 = swift_retain_n();
  sub_23C7DA924(v10);
  v14[3] = type metadata accessor for Statement();
  v14[4] = (uint64_t)&protocol witness table for Statement;
  v14[0] = a1;
  swift_retain();
  v11 = sub_23C7D9DE4(a3, (uint64_t)v14);
  swift_release();
  if (v4)
  {
    sub_23C8D4BC0();
    swift_release();
    sub_23C7E7900(a3, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    *(_QWORD *)(v5 + 32) = v11;
    v14[0] = v9;
    v14[1] = v8;
    sub_23C7E1D24(v14, v12);
    swift_release();
    sub_23C7E7900(a3, &qword_25430DBD0);
    sub_23C8D4BC0();
  }
  return v5;
}

void sub_23C7D9D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E6A30();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    sub_23C7DC47C();
    sub_23C7E7764();
    sub_23C90280C();
    sub_23C7D97E4(v2);
    v4 = v3;
    sub_23C7DC4C4();
    if (!v1 && !v4)
      *(_BYTE *)(v0 + 24) = 1;
  }
  sub_23C902AF4();
}

uint64_t *sub_23C7D9DE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = v2;
  v6 = *v4;
  sub_23C7DF56C(a1, (uint64_t)&v17);
  if (v18)
  {
    sub_23C7DB5CC(&v17, (uint64_t)v20);
    v7 = v21;
    v8 = v22;
    sub_23C7E7E34(v20, v21);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8) + 8))(&v17, a2, v7);
    if (!v3)
    {
      v9 = v18;
      v10 = v19;
      v11 = sub_23C800944((uint64_t)&v17, v18);
      MEMORY[0x24BDAC7A8](v11);
      v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v14 + 16))(v13);
      v15 = swift_retain();
      v4 = (uint64_t *)sub_23C846130(v15, (uint64_t)v13, v6, v9, v10);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v17);
    }
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
  }
  else
  {
    sub_23C7D9F34((uint64_t)&v17);
    swift_retain();
  }
  return v4;
}

uint64_t sub_23C7D9F34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430DBD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23C7D9F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v5 = (_QWORD *)*v3;
  sub_23C7F0920();
  sub_23C7E79A8(&qword_25430CEC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  v7 = v5[11];
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 64) = v5[13];
  sub_23C7EF8B0((uint64_t *)(inited + 32));
  (*(void (**)(void))(*(_QWORD *)(v7 - 8) + 16))();
  swift_retain();
  sub_23C7EFB60();
  v8 = v5[10];
  v9 = v5[12];
  v18 = type metadata accessor for ColumnDecoder(0, v8, v9, v10);
  MEMORY[0x242626100](&unk_23C91AA90, v18);
  sub_23C91128C();
  if (v17)
  {
    v11 = v17;
    sub_23C7E79A8(&qword_25430CCC8);
    if (swift_dynamicCast())
    {

      sub_23C8F287C(a3);
      v13 = v12;
      v15 = v14;
      v16 = sub_23C911C40();
      (*(void (**)(uint64_t))(v9 + 24))(v16);
      swift_bridgeObjectRelease();
      sub_23C910818();
      swift_release();
      sub_23C7EEE1C(v13, v15);
    }

  }
}

uint64_t sub_23C7DA18C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int128 a11, uint64_t a12, int a13, int a14, uint64_t __dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  sqlite3_stmt *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  sqlite3_stmt *v38;
  int v39;
  double v40;
  unint64_t v41;
  char v42;
  sqlite3_stmt *v43;
  int v44;
  _QWORD *v45;
  sqlite3_stmt *v46;
  int v47;
  const void *v48;
  const void *v49;
  sqlite3_stmt *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  sqlite3_stmt *v55;
  int v56;
  sqlite3_stmt *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _QWORD v66[12];
  uint64_t v67;
  uint64_t v68;

  sub_23C7E268C();
  v67 = v30;
  v68 = v31;
  v66[1] = *MEMORY[0x24BDAC8D0];
  v33 = sqlite3_column_count(v32);
  if ((v33 & 0x80000000) != 0)
    goto LABEL_25;
  if (v33)
  {
    v34 = v33;
    v66[0] = MEMORY[0x24BEE4AF8];
    v35 = v66;
    sub_23C7E56C8();
    v36 = 0;
    v37 = v66[0];
    while (1)
    {
      v38 = (sqlite3_stmt *)sub_23C7DA63C();
      v40 = 0.0;
      v41 = 0;
      v42 = 4;
      switch(sqlite3_column_type(v38, v39))
      {
        case 1:
          v43 = (sqlite3_stmt *)sub_23C7DA63C();
          v40 = COERCE_DOUBLE(sqlite3_column_int64(v43, v44));
          v41 = 0;
          v42 = 0;
          goto LABEL_19;
        case 2:
          v55 = (sqlite3_stmt *)sub_23C7DA63C();
          v41 = 0;
          v40 = sqlite3_column_double(v55, v56);
          v42 = 1;
          goto LABEL_19;
        case 3:
          v57 = (sqlite3_stmt *)sub_23C7DA63C();
          if (!sqlite3_column_text(v57, v58))
            goto LABEL_26;
          v40 = COERCE_DOUBLE(sub_23C910F80());
          v41 = v59;
          v42 = 2;
LABEL_19:
          v66[0] = v37;
          v60 = *(_QWORD *)(v37 + 16);
          if (v60 >= *(_QWORD *)(v37 + 24) >> 1)
          {
            sub_23C7E56C8();
            v37 = v66[0];
          }
          *(_QWORD *)(v37 + 16) = v60 + 1;
          v61 = v37 + 24 * v60;
          *(double *)(v61 + 32) = v40;
          *(_QWORD *)(v61 + 40) = v41;
          *(_BYTE *)(v61 + 48) = v42;
          if (v34 == v36)
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
          }
          if (v34 == ++v36)
            return sub_23C902E10();
          break;
        case 4:
          v45 = v35;
          v46 = (sqlite3_stmt *)sub_23C7DA63C();
          v48 = sqlite3_column_blob(v46, v47);
          if (v48 && (v49 = v48, v50 = (sqlite3_stmt *)sub_23C7DA63C(), (v52 = sqlite3_column_bytes(v50, v51)) != 0))
          {
            v53 = v52;
            if (v52 < 15)
            {
              *(_QWORD *)((char *)&v65 + 6) = 0;
              *(_QWORD *)&v65 = 0;
              BYTE14(v65) = v52;
              memcpy(&v65, v49, v52);
              v40 = *(double *)&v65;
              v41 = DWORD2(v65) | ((unint64_t)BYTE12(v65) << 32) | ((unint64_t)BYTE13(v65) << 40) | ((unint64_t)BYTE14(v65) << 48);
            }
            else
            {
              sub_23C910974();
              swift_allocObject();
              if ((_DWORD)v53 == 0x7FFFFFFF)
              {
                v54 = sub_23C910944();
                sub_23C910AD0();
                v40 = COERCE_DOUBLE(swift_allocObject());
                *(_OWORD *)(*(_QWORD *)&v40 + 16) = xmmword_23C91B850;
                v41 = v54 | 0x8000000000000000;
              }
              else
              {
                *(_QWORD *)&v40 = v53 << 32;
                v41 = sub_23C910944() | 0x4000000000000000;
              }
            }
            v42 = 3;
          }
          else
          {
            v40 = 0.0;
            v42 = 3;
            v41 = 0xC000000000000000;
          }
          v35 = v45;
          goto LABEL_19;
        case 5:
          goto LABEL_19;
        default:
          *(_QWORD *)&v65 = 0;
          *((_QWORD *)&v65 + 1) = 0xE000000000000000;
          sub_23C911634();
          swift_bridgeObjectRelease();
          sub_23C7EBCA4();
          *(_QWORD *)&v65 = v64;
          *((_QWORD *)&v65 + 1) = v63;
          sub_23C911880();
          sub_23C910F5C();
          sub_23C7DB624();
          result = sub_23C9117B4();
          __break(1u);
          return result;
      }
    }
  }
  return sub_23C902E10();
}

uint64_t sub_23C7DA4D4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23C7DA4E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  a1[2] = v3;
  a1[3] = v1;
  a1[4] = v2;
  return 0;
}

uint64_t sub_23C7DA4F4()
{
  return sub_23C911BF8();
}

void sub_23C7DA4FC()
{
  sub_23C7FB4E8();
}

uint64_t sub_23C7DA508()
{
  return swift_retain();
}

void sub_23C7DA52C()
{
  sub_23C874B20();
}

uint64_t sub_23C7DA538()
{
  return sub_23C911A18();
}

uint64_t sub_23C7DA548()
{
  return type metadata accessor for SchedulingWatchdog();
}

void sub_23C7DA554()
{
  void *v0;

  sqlite3_free(v0);
}

uint64_t sub_23C7DA55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(__int128 *, uint64_t, _BYTE *, uint64_t, uint64_t))
{
  uint64_t v9;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;
  char v29;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(a5 + 48))(&v28, a2, a3, a5);
  v26 = v28;
  v27 = v29;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v24 = v9;
  v25 = a2;
  a9(&v26, a8, v18, a4, a6);
  return sub_23C7E5640(v26, *((unint64_t *)&v26 + 1), v27);
}

void sub_23C7DA634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,__n128 a60)
{
  sub_23C8738C4(&a60);
}

uint64_t sub_23C7DA63C()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23C7DA648@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C7DA650(a1, *v2, a2);
}

unint64_t sub_23C7DA650@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    v3 = a2 + 24 * result;
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = v5;
    v6 = *(_BYTE *)(v3 + 48);
    *(_BYTE *)(a3 + 16) = v6;
    return sub_23C7E56A4(v4, v5, v6);
  }
  __break(1u);
  return result;
}

uint64_t Row.__deallocating_deinit()
{
  Row.deinit();
  return swift_deallocClassInstance();
}

void Row.deinit()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  sub_23C7DB390();
}

uint64_t _s12GRDBInternal13DatabaseEventVwxx_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23C7DA6F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C7DA718(a1, a2, *v2, v2[1], v2[2]);
}

uint64_t sub_23C7DA718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v6 = sub_23C7E94B8();
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v9 = sub_23C910E18();
    v8 = sub_23C7DA7B4(v9, v10, a5);
    swift_bridgeObjectRelease();
    return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_23C7DA7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_23C7DD1B4(), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t type metadata accessor for DatabasePool()
{
  return objc_opt_self();
}

void _s12GRDBInternal18StatementArgumentsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DB390();
}

uint64_t DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))(a5 + 24))(sub_23C7DD268, v6, a4, a3);
}

void sub_23C7DA884()
{
  DatabasePool.writeWithoutTransaction<A>(_:)();
}

Swift::Void __swiftcall SQL.append(literal:)(GRDBInternal::SQL literal)
{
  swift_bridgeObjectRetain();
  sub_23C7ED9B0();
}

uint64_t DatabaseValueCursor.__deallocating_deinit()
{
  DatabaseValueCursor.deinit();
  return swift_deallocClassInstance();
}

uint64_t _s12GRDBInternal19DatabaseValueCursorCfd_0()
{
  uint64_t v0;

  sub_23C7E2E68();
  swift_release();
  return v0;
}

void sub_23C7DA924(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_23C7DA9C0();
  v1[10] = v3;
  v1[11] = v4;
  v1[7] = a1;
  v5 = *(sqlite3_stmt **)(a1 + 16);
  v1[8] = v5;
  swift_retain_n();
  sub_23C7DAA40(v5);
  v1[2] = v6;
  v1[3] = v7;
  v1[5] = &type metadata for StatementRowImpl;
  v1[6] = &off_250D82FD0;
  v1[4] = v8;
  LODWORD(v5) = sqlite3_column_count(v5);
  sub_23C7DE904();
  v1[9] = (int)v5;
  sub_23C7DB3A0();
}

uint64_t sub_23C7DA9AC()
{
  return swift_release();
}

uint64_t sub_23C7DA9B4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C86FFB4(v1, v0);
}

void sub_23C7DA9C0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23C82D018();
  v3 = v2;
  if (*(_QWORD *)(v2 + 16))
  {
    sub_23C7E670C();
    v4 = v3 + 40;
    do
    {
      sub_23C7ECBBC();
      if (v0 >= v1 >> 1)
        sub_23C7E8DF8();
      v4 += 40;
      sub_23C7DF5E4();
    }
    while (!v5);
  }
  sub_23C82D0C0(v2, &qword_256BCC590, (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C7EF2BC);
  sub_23C7E1768();
}

void sub_23C7DAA40(sqlite3_stmt *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  swift_retain();
  v2 = sqlite3_column_count(a1);
  if ((v2 & 0x80000000) != 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v4 = v2;
    v21 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v5 = 0;
    v6 = v21;
    while (sqlite3_column_name(a1, v5))
    {
      sub_23C910F74();
      v7 = sub_23C910E18();
      v9 = v8;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(v21 + 16);
      if (v10 >= *(_QWORD *)(v21 + 24) >> 1)
        sub_23C7E649C();
      *(_QWORD *)(v21 + 16) = v10 + 1;
      v11 = v21 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      if (v4 == v5)
      {
        __break(1u);
        goto LABEL_19;
      }
      if (v4 == ++v5)
        goto LABEL_11;
    }
    goto LABEL_20;
  }
  v6 = MEMORY[0x24BEE4AF8];
LABEL_11:
  sub_23C7DAC44();
  v12 = v3;
  v13 = *(_QWORD *)(v6 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = 0;
    v15 = (uint64_t *)(v6 + 40);
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      v18 = *(_QWORD *)(v12 + 16);
      v19 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v18 >= v19 >> 1)
        sub_23C7DAC44();
      v15 += 2;
      *(_QWORD *)(v12 + 16) = v18 + 1;
      v20 = (_QWORD *)(v12 + 24 * v18);
      v20[5] = v17;
      v20[6] = v14;
      v20[4] = v16;
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_23C7DAC78(v12);
  swift_release();
}

void sub_23C7DAC44()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEA90();
  *v0 = v1;
}

uint64_t sub_23C7DAC78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E79A8(&qword_25430D800);
    v3 = sub_23C9117E4();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v6 = v3;
  sub_23C7DAD04(a1, 1, &v6);
  v4 = v6;
  if (v1)
    swift_release();
  return v4;
}

uint64_t sub_23C7DAD04(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a1 + 48); ; i += 3)
  {
    v8 = *(i - 2);
    v7 = *(i - 1);
    v9 = *i;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v12 = sub_23C7E94B8();
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14))
      break;
    v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        sub_23C7E79A8(&qword_256BCCA90);
        sub_23C911784();
      }
    }
    else
    {
      sub_23C8F98A0();
      v16 = sub_23C7E94B8();
      if ((v15 & 1) != (v17 & 1))
        goto LABEL_18;
      v12 = v16;
    }
    v18 = (_QWORD *)*a3;
    if ((v15 & 1) != 0)
    {
      v19 = *(_QWORD *)(v18[7] + 8 * v12);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18[7] + 8 * v12) = v19;
    }
    else
    {
      v18[(v12 >> 6) + 8] |= 1 << v12;
      v20 = (_QWORD *)(v18[6] + 16 * v12);
      *v20 = v8;
      v20[1] = v7;
      *(_QWORD *)(v18[7] + 8 * v12) = v9;
      v21 = v18[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_17;
      v18[2] = v23;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

uint64_t sub_23C7DAEB8()
{
  return sub_23C7DAECC();
}

uint64_t sub_23C7DAECC()
{
  sub_23C7DAF10();
  swift_allocError();
  return swift_willThrow();
}

unint64_t sub_23C7DAF10()
{
  unint64_t result;

  result = qword_25430CCF8;
  if (!qword_25430CCF8)
  {
    result = MEMORY[0x242626100](&unk_23C917FF4, &type metadata for JSONRequiredError);
    atomic_store(result, (unint64_t *)&qword_25430CCF8);
  }
  return result;
}

uint64_t destroy for TableRegion()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DAF74(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    swift_retain();
    sub_23C7EBF3C();
    v2 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 1;
    sub_23C7E2830(v2);
    swift_release();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *_s12GRDBInternal3SQLV13stringLiteralACSS_tcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *result;
  __int128 v8;
  _OWORD v9[12];

  sub_23C7E53DC(MEMORY[0x24BEE4AF8], v9);
  v8 = v9[0];
  sub_23C7E79A8(&qword_25430DA08);
  v6 = sub_23C7E41DC();
  *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
  *(_QWORD *)&v9[0] = a1;
  *((_QWORD *)&v9[0] + 1) = a2;
  v9[1] = v8;
  sub_23C7F96B0(v9);
  result = sub_23C7F96E0(v9, (void *)(v6 + 32));
  *a3 = v6;
  return result;
}

uint64_t sub_23C7DB084()
{
  uint64_t v0;

  sub_23C7E5640(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C7DB0B4()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_23C7DB128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E65C0();
  v1 = sub_23C7DF054();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23C7DB1A8()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C7DB1D4(void (*a1)(_QWORD))
{
  uint64_t v1;

  sub_23C7E58A8();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t sub_23C7DB208()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C7DB234()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32) >= 2uLL)
    swift_release();
  return swift_deallocObject();
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C7E5640(v4, v5, v6);
  return a1;
}

uint64_t sub_23C7DB2B8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_23C7DD8FC(v1, a1);
}

void SQLInterpolation.appendInterpolation(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[23];
  __int128 v6;
  uint64_t v7;
  _QWORD v8[4];

  sub_23C7DB5E4(a1, (uint64_t)&v6, &qword_25430CF68);
  if (v7)
  {
    sub_23C7DB5CC(&v6, (uint64_t)v8);
    v2 = sub_23C7E7E34(v8, v8[3]);
    sub_23C8012A8((uint64_t)v2);
    sub_23C7FCC1C(v5);
    sub_23C7E66C0();
    sub_23C7E8FD4();
    sub_23C7E809C(v3);
    sub_23C7EBC08();
  }
  else
  {
    sub_23C7E7900((uint64_t)&v6, &qword_25430CF68);
    sub_23C8013F8();
    v5[2] = MEMORY[0x24BEE4AF8];
    v5[3] = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(v5);
    sub_23C7E66C0();
    sub_23C7E8FD4();
    sub_23C7E809C(v4);
    *v1 = v1;
  }
  sub_23C7EF988();
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[23];
  __int128 v6;
  uint64_t v7;
  _QWORD v8[4];

  sub_23C7DB5E4(a1, (uint64_t)&v6, &qword_256BCBC80);
  if (v7)
  {
    sub_23C7DB5CC(&v6, (uint64_t)v8);
    v2 = sub_23C7E7E34(v8, v8[3]);
    sub_23C8012A8((uint64_t)v2);
    sub_23C7FCBB4(v5);
    sub_23C7E66C0();
    sub_23C7E8FD4();
    sub_23C7E809C(v3);
    sub_23C7EBC08();
  }
  else
  {
    sub_23C7E7900((uint64_t)&v6, &qword_256BCBC80);
    sub_23C8013F8();
    v5[2] = MEMORY[0x24BEE4AF8];
    v5[3] = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(v5);
    sub_23C7E66C0();
    sub_23C7E8FD4();
    sub_23C7E809C(v4);
    *v1 = v1;
  }
  sub_23C7EF988();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[23];

  v2 = *(_QWORD *)(a1 + 24);
  v5[0] = *(_QWORD *)(a1 + 16);
  v5[1] = v2;
  v5[2] = MEMORY[0x24BEE4AF8];
  v5[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v5);
  sub_23C7DF858();
  sub_23C7ECE1C();
  sub_23C7E0734();
  v3 = *v1;
  *(_QWORD *)(v3 + 16) = v2 + 1;
  sub_23C7EC56C(v3 + 184 * v2, v4);
  *v1 = v3;
  sub_23C7E4078();
}

uint64_t sub_23C7DB388()
{
  return swift_allocObject();
}

uint64_t sub_23C7DB398()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DB3AC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  return v2(a2, v3);
}

uint64_t sub_23C7DB3B8()
{
  return swift_bridgeObjectRetain();
}

void sub_23C7DB3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C807E5C(v2, v1, v0);
}

uint64_t sub_23C7DB3D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DB3DC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DB400@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8AC9C4(a1, v2, a2);
}

uint64_t sub_23C7DB420()
{
  return swift_bridgeObjectRetain_n();
}

void sub_23C7DB42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v2;
  v5 = v0 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v4;
}

uint64_t sub_23C7DB440()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7DB464()
{
  return 0;
}

uint64_t sub_23C7DB484()
{
  return swift_release();
}

uint64_t sub_23C7DB48C()
{
  return sub_23C910DAC();
}

uint64_t sub_23C7DB49C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return v1;
}

uint64_t sub_23C7DB4C4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C87207C(v1, v0);
}

uint64_t sub_23C7DB4F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t)@<X8>, __n128 a10@<Q0>)
{
  return a9(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_u64[0], a10.n128_u64[1]);
}

uint64_t sub_23C7DB500()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DB510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 208) = v2;
  *(_QWORD *)(v4 - 200) = v0;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v1;
  return 255;
}

uint64_t sub_23C7DB524()
{
  return sub_23C910F2C();
}

uint64_t sub_23C7DB530(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_23C811F5C((uint64_t)&a30, a2);
}

void sub_23C7DB538()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) = v1 + 1;
}

uint64_t sub_23C7DB550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_23C7E0BF0(&a9);
}

uint64_t sub_23C7DB55C()
{
  uint64_t v0;

  return sub_23C84AB78(v0);
}

uint64_t sub_23C7DB568()
{
  return swift_getAssociatedTypeWitness();
}

void sub_23C7DB578()
{
  sub_23C7E56C8();
}

uint64_t sub_23C7DB590()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7DB5AC()
{
  JUMPOUT(0x242626100);
}

void sub_23C7DB5B4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  sub_23C7E649C();
}

uint64_t sub_23C7DB5CC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_23C7DB5E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23C80133C(a1, a2, a3);
  sub_23C7DA4D4(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_23C7DB390();
}

uint64_t sub_23C7DB610()
{
  _QWORD *v0;

  return sub_23C7DB620(*v0);
}

uint64_t sub_23C7DB618()
{
  double *v0;

  return sub_23C7DB7BC(*v0);
}

uint64_t sub_23C7DB624()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DB62C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DB634()
{
  return swift_retain();
}

uint64_t sub_23C7DB63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

_QWORD *sub_23C7DB660()
{
  _QWORD *v0;

  return sub_23C7E7E34(v0, v0[3]);
}

uint64_t sub_23C7DB670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DE70C(a1, a2, 1, v2);
}

void *sub_23C7DB67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(a3, a2, a3, &a30);
}

uint64_t sub_23C7DB694()
{
  return swift_allocError();
}

unint64_t sub_23C7DB6A0()
{
  return sub_23C832528();
}

uint64_t sub_23C7DB6A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  return sub_23C7E7938((uint64_t)va, a2);
}

void sub_23C7DB6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  *(_QWORD *)(v17 - 200) = v16;
  *(_QWORD *)(v17 - 192) = v15;
  *(_BYTE *)(v17 - 184) = v18;
  *(_QWORD *)(v17 - 176) = v21;
  *(_QWORD *)(v17 - 168) = a11;
  *(_QWORD *)(v17 - 160) = a10;
  *(_QWORD *)(v17 - 152) = v19;
  *(_BYTE *)(v17 - 144) = v20;
  *(_QWORD *)(v17 - 136) = a15;
  *(_QWORD *)(v17 - 128) = a14;
}

uint64_t sub_23C7DB6FC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E56A4(v0, v1, 3);
}

uint64_t sub_23C7DB70C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7DB71C()
{
  return swift_unknownObjectRelease();
}

_QWORD *sub_23C7DB738()
{
  uint64_t v0;

  return sub_23C8A2208((_QWORD *)(v0 - 256));
}

uint64_t sub_23C7DB744()
{
  return sub_23C910E3C();
}

void sub_23C7DB784(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

_QWORD *sub_23C7DB7A8()
{
  _QWORD *(*v0)(unint64_t *__return_ptr);

  return v0(&STACK[0x268]);
}

uint64_t FastDatabaseValueCursor.__deallocating_deinit()
{
  FastDatabaseValueCursor.deinit();
  return swift_deallocClassInstance();
}

uint64_t *initializeWithCopy for SQL.Element(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a2[4];
  v4 = a2[5];
  v5 = a2[6];
  v6 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v7 = a2[8];
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  sub_23C7E523C(*a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  a1[8] = v7;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  return a1;
}

uint64_t sub_23C7DB92C()
{
  return sub_23C7DB948() & 1;
}

uint64_t sub_23C7DB948()
{
  unsigned __int8 v1;

  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

void Collection<>.joined(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[184];
  _QWORD v48[23];

  sub_23C7E4F5C();
  if (v9)
  {
    v10 = v8;
    v11 = v7;
    v12 = sub_23C7E79A8(&qword_25430AF30);
    sub_23C8C6CB8((void (*)(char *, uint64_t))sub_23C8C8078, 0, a3, v12, MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], v13);
    v24 = v11;
    v25 = v10;
    v26 = MEMORY[0x24BEE4AF8];
    v27 = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(&v24);
    v14 = sub_23C7F96E0(&v24, v47);
    sub_23C7E0AC4(v14, v15, v16, v17, v18, v19, v20, v21, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47[0]);
    sub_23C7DBAC4(v48);
    sub_23C7E63CC();
    swift_bridgeObjectRelease();
    sub_23C7E3428();
  }
  else
  {
    sub_23C7E79A8(&qword_25430AF30);
    sub_23C7E127C(&qword_256BCDA18, &qword_25430AF30, MEMORY[0x24BEE12C8]);
    v22 = sub_23C91107C();
  }
  *v4 = v22;
  sub_23C7DB750();
}

void sub_23C7DBAC4(_QWORD *a1)
{
  _QWORD *v1;
  const void *v3;
  uint64_t v4;
  _BYTE v5[184];
  _BYTE v6[184];
  _BYTE v7[184];
  _BYTE v8[184];
  _BYTE v9[184];
  _BYTE v10[184];

  sub_23C7E79A8(&qword_25430DA08);
  v3 = (const void *)sub_23C7DB388();
  sub_23C80137C(v3);
  v1[2] = 1;
  v1[3] = 2 * (v4 / 184);
  sub_23C7F96E0(a1, v8);
  sub_23C7F96E0(v8, v9);
  nullsub_1(v9);
  sub_23C800F98((uint64_t)v10);
  sub_23C800FCC((uint64_t)v9, (uint64_t)v7, &qword_256BCA510);
  sub_23C800FCC((uint64_t)v7, (uint64_t)v6, &qword_256BCA510);
  if (sub_23C800F80((uint64_t)v6) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_23C800FCC((uint64_t)v7, (uint64_t)v5, &qword_256BCA510);
    sub_23C7F96E0(v5, v1 + 4);
    sub_23C8010AC(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
    sub_23C7DB3A0();
  }
}

uint64_t sub_23C7DBBB0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DBBB8()
{
  return swift_bridgeObjectRetain();
}

void sub_23C7DBBC0()
{
  void *v0;

  sub_23C7E2830(v0);
}

uint64_t sub_23C7DBBC8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_23C7DBBD8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_23C8546C8(a1, (uint64_t)va);
}

void sub_23C7DBBE4()
{
  sub_23C7E649C();
}

uint64_t sub_23C7DBBEC()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7DBBFC()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7DBC04()
{
  sub_23C7E56C8();
}

uint64_t sub_23C7DBC30()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7DBC3C()
{
  uint64_t v0;

  return sub_23C7E1E38(v0, 0);
}

uint64_t sub_23C7DBC68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[5];
  v6 = v2[6];
  sub_23C7E7E34(v2 + 2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88))(a1, a2, v5, v6);
}

uint64_t sub_23C7DBCA4()
{
  return sub_23C90A37C();
}

uint64_t sub_23C7DBCC8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DBCD0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DBCD8()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_23C7DBCE0()
{
  return sub_23C9117C0();
}

uint64_t sub_23C7DBCE8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_23C7DBCF0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 208) = 24415;
  *(_QWORD *)(v0 - 200) = 0xE200000000000000;
}

uint64_t sub_23C7DBD08()
{
  uint64_t *v0;

  return sub_23C7E79A8(v0);
}

uint64_t sub_23C7DBD10()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C800AA4(v4, v3, v2, v0, v1);
}

uint64_t sub_23C7DBD40()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DBD4C()
{
  uint64_t v0;

  return v0;
}

void sub_23C7DBD5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_23C7E7900((uint64_t)va, a2);
}

uint64_t sub_23C7DBD64(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C7DBD6C()
{
  unint64_t v0;
  uint64_t v1;
  char v2;

  return sub_23C7E5640(v1, v0, v2);
}

void sub_23C7DBD7C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

unint64_t sub_23C7DBD8C()
{
  return 0xD000000000000016;
}

uint64_t sub_23C7DBDA8()
{
  return swift_unexpectedError();
}

void sub_23C7DBDBC()
{
  sub_23C7E649C();
}

void sub_23C7DBDCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(a2 + 16))
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v3; ++i)
      {
        v12 = swift_bridgeObjectRetain();
        sub_23C8C7944(v12);
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (!v3)
    goto LABEL_15;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_23C8C7944(v4);
  v5 = v3 - 1;
  if (v3 == 1)
  {
LABEL_10:
    swift_bridgeObjectRelease_n();
    swift_release();
    return;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >= 2 && v3 <= v6)
  {
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      v9 = *v8++;
      swift_bridgeObjectRetain();
      v10 = swift_retain();
      sub_23C8C7C94(v10);
      sub_23C8C7944(v9);
      --v5;
    }
    while (v5);
    goto LABEL_10;
  }
  __break(1u);
}

void sub_23C7DBF00()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FDF80();
  *v0 = v1;
}

void static DatabaseValueConvertible.fetchOne(_:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26[2];
  uint64_t v27[9];

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v27[0] = v11;
  v12 = sub_23C7E776C();
  v13 = sub_23C7EF968();
  v23 = *(_QWORD *)(v13 - 8);
  v24 = v13;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v22 - v15;
  v17 = *v8;
  v18 = v8[1];
  v20 = type metadata accessor for NullableDatabaseValueCursor(0, v4, v2, v19);
  v26[0] = v17;
  v26[1] = v18;
  sub_23C7DF56C(v6, (uint64_t)v25);
  sub_23C7DF5CC();
  sub_23C7E76BC(v17);
  sub_23C7DC0A0(v10, v26, (uint64_t)v25);
  if (!v0)
  {
    v21 = MEMORY[0x242626100](&protocol conformance descriptor for NullableDatabaseValueCursor<A>, v20);
    DatabaseCursor.next()(v20, v21, (uint64_t)v16);
    swift_release();
    if (sub_23C7DE718((uint64_t)v16, 1, v12) == 1)
    {
      sub_23C7DE70C(v27[0], 1, 1, v4);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v27[0], v16, v12);
    }
  }
  sub_23C7DEF28();
}

uint64_t type metadata accessor for NullableDatabaseValueCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NullableDatabaseValueCursor);
}

uint64_t sub_23C7DC0A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_23C7DC104(a1, a2, a3);
  return v6;
}

uint64_t sub_23C7DC104(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v3;
  v8 = *v3;
  v10 = *a2;
  v9 = a2[1];
  *((_BYTE *)v5 + 24) = 0;
  v5[2] = a1;
  sub_23C7DF56C(a3, (uint64_t)&v17);
  if (!v18)
  {
    swift_retain();
    sub_23C7E7938((uint64_t)&v17, &qword_25430DBD0);
    *((_DWORD *)v5 + 7) = 0;
    goto LABEL_8;
  }
  v23 = v8;
  sub_23C7DB5CC(&v17, (uint64_t)v20);
  v11 = v21;
  v12 = v22;
  sub_23C7E7E34(v20, v21);
  v18 = type metadata accessor for Statement();
  v19 = &protocol witness table for Statement;
  *(_QWORD *)&v17 = a1;
  swift_retain_n();
  v13 = sub_23C842CFC(0, (uint64_t)&v17, v11, v12);
  if (v4)
  {
    sub_23C7DFA7C();
    swift_release();
    sub_23C7E7938(a3, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v17);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
    swift_release();
    swift_deallocPartialClassInstance();
    return (uint64_t)v5;
  }
  v15 = (uint64_t)v13;
  result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v17);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v15 <= 0x7FFFFFFF)
  {
    *((_DWORD *)v5 + 7) = v15;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
LABEL_8:
    v20[0] = v10;
    v20[1] = v9;
    sub_23C7E1D24(v20, v14);
    swift_release();
    sub_23C7E7938(a3, &qword_25430DBD0);
    sub_23C7DFA7C();
    if (v4)
      swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

void static DatabaseValueConvertible<>.fetchOne(_:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v22[2];
  uint64_t v23[9];

  sub_23C7DEF5C();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_23C832838();
  v23[0] = v11;
  v20 = sub_23C9114E4();
  v12 = sub_23C9114E4();
  v18 = *(_QWORD *)(v12 - 8);
  v19 = v12;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7E20B4();
  v15 = *v3;
  v14 = v3[1];
  v16 = type metadata accessor for FastNullableDatabaseValueCursor(0, v10, v8, v6);
  v22[0] = v15;
  v22[1] = v14;
  sub_23C7DF56C(v2, (uint64_t)v21);
  swift_retain();
  sub_23C7E76BC(v15);
  sub_23C7DC6C8(v0, v22, (uint64_t)v21);
  if (!v1)
  {
    v17 = MEMORY[0x242626100](&protocol conformance descriptor for FastNullableDatabaseValueCursor<A>, v16);
    DatabaseCursor.next()(v16, v17, v4);
    swift_release();
    if (sub_23C7DE718(v4, 1, v20) == 1)
    {
      sub_23C7DE70C(v23[0], 1, 1, v10);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v4, v19);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v23[0], v4, v20);
    }
  }
  sub_23C7DEF28();
}

uint64_t sub_23C7DC43C()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v1, v2);
}

void sub_23C7DC44C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_23C7DC46C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DC474()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DC47C()
{
  return swift_retain();
}

uint64_t sub_23C7DC4C4()
{
  return swift_release();
}

uint64_t sub_23C7DC4F0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return RangeReplaceableCollection.init<A>(_:)(v3, (uint64_t)va);
}

uint64_t sub_23C7DC514()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DC51C@<X0>(uint64_t *__src@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_23C87F40C(__src, a2, a3);
}

unint64_t sub_23C7DC528()
{
  return sub_23C7E94B8();
}

uint64_t sub_23C7DC538()
{
  uint64_t v0;
  uint64_t v1;

  return static Row.== infix(_:_:)(v0, v1);
}

uint64_t sub_23C7DC544(uint64_t a1)
{
  uint64_t v1;

  sub_23C8634D8(a1, v1, 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DC574(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_23C8746E0(a1);
  return sub_23C7E56A4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t sub_23C7DC590()
{
  return swift_retain();
}

uint64_t sub_23C7DC5B0(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C7DC5D0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_23C7DC5E0()
{
  return swift_getAssociatedTypeWitness();
}

_QWORD *sub_23C7DC5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return sub_23C8A2208(&a31);
}

uint64_t sub_23C7DC5F8()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0;
  return swift_initStackObject();
}

uint64_t sub_23C7DC604()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_23C7E7E34(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

void sub_23C7DC638()
{
  sub_23C7F1678();
}

uint64_t sub_23C7DC654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  return v10(a1, &a9, v9, v12, v11);
}

uint64_t sub_23C7DC67C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7DC694(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7DC6B0()
{
  return sub_23C910F5C();
}

uint64_t type metadata accessor for FastNullableDatabaseValueCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FastNullableDatabaseValueCursor);
}

uint64_t sub_23C7DC6C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_23C7DC72C(a1, a2, a3);
  return v6;
}

uint64_t sub_23C7DC72C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v3;
  v8 = *v3;
  v10 = *a2;
  v9 = a2[1];
  *((_BYTE *)v5 + 24) = 0;
  v5[2] = a1;
  sub_23C7DF56C(a3, (uint64_t)&v17);
  if (!v18)
  {
    swift_retain();
    sub_23C7E7938((uint64_t)&v17, &qword_25430DBD0);
    *((_DWORD *)v5 + 7) = 0;
    goto LABEL_8;
  }
  v23 = v8;
  sub_23C7DB5CC(&v17, (uint64_t)v20);
  v11 = v21;
  v12 = v22;
  sub_23C7E7E34(v20, v21);
  v18 = type metadata accessor for Statement();
  v19 = &protocol witness table for Statement;
  *(_QWORD *)&v17 = a1;
  swift_retain_n();
  v13 = sub_23C842CFC(0, (uint64_t)&v17, v11, v12);
  if (v4)
  {
    sub_23C7DFA7C();
    sub_23C7E6BFC();
    sub_23C7E7938(a3, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v17);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
    swift_release();
    swift_deallocPartialClassInstance();
    return (uint64_t)v5;
  }
  v15 = (uint64_t)v13;
  result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v17);
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v15 <= 0x7FFFFFFF)
  {
    *((_DWORD *)v5 + 7) = v15;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
LABEL_8:
    v20[0] = v10;
    v20[1] = v9;
    sub_23C7E1D24(v20, v14);
    sub_23C7E6BFC();
    sub_23C7E7938(a3, &qword_25430DBD0);
    sub_23C7DFA7C();
    if (v4)
      swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C7DC8F0()
{
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  return swift_deallocClassInstance();
}

uint64_t SQLStatementCursor.__deallocating_deinit()
{
  SQLStatementCursor.deinit();
  return swift_deallocClassInstance();
}

uint64_t SQLStatementCursor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_23C7E13C4(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_23C7DC96C(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;

  swift_retain();
  sub_23C7DC9DC(a2, a3, a4);
  v8 = v7;
  swift_release();
  return v8;
}

void sub_23C7DC9DC(int a1, uint64_t a2, char *__s1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = v3;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 24:
    case 25:
    case 26:
    case 29:
      goto LABEL_3;
    case 9:
      if ((*(_BYTE *)(v3 + 65) & 1) == 0)
      {
        if (a2)
        {
          v6 = sub_23C7E82CC(0, "sqlite_master");
          if ((_DWORD)v6)
          {
            if (sub_23C7E82CC(v6, "sqlite_temp_master"))
            {
              v7 = sub_23C7E4D78();
              v9 = v8;
              swift_bridgeObjectRetain();
              sub_23C7F135C();
              sub_23C7E0954();
              sub_23C7E89B0();
              *(_BYTE *)(v10 + 56) = 1;
              swift_unownedRetainStrong();
              sub_23C7E23F4();
              swift_release();
              sub_23C8063BC(v7, v9);
              swift_release();
              sub_23C7DB62C();
            }
          }
        }
      }
      return;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 30:
      *(_BYTE *)(v3 + 65) = 1;
LABEL_3:
      *(_BYTE *)(v3 + 40) = 1;
      return;
    case 18:
      if (a2)
      {
        sub_23C7E4D78();
        sub_23C7F135C();
        sub_23C7E0954();
        sub_23C7E89B0();
        *(_BYTE *)(v11 + 56) = 0;
      }
      return;
    case 20:
      if (!a2)
        return;
      v12 = sub_23C7E4D78();
      v14 = v13;
      if (__s1)
      {
        v15 = v12;
        v16 = sub_23C7E6288();
        v18 = v17;
        v19 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000) == 0)
          v19 = v16 & 0xFFFFFFFFFFFFLL;
        if (v19)
        {
          v20 = v16;
          sub_23C7E79A8(&qword_25430DA10);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_23C912A20;
          *(_QWORD *)(inited + 32) = v20;
          *(_QWORD *)(inited + 40) = v18;
          v22 = sub_23C874528(inited);
          sub_23C865B78(v15, v14, v22, &v51);
          v23 = v51;
          sub_23C7E425C();
          v24 = *(_QWORD *)(v4 + 24);
          v48 = v23;
          v49 = v24;
          DatabaseRegion.union(_:)(&v48, &v50);
          sub_23C7DB62C();
          v25 = v50;
        }
        else
        {
          sub_23C7DB62C();
          v42 = sub_23C910E18();
          v44 = v43;
          sub_23C7E79A8(&qword_25430DBF0);
          v45 = swift_initStackObject();
          *(_OWORD *)(v45 + 16) = xmmword_23C912A20;
          *(_QWORD *)(v45 + 32) = v42;
          *(_QWORD *)(v45 + 40) = v44;
          *(_QWORD *)(v45 + 48) = v15;
          *(_QWORD *)(v45 + 56) = v14;
          sub_23C7E3084();
          *(_QWORD *)(v45 + 64) = 0;
          *(_QWORD *)(v45 + 72) = 0;
          v46 = sub_23C910DAC();
          sub_23C7E425C();
          v47 = *(_QWORD *)(v4 + 24);
          v49 = v46;
          v50 = v47;
          DatabaseRegion.union(_:)(&v49, &v51);
          sub_23C7DB62C();
          v25 = v51;
        }
        *(_QWORD *)(v4 + 24) = v25;
        swift_endAccess();
      }
      goto LABEL_41;
    case 22:
      if (!a2)
        return;
      v26 = sub_23C7E82CC(0, "BEGIN");
      if ((_DWORD)v26)
      {
        v27 = sub_23C7E82CC(v26, "COMMIT");
        if ((_DWORD)v27)
        {
          if (sub_23C7E82CC(v27, "ROLLBACK"))
            return;
          v28 = *(_QWORD *)(v3 + 48);
          v29 = *(_QWORD *)(v3 + 56);
          v30 = xmmword_23C9158A0;
        }
        else
        {
          v28 = *(_QWORD *)(v3 + 48);
          v29 = *(_QWORD *)(v3 + 56);
          v30 = xmmword_23C914530;
        }
        *(_OWORD *)(v3 + 48) = v30;
      }
      else
      {
        v28 = *(_QWORD *)(v3 + 48);
        v29 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)(v3 + 48) = 0;
        *(_QWORD *)(v3 + 56) = 0;
      }
      v40 = *(_BYTE *)(v3 + 64);
      v41 = 3;
      goto LABEL_45;
    case 23:
      if (!a2)
        return;
      v31 = sub_23C7E4D78();
      v33 = v32;
      if (__s1)
      {
        v34 = v31;
        v35 = sub_23C7E6288();
        sub_23C8471E8(v34, v33, v35, v36);
        sub_23C7DB62C();
      }
      goto LABEL_41;
    case 31:
      if (!__s1)
        return;
      if (!strcmp(__s1, "sqlite_drop_column"))
        *(_BYTE *)(v3 + 40) = 1;
      if (sqlite3_libversion_number() > 3018999 || sqlite3_stricmp(__s1, "COUNT"))
        return;
      sub_23C7E9898();
      *(_QWORD *)(v3 + 24) = 0;
      goto LABEL_41;
    case 32:
      if (!a2 || !__s1)
        return;
      v37 = sub_23C7E6288();
      v38 = sub_23C7E82CC(v37, "BEGIN");
      if ((_DWORD)v38)
      {
        v39 = sub_23C7E82CC(v38, "RELEASE");
        if ((_DWORD)v39)
        {
          if (sub_23C7E82CC(v39, "ROLLBACK"))
          {
LABEL_41:
            swift_bridgeObjectRelease();
            return;
          }
          v28 = sub_23C7E329C();
          v41 = 2;
        }
        else
        {
          v28 = sub_23C7E329C();
          v41 = 1;
        }
LABEL_45:
        *(_BYTE *)(v3 + 64) = v41;
      }
      else
      {
        v28 = sub_23C7E329C();
        *(_BYTE *)(v3 + 64) = 0;
      }
      sub_23C7E2E54(v28, v29, v40);
      return;
    default:
      return;
  }
}

uint64_t sub_23C7DCE04()
{
  uint64_t v0;

  return sub_23C7DCE20(*(void (**)(uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23C7DCE20(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_beginAccess();
  v6 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  a1(&v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DCEAC(unint64_t *a1)
{
  uint64_t v1;

  return sub_23C7DCEC4(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_23C7DCEC4(unint64_t *a1, void (*a2)(uint64_t))
{
  return sub_23C7DCEDC(*a1, a2);
}

uint64_t sub_23C7DCEDC(unint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_13;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_23C9117C0())
  {
    for (i = 4; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x242625290](i - 4, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * i);
        swift_retain();
      }
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      a2(v7 + 16);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      swift_release();
      if (v8 == v5)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DCFEC(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7DD004(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_23C7DD004(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = swift_retain();
  MEMORY[0x242624CE4](v3);
  sub_23C7DD090(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFF8) + 0x10));
  sub_23C911148();
  return sub_23C9110DC();
}

uint64_t sub_23C7DD064(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return sub_23C91110C();
  return result;
}

void sub_23C7DD094()
{
  uint64_t v0;
  void (*v1)(uint64_t);

  v0 = sub_23C7E1C80();
  sub_23C8A5C90(v0, v1);
}

sqlite3 *Database.isInsideTransaction.getter()
{
  uint64_t v0;
  sqlite3 *result;

  sub_23C7DA548();
  if ((sub_23C7E5FAC() & 1) != 0)
  {
    sub_23C7E07C4();
    result = *(sqlite3 **)(v0 + 16);
    if (result)
      return (sqlite3 *)(sqlite3_get_autocommit(result) == 0);
  }
  else
  {
    sub_23C7DC484();
    result = (sqlite3 *)sub_23C7E947C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C7DD128()
{
  return swift_arrayInitWithCopy();
}

void *sub_23C7DD174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  return sub_23C7F96E0(&a37, v37);
}

uint64_t sub_23C7DD180(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_23C7DD194()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DD19C()
{
  return sub_23C85BE98();
}

unint64_t sub_23C7DD1B4()
{
  return sub_23C7E94B8();
}

__n128 sub_23C7DD1BC()
{
  __n128 *v0;

  return v0[4];
}

void sub_23C7DD1E0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_23C8A6F6C(v0, v1, v2);
}

uint64_t sub_23C7DD1F4()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C7DD1FC()
{
  return sub_23C9117D8();
}

uint64_t sub_23C7DD208()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DD210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E1118();
  return sub_23C7DD228(v0, v1, v2, v3, v4);
}

uint64_t sub_23C7DD228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD v6[6];

  v6[5] = a3;
  v6[2] = a4;
  v6[3] = a1;
  v6[4] = a2;
  return sub_23C7DE574(0, (uint64_t)sub_23C7DF190, (uint64_t)v6, a4, a5);
}

uint64_t sub_23C7DD268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C7DD288(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_23C7DD288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v29 = a6;
  v28 = a7;
  v12 = sub_23C9114E4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v27 - v17;
  sub_23C7DE70C((uint64_t)&v27 - v17, 1, 1, a5);
  v39 = 3;
  v32 = a4;
  v33 = a5;
  v19 = v30;
  v34 = v29;
  v35 = v18;
  v36 = a2;
  v37 = a3;
  v38 = a1;
  Database.inTransaction(_:_:)(&v39, sub_23C7DD4E8, (uint64_t)v31, v20, v21, v22, v23, v24);
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  result = sub_23C7DE718((uint64_t)v16, 1, a5);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v25, v16, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  __break(1u);
  return result;
}

void Database.inTransaction(_:_:)(char *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C8EF34C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v16, v17, SWORD2(v17), SBYTE6(v17), SHIBYTE(v17));
  if (!v9)
  {
    v11 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v12 = *(_BYTE *)(v8 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if ((a2() & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      sub_23C8EF3A8();
      *(_BYTE *)(v8 + v11) = v12;
      Database.commit()();
      if (!v13)
        goto LABEL_13;
      v14 = v13;
    }
    Database.rollback()();
    if (v15)
    {
      if (v14)
        sub_23C8EF254();
      else
        sub_23C8EF514();
      goto LABEL_12;
    }
    if (v14)
    {
LABEL_12:
      sub_23C8EF55C();
      sub_23C8EF2A8();
      sub_23C8EF254();
    }
LABEL_13:
    *(_BYTE *)(v8 + v11) = v12;
  }
}

uint64_t sub_23C7DD4E8()
{
  return sub_23C7DD4FC();
}

uint64_t sub_23C7DD4FC()
{
  uint64_t v0;

  return sub_23C7DD520(*(_QWORD *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C7DD520(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v11 = sub_23C9114E4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v16 - v13;
  a2(a4);
  if (!v6)
  {
    sub_23C7DE70C((uint64_t)v14, 0, 1, a6);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(a1, v14, v11);
  }
  return 0;
}

uint64_t sub_23C7DD5F8()
{
  sub_23C7DD618();
  return swift_deallocClassInstance();
}

uint64_t sub_23C7DD618()
{
  uint64_t v0;

  sub_23C7DD64C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23C7DD64C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_release();
  if ((a2 & 0x8000000000000000) == 0)
    return swift_release();
  return result;
}

uint64_t sub_23C7DD680()
{
  uint64_t v0;

  return sub_23C7DD69C(*(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23C7DD69C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 88);
  swift_beginAccess();
  a1(v4);
  return swift_endAccess();
}

uint64_t sub_23C7DD71C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;

  return sub_23C7DD734(a1, v2, a2);
}

uint64_t sub_23C7DD734@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a3;
  v5 = *(_QWORD *)(*a2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)MEMORY[0x24BDAC7A8](v7);
  v21 = (char *)&v19 - v10;
  v11 = *v20;
  v23 = v5;
  v24 = v11;
  swift_getKeyPath();
  type metadata accessor for Pool.Item(255, v5, v12, v13);
  v14 = sub_23C91119C();
  swift_bridgeObjectRetain();
  MEMORY[0x242626100](MEMORY[0x24BEE12C8], v14);
  sub_23C911064();
  swift_release();
  result = swift_bridgeObjectRelease();
  v16 = v25;
  if (v25)
  {
    *(_BYTE *)(v25 + *(_QWORD *)(*(_QWORD *)v25 + 96)) = 0;
LABEL_3:
    *v22 = v16;
    return result;
  }
  v17 = (uint64_t (*)(uint64_t))a2[2];
  v18 = v21;
  result = v17(result);
  if (!v3)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v18, v5);
    v16 = sub_23C8D4DA4((uint64_t)v9, 0);
    v25 = v16;
    swift_retain();
    sub_23C91116C();
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v18, v5);
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_23C7DD8FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void (**v16)();
  uint64_t v17;
  uint64_t v18;
  void (**v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(*a1 + 80);
  sub_23C7DDB10(qword_25430D568);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (char *)&v21 - v7;
  sub_23C911490();
  v9 = a1[6];
  dispatch_group_enter(v9);
  sub_23C7DC47C();
  v12 = type metadata accessor for Pool.Item(0, v5, v10, v11);
  sub_23C7E7794((uint64_t)sub_23C7DD71C, (uint64_t)a1, v12, (uint64_t)&v23);
  swift_release();
  if (v2)
  {
    sub_23C91149C();
    dispatch_group_leave(v9);
    return swift_willThrow();
  }
  else
  {
    v14 = v23;
    v22 = v14 + *(_QWORD *)(*(_QWORD *)v14 + 88);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = (void (**)())&v8[*(int *)(TupleTypeMetadata2 + 48)];
    v17 = a2;
    v18 = *(_QWORD *)(v5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v8, v22, v5);
    *v16 = sub_23C7DE330;
    v16[1] = (void (*)())v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v17, v8, v5);
    v19 = (void (**)())(v17 + *(int *)(TupleTypeMetadata2 + 48));
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_23C7DE330;
    *(_QWORD *)(v20 + 24) = v15;
    *v19 = sub_23C7DE2F0;
    v19[1] = (void (*)())v20;
    return swift_retain();
  }
}

uint64_t sub_23C7DDAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24262607C](a1, v6, a5);
}

uint64_t type metadata accessor for Pool.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Pool.Item);
}

uint64_t sub_23C7DDB10(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426260F4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_23C7DDB54()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96)) = 1;
}

void DatabasePool.writeWithoutTransaction<A>(_:)()
{
  sub_23C7DDEE4();
  sub_23C7DE9A8();
}

void DatabasePool.read<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_23C7E4F90(a1);
  v3 = swift_release();
  if (v2)
  {
    sub_23C7DC648();
    sub_23C7DC484();
    sub_23C7E9418();
    sub_23C7E5F48();
  }
  if (*(_QWORD *)(v1 + 24))
  {
    MEMORY[0x24BDAC7A8](v3);
    sub_23C7E454C();
    sub_23C7E1C6C((uint64_t (*)(char *))sub_23C7DDE90);
    sub_23C7E9C34();
  }
  else
  {
    sub_23C7EF5D4();
    v4 = sub_23C7DB694();
    sub_23C7E8C64(v4, v5);
    sub_23C7E86DC(v6, v7);
  }
  sub_23C7E4BEC();
}

void sub_23C7DDC58(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)();
  void (*v12)();
  uint64_t v13;
  _QWORD v14[2];
  uint64_t (*v15)(char *);

  v14[1] = a2;
  v15 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v14 - v9;
  v11 = sub_23C7DDD4C(v8);
  if (!v3)
  {
    v12 = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
    v13 = v15(v10);
    ((void (*)(uint64_t))v12)(v13);
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  sub_23C7DEF28();
}

void (*sub_23C7DDD4C(char *a1))()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*result)();
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  sub_23C7DDB10(qword_25430D568);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  result = (void (*)())sub_23C911460();
  if (!v2)
  {
    v12 = *(int *)(TupleTypeMetadata2 + 48);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
    v13(v8, v10, v4);
    *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)&v10[v12];
    v13(a1, v8, v4);
    return sub_23C7DE2F0;
  }
  return result;
}

void sub_23C7DDE90()
{
  sub_23C7E1118();
  sub_23C7DDEB0();
}

void sub_23C7DDEB0()
{
  sub_23C7DDEE4();
  sub_23C7E8904();
}

void sub_23C7DDEE4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7DEF5C();
  sub_23C7E40EC();
  if (!sub_23C7E3188())
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E9A18();
    goto LABEL_5;
  }
  v1 = sub_23C7E5C18(*(_QWORD *)(v0 + 16));
  if ((v1 & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v1);
    sub_23C7E9A18();
    swift_release();
LABEL_5:
    sub_23C7DEF28();
    return;
  }
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C7DE024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  if (!*(_QWORD *)(v1 + 24))
    return 0;
  v7 = MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](a1);
  swift_retain();
  sub_23C7DE22C();
  if (v7 >> 62)
    goto LABEL_21;
  v2 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (v2)
  {
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v3 = MEMORY[0x242625290](0, v7);
      }
      else
      {
        v3 = *(_QWORD *)(v7 + 32);
        swift_retain();
      }
      if ((sub_23C7DE1E0() & 1) != 0)
        break;
      swift_release();
      if (v2 != 1)
      {
        v4 = 5;
        while (1)
        {
          if ((v7 & 0xC000000000000001) != 0)
          {
            v3 = MEMORY[0x242625290](v4 - 4, v7);
          }
          else
          {
            v3 = *(_QWORD *)(v7 + 8 * v4);
            swift_retain();
          }
          v5 = v4 - 3;
          if (__OFADD__(v4 - 4, 1))
            break;
          if ((sub_23C7DE1E0() & 1) != 0)
            goto LABEL_7;
          swift_release();
          ++v4;
          if (v5 == v2)
            goto LABEL_17;
        }
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain_n();
        v2 = sub_23C9117C0();
        if (v2)
          continue;
      }
      goto LABEL_17;
    }
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t sub_23C7DE1E0()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  type metadata accessor for SchedulingWatchdog();
  result = sub_23C7E2FE0();
  if (result)
  {
    v2 = sub_23C7E5C18(*(_QWORD *)(v0 + 16));
    swift_release();
    return v2 & 1;
  }
  return result;
}

uint64_t sub_23C7DE22C()
{
  swift_retain();
  sub_23C7DE27C();
  return swift_release();
}

void sub_23C7DE27C()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 24);
  sub_23C911460();

}

void sub_23C7DE2F0()
{
  uint64_t v0;

  sub_23C7DE314(*(void (**)(void))(v0 + 16));
}

void sub_23C7DE2F8()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_23C7DB390();
}

void sub_23C7DE314(void (*a1)(void))
{
  a1();
  sub_23C7DB390();
}

void sub_23C7DE330()
{
  uint64_t v0;

  sub_23C7DE354(*(_QWORD *)(v0 + 24));
}

void sub_23C7DE354(uint64_t a1)
{
  uint64_t v1;

  sub_23C7DC47C();
  sub_23C7E7794((uint64_t)sub_23C7DDB54, a1, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4AE0]);
  swift_release();
  sub_23C91149C();
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 48));
}

void DatabaseCursor.next()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;

  v7 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_23C9114E4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(a1, v7) & 1) != 0)
  {
    v12 = a3;
    v13 = 1;
    v14 = AssociatedTypeWitness;
LABEL_9:
    sub_23C7DE70C(v12, v13, 1, v14);
    goto LABEL_10;
  }
  v19 = v9;
  v20 = v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v15 = sub_23C7ED8E0(v3, a1, a2);
  v16 = AssociatedTypeWitness;
  v17 = v22;
  Statement.step<A>(_:)((uint64_t (*)(sqlite3_stmt *))v15, AssociatedTypeWitness, (uint64_t)v11);
  if (!v17)
  {
    v22 = 0;
    sub_23C7DFA18();
    sub_23C7DFE08();
    if (sub_23C7DE718((uint64_t)v11, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(1, a1, v7);
      v12 = a3;
      v13 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a3, v11, v16);
      v12 = a3;
      v13 = 0;
    }
    v14 = v16;
    goto LABEL_9;
  }
  swift_release();
  sub_23C7DFE08();
LABEL_10:
  sub_23C7DEF28();
}

uint64_t sub_23C7DE574@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a5;
  v21 = a3;
  v9 = sub_23C7E2560();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v20 - v14;
  v16 = sub_23C7DF37C((uint64_t)&v20 - v14, 1);
  MEMORY[0x24BDAC7A8](v16);
  if ((a1 & 1) != 0)
  {
    *(&v20 - 6) = a4;
    *(&v20 - 5) = v5;
    *(&v20 - 4) = (uint64_t)v15;
    *(&v20 - 3) = a2;
    *(&v20 - 2) = v21;
    v17 = v22;
    sub_23C8EAA84((void (*)(uint64_t *__return_ptr, uint64_t))sub_23C8EE9F0);
  }
  else
  {
    *(&v20 - 4) = a4;
    *(&v20 - 3) = (uint64_t)v15;
    v18 = v21;
    *(&v20 - 2) = a2;
    *(&v20 - 1) = v18;
    v17 = v22;
    Database.inSavepoint(_:)(sub_23C7DF0C0);
  }
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  result = sub_23C7DE718((uint64_t)v13, 1, a4);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v20, v13, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

uint64_t sub_23C7DE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23C7DE718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

#error "23C7DE7CC: call analysis failed (funcsize=102)"

uint64_t sub_23C7DE904()
{
  return swift_release();
}

void *sub_23C7DE924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a1, a2, &a30);
}

uint64_t sub_23C7DE934()
{
  return swift_bridgeObjectRelease();
}

void *sub_23C7DE93C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t sub_23C7DE984()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C7DE994()
{
  return swift_allocObject();
}

uint64_t sub_23C7DE9A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_23C7E7938((uint64_t)va, a2);
}

uint64_t sub_23C7DE9B0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23C7DE9B8(uint64_t result)
{
  return sub_23C800ADC(result);
}

uint64_t sub_23C7DE9D4()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DE9DC()
{
  return swift_retain();
}

_QWORD *sub_23C7DE9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(a8 + 32))((uint64_t *)va, a1, 0, a4, a8);
}

uint64_t sub_23C7DEA30()
{
  return sub_23C911634();
}

_QWORD *sub_23C7DEA44(_QWORD *a1)
{
  uint64_t v1;

  return sub_23C7E7E34(a1, v1);
}

uint64_t sub_23C7DEA4C(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 144), v3, a3);
}

uint64_t sub_23C7DEA64(uint64_t a1, uint64_t a2)
{
  return sub_23C8634E8(a1, a2, 1);
}

uint64_t sub_23C7DEA6C()
{
  return 0;
}

_QWORD *sub_23C7DEA80(_QWORD *a1)
{
  return sub_23C7E7E34(a1, a1[3]);
}

uint64_t sub_23C7DEAA4(uint64_t a1)
{
  uint64_t v1;

  return AssociationAggregate.forKey(_:)(a1, v1);
}

id sub_23C7DEABC(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  return sub_23C888520(a1, a2, a3);
}

uint64_t _s12GRDBInternal12TableRequestP7aliasedyxAA0B5AliasCFTj_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_23C7DEACC()
{
  return sub_23C911C70();
}

uint64_t sub_23C7DEAD8()
{
  return sub_23C9113D0();
}

uint64_t sub_23C7DEAE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7DEAF0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DEB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_23C812C40((uint64_t)va);
}

uint64_t sub_23C7DEB08()
{
  uint64_t v0;

  return v0;
}

void sub_23C7DEB3C(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association._including(required:)(a1, a2, a3);
}

uint64_t sub_23C7DEB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C8EDB40(v0, v1, v2, v4, v3);
  return sub_23C8EDB40(v0, v1, v2, v4, v3);
}

void *sub_23C7DEB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a4, &a30);
}

uint64_t sub_23C7DEB90()
{
  return sub_23C910F5C();
}

void sub_23C7DEBA0(char *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;

  v14 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v14);
  if (!v5)
  {
    v6 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    v7 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if ((a3() & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      sub_23C7E2414();
      *(_BYTE *)(a2 + v6) = v7;
      Database.commit()();
      if (!v8)
        goto LABEL_13;
      v9 = v8;
    }
    Database.rollback()();
    v11 = v10;
    if (v10)
    {
      if (!v9)
      {
        v12 = v10;
        goto LABEL_12;
      }

LABEL_10:
      v11 = v9;
LABEL_12:
      v13 = v9;
      swift_willThrow();

      goto LABEL_13;
    }
    if (v9)
      goto LABEL_10;
LABEL_13:
    *(_BYTE *)(a2 + v6) = v7;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.commit()()
{
  Swift::String v0;
  GRDBInternal::StatementArguments v1;

  sub_23C8EF3B8();
  v0._countAndFlagsBits = 0xD000000000000012;
  Database.execute(sql:arguments:)(v0, v1);
  sub_23C7DB62C();
  swift_bridgeObjectRelease();
  sub_23C7DF2C8();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.beginTransaction(_:)(GRDBInternal::Database::TransactionKind_optional a1)
{
  Swift::String v1;
  GRDBInternal::StatementArguments v2;

  sub_23C8EF400();
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  sub_23C7DB398();
  sub_23C910F5C();
  sub_23C8EF47C();
  Database.execute(sql:arguments:)(v1, v2);
  sub_23C7DB398();
  swift_bridgeObjectRelease();
  sub_23C7DB3DC();
}

uint64_t sub_23C7DEF00()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DEF08()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_23C8086A0(v1, v2, v3, v0);
}

uint64_t sub_23C7DEF40()
{
  return 0;
}

uint64_t sub_23C7DEF54(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

double sub_23C7DEF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  return sub_23C8291CC((uint64_t)&a34);
}

uint64_t sub_23C7DEFA8()
{
  return sub_23C910E3C();
}

uint64_t sub_23C7DEFD4()
{
  return 0x73733A6D6D3A4848;
}

void *sub_23C7DEFE8()
{
  return malloc(0x28uLL);
}

uint64_t sub_23C7DEFFC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DF00C()
{
  return swift_deallocObject();
}

void sub_23C7DF014()
{
  sub_23C8738C4((__n128 *)&STACK[0x6C0]);
}

uint64_t sub_23C7DF01C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_23C7E5640(a1, a2, a3);
  sub_23C7E5640(v3, v4, 1);
  return sub_23C7E5640(v3, v4, 1);
}

void *sub_23C7DF048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  return sub_23C800B48(&a50, (void *)(v50 - 256));
}

uint64_t sub_23C7DF054()
{
  return swift_getAssociatedTypeWitness();
}

void sub_23C7DF05C()
{
  sub_23C86E598();
}

uint64_t sub_23C7DF06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  return sub_23C8011F0((uint64_t)&a60);
}

uint64_t sub_23C7DF074()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DF084()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DF090()
{
  return swift_allocObject();
}

uint64_t sub_23C7DF09C()
{
  return swift_allocObject();
}

uint64_t sub_23C7DF0A8()
{
  return sub_23C910920();
}

uint64_t sub_23C7DF0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23C903C90(v0, v1, v2);
}

uint64_t sub_23C7DF0C0()
{
  uint64_t v0;

  return sub_23C7DF0DC(*(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_23C7DF0DC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = sub_23C7E2560();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v11 - v8;
  a2(v7);
  if (!v2)
  {
    sub_23C7DF37C((uint64_t)v9, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(a1, v9, v5);
  }
  return 0;
}

void sub_23C7DF190()
{
  uint64_t v0;

  sub_23C7DF1AC(*(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

void sub_23C7DF1AC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;

  sub_23C7DF1EC();
  if (!v2)
    a2(a1);
  sub_23C7DEF1C();
}

void sub_23C7DF1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[6];

  sub_23C7EE11C();
  sub_23C7DF68C(0xD000000000000015, v2);
  if (!v1)
  {
    sub_23C85A140();
    v4 = sub_23C7DF480(v3, 0, 0, (uint64_t)v13);
    v5 = swift_release();
    sub_23C7ECC54(v5, &qword_25430DBD0, v6, v7, v8, v9, v10, v11, v13[0]);
    v12 = v0 + OBJC_IVAR____TtC12GRDBInternal8Database__lastSchemaVersion;
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__lastSchemaVersion + 4) & 1) != 0)
    {
      if ((v4 & 0x100000000) != 0)
        return;
LABEL_7:
      *(_DWORD *)v12 = v4;
      *(_BYTE *)(v12 + 4) = BYTE4(v4) & 1;
      Database.clearSchemaCache()();
      return;
    }
    if ((v4 & 0x100000000) != 0 || *(_DWORD *)v12 != (_DWORD)v4)
      goto LABEL_7;
  }
}

uint64_t sub_23C7DF2E4()
{
  return swift_beginAccess();
}

uint64_t sub_23C7DF2F4()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_23C88CFE0(0, v0, v1);
}

uint64_t sub_23C7DF314()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DF31C()
{
  return sub_23C91119C();
}

void sub_23C7DF328(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23C7E7900(v2, a2);
}

void sub_23C7DF34C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_23C7E30C0(a1, v1, v2);
}

uint64_t sub_23C7DF364()
{
  return swift_beginAccess();
}

uint64_t sub_23C7DF37C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DE70C(a1, a2, 1, v2);
}

uint64_t sub_23C7DF388()
{
  return sub_23C910F5C();
}

__n128 sub_23C7DF394()
{
  __n128 *v0;

  return v0[4];
}

uint64_t sub_23C7DF3DC()
{
  return swift_allocObject();
}

__n128 sub_23C7DF3E8()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 248);
}

_QWORD *sub_23C7DF414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *(*v9)(uint64_t *__return_ptr);

  return v9(&a9);
}

_QWORD *sub_23C7DF420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void (*v37)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  return sub_23C8010AC(&a37, v37);
}

uint64_t sub_23C7DF42C()
{
  return sub_23C8A3D3C();
}

uint64_t sub_23C7DF43C()
{
  return sub_23C910E6C();
}

void sub_23C7DF448(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B39FC(a1, a2);
}

uint64_t sub_23C7DF450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 240) = a2;
  *(_QWORD *)(v2 + 248) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DF45C()
{
  uint64_t v0;

  return sub_23C84AB78(v0);
}

uint64_t sub_23C7DF464@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_23C8AC9C4(a1, a2, a3);
}

void sub_23C7DF470()
{
  static TableRecord.filter(keys:)();
}

uint64_t sub_23C7DF478()
{
  return sub_23C9117B4();
}

unint64_t sub_23C7DF480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];

  sub_23C7DF56C(a4, (uint64_t)v12);
  sub_23C7E79A8(&qword_25430CAB0);
  swift_allocObject();
  swift_retain();
  sub_23C7E76BC(a2);
  result = sub_23C7DF6B0(a1, a2, a3, v12);
  if (!v4)
  {
    sub_23C7DF980();
    v10 = v9;
    swift_release();
    v11 = v10;
    v12[0] = (v10 & 0x10100000000) != 0;
    if ((v10 & 0x10000000000) != 0)
      v11 = 0;
    return v11 | ((unint64_t)((v10 & 0x10100000000) != 0) << 32);
  }
  return result;
}

uint64_t sub_23C7DF56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430DBD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C7DF5C4()
{
  return sub_23C7E03F0();
}

uint64_t sub_23C7DF5CC()
{
  return swift_retain();
}

void sub_23C7DF5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v2;
  v5 = v0 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v1;
}

uint64_t sub_23C7DF5F8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C7DF63C()
{
  return sub_23C813864((uint64_t)&STACK[0x5D0]);
}

uint64_t sub_23C7DF644()
{
  uint64_t v0;

  return v0;
}

void sub_23C7DF654()
{
  sub_23C7E2414();
}

uint64_t sub_23C7DF680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  return sub_23C7E0BF0(&a55);
}

uint64_t sub_23C7DF68C(uint64_t a1, uint64_t a2)
{
  return sub_23C7E00B4(a1, a2, (void (*)(void))sub_23C7E0408);
}

#error "23C7DF7C0: call analysis failed (funcsize=97)"

uint64_t sub_23C7DF858()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DF860()
{
  return swift_initClassMetadata2();
}

void sub_23C7DF874(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23C800FCC(a1, a2, v2);
}

uint64_t sub_23C7DF8B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7DF8BC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634D8(v0, v1, 1);
  sub_23C8634D8(v0, v1, 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7DF8F8()
{
  return swift_release();
}

uint64_t sub_23C7DF900()
{
  uint64_t v0;
  unint64_t v1;

  sub_23C7E56A4(v0, v1, 3);
  return sub_23C910950();
}

double sub_23C7DF91C()
{
  return 0.0;
}

uint64_t sub_23C7DF92C()
{
  return sub_23C911574();
}

__n128 sub_23C7DF938()
{
  __n128 *v0;

  return v0[3];
}

uint64_t sub_23C7DF94C()
{
  return && infix(_:_:)();
}

uint64_t sub_23C7DF95C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  return v1 + 168 * v2 + 32;
}

void sub_23C7DF970(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_23C7E1240(a1, v3, a3);
}

void sub_23C7DF980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E6A30();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    sub_23C7DC47C();
    sub_23C7E7764();
    sub_23C90280C();
    sub_23C7DFEA0(v2);
    v4 = v3;
    sub_23C7DC4C4();
    if (!v1 && (v4 & 0x10000000000) != 0)
      *(_BYTE *)(v0 + 24) = 1;
  }
  sub_23C902AF4();
}

uint64_t sub_23C7DFA18()
{
  return swift_release();
}

uint64_t sub_23C7DFA20()
{
  uint64_t v0;

  return sub_23C7E76BC(v0);
}

uint64_t sub_23C7DFA2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 96))();
}

uint64_t sub_23C7DFA58()
{
  return 7692639;
}

uint64_t sub_23C7DFA7C()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

void sub_23C7DFA98()
{
  sub_23C7E649C();
}

uint64_t sub_23C7DFAB0()
{
  uint64_t v0;

  return v0;
}

void sub_23C7DFAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__n128 a39)
{
  sub_23C8738C4(&a39);
}

uint64_t sub_23C7DFACC()
{
  return sub_23C910F50();
}

uint64_t sub_23C7DFADC()
{
  return sub_23C910DAC();
}

uint64_t sub_23C7DFAF0()
{
  uint64_t v0;

  return sub_23C7F5610(v0);
}

uint64_t sub_23C7DFB10@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return a2(v3, v2, a1, v4);
}

uint64_t sub_23C7DFB3C()
{
  return swift_release();
}

uint64_t sub_23C7DFB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

uint64_t sub_23C7DFB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

uint64_t sub_23C7DFB70(_QWORD *a1)
{
  uint64_t v1;

  sub_23C7E7E34(a1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t _sSi12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_23C7DFBB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

_QWORD *sub_23C7DFBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 24))((uint64_t *)va, v8, v9);
}

void sub_23C7DFBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_23C82C100((uint64_t)&a30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_23C7DFBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_23C7DFC00()
{
  return sub_23C910F5C();
}

void sub_23C7DFC34()
{
  sub_23C7FAF08();
}

unint64_t sub_23C7DFC4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return sub_23C84ABF4();
}

uint64_t sub_23C7DFC54()
{
  return swift_willThrow();
}

uint64_t sub_23C7DFC5C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_23C8634E8(a1, a2, a3);
  sub_23C8634E8(a14, a17, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DFC88()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C7DFC90()
{
  return sub_23C910F38();
}

uint64_t sub_23C7DFCA0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_23C7DFCBC()
{
  return swift_bridgeObjectRetain();
}

void _s12GRDBInternal12TableRequestPA2A08FilteredC0RzAA05TypedC0Rzs12Identifiable10RowDecoderAaEPRpzAA24DatabaseValueConvertibleAgH_2IDRPzrlE6filter3idsxqd___tSlRd__AaJ7ElementRpd__AlPRSlF_0()
{
  TableRequest<>.filter<A>(keys:)();
}

uint64_t sub_23C7DFCD4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_23C7DFD00()
{
  uint64_t v0;

  return v0;
}

void sub_23C7DFD10(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B2D1C(a1, a2);
}

uint64_t sub_23C7DFD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), void (*a12)(uint64_t, uint64_t), void (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  return sub_23C8BB168(a1, a2, a3, a4, a5, v13, v14, v15, a9, a10, a11, a12, a13);
}

uint64_t sub_23C7DFD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return sub_23C8C1AAC(v9, v10, &a9);
}

uint64_t sub_23C7DFD40()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  sub_23C8C9384(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7DFD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  return v6(a1, a2, a4, a6);
}

uint64_t sub_23C7DFD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 - 72))(v32, &a29, v31, v29, v30, a1);
}

uint64_t sub_23C7DFD94@<X0>(unsigned int a1@<W8>)
{
  return a1;
}

void sub_23C7DFDA0(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association.aliased(_:)(a1, a2, a3);
}

_QWORD *sub_23C7DFDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return sub_23C7FA5C4(&a31);
}

__n128 sub_23C7DFDD0(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_23C7DFDFC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7DFE08()
{
  return swift_release();
}

__n128 *sub_23C7DFE10(__n128 *result, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  result[1] = a2;
  result[2].n128_u64[0] = a16;
  result[2].n128_u64[1] = a13;
  return result;
}

_QWORD *sub_23C7DFE24(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)(a2 + 8) + 8))((uint64_t *)va);
}

uint64_t sub_23C7DFE34(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, char a11)
{
  unint64_t v11;
  uint64_t v12;

  a10 = v11;
  a11 = 1;
  return RowDecodingContext.init(row:key:)(a1, &a10, v12);
}

uint64_t sub_23C7DFE4C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7DFE54@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23C7DFE5C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7DFE98()
{
  return swift_release();
}

void sub_23C7DFEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  sqlite3_stmt *v4;
  uint64_t v5;

  if (!sub_23C7E4FB4(a1))
  {
    sub_23C7E4568();
    sub_23C7EDF98(v2);
    if (v1)
      goto LABEL_9;
    sub_23C7DFA18();
  }
  if (sub_23C8E3668() == 100)
  {
    v4 = (sqlite3_stmt *)sub_23C8E3658();
    sub_23C7DFF74(v4, v5);
LABEL_10:
    sub_23C7DFE08();
    goto LABEL_11;
  }
  sub_23C7E1CA8();
  if (!v3)
  {
    sub_23C7E4568();
    sub_23C7E9A38(v2);
LABEL_9:
    sub_23C7DFE08();
    goto LABEL_10;
  }
  sub_23C7E4568();
  sub_23C7E9770(v2);
  sub_23C7DFE08();
  sub_23C7DFA18();
LABEL_11:
  sub_23C7DFA88();
}

uint64_t sub_23C7DFF74@<X0>(sqlite3_stmt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23C7DFFA4(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_23C7DFFA4(sqlite3_stmt *a1)
{
  unint64_t v1;

  v1 = sub_23C7DFFE0(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t sub_23C7DFFE0(sqlite3_stmt *a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  sqlite3_int64 v6;
  uint64_t result;

  v3 = *(_DWORD *)(v1 + 28);
  v4 = sqlite3_column_type(a1, v3);
  v5 = 0;
  if (v4 == 5)
    return v5 | ((unint64_t)(v4 == 5) << 32);
  v6 = sqlite3_column_int64(a1, v3);
  if (v6 == (int)v6)
  {
    v5 = v6;
    return v5 | ((unint64_t)(v4 == 5) << 32);
  }
  sub_23C8310CC();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t Database.cachedStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return sub_23C7E00B4(a1, a2, (void (*)(void))sub_23C7E03F0);
}

uint64_t sub_23C7E00B4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  a3();
  v8 = v7;
  if (*(_QWORD *)(v7 + 16))
  {
    sub_23C7DB3B8();
    v9 = sub_23C7E94B8();
    if ((v10 & 1) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_retain();
LABEL_8:
      swift_bridgeObjectRelease();
      sub_23C7E6D9C();
      return v4;
    }
    sub_23C7DBCD0();
  }
  swift_unownedRetainStrong();
  v11 = sub_23C8C8C84(a1, a2, 1);
  if (!v3)
  {
    v4 = v11;
    sub_23C7DC4C4();
    sub_23C7DB3B8();
    swift_retain();
    swift_isUniquelyReferenced_nonNull_native();
    sub_23C83AAE0(v4, a1);
    sub_23C7DBCD0();
    goto LABEL_8;
  }
  sub_23C7DC4C4();
  sub_23C7E6D9C();
  return v4;
}

unint64_t sub_23C7E01D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23C911A18() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23C911A18() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_23C7E02B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_unownedRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C7E02DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v3 + *a3);
  v5 = *v4;
  v6 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  return sub_23C7E02B0(v5, v6);
}

uint64_t sub_23C7E02F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)(v1 + *a1);
  v3 = *v2;
  v4 = v2[1];
  if (v4)
  {
    v1 = *v2;
  }
  else
  {
    sub_23C8EF5BC();
    sub_23C7DC47C();
    v5 = sub_23C910DAC();
    swift_unownedRetain();
    swift_release();
    v6 = *v2;
    v7 = v2[1];
    *v2 = v1;
    v2[1] = v5;
    swift_unownedRetain();
    swift_bridgeObjectRetain();
    sub_23C7E02B0(v6, v7);
  }
  sub_23C7E03B8(v3, v4);
  return v1;
}

uint64_t sub_23C7E03B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_unownedRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C7E03E4(uint64_t a1, uint64_t a2)
{
  return sub_23C7E02DC(a1, a2, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
}

uint64_t sub_23C7E03F0()
{
  return sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
}

uint64_t sub_23C7E03FC(uint64_t a1, uint64_t a2)
{
  return sub_23C7E02DC(a1, a2, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
}

uint64_t sub_23C7E0408()
{
  return sub_23C7E02F8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
}

void Database.cachedStatement(literal:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7E6864();
  sub_23C7DB388();
  sub_23C7E2620();
  sub_23C7E21BC();
  sub_23C7E0C50();
  sub_23C7EC808();
  sub_23C7DB388();
  sub_23C7E63D8();
  swift_retain();
  v3 = sub_23C7E0808();
  v4 = sub_23C7EE1D4(v3);
  if (v0)
  {
    sub_23C7DC4C4();
    sub_23C7DB398();
  }
  else
  {
    v5 = v4;
    sub_23C7DB398();
    sub_23C7E9B8C();
    sub_23C7E59E0((unint64_t *)&qword_25430DB98, v6, MEMORY[0x24BEE12B0]);
    sub_23C7EDCEC();
    v7 = sub_23C7DEAF0();
    sub_23C7E69F0(v7, v8);
    sub_23C7DC4C4();
    Database.cachedStatement(sql:)(v2, v1);
    v9 = sub_23C7DBCD0();
    if (*(_QWORD *)(v18 + 16) || *(_QWORD *)(v19 + 16))
    {
      sub_23C7E8F04(v9, v10, v11, v12, v13, v14, v15, v16, v17, v5, v18, v19);
      sub_23C7DB3DC();
      sub_23C7DB398();
    }
    else
    {
      sub_23C7DB3DC();
      sub_23C7DB398();
    }
  }
  sub_23C7E21A4();
}

void Database.allStatements(literal:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;

  v2 = v0;
  type metadata accessor for StatementArgumentsSink();
  sub_23C7DB388();
  sub_23C7EE324();
  v3 = sub_23C7E21BC();
  v4 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  sub_23C7EC808();
  sub_23C7DB388();
  sub_23C7E30C0(v2, v3, v4);
  swift_retain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_23C8A9A6C(v5);
  if (!v1)
  {
    v7 = v6;
    sub_23C7DB3DC();
    sub_23C7E9B8C();
    sub_23C7E59E0((unint64_t *)&qword_25430DB98, v8, MEMORY[0x24BEE12B0]);
    v9 = sub_23C910E3C();
    v11 = v10;
    v12 = sub_23C7DBCD0();
    sub_23C7DB550(v12, v13, v14, v15, v16, v17, v18, v19, v7);
    if (*(_QWORD *)(v31 + 16))
    {
      swift_bridgeObjectRelease();
      v20 = sub_23C7DE934();
    }
    else
    {
      v28 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 16);
      swift_bridgeObjectRelease();
      v20 = sub_23C7DE934();
      if (!v28)
      {
        v29 = 0uLL;
        goto LABEL_7;
      }
    }
    sub_23C7DB550(v20, v21, v22, v23, v24, v25, v26, v27, v31);
    v29 = v31;
LABEL_7:
    v31 = v29;
    type metadata accessor for SQLStatementCursor();
    sub_23C7DB388();
    v30 = sub_23C7EE324();
    sub_23C7E130C(v30, v9, v11, (uint64_t *)&v31, 0);
    sub_23C7DFB3C();
    goto LABEL_8;
  }
  sub_23C7DFB3C();
  sub_23C7DB3DC();
LABEL_8:
  sub_23C7EE5C0();
}

size_t sub_23C7E06C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_23C7E06E4()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E06EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

void *sub_23C7E0718(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA2uLL);
}

void *sub_23C7E0720@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return static TableRecord.all()(a1, a2, a3);
}

uint64_t sub_23C7E072C()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7E0734()
{
  sub_23C7ECD84();
}

_QWORD *sub_23C7E0744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v9 + 32))((uint64_t *)va1, (uint64_t *)va, v8, v9);
}

uint64_t sub_23C7E075C(uint64_t a1, unint64_t a2)
{
  return sub_23C7E5640(a1, a2, 3);
}

uint64_t sub_23C7E0764(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23C7E076C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E07A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C7DE718(a1, a2, a3);
}

uint64_t sub_23C7E07B4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E07C4()
{
  return swift_beginAccess();
}

void sub_23C7E07D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,__n128 a55)
{
  sub_23C80A808(&a55);
}

uint64_t sub_23C7E07D8()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  return sub_23C8AC9C4(v0, v1, v2);
}

uint64_t sub_23C7E0808()
{
  return swift_bridgeObjectRetain();
}

sqlite3_int64 sub_23C7E0838(sqlite3_stmt *a1, int iCol)
{
  return sqlite3_column_int64(a1, iCol);
}

uint64_t sub_23C7E0840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_23C7E0854()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7E087C()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7E0884()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7E089C()
{
  uint64_t v0;
  unint64_t v1;
  char v2;

  sub_23C7E5640(v0, v1, v2);
  return swift_release();
}

uint64_t sub_23C7E08D0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E08E4()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E0900()
{
  return sub_23C911778();
}

uint64_t sub_23C7E0928()
{
  return swift_retain();
}

void *sub_23C7E0948(uint64_t a1, ...)
{
  void *v1;
  va_list va;

  va_start(va, a1);
  return sub_23C800B48(va, v1);
}

void sub_23C7E0954()
{
  sub_23C7F1588();
}

uint64_t sub_23C7E0964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return static RowDecodingError.columnNotFound(_:context:)(v3, v2, v4 - 128, a2);
}

uint64_t sub_23C7E097C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E0988(uint64_t a1)
{
  uint64_t v1;

  sub_23C8634D8(a1, v1, 0);
  return swift_retain();
}

void sub_23C7E09B8(__n128 *a1)
{
  sub_23C8738C4(a1);
}

void sub_23C7E09D4()
{
  sub_23C7FD434();
}

id sub_23C7E09EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, (SEL)(v2 + 4040), v0);
}

uint64_t sub_23C7E09FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return static FTS3.tokenize(_:withTokenizer:)(a1, v3, a3);
}

uint64_t sub_23C7E0A04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23C88CFE0(0, v1, v2);
  return sub_23C88D150((uint64_t)v2, v1, v0);
}

void sub_23C7E0A30()
{
  sub_23C88FB9C();
}

uint64_t sub_23C7E0A3C()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E0A4C()
{
  uint64_t v0;

  return DatabaseQueue.init(configuration:)(v0);
}

uint64_t sub_23C7E0A58()
{
  return sub_23C91185C();
}

void sub_23C7E0A70()
{
  sub_23C7EE664();
}

uint64_t sub_23C7E0A7C()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E0A8C()
{
  return sub_23C910A40();
}

uint64_t sub_23C7E0A94(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int);

  return sub_23C811F5C(a1, v1);
}

uint64_t sub_23C7E0A9C()
{
  uint64_t v0;

  return sub_23C7F5610(*(_QWORD *)(v0 - 352));
}

void *sub_23C7E0AC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char __src)
{
  uint64_t v33;

  return memcpy((void *)(v33 - 248), &__src, 0xB8uLL);
}

uint64_t sub_23C7E0AD4()
{
  return swift_endAccess();
}

uint64_t sub_23C7E0ADC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E0AEC()
{
  return sub_23C911010();
}

void sub_23C7E0AF8()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C7E0B00()
{
  return sub_23C911BC8();
}

void sub_23C7E0B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14, int a15, char a16, int a17, char a18, int a19, char a20,int a21,char a22,int a23,char a24,int a25,char a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  char v33;
  char v34;
  uint64_t v35;

  *(_BYTE *)(v35 - 224) = v34;
  *(_BYTE *)(v35 - 223) = a10;
  *(_BYTE *)(v35 - 222) = a12;
  *(_BYTE *)(v35 - 221) = a14;
  *(_BYTE *)(v35 - 220) = a33;
  *(_BYTE *)(v35 - 219) = a16;
  *(_BYTE *)(v35 - 218) = a18;
  *(_BYTE *)(v35 - 217) = a20;
  *(_BYTE *)(v35 - 216) = v33;
  *(_BYTE *)(v35 - 215) = a22;
  *(_BYTE *)(v35 - 214) = a24;
  *(_BYTE *)(v35 - 213) = a26;
  *(_BYTE *)(v35 - 212) = a28;
}

uint64_t type metadata accessor for StatementArgumentsSink()
{
  return objc_opt_self();
}

uint64_t sub_23C7E0B8C(char a1)
{
  uint64_t v1;
  __int128 v4;

  sub_23C7E53DC(MEMORY[0x24BEE4AF8], &v4);
  *(_OWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = a1;
  return v1;
}

uint64_t type metadata accessor for SQLGenerationContext()
{
  return objc_opt_self();
}

uint64_t sub_23C7E0BF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = sub_23C7E5A90();
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  sub_23C7DC46C();
  sub_23C7DBCC8();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

void sub_23C7E0C50()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23C82D018();
  v3 = v2;
  if (*(_QWORD *)(v2 + 16))
  {
    sub_23C7E670C();
    v4 = v3 + 40;
    do
    {
      sub_23C7ECBBC();
      if (v0 >= v1 >> 1)
        sub_23C7E8DF8();
      v4 += 192;
      sub_23C7DF5E4();
    }
    while (!v5);
  }
  sub_23C82D0C0(v2, &qword_256BCC598, (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C7E0D58);
  sub_23C7E1768();
}

uint64_t sub_23C7E0CD0(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E79A8(a2);
    v4 = sub_23C82CFE4();
  }
  else
  {
    v4 = MEMORY[0x24BEE4B00];
  }
  v7 = v4;
  v5 = sub_23C7DF858();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_23C7E0D58(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _BYTE v26[176];
  _BYTE v27[192];
  _BYTE __dst[192];
  _QWORD v29[25];
  id v30;

  v4 = *(_QWORD *)(a1 + 16);
  v23 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    if (v5 == v4)
    {
      sub_23C82CA94(__dst);
      sub_23C82CBCC((uint64_t)__dst, (uint64_t)v29, &qword_25430D7E0);
      v5 = v4;
    }
    else
    {
      if (v5 >= *(_QWORD *)(a1 + 16))
        goto LABEL_23;
      memcpy(__dst, (const void *)(v23 + 192 * v5), 0xBBuLL);
      memcpy(v29, (const void *)(v23 + 192 * v5++), 0xBBuLL);
      nullsub_1(v29);
      sub_23C82CC30((uint64_t)__dst);
    }
    sub_23C82CBCC((uint64_t)v29, (uint64_t)v27, &qword_25430D7E0);
    sub_23C82CBCC((uint64_t)v27, (uint64_t)__dst, &qword_25430D7E0);
    if (sub_23C82CC10((uint64_t)__dst) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v6 = v29[0];
    v7 = v29[1];
    memcpy(v26, &v29[2], 0xABuLL);
    v8 = (_QWORD *)*a3;
    v10 = sub_23C7E94B8();
    v11 = v8[2];
    v12 = (v9 & 1) == 0;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      sub_23C911B50();
      __break(1u);
      goto LABEL_25;
    }
    v13 = v9;
    if (v8[3] < v11 + v12)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      sub_23C7E79A8(&qword_256BCC5A0);
      sub_23C911784();
      if ((v13 & 1) != 0)
        goto LABEL_17;
    }
LABEL_14:
    v16 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v17 = (_QWORD *)(v16[6] + 16 * v10);
    *v17 = v6;
    v17[1] = v7;
    memcpy((void *)(v16[7] + 176 * v10), v26, 0xABuLL);
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_22;
    v16[2] = v20;
    a2 = 1;
  }
  sub_23C8F9428();
  v14 = sub_23C7E94B8();
  if ((v13 & 1) != (v15 & 1))
    goto LABEL_24;
  v10 = v14;
  if ((v13 & 1) == 0)
    goto LABEL_14;
LABEL_17:
  v21 = (void *)swift_allocError();
  swift_willThrow();
  v30 = v21;
  v22 = v21;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_23C8134EC((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_25:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

size_t sub_23C7E10E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_23C7E110C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E1124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DE70C(a1, a2, 1, v2);
}

uint64_t sub_23C7E1144()
{
  return sub_23C911778();
}

uint64_t sub_23C7E1150()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  sub_23C815EF0(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E118C()
{
  return sub_23C910E18();
}

void sub_23C7E1198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__n128 a52)
{
  sub_23C874D7C(&a52);
}

uint64_t sub_23C7E11A0()
{
  return sub_23C910E24();
}

uint64_t sub_23C7E11A8()
{
  return sub_23C9117E4();
}

void *sub_23C7E11B4(uint64_t a1, const void *a2)
{
  uint64_t v2;

  return memcpy((void *)(v2 - 320), a2, 0xE3uLL);
}

uint64_t sub_23C7E11C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_23C7E11D4()
{
  sub_23C7FAE44();
}

uint64_t *sub_23C7E11E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  a13 = v15;
  a14 = v14;
  return sub_23C812004(&a10);
}

uint64_t sub_23C7E11F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8BF90C(a1, a2, a3);
}

uint64_t sub_23C7E1200()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 72))();
}

uint64_t sub_23C7E120C()
{
  uint64_t v0;

  return sqlite3_stmt_busy(*(sqlite3_stmt **)(v0 + 16));
}

unint64_t sub_23C7E1218()
{
  return 0xD000000000000015;
}

uint64_t sub_23C7E122C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _OWORD *v33;

  *v33 = v33[11];
  return Statement.arguments.setter(&a33, a2);
}

void sub_23C7E1240(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_23C7DDB10(a2);
    atomic_store(MEMORY[0x242626100](a3, v5), a1);
  }
  sub_23C7DB390();
}

uint64_t sub_23C7E127C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_23C7DDB10(a2);
    result = MEMORY[0x242626100](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23C7E12BC(uint64_t a1)
{
  uint64_t *v1;

  if (!sub_23C902B68(a1))
  {
    sub_23C7DDB10(v1);
    sub_23C902FEC();
  }
  sub_23C7DB390();
}

uint64_t type metadata accessor for SQLStatementCursor()
{
  return objc_opt_self();
}

uint64_t sub_23C7E130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *a4;
  v8 = a4[1];
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 16) = a1;
  v9 = sub_23C910EFC();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 24) = v9;
  *(_DWORD *)(v5 + 32) = a5;
  if (v7)
    v10 = *(_QWORD *)(v7 + 16);
  else
    v10 = 0;
  *(_QWORD *)(v5 + 40) = v10;
  *(_BYTE *)(v5 + 48) = v7 == 0;
  *(_QWORD *)(v5 + 56) = 0;
  swift_beginAccess();
  v11 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = v8;
  sub_23C7E13C4(v11);
  return v5;
}

uint64_t sub_23C7E13C4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.execute(sql:arguments:)(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD v7[23];
  uint64_t v8;

  object = sql._object;
  countAndFlagsBits = sql._countAndFlagsBits;
  v4 = *(_QWORD *)arguments.values._rawValue;
  v5 = *((_QWORD *)arguments.values._rawValue + 1);
  sub_23C7E79A8(&qword_25430DA08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  v7[0] = countAndFlagsBits;
  v7[1] = object;
  v7[2] = v4;
  v7[3] = v5;
  sub_23C7F96B0(v7);
  sub_23C7F96E0(v7, (void *)(inited + 32));
  v8 = inited;
  sub_23C7E0808();
  swift_bridgeObjectRetain();
  sub_23C7DB3B8();
  Database.execute(literal:)((GRDBInternal::SQL)&v8);
  swift_setDeallocating();
  sub_23C7E2AE0();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.execute(literal:)(GRDBInternal::SQL literal)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = *(_QWORD *)literal.elements._rawValue;
  Database.allStatements(literal:)();
  if (!v1)
  {
    for (i = sub_23C7E156C(); i; i = sub_23C7E156C())
    {
      v6[0] = 0;
      v6[1] = 0;
      v4 = v6;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v2 - 1));
      if (v5)
      {
        sub_23C7DFE08();
        break;
      }
      sub_23C7DFA18();
    }
    swift_release();
  }
}

uint64_t sub_23C7E156C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v0 + 56) >= *(_QWORD *)(v2 + 16) - 1)
  {
    result = sub_23C7E754C();
    if (!v1)
      return 0;
  }
  else
  {
    swift_retain();
    return sub_23C7E2A88(v2, v0);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.execute(arguments:)(GRDBInternal::StatementArguments_optional arguments)
{
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  char v4;
  __int128 v5;

  v5 = *(_OWORD *)arguments.value.values._rawValue;
  sub_23C7E1D24((uint64_t *)&v5, (uint64_t)arguments.value.namedValues._rawValue);
  if (!v2)
  {
    sub_23C7E5DE8();
    sub_23C7EDF98(v1);
    sub_23C7DFA18();
    v3 = *(sqlite3_stmt **)(v1 + 16);
    if (sqlite3_step(v3) == 101)
      goto LABEL_8;
    sub_23C8E36B0();
    if (!v4)
      goto LABEL_9;
    while (sqlite3_step(v3) == 100)
      ;
    sub_23C7E1CA8();
    if (v4)
    {
LABEL_8:
      sub_23C7E5DE8();
      sub_23C7E9770(v1);
    }
    else
    {
LABEL_9:
      sub_23C7E5DE8();
      sub_23C7E9A38(v1);
    }
    sub_23C7DFA18();
  }
}

uint64_t sub_23C7E1684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_23C7E79A8(a5);
}

uint64_t sub_23C7E168C()
{
  return swift_getObjectType();
}

uint64_t sub_23C7E16A0()
{
  return type metadata accessor for Row();
}

uint64_t sub_23C7E16A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

uint64_t sub_23C7E16B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E16C8(uint64_t a1)
{
  unint64_t v1;

  return sub_23C7E56A4(a1, v1, 3);
}

uint64_t sub_23C7E16E8()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E16F0(_QWORD *a1)
{
  uint64_t v1;

  sub_23C7E7E34(a1, v1);
  return swift_bridgeObjectRetain();
}

void sub_23C7E171C()
{
  sub_23C7F16C0();
}

uint64_t *sub_23C7E1738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = a5;
  a13 = a7;
  return sub_23C812004(&a9);
}

uint64_t sub_23C7E1744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 32))(*(_QWORD *)(v2 - 168), v1, v0);
}

void sub_23C7E1760(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23C7DB5E4(a1, a2, v2);
}

uint64_t sub_23C7E1784()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E17A4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  return sub_23C811CFC((uint64_t)va1, (uint64_t)va);
}

__n128 sub_23C7E17B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C7E17C4()
{
  return sub_23C910F5C();
}

double sub_23C7E17E0()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_BYTE *)(v0 + 80) = 0;
  return result;
}

uint64_t sub_23C7E17F8()
{
  return swift_release();
}

uint64_t sub_23C7E1818()
{
  uint64_t v0;

  return v0 - 88;
}

uint64_t sub_23C7E1830()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v0, v1, 3);
  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v2, v3, 3);
  return v0;
}

uint64_t sub_23C7E1874()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_23C7E1884@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

uint64_t sub_23C7E188C(uint64_t a1, unint64_t *a2)
{
  return sub_23C88DD94(0, a2);
}

uint64_t sub_23C7E18B0()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23C7E18C4()
{
  uint64_t v0;

  return sub_23C7E5C18(*(_QWORD *)(v0 + 16));
}

id sub_23C7E18D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23C8A7A38(v2, v1, v0);
}

void sub_23C7E18EC(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B39FC(a1, a2);
}

uint64_t sub_23C7E18F4()
{
  return swift_allocObject();
}

void *sub_23C7E1900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = a1;
  return memcpy((void *)(v1 + 168 * v2 + 32), (const void *)(v3 - 232), 0xA3uLL);
}

uint64_t sub_23C7E191C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C8152BC(v2, v3 - 216, a2);
}

uint64_t sub_23C7E1930(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  return sub_23C8DE6D4(a1, a2, a3, a16);
}

uint64_t sub_23C7E193C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a2 = 21;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return swift_willThrow();
}

void sub_23C7E1960(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  Association.reversed()(a1, a2, a3);
}

uint64_t sub_23C7E196C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7E199C()
{
  return swift_task_switch();
}

__n128 sub_23C7E19A8(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)(v1 + 72) = a1;
  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *sub_23C7E19C8()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_23C7E7E34(v0, v1);
}

uint64_t sub_23C7E19D4@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_23C8017C0(a1, a2, a3, v5, a4, a5);
}

uint64_t sub_23C7E19E0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 0);
}

uint64_t sub_23C7E1A34()
{
  return sub_23C910F5C();
}

void *sub_23C7E1A44(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_23C7E1A4C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_23C7E1A60()
{
  return sub_23C911880();
}

uint64_t sub_23C7E1A68()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E56A4(v0, v1, 3);
}

uint64_t sub_23C7E1A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 104))(v3, a2, *(_QWORD *)(v4 - 112));
}

_QWORD *sub_23C7E1A88()
{
  uint64_t v0;
  _QWORD *(*v1)(unint64_t *__return_ptr, uint64_t);

  return v1(&STACK[0x348], v0);
}

unint64_t sub_23C7E1A98(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_23C7E1B68()
{
  return sub_23C910F50();
}

uint64_t sub_23C7E1B8C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7E1BA0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v1, v0);
}

_QWORD *sub_23C7E1BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_23C8A2208(&a30);
}

uint64_t sub_23C7E1BC0()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E1BE8()
{
  return type metadata accessor for SchedulingWatchdog();
}

uint64_t sub_23C7E1C00()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 3);
}

uint64_t sub_23C7E1C3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void sub_23C7E1C58()
{
  sub_23C7F14B8();
}

uint64_t sub_23C7E1C64(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return sub_23C86361C((uint64_t)va);
}

void sub_23C7E1C6C(uint64_t (*a1)(char *))
{
  uint64_t v1;

  sub_23C7DDC58(a1, v1);
}

uint64_t sub_23C7E1C80()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_23C7E1C8C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E1CA0()
{
  return sub_23C911A18();
}

void sub_23C7E1CB4(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.annotated(with:)(a1, a2, a3);
}

uint64_t sub_23C7E1CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 - 72) = a5;
  return sub_23C9112E0();
}

uint64_t sub_23C7E1D18()
{
  uint64_t v0;

  return sub_23C903FF4(v0);
}

void sub_23C7E1D24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  GRDBInternal::StatementArguments v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  if (*a1)
  {
    v4 = a1[1];
    v8 = *a1;
    v9 = v4;
    v5 = &v8;
    Statement.setArguments(_:)(*(GRDBInternal::StatementArguments *)(&a2 - 1));
  }
  else if (*(_BYTE *)(v2 + 96) == 1)
  {
    sub_23C7E2E68();
    if (!v3)
    {
      Statement.arguments.getter(&v8);
      v7[0] = v8;
      v7[1] = v9;
      v6.values._rawValue = v7;
      Statement.validateArguments(_:)(v6);
      sub_23C7DB398();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t Statement.arguments.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *a1 = *(_QWORD *)(v1 + 104);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.validateArguments(_:)(GRDBInternal::StatementArguments a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DBC3C();
  if (!v1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  sub_23C8E3684();
}

uint64_t sub_23C7E1E38(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7E1F74();
  v7 = v6;
  swift_retain();
  sub_23C8C8840(v7, v2, a1);
  v9 = v8;
  swift_bridgeObjectRelease();
  if (!v3 && (a2 & 1) == 0 && *(_QWORD *)(*v2 + 16))
  {
    swift_bridgeObjectRelease();
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C911880();
    sub_23C910F5C();
    sub_23C7DB398();
    Statement.sql.getter();
    sub_23C8E36D4();
    v10 = sub_23C7DB694();
    sub_23C7E193C(v10, v11);
  }
  return v9;
}

void sub_23C7E1F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 136))
    goto LABEL_6;
  v1 = sub_23C7E70E4();
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v1 & 0x80000000) == 0)
  {
    sub_23C7DC47C();
    v2 = sub_23C7DF8B0();
    sub_23C8DF300(v2, v3);
    *(_QWORD *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_23C7E072C();
LABEL_6:
    swift_bridgeObjectRetain();
    sub_23C7E252C();
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_23C7E2018()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_23C7E2030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return v2 + a1 * v1 + 32;
}

uint64_t sub_23C7E2040()
{
  uint64_t v0;

  return sub_23C7E2FA0(v0);
}

uint64_t sub_23C7E204C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E209C()
{
  return sub_23C910E3C();
}

char *sub_23C7E20C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  return &a24;
}

uint64_t sub_23C7E20D8()
{
  return sub_23C910DAC();
}

uint64_t sub_23C7E20E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E20F8()
{
  return sub_23C910E18();
}

__n128 sub_23C7E2108(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_23C7E2134()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E2144(uint64_t result)
{
  return sub_23C7F5610(result);
}

uint64_t sub_23C7E214C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(a1, a2, v4, v3);
}

void sub_23C7E215C()
{
  sub_23C86E598();
}

void sub_23C7E2180()
{
  sub_23C7F1540();
}

void sub_23C7E218C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;

  sub_23C86FC18(&a51, &a30, &a9, 0, v51);
}

uint64_t sub_23C7E21BC()
{
  return sub_23C7E0B8C(0);
}

uint64_t sub_23C7E21C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 256))();
}

uint64_t sub_23C7E21D8()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23C7E21E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  _QWORD *(*v55)(uint64_t *__return_ptr, uint64_t);
  uint64_t v56;

  return v55(&a55, v56);
}

uint64_t Database.statementDidExecute(_:)(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) == 1)
    Database.clearSchemaCache()();
  sub_23C7E23F4();
  sub_23C7E2870(a1);
  return sub_23C7DFA18();
}

void Database.statementWillExecute(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  sub_23C7E2414();
  if (!v2)
  {
    sub_23C7E5B68();
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion) == 1)
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(a1 + 32);
      v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_selectedRegion);
      swift_beginAccess();
      v6 = *v5;
      v7[0] = v4;
      v7[1] = v6;
      swift_bridgeObjectRetain();
      DatabaseRegion.union(_:)(v7, &v8);
      sub_23C7DBCD0();
      *v5 = v8;
      swift_endAccess();
      sub_23C7DB3DC();
    }
    sub_23C7E23F4();
    sub_23C7E26C0();
    sub_23C7DFA18();
  }
}

void sub_23C7E2378(uint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v5 = *a1;
  if (!*(_QWORD *)(v4 + *a1))
  {
    a2();
    swift_allocObject();
    v7 = sub_23C7DB634();
    *(_QWORD *)(v4 + v5) = a4(v7);
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_23C7DF5B4();
}

void sub_23C7E23F4()
{
  sub_23C7E2378(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___observationBroker, (void (*)(void))type metadata accessor for DatabaseObservationBroker, 57, sub_23C806314);
}

void sub_23C7E2414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void (*v3)(_QWORD *__return_ptr);
  void (*v4)(_QWORD *__return_ptr);
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];

  sub_23C8EF400();
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) == 1)
  {
    v4 = v3;
    v5 = v2;
    sub_23C7E07C4();
    if (sqlite3_get_autocommit(*(sqlite3 **)(v1 + 16)))
    {
      v6 = v5();
      v8 = v7;
      v4(v13);
      v9 = v13[0];
      v10 = v13[1];
      v11 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
      sub_23C7EF5D4();
      sub_23C7DB694();
      *(_DWORD *)v12 = 4;
      *(_QWORD *)(v12 + 8) = 0xD000000000000017;
      *(_QWORD *)(v12 + 16) = 0x800000023C920770;
      *(_QWORD *)(v12 + 24) = v6;
      *(_QWORD *)(v12 + 32) = v8;
      *(_QWORD *)(v12 + 40) = v9;
      *(_QWORD *)(v12 + 48) = v10;
      *(_BYTE *)(v12 + 56) = v11;
      swift_willThrow();
    }
  }
}

void sub_23C7E250C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0x474E495355;
  *(_QWORD *)(a1 + 40) = 0xE500000000000000;
}

uint64_t sub_23C7E2524()
{
  return swift_task_alloc();
}

uint64_t sub_23C7E253C()
{
  uint64_t v0;

  return sub_23C807D38(v0);
}

uint64_t sub_23C7E2560()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7E256C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for CommonTableExpression(0, v4, a3, a4);
}

uint64_t sub_23C7E2578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C82FE58(a1, a2, a3, a4, 1);
}

uint64_t sub_23C7E2580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t (*v30)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  return v30(v32, &a29, v31, v29, a9, a10, a1);
}

uint64_t sub_23C7E25A0()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E25B0()
{
  return swift_retain_n();
}

uint64_t sub_23C7E25BC()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 256);
}

uint64_t sub_23C7E25C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E25D4()
{
  return sub_23C911BBC();
}

uint64_t sub_23C7E25E0()
{
  return sub_23C911520();
}

uint64_t sub_23C7E25F0()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E2604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_23C7E2610()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E2620()
{
  return swift_retain();
}

uint64_t sub_23C7E262C()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E2644(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  AssociationToMany.forKey(_:)(a1, a2);
}

uint64_t sub_23C7E2654()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E5640(v2, v3, 3);
  return v1;
}

uint64_t sub_23C7E26A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_23C7E26C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;

  sub_23C809894();
  v1 = v0;
  v3 = v2;
  sub_23C7E5DE8();
  v4 = sub_23C7E2840();
  sub_23C7DFA18();
  if ((v4 & 1) != 0)
    goto LABEL_12;
  sub_23C7DF2E4();
  v5 = *(_QWORD *)(v0 + 40);
  if (v5 >> 62)
  {
    sub_23C7DB3D4();
    v18 = sub_23C9117C0();
    sub_23C7DE934();
    if (!v18)
      goto LABEL_12;
  }
  else if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    v17 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    sub_23C7E2830(v17);
    sub_23C7DB648();
    return;
  }
  sub_23C7E40EC();
  v6 = sub_23C7E3188();
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = v1;
    swift_release();
    sub_23C7DB634();
    sub_23C7DFA18();
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8 == 1)
    {
      v10 = *(_QWORD *)(v7 + 32);
      v11 = *(_QWORD *)(v7 + 40);
      v12 = *(_QWORD *)(v7 + 48);
      v13 = *(unsigned __int8 *)(v7 + 56);
      sub_23C7DEF08();
      sub_23C7DEF08();
      v14 = swift_bridgeObjectRetain();
      v15 = sub_23C8064A8(v14, v10, v11, v12, v13);
      swift_bridgeObjectRelease();
      sub_23C808700(v10, v11, v12, v13);
    }
    else
    {
      if (!v8)
      {
        v9 = MEMORY[0x24BEE4AF8];
LABEL_11:
        sub_23C8062C4(v9);
        goto LABEL_12;
      }
      swift_bridgeObjectRetain_n();
      v16 = sub_23C7DBCC8();
      v15 = sub_23C80664C(v16, v7);
      swift_bridgeObjectRelease();
      sub_23C7DE934();
    }
    v9 = v15;
    goto LABEL_11;
  }
  __break(1u);
}

void sub_23C7E2830(id a1)
{
  if ((unint64_t)a1 >= 3)

}

uint64_t sub_23C7E2840()
{
  uint64_t v0;

  if (*(uint64_t *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth) <= 0)
    return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1);
  else
    return 1;
}

void sub_23C7E2870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v2 = v1;
  sub_23C7DF2E4();
  v4 = *(_QWORD *)(v1 + 40);
  if (v4 >> 62)
  {
    sub_23C7DB3D4();
    v17 = sub_23C9117C0();
    swift_bridgeObjectRelease();
    if (!v17)
      goto LABEL_5;
  }
  else if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_5;
  }
  sub_23C8062C4(MEMORY[0x24BEE4AF8]);
  type metadata accessor for SchedulingWatchdog();
  v5 = sub_23C7E2FE0();
  if (!v5)
  {
    __break(1u);
    return;
  }
  sub_23C8098CC(v5);
  sub_23C7DFA18();
LABEL_5:
  v6 = *(unsigned __int8 *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  switch(v6)
  {
    case 0:
      v9 = sub_23C7E110C();
      sub_23C7E7134(v9, v10, 0);
      sub_23C7DC47C();
      sub_23C7E110C();
      sub_23C8079CC();
      goto LABEL_12;
    case 1:
      sub_23C7E7134(v8, v7, 1u);
      sub_23C7DC47C();
      sub_23C7E110C();
      sub_23C807BB8();
      sub_23C7DFA18();
      if (*(_QWORD *)(v2 + 32)
        || (sub_23C7E5DE8(),
            v11 = Database.isInsideTransaction.getter(),
            sub_23C7DFA18(),
            (v11 & 1) != 0))
      {
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 24) + 16))
          sub_23C7EC030();
LABEL_13:
        v14 = sub_23C7E110C();
        sub_23C7E2E54(v14, v15, v6);
LABEL_14:
        v16 = *(void **)(v2 + 32);
        *(_QWORD *)(v2 + 32) = 0;
        sub_23C7E7AAC(v16);
        sub_23C7E2830(v16);
        if (v16 == (void *)2)
        {
          sub_23C7E5DE8();
          sub_23C7E2840();
          sub_23C7DFA18();
          sub_23C7EDFE0();
        }
        else if (v16 == (void *)1)
        {
          sub_23C7EBD80();
        }
        else
        {
          sub_23C7E2830(v16);
        }
      }
      else
      {
        sub_23C809948();
        sub_23C7E2E54(v8, v7, 1u);
      }
      break;
    case 2:
      v12 = sub_23C7E110C();
      sub_23C7E7134(v12, v13, 2u);
      sub_23C7DC47C();
      sub_23C7E110C();
      sub_23C807A34();
LABEL_12:
      sub_23C7DFA18();
      goto LABEL_13;
    case 3:
      if (v8 ^ 1 | v7 || *(_QWORD *)(v2 + 32))
        goto LABEL_14;
      sub_23C809948();
      break;
    default:
      goto LABEL_14;
  }
  sub_23C7ECFA0();
}

uint64_t sub_23C7E2A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_23C7E72A0(a1 + 32, a2, &v4);
  result = swift_release();
  if (!v2)
    return v4;
  return result;
}

uint64_t sub_23C7E2AE0()
{
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_23C7E2B10(uint64_t a1, const char *a2, const char **a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  sqlite3_stmt *ppStmt[2];

  v5 = v4;
  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v4 + 24) = 0;
  sub_23C7E3084();
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = sub_23C910DAC();
  *(_BYTE *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = -1;
  *(_QWORD *)(v5 + 72) = v10;
  *(_QWORD *)(v5 + 88) = 0;
  v11 = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v5 + 96) = 1;
  *(_QWORD *)(v5 + 104) = v10;
  *(_QWORD *)(v5 + 112) = v11;
  *(_QWORD *)(v5 + 120) = 0;
  *(_BYTE *)(v5 + 128) = 1;
  *(_QWORD *)(v5 + 136) = 0;
  sub_23C7E40EC();
  if ((sub_23C7E2FA0(a1) & 1) != 0)
  {
    sub_23C7E7148();
    v13 = v12;
    sub_23C7E7168();
    ppStmt[0] = 0;
    sub_23C7E6180();
    v14 = sqlite3_prepare_v3(*(sqlite3 **)(a1 + 16), a2, -1, a4, ppStmt, a3);
    if (!v14)
    {
      v24 = ppStmt[0];
      if (ppStmt[0])
      {
        *(_QWORD *)(v5 + 80) = a1;
        swift_unownedRetain();
        swift_release();
        *(_QWORD *)(v5 + 16) = v24;
        sub_23C7E6180();
        v25 = *(_QWORD *)(v13 + 24);
        sub_23C7E6180();
        *(_QWORD *)(v5 + 32) = v25;
        sub_23C7DB3D4();
        swift_bridgeObjectRelease();
        *(_BYTE *)(v5 + 40) = *(_BYTE *)(v13 + 40);
        v26 = *(_QWORD *)(v13 + 48);
        v27 = *(_QWORD *)(v13 + 56);
        v28 = *(_QWORD *)(v5 + 48);
        v29 = *(_QWORD *)(v5 + 56);
        v30 = *(_BYTE *)(v13 + 64);
        *(_QWORD *)(v5 + 48) = v26;
        *(_QWORD *)(v5 + 56) = v27;
        v31 = *(_BYTE *)(v5 + 64);
        *(_BYTE *)(v5 + 64) = v30;
        sub_23C7E7134(v26, v27, v30);
        sub_23C7E2E54(v28, v29, v31);
        v32 = *(_QWORD *)(v13 + 32);
        sub_23C7DB3D4();
        sub_23C7DF8F8();
        *(_QWORD *)(v5 + 72) = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7DF8F8();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C8E3718();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C7DE934();
        swift_bridgeObjectRelease();
        sub_23C8E3670();
        return 0;
      }
      return v5;
    }
    v15 = v14;
    v16 = (uint64_t)Database.lastErrorMessage.getter();
    v18 = v17;
    v34 = sub_23C910F74();
    v20 = v19;
    sub_23C7EF5D4();
    sub_23C7DB694();
    v22 = v21;
    if (v18)
    {
LABEL_6:
      *(_DWORD *)v22 = v15;
      *(_QWORD *)(v22 + 8) = v16;
      *(_QWORD *)(v22 + 16) = v18;
      *(_QWORD *)(v22 + 24) = v34;
      *(_QWORD *)(v22 + 32) = v20;
      *(_QWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_BYTE *)(v22 + 56) = 0;
      swift_willThrow();
      sub_23C7DF8F8();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C8E3718();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7DE934();
      swift_bridgeObjectRelease();
      sub_23C8E3670();
      return v5;
    }
    if (sqlite3_errstr(v15))
    {
      v16 = sub_23C910F74();
      v18 = v23;
      goto LABEL_6;
    }
    __break(1u);
  }
  sub_23C7DC484();
  result = sub_23C7E9444();
  __break(1u);
  return result;
}

uint64_t sub_23C7E2E54(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C7E7288(a1, a2, a3);
  return a1;
}

void sub_23C7E2E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  sub_23C7E40EC();
  v2 = swift_unownedRetainStrong();
  if ((sub_23C7E2FA0(v2) & 1) != 0)
  {
    swift_release();
    v3 = sqlite3_reset(*(sqlite3_stmt **)(v0 + 16));
    if (!v3)
    {
LABEL_7:
      sub_23C7EE5C0();
      return;
    }
    v4 = v3;
    swift_unownedRetainStrong();
    v5 = (uint64_t)Database.lastErrorMessage.getter();
    v7 = v6;
    swift_release();
    v8 = Statement.sql.getter();
    sub_23C8E36D4();
    sub_23C7DB694();
    v10 = v9;
    if (v7)
    {
LABEL_6:
      *(_DWORD *)v10 = v4;
      *(_QWORD *)(v10 + 8) = v5;
      *(_QWORD *)(v10 + 16) = v7;
      *(_QWORD *)(v10 + 24) = v8;
      *(_QWORD *)(v10 + 32) = v1;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_BYTE *)(v10 + 56) = 0;
      swift_willThrow();
      goto LABEL_7;
    }
    if (sqlite3_errstr(v4))
    {
      v5 = sub_23C910F74();
      v7 = v11;
      goto LABEL_6;
    }
    __break(1u);
  }
  sub_23C7DC484();
  sub_23C7E9444();
  __break(1u);
}

uint64_t type metadata accessor for SchedulingWatchdog()
{
  return objc_opt_self();
}

uint64_t sub_23C7E2FA0(uint64_t a1)
{
  uint64_t result;
  char v3;

  result = sub_23C7E2FE0();
  if (result)
  {
    v3 = sub_23C7E5C18(a1);
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t sub_23C7E2FE0()
{
  uint64_t v1;

  sub_23C7E3048();
  if (qword_25430D950 != -1)
    swift_once();
  sub_23C91140C();
  return v1;
}

unint64_t sub_23C7E3048()
{
  unint64_t result;

  result = qword_25430DBB0;
  if (!qword_25430DBB0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25430DBB0);
  }
  return result;
}

unint64_t sub_23C7E3084()
{
  unint64_t result;

  result = qword_25430DA98;
  if (!qword_25430DA98)
  {
    result = MEMORY[0x242626100](&unk_23C919AE4, &type metadata for CaseInsensitiveIdentifier);
    atomic_store(result, (unint64_t *)&qword_25430DA98);
  }
  return result;
}

void sub_23C7E30C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *__return_ptr, _BYTE *);
  uint64_t v9;

  v3[2] = a1;
  v3[3] = a2;
  swift_retain();
  sub_23C7E62C0();
  v3[4] = sub_23C7E34E4(a3);
  sub_23C7E4038(a3);
  v3[5] = v5;
  v6 = sub_23C7E31EC();
  v9 = sub_23C7E4638(v6, v7, v8, 0);
  swift_release();
  swift_release();
  v3[6] = v9;
  sub_23C7DF5B4();
}

uint64_t sub_23C7E3144()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_23C7E3154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DatabaseWriter.writeWithoutTransaction<A>(_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23C7E3164()
{
  return sub_23C910F5C();
}

__n128 sub_23C7E3170()
{
  __n128 *v0;
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v0[1].n128_u8[0];
  result = *v0;
  *(__n128 *)(v1 - 48) = *v0;
  *(_BYTE *)(v1 - 32) = v2;
  return result;
}

uint64_t sub_23C7E3188()
{
  return sub_23C7E2FE0();
}

void *sub_23C7E3190(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA3uLL);
}

uint64_t sub_23C7E3198()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C815EF0(v1, v0, 0);
}

void _sSd12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_23C7E31E0()
{
  sub_23C7F21BC();
}

uint64_t sub_23C7E31EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E31F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for QueryInterfaceRequest(0, a2, a3, a4);
}

uint64_t sub_23C7E3200(uint64_t a1)
{
  uint64_t v1;

  return QueryInterfaceRequest.isEmpty(_:)(v1, a1);
}

void *sub_23C7E322C(const void *a1)
{
  void *v1;

  return sub_23C800B48(a1, v1);
}

__n128 sub_23C7E3248()
{
  __n128 *v0;

  return v0[4];
}

void sub_23C7E3264()
{
  sub_23C7F16C0();
}

_QWORD *sub_23C7E3284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v9 + 8) + 8))(&a9, v10);
}

uint64_t sub_23C7E329C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v1;
  return result;
}

uint64_t sub_23C7E32AC@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  const void *v2;

  return memcmp(a1, v2, a2);
}

uint64_t sub_23C7E32BC()
{
  uint64_t v0;

  return v0 - 88;
}

uint64_t sub_23C7E32E4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v0, v1, 3);
  return sub_23C7E5640(v0, v1, 3);
}

id sub_23C7E3348(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_23C7E3350()
{
  return swift_dynamicCast();
}

id sub_23C7E3368@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, (SEL)(a1 + 1041));
}

uint64_t sub_23C7E3374()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7E33A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v0, v1);
}

void sub_23C7E33CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;

  v20._countAndFlagsBits = v17;
  v20._object = v18;
  Inflections.plural(_:options:_:)(v20, 0, *(Swift::String *)(v19 - 104));
}

uint64_t sub_23C7E33E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[4] = a1;
  *v2 = v1;
  return v1;
}

uint64_t sub_23C7E33F8()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E3408()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void sub_23C7E3428()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7DBDCC(v0, v1);
}

uint64_t sub_23C7E3434()
{
  return sub_23C910DC4();
}

uint64_t sub_23C7E3454(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  a9 = *a2;
  return static FetchableRecord.fetchCursor(_:arguments:adapter:)(a1, (uint64_t *)&a9, a3, a4, a5);
}

void sub_23C7E3464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DatabaseCursor.forEach(_:)(v2, v1, v3, a1);
}

void sub_23C7E347C(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.group(_:)(a1, a2, a3);
}

uint64_t sub_23C7E348C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v2, v3, 3);
  return swift_retain();
}

uint64_t sub_23C7E34E4(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  BOOL v74;
  uint64_t v75;
  _QWORD *v76;
  BOOL v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_124;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v4 = swift_bridgeObjectRetain();
  sub_23C7E4038(v4);
  v6 = sub_23C7E4618(v5);
  swift_bridgeObjectRelease();
  if (v3 == v6)
  {
    v97 = (_QWORD *)MEMORY[0x24BEE4B00];
    if (v2)
    {
      swift_bridgeObjectRetain();
      v7 = sub_23C9117C0();
      if (v7)
        goto LABEL_6;
    }
    else
    {
      v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        v91 = v1 & 0xC000000000000001;
        v8 = (_QWORD *)MEMORY[0x24BEE4B00];
        v2 = 4;
        v89 = v1;
        while (1)
        {
          if (v91)
            v9 = MEMORY[0x242625290](v2 - 4, v1);
          else
            v9 = swift_retain();
          if (__OFADD__(v2 - 4, 1))
          {
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          v1 = v7;
          v10 = v9;
          sub_23C88095C();
          v11 = sub_23C910E18();
          v13 = v12;
          swift_bridgeObjectRelease();
          v15 = sub_23C7E94B8();
          v16 = v8[2];
          v17 = (v14 & 1) == 0;
          if (__OFADD__(v16, v17))
            goto LABEL_118;
          v18 = v14;
          v94 = v2 - 3;
          v19 = v8;
          if (v8[3] < v16 + v17)
          {
            sub_23C8F96B4();
            v19 = v97;
            v20 = sub_23C7E94B8();
            if ((v18 & 1) != (v21 & 1))
            {
LABEL_126:
              sub_23C911B50();
              __break(1u);
LABEL_127:
              sub_23C911634();
              swift_bridgeObjectRelease();
              sub_23C8E61E8(0);
              if (v11)
                MEMORY[0x242625290](0, v1);
              else
                swift_retain();
              sub_23C88095C();
              swift_release();
              sub_23C910F5C();
              swift_bridgeObjectRelease();
              goto LABEL_132;
            }
            v15 = v20;
          }
          if ((v18 & 1) != 0)
          {
            v22 = swift_bridgeObjectRelease();
            v23 = (_QWORD *)(v19[7] + 8 * v15);
            MEMORY[0x242624CE4](v22);
            v7 = v1;
            if (*(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_23C91110C();
            sub_23C911148();
            sub_23C9110DC();
          }
          else
          {
            sub_23C7E79A8(&qword_25430DBC8);
            v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_23C9134B0;
            *(_QWORD *)(v24 + 32) = v10;
            v98 = v24;
            sub_23C9110DC();
            v19[(v15 >> 6) + 8] |= 1 << v15;
            v25 = (int64_t *)(v19[6] + 16 * v15);
            *v25 = v11;
            v25[1] = v13;
            *(_QWORD *)(v19[7] + 8 * v15) = v98;
            v26 = v19[2];
            v27 = __OFADD__(v26, 1);
            v28 = v26 + 1;
            if (v27)
              goto LABEL_121;
            v19[2] = v28;
            v7 = v1;
          }
          v1 = v89;
          ++v2;
          v8 = v19;
          if (v94 == v7)
            goto LABEL_25;
        }
      }
    }
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_25:
    swift_bridgeObjectRelease();
    v29 = 0;
    v99 = MEMORY[0x24BEE4B08];
    v30 = v8 + 8;
    v31 = 1 << *((_BYTE *)v8 + 32);
    v32 = -1;
    if (v31 < 64)
      v32 = ~(-1 << v31);
    v33 = v32 & v8[8];
    v11 = (unint64_t)(v31 + 63) >> 6;
    v81 = MEMORY[0x24BEE4AF8];
    v95 = v11;
    while (1)
    {
      while (1)
      {
        if (v33)
        {
          v34 = __clz(__rbit64(v33));
          v33 &= v33 - 1;
          v35 = v34 | (v29 << 6);
        }
        else
        {
          v36 = v29 + 1;
          if (__OFADD__(v29, 1))
            goto LABEL_120;
          if (v36 >= v11)
          {
LABEL_68:
            swift_release();
            v1 = type metadata accessor for TableAlias();
            sub_23C7E4B90(&qword_25430DA20, (uint64_t)&protocol conformance descriptor for TableAlias);
            v48 = sub_23C910DAC();
            v49 = v81;
            v79 = *(_QWORD *)(v81 + 16);
            if (!v79)
            {
LABEL_112:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v48;
            }
            v50 = 0;
            v51 = 0;
            v80 = v81 + 32;
            while (v50 < *(_QWORD *)(v49 + 16))
            {
              v2 = *(_QWORD *)(v80 + 8 * v50);
              if (v2 >> 62)
              {
                if ((v2 & 0x8000000000000000) != 0)
                  v1 = *(_QWORD *)(v80 + 8 * v50);
                else
                  v1 = v2 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain();
                v52 = sub_23C9117C0();
              }
              else
              {
                v52 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
              }
              v82 = v50;
              if (v52)
              {
                v53 = 0;
                v54 = v2 & 0xC000000000000001;
                v86 = v2 & 0xFFFFFFFFFFFFFF8;
                v55 = 1;
                v84 = v52;
                v85 = v2;
                v83 = v2 & 0xC000000000000001;
                while (1)
                {
                  if (v54)
                  {
                    v56 = MEMORY[0x242625290](v53, v2);
                  }
                  else
                  {
                    if (v53 >= *(_QWORD *)(v86 + 16))
                      goto LABEL_115;
                    v56 = swift_retain();
                  }
                  v27 = __OFADD__(v53++, 1);
                  if (v27)
                    break;
                  v57 = v56;
                  sub_23C880A4C();
                  if (!v58)
                  {
                    v90 = v57;
                    sub_23C88095C();
                    v60 = v59;
                    v1 = v61;
                    if ((sub_23C911A18() & 1) != 0)
                      goto LABEL_116;
                    v88 = v48;
                    swift_bridgeObjectRetain();
                    sub_23C8818FC(v60, v1, 48, 0xE100000000000000, 57, 0xE100000000000000);
                    v87 = v51;
                    swift_bridgeObjectRelease();
                    v62 = sub_23C911010();
                    v93 = MEMORY[0x242624B34](v62);
                    v64 = v63;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v65 = 0;
                    v96 = v99 + 56;
                    while (1)
                    {
                      swift_bridgeObjectRetain();
                      sub_23C911880();
                      sub_23C910F5C();
                      swift_bridgeObjectRelease();
                      if ((v65 & 1) != 0)
                        swift_bridgeObjectRelease();
                      v27 = __OFADD__(v55++, 1);
                      if (v27)
                        break;
                      v1 = v64;
                      v66 = sub_23C910E18();
                      v68 = v67;
                      if (!*(_QWORD *)(v99 + 16))
                      {
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        goto LABEL_104;
                      }
                      v69 = v66;
                      sub_23C911BBC();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_23C910F14();
                      v70 = sub_23C911BF8();
                      v71 = -1 << *(_BYTE *)(v99 + 32);
                      v2 = v70 & ~v71;
                      if (((*(_QWORD *)(v96 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
                        goto LABEL_102;
                      v72 = *(_QWORD *)(v99 + 48);
                      v73 = (_QWORD *)(v72 + 16 * v2);
                      v74 = *v73 == v69 && v73[1] == v68;
                      if (!v74 && (sub_23C911A18() & 1) == 0)
                      {
                        v75 = ~v71;
                        while (1)
                        {
                          v2 = (v2 + 1) & v75;
                          if (((*(_QWORD *)(v96 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
                            break;
                          v76 = (_QWORD *)(v72 + 16 * v2);
                          v77 = *v76 == v69 && v76[1] == v68;
                          if (v77 || (sub_23C911A18() & 1) != 0)
                            goto LABEL_101;
                        }
LABEL_102:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
LABEL_104:
                        swift_bridgeObjectRelease();
                        sub_23C910E18();
                        swift_bridgeObjectRelease();
                        sub_23C8FA41C();
                        swift_bridgeObjectRelease();
                        swift_retain();
                        swift_isUniquelyReferenced_nonNull_native();
                        sub_23C83A910(v93, v64, v90);
                        v48 = v88;
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        v51 = v87;
                        v52 = v84;
                        v2 = v85;
                        v54 = v83;
                        goto LABEL_105;
                      }
LABEL_101:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v65 = 1;
                    }
                    __break(1u);
                    break;
                  }
                  v1 = v58;
                  swift_release();
                  swift_bridgeObjectRelease();
LABEL_105:
                  if (v53 == v52)
                    goto LABEL_106;
                }
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
                goto LABEL_117;
              }
LABEL_106:
              v50 = v82 + 1;
              swift_bridgeObjectRelease();
              v49 = v81;
              if (v82 + 1 == v79)
                goto LABEL_112;
            }
            goto LABEL_122;
          }
          v37 = v30[v36];
          ++v29;
          if (!v37)
          {
            v29 = v36 + 1;
            if (v36 + 1 >= v11)
              goto LABEL_68;
            v37 = v30[v29];
            if (!v37)
            {
              v29 = v36 + 2;
              if (v36 + 2 >= v11)
                goto LABEL_68;
              v37 = v30[v29];
              if (!v37)
              {
                v38 = v36 + 3;
                if (v38 >= v11)
                  goto LABEL_68;
                v37 = v30[v38];
                if (!v37)
                {
                  while (1)
                  {
                    v29 = v38 + 1;
                    if (__OFADD__(v38, 1))
                      goto LABEL_123;
                    if (v29 >= v11)
                      goto LABEL_68;
                    v37 = v30[v29];
                    ++v38;
                    if (v37)
                      goto LABEL_43;
                  }
                }
                v29 = v38;
              }
            }
          }
LABEL_43:
          v33 = (v37 - 1) & v37;
          v35 = __clz(__rbit64(v37)) + (v29 << 6);
        }
        v2 = *(_QWORD *)(v8[6] + 16 * v35);
        v1 = *(_QWORD *)(v8[7] + 8 * v35);
        if (v1 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v39 = sub_23C9117C0();
          swift_bridgeObjectRelease();
        }
        else
        {
          v39 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (v39 >= 2)
          break;
        swift_bridgeObjectRelease();
        sub_23C8FA41C();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        v40 = sub_23C9117C0();
        if (v40)
        {
LABEL_50:
          if (v40 < 1)
          {
            __break(1u);
            goto LABEL_126;
          }
          v92 = v30;
          v41 = 0;
          v2 = 0;
          v11 = v1 & 0xC000000000000001;
          while (1)
          {
            if (v11)
              MEMORY[0x242625290](v2, v1);
            else
              swift_retain();
            sub_23C880A4C();
            v43 = v42;
            swift_release();
            if (v43)
            {
              swift_bridgeObjectRelease();
              v27 = __OFADD__(v41++, 1);
              if (v27)
                break;
            }
            if (v40 == ++v2)
            {
              swift_bridgeObjectRelease();
              v44 = v41 < 2;
              v30 = v92;
              if (v44)
                goto LABEL_62;
              goto LABEL_127;
            }
          }
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          swift_bridgeObjectRetain();
          v3 = sub_23C9117C0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      else
      {
        v40 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v40)
          goto LABEL_50;
      }
      swift_bridgeObjectRelease();
LABEL_62:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F1B6C();
        v81 = v46;
      }
      v11 = v95;
      v45 = *(_QWORD *)(v81 + 16);
      if (v45 >= *(_QWORD *)(v81 + 24) >> 1)
      {
        sub_23C7F1B6C();
        v81 = v47;
      }
      *(_QWORD *)(v81 + 16) = v45 + 1;
      *(_QWORD *)(v81 + 8 * v45 + 32) = v1;
    }
  }
LABEL_132:
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

void sub_23C7E4038(unint64_t a1)
{
  sub_23C7F72CC(a1, (uint64_t (*)(uint64_t))type metadata accessor for TableAlias, &qword_25430DA20, (uint64_t)&protocol conformance descriptor for TableAlias, (void (*)(_QWORD *, uint64_t))sub_23C8FA560);
}

uint64_t sub_23C7E405C()
{
  return swift_task_switch();
}

void *sub_23C7E4068(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src)
{
  return memcpy(&a9, &__src, 0xA2uLL);
}

uint64_t sub_23C7E40A4(uint64_t a1, uint64_t a2)
{
  return sub_23C7E56A4(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_23C7E40C0()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E40C8()
{
  return sub_23C910B6C();
}

uint64_t sub_23C7E40E4()
{
  return type metadata accessor for DatabaseDateComponents();
}

uint64_t sub_23C7E40EC()
{
  return type metadata accessor for SchedulingWatchdog();
}

__n128 sub_23C7E40F4(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_23C7E411C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return sub_23C7E6F90(a1, a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88), *(_QWORD *)(v8 + 96), *(_QWORD *)(v8 + 104), *(_QWORD *)(v8 + 112), *(_QWORD *)(v8 + 120), *(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 136), *(_QWORD *)(v8 + 144), *(_QWORD *)(v8 + 152), *(_QWORD *)(v8 + 160),
           *(_QWORD *)(v8 + 168),
           *(unsigned __int16 *)(v8 + 176) | (*(unsigned __int8 *)(v8 + 178) << 16));
}

uint64_t sub_23C7E415C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E4184()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

__n128 sub_23C7E41C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
  return (__n128)a15;
}

uint64_t sub_23C7E41DC()
{
  return swift_allocObject();
}

void sub_23C7E41E8()
{
  sub_23C833030();
}

void *sub_23C7E41F0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xABuLL);
}

uint64_t sub_23C7E41F8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E4210(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v4;
  a1[3] = v6;
  a1[4] = v5;
  return type metadata accessor for ValueReducers.Fetch(0, v4, a3, a4);
}

uint64_t sub_23C7E4224(__n128 *a1, __n128 a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  v3 = v2[3];
  v4 = v2[4];
  sub_23C7E7E34(v2, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
}

uint64_t sub_23C7E425C()
{
  return swift_beginAccess();
}

void sub_23C7E4270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14, int a15, char a16, int a17, char a18, int a19, char a20,int a21,char a22,int a23,char a24,int a25,char a26,int a27,char a28,int a29,char a30,int a31,char a32)
{
  char v32;
  char v33;
  uint64_t v34;

  *(_BYTE *)(v34 - 144) = v32;
  *(_BYTE *)(v34 - 143) = a12;
  *(_BYTE *)(v34 - 142) = a14;
  *(_BYTE *)(v34 - 141) = a16;
  *(_BYTE *)(v34 - 140) = a28;
  *(_BYTE *)(v34 - 139) = a18;
  *(_BYTE *)(v34 - 138) = a20;
  *(_BYTE *)(v34 - 137) = a22;
  *(_BYTE *)(v34 - 136) = v33;
  *(_BYTE *)(v34 - 135) = a24;
  *(_BYTE *)(v34 - 134) = a26;
  *(_BYTE *)(v34 - 133) = a30;
  *(_BYTE *)(v34 - 132) = a32;
}

uint64_t sub_23C7E42D4()
{
  return sub_23C910D58();
}

uint64_t sub_23C7E42DC()
{
  int v0;
  sqlite3_stmt *v1;

  return sqlite3_column_type(v1, v0);
}

uint64_t sub_23C7E42F8(uint64_t a1)
{
  uint64_t v1;

  sub_23C8634D8(a1, v1, 1);
  return swift_retain();
}

uint64_t sub_23C7E4314()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E4320()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C7E4328()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C87F2B4(v1, v0);
}

void sub_23C7E4338()
{
  sub_23C7FD434();
}

uint64_t sub_23C7E4350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_23C8814B4(a1, a2, v3, a3, 1);
}

uint64_t sub_23C7E4364()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E4374()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  return FTS3Pattern.init(rawPattern:)(v2).rawPattern._countAndFlagsBits;
}

void sub_23C7E4384()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C8A6F6C(v1, v2, v0);
}

uint64_t sub_23C7E4398()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 320) + 8))(*(_QWORD *)(v0 - 328), *(_QWORD *)(v0 - 288));
}

uint64_t sub_23C7E43B8()
{
  return swift_retain();
}

uint64_t sub_23C7E43C4()
{
  return 0;
}

_QWORD *sub_23C7E43D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a5 + 16) + 8))((uint64_t *)va, a3);
}

void sub_23C7E4400()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C7E4420@<X0>(unint64_t a1@<X8>, __int128 a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t __src)
{
  uint64_t *v7;

  a2 = a1;
  a3 = 0;
  a4 = 0;
  a5 = 0x80;
  return sub_23C87F40C(&__src, &a2, v7);
}

uint64_t sub_23C7E4448(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return sub_23C9112E0();
}

uint64_t sub_23C7E447C()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E4498()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E44A4()
{
  return swift_bridgeObjectRelease();
}

void *sub_23C7E44B8()
{
  return sub_23C7F96E0(&STACK[0x388], &STACK[0x2D0]);
}

__n128 *sub_23C7E44C4(__n128 *result, __n128 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result[1] = a2;
  result[3].n128_u64[1] = v5;
  result[4].n128_u64[0] = v4;
  result[2].n128_u64[0] = v2;
  result[6].n128_u64[0] = v5;
  result[6].n128_u64[1] = v4;
  result[4].n128_u64[1] = v3;
  result[8].n128_u64[1] = v5;
  result[9].n128_u64[0] = v4;
  return result;
}

uint64_t sub_23C7E44E0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_23C7E44EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7F1754(a1);
  sub_23C7F1754(v2);
  sub_23C7F1754(v3);
  return sub_23C7F1754(v1);
}

void *sub_23C7E4520(uint64_t a1, ...)
{
  void *v1;
  va_list va;

  va_start(va, a1);
  return sub_23C7F96E0(va, v1);
}

uint64_t sub_23C7E452C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
}

void *sub_23C7E453C(void *__src, ...)
{
  va_list va;

  va_start(va, __src);
  return memcpy(va, __src, 0xA3uLL);
}

uint64_t sub_23C7E454C()
{
  return swift_retain();
}

uint64_t sub_23C7E4568()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C7E4574()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E4588()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E45A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for TableAlias()
{
  return objc_opt_self();
}

void sub_23C7E45DC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x242626100](a3, v5), a1);
  }
  sub_23C7DB390();
}

uint64_t sub_23C7E4618(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
    return sub_23C9115B0();
  else
    return *(_QWORD *)(a1 + 16);
}

uint64_t sub_23C7E4638(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _BYTE *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E79A8(&qword_256BCC598);
    v8 = sub_23C82CFE4();
  }
  else
  {
    v8 = MEMORY[0x24BEE4B00];
  }
  v10 = v8;
  sub_23C7DF858();
  sub_23C7DBCC8();
  swift_retain();
  sub_23C7E4700(a1, a2, a3, a4, 1, &v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_23C7E4700(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _BYTE *), uint64_t a4, char a5, _QWORD *a6)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v34;
  uint64_t i;
  _BYTE v38[192];
  _BYTE __dst[176];
  _QWORD __src[24];
  _QWORD v41[2];
  _BYTE v42[171];
  id v43;

  v8 = *(_QWORD *)(a1 + 16);
  v34 = a1 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = 0;
  for (i = a2; ; a2 = i)
  {
    if (v9 == v8)
    {
      sub_23C82CA94(__src);
      sub_23C82CBCC((uint64_t)__src, (uint64_t)v41, &qword_25430D7E0);
      v9 = v8;
    }
    else
    {
      if (v9 >= *(_QWORD *)(a1 + 16))
        goto LABEL_25;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_26;
      v10 = (uint64_t *)(v34 + 16 * v9);
      v12 = *v10;
      v11 = v10[1];
      swift_bridgeObjectRetain_n();
      v13 = sub_23C7E94B8();
      if ((v14 & 1) == 0)
        goto LABEL_27;
      memcpy(__dst, (const void *)(*(_QWORD *)(a2 + 56) + 176 * v13), 0xABuLL);
      sub_23C8133B0((uint64_t)__dst);
      swift_bridgeObjectRelease();
      __src[0] = v12;
      __src[1] = v11;
      memcpy(&__src[2], __dst, 0xABuLL);
      swift_bridgeObjectRetain();
      sub_23C8133B0((uint64_t)__dst);
      sub_23C8132C8((uint64_t)__src);
      ++v9;
      memcpy(v38, __src, 0xBBuLL);
      a3(v41, v38);
      sub_23C8132C8((uint64_t)__src);
      nullsub_1(v41);
    }
    sub_23C82CBCC((uint64_t)v41, (uint64_t)v38, &qword_25430D7E0);
    sub_23C82CBCC((uint64_t)v38, (uint64_t)__src, &qword_25430D7E0);
    if (sub_23C82CC10((uint64_t)__src) == 1)
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return;
    }
    v15 = a5;
    v16 = v41[0];
    v17 = v41[1];
    memcpy(__dst, v42, 0xABuLL);
    v18 = (_QWORD *)*a6;
    v20 = sub_23C7E94B8();
    v21 = v18[2];
    v22 = (v19 & 1) == 0;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      sub_23C911B50();
      __break(1u);
      goto LABEL_29;
    }
    v23 = v19;
    if (v18[3] < v21 + v22)
      break;
    if ((v15 & 1) != 0)
    {
      if ((v19 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      sub_23C7E79A8(&qword_256BCC5A0);
      sub_23C911784();
      if ((v23 & 1) != 0)
        goto LABEL_19;
    }
LABEL_16:
    v26 = (_QWORD *)*a6;
    *(_QWORD *)(*a6 + 8 * (v20 >> 6) + 64) |= 1 << v20;
    v27 = (_QWORD *)(v26[6] + 16 * v20);
    *v27 = v16;
    v27[1] = v17;
    memcpy((void *)(v26[7] + 176 * v20), __dst, 0xABuLL);
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_24;
    v26[2] = v30;
    a5 = 1;
  }
  sub_23C8F9428();
  v24 = sub_23C7E94B8();
  if ((v23 & 1) != (v25 & 1))
    goto LABEL_28;
  v20 = v24;
  if ((v23 & 1) == 0)
    goto LABEL_16;
LABEL_19:
  v31 = (void *)swift_allocError();
  swift_willThrow();
  v43 = v31;
  v32 = v31;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C8134EC((uint64_t)__dst);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_29:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C7E4B90(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TableAlias();
    result = MEMORY[0x242626100](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C7E4BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return v4(v7, v6, v5, a4, v8);
}

uint64_t sub_23C7E4C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

void sub_23C7E4C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C8FA2B4(a1, v10, v11, v12, v13, a6, a7, a8, a9, a10);
}

_QWORD *sub_23C7E4C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_23C7FA5C4(&a30);
}

uint64_t sub_23C7E4C40()
{
  return sub_23C80096C();
}

uint64_t sub_23C7E4C84()
{
  return sub_23C911520();
}

void sub_23C7E4C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,__n128 a53)
{
  sub_23C80A808(&a53);
}

uint64_t sub_23C7E4CA4@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8AC9C4(a1, v2, a2);
}

uint64_t sub_23C7E4CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_23C7E4CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23C7E4CD4()
{
  return sub_23C9114E4();
}

void sub_23C7E4CE4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_23C7E30C0(a1, v1, v2);
}

_QWORD *sub_23C7E4CFC(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return a3(&a28);
}

uint64_t sub_23C7E4D10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

_QWORD *sub_23C7E4D2C()
{
  uint64_t v0;

  return sub_23C7E7E34((_QWORD *)(*(_QWORD *)v0 + 16), *(_QWORD *)(*(_QWORD *)v0 + 40));
}

uint64_t sub_23C7E4D78()
{
  return sub_23C910F74();
}

uint64_t sub_23C7E4D80()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_23C7E56A4(v0, v1, 3);
  sub_23C7E56A4(v0, v1, 3);
  sub_23C7E56A4(v0, v1, 3);
  return v2;
}

uint64_t sub_23C7E4DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_23C7E4DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return v5(a1, v6, a1, a4, a5, v7, v8);
}

uint64_t sub_23C7E4DE0()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E4DF0()
{
  sub_23C7EA244();
}

void sub_23C7E4E14()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7E4E20()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E4E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_23C8814B4(v3, v0, v2, v1, 1);
}

uint64_t sub_23C7E4E4C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E4E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  return sub_23C88319C((uint64_t)&a29, v29, v30, &a24);
}

id sub_23C7E4E70@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, (SEL)(a1 + 1041));
}

void *sub_23C7E4E7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char __dst)
{
  uint64_t v53;

  a51 = 0;
  a52 = v53;
  return memcpy(&__dst, &__src, 0xB8uLL);
}

uint64_t sub_23C7E4E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *, uint64_t);
  uint64_t v10;

  return v9(&a9, v10);
}

uint64_t sub_23C7E4EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 72) & ~v2);
}

char *sub_23C7E4EC8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_23C7E4EEC()
{
  sub_23C86E598();
}

uint64_t sub_23C7E4EF8()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E4F0C()
{
  return sub_23C910F5C();
}

void sub_23C7E4F14(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_23C8A826C(v2, v3, a1, a2);
}

void *sub_23C7E4F20(const void *a1)
{
  return memcpy(&STACK[0x218], a1, 0xA3uLL);
}

uint64_t sub_23C7E4F30()
{
  return sub_23C9109F8();
}

uint64_t sub_23C7E4F3C()
{
  return swift_allocObject();
}

uint64_t sub_23C7E4F74()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E4F88()
{
  sub_23C8CA858();
}

uint64_t sub_23C7E4F90(uint64_t a1)
{
  return sub_23C7DE024(a1);
}

uint64_t sub_23C7E4FA8()
{
  return sub_23C7D92E0();
}

uint64_t sub_23C7E4FB4(uint64_t a1)
{
  return sqlite3_stmt_busy(*(sqlite3_stmt **)(a1 + 16));
}

uint64_t sub_23C7E4FCC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E4FDC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_23C7E56A4(a1, a2, 3);
  sub_23C7E56A4(v3, v2, 3);
  sub_23C7E56A4(v4, v5, 3);
  return sub_23C910950();
}

uint64_t sub_23C7E5024()
{
  return swift_unexpectedError();
}

void sub_23C7E5038(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23C8DEAE8(a1, a2, v2);
}

uint64_t destroy for SQL.Element(uint64_t a1)
{
  return sub_23C7E509C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160));
}

uint64_t sub_23C7E509C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch((a21 >> 58) & 7)
  {
    case 0uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      break;
    case 1uLL:
      result = sub_23C7F9AE0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      result = sub_23C7E6F90(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 3uLL:
      result = sub_23C800D94(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21 & 0xE3FFFFFFFFFFFFFFLL);
      break;
    case 4uLL:
      result = sub_23C800EA4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C7E523C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch((a21 >> 58) & 7)
  {
    case 0uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      break;
    case 1uLL:
      result = sub_23C7FD5D8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      result = sub_23C7E7E58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 3uLL:
      result = sub_23C7FD6D4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21 & 0xE3FFFFFFFFFFFFFFLL);
      break;
    case 4uLL:
      result = sub_23C7FD7E4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    default:
      return result;
  }
  return result;
}

void sub_23C7E53DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD v47[3];
  uint64_t v48;
  _BYTE v49[40];
  _QWORD *v50;

  v4 = *(_QWORD *)(a1 + 16);
  v50 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23C7E56C8();
  v42 = a2;
  v43 = a1;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = a1 + 32;
    sub_23C7DBCC8();
    v7 = v4;
    while (v5)
    {
      v8 = &unk_25430D6B8;
      sub_23C7DB5E4(v6, (uint64_t)v49, (uint64_t *)&unk_25430D6B8);
      sub_23C7DB5E4((uint64_t)v49, (uint64_t)v47, (uint64_t *)&unk_25430D6B8);
      if (v48)
      {
        v9 = sub_23C7E7E34(v47, v48);
        sub_23C7EE1F4((uint64_t)v9, v10);
        v11 = v44;
        v12 = v45;
        v13 = v46;
        v14 = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v47);
      }
      else
      {
        v14 = sub_23C7E7A6C((uint64_t)v47);
        v11 = 0;
        v12 = 0;
        v13 = 4;
      }
      sub_23C7E7DF0(v14, v15, v16, v17, v18, v19, v20, v21, (uint64_t)v42, v43);
      if ((sub_23C8E370C() & 1) == 0)
      {
        sub_23C7DB578();
        v8 = v50;
      }
      v22 = v8[2];
      if (v22 >= v8[3] >> 1)
      {
        sub_23C7E5A04();
        v8 = v50;
      }
      v8[2] = v22 + 1;
      v23 = (char *)&v8[3 * v22];
      *((_QWORD *)v23 + 4) = v11;
      *((_QWORD *)v23 + 5) = v12;
      v23[48] = v13;
      v6 += 40;
      --v5;
      if (!--v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = v50;
    sub_23C7DBCC8();
LABEL_14:
    v24 = *(_QWORD *)(v43 + 16);
    if (v4 == v24)
    {
LABEL_15:
      sub_23C7E072C();
      sub_23C7E072C();
      v25 = MEMORY[0x24BEE4B00];
      *v42 = v8;
      v42[1] = v25;
      return;
    }
    v26 = v43 + 40 * v4 + 32;
    while (v4 < v24)
    {
      sub_23C7DB5E4(v26, (uint64_t)v49, (uint64_t *)&unk_25430D6B8);
      sub_23C7DB5E4((uint64_t)v49, (uint64_t)v47, (uint64_t *)&unk_25430D6B8);
      if (v48)
      {
        v27 = sub_23C7E7E34(v47, v48);
        sub_23C7EE1F4((uint64_t)v27, v28);
        v29 = v44;
        v30 = v45;
        v31 = v46;
        v32 = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v47);
      }
      else
      {
        v32 = sub_23C7E7A6C((uint64_t)v47);
        v29 = 0;
        v30 = 0;
        v31 = 4;
      }
      sub_23C7E7DF0(v32, v33, v34, v35, v36, v37, v38, v39, (uint64_t)v42, v43);
      if ((sub_23C8E370C() & 1) == 0)
      {
        sub_23C7DB578();
        v8 = v50;
      }
      v40 = v8[2];
      if (v40 >= v8[3] >> 1)
      {
        sub_23C7E5A04();
        v8 = v50;
      }
      ++v4;
      v8[2] = v40 + 1;
      v41 = (char *)&v8[3 * v40];
      *((_QWORD *)v41 + 4) = v29;
      *((_QWORD *)v41 + 5) = v30;
      v41[48] = v31;
      v24 = *(_QWORD *)(v43 + 16);
      v26 += 40;
      if (v4 == v24)
        goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t sub_23C7E5640(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return sub_23C7EEE1C(result, a2);
  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t destroy for DatabaseValue.Storage(uint64_t a1)
{
  return sub_23C7E5640(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_23C7E567C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23C7E40A4(a1, a2);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_BYTE *)(v2 + 16) = v5;
  sub_23C7DB3A0();
}

uint64_t sub_23C7E56A4(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3)
    return sub_23C7ED944(result, a2);
  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

void sub_23C7E56C8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E56FC();
  *v0 = v1;
}

void sub_23C7E56FC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

uint64_t sub_23C7E578C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  return swift_unknownObjectRelease();
}

uint64_t sub_23C7E5798()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, *(_QWORD *)(v2 - 136));
}

void sub_23C7E57A4()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C7E57C4()
{
  return swift_getAssociatedTypeWitness();
}

unint64_t sub_23C7E57D0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t sub_23C7E57F4()
{
  uint64_t v0;
  unint64_t v1;

  sub_23C7E56A4(v0, v1, 3);
  return swift_retain();
}

uint64_t sub_23C7E581C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23C7E7E34(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_23C7E5840(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  return sub_23C811F5C((uint64_t)&a31, a2);
}

uint64_t sub_23C7E5848()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_23C7E585C(uint64_t a1, uint64_t a2)
{
  sub_23C805EE8(a1, a2);
  return sub_23C7EEE60();
}

uint64_t sub_23C7E5870()
{
  return sub_23C9117D8();
}

uint64_t sub_23C7E588C()
{
  uint64_t v0;

  return sub_23C863D04(v0 - 72);
}

uint64_t sub_23C7E5894()
{
  uint64_t v0;

  return sub_23C7F1754(v0);
}

uint64_t sub_23C7E58A8()
{
  return swift_release();
}

uint64_t sub_23C7E58B0()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E58C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void *sub_23C7E58D4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD2uLL);
}

uint64_t sub_23C7E58DC()
{
  return sub_23C910F14();
}

uint64_t sub_23C7E58EC(uint64_t result)
{
  return sub_23C7F1754(result);
}

void sub_23C7E58F4()
{
  sub_23C7E0C50();
}

uint64_t sub_23C7E58FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  return v10(a1, &a9, v9, v13, v12, v11);
}

uint64_t sub_23C7E592C()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12GRDBInternal8DatabaseC02isA5TableySbSSFZ_0()
{
  return sub_23C84CFC0();
}

uint64_t sub_23C7E5964()
{
  uint64_t v0;

  return sub_23C7E5640(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 8), *(_DWORD *)(v0 + 20));
}

uint64_t sub_23C7E5974(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7DE718(a1, 1, v1);
}

void *sub_23C7E5990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  return sub_23C801054(&a32, &a55);
}

uint64_t sub_23C7E599C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E59A8()
{
  return sub_23C911010();
}

uint64_t sub_23C7E59E0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23C7E127C(a1, v3, a3);
}

void sub_23C7E5A04()
{
  sub_23C7E56C8();
}

_QWORD *sub_23C7E5A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)(a2 + 16) + 8))(&a9);
}

uint64_t sub_23C7E5A2C()
{
  return sub_23C91095C();
}

uint64_t sub_23C7E5A34(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_23C91119C();
}

uint64_t sub_23C7E5A44(__int128 *a1)
{
  __int128 v3;

  sub_23C7E5A90();
  v3 = *a1;
  LOBYTE(a1) = sub_23C7E5AF0(&v3);
  swift_release();
  return a1 & 1;
}

uint64_t sub_23C7E5A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  if ((v1 & 0x8000000000000000) == 0)
    return swift_retain();
  v3 = *(_QWORD *)(v0 + 16);
  v4 = swift_retain();
  v5 = sub_23C7E5A90(v4);
  sub_23C7DD64C(v3, v1);
  return v5;
}

uint64_t sub_23C7E5AF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v2 = a1[1];
  if (*(_QWORD *)(*a1 + 16) || *(_QWORD *)(v2 + 16))
  {
    if ((*(_BYTE *)(v1 + 32) & 1) != 0)
      return 0;
    *(_QWORD *)&v4 = *a1;
    *((_QWORD *)&v4 + 1) = v2;
    swift_beginAccess();
    static StatementArguments.+= infix(_:_:)(v1 + 16, &v4);
    swift_endAccess();
  }
  return 1;
}

uint64_t sub_23C7E5B68()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__isSuspended);
  v2 = *(void **)(v1 + 24);
  sub_23C7DC47C();
  sub_23C7DB634();
  swift_retain();
  objc_msgSend(v2, sel_lock);
  sub_23C7E07C4();
  v4 = *(_BYTE *)(v1 + 16);
  sub_23C7E5FE4((uint64_t)&v4, v0);
  objc_msgSend(*(id *)(v1 + 24), sel_unlock);
  swift_release();
  sub_23C7DE904();
  return sub_23C7DFA18();
}

uint64_t sub_23C7E5C18(uint64_t a1)
{
  unint64_t v2;

  swift_beginAccess();
  swift_retain();
  v2 = sub_23C7DB3D4();
  LOBYTE(a1) = sub_23C7E5C84(v2, a1);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t sub_23C7E5C84(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) == 0)
      {
        if (__OFADD__(v5, 1))
          goto LABEL_14;
        v9 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        if (v9 == a2)
        {
LABEL_12:
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_10:
        if (v5 == v4)
          goto LABEL_11;
      }
      v6 = MEMORY[0x242625290](v5, a1);
      if (!__OFADD__(v5++, 1))
        break;
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      v4 = sub_23C9117C0();
      if (!v4)
        goto LABEL_11;
    }
    v8 = v6;
    swift_unknownObjectRelease();
    if (v8 == a2)
      goto LABEL_12;
    goto LABEL_10;
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23C7E5D94()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_23C7E5D9C()
{
  return sub_23C911298();
}

void sub_23C7E5DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((a1 - 32) / v3);
}

uint64_t sub_23C7E5DE0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E5DE8()
{
  return swift_unownedRetainStrong();
}

double sub_23C7E5DFC()
{
  return 0.0;
}

uint64_t sub_23C7E5E0C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23C7E5E14()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E5E24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C8201E8(a1, v3, v2, a2);
}

uint64_t sub_23C7E5E30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7E5E60()
{
  return sub_23C910F5C();
}

_QWORD *sub_23C7E5E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(a7 + 32))((uint64_t *)va, a1, 0, a4, a7);
}

uint64_t sub_23C7E5EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  return sub_23C7DF56C((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_23C7E5EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_23C7E5EC4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_23C7E5ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  *(_QWORD *)(v2 - 96) = a2;
  return sub_23C911430();
}

uint64_t sub_23C7E5EF4(uint64_t a1, unint64_t a2, char a3)
{
  sub_23C7E5640(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E5F08()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E5F14(uint64_t result)
{
  return sub_23C7F1754(result);
}

void sub_23C7E5F1C()
{
  sub_23C88FB9C();
}

double sub_23C7E5F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_23C8291CC((uint64_t)va);
}

void sub_23C7E5F34()
{
  QueryInterfaceRequest.deleteAll(_:)();
}

void sub_23C7E5F48()
{
  __break(1u);
}

uint64_t sub_23C7E5F68()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_23C7E5F74@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(**(_QWORD **)result + 96));
  return result;
}

uint64_t sub_23C7E5F8C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_23C7E5F98()
{
  sqlite3_stmt *v0;

  return sqlite3_step(v0);
}

void sub_23C7E5FA0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  Association.unordered()(a1, a2, a3);
}

uint64_t sub_23C7E5FAC()
{
  uint64_t v0;

  return sub_23C7E2FA0(v0);
}

uint64_t sub_23C7E5FB8()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E5FDC()
{
  sub_23C8811C8((__n128 *)&STACK[0x340]);
}

uint64_t sub_23C7E5FE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];

  if (*(_BYTE *)result == 1)
  {
    result = (uint64_t)sub_23C8EB114();
    if (!v2)
    {
      if (result == 7102839 && v4 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v6 = sub_23C911A18();
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0)
        {
LABEL_12:
          result = sub_23C8E2078();
          if ((result & 1) == 0)
          {
            swift_beginAccess();
            sqlite3_exec(*(sqlite3 **)(a2 + 16), "ROLLBACK", 0, 0, 0);
            v7 = Statement.sql.getter();
            v9 = v8;
            Statement.arguments.getter(v14);
            v10 = v14[0];
            v11 = v14[1];
            v12 = *(_BYTE *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
            sub_23C7EF5D4();
            swift_allocError();
            *(_DWORD *)v13 = 4;
            *(_QWORD *)(v13 + 8) = 0xD000000000000015;
            *(_QWORD *)(v13 + 16) = 0x800000023C920720;
            *(_QWORD *)(v13 + 24) = v7;
            *(_QWORD *)(v13 + 32) = v9;
            *(_QWORD *)(v13 + 40) = v10;
            *(_QWORD *)(v13 + 48) = v11;
            *(_BYTE *)(v13 + 56) = v12;
            return swift_willThrow();
          }
          return result;
        }
      }
      result = Statement.isReadonly.getter();
      if ((result & 1) != 0)
        return result;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_23C7E6174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

uint64_t sub_23C7E6180()
{
  return swift_beginAccess();
}

uint64_t sub_23C7E6188()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7E6198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DE70C(a1, a2, 1, v2);
}

uint64_t sub_23C7E61A4()
{
  return sub_23C9117B4();
}

void sub_23C7E61C0()
{
  sub_23C7EA244();
}

uint64_t sub_23C7E61D4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  sub_23C815110(a1, a2, a3);
  return v3;
}

uint64_t sub_23C7E6218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return a3(a1, a2, v4, v3);
}

void sub_23C7E623C()
{
  sub_23C7E649C();
}

uint64_t sub_23C7E6260()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E6268()
{
  return 0;
}

uint64_t sub_23C7E6288()
{
  return sub_23C910F74();
}

uint64_t sub_23C7E6290()
{
  uint64_t v0;
  unint64_t v1;

  sub_23C7E56A4(v0, v1, 3);
  sub_23C7E56A4(v0, v1, 3);
  return sub_23C910950();
}

uint64_t sub_23C7E62C0()
{
  return swift_retain();
}

uint64_t sub_23C7E62C8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E62D8()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 152) = 0;
  *(_QWORD *)(v0 - 144) = 0;
  *(_BYTE *)(v0 - 136) = -1;
  return swift_retain();
}

void sub_23C7E6308()
{
  void *v0;

}

void sub_23C7E6310(__n128 *a1)
{
  sub_23C8738C4(a1);
}

uint64_t sub_23C7E6318()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E6328()
{
  uint64_t v0;

  return sub_23C7F5610(*(_QWORD *)(v0 - 304));
}

uint64_t sub_23C7E6344()
{
  uint64_t v0;

  return v0 - 200;
}

void *sub_23C7E635C(const void *a1)
{
  return memcpy(&STACK[0x218], a1, 0xA2uLL);
}

uint64_t sub_23C7E6370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v2, v1);
}

uint64_t sub_23C7E639C()
{
  return swift_bridgeObjectRetain();
}

_QWORD *sub_23C7E63A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;

  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v30 + 8) + 8))(&a30, v31);
}

uint64_t sub_23C7E63CC()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7E63D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E30C0(v1, v0, v2);
}

uint64_t sub_23C7E63F8()
{
  return sub_23C911460();
}

uint64_t sub_23C7E6408()
{
  return sub_23C910F2C();
}

uint64_t sub_23C7E6414()
{
  return swift_retain();
}

uint64_t sub_23C7E6428()
{
  uint64_t (*v0)(void);

  return v0();
}

void sub_23C7E6438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  DatabaseCursor.next()(v2, a1, v1);
}

void sub_23C7E644C(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.filter(_:)(a1, a2, a3);
}

void *sub_23C7E645C@<X0>(void *__src@<X0>, void *__dst@<X2>, size_t a3@<X8>)
{
  return memmove(__dst, __src, a3);
}

_QWORD *sub_23C7E6470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_23C7FA5C4(&a30);
}

uint64_t sub_23C7E6480()
{
  return sub_23C910F5C();
}

void sub_23C7E649C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE834();
  *v0 = v1;
}

void sub_23C7E64D0()
{
  sub_23C7FE834();
}

uint64_t sub_23C7E64EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
}

uint64_t sub_23C7E64FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E6514()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E6528()
{
  sub_23C7EE664();
}

uint64_t sub_23C7E6534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_23C7E654C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E6568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double);

  return sub_23C836020(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

uint64_t sub_23C7E6570(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  return sub_23C7DF6B0(v3, v2, v1, va);
}

uint64_t sub_23C7E658C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  return sub_23C800AA4(a1, a2, a3, v3, v4);
}

unint64_t sub_23C7E6598()
{
  return sub_23C822464();
}

uint64_t sub_23C7E65AC()
{
  uint64_t v0;

  return v0;
}

void *sub_23C7E65D0()
{
  return sub_23C7F96E0(&STACK[0x458], &STACK[0x2E0]);
}

uint64_t sub_23C7E65DC()
{
  return sub_23C910F5C();
}

void sub_23C7E65F0(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
}

uint64_t sub_23C7E65F8(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  return sub_23C8C8A98(a1, a2);
}

uint64_t sub_23C7E6604()
{
  return swift_release();
}

uint64_t sub_23C7E660C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2 - 152, v0, v1);
}

unint64_t sub_23C7E663C()
{
  return sub_23C7E94B8();
}

void sub_23C7E6648(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  sub_23C8E5200(a1, a2, a3, a4);
}

uint64_t sub_23C7E6650()
{
  return 0x4E494F5045564153;
}

uint64_t sub_23C7E667C()
{
  return sub_23C911124();
}

void sub_23C7E6688()
{
  sub_23C85E408();
}

void sub_23C7E66A0()
{
  sub_23C7F2620();
}

uint64_t sub_23C7E66AC()
{
  return swift_task_alloc();
}

uint64_t sub_23C7E66C0()
{
  return sub_23C7ECE1C();
}

uint64_t sub_23C7E66DC()
{
  return swift_retain();
}

uint64_t sub_23C7E66E4(uint64_t a1, ...)
{
  uint64_t v2;
  va_list va;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  return sub_23C8195F4((uint64_t)va1, (uint64_t *)va);
}

uint64_t sub_23C7E66F0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 - 128))(*(_QWORD *)(v1 - 72), v0);
}

void sub_23C7E670C()
{
  sub_23C7E649C();
}

uint64_t sub_23C7E6724()
{
  return swift_getAssociatedTypeWitness();
}

_QWORD *sub_23C7E6734(_QWORD *a1)
{
  uint64_t v1;

  return sub_23C7E7E34(a1, v1);
}

unint64_t sub_23C7E6748()
{
  return sub_23C7E3048();
}

sqlite3_int64 sub_23C7E6750()
{
  int v0;
  sqlite3_stmt *v1;

  return sqlite3_column_int64(v1, v0);
}

__n128 sub_23C7E675C()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 + 40);
  LOBYTE(STACK[0x24F]) = STACK[0x249];
  return result;
}

uint64_t sub_23C7E679C()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E67A8@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  const void *v2;

  return memcmp(a1, v2, a2);
}

uint64_t sub_23C7E67B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23C7E7E34(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_23C7E67DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_23C909E74((uint64_t *)&STACK[0x218], (uint64_t)&a9);
}

uint64_t sub_23C7E67E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23C7DE718(v0 + v2, 1, v1);
}

uint64_t sub_23C7E6810()
{
  return sub_23C911550();
}

void sub_23C7E682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = (v2 - 32) | 0x8000000000000000;
}

void sub_23C7E6844(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B3AB4(a1, a2);
}

uint64_t sub_23C7E684C()
{
  return type metadata accessor for ColumnDefinition();
}

uint64_t sub_23C7E6864()
{
  return type metadata accessor for StatementArgumentsSink();
}

uint64_t sub_23C7E6878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7F91AC(v2, a2, 0);
}

void sub_23C7E6884(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association._including(optional:)(a1, a2, a3);
}

uint64_t sub_23C7E68B4()
{
  uint64_t v0;

  return v0;
}

void *sub_23C7E68C8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_23C7F96E0(&a30, (void *)(a1 + 32));
}

void sub_23C7E68D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = v0;
}

uint64_t sub_23C7E68F4()
{
  int v0;

  return (v0 ^ 1) & 1;
}

uint64_t sub_23C7E690C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6918()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E6920()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E6930()
{
  return swift_release();
}

uint64_t sub_23C7E6938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_23C7DF56C(a4, (uint64_t)va);
}

void sub_23C7E6954()
{
  sub_23C7F16C0();
}

void sub_23C7E6960()
{
  __n128 *v0;

  sub_23C874D7C(v0 + 15);
}

_QWORD *sub_23C7E696C(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7DB5CC(a1, a2);
  return sub_23C8E43E8(v2, *(_QWORD *)(v3 + 8), v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C7E6998()
{
  return swift_deallocObject();
}

unint64_t sub_23C7E69A4(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  return sub_23C8A6DD0(a1, v1, v2);
}

uint64_t sub_23C7E69B0()
{
  _QWORD *v0;

  *v0 = 0;
  v0[1] = 0;
  return swift_initStackObject();
}

uint64_t sub_23C7E69D4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_23C7E69F0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_23C7E0BF0((uint64_t *)va);
}

uint64_t sub_23C7E69FC()
{
  return sub_23C911C4C();
}

void sub_23C7E6A20(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  AssociationToOne.forKey(_:)(a1, a2);
}

uint64_t sub_23C7E6A30()
{
  return swift_beginAccess();
}

uint64_t sub_23C7E6A44()
{
  return sub_23C8C8C84(STACK[0x218], STACK[0x220], 0);
}

uint64_t sub_23C7E6A6C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_23C7E6A7C()
{
  return 255;
}

uint64_t sub_23C7E6A88()
{
  return sub_23C910B54();
}

uint64_t sub_23C7E6A90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6AB0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7F9150(v1, v0, 0);
}

uint64_t sub_23C7E6AC0()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E6ADC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_23C7E1240(a1, v3, a3);
}

uint64_t sub_23C7E6AF8(uint64_t a1)
{
  uint64_t v1;

  return AssociationAggregate.forKey(_:)(a1, v1);
}

void *sub_23C7E6B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  return sub_23C801054(&a33, &a56);
}

void sub_23C7E6B1C(uint64_t a1, ...)
{
  void *v1;
  va_list va;

  va_start(va, a1);
  ! prefix(_:)((uint64_t *)va, v1);
}

uint64_t sub_23C7E6B40()
{
  return sub_23C910DAC();
}

void sub_23C7E6B54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_23C7E6BB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C7E6BCC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)va);
}

uint64_t sub_23C7E6BD4()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C7E6BF0()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C7E6BFC()
{
  return swift_release();
}

uint64_t sub_23C7E6C04()
{
  return sub_23C911BC8();
}

void *sub_23C7E6C18()
{
  return sub_23C800B48(&STACK[0x258], &STACK[0x300]);
}

uint64_t sub_23C7E6C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  uint64_t v20;
  uint64_t v21;
  va_list va;

  va_start(va, a20);
  *(_QWORD *)(v21 - 72) = v20;
  return sub_23C7DF56C(a5, (uint64_t)va);
}

uint64_t sub_23C7E6C50()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6C78()
{
  return sub_23C911634();
}

uint64_t sub_23C7E6C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t sub_23C7E6C98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;

  v3 = v2;
  v6 = v3[5];
  v7 = v3[6];
  sub_23C7E7E34(v3 + 2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 88))(a1, a2, v6, v7);
}

uint64_t sub_23C7E6CEC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v4, v3, v0, v2);
}

void sub_23C7E6D04()
{
  sub_23C8738C4((__n128 *)&STACK[0x2A8]);
}

uint64_t sub_23C7E6D0C()
{
  return swift_getDynamicType();
}

uint64_t sub_23C7E6D14()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6D28()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E6D40(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C7E6D48()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7E6D5C()
{
  return sub_23C910C80();
}

void sub_23C7E6D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v1;
  v5 = v0 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v3;
}

void sub_23C7E6D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void *v32;

  sub_23C86FFB4(v31, v30, &a30, &a9, v32);
}

uint64_t sub_23C7E6D94()
{
  return swift_retain();
}

uint64_t sub_23C7E6D9C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_23C7E6DAC()
{
  return swift_release();
}

void sub_23C7E6DB4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  Association.distinct()(a1, a2, a3);
}

void sub_23C7E6DC0()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

void sub_23C7E6DEC()
{
  sub_23C7F2620();
}

uint64_t sub_23C7E6DFC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23C7E6E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for QueryInterfaceRequest(0, v4, a3, a4);
}

uint64_t sub_23C7E6E30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6E44()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E6E58()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7E6E64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E6E78()
{
  return 24;
}

uint64_t sub_23C7E6E84()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7E6EA0()
{
  sub_23C8714F8();
}

void sub_23C7E6EB8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C87B95C(v1, a1);
}

uint64_t sub_23C7E6EC4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6ED8()
{
  return sub_23C9116F4();
}

uint64_t sub_23C7E6EE8()
{
  return sub_23C8A22F0((uint64_t)&STACK[0x510]);
}

uint64_t sub_23C7E6EF0()
{
  return swift_release();
}

uint64_t sub_23C7E6EFC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E6F14()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E6F24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7DE718(v1, 1, v0);
}

uint64_t sub_23C7E6F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  return sub_23C8EDB30(v0, v1, v2, v3);
}

uint64_t sub_23C7E6F58@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_23C88CFE0(0, (unint64_t)(a1 + 63) >> 6, v1);
}

void sub_23C7E6F6C()
{
  JUMPOUT(0x242624DB0);
}

uint64_t sub_23C7E6F78()
{
  return sub_23C910E3C();
}

uint64_t sub_23C7E6F90(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  char v21;

  v21 = a5;
  switch((a21 >> 19) & 0x1F)
  {
    case 0u:
    case 3u:
    case 5u:
      goto LABEL_8;
    case 1u:
      swift_bridgeObjectRelease();
      return swift_release();
    case 2u:
      return sub_23C7E5640(result, a2, a3);
    case 4u:
    case 0xAu:
      return sub_23C7F9AE0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 6u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      return swift_release();
    case 9u:
      swift_bridgeObjectRelease();
      sub_23C7E5640(a3, a4, v21);
      goto LABEL_8;
    case 0x11u:
      swift_bridgeObjectRelease();
LABEL_8:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C7E70E4()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 128) != 1)
    return *(_QWORD *)(v0 + 120);
  result = sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v0 + 16));
  *(_QWORD *)(v0 + 120) = (int)result;
  *(_BYTE *)(v0 + 128) = 0;
  return result;
}

uint64_t sub_23C7E711C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C7E7134(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C7E711C(a1, a2, a3);
  return a1;
}

void sub_23C7E7148()
{
  sub_23C7E2378(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___authorizer, (void (*)(void))type metadata accessor for StatementAuthorizer, 66, sub_23C847174);
}

uint64_t sub_23C7E7168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t result;

  sub_23C7E3084();
  v1 = MEMORY[0x24BEE4AF8];
  v2 = sub_23C910DAC();
  sub_23C7E9898();
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v1;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 40) = 0;
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  v5 = *(_BYTE *)(v0 + 64);
  *(_BYTE *)(v0 + 64) = -1;
  result = sub_23C7E2E54(v3, v4, v5);
  *(_BYTE *)(v0 + 65) = 0;
  return result;
}

uint64_t Statement.__deallocating_deinit()
{
  Statement.deinit();
  return swift_deallocClassInstance();
}

void Statement.deinit()
{
  uint64_t v0;

  sqlite3_finalize(*(sqlite3_stmt **)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E2E54(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  sub_23C7DB390();
}

uint64_t sub_23C7E7288(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C7E72A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  GRDBInternal::StatementArguments v20;
  uint64_t v21[3];
  const char *v22[2];

  v22[1] = *(const char **)MEMORY[0x24BDAC8D0];
  if (result)
  {
    v6 = result;
    v22[0] = 0;
    v7 = (const char *)(result + *(_QWORD *)(a2 + 56));
    v8 = *(_DWORD *)(a2 + 32);
    type metadata accessor for Statement();
    swift_allocObject();
    v9 = swift_retain();
    result = sub_23C7E2B10(v9, v7, v22, v8);
    if (v3)
      return result;
    if (!v22[0])
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }
    v10 = result;
    *(_QWORD *)(a2 + 56) = &v22[0][-v6];
    if (result)
    {
      sub_23C7E7678(v21);
      v11 = v21[0];
      swift_retain();
      sub_23C7E13C4(v11);
      if (!v11)
      {
LABEL_11:
        result = swift_release();
        *a3 = v10;
        return result;
      }
      v12 = (_QWORD *)(a2 + 64);
      result = swift_beginAccess();
      if (*(_QWORD *)(a2 + 64))
      {
        sub_23C7E1F74();
        v14 = v13;
        swift_retain();
        sub_23C8C8840(v14, v12, v10);
        v16 = v15;
        swift_endAccess();
        v17 = swift_bridgeObjectRelease();
        MEMORY[0x24BDAC7A8](v17);
        sub_23C7E79A8(&qword_25430CF60);
        sub_23C7E127C((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
        swift_getKeyPath();
        swift_retain();
        sub_23C8C8974(v16);
        v19 = v18;
        swift_bridgeObjectRelease();
        swift_release();
        v21[0] = v19;
        v21[1] = MEMORY[0x24BEE4B00];
        v20.values._rawValue = v21;
        Statement.setUncheckedArguments(_:)(v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    result = sub_23C7E754C();
  }
  *a3 = 0;
  return result;
}

uint64_t type metadata accessor for Statement()
{
  return objc_opt_self();
}

uint64_t sub_23C7E754C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = sub_23C7E7678(&v8);
  v2 = v8;
  if (v8)
  {
    if (*(_BYTE *)(v0 + 48) == 1)
    {
      return sub_23C7E13C4(v8);
    }
    else
    {
      v3 = swift_bridgeObjectRetain();
      sub_23C7E13C4(v3);
      v4 = *(_QWORD *)(v2 + 16);
      result = swift_bridgeObjectRelease();
      if (v4)
      {
        v8 = 0;
        v9 = 0xE000000000000000;
        sub_23C911634();
        swift_bridgeObjectRelease();
        v8 = 0xD000000000000025;
        v9 = 0x800000023C91F8C0;
        sub_23C911880();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        v5 = v8;
        v6 = v9;
        sub_23C7EF5D4();
        sub_23C7DB694();
        *(_DWORD *)v7 = 21;
        *(_QWORD *)(v7 + 8) = v5;
        *(_QWORD *)(v7 + 16) = v6;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_BYTE *)(v7 + 56) = 0;
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_23C7E7678@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  *a1 = v3;
  a1[1] = v4;
  return sub_23C7E76BC(v3);
}

uint64_t sub_23C7E76BC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C7E76E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E76F8()
{
  uint64_t v0;

  return sub_23C7E76BC(v0);
}

uint64_t sub_23C7E7704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a9);
}

uint64_t sub_23C7E770C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

BOOL sub_23C7E7730@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23C7E775C(uint64_t a1, unint64_t a2)
{
  return sub_23C7E56A4(a1, a2, 3);
}

uint64_t sub_23C7E7764()
{
  return swift_retain();
}

uint64_t sub_23C7E776C()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7E7774()
{
  return sub_23C910DAC();
}

void sub_23C7E7794(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a4;
  v5 = v4;
  v16 = a2;
  v8 = sub_23C910D34();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 96));
  sub_23C7E79A8(&qword_25430D558);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  v14 = v12;
  sub_23C910D28();
  v22 = v13;
  sub_23C7E7A2C();
  sub_23C7E79A8(&qword_25430D600);
  sub_23C7E79E8();
  sub_23C911574();
  v18 = a3;
  v19 = a1;
  v20 = v16;
  v21 = v5;
  sub_23C911454();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

}

void sub_23C7E7900(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23C7E79A8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_23C7DB390();
}

uint64_t sub_23C7E7938(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23C7E79A8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23C7E7974(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23C902D64(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_23C7DB390();
}

uint64_t sub_23C7E79A8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426260E8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_23C7E79E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430D550;
  if (!qword_25430D550)
  {
    v1 = sub_23C7DDB10(&qword_25430D600);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25430D550);
  }
  return result;
}

unint64_t sub_23C7E7A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430D5F8;
  if (!qword_25430D5F8)
  {
    v1 = sub_23C910D34();
    result = MEMORY[0x242626100](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&qword_25430D5F8);
  }
  return result;
}

uint64_t sub_23C7E7A6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_23C7E7AAC(id result)
{
  if ((unint64_t)result >= 3)
    return result;
  return result;
}

void sub_23C7E7ABC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(*a2 + 16))
    {
LABEL_9:
      sub_23C7E7C70(a5);
      goto LABEL_12;
    }
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C911880();
    sub_23C910F5C();
    sub_23C7DB398();
LABEL_11:
    Statement.sql.getter();
    sub_23C8E36D4();
    v18 = sub_23C7DB694();
    sub_23C7E193C(v18, v19);
    *a4 = a3;
    goto LABEL_12;
  }
  v9 = a2[1];
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_8:
    if (*(_QWORD *)(*a2 + 16))
      goto LABEL_9;
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    goto LABEL_11;
  }
  sub_23C7DBBB0();
  v10 = sub_23C7E94B8();
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v9 + 56) + 24 * v10;
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  v16 = sub_23C7DF8B0();
  sub_23C7E56A4(v16, v17, v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = v15;
LABEL_12:
  sub_23C7E21A4();
}

void sub_23C7E7C70(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_BYTE *)(v2 + 48);
    *(_BYTE *)(a1 + 16) = v5;
    sub_23C7E56A4(v3, v4, v5);
    sub_23C7E7CAC();
  }
  else
  {
    __break(1u);
  }
}

void sub_23C7E7CAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v15;

  sub_23C7DF844();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  sub_23C902DA8();
  if (v6 != v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = v5;
  v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(_QWORD *)(v0 + 24) >> 1)
  {
    sub_23C7EDFC4();
    v0 = v11;
  }
  sub_23C902EA8();
  if (!v9)
    goto LABEL_18;
  v12 = *(_QWORD *)(v0 + 16);
  if (__OFSUB__(v12, v2))
    goto LABEL_24;
  v13 = (const void *)(v0 + 32 + 24 * v2);
  if (v8 != v2 || (unint64_t)v13 + 24 * (v12 - v2) <= v0 + 32 + 24 * v8)
  {
    memmove((void *)(v0 + 32 + 24 * v8), v13, 24 * (v12 - v2));
    v12 = *(_QWORD *)(v0 + 16);
  }
  v7 = __OFADD__(v12, v10);
  v15 = v12 - v9;
  if (!v7)
  {
    *(_QWORD *)(v0 + 16) = v15;
LABEL_18:
    *v1 = v0;
    sub_23C7DEEA8();
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_23C7E7DA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_23C7E7DAC()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C7E7DB4()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E7DC8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C7E7DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 792) = a1;
  *(_QWORD *)(v1 + 800) = 0xE100000000000000;
  return sub_23C910F5C();
}

uint64_t sub_23C7E7DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_23C7E7A6C((uint64_t)va);
}

uint64_t sub_23C7E7DF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C7E5640(v1, v2, 0);
  return v0;
}

uint64_t sub_23C7E7E20()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E7E2C()
{
  sub_23C7FD468();
}

_QWORD *sub_23C7E7E34(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_23C7E7E58(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  char v21;

  v21 = a5;
  switch((a21 >> 19) & 0x1F)
  {
    case 0u:
    case 3u:
    case 5u:
      goto LABEL_8;
    case 1u:
      swift_bridgeObjectRetain();
      return swift_retain();
    case 2u:
      return sub_23C7E56A4(result, a2, a3);
    case 4u:
    case 0xAu:
      return sub_23C7FD5D8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 6u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      return swift_retain();
    case 9u:
      swift_bridgeObjectRetain();
      sub_23C7E56A4(a3, a4, v21);
      goto LABEL_8;
    case 0x11u:
      swift_bridgeObjectRetain();
LABEL_8:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_23C7E7FAC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

uint64_t sub_23C7E803C()
{
  return swift_getObjectType();
}

uint64_t sub_23C7E805C()
{
  return swift_getObjectType();
}

uint64_t sub_23C7E807C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  va_list va;

  va_start(va, a3);
  v3[10] = a1;
  v3[11] = a2;
  v3[7] = 0;
  v3[8] = 0;
  return sub_23C7EFC04((uint64_t)va, (uint64_t)(v3 + 2));
}

uint64_t sub_23C7E8090()
{
  return swift_willThrow();
}

void *sub_23C7E809C(uint64_t a1, ...)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  v3 = *v1;
  *(_QWORD *)(v3 + 16) = v2 + 1;
  return sub_23C7F96E0(va, (void *)(v3 + 184 * v2 + 32));
}

uint64_t sub_23C7E80BC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
}

uint64_t sub_23C7E80E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = *(_QWORD *)(v3 - 96);
  sub_23C7E5640(v1, v4, 3);
  sub_23C7E5640(v0, v2, 3);
  sub_23C7E5640(v1, v4, 3);
  return v0;
}

__n128 sub_23C7E8130()
{
  __n128 *v0;

  return v0[6];
}

_QWORD *sub_23C7E8178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  return FetchRequest.databaseRegion(_:)(v2, v1, a1, v3);
}

void sub_23C7E8190()
{
  sub_23C7F16C0();
}

void sub_23C7E81A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  sub_23C817B24(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3, a4, a5);
}

uint64_t sub_23C7E81B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_23C8195F4((uint64_t)&a14, &a9);
}

uint64_t sub_23C7E81C0()
{
  return sub_23C9110A0();
}

void *sub_23C7E81DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(a2, a2, a3, &a30);
}

uint64_t sub_23C7E81F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, sqlite3_stmt *a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  *(_QWORD *)(v36 - 72) = a1;
  a21 = v34;
  a22 = v32;
  a23 = v33;
  a24 = v35;
  a25 = v28;
  a26 = v31;
  a27 = v29;
  a28 = v30;
  return sub_23C7EEF08(a11, a14, (uint64_t)&a18);
}

void *sub_23C7E822C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v3 - 72);
  *(_QWORD *)(v4 + 8 * (v1 >> 6) + 64) |= 1 << v1;
  v5 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v1);
  *v5 = v0;
  v5[1] = v2;
  return memcpy((void *)(*(_QWORD *)(v4 + 56) + 176 * v1), &STACK[0x318], 0xABuLL);
}

void sub_23C7E8270(_DWORD *a1@<X8>)
{
  int v1;

  *a1 = v1;
}

uint64_t sub_23C7E8278()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E8294(__n128 *a1, __n128 a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  v3 = v2[3];
  v4 = v2[4];
  sub_23C7E7E34(v2, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
}

uint64_t sub_23C7E82CC(uint64_t a1, const char *a2)
{
  const char *v2;

  return strcmp(v2, a2);
}

uint64_t sub_23C7E82D4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v2, v3, 3);
  return sub_23C7E5640(v0, v1, 3);
}

uint64_t sub_23C7E830C()
{
  return type metadata accessor for Configuration();
}

uint64_t sub_23C7E8314(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[5];
  v6 = v2[6];
  sub_23C7E7E34(v2 + 2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88))(a1, a2, v5, v6);
}

uint64_t sub_23C7E8358@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __int16 a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, __int16 a15, char a16, uint64_t a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 120) = a8;
  *(_QWORD *)(v27 - 112) = a1;
  *(_QWORD *)(v27 - 104) = v26;
  *(_OWORD *)(v27 - 96) = a23;
  *(_QWORD *)(v27 - 80) = a17;
  *(_BYTE *)(v27 - 72) = a16;
  *(_OWORD *)(v27 - 64) = a22;
  *(_OWORD *)(v27 - 48) = a21;
  *(_BYTE *)(v27 - 32) = a14;
  *(_OWORD *)(v27 - 24) = a20;
  *(_OWORD *)(v27 - 8) = a19;
  *(_OWORD *)(v27 + 8) = a18;
  *(_BYTE *)(v27 + 24) = a12;
  *(_BYTE *)(v27 + 25) = a5;
  *(_BYTE *)(v27 + 26) = a7;
  return sub_23C812FA8((uint64_t)&a26);
}

unint64_t sub_23C7E83C8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_23C7E83FC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

uint64_t sub_23C7E840C()
{
  return sub_23C91167C();
}

uint64_t sub_23C7E8430@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>)
{
  uint64_t v14;
  uint64_t v15;

  return sub_23C7E6F90(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_i64[0], a10.n128_i64[1], a11.n128_i64[0], a11.n128_i64[1], a12.n128_i64[0], a12.n128_i64[1], a13.n128_i64[0], a13.n128_i64[1], a14.n128_i64[0], a14.n128_i64[1], v14,
           v15,
           a9);
}

void sub_23C7E8460()
{
  JUMPOUT(0x2426261F0);
}

uint64_t sub_23C7E846C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E847C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return sub_23C8812E4(a10, v10, v12, v11, 1);
}

uint64_t sub_23C7E8494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  sqlite3_stmt *v4;

  return sub_23C802FAC(a1, a2, a3, v4, v3);
}

uint64_t sub_23C7E84A4()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E84B8()
{
  return swift_beginAccess();
}

void *sub_23C7E84CC(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  v3 = *v2;
  *(_QWORD *)(v3 + 16) = v1 + 1;
  return sub_23C7F96E0(va, (void *)(v3 + 184 * v1 + 32));
}

void sub_23C7E851C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v7 - 200) = v5;
  *(_QWORD *)(v7 - 192) = v4;
  *(_QWORD *)(v7 - 184) = v3;
  *(_QWORD *)(v7 - 176) = v2;
  *(_QWORD *)(v7 - 168) = v1;
  *(_QWORD *)(v7 - 160) = v0;
  v8 = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v7 - 152) = v6;
  *(_QWORD *)(v7 - 144) = v8;
  v9 = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 128) = v9;
  *(_BYTE *)(v7 - 120) = *(_DWORD *)(v7 - 284);
  v10 = *(_QWORD *)(v7 - 272);
  *(_QWORD *)(v7 - 112) = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 104) = v10;
  *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 264);
}

uint64_t sub_23C7E8578()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C7E8588()
{
  uint64_t v0;

  return sub_23C8D1E4C(*(_QWORD *)(v0 + 16));
}

void sub_23C7E8598()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7E85B0()
{
  char v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)(v1 + v2[17]) = 0;
  *(_QWORD *)(v1 + v2[18]) = 0;
  *(_BYTE *)(v1 + v2[19]) = v0;
  *(_BYTE *)(v1 + v2[20]) = 0;
  v3 = (_QWORD *)(v1 + v2[21]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + v2[22]);
  *v4 = 0;
  v4[1] = 0;
  return type metadata accessor for DatabaseQueue();
}

uint64_t sub_23C7E85F8()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E8608(uint64_t a1, uint64_t a2)
{
  return sub_23C82D9E0(a1, a2);
}

uint64_t sub_23C7E8618()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E8624()
{
  return sub_23C8946A8((__n128 *)&STACK[0x388]);
}

uint64_t sub_23C7E8630()
{
  return sub_23C911C04();
}

uint64_t sub_23C7E863C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_23C7E8648()
{
  return sub_23C910A28();
}

uint64_t sub_23C7E866C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E869C()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E86B4()
{
  return swift_beginAccess();
}

uint64_t sub_23C7E86C8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *v1 = *a1;
  v1[1] = v2;
  v1[2] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E86DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  return swift_willThrow();
}

void sub_23C7E8700()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
}

uint64_t sub_23C7E870C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E8724()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E873C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E8748()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v1, v0, 3);
  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v1, v0, 3);
  return sub_23C7E5640(v1, v0, 3);
}

void *sub_23C7E87A0@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

__n128 sub_23C7E87B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __n128 a13, __int128 a14, __int128 a15, char a16)
{
  __n128 result;

  result = a13;
  *(_DWORD *)a2 = a12;
  *(__n128 *)(a2 + 8) = a13;
  *(_OWORD *)(a2 + 24) = a14;
  *(_OWORD *)(a2 + 40) = a15;
  *(_BYTE *)(a2 + 56) = a16;
  return result;
}

_QWORD *sub_23C7E87DC()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_23C7E7E34(v0, v1);
}

void *sub_23C7E87FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a3, &a30);
}

uint64_t sub_23C7E8828()
{
  return swift_dynamicCast();
}

uint64_t sub_23C7E8844()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v0, v1, 3);
  return sub_23C7E56A4(v2, v3, 3);
}

uint64_t sub_23C7E886C()
{
  return sub_23C910B6C();
}

uint64_t sub_23C7E8874()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E88A0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_23C7E88AC()
{
  return sub_23C911A18();
}

unint64_t sub_23C7E88C4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;

  return a1 | ((unint64_t)v1 << 32);
}

uint64_t sub_23C7E8910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned __int8 v11;

  sub_23C815EF0(a10, v10, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E894C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>)
{
  uint64_t v14;
  unsigned __int16 v15;

  return sub_23C8131FC(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_i64[0], a10.n128_i64[1], a11.n128_i64[0], a11.n128_i64[1], a12.n128_i64[0], a12.n128_i64[1], a13.n128_i64[0], a13.n128_i64[1], a14.n128_i64[0], a14.n128_i64[1], a9,
           v14,
           v15);
}

uint64_t sub_23C7E8964()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_23C7E8990()
{
  return swift_initStructMetadata();
}

void sub_23C7E89B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 16) = v3 + 1;
  v5 = (_QWORD *)(v4 + 32 * v3);
  v5[4] = v1;
  v5[5] = v2;
  v5[6] = 0;
}

uint64_t sub_23C7E89CC()
{
  uint64_t v0;
  unint64_t v1;

  sub_23C7E56A4(v0, v1, 3);
  sub_23C7E56A4(v0, v1, 3);
  return swift_retain();
}

uint64_t sub_23C7E8A08()
{
  return swift_release();
}

uint64_t sub_23C7E8A20()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return sub_23C8634E8(v1, v0, 1);
}

uint64_t sub_23C7E8A48()
{
  return sub_23C910BA8();
}

uint64_t sub_23C7E8A5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W8>)
{
  uint64_t v5;

  *(_DWORD *)(v5 - 4) = a5;
  return sub_23C876608(a1, a2, (int *)(v5 - 4), a3, a4);
}

uint64_t sub_23C7E8A68()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 3);
}

uint64_t sub_23C7E8A78()
{
  return sub_23C911634();
}

uint64_t sub_23C7E8A8C(__n128 *a1, __n128 a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  v3 = v2[3];
  v4 = v2[4];
  sub_23C7E7E34(v2, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
}

void sub_23C7E8AC4()
{
  sub_23C7ECD84();
}

uint64_t sub_23C7E8AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  sub_23C7F5610(a1);
  sub_23C7F5610(v22);
  sub_23C7F5610(v21);
  return sub_23C7F5610(a21);
}

uint64_t sub_23C7E8B04()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C88E0F8(v1, v0);
}

uint64_t sub_23C7E8B10()
{
  return swift_release();
}

uint64_t sub_23C7E8B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v2, v1);
}

uint64_t sub_23C7E8B40()
{
  return swift_retain();
}

uint64_t sub_23C7E8B58()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E8B74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E8B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v1;
  *(_QWORD *)(v2 - 88) = v0;
  return v2 - 96;
}

uint64_t sub_23C7E8B90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_23C7E7E34(v0, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v1);
}

void *sub_23C7E8BC4(int a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char __dst)
{
  return memcpy(&__dst, a2, 0xA2uLL);
}

uint64_t sub_23C7E8BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7F5610(a1);
  sub_23C7F5610(v1);
  sub_23C7F5610(v2);
  return sub_23C7F5610(v3);
}

uint64_t sub_23C7E8C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a7(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23C7E8C1C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C88E0F8(v0, v1);
}

uint64_t sub_23C7E8C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_23C7E8C54()
{
  sub_23C86E598();
}

void sub_23C7E8C64(uint64_t a1, _DWORD *a2)
{
  *a2 = 21;
}

uint64_t sub_23C7E8C78()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E8C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  va_list va;

  va_start(va, a20);
  return sub_23C7DF56C(a5, (uint64_t)va);
}

__n128 sub_23C7E8CB0()
{
  uint64_t v0;
  char v1;
  __n128 result;
  __int128 v3;

  v1 = *(_BYTE *)(v0 - 128);
  *(_QWORD *)(v0 - 216) = *(_QWORD *)(v0 - 152);
  *(_OWORD *)(v0 - 208) = *(_OWORD *)(v0 - 144);
  *(_BYTE *)(v0 - 192) = v1;
  result = *(__n128 *)(v0 - 120);
  v3 = *(_OWORD *)(v0 - 104);
  *(__n128 *)(v0 - 184) = result;
  *(_OWORD *)(v0 - 168) = v3;
  return result;
}

uint64_t sub_23C7E8CDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_23C7E8D04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  FetchRequest<>.fetchCursor(_:)(v3, v2, a1, v1);
}

uint64_t sub_23C7E8D20()
{
  uint64_t v0;

  return v0;
}

BOOL sub_23C7E8D40@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_23C7E8D4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 24) = v0;
  return swift_task_dealloc();
}

uint64_t sub_23C7E8D80()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C7E8D8C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E8DA0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E8DAC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7E03E4(v0, v1);
}

void *sub_23C7E8DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;

  return sub_23C801054(&a32, v32);
}

uint64_t sub_23C7E8DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_23C84C328(a1, 0, 0, v5, a5);
}

uint64_t sub_23C7E8DDC()
{
  return swift_release();
}

uint64_t *sub_23C7E8DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  a13 = v14;
  a14 = a7;
  return sub_23C812004(&a10);
}

void sub_23C7E8DF0(uint64_t a1)
{
  uint64_t *v1;

  sub_23C7E7900(a1, v1);
}

void sub_23C7E8DF8()
{
  sub_23C7E649C();
}

uint64_t sub_23C7E8E10()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E8E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t *v29;

  return sub_23C7E7938((uint64_t)&a29, v29);
}

uint64_t sub_23C7E8E2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7E8E68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C7DA7B4(a1, a2, v2);
}

uint64_t sub_23C7E8E70()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_23C7E8E90()
{
  return swift_getTupleTypeMetadata2();
}

__n128 sub_23C7E8E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13)
{
  __n128 *v13;
  __n128 result;

  result = a9;
  *v13 = a9;
  v13[1] = a10;
  v13[2] = a11;
  v13[3] = a12;
  v13[4] = a13;
  return result;
}

uint64_t sub_23C7E8ED4()
{
  return sub_23C910F5C();
}

void sub_23C7E8F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  a11 = v12;
  a12 = v13;
  v14 = &a11;
  Statement.setArguments(_:)(*(GRDBInternal::StatementArguments *)(&a2 - 1));
}

_BYTE *sub_23C7E8F14(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 + 96)) = *result;
  return result;
}

uint64_t sub_23C7E8F2C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return RangeReplaceableCollection.init<A>(_:)(v3, (uint64_t)va);
}

uint64_t sub_23C7E8F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_QWORD *)(a12 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void sub_23C7E8F5C(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association._including(all:)(a1, a2, a3);
}

void sub_23C7E8F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  FetchRequest<>.fetchSet(_:)(a9, v9, a1, *(_QWORD *)(v11 - 72), v10);
}

uint64_t sub_23C7E8FA0()
{
  return sub_23C910F5C();
}

void sub_23C7E8FD4()
{
  sub_23C7ECD84();
}

uint64_t sub_23C7E8FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 64) = *(_QWORD *)(v2 - 56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 24))(v1, v0);
}

uint64_t sub_23C7E9004()
{
  return swift_release();
}

void sub_23C7E902C()
{
  sub_23C7F16C0();
}

void sub_23C7E9038(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t sub_23C7E9064()
{
  return sub_23C911BBC();
}

uint64_t sub_23C7E9070()
{
  return swift_allocObject();
}

void *sub_23C7E907C(uint64_t a1, ...)
{
  void *v1;
  va_list va;

  va_start(va, a1);
  return sub_23C800B48(va, v1);
}

unint64_t sub_23C7E9088()
{
  return sub_23C83256C();
}

unint64_t sub_23C7E90A8()
{
  return sub_23C7E94B8();
}

void *sub_23C7E90B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a4, &a30);
}

uint64_t sub_23C7E90F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_23C7E7E34(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_23C7E912C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 3);
}

_QWORD *sub_23C7E913C()
{
  uint64_t v0;

  return sub_23C7E7E34((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23C7E9168()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return v1;
}

uint64_t sub_23C7E9190()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

uint64_t sub_23C7E91A0(uint64_t a1, uint64_t a2)
{
  return sub_23C7E56A4(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_23C7E91C0()
{
  return sub_23C910BCC();
}

void sub_23C7E91C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14, int a15, char a16, int a17, char a18, int a19, char a20,int a21,char a22,int a23,char a24,int a25,char a26,int a27,char a28,int a29,char a30,int a31,char a32)
{
  char v32;
  char v33;
  uint64_t v34;

  *(_BYTE *)(v34 - 144) = v32;
  *(_BYTE *)(v34 - 143) = a12;
  *(_BYTE *)(v34 - 142) = a14;
  *(_BYTE *)(v34 - 141) = a16;
  *(_BYTE *)(v34 - 140) = a28;
  *(_BYTE *)(v34 - 139) = a18;
  *(_BYTE *)(v34 - 138) = a20;
  *(_BYTE *)(v34 - 137) = a22;
  *(_BYTE *)(v34 - 136) = v33;
  *(_BYTE *)(v34 - 135) = a24;
  *(_BYTE *)(v34 - 134) = a26;
  *(_BYTE *)(v34 - 133) = a30;
  *(_BYTE *)(v34 - 132) = a32;
}

uint64_t sub_23C7E922C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C87F284(v1, v0);
}

uint64_t sub_23C7E923C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E9258(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  sqlite3_stmt *v4;

  return sub_23C7EF0A4(a1, a2, a3, v4, v3);
}

uint64_t sub_23C7E9268()
{
  return sub_23C910F5C();
}

void sub_23C7E9288()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1 + 1;
}

void sub_23C7E92A4()
{
  sub_23C88FB9C();
}

uint64_t sub_23C7E92AC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1, v1);
}

uint64_t sub_23C7E92BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __int128 a3, uint64_t a4, uint64_t a5, char a6, int a7, uint64_t __src)
{
  uint64_t *v8;

  *(_QWORD *)&a3 = a2;
  *((_QWORD *)&a3 + 1) = a1;
  a4 = 0;
  a5 = 0;
  a6 = 0x80;
  return sub_23C87F40C(&__src, &a3, v8);
}

void sub_23C7E92E4()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7E92FC()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)v0 = 1;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 23) = 0;
  *(_QWORD *)(v0 + 32) = v1;
  *(_WORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 2;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = -1;
  *(_QWORD *)(v0 + 96) = 5;
  return sub_23C910D4C();
}

uint64_t sub_23C7E9340()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9358(__n128 *a1)
{
  return sub_23C8946A8(a1);
}

void *sub_23C7E9360(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x70uLL);
}

uint64_t sub_23C7E9388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23C7DE70C(v4, 1, 1, a4);
  return sub_23C910C38();
}

uint64_t sub_23C7E93A8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E93C0()
{
  uint64_t v0;

  return sub_23C8BB11C(*(_QWORD *)(v0 - 272));
}

uint64_t sub_23C7E93E4()
{
  return sub_23C910F14();
}

uint64_t sub_23C7E93F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a2 = 21;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = (v5 - 32) | 0x8000000000000000;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E9418()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E942C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_23C7E9444()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E9474()
{
  return sub_23C910E60();
}

uint64_t sub_23C7E947C()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7E9498()
{
  return swift_allocObject();
}

unint64_t sub_23C7E94B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C7E9064();
  sub_23C7E58DC();
  sub_23C7DA4F4();
  v0 = sub_23C7EBCB0();
  return sub_23C7E01D0(v0, v1, v2);
}

void sub_23C7E9510()
{
  sub_23C8FA41C();
}

uint64_t sub_23C7E951C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  sqlite3_stmt *v4;

  return sub_23C7EF0A4(a1, a2, a3, v4, v3);
}

uint64_t sub_23C7E953C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  *(_QWORD *)(v2 - 72) = v0;
  return v3(v0, v1);
}

uint64_t sub_23C7E959C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 40 * a1;
}

uint64_t sub_23C7E95AC()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C7E95B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_23C7E95C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C812DD0(v3, v4, v0, v1, v2);
}

uint64_t sub_23C7E95E0()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23C7E95F4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result[2] = v3;
  result[3] = v2;
  result[4] = v4;
  result[5] = v1;
  return result;
}

uint64_t sub_23C7E9610()
{
  return swift_retain();
}

uint64_t sub_23C7E9624(_QWORD *a1)
{
  uint64_t v1;

  return RowDecodingContext.init(row:key:)(a1, (__int128 *)(v1 - 152), v1 - 128);
}

uint64_t sub_23C7E9630()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9648()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9660()
{
  return swift_bridgeObjectRelease();
}

void *sub_23C7E9670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __dst)
{
  return memcpy(&__dst, &a9, 0xA8uLL);
}

uint64_t sub_23C7E9680()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E9694(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7DE718(v1, 1, a1);
}

_QWORD *sub_23C7E96C4(_QWORD *a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  return sub_23C8010AC(a1, v1);
}

uint64_t sub_23C7E96CC()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E96DC()
{
  return sub_23C911460();
}

void sub_23C7E96E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7F2100(a1, a2, 1, v2);
}

uint64_t sub_23C7E96F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7E96FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9734()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_23C7E9744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(a7 + 32))((uint64_t *)va, a1, 0, a4, a7);
}

uint64_t sub_23C7E9770(uint64_t a1)
{
  return Database.statementDidExecute(_:)(a1);
}

void sub_23C7E9778(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.order(_:)(a1, a2, a3);
}

uint64_t sub_23C7E9788()
{
  return sub_23C7E76BC(0);
}

uint64_t sub_23C7E9794()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v2, v1);
}

uint64_t sub_23C7E97B0()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7E97C0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 1);
}

uint64_t sub_23C7E97D0()
{
  uint64_t v0;

  return sub_23C805EAC(v0);
}

uint64_t sub_23C7E97D8()
{
  uint64_t v0;

  return sub_23C8011F0(v0 - 248);
}

void sub_23C7E97E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = v1;
  v5 = v3 + 16 * v2;
  *(_QWORD *)(v5 + 32) = v0;
  *(_QWORD *)(v5 + 40) = v4;
}

double sub_23C7E97F0@<D0>(double a1@<X8>)
{
  return a1;
}

uint64_t sub_23C7E9804(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_23C7E7938((uint64_t)va, a2);
}

uint64_t sub_23C7E980C()
{
  return swift_allocObject();
}

_QWORD *sub_23C7E9820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v11 + 16) + 8))((uint64_t *)va, a8);
}

void *sub_23C7E9838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t __dst)
{
  return memcpy(&__dst, &STACK[0x300], 0xA3uLL);
}

uint64_t sub_23C7E9848()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  return sub_23C8152BC(a1, (uint64_t)va, v12);
}

uint64_t sub_23C7E9860()
{
  uint64_t v0;

  return sub_23C8329F0(v0 - 216);
}

uint64_t sub_23C7E9868()
{
  return sub_23C911778();
}

uint64_t sub_23C7E987C()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E988C()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E9898()
{
  return swift_beginAccess();
}

uint64_t sub_23C7E98A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(a1, a2, 2);
  sub_23C7E56A4(v2, v3, 2);
  return sub_23C7E5640(v2, v3, 2);
}

uint64_t sub_23C7E98D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7E98E4()
{
  uint64_t v0;

  return v0;
}

void *sub_23C7E98F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 72) = v1;
  return memcpy(&STACK[0x250], (const void *)(v2 + 232 * a1 - 200), 0xE3uLL);
}

uint64_t sub_23C7E993C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9950()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9960()
{
  uint64_t v0;

  return v0;
}

void sub_23C7E9970()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C811870(v1, v0);
}

uint64_t sub_23C7E9980()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 192) + 8))(v0, *(_QWORD *)(v1 - 96));
}

uint64_t sub_23C7E9994()
{
  return swift_getAssociatedTypeWitness();
}

void sub_23C7E99C4(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_23C7F2100(a1 > 1, v2, 1, v1);
}

void *sub_23C7E99DC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return sub_23C7F96E0(&a2, (void *)(a1 + 32));
}

__n128 *sub_23C7E9A00(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_23C7E9A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_23C86361C((uint64_t)&a30);
}

uint64_t sub_23C7E9A18()
{
  return sub_23C911460();
}

uint64_t sub_23C7E9A28()
{
  return sub_23C911A18();
}

uint64_t sub_23C7E9A38(uint64_t a1)
{
  int v1;

  return Database.statementDidFail(_:withResultCode:)(a1, v1);
}

void sub_23C7E9A44(uint64_t a1@<X3>, uint64_t a2@<X4>, unint64_t a3@<X8>)
{
  Association.limit(_:offset:)(a1, a2, a3);
}

uint64_t sub_23C7E9A54()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

uint64_t sub_23C7E9A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return FetchRequest<>.fetchOne(_:)(v3, v2, a1, v1, v4);
}

uint64_t sub_23C7E9A84()
{
  return swift_arrayInitWithCopy();
}

__n128 sub_23C7E9A98()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 24);
}

uint64_t sub_23C7E9AB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9ACC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9ADC()
{
  return swift_retain();
}

uint64_t sub_23C7E9B10()
{
  return swift_retain();
}

void *sub_23C7E9B34(int a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, a2, 0xBBuLL);
}

uint64_t sub_23C7E9B40()
{
  return sub_23C91122C();
}

uint64_t sub_23C7E9B4C(const void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, size_t __n)
{
  uint64_t v11;

  return memcmp(a1, (const void *)(v11 - 144), __n);
}

uint64_t sub_23C7E9B64(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8634E8(a1, v1, 0);
}

uint64_t sub_23C7E9B8C()
{
  uint64_t *v0;

  return sub_23C7E79A8(v0);
}

unint64_t sub_23C7E9B94()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C8A6DD0(1uLL, v1, v0);
}

__n128 sub_23C7E9BA4()
{
  __n128 *v0;

  return v0[5];
}

uint64_t sub_23C7E9BC0()
{
  return swift_deallocObject();
}

uint64_t sub_23C7E9BD0()
{
  return sub_23C8011F0((uint64_t)&STACK[0x2E0]);
}

uint64_t sub_23C7E9BD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7E9BF8()
{
  return swift_release();
}

uint64_t sub_23C7E9C34()
{
  return swift_release();
}

uint64_t sub_23C7E9C40()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7E9C50()
{
  return swift_unownedRetainStrong();
}

_QWORD *sub_23C7E9C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Association.databaseTableName.getter(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23C7E9C60(uint64_t a1, uint64_t a2)
{
  return sub_23C8EDB30(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_23C7E9C84()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  return sub_23C7E56A4(v2, v3, 3);
}

uint64_t static StatementArguments.+= infix(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v3;

  v3 = *a2;
  if (!*(_QWORD *)(StatementArguments.append(contentsOf:)((uint64_t)&v3) + 16))
    return swift_bridgeObjectRelease();
  *(_QWORD *)&v3 = 0;
  *((_QWORD *)&v3 + 1) = 0xE000000000000000;
  sub_23C911634();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v3 = 0xD000000000000024;
  *((_QWORD *)&v3 + 1) = 0x800000023C9201A0;
  sub_23C7DF858();
  sub_23C7E79A8(&qword_256BCDBE0);
  sub_23C7E1240(&qword_256BCDBE8, &qword_256BCDBE0, MEMORY[0x24BEE0310]);
  sub_23C7EEE60();
  sub_23C911094();
  sub_23C7DB624();
  sub_23C8E3740();
  sub_23C7DB62C();
  result = sub_23C8E36DC();
  __break(1u);
  return result;
}

uint64_t StatementArguments.append(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  char v73;
  _QWORD *v74;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 8);
  v67 = sub_23C910DAC();
  sub_23C7DF858();
  sub_23C7EDA4C();
  v68 = v3 + 64;
  sub_23C7DF3C0();
  v6 = v5 & v4;
  v69 = (unint64_t)(v7 + 63) >> 6;
  v70 = v3;
  sub_23C7DC46C();
  v8 = 0;
  if (!v6)
    goto LABEL_3;
LABEL_2:
  v71 = (v6 - 1) & v6;
  v72 = v8;
  for (i = __clz(__rbit64(v6)) | (v8 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(v70 + 56) + 24 * i;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = sub_23C7DEAE4();
    sub_23C7E56A4(v21, v22, v20);
    v23 = sub_23C7DEAE4();
    v73 = v20;
    sub_23C7E56A4(v23, v24, v20);
    sub_23C7DEF00();
    swift_isUniquelyReferenced_nonNull_native();
    v74 = *(_QWORD **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0x8000000000000000;
    sub_23C7E663C();
    sub_23C8E3700();
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v29 = v25;
    v30 = v26;
    sub_23C7E79A8(&qword_25430B610);
    if ((sub_23C911778() & 1) != 0)
    {
      v31 = sub_23C7E663C();
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_42;
      v29 = v31;
    }
    if ((v30 & 1) != 0)
    {
      v40 = v74[7] + 24 * v29;
      v42 = *(_QWORD *)v40;
      v41 = *(_QWORD *)(v40 + 8);
      v43 = *(_BYTE *)(v40 + 16);
      *(_QWORD *)v40 = v19;
      *(_QWORD *)(v40 + 8) = v18;
      *(_BYTE *)(v40 + 16) = v20;
      *(_QWORD *)(v2 + 8) = v74;
      swift_bridgeObjectRelease();
      v65 = v41;
      v66 = v42;
      v64 = v43;
      sub_23C7E56A4(v42, v41, v43);
      swift_isUniquelyReferenced_nonNull_native();
      sub_23C7E663C();
      v45 = v44;
      sub_23C8E3700();
      if (__OFADD__(v47, v48))
        goto LABEL_40;
      v49 = v46;
      if ((sub_23C911778() & 1) != 0)
      {
        v50 = sub_23C7E663C();
        if ((v45 & 1) != (v51 & 1))
          goto LABEL_42;
        v49 = v50;
      }
      if ((v45 & 1) != 0)
      {
        v52 = *(_QWORD *)(v67 + 56) + 24 * v49;
        sub_23C8E36E8();
        v54 = v41;
        v53 = v66;
        *(_QWORD *)v52 = v66;
        *(_QWORD *)(v52 + 8) = v65;
        *(_BYTE *)(v52 + 16) = v64;
        v55 = v64;
      }
      else
      {
        sub_23C7DBD7C(v67 + 8 * (v49 >> 6));
        v57 = (_QWORD *)(v56[6] + 16 * v49);
        *v57 = v16;
        v57[1] = v15;
        v58 = v56[7] + 24 * v49;
        v54 = v41;
        v53 = v66;
        *(_QWORD *)v58 = v66;
        *(_QWORD *)(v58 + 8) = v65;
        v55 = v64;
        *(_BYTE *)(v58 + 16) = v64;
        v59 = v56[2];
        v36 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v36)
          goto LABEL_41;
        v56[2] = v60;
        sub_23C7DEF00();
      }
      swift_bridgeObjectRelease();
      sub_23C865348();
      v61 = sub_23C7DEAE4();
      sub_23C7E5640(v61, v62, v73);
      sub_23C7E5640(v53, v54, v55);
    }
    else
    {
      v74[(v29 >> 6) + 8] |= 1 << v29;
      v33 = (_QWORD *)(v74[6] + 16 * v29);
      *v33 = v16;
      v33[1] = v15;
      v34 = v74[7] + 24 * v29;
      *(_QWORD *)v34 = v19;
      *(_QWORD *)(v34 + 8) = v18;
      *(_BYTE *)(v34 + 16) = v20;
      v35 = v74[2];
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_37;
      v74[2] = v37;
      *(_QWORD *)(v2 + 8) = v74;
      sub_23C7DEF00();
      sub_23C7DB624();
      v38 = sub_23C7DEAE4();
      sub_23C7E5640(v38, v39, v20);
      swift_bridgeObjectRelease();
    }
    v6 = v71;
    v8 = v72;
    if (v71)
      goto LABEL_2;
LABEL_3:
    v10 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_38;
    if (v10 >= v69)
      goto LABEL_35;
    v11 = *(_QWORD *)(v68 + 8 * v10);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8 + 2;
      if (v8 + 2 >= v69)
        goto LABEL_35;
      v11 = *(_QWORD *)(v68 + 8 * v12);
      if (!v11)
      {
        v12 = v8 + 3;
        if (v8 + 3 >= v69)
          goto LABEL_35;
        v11 = *(_QWORD *)(v68 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_16:
    v71 = (v11 - 1) & v11;
    v72 = v12;
  }
  v13 = v8 + 4;
  if (v8 + 4 >= v69)
  {
LABEL_35:
    swift_release();
    return v67;
  }
  v11 = *(_QWORD *)(v68 + 8 * v13);
  if (v11)
  {
    v12 = v8 + 4;
    goto LABEL_16;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v69)
      goto LABEL_35;
    v11 = *(_QWORD *)(v68 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_16;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

void sub_23C7EA244()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[344];

  sub_23C7DEF5C();
  sub_23C8756DC(v0, v2);
  v1 = (char *)&loc_23C7EA29C + dword_23C86E1E4[sub_23C875580(v2)];
  __asm { BR              X10 }
}

void sub_23C7EA2AC()
{
  uint64_t v0;

  sub_23C7E25BC();
  *(_QWORD *)(v0 + 960) = 34;
  *(_QWORD *)(v0 + 968) = 0xE100000000000000;
  sub_23C87535C();
  sub_23C910F5C();
  sub_23C7E06E4();
  sub_23C87535C();
  sub_23C7DEF28();
}

void sub_23C7EB904()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_23C7E1784(21321);
  sub_23C7DB398(v3);
  sub_23C7E06E4(32);
  v4 = sub_23C7E3190(v0 + 78, v0 + 120);
  v5 = sub_23C7E4DF0(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v0[57]);
    sub_23C7E09B8(v0 + 99);
    JUMPOUT(0x23C7EABE4);
  }
  v6 = sub_23C7DBD40(v5);
  v7 = sub_23C7DB398(v6);
  if ((v2 & 1) != 0)
  {
    v0[78] = 40;
    v0[79] = 0xE100000000000000;
    v8 = sub_23C7EDE68(v7);
    sub_23C7DBCD0(v8);
    sub_23C7E06E4(41);
    sub_23C7E09B8(v0 + 120);
    sub_23C7E09B8(v0 + 99);
    v9 = sub_23C7E09B8(v0 + 141);
    sub_23C875560(v9);
  }
  else
  {
    sub_23C7E09B8(v0 + 120);
    sub_23C7E09B8(v0 + 99);
    sub_23C8738C4(v0 + 141, sub_23C7E6F90);
  }
  JUMPOUT(0x23C7EB130);
}

void sub_23C7EB910()
{
  JUMPOUT(0x23C7EB920);
}

void sub_23C7EBB6C()
{
  JUMPOUT(0x23C7EBBACLL);
}

uint64_t sub_23C7EBC08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = v1;
  return _s12GRDBInternal13DatabaseEventVwxx_0(v2 - 88);
}

uint64_t sub_23C7EBC14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 144) = result;
  return result;
}

uint64_t sub_23C7EBC3C()
{
  return swift_retain();
}

void sub_23C7EBC48()
{
  sub_23C7FDA0C();
}

uint64_t sub_23C7EBC58(const void *a1)
{
  uint64_t v1;

  sub_23C800B48(a1, (void *)(v1 - 232));
  return sub_23C874270(v1 - 232);
}

uint64_t sub_23C7EBC80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  Swift::Int32 v13;

  return sub_23C7ED294(a1, a2, a3, v13);
}

uint64_t sub_23C7EBC8C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 2);
}

void sub_23C7EBC9C()
{
  sub_23C880584();
}

uint64_t sub_23C7EBCB0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EBCBC()
{
  return sub_23C852154();
}

uint64_t sub_23C7EBCC8()
{
  uint64_t v0;
  unint64_t v1;
  char v2;

  return sub_23C7E5640(v0, v1, v2);
}

uint64_t sub_23C7EBCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MutablePersistableRecord.update(_:)(a1, a2, a3);
}

uint64_t sub_23C7EBCE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return sub_23C7E02DC(a1, a2, v2);
}

uint64_t DatabaseValue.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_23C7E56A4(v2, v3, v4);
}

void sub_23C7EBD28()
{
  uint64_t v0;

  sub_23C7EBF3C();
  if (v0)
  {
    sub_23C7E5DE8();
    sub_23C7E2840();
    sub_23C7DFA18();
    sub_23C7EDFE0();
    swift_willThrow();
  }
  else
  {
    sub_23C7EBD80();
  }
  sub_23C7DEF1C();
}

void sub_23C7EBD80()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;

  sub_23C809894();
  sub_23C7DC47C();
  sub_23C7EC4D8();
  sub_23C7DFA18();
  sub_23C7E5DE8();
  v1 = sub_23C7E2840();
  sub_23C7DFA18();
  if ((v1 & 1) != 0)
    goto LABEL_9;
  sub_23C7DF2E4();
  v2 = *(_QWORD *)(v0 + 40);
  if (v2 >> 62)
  {
    sub_23C7DC46C();
    v3 = sub_23C7DBCE0();
    if (v3)
      goto LABEL_4;
    goto LABEL_8;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_23C7DC46C();
  if (!v3)
  {
LABEL_8:
    sub_23C7E072C();
LABEL_9:
    sub_23C7EBE64();
    sub_23C7DB648();
    return;
  }
LABEL_4:
  if (v3 >= 1)
  {
    while ((v2 & 0xC000000000000001) == 0)
    {
      sub_23C7DC47C();
      sub_23C8098AC();
      sub_23C8071F8();
      sub_23C7DFA18();
      swift_release();
    }
    sub_23C7EF8F8();
  }
  __break(1u);
}

void sub_23C7EBE64()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  swift_beginAccess();
  v1 = swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 40) = sub_23C806814(v1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 40);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_23C7DF858();
    if (v3)
      goto LABEL_3;
LABEL_9:
    sub_23C7DB624();
    sub_23C7DF304();
    return;
  }
  sub_23C7DF858();
  v3 = sub_23C7DBCE0();
  if (!v3)
    goto LABEL_9;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v5 = MEMORY[0x242625290](i, v2);
      else
        v5 = swift_retain();
      *(_BYTE *)(v5 + 17) = 0;
      swift_release();
    }
    goto LABEL_9;
  }
  __break(1u);
}

void sub_23C7EBF3C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23C7EC030();
  sub_23C7E5DE8();
  v2 = sub_23C7E2840();
  sub_23C7DFA18();
  if ((v2 & 1) == 0)
  {
    sub_23C7DF2E4();
    v3 = *(_QWORD *)(v0 + 40);
    if (v3 >> 62)
      goto LABEL_14;
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_23C7DBCC8();
    for (; v4; v4 = sub_23C9117C0())
    {
      v5 = 4;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
          MEMORY[0x242625290](v5 - 4, v3);
        else
          sub_23C7DC47C();
        v6 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        sub_23C8071A0();
        sub_23C7DFA18();
        if (!v1)
        {
          ++v5;
          if (v6 != v4)
            continue;
        }
        goto LABEL_11;
      }
      __break(1u);
LABEL_14:
      sub_23C7DBCC8();
    }
LABEL_11:
    swift_bridgeObjectRelease();
  }
  sub_23C7ECFA0();
}

uint64_t sub_23C7EC030()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  sub_23C7E40EC();
  result = sub_23C7E3188();
  if (!result)
    goto LABEL_79;
  v70 = result;
  *(_QWORD *)(result + 24) = v0;
  swift_release();
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  sub_23C7DB634();
  sub_23C7DC46C();
  sub_23C7DC47C();
  sub_23C7EC4D8();
  result = sub_23C7DFA18();
  v3 = 0;
  v4 = *(_QWORD *)(v2 + 16);
  v71 = v2 + 32;
  v72 = v2;
  v73 = v4;
LABEL_3:
  if (v3 == v4)
  {
    v83 = 0u;
    v84 = 0u;
    v74 = v4;
    v82 = 0u;
  }
  else
  {
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_77;
    if (v3 >= *(_QWORD *)(v72 + 16))
      goto LABEL_78;
    v5 = v3;
    sub_23C8092A0(v71 + 48 * v3, (uint64_t)&v82);
    v74 = v5 + 1;
  }
  sub_23C7EC50C((uint64_t)&v82, (uint64_t)&v91);
  if (!v92)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v70 + 24) = 0;
    swift_release();
    return sub_23C7DE904();
  }
  v6 = v93;
  result = sub_23C7DB5CC(&v91, (uint64_t)&v87);
  v77 = *(_QWORD *)(v6 + 16);
  if (!v77)
    goto LABEL_74;
  v14 = 0;
  v75 = v6;
  v76 = v6 + 32;
LABEL_11:
  if (v14 < *(_QWORD *)(v6 + 16))
  {
    v15 = (uint64_t *)(v76 + 24 * v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = sub_23C7EF99C(result, v7, v8, v9, v10, v11, v12, v13, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80,
            v81,
            v82,
            *((uint64_t *)&v82 + 1),
            v83,
            *((uint64_t *)&v83 + 1),
            v84,
            *((uint64_t *)&v84 + 1),
            v85,
            v86,
            v87,
            v88,
            v89,
            v90);
    sub_23C8092E8((uint64_t)v19, (uint64_t)&v82);
    if (!v17)
    {
      sub_23C7DC47C();
      goto LABEL_72;
    }
    v20 = *(_QWORD *)(v17 + 16);
    v80 = v16;
    v81 = v14;
    v78 = v18;
    v79 = v17;
    if (v20)
    {
      v21 = BYTE8(v84);
      sub_23C7DC47C();
      sub_23C7DFA20();
      swift_bridgeObjectRetain();
      v22 = (_BYTE *)(v17 + 56);
      while (1)
      {
        v24 = *((_QWORD *)v22 - 3);
        v23 = *((_QWORD *)v22 - 2);
        v25 = *v22;
        if (v21)
        {
          if (v21 == 1)
          {
            if (v25 == 1)
            {
              sub_23C7E16F0(&v82);
              if (sub_23C7E58C8() == v24 && v23 == v26)
              {
                sub_23C7DB624();
                v57 = sub_23C7E6E30();
LABEL_70:
                sub_23C808700(v57, v58, v59, v60);
LABEL_71:
                sub_23C7DB398();
                v6 = v75;
LABEL_72:
                sub_23C80927C((uint64_t)&v82);
                v61 = sub_23C7E13C4(v17);
                v69 = sub_23C7EF99C(v61, v62, v63, v64, v65, v66, v67, v68, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80,
                        v81,
                        v82,
                        *((uint64_t *)&v82 + 1),
                        v83,
                        *((uint64_t *)&v83 + 1),
                        v84,
                        *((uint64_t *)&v84 + 1),
                        v85,
                        v86,
                        v87,
                        v88,
                        v89,
                        v90);
                sub_23C8070F4((uint64_t)v69);
                goto LABEL_73;
              }
              v28 = sub_23C7E8874();
              sub_23C7DB624();
              v29 = sub_23C7E6E30();
              goto LABEL_35;
            }
          }
          else if (v25 == 2)
          {
            sub_23C7E16F0(&v82);
            sub_23C7DB3B8();
            if (sub_23C7E58C8() == v24 && v23 == v35)
            {
              sub_23C7DB624();
              v57 = sub_23C7E6514();
              goto LABEL_70;
            }
            v28 = sub_23C7E8874();
            sub_23C7DB624();
            v29 = sub_23C7E6514();
            goto LABEL_35;
          }
        }
        else if (!*v22)
        {
          sub_23C7E16F0(&v82);
          if (sub_23C7E58C8() == v24 && v23 == v33)
          {
            sub_23C7DB624();
            v57 = sub_23C7E68B4();
            goto LABEL_70;
          }
          v28 = sub_23C7E8874();
          sub_23C7DB624();
          v29 = sub_23C7E68B4();
LABEL_35:
          sub_23C808700(v29, v30, v31, v32);
          if ((v28 & 1) != 0)
            goto LABEL_71;
        }
        v22 += 32;
        if (!--v20)
        {
          sub_23C7DB398();
          v6 = v75;
          v18 = v78;
          goto LABEL_40;
        }
      }
    }
    sub_23C7DC47C();
    sub_23C7DFA20();
LABEL_40:
    v37 = *(_QWORD *)(v18 + 16);
    if (!v37)
      goto LABEL_72;
    v38 = BYTE8(v84);
    swift_bridgeObjectRetain();
    v39 = (_BYTE *)(v18 + 56);
    while (1)
    {
      v40 = *((_QWORD *)v39 - 3);
      v41 = *((_QWORD *)v39 - 2);
      v42 = *v39;
      if (v38)
      {
        if (v38 == 1)
        {
          if (v42 != 1)
            goto LABEL_63;
          sub_23C7DFB70(&v82);
          if (sub_23C7EE0E8() == v40 && v41 == v43)
            goto LABEL_65;
          v45 = sub_23C7E16E8();
          sub_23C7DE934();
          v46 = sub_23C7E9ACC();
          v49 = 1;
        }
        else
        {
          if (v42 != 2)
            goto LABEL_63;
          sub_23C7DFB70(&v82);
          sub_23C7DEF00();
          if (sub_23C7EE0E8() == v40 && v41 == v52)
            goto LABEL_65;
          v45 = sub_23C7E16E8();
          sub_23C7DE934();
          v46 = sub_23C7E9ACC();
          v49 = 2;
        }
      }
      else
      {
        if (*v39)
          goto LABEL_63;
        sub_23C7DFB70(&v82);
        if (sub_23C7EE0E8() == v40 && v41 == v50)
        {
LABEL_65:
          sub_23C7DE934();
          v54 = sub_23C7E9ACC();
          sub_23C808700(v54, v55, v56, v38);
LABEL_66:
          sub_23C7DB624();
          sub_23C80927C((uint64_t)&v82);
          sub_23C7E13C4(v17);
          v6 = v75;
          v14 = v81;
LABEL_73:
          ++v14;
          result = sub_23C7DFA18();
          if (v14 == v77)
          {
LABEL_74:
            sub_23C7DB624();
            result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v87);
            v4 = v73;
            v3 = v74;
            goto LABEL_3;
          }
          goto LABEL_11;
        }
        v45 = sub_23C7E16E8();
        sub_23C7DE934();
        v46 = sub_23C7E9ACC();
        v49 = 0;
      }
      sub_23C808700(v46, v47, v48, v49);
      if ((v45 & 1) != 0)
        goto LABEL_66;
LABEL_63:
      v39 += 32;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        v6 = v75;
        v14 = v81;
        goto LABEL_72;
      }
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t sub_23C7EC4D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 24) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EC50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430D7F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C7EC554(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_23C7EC56C@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_23C7F96E0(va, (void *)(a1 + 32));
}

uint64_t sub_23C7EC578()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7EC584()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E56A4(v0, v1, 3);
}

uint64_t sub_23C7EC594@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23C7EC59C()
{
  return swift_bridgeObjectRelease_n();
}

void sub_23C7EC5A8()
{
  sub_23C86E598();
}

uint64_t sub_23C7EC5CC()
{
  return sub_23C911634();
}

uint64_t sub_23C7EC5FC()
{
  uint64_t v0;

  return v0;
}

void sub_23C7EC624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_23C82C100((uint64_t)&a30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_23C7EC630()
{
  return swift_willThrow();
}

uint64_t sub_23C7EC650()
{
  return sub_23C8134EC((uint64_t)&STACK[0x318]);
}

uint64_t sub_23C7EC658()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EC690()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void *sub_23C7EC6A0(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a1[1] = a2;
  return memcpy(&a1[2], &a10, 0xA3uLL);
}

uint64_t sub_23C7EC6B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return v1;
}

unint64_t sub_23C7EC6DC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;

  *(_QWORD *)(a7 + 8 * (result >> 6) + 64) |= 1 << result;
  v7 = (_QWORD *)(*(_QWORD *)(a7 + 48) + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (_QWORD *)(*(_QWORD *)(a7 + 56) + 24 * result);
  *v8 = a4;
  v8[1] = a5;
  return result;
}

uint64_t sub_23C7EC718()
{
  uint64_t v0;

  sub_23C800B48((const void *)(v0 + 1128), (void *)(v0 + 960));
  return sub_23C8746E0(v0 + 960);
}

void *sub_23C7EC734(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src)
{
  return memcpy(&a9, &__src, 0xA3uLL);
}

unint64_t sub_23C7EC744()
{
  return sub_23C886B8C();
}

uint64_t sub_23C7EC754(uint64_t result)
{
  return sub_23C7F1754(result);
}

_QWORD *sub_23C7EC75C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(a2 + 16))((uint64_t *)va);
}

uint64_t sub_23C7EC76C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7DE718(v1, 1, a1);
}

uint64_t sub_23C7EC780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(va, v12);
}

uint64_t sub_23C7EC794()
{
  uint64_t v0;

  return v0;
}

void sub_23C7EC7CC()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7EC7E8()
{
  return 0x3230253A64323025;
}

uint64_t sub_23C7EC7FC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;

  return v0(v1);
}

uint64_t sub_23C7EC808()
{
  return type metadata accessor for SQLGenerationContext();
}

void sub_23C7EC818()
{
  sub_23C8CA858();
}

_QWORD *sub_23C7EC820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(a6 + 32))((uint64_t *)va, a1, 0, a4, a6);
}

uint64_t sub_23C7EC84C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v3, a1, v2);
}

uint64_t sub_23C7EC860(uint64_t a1, int a2)
{
  return Database.statementDidFail(_:withResultCode:)(a1, a2);
}

void sub_23C7EC868(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  Association.with<A>(_:)(__src, a2, a3, a4);
}

uint64_t sub_23C7EC878()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  sub_23C7E56A4(v1, v0, 3);
  return sub_23C7E56A4(v2, v3, 3);
}

void sub_23C7EC8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  char v34;
  char v35;
  uint64_t v36;

  *(_BYTE *)(v36 - 224) = v35;
  *(_BYTE *)(v36 - 223) = a11;
  *(_BYTE *)(v36 - 222) = a13;
  *(_BYTE *)(v36 - 221) = a15;
  *(_BYTE *)(v36 - 220) = a34;
  *(_BYTE *)(v36 - 219) = a17;
  *(_BYTE *)(v36 - 218) = a19;
  *(_BYTE *)(v36 - 217) = a21;
  *(_BYTE *)(v36 - 216) = v34;
  *(_BYTE *)(v36 - 215) = a23;
  *(_BYTE *)(v36 - 214) = a25;
  *(_BYTE *)(v36 - 213) = a27;
  *(_BYTE *)(v36 - 212) = a29;
  *(_BYTE *)(v36 - 211) = a31;
}

uint64_t sub_23C7EC92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 - 72) = a5;
  return sub_23C9112E0();
}

void sub_23C7EC960()
{
  sub_23C7EA244();
}

char *sub_23C7EC970(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[24 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

void *SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *result;
  _QWORD v10[2];
  char v11;
  _BYTE v12[168];
  _QWORD __dst[23];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10[0] = sub_23C911004();
  v10[1] = v6;
  v11 = 2;
  sub_23C8027EC((uint64_t)v10);
  sub_23C800B48(v10, v12);
  memcpy(__dst, v12, 0xA3uLL);
  sub_23C7FCC1C(__dst);
  sub_23C7ECE1C();
  sub_23C7E8AC4();
  sub_23C7E9288();
  result = sub_23C7F96E0(__dst, v7);
  *v2 = a2;
  return result;
}

Swift::Void __swiftcall SQLInterpolation.appendLiteral(_:)(Swift::String a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v3 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v5 = a1;
    v6 = MEMORY[0x24BEE4AF8];
    v7 = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(&v5);
    swift_bridgeObjectRetain();
    sub_23C7ECE1C();
    sub_23C7E0734();
    sub_23C7E84CC(v4);
    *v1 = v2;
  }
  sub_23C7E4078();
}

void sub_23C7ECAE8()
{
  _QWORD *v0;
  uint64_t (*v1)(BOOL);
  unint64_t v2;
  char v3;
  char v4;
  char v5;

  sub_23C7DF2B4();
  if (!(v4 ^ v5 | v3))
    *v0 = v1(v2 > 1);
}

void sub_23C7ECB28(uint64_t a1@<X8>)
{
  strcpy((char *)(a1 + 32), "IF NOT EXISTS");
  *(_WORD *)(a1 + 46) = -4864;
}

unint64_t sub_23C7ECB50()
{
  return sub_23C7E3084();
}

void *sub_23C7ECB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void *a3@<X8>)
{
  return static TableRecord.all()(a1, a2, a3);
}

uint64_t sub_23C7ECB78()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7E03FC(v0, v1);
}

uint64_t sub_23C7ECB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_23C812C40((uint64_t)&a9);
}

uint64_t sub_23C7ECBB4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23C7ECBBC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7ECBD4()
{
  return swift_retain();
}

uint64_t sub_23C7ECBE8()
{
  return sub_23C9114E4();
}

void *sub_23C7ECBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  return sub_23C7F96E0(&a37, v37);
}

uint64_t sub_23C7ECC00@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8EC1F0(a1);
}

uint64_t sub_23C7ECC10()
{
  return StatementArguments.description.getter();
}

uint64_t sub_23C7ECC28()
{
  return 0;
}

double sub_23C7ECC34()
{
  double v0;

  return trunc(v0);
}

uint64_t sub_23C7ECC48()
{
  uint64_t v0;

  return sub_23C84AB78(v0);
}

void sub_23C7ECC54(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23C7E7900((uint64_t)&a9, a2);
}

uint64_t sub_23C7ECC5C()
{
  return sub_23C800974((uint64_t)&STACK[0x250]);
}

void sub_23C7ECCA4()
{
  sub_23C86E598();
}

unint64_t sub_23C7ECCAC()
{
  return sub_23C886B8C();
}

uint64_t sub_23C7ECCB8()
{
  uint64_t v0;

  return v0 - 112;
}

__n128 sub_23C7ECCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  return (__n128)a9;
}

double sub_23C7ECCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_23C8291CC((uint64_t)va);
}

void sub_23C7ECCF0()
{
  sub_23C7FAE44();
}

void sub_23C7ECD00(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + 16) = a1;
  v6 = (_QWORD *)(v1 + 24 * v5);
  v6[4] = v2;
  v6[5] = v4;
  v6[6] = v3;

}

char *sub_23C7ECD30(char *a1, int64_t a2)
{
  char *v2;

  return sub_23C8DE884(a1, a2, 1, v2);
}

void sub_23C7ECD48(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association._joining(required:)(a1, a2, a3);
}

uint64_t sub_23C7ECD54()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7ECD78()
{
  return sub_23C910F5C();
}

void sub_23C7ECD84()
{
  sub_23C7ECAE8();
}

uint64_t sub_23C7ECDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t result;

  v9 = *v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v9;
  if (!(_DWORD)result)
  {
    result = a4(result, *(_QWORD *)(v9 + 16) + 1, 1, v9, a1, a2, a3);
    *v4 = result;
  }
  return result;
}

uint64_t sub_23C7ECE1C()
{
  return sub_23C7ECDA8((uint64_t)&qword_25430DA08, (uint64_t)&type metadata for SQL.Element, (uint64_t)sub_23C7ED988, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7E7FAC);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.setArguments(_:)(GRDBInternal::StatementArguments a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v4 = *(_QWORD *)a1.values._rawValue;
  v3 = *((_QWORD *)a1.values._rawValue + 1);
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  v5 = sub_23C7DBC3C();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  if (v2)
    goto LABEL_7;
  *(_QWORD *)(v1 + 104) = v4;
  *(_QWORD *)(v1 + 112) = v3;
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  *(_BYTE *)(v1 + 96) = 0;
  sub_23C7E2E68();
  sub_23C7ED650();
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_7:
    sub_23C7DF978();
    return;
  }
  v7 = 0;
  v8 = v5 + 48;
  while (1)
  {
    v9 = sub_23C8E36BC();
    sub_23C7E56A4(v9, v10, v11);
    v12 = sub_23C8E36BC();
    sub_23C7ED294(v12, v13, v14, v7 + 1);
    v15 = sub_23C8E36BC();
    sub_23C7E5640(v15, v16, v17);
    if ((_DWORD)v7 == 2147483645)
      break;
    v8 += 24;
    if (v6 == ++v7)
      goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_23C7ECF70()
{
  return swift_task_switch();
}

uint64_t sub_23C7ECF90()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7ECFB8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C811870(v0, v1);
}

uint64_t sub_23C7ECFC8()
{
  uint64_t v0;

  return sub_23C7E76BC(v0);
}

void sub_23C7ECFE4()
{
  sub_23C7EA244();
}

uint64_t sub_23C7ECFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  uint64_t v20;
  uint64_t v21;
  va_list va;

  va_start(va, a20);
  *(_QWORD *)(v21 - 72) = v20;
  return sub_23C7DF56C(a5, (uint64_t)va);
}

uint64_t sub_23C7ED03C()
{
  return sub_23C911778();
}

uint64_t sub_23C7ED064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_23C8634E8(a13, a16, 1);
  sub_23C8634E8(a13, a16, 1);
  return sub_23C8634E8(a13, a16, 1);
}

uint64_t sub_23C7ED0C0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

uint64_t sub_23C7ED0D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&a4 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
}

uint64_t sub_23C7ED0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C8812E4(a1, a2, a3, a4, 2);
}

uint64_t sub_23C7ED0FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7ED114(uint64_t result)
{
  return sub_23C7F1754(result);
}

void sub_23C7ED11C()
{
  TableRequest<>.filter<A>(key:)();
}

uint64_t sub_23C7ED130()
{
  return sub_23C910C80();
}

uint64_t sub_23C7ED140()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C8A0644(v0, v1);
}

uint64_t sub_23C7ED150()
{
  return sub_23C910E3C();
}

uint64_t sub_23C7ED18C(uint64_t result)
{
  return sub_23C7F5610(result);
}

uint64_t sub_23C7ED1BC(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  return sub_23C7DC0A0(v1, (uint64_t *)va1, (uint64_t)va);
}

uint64_t sub_23C7ED1D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7ED1F0()
{
  return sub_23C911BBC();
}

uint64_t sub_23C7ED1FC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v1, v0, 3);
  sub_23C7E5640(v2, v3, 3);
  sub_23C7E5640(v1, v0, 3);
  return sub_23C7E5640(v1, v0, 3);
}

void sub_23C7ED25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  FetchRequest<>.fetchAll(_:)(v2, v1, a1, *(_QWORD *)(v3 - 72));
}

uint64_t sub_23C7ED278()
{
  return sub_23C9117B4();
}

uint64_t sub_23C7ED294(int a1, int a2, int a3, Swift::Int32 at)
{
  Swift::OpaquePointer *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  result = DatabaseValue.bind(to:at:)(v4[2], at);
  if ((_DWORD)result)
  {
    v6 = result;
    swift_unownedRetainStrong();
    v7 = (uint64_t)Database.lastErrorMessage.getter();
    v9 = v8;
    swift_release();
    v10 = Statement.sql.getter();
    v12 = v11;
    if (!v9)
    {
      if (!sqlite3_errstr(v6))
        __break(1u);
      v7 = sub_23C910F74();
      v9 = v13;
    }
    *(_QWORD *)&v15 = v7;
    *((_QWORD *)&v15 + 1) = v9;
    *(_QWORD *)&v16 = v10;
    *((_QWORD *)&v16 + 1) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C7E76BC(0);
    sub_23C7EF5D4();
    if (sub_23C9119E8())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7E13C4(0);
    }
    else
    {
      swift_allocError();
      *(_DWORD *)v14 = v6;
      *(_OWORD *)(v14 + 8) = v15;
      *(_OWORD *)(v14 + 24) = v16;
      *(_OWORD *)(v14 + 40) = 0uLL;
      *(_BYTE *)(v14 + 56) = 0;
    }
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

Swift::Int32 __swiftcall DatabaseValue.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  Swift::Int32 result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_23C7ED458()
{
  sqlite3_stmt *v0;
  int v1;
  sqlite3_int64 v2;

  sub_23C7EBCB0();
  sub_23C7E0778();
  return sqlite3_bind_int64(v0, v1, v2);
}

uint64_t sub_23C7ED474()
{
  sqlite3_stmt *v0;
  int v1;
  double v2;

  sub_23C7EBCB0();
  sub_23C7E0778();
  return sqlite3_bind_double(v0, v1, v2);
}

void sub_23C7ED490()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void (__cdecl *v3)(void *);
  sqlite3_stmt *v4;
  int v5;
  const char *v6;

  v2 = qword_25430D368;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v3 = (void (__cdecl *)(void *))qword_254310430;
  sub_23C910EFC();
  v4 = (sqlite3_stmt *)sub_23C7EBCB0();
  sqlite3_bind_text(v4, v5, v6, -1, v3);
  swift_release();
  sub_23C7E5640(v0, v1, 2);
  sub_23C7E0778();
}

uint64_t sub_23C7ED650()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  result = sqlite3_clear_bindings(*(sqlite3_stmt **)(v0 + 16));
  if ((_DWORD)result)
  {
    v2 = result;
    sub_23C7E5DE8();
    v3 = (uint64_t)Database.lastErrorMessage.getter();
    v5 = v4;
    swift_release();
    v6 = Statement.sql.getter();
    v8 = v7;
    if (!v5)
    {
      if (!sqlite3_errstr(v2))
        __break(1u);
      v3 = sub_23C910F74();
      v5 = v9;
    }
    *(_QWORD *)&v11 = v3;
    *((_QWORD *)&v11 + 1) = v5;
    *(_QWORD *)&v12 = v6;
    *((_QWORD *)&v12 + 1) = v8;
    sub_23C7DC46C();
    sub_23C7DB3D4();
    sub_23C7E76BC(0);
    sub_23C7EF5D4();
    if (sub_23C9119E8())
    {
      sub_23C8E3734();
      sub_23C7E072C();
      sub_23C7E13C4(0);
    }
    else
    {
      swift_allocError();
      *(_DWORD *)v10 = v2;
      *(_OWORD *)(v10 + 8) = v11;
      *(_OWORD *)(v10 + 24) = v12;
      *(_OWORD *)(v10 + 40) = 0uLL;
      *(_BYTE *)(v10 + 56) = 0;
    }
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t Statement.step<A>(_:)@<X0>(uint64_t (*a1)(sqlite3_stmt *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3_stmt *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = v4;
  v9 = *(sqlite3_stmt **)(v3 + 16);
  if (sqlite3_stmt_busy(v9) || (sub_23C7E5DE8(), sub_23C7EDF98(v3), v5 = v4, result = sub_23C7DFA18(), !v4))
  {
    if (sqlite3_step(v9) == 100)
    {
      result = a1(v9);
      if (v5)
        return result;
      v11 = a3;
      v12 = 0;
      return sub_23C7DE70C(v11, v12, 1, a2);
    }
    sub_23C7E1CA8();
    if (!v10)
    {
      sub_23C7E5DE8();
      sub_23C7E9A38(v3);
      return sub_23C7DFA18();
    }
    sub_23C7E5DE8();
    sub_23C7E9770(v3);
    result = sub_23C7DFA18();
    if (!v4)
    {
      v11 = a3;
      v12 = 1;
      return sub_23C7DE70C(v11, v12, 1, a2);
    }
  }
  return result;
}

uint64_t sub_23C7ED8B4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40))(a1, *(_QWORD *)(v1 + 16));
}

uint64_t (*sub_23C7ED8E0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  swift_unknownObjectRetain();
  return sub_23C7ED8B4;
}

uint64_t sub_23C7ED944(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

char *sub_23C7ED988(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[184 * a2] <= a3)
    return (char *)sub_23C7E87A0(a3, result);
  return result;
}

void sub_23C7ED9B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7EE664();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E2030(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_23C7EDA4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7EDFC4();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E2030(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_23C7EDAE8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  return v2(a2, v3);
}

void *sub_23C7EDAF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  return static TableRecord.all()(a1, a2, a3);
}

void sub_23C7EDB00()
{
  DatabaseValue.hash(into:)();
}

uint64_t sub_23C7EDB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_23C8011F0((uint64_t)&a30);
}

uint64_t sub_23C7EDB24()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  sub_23C815EDC(v0, v1, v2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EDB44()
{
  return 0;
}

uint64_t sub_23C7EDB70(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_23C812C40((uint64_t)va);
}

uint64_t sub_23C7EDB78()
{
  return swift_allocObject();
}

uint64_t sub_23C7EDB84()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EDBBC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 0);
}

uint64_t sub_23C7EDBCC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_23C7EDBE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EDBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  return sub_23C812DD0(v0, v4, v2, v1, v3);
}

void sub_23C7EDC34()
{
  sub_23C86E598();
}

uint64_t sub_23C7EDC44()
{
  return 0;
}

uint64_t sub_23C7EDC68()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23C7EDC7C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_23C7EDC84(uint64_t a1, uint64_t a2)
{
  return a2;
}

char *sub_23C7EDCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  return &a24;
}

void *sub_23C7EDCD0()
{
  return sub_23C7F96E0(&STACK[0x388], &STACK[0x218]);
}

void sub_23C7EDCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  Database.execute(sql:arguments:)(*(Swift::String *)&a1, *(GRDBInternal::StatementArguments *)&a3);
}

uint64_t sub_23C7EDCEC()
{
  return sub_23C910E3C();
}

uint64_t sub_23C7EDD04()
{
  return swift_release();
}

uint64_t sub_23C7EDD14()
{
  return sub_23C910F38();
}

void sub_23C7EDD44(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.select(_:)(a1, a2, a3);
}

uint64_t sub_23C7EDD54()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EDD84()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 128));
}

uint64_t sub_23C7EDD94()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return sub_23C815EF0(v0, v1, v2);
}

uint64_t sub_23C7EDDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return sub_23C7EFC04(v9 + 24, (uint64_t)&a9);
}

uint64_t sub_23C7EDDB8()
{
  return swift_unknownObjectRetain();
}

void *sub_23C7EDDC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return Table.all()(a1, a1, a2, a3);
}

void sub_23C7EDDCC()
{
  sub_23C7F16C0();
}

uint64_t sub_23C7EDDE4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_23C812C40((uint64_t)va);
}

uint64_t sub_23C7EDDF4()
{
  return sub_23C8133B0((uint64_t)&STACK[0x318]);
}

_QWORD *sub_23C7EDDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(a2 + 8))((uint64_t *)va, v4);
}

uint64_t sub_23C7EDE50()
{
  return swift_release();
}

uint64_t sub_23C7EDE5C()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C7EDE68()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EDE74()
{
  uint64_t v0;

  return sub_23C8812E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t sub_23C7EDE84(__n128 *a1, __n128 a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  a1[1] = a2;
  v3 = v2[3];
  v4 = v2[4];
  sub_23C7E7E34(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
}

uint64_t sub_23C7EDEBC(uint64_t result)
{
  return sub_23C7F1754(result);
}

uint64_t sub_23C7EDEC4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EDED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_23C7EDEE8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_23C7EDF14()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;

  v3._countAndFlagsBits = v0;
  v3._object = v1;
  Inflections.singular(_:options:_:)(v3, 0, *(Swift::String *)(v2 - 104));
}

uint64_t sub_23C7EDF30()
{
  return sub_23C8946A8((__n128 *)&STACK[0x388]);
}

uint64_t sub_23C7EDF50()
{
  return sub_23C910A10();
}

void *sub_23C7EDF5C(uint64_t a1, ...)
{
  void *v1;
  _QWORD *v2;
  va_list va;

  va_start(va, a1);
  return sub_23C87019C((uint64_t *)va, v2, v1);
}

void sub_23C7EDF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t *v29;

  sub_23C7E7900((uint64_t)&a29, v29);
}

uint64_t sub_23C7EDF80(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

void sub_23C7EDF98(uint64_t a1)
{
  Database.statementWillExecute(_:)(a1);
}

void sub_23C7EDFA0(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X8>)
{
  Association.having(_:)(a1, a2, a3);
}

uint64_t sub_23C7EDFB0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EDFB8()
{
  return sub_23C7E13C4(0);
}

void sub_23C7EDFC4()
{
  sub_23C7F1D58();
}

void sub_23C7EDFE0()
{
  sub_23C807258();
}

uint64_t sub_23C7EDFFC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 56) = result;
  return result;
}

id sub_23C7EE018(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_23C7EE024()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EE02C()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EE038()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C84E458(v1, v0);
}

uint64_t sub_23C7EE058()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C87CA84(v3, v2, v0, v1, (_QWORD *)(v4 - 104));
}

uint64_t sub_23C7EE074()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE080()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C8A6054(v1, v0);
}

_QWORD *sub_23C7EE0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void (*v37)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  return sub_23C8010AC(&a37, v37);
}

void sub_23C7EE0AC(_QWORD *a1, _QWORD *a2)
{
  sub_23C8B2D1C(a1, a2);
}

uint64_t sub_23C7EE0B4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t _s12GRDBInternal15_DatabaseCursorP7_isDoneSbvgTj_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_23C7EE0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  FetchRequest<>.fetchSet(_:)(a1, a2, a3, a4, v4);
}

uint64_t sub_23C7EE0D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  *(_QWORD *)(v2 - 88) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EE0E0()
{
  return swift_task_dealloc();
}

uint64_t sub_23C7EE0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_23C7EE0F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

_QWORD *sub_23C7EE128()
{
  return sub_23C837D4C();
}

uint64_t sub_23C7EE13C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7EE158()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_23C7EE168()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C8A6DD0(1uLL, v0, v1);
}

uint64_t sub_23C7EE1A0()
{
  return sub_23C910F5C();
}

id sub_23C7EE1B0(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 2120));
}

uint64_t sub_23C7EE1CC()
{
  uint64_t v0;

  return sub_23C84AB78(v0);
}

uint64_t sub_23C7EE1D4(uint64_t a1)
{
  return sub_23C8A9A6C(a1);
}

uint64_t sub_23C7EE1E0()
{
  uint64_t v0;

  return sub_23C812C40(v0 - 144);
}

uint64_t sub_23C7EE1E8()
{
  return swift_getAssociatedTypeWitness();
}

_QWORD *sub_23C7EE1F4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24))((uint64_t *)va, v2, v3);
}

uint64_t sub_23C7EE20C()
{
  return sub_23C9111B4();
}

void sub_23C7EE21C()
{
  sub_23C880584();
}

uint64_t sub_23C7EE224()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE234(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t sub_23C7EE244()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EE25C()
{
  return sub_23C813864((uint64_t)&STACK[0x370]);
}

void sub_23C7EE264(uint64_t a1)
{
  uint64_t *v1;

  sub_23C7E7900(a1, v1);
}

uint64_t sub_23C7EE26C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE284()
{
  return type metadata accessor for SQLGenerationContext();
}

uint64_t sub_23C7EE294()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C7EE2C4()
{
  return sub_23C7E5640(0, 0, 4);
}

void sub_23C7EE2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_23C8461F0(v15, (uint64_t)va);
}

uint64_t sub_23C7EE2E8()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7EE2F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE310()
{
  return sub_23C910F50();
}

uint64_t sub_23C7EE318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t sub_23C7EE324()
{
  return swift_retain();
}

void sub_23C7EE34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  Swift::String v10;
  uint64_t *v11;

  v10._object = (void *)((v9 - 32) | 0x8000000000000000);
  v11 = &a9;
  v10._countAndFlagsBits = 0xD000000000000016;
  Database.execute(sql:arguments:)(v10, *(GRDBInternal::StatementArguments *)(&a4 - 1));
}

uint64_t sub_23C7EE36C()
{
  uint64_t v0;

  return sub_23C90A550(v0, STACK[0x228], STACK[0x230], STACK[0x238]);
}

void sub_23C7EE384()
{
  sub_23C7F2620();
}

uint64_t sub_23C7EE398()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_23C7EE3A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE3BC()
{
  return swift_release();
}

uint64_t sub_23C7EE3D4()
{
  return sub_23C8011F0((uint64_t)&STACK[0x210]);
}

uint64_t sub_23C7EE3DC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  sub_23C815EDC(v0, v1, v2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EE3FC(double a1)
{
  return (uint64_t)a1;
}

uint64_t sub_23C7EE41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void *sub_23C7EE424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(a1, a2, a3, &a30);
}

uint64_t sub_23C7EE438()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7EE444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_23C7EE454()
{
  uint64_t v0;

  return sub_23C846448(v0);
}

uint64_t sub_23C7EE464()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 1);
}

uint64_t sub_23C7EE474()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EE484()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C812DD0(v4, v3, v2, v0, v1);
}

void sub_23C7EE49C()
{
  sub_23C86E598();
}

uint64_t sub_23C7EE4A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_23C7EE4D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7EE514()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_23C7EE528(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_23C7DF56C(a1, (uint64_t)va);
}

uint64_t sub_23C7EE530()
{
  return sub_23C910F5C();
}

id sub_23C7EE568(id a1, SEL a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(a1, a2, a3, 0, v3, v4);
}

uint64_t sub_23C7EE578()
{
  return sub_23C8946A8((__n128 *)&STACK[0x388]);
}

uint64_t sub_23C7EE584()
{
  uint64_t v0;

  return v0;
}

void sub_23C7EE59C(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  *(_QWORD *)(v1 + 16) = a1;
  v10 = v1 + 40 * v7;
  *(_QWORD *)(v10 + 32) = v6;
  *(_QWORD *)(v10 + 40) = v5;
  *(_QWORD *)(v10 + 48) = v4;
  *(_QWORD *)(v10 + 56) = v3;
  *(_BYTE *)(v10 + 64) = v8;
  *(_BYTE *)(v10 + 65) = v9;
  *(_BYTE *)(v10 + 66) = v2;
}

uint64_t sub_23C7EE5D8()
{
  return swift_release();
}

uint64_t sub_23C7EE5E8()
{
  return sub_23C910FF8();
}

uint64_t sub_23C7EE5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C8D9894(a3, a2, a3, a4);
}

void sub_23C7EE5FC(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X8>)
{
  Association._joining(optional:)(a1, a2, a3);
}

void sub_23C7EE608(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = v2;
}

uint64_t sub_23C7EE610()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

GRDBInternal::SQLInterpolation __swiftcall SQLInterpolation.init(literalCapacity:interpolationCount:)(GRDBInternal::SQLInterpolation literalCapacity, Swift::Int interpolationCount)
{
  GRDBInternal::SQLInterpolation *v2;
  GRDBInternal::SQLInterpolation *v3;

  v3 = v2;
  if (__OFADD__(interpolationCount, 1))
  {
    __break(1u);
  }
  else
  {
    sub_23C7EE664();
    v3->elements._rawValue = literalCapacity.elements._rawValue;
  }
  return literalCapacity;
}

void sub_23C7EE664()
{
  sub_23C7E7FAC();
}

uint64_t sub_23C7EE684()
{
  return FastNullableDatabaseValueCursor._element(sqliteStatement:)();
}

#error "23C7EE7D0: call analysis failed (funcsize=81)"

uint64_t FastDatabaseValueCursor.statement.getter()
{
  return swift_retain();
}

uint64_t FastDatabaseValueCursor._isDone.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_23C7EE834(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, Swift::String *a3@<X8>)
{
  *a3 = String.init(sqliteStatement:index:)(a1, a2);
  sub_23C7DB390();
}

Swift::String __swiftcall String.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = (uint64_t)sqlite3_column_text((sqlite3_stmt *)sqliteStatement._rawValue, index);
  if (v2)
    v2 = sub_23C910F80();
  else
    __break(1u);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

void sub_23C7EE874(uint64_t a1)
{
  NullableDatabaseValueCursor._element(sqliteStatement:)(a1);
}

void NullableDatabaseValueCursor._element(sqliteStatement:)(uint64_t a1)
{
  sub_23C7EE8BC(a1, (uint64_t)sub_23C8D67EC, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_23C7EE92C);
}

uint64_t DatabaseValueCursor.statement.getter()
{
  return swift_retain();
}

void sub_23C7EE8BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v3;

  a3(a1, *(unsigned int *)(v3 + 28), a2, v3);
  sub_23C7DF2C8();
}

void sub_23C7EE92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD v23[2];
  unsigned __int8 v24;
  uint64_t v25;

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v18 = v5;
  v7 = v6;
  v9 = v8;
  v10 = sub_23C9114E4();
  v11 = *(_QWORD *)(v10 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7ECFD4();
  sub_23C7EEF08(v9, v7, (uint64_t)v23);
  v14 = v23[0];
  v13 = v23[1];
  v15 = v24;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 32))(v23, v4, v2);
  sub_23C7E6F24();
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v10);
    if (v15 != 4 || v13 | v14)
    {
      sub_23C7E21C4();
      sub_23C7E8CB0();
      sub_23C83256C();
      v25 = sub_23C7DB694();
      sub_23C7E191C(v25, v17);
      swift_release();
      sub_23C815EF0(v19, v20, v21);
      swift_bridgeObjectRelease();
      sub_23C7E13C4(v22);
      sub_23C7DFC54();
      sub_23C7DBD6C();
    }
    else
    {
      sub_23C7DF37C(v18, 1);
      sub_23C7E5640(0, 0, 4);
    }
  }
  else
  {
    sub_23C7DBD6C();
    sub_23C7EE0B4(v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
    sub_23C7DF37C(v18, 0);
  }
  sub_23C7DD150();
  sub_23C7DEF28();
}

uint64_t static DatabaseValueConvertible<>.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  sub_23C910800();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7E16D4();
  sub_23C9107DC();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7E16D4();
  sub_23C9107D0();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7E16D4();
  sub_23C910EB4();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  sub_23C7EEE9C();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v11;
  *(_BYTE *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = MEMORY[0x24BEE4AF8];
  sub_23C7E56A4(v10, v11, a1);
  sub_23C91128C();
  return sub_23C7DE70C(a3, 0, 1, a2);
}

uint64_t sub_23C7EEE1C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_23C7EEE60()
{
  unint64_t result;

  result = qword_25430CA68;
  if (!qword_25430CA68)
  {
    result = MEMORY[0x242626100](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25430CA68);
  }
  return result;
}

unint64_t sub_23C7EEE9C()
{
  unint64_t result;

  result = qword_25430B388;
  if (!qword_25430B388)
  {
    result = MEMORY[0x242626100](&unk_23C916188, &type metadata for DatabaseValueDecoder);
    atomic_store(result, (unint64_t *)&qword_25430B388);
  }
  return result;
}

uint64_t DatabaseValueCursor._isDone.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_23C7EEF08@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t result;
  unint64_t v6;
  char v7;
  sqlite3_stmt *v8;
  int v9;
  sqlite3_stmt *v10;
  int v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  int v14;
  int v15;
  sqlite3_stmt *v16;
  int v17;
  uint64_t v18;
  sqlite3_stmt *v19;
  int v20;

  v4 = sqlite3_column_type(a1, a2) - 1;
  result = 0;
  v6 = 0;
  v7 = 4;
  switch(v4)
  {
    case 0:
      v8 = (sqlite3_stmt *)sub_23C7E076C();
      result = sqlite3_column_int64(v8, v9);
      v6 = 0;
      v7 = 0;
      goto LABEL_9;
    case 1:
      v16 = (sqlite3_stmt *)sub_23C7E076C();
      *(double *)&v18 = sqlite3_column_double(v16, v17);
      v6 = 0;
      result = v18;
      v7 = 1;
      goto LABEL_9;
    case 2:
      v19 = (sqlite3_stmt *)sub_23C7E076C();
      if (sqlite3_column_text(v19, v20))
      {
        result = sub_23C910F80();
        v7 = 2;
LABEL_9:
        *(_QWORD *)a3 = result;
        *(_QWORD *)(a3 + 8) = v6;
        *(_BYTE *)(a3 + 16) = v7;
      }
      else
      {
        __break(1u);
LABEL_11:
        sub_23C911634();
        swift_bridgeObjectRelease();
        sub_23C911880();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        result = sub_23C9117B4();
        __break(1u);
      }
      return result;
    case 3:
      v10 = (sqlite3_stmt *)sub_23C7E076C();
      result = (uint64_t)sqlite3_column_blob(v10, v11);
      if (result)
      {
        v12 = result;
        v13 = (sqlite3_stmt *)sub_23C7E076C();
        v15 = sqlite3_column_bytes(v13, v14);
        result = MEMORY[0x242624738](v12, v15);
        v7 = 3;
      }
      else
      {
        v7 = 3;
        v6 = 0xC000000000000000;
      }
      goto LABEL_9;
    case 4:
      goto LABEL_9;
    default:
      goto LABEL_11;
  }
}

void sub_23C7EF09C(uint64_t a1@<X8>)
{
  double *v1;

  Double.databaseValue.getter(a1, *v1);
}

uint64_t sub_23C7EF0A4(uint64_t a1, uint64_t a2, int a3, sqlite3_stmt *a4, int a5)
{
  uint64_t v7;
  char *v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  LODWORD(v7) = a3;
  v10 = (char *)sub_23C910950();
  if (!v10)
  {
LABEL_4:
    v12 = __OFSUB__(a2, a1);
    v13 = a2 - a1;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v14 = sub_23C91095C();
      if (v14 >= v13)
        v15 = v13;
      else
        v15 = v14;
      if (v10)
        v7 = v15;
      else
        v7 = 0;
      if (v7 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v7 <= 0x7FFFFFFF)
        {
          if (qword_25430D368 == -1)
            return sqlite3_bind_blob(a4, a5, v10, v7, (void (__cdecl *)(void *))qword_254310430);
LABEL_18:
          swift_once();
          return sqlite3_bind_blob(a4, a5, v10, v7, (void (__cdecl *)(void *))qword_254310430);
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  result = sub_23C910968();
  if (!__OFSUB__(a1, result))
  {
    v10 += a1 - result;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C7EF198@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return Int.databaseValue.getter(*v1, a1);
}

uint64_t DatabaseValueConvertible<>.databaseValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  sub_23C9110A0();
  (*(void (**)(uint64_t, uint64_t))(a5 + 24))(AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t String.databaseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C7EF27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return String.databaseValue.getter(*v1, v1[1], a1);
}

uint64_t Data.databaseValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 3;
  return sub_23C7ED944(a1, a2);
}

uint64_t sub_23C7EF294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return Data.databaseValue.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void sub_23C7EF29C(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = sub_23C7E0838(a1, a2);
  *(_BYTE *)(v2 + 8) = 0;
  sub_23C7DB390();
}

void sub_23C7EF2BC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  id v24;
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (i = (_OWORD *)(swift_bridgeObjectRetain() + 56); ; i = (_OWORD *)((char *)i + 40))
  {
    v7 = *((_QWORD *)i - 3);
    v6 = *((_QWORD *)i - 2);
    v8 = *((_QWORD *)i - 1);
    v26 = *i;
    v9 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_23C7E94B8();
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      sub_23C911B50();
      __break(1u);
      goto LABEL_20;
    }
    v14 = v10;
    if (v9[3] < v12 + v13)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_23C7E79A8(&qword_256BCA6D8);
      sub_23C911784();
      if ((v14 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v17 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v18 = (_QWORD *)(v17[6] + 16 * v11);
    *v18 = v7;
    v18[1] = v6;
    v19 = v17[7] + 24 * v11;
    *(_QWORD *)v19 = v8;
    *(_OWORD *)(v19 + 8) = v26;
    v20 = v17[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v17[2] = v22;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_23C8F922C();
  v15 = sub_23C7E94B8();
  if ((v14 & 1) != (v16 & 1))
    goto LABEL_19;
  v11 = v15;
  if ((v14 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = (void *)swift_allocError();
  swift_willThrow();
  v24 = v23;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

unint64_t sub_23C7EF5D4()
{
  unint64_t result;

  result = qword_25430B280;
  if (!qword_25430B280)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseError, &type metadata for DatabaseError);
    atomic_store(result, (unint64_t *)&qword_25430B280);
  }
  return result;
}

ValueMetadata *type metadata accessor for SQL()
{
  return &type metadata for SQL;
}

uint64_t getEnumTagSinglePayload for StatementArguments(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for SQLInterpolation()
{
  return &type metadata for SQLInterpolation;
}

ValueMetadata *type metadata accessor for ResultCode()
{
  return &type metadata for ResultCode;
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

GRDBInternal::SQL __swiftcall SQL.init(stringInterpolation:)(GRDBInternal::SQL stringInterpolation)
{
  _QWORD *v1;

  *v1 = *(_QWORD *)stringInterpolation.elements._rawValue;
  return stringInterpolation;
}

uint64_t storeEnumTagSinglePayload for StatementArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StatementArguments()
{
  return &type metadata for StatementArguments;
}

void StatementArguments.init(arrayLiteral:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  sub_23C7E53DC(a1, &v3);
  *a2 = v3;
  sub_23C8E3684();
}

GRDBInternal::StatementArguments __swiftcall StatementArguments.init()()
{
  _QWORD *v0;
  uint64_t v1;
  GRDBInternal::StatementArguments result;

  v1 = MEMORY[0x24BEE4B00];
  *v0 = MEMORY[0x24BEE4AF8];
  v0[1] = v1;
  return result;
}

void Row._checkIndex(_:file:line:)(uint64_t a1)
{
  char v1;
  char v2;
  char v3;

  if (a1 < 0 || (sub_23C902A50(), v2 ^ v3 | v1))
  {
    sub_23C7DC484();
    sub_23C9117B4();
    __break(1u);
  }
}

void sub_23C7EF7C4()
{
  sub_23C7F1DE8();
}

uint64_t sub_23C7EF7DC(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 144), v3, a3);
}

uint64_t sub_23C7EF7E8()
{
  return swift_bridgeObjectRelease();
}

void sub_23C7EF7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  sub_23C8F76A8(v5 - 160, a4, *(_DWORD *)(v4 + 36), 0, v4);
}

uint64_t Row.sqliteStatement.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_23C7EF810(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_23C7EF87C(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

void sub_23C7EF8B0(uint64_t *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
    *a1 = swift_allocBox();
  sub_23C7DB390();
}

uint64_t sub_23C7EF8E8()
{
  uint64_t v0;

  return v0;
}

void sub_23C7EF8F8()
{
  JUMPOUT(0x242625290);
}

uint64_t sub_23C7EF928()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EF934()
{
  return 0;
}

void sub_23C7EF94C()
{
  __n128 *v0;

  sub_23C8738C4(v0 + 47);
}

uint64_t sub_23C7EF954()
{
  return sub_23C910F5C();
}

uint64_t sub_23C7EF960()
{
  return swift_release();
}

uint64_t sub_23C7EF968()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7EF974()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  return sub_23C8EDB20(v0, v2, v3, v1);
}

_QWORD *sub_23C7EF99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  return sub_23C7E7E34(&a29, a32);
}

uint64_t sub_23C7EF9A8()
{
  return sub_23C9114E4();
}

void sub_23C7EF9D4()
{
  sub_23C7EA244();
}

__n128 sub_23C7EF9E0(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)a2;
}

void sub_23C7EF9FC()
{
  sub_23C7E649C();
}

void sub_23C7EFA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__n128 a52)
{
  sub_23C874D7C(&a52);
}

uint64_t sub_23C7EFA20()
{
  return 0;
}

uint64_t sub_23C7EFA34()
{
  return 8236;
}

uint64_t sub_23C7EFA48()
{
  return sub_23C8076E8();
}

uint64_t sub_23C7EFA54()
{
  return sub_23C9114E4();
}

uint64_t sub_23C7EFA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  a15 = v17;
  a16 = v18;
  return sub_23C7DF56C(v16, (uint64_t)&a10);
}

uint64_t sub_23C7EFA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v14;
  uint64_t v15;

  return sub_23C7E5640(a14, *(_QWORD *)(v15 - 72), v14);
}

uint64_t sub_23C7EFAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  return sub_23C87D36C(v3, v2, v1, v0);
}

uint64_t sub_23C7EFAC4()
{
  return swift_retain();
}

uint64_t sub_23C7EFACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a29);
}

void sub_23C7EFAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__n128 a33)
{
  sub_23C8811C8(&a33);
}

uint64_t sub_23C7EFADC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C83B474(v0, v1);
}

uint64_t sub_23C7EFAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return sub_23C80A738((uint64_t)&a51);
}

void sub_23C7EFAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 - 88) = v3;
  *(_QWORD *)(v4 - 80) = v2;
  v5 = v4 - 88;
  Statement.setUncheckedArguments(_:)(*(GRDBInternal::StatementArguments *)(&a2 - 1));
}

uint64_t sub_23C7EFAFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7F1754(*(_QWORD *)(v1 + a1));
}

uint64_t sub_23C7EFB08()
{
  return sub_23C9115F8();
}

uint64_t sub_23C7EFB20()
{
  return sub_23C910F14();
}

void sub_23C7EFB28()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_23C7EFB3C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_23C7EFB44()
{
  sub_23C7F29DC();
}

void sub_23C7EFB60()
{
  sub_23C7D83D0();
}

void Statement.columnNames.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_QWORD *)(v0 + 24))
  {
    sub_23C8E0244(v0);
    *(_QWORD *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
    sub_23C7E072C();
  }
  swift_bridgeObjectRetain();
  sub_23C7DB3A0();
}

uint64_t RowCursor.__deallocating_deinit()
{
  RowCursor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RowCursor()
{
  return objc_opt_self();
}

uint64_t sub_23C7EFC04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_23C7EFC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v8[3] = &type metadata for StatementCopyRowImpl;
  v8[4] = &off_250D847B0;
  v8[0] = a1;
  v8[1] = a2;
  sub_23C7DA9C0();
  sub_23C7E807C(v5, v6, v7);
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(a2 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
  sub_23C7E070C();
}

void Row.fastDecodeIfPresent<A>(_:atUncheckedIndex:)()
{
  sub_23C7DEF5C();
  sub_23C902638();
  sub_23C902520();
  sub_23C7DEF28();
}

void Row.fastDecode<A>(_:atUncheckedIndex:)()
{
  sub_23C7DEF5C();
  sub_23C902638();
  sub_23C902520();
  sub_23C7DEF28();
}

unint64_t sub_23C7EFCF4(unint64_t result)
{
  if (result >= 2)
    return swift_retain();
  return result;
}

unint64_t sub_23C7EFD08(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

void sub_23C7EFD1C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, uint64_t);
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t);
  _QWORD v16[2];
  char v17;

  sub_23C7DEF5C();
  v1 = v0;
  v15 = v2;
  v4 = v3;
  v14 = v5;
  v6 = *(_QWORD *)(sub_23C7E776C() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7ECFD4();
  v8 = *v4;
  v9 = v4[1];
  LOBYTE(v4) = *((_BYTE *)v4 + 16);
  v16[0] = v8;
  v16[1] = v9;
  v17 = (char)v4;
  sub_23C7E6624();
  sub_23C7E6F24();
  if (v10)
  {
    v11 = sub_23C8D6A20(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    v15(v16, v11);
    sub_23C7E8CB0();
    sub_23C83256C();
    v12 = sub_23C7DB694();
    sub_23C7E191C(v12, v13);
    sub_23C8D69A8();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
  }
  else
  {
    sub_23C7EE0B4(v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32));
  }
  sub_23C7DD150();
  sub_23C7DEF28();
}

void sub_23C7EFE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7DEF5C();
  v1 = v0;
  v3 = v2;
  v15 = v4;
  v5 = *(_QWORD *)(sub_23C7E776C() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7ECFD4();
  v8 = *v3;
  v7 = v3[1];
  v9 = *((unsigned __int8 *)v3 + 16);
  sub_23C7E6624();
  sub_23C7E6F24();
  if (v10)
  {
    v11 = v15;
    sub_23C8D6A20(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    if (v9 != 4 || v7 | v8)
    {
      sub_23C7E21C4();
      sub_23C7E8CB0();
      sub_23C83256C();
      v13 = sub_23C7DB694();
      sub_23C7E191C(v13, v14);
      sub_23C8D69A8();
      sub_23C7E1150();
      sub_23C7EDE5C();
      sub_23C7DFC54();
      goto LABEL_8;
    }
    v12 = 1;
  }
  else
  {
    v11 = v15;
    sub_23C7EE0B4(v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32));
    v12 = 0;
  }
  sub_23C7DF37C(v11, v12);
LABEL_8:
  sub_23C7DD150();
  sub_23C7DEF28();
}

uint64_t sub_23C7EFF18(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_23C7EFF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C7DA55C(a1, a2, a6, a3, a7, a4, a5, (uint64_t)sub_23C9021D4, (void (*)(__int128 *, uint64_t, _BYTE *, uint64_t, uint64_t))sub_23C7EFE08);
}

uint64_t sub_23C7EFF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C7DA55C(a1, a2, a6, a3, a7, a4, a5, (uint64_t)sub_23C9021D4, (void (*)(__int128 *, uint64_t, _BYTE *, uint64_t, uint64_t))sub_23C7EFD1C);
}

uint64_t sub_23C7EFFDC(uint64_t a1)
{
  _QWORD *v1;

  return sub_23C7D8254(a1, *v1, v1[1], v1[2]);
}

void static FetchableRecord.databaseColumnDecodingStrategy.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t static FetchableRecord.fetchCursor(_:arguments:adapter:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  uint64_t v11[2];

  v7 = *a2;
  v8 = a2[1];
  type metadata accessor for RecordCursor(0, a4, a5, a4);
  v11[0] = v7;
  v11[1] = v8;
  sub_23C7DF56C(a3, (uint64_t)v10);
  sub_23C7DF5CC();
  sub_23C7E76BC(v7);
  return sub_23C7F0188(a1, v11, (uint64_t)v10);
}

uint64_t sub_23C7F007C()
{
  return swift_retain();
}

uint64_t sub_23C7F0094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C7F007C();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23C7F00BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_23C7F00E4(uint64_t a1, uint64_t a2)
{
  return sub_23C7F00BC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C8DA388);
}

uint64_t sub_23C7F0100(uint64_t a1, uint64_t a2)
{
  return sub_23C7EFF18(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7D9148);
}

uint64_t type metadata accessor for ColumnDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnDecoder);
}

uint64_t sub_23C7F0128()
{
  return RecordCursor._element(sqliteStatement:)();
}

uint64_t RecordCursor.__deallocating_deinit()
{
  RecordCursor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RecordCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RecordCursor);
}

uint64_t RecordCursor.statement.getter()
{
  return swift_retain();
}

uint64_t sub_23C7F0188(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C7DB388();
  sub_23C7D9C0C(a1, a2, a3);
  return v6;
}

uint64_t RecordCursor._element(sqliteStatement:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8);
  v5 = swift_retain();
  return v4(v5, v2, v3);
}

uint64_t RecordCursor._isDone.getter()
{
  uint64_t v0;

  sub_23C7E6180();
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_23C7F025C()
{
  sub_23C7D9A6C();
}

uint64_t type metadata accessor for _RowDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _RowDecoder);
}

void sub_23C7F028C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_23C7D8624(a1, a2, a3, a4, a5);
}

uint64_t sub_23C7F02AC()
{
  return sub_23C7F0824();
}

double sub_23C7F02CC()
{
  return sub_23C7F0840();
}

uint64_t sub_23C7F02EC()
{
  return sub_23C7F08B0();
}

uint64_t sub_23C7F030C()
{
  sub_23C7D99E8();
  return swift_deallocClassInstance();
}

void type metadata accessor for _RowDecoder.KeyedContainer()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C7F0334(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t result;
  _QWORD v45[3];
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[2];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t *@<X0>, _QWORD *@<X8>);
  uint64_t v66;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = sub_23C9114E4();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v45 - v7;
  v56 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  v1[12] = 0;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  v1[2] = v10;
  v1[3] = v11;
  v1[4] = v13;
  v1[5] = v12;
  if (!v13)
  {
    v15 = 0;
LABEL_20:
    v1[11] = (uint64_t)v15;
    return (uint64_t)v1;
  }
  v14 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7EFCF4(v13);
  v15 = (_QWORD *)sub_23C910DAC();
  v63 = v14;
  v64 = 0;
  v65 = sub_23C8F40DC;
  v66 = 0;
  if (!*(_QWORD *)(v14 + 72))
  {
    swift_bridgeObjectRelease();
    sub_23C7EFD08(v13);
LABEL_19:
    swift_release();
    swift_release();
    goto LABEL_20;
  }
  v52 = v3;
  v45[1] = v11;
  v51 = v8;
  v53 = v13;
  v54 = v12;
  v46 = v1;
  v49 = &v60;
  v50 = &v64;
  swift_retain();
  v16 = v14;
  v17 = 0;
  v45[2] = v16;
  while (1)
  {
    v18 = v50;
    v19 = Row.subscript.getter();
    v21 = v20;
    v22 = v60;
    v23 = v61;
    v24 = v62;
    swift_bridgeObjectRetain();
    sub_23C7E56A4(v22, v23, v24);
    swift_bridgeObjectRelease();
    sub_23C7E5640(v22, v23, v24);
    sub_23C8F4024(v18, v17);
    v58 = v19;
    v59 = v21;
    v60 = v22;
    v61 = v23;
    v62 = v24;
    ((void (*)(_QWORD *__return_ptr, unint64_t *))v65)(v57, &v58);
    swift_bridgeObjectRelease();
    sub_23C7E5640(v22, v23, v24);
    v26 = v57[0];
    v25 = v57[1];
    v27 = v53;
    v58 = v53;
    v59 = v54;
    sub_23C7EFCF4(v53);
    v28 = (uint64_t)v51;
    sub_23C8D4018();
    sub_23C7EFD08(v27);
    if (sub_23C7DE718(v28, 1, v4) == 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v48);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v55, v28, v4);
    v29 = sub_23C911C40();
    v31 = v30;
    swift_isUniquelyReferenced_nonNull_native();
    v58 = (unint64_t)v15;
    v32 = sub_23C7E94B8();
    if (__OFADD__(v15[2], (v33 & 1) == 0))
      break;
    v34 = v32;
    v35 = v33;
    sub_23C7E79A8(&qword_256BCA6D0);
    if ((sub_23C911778() & 1) != 0)
    {
      v36 = sub_23C7E94B8();
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_23;
      v34 = v36;
    }
    v15 = (_QWORD *)v58;
    if ((v35 & 1) != 0)
    {
      v38 = (_QWORD *)(*(_QWORD *)(v58 + 56) + 16 * v34);
      swift_bridgeObjectRelease();
      *v38 = v26;
      v38[1] = v25;
    }
    else
    {
      *(_QWORD *)(v58 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      v39 = (uint64_t *)(v15[6] + 16 * v34);
      *v39 = v29;
      v39[1] = v31;
      v40 = (_QWORD *)(v15[7] + 16 * v34);
      *v40 = v26;
      v40[1] = v25;
      v41 = v15[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_22;
      v15[2] = v43;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v4);
LABEL_15:
    v17 = v64;
    if (v64 == *(_QWORD *)(v63 + 72))
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_23C7EFD08(v53);
      v1 = v46;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

uint64_t sub_23C7F0788(uint64_t *a1)
{
  swift_allocObject();
  return sub_23C7F0334(a1);
}

uint64_t sub_23C7F07C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v3 = sub_23C7E4FA8();
  if (!v1)
  {
    v0 = v2(v3);
    sub_23C7DB62C();
  }
  return v0;
}

uint64_t sub_23C7F0824()
{
  return sub_23C7F07C0();
}

double sub_23C7F0840()
{
  uint64_t v0;
  double v1;
  double v3;

  sub_23C7D92E0();
  if (!v0)
  {
    sub_23C7D80A4();
    v1 = v3;
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_23C7F08B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_23C7D92E0();
  if (!v1)
  {
    sub_23C7D8F9C();
    v0 = v3;
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_23C7F0920()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for RowDecoder()
{
  return objc_opt_self();
}

uint64_t VirtualTableModule.makeTableDefinition(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.create(virtualTable:ifNotExists:using:)(Swift::String virtualTable, Swift::Bool ifNotExists, Swift::String using)
{
  void *object;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  GRDBInternal::StatementArguments v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = using._countAndFlagsBits;
  object = using._object;
  sub_23C7E6DEC();
  v6 = v5;
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    sub_23C7E8D40(v7);
    sub_23C7E66A0();
    v6 = v27;
  }
  *(_QWORD *)(v6 + 16) = v9;
  v10 = v6 + 16 * v8;
  *(_QWORD *)(v10 + 32) = 0xD000000000000014;
  *(_QWORD *)(v10 + 40) = 0x800000023C91C570;
  if (ifNotExists)
  {
    v11 = *(_QWORD *)(v6 + 24);
    if (v9 >= v11 >> 1)
    {
      sub_23C7E8D40(v11);
      sub_23C7E66A0();
      v6 = v31;
    }
    *(_QWORD *)(v6 + 16) = v8 + 2;
    sub_23C7ECB28(v6 + 16 * v9);
  }
  v32 = 34;
  v33 = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C7E06E4();
  v13 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v6 + 24);
  v14 = v12 >> 1;
  v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    sub_23C7E8D40(v12);
    sub_23C7E66A0();
    v6 = v28;
    v12 = *(_QWORD *)(v28 + 24);
    v14 = v12 >> 1;
  }
  *(_QWORD *)(v6 + 16) = v15;
  v16 = v6 + 16 * v13;
  *(_QWORD *)(v16 + 32) = 34;
  *(_QWORD *)(v16 + 40) = 0xE100000000000000;
  if (v14 < (uint64_t)(v13 + 2))
  {
    sub_23C7E8D40(v12);
    sub_23C7E66A0();
    v6 = v29;
  }
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 16) = v13 + 2;
  sub_23C7E250C(v6 + 16 * v15);
  v18 = *(_QWORD *)(v6 + 16);
  v19 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain();
  if (v18 >= v19 >> 1)
  {
    sub_23C7E66A0();
    v6 = v30;
  }
  v20 = countAndFlagsBits;
  *(_QWORD *)(v6 + 16) = v18 + 1;
  v21 = v6 + 16 * v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_QWORD *)(v21 + 40) = object;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v22 = sub_23C910E3C();
  v24 = v23;
  swift_bridgeObjectRelease();
  v32 = v17;
  v33 = MEMORY[0x24BEE4B00];
  v25.values._rawValue = &v32;
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  Database.execute(sql:arguments:)(v26, v25);
  sub_23C7DB398();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t Database.create<A>(virtualTable:ifNotExists:using:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v65 = a2;
  v63 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)v60 - v15;
  LOBYTE(v67) = a3;
  v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a8 + 32);
  v64 = a4;
  v17(&v67, a7, a8);
  if (a5)
  {
    swift_retain();
    a5(v16);
    if (v8)
    {
      sub_23C7F2A78();
      return sub_23C7E5894();
    }
    sub_23C7E5894();
  }
  sub_23C7E6DEC();
  v20 = v19;
  v22 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v23 = v22 + 1;
  if (v22 >= v21 >> 1)
  {
    sub_23C7E8D40(v21);
    sub_23C7EE384();
    v20 = v54;
  }
  *(_QWORD *)(v20 + 16) = v23;
  v24 = v20 + 16 * v22;
  *(_QWORD *)(v24 + 32) = 0xD000000000000014;
  *(_QWORD *)(v24 + 40) = 0x800000023C91C570;
  v62 = AssociatedTypeWitness;
  if ((a3 & 1) != 0)
  {
    v25 = *(_QWORD *)(v20 + 24);
    v26 = v22 + 2;
    if (v23 >= v25 >> 1)
    {
      sub_23C7E8D40(v25);
      sub_23C7EE384();
      v20 = v57;
    }
    *(_QWORD *)(v20 + 16) = v26;
    sub_23C7ECB28(v20 + 16 * v23);
  }
  v67 = 34;
  v68 = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C7E06E4();
  v27 = v67;
  v28 = v68;
  v30 = *(_QWORD *)(v20 + 16);
  v29 = *(_QWORD *)(v20 + 24);
  v31 = v29 >> 1;
  v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    sub_23C7E8D40(v29);
    sub_23C7EE384();
    v20 = v55;
    v29 = *(_QWORD *)(v55 + 24);
    v31 = v29 >> 1;
  }
  *(_QWORD *)(v20 + 16) = v32;
  v33 = v20 + 16 * v30;
  *(_QWORD *)(v33 + 32) = v27;
  *(_QWORD *)(v33 + 40) = v28;
  if (v31 < (uint64_t)(v30 + 2))
  {
    sub_23C7E8D40(v29);
    sub_23C7EE384();
    v20 = v56;
  }
  *(_QWORD *)(v20 + 16) = v30 + 2;
  sub_23C7E250C(v20 + 16 * v32);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a8 + 40))(v16, v66, a7, a8);
  if (v8)
  {
    swift_bridgeObjectRelease();
    return sub_23C7F2A78();
  }
  else
  {
    v35 = v34;
    if (*(_QWORD *)(v34 + 16))
    {
      v67 = sub_23C7E64EC();
      v68 = v36;
      swift_bridgeObjectRetain();
      sub_23C7E06E4();
      sub_23C7DB62C();
      v61 = v67;
      v67 = v35;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      v60[1] = sub_23C910E3C();
      sub_23C7DB398();
      sub_23C7EE0D4(v61);
      sub_23C910F5C();
      sub_23C7DB62C();
      swift_bridgeObjectRelease();
      sub_23C7EE0D4(v67);
      sub_23C7E06E4();
      sub_23C7DB62C();
      v38 = v67;
      v37 = v68;
      v40 = *(_QWORD *)(v20 + 16);
      v39 = *(_QWORD *)(v20 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_23C7E8D40(v39);
        sub_23C7EE384();
        v20 = v58;
      }
      *(_QWORD *)(v20 + 16) = v40 + 1;
      v41 = v20 + 16 * v40;
      *(_QWORD *)(v41 + 32) = v38;
      v42 = v41 + 32;
    }
    else
    {
      sub_23C7DB398();
      v43 = sub_23C7E64EC();
      v37 = v44;
      v46 = *(_QWORD *)(v20 + 16);
      v45 = *(_QWORD *)(v20 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_23C7E8D40(v45);
        sub_23C7EE384();
        v20 = v59;
      }
      *(_QWORD *)(v20 + 16) = v46 + 1;
      v47 = v20 + 16 * v46;
      *(_QWORD *)(v47 + 32) = v43;
      v42 = v47 + 32;
    }
    *(_QWORD *)(v42 + 8) = v37;
    v67 = v20;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    v48 = sub_23C910E3C();
    v50 = v49;
    v51 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v51);
    v60[-10] = a7;
    v60[-9] = a8;
    v60[-8] = v66;
    v60[-7] = v48;
    v52 = v64;
    v60[-6] = v50;
    v60[-5] = v52;
    v53 = v65;
    v60[-4] = v63;
    v60[-3] = v53;
    v60[-2] = v16;
    Database.inSavepoint(_:)(sub_23C7F1720);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v16, v62);
    return sub_23C7DB62C();
  }
}

uint64_t sub_23C7F1114(uint64_t a1, Swift::String sql, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  _QWORD v17[2];

  object = sql._object;
  v17[0] = MEMORY[0x24BEE4AF8];
  v17[1] = MEMORY[0x24BEE4B00];
  sql._object = v17;
  countAndFlagsBits = sql._countAndFlagsBits;
  sql._countAndFlagsBits = (uint64_t)object;
  Database.execute(sql:arguments:)(*(Swift::String *)((char *)&sql - 8), *(GRDBInternal::StatementArguments *)&sql._object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v15)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 48))(a1, a4, a5, a6, a7);
  return 0;
}

BOOL sub_23C7F11E0(uint64_t *a1, uint64_t *a2)
{
  return sub_23C8390EC(*a1, *a2);
}

void sub_23C7F11EC(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_23C7F121C();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void sub_23C7F1224(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = nullsub_1(*v1);
  sub_23C7DB390();
}

uint64_t sub_23C7F1248()
{
  return sub_23C7ECDA8((uint64_t)&qword_25430DA10, MEMORY[0x24BEE0D00], (uint64_t)sub_23C8F9018, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2620);
}

uint64_t sub_23C7F126C()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430CF00, (uint64_t)&unk_25430CF10, (uint64_t)sub_23C8F9080, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2924);
}

uint64_t sub_23C7F1290(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t sub_23C7F12E4()
{
  return sub_23C7ECDA8((uint64_t)&qword_25430CF70, (uint64_t)&type metadata for SQLExpression, (uint64_t)sub_23C9023FC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F1E04);
}

uint64_t sub_23C7F1308()
{
  return sub_23C7F1290((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F1C58);
}

uint64_t sub_23C7F1314()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430B358, (uint64_t)&unk_25430B3D8, (uint64_t)sub_23C8F9080, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2924);
}

uint64_t sub_23C7F1338()
{
  return sub_23C7ECDA8((uint64_t)&unk_256BCBAC8, MEMORY[0x24BEE1E08], (uint64_t)sub_23C8F9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F239C);
}

uint64_t sub_23C7F135C()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430D7F0, (uint64_t)&type metadata for DatabaseEventKind, (uint64_t)sub_23C8F9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F239C);
}

uint64_t sub_23C7F1380()
{
  return sub_23C7F1290((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2434);
}

uint64_t sub_23C7F138C()
{
  return sub_23C7ECDA8((uint64_t)&unk_256BCA508, (uint64_t)&qword_256BCA5E8, (uint64_t)sub_23C7EC96C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2924);
}

uint64_t sub_23C7F13B0()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430D2B8, (uint64_t)&type metadata for Migration, (uint64_t)sub_23C8F9150, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F285C);
}

uint64_t sub_23C7F13D4()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430CBD8, (uint64_t)&type metadata for TableDefinition.ColumnItem, (uint64_t)sub_23C8F9018, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F2620);
}

uint64_t sub_23C7F13F8()
{
  return sub_23C7F1290((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F26B8);
}

uint64_t sub_23C7F1404()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430B180, (uint64_t)&type metadata for TableDefinition.ForeignKeyConstraint, (uint64_t)sub_23C902404, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F285C);
}

uint64_t sub_23C7F1428()
{
  return sub_23C7ECDA8((uint64_t)&unk_256BCBAF8, (uint64_t)&type metadata for SQL, (uint64_t)sub_23C902418, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F27C4);
}

uint64_t sub_23C7F144C()
{
  return sub_23C7ECDA8((uint64_t)&unk_256BCA720, (uint64_t)&type metadata for TableAlteration.TableAlterationKind, (uint64_t)sub_23C8F91E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F285C);
}

uint64_t sub_23C7F1470()
{
  return sub_23C7ECDA8((uint64_t)&unk_25430B0D0, (uint64_t)&type metadata for ColumnDefinition.ForeignKeyConstraint, (uint64_t)sub_23C902404, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C7F285C);
}

void sub_23C7F1494()
{
  sub_23C7ECAE8();
}

void sub_23C7F14B8()
{
  sub_23C7ECAE8();
}

void sub_23C7F14DC()
{
  sub_23C7ECAE8();
}

void sub_23C7F1500()
{
  _QWORD *v0;
  uint64_t (*v1)(BOOL);
  unint64_t v2;
  char v3;
  char v4;
  char v5;

  sub_23C7DF2B4();
  if (!(v4 ^ v5 | v3))
    *v0 = v1(v2 > 1);
}

void sub_23C7F1534()
{
  sub_23C7F1500();
}

void sub_23C7F1540()
{
  sub_23C7ECAE8();
}

void sub_23C7F1564()
{
  sub_23C7ECAE8();
}

void sub_23C7F1588()
{
  sub_23C7ECAE8();
}

void sub_23C7F15AC()
{
  sub_23C7F1500();
}

void sub_23C7F15B8()
{
  sub_23C7ECAE8();
}

void sub_23C7F15DC()
{
  sub_23C7ECAE8();
}

void sub_23C7F1600()
{
  sub_23C7ECAE8();
}

void sub_23C7F1624()
{
  sub_23C7F1500();
}

void sub_23C7F1630()
{
  sub_23C7ECAE8();
}

void sub_23C7F1654()
{
  sub_23C7ECAE8();
}

void sub_23C7F1678()
{
  sub_23C7ECAE8();
}

void sub_23C7F169C()
{
  sub_23C7ECAE8();
}

void sub_23C7F16C0()
{
  sub_23C7F2620();
}

unint64_t sub_23C7F16DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430DB98;
  if (!qword_25430DB98)
  {
    v1 = sub_23C7DDB10(&qword_25430D9F8);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_25430DB98);
  }
  return result;
}

uint64_t sub_23C7F1720()
{
  uint64_t v0;

  return sub_23C7F1114(*(_QWORD *)(v0 + 32), *(Swift::String *)(v0 + 40), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C7F1754(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t dispatch thunk of VirtualTableModule.moduleName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VirtualTableModule.makeTableDefinition()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VirtualTableModule.makeTableDefinition(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of VirtualTableModule.moduleArguments(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of VirtualTableModule.database(_:didCreate:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

_BYTE *initializeBufferWithCopyOfBuffer for VirtualTableConfiguration(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for VirtualTableConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VirtualTableConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C7F18A0 + 4 * byte_23C9128D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C7F18D4 + 4 * byte_23C9128D0[v4]))();
}

uint64_t sub_23C7F18D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C7F18DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C7F18E4);
  return result;
}

uint64_t sub_23C7F18F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C7F18F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C7F18FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C7F1904(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VirtualTableConfiguration()
{
  return &type metadata for VirtualTableConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for CaseInsensitiveIdentifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_23C7F1950(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_23C7F1964(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23C7F1984(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for sqlite3_snapshot(uint64_t a1)
{
  sub_23C7F1B28(a1, &qword_256BCBAA8);
}

__n128 initializeWithTake for Row.Prefetch(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_23C7F19E4(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C7F1A38(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for fts5_tokenizer(uint64_t a1)
{
  sub_23C7F1B28(a1, &qword_256BCBAB0);
}

__n128 sub_23C7F1AA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_23C7F1AB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23C7F1AD4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_23C7F1B28(a1, &qword_256BCBAB8);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_23C7F1B28(a1, &qword_256BCBAC0);
}

void sub_23C7F1B28(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_23C7F1B6C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v3)
  {
    sub_23C7E79A8(&qword_256BCA710);
    v7 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v7);
    sub_23C7E6B9C();
    v7[2] = v2;
    v7[3] = v8;
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7EE224();
    sub_23C8F9060(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_256BCA6B8);
    sub_23C7DD128();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F1C20()
{
  sub_23C7F2924();
}

void sub_23C7F1C3C()
{
  sub_23C7F2924();
}

void sub_23C7F1C58()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  sub_23C7DE8D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v2)
  {
    sub_23C7E79A8(&qword_256BCBAE8);
    v6 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v6);
  }
  if ((v1 & 1) != 0)
  {
    v7 = (char *)sub_23C7EE224();
    sub_23C8F9038(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_256BCBAF0);
    sub_23C7DD128();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F1D04()
{
  sub_23C7F27C4();
}

void sub_23C7F1D20()
{
  sub_23C7F1E04();
}

void sub_23C7F1D3C()
{
  sub_23C7F1D58();
}

void sub_23C7F1D58()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

void sub_23C7F1DE8()
{
  sub_23C7F1E04();
}

void sub_23C7F1E04()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

void sub_23C7F1E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7F22C0(a1, a2, a3, a4, &qword_256BCA528, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C902418);
}

void sub_23C7F1EA8()
{
  sub_23C7F239C();
}

void sub_23C7F1EC4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v2)
  {
    sub_23C7E79A8(&qword_25430D2C0);
    v6 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v6);
  }
  sub_23C7F2A98();
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7F2A8C(v7, v8);
    sub_23C8F9108(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E5D94();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F1F6C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v3)
  {
    sub_23C7E79A8(&qword_25430B5D8);
    v7 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v7);
    sub_23C7DEEBC();
    v7[2] = v2;
    v7[3] = v8;
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7EE224();
    sub_23C902410(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430B658);
    sub_23C7DD128();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F2020()
{
  sub_23C7F29DC();
}

void sub_23C7F203C()
{
  sub_23C7F2620();
}

void sub_23C7F2058()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v2)
  {
    sub_23C7E79A8(&qword_25430B4A0);
    v6 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v6);
  }
  sub_23C7F2A98();
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7F2A8C(v7, v8);
    sub_23C8F9178(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E5D94();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F2100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7F22C0(a1, a2, a3, a4, &qword_25430B350, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C8F9060);
}

void sub_23C7F2114()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v2)
  {
    sub_23C7E79A8(&qword_25430AF38);
    v6 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v6);
  }
  sub_23C7F2A98();
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7F2A8C(v7, v8);
    sub_23C8F9198(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E5D94();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F21BC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  char *v11;
  uint64_t v12;
  char *v13;

  sub_23C7DE8D0();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v3)
  {
    sub_23C7E79A8(&qword_256BCBAD0);
    v8 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v8);
    sub_23C7E2004();
    v8[2] = v2;
    v8[3] = v9;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v10 = (const void *)(v0 + 32);
  if ((v1 & 1) != 0)
  {
    v11 = (char *)sub_23C7F2A8C(v7, (uint64_t)v10);
    sub_23C8F9018(v11, v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    memcpy(v8 + 4, v10, 16 * v2);
  }
  sub_23C7DB624();
}

void sub_23C7F2274()
{
  sub_23C7F239C();
}

void sub_23C7F2290()
{
  sub_23C7F29DC();
}

void sub_23C7F22AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7F22C0(a1, a2, a3, a4, &qword_25430CA48, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C902418);
}

void sub_23C7F22C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v10 != v11)
    {
      sub_23C7E6B90();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (v13)
  {
    sub_23C7E1684(a1, a2, a3, a4, a5);
    v14 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v14);
    sub_23C7E6B9C();
    v14[2] = v12;
    v14[3] = v15;
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v14 + 4);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14 + 4, (const void *)(a4 + 32), 8 * v12);
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F2380()
{
  sub_23C7F239C();
}

void sub_23C7F239C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7DFAFC();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v3)
  {
    sub_23C7E1684(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v12);
    sub_23C7DEEBC();
    v12[2] = v2;
    v12[3] = v13;
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

uint64_t sub_23C7F2434(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_25430D470);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F9018((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(qword_25430D568);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_23C7F2540()
{
  sub_23C7E7FAC();
}

void sub_23C7F255C()
{
  sub_23C7F285C();
}

void sub_23C7F2578()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_23C7DE8D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v2)
  {
    sub_23C7E79A8(&qword_256BCBB00);
    v6 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v6);
  }
  sub_23C7F2A98();
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_23C7F2A8C(v7, v8);
    sub_23C902400(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E5D94();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F2620()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7DFAFC();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v3)
  {
    sub_23C7E1684(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v12);
    sub_23C7E2004();
    v12[2] = v2;
    v12[3] = v13;
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

uint64_t sub_23C7F26B8(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_25430CA80);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C902414((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430CA78);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_23C7F27C4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7DFAFC();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v3)
  {
    sub_23C7E1684(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)sub_23C7DB388();
    j__malloc_size(v12);
    sub_23C7E6B9C();
    v12[2] = v2;
    v12[3] = v13;
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DF5B4();
}

void sub_23C7F285C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7EDAE8(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E3144();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

void sub_23C7F28EC()
{
  sub_23C7F29DC();
}

void sub_23C7F2908()
{
  sub_23C7F2924();
}

void sub_23C7F2924()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v3)
  {
    sub_23C7E1684(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v12);
  }
  if ((v2 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(v1);
    sub_23C7E9A84();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

void sub_23C7F29C0()
{
  sub_23C7F29DC();
}

void sub_23C7F29DC()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v4 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v5 != v6)
    {
      sub_23C7E6B90();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v3)
  {
    sub_23C7E1684(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v12);
  }
  if ((v2 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(v1);
    sub_23C7E9A84();
  }
  sub_23C7DB624();
  sub_23C7DEEA8();
}

uint64_t sub_23C7F2A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v0, v1);
}

uint64_t sub_23C7F2A8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C7F2AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DatabaseWriter.write<A>(_:)(a1, a2, a4, a3, a5);
}

uint64_t sub_23C7F2AC4()
{
  return DatabaseWriter.asyncWrite<A>(_:completion:)();
}

uint64_t DatabaseWriter.asyncWrite<A>(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);

  sub_23C7DE8EC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (_QWORD *)sub_23C7DB388();
  v14[2] = v5;
  v14[3] = v3;
  v14[4] = v1;
  v14[5] = v13;
  v14[6] = v11;
  v14[7] = v9;
  v14[8] = v7;
  v15 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v1 + 56);
  swift_retain();
  swift_retain();
  v15(sub_23C7F2E08, v14, v5, v1);
  return swift_release();
}

uint64_t sub_23C7F2B74(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *);
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v32 = a8;
  v33 = a5;
  v34 = a4;
  v30 = a2;
  v31 = a3;
  sub_23C7DDB10(&qword_25430CCC8);
  v11 = sub_23C911C04();
  v29 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - v13;
  v15 = sub_23C9114E4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v29 - v20;
  sub_23C7DE70C((uint64_t)&v29 - v20, 1, 1, a7);
  v43 = 3;
  v36 = a6;
  v37 = a7;
  v38 = v32;
  v39 = v21;
  v40 = v30;
  v41 = v31;
  v42 = a1;
  Database.inTransaction(_:_:)(&v43, sub_23C7DD4E8, (uint64_t)v35, v22, v23, v24, v25, v26);
  v27 = v34;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  result = sub_23C7DE718((uint64_t)v19, 1, a7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v14, v19, a7);
    swift_storeEnumTagMultiPayload();
    v27(a1, v14);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  return result;
}

uint64_t sub_23C7F2DDC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C7F2E08(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7F2B74(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void DatabaseWriter.add(transactionObserver:extent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_23C7F59D8((uint64_t)sub_23C7F2EBC, *(uint64_t (**)(uint64_t, uint64_t *))(a5 + 24), v5);
  sub_23C7E2024();
}

uint64_t sub_23C7F2E5C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t ObjectType;
  unsigned __int8 v9;

  v9 = a4;
  ObjectType = swift_getObjectType();
  return sub_23C80848C(a2, &v9, a1, ObjectType, a3);
}

uint64_t sub_23C7F2EBC(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7F2E5C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

void DatabaseWriter.remove(transactionObserver:)()
{
  uint64_t (*v0)(uint64_t, uint64_t *);
  uint64_t v1;

  sub_23C7DEED0();
  sub_23C7F59D8((uint64_t)sub_23C7F2F5C, v0, v1);
  sub_23C7E2024();
}

uint64_t sub_23C7F2F0C()
{
  swift_getObjectType();
  return sub_23C8080CC();
}

uint64_t sub_23C7F2F5C()
{
  return sub_23C7F2F0C();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.erase()()
{
  uint64_t v0;

  (*(void (**)(uint64_t (*)(), _QWORD, uint64_t))(v0 + 32))(sub_23C7F2FAC, 0, MEMORY[0x24BEE4AE0] + 8);
}

uint64_t sub_23C7F2FAC()
{
  return sub_23C8E7AC8();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.vacuum()()
{
  uint64_t v0;

  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t))(v0 + 24))(sub_23C7F3004, 0, MEMORY[0x24BEE4AE0] + 8);
}

uint64_t sub_23C7F3004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7F3AA0(a1, a2, a3, a4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.vacuum(into:)(Swift::String into)
{
  void (*v1)(uint64_t (*)(uint64_t), uint64_t *, uint64_t);
  uint64_t v2;

  sub_23C7DEED0();
  v1(sub_23C7F304C, &v2, MEMORY[0x24BEE4AE0] + 8);
  sub_23C7E58A0();
}

uint64_t sub_23C7F304C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7F3C40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C7F3064()
{
  const void *v0;
  const void *v1;
  _BYTE v2[80];

  sub_23C7DE8EC();
  v1 = v0;
  MEMORY[0x24BDAC7A8](v0);
  memcpy(v2, v1, sizeof(v2));
  type metadata accessor for ValueWriteOnlyObserver();
}

void sub_23C7F3108(uint64_t a1)
{
  unint64_t v1;
  void (*v2)(unint64_t);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 - 240) = a1;
  swift_unknownObjectRetain();
  swift_retain();
  v4 = sub_23C7F5600(v1);
  v2(v4);
  v5 = *(_QWORD *)(v3 - 152);
  v6 = *(_QWORD *)(v3 - 136);
  v7 = *(_QWORD *)(v3 - 120);
  v8 = *(_QWORD *)(v3 - 104);
  sub_23C7F5610(*(_QWORD *)(v3 - 168));
  sub_23C7F5610(v5);
  sub_23C7F5610(v6);
  sub_23C7F5610(v7);
  sub_23C7F5610(v8);
  swift_retain();
  sub_23C887FD4();
  sub_23C88804C();
}

void sub_23C7F31BC()
{
  swift_release();
  sub_23C7DBCB0();
}

uint64_t DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C7F31EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = sub_23C7E2524();
  sub_23C7E19A8(v1);
  v2 = (_QWORD *)sub_23C7E66AC();
  *(_QWORD *)(v0 + 80) = v2;
  sub_23C7EE234(v2);
  sub_23C7DFB24();
  return sub_23C7E4C00(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C7F323C()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E06EC();
  if (v0)
  {
    sub_23C7E68A8();
    return sub_23C7E199C();
  }
  else
  {
    sub_23C7EE0E0();
    return sub_23C7EC554(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_23C7F327C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a7 + 48))(a3, a4, sub_23C7F5940, v13, a6, a5, a7);
  return swift_release();
}

uint64_t sub_23C7F3318(uint64_t a1)
{
  return sub_23C7F3774(a1, sub_23C7F327C);
}

uint64_t sub_23C7F3324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  v8 = sub_23C7E79A8(&qword_25430CCC8);
  return sub_23C7F3374(a2, a3, a5, v8);
}

uint64_t sub_23C7F3374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v20 - v16, a1, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, a4);
    return sub_23C8CFB0C((uint64_t)v14, v21, a3, a4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v17, a3);
    return sub_23C8CFAD4((uint64_t)v10, v21, a3);
  }
}

uint64_t sub_23C7F34E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_23C9111D8();
  }
  return sub_23C7E199C();
}

uint64_t sub_23C7F3544()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_23C7F35A0;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_23C7F35A0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t DatabaseWriter.writeWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C7F3610()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = sub_23C7E2524();
  sub_23C7E19A8(v1);
  v2 = (_QWORD *)sub_23C7E66AC();
  *(_QWORD *)(v0 + 80) = v2;
  sub_23C7EE234(v2);
  sub_23C7DFB24();
  return sub_23C7E4C00(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C7F3660()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E06EC();
  if (v0)
  {
    sub_23C7E68A8();
    return sub_23C7E199C();
  }
  else
  {
    sub_23C7EE0E0();
    return sub_23C7EC554(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_23C7F36A0()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_23C7F599C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23C7F36CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  void (*v14)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v14 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a7 + 56);
  swift_retain();
  v14(sub_23C7F590C, v13, a5, a7);
  return swift_release();
}

uint64_t sub_23C7F3768(uint64_t a1)
{
  return sub_23C7F3774(a1, sub_23C7F36CC);
}

uint64_t sub_23C7F3774(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t DatabaseWriter.barrierWriteWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C7F37A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = sub_23C7E2524();
  sub_23C7E19A8(v1);
  v2 = (_QWORD *)sub_23C7E66AC();
  *(_QWORD *)(v0 + 80) = v2;
  sub_23C7EE234(v2);
  sub_23C7DFB24();
  return sub_23C7E4C00(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_23C7F37F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  void (*v14)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t);

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v14 = *(void (**)(uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(a7 + 40);
  swift_retain();
  v14(sub_23C7F590C, v13, a5, a7);
  return swift_release();
}

uint64_t sub_23C7F3890(uint64_t a1)
{
  return sub_23C7F3774(a1, sub_23C7F37F4);
}

void sub_23C7F389C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v12;

  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C8CFAD4((uint64_t)v10, a2, a6);
  sub_23C7DF5B4();
}

uint64_t DatabaseWriter.erase()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23C7F39BC;
  sub_23C7F59BC();
  return sub_23C7E3154(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_23C7F39BC()
{
  sub_23C7E8D4C();
  sub_23C7E68A8();
  return sub_23C7ECF70();
}

uint64_t sub_23C7F39FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DatabaseWriter.vacuum()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23C7F3A64;
  sub_23C7F59BC();
  return sub_23C7E3154(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_23C7F3A64()
{
  sub_23C7E8D4C();
  sub_23C7E68A8();
  return sub_23C7ECF70();
}

uint64_t sub_23C7F3AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  Swift::String v5;
  _QWORD v7[2];

  v7[0] = MEMORY[0x24BEE4AF8];
  v7[1] = MEMORY[0x24BEE4B00];
  v4 = v7;
  v5._countAndFlagsBits = 0x4D5555434156;
  v5._object = (void *)0xE600000000000000;
  Database.execute(sql:arguments:)(v5, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatabaseWriter.vacuum(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_23C7E405C();
}

uint64_t sub_23C7F3B28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[2];
  v1 = v0[3];
  v3 = sub_23C7DB388();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_23C7F3BB4;
  return sub_23C7E3154((uint64_t)v4, (uint64_t)sub_23C7F596C, v3, v0[4], MEMORY[0x24BEE4AE0] + 8, v0[5]);
}

uint64_t sub_23C7F3BB4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  sub_23C7E68A8();
  return sub_23C7E199C();
}

uint64_t sub_23C7F3C14()
{
  uint64_t v0;

  swift_release();
  return sub_23C7F599C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23C7F3C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  GRDBInternal::StatementArguments v6;
  Swift::String v7;
  uint64_t v9;

  sub_23C7E79A8(&qword_25430D7C8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 64) = &protocol witness table for String;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  swift_bridgeObjectRetain();
  sub_23C7E53DC(inited, &v9);
  v6.values._rawValue = &v9;
  v7._countAndFlagsBits = 0x49204D5555434156;
  v7._object = (void *)0xED00003F204F544ELL;
  Database.execute(sql:arguments:)(v7, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C7F3D20()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void DatabaseWriter.writePublisher<A>(updates:)()
{
  sub_23C7F59E4();
  sub_23C7E3048();
  sub_23C911448();
  sub_23C7F3FDC();
  DatabaseWriter.writePublisher<A, B>(receiveOn:updates:)();
}

void sub_23C7F3DBC()
{
  void *v0;

}

void DatabaseWriter.writePublisher<A, B>(receiveOn:updates:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7DE8EC();
  v1 = v0;
  swift_getAssociatedTypeWitness();
  sub_23C9114E4();
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23C7DDB10(&qword_25430CCC8);
  v4 = type metadata accessor for OnDemandFuture(255, v1, v3, MEMORY[0x24BEE3F20]);
  MEMORY[0x242626100](&unk_23C919A58, v4);
  type metadata accessor for ReceiveValuesOn();
}

void sub_23C7F3EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v16 - 168) = *(_QWORD *)(a1 - 8);
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&a9 - v18;
  v20 = (_QWORD *)sub_23C7DB388();
  v20[2] = *(_QWORD *)(v16 - 184);
  v20[3] = v14;
  v20[4] = v10;
  v20[5] = v12;
  v20[6] = v13;
  v20[7] = v9;
  v21 = *(_QWORD *)(v16 - 152);
  v20[8] = *(_QWORD *)(v16 - 176);
  v20[9] = v21;
  *(_QWORD *)(v16 - 112) = nullsub_1(sub_23C7F4108);
  *(_QWORD *)(v16 - 104) = v22;
  sub_23C7DE70C(v15, 1, 1, *(_QWORD *)(v16 - 160));
  sub_23C8979CC(*(_QWORD *)(v16 - 128), v15, v11, v14, *(_QWORD *)(v16 - 192), (uint64_t)v19);
}

void sub_23C7F3F70()
{
  void (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E2018();
  swift_retain();
  v0(v2, *(_QWORD *)(v4 - 136));
  swift_release();
  MEMORY[0x242626100](&unk_23C917C50, v3);
  **(_QWORD **)(v4 - 120) = sub_23C910D04();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v1, v3);
  sub_23C7DBCB0();
}

unint64_t sub_23C7F3FDC()
{
  unint64_t result;
  unint64_t v1;

  result = qword_256BCBB48[0];
  if (!qword_256BCBB48[0])
  {
    v1 = sub_23C7E3048();
    result = MEMORY[0x242626100](MEMORY[0x24BEE5670], v1);
    atomic_store(result, qword_256BCBB48);
  }
  return result;
}

uint64_t sub_23C7F401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t);

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a9;
  v17[6] = a10;
  v17[7] = a1;
  v17[8] = a2;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a9 + 48);
  swift_retain();
  v18(a4, a5, sub_23C7F58C4, v17, a8, a6, a9);
  return swift_release();
}

uint64_t sub_23C7F40E0()
{
  swift_unknownObjectRelease();
  sub_23C7F59D0();
  return swift_deallocObject();
}

uint64_t sub_23C7F4108(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C7F401C(a1, a2, v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void DatabaseWriter.writePublisher<A, B>(updates:thenRead:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19[9];

  v15 = sub_23C7E3048();
  v19[0] = sub_23C911448();
  v16 = sub_23C7F3FDC();
  DatabaseWriter.writePublisher<A, B, C>(receiveOn:updates:thenRead:)((uint64_t)v19, a1, a2, a3, a4, a5, v15, a6, a7, a8, v16, a6, v18, v19[0], v19[1], v19[2], v19[3], v19[4], v19[5],
    v19[6],
    v19[7]);
}

void sub_23C7F41C8()
{
  void *v0;

}

void DatabaseWriter.writePublisher<A, B, C>(receiveOn:updates:thenRead:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7DE8EC();
  swift_getAssociatedTypeWitness();
  sub_23C9114E4();
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v21);
  v22 = sub_23C7DDB10(&qword_25430CCC8);
  v23 = type metadata accessor for OnDemandFuture(255, a21, v22, MEMORY[0x24BEE3F20]);
  MEMORY[0x242626100](&unk_23C919A58, v23);
  type metadata accessor for ReceiveValuesOn();
}

void sub_23C7F42D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v16 - 176) = *(_QWORD *)(a1 - 8);
  sub_23C7DE8DC();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&a9 - v18;
  v20 = (_QWORD *)sub_23C7DB388();
  v20[2] = *(_QWORD *)(v16 - 200);
  v20[3] = v9;
  v20[4] = *(_QWORD *)(v16 - 216);
  v20[5] = v13;
  v20[6] = *(_QWORD *)(v16 - 208);
  v20[7] = v14;
  v21 = *(_QWORD *)(v16 - 184);
  v20[8] = v10;
  v20[9] = v21;
  v22 = *(_QWORD *)(v16 - 168);
  v20[10] = v12;
  v20[11] = v22;
  v20[12] = *(_QWORD *)(v16 - 160);
  *(_QWORD *)(v16 - 120) = nullsub_1(sub_23C7F4530);
  *(_QWORD *)(v16 - 112) = v23;
  sub_23C7DE70C(v15, 1, 1, *(_QWORD *)(v16 - 192));
  sub_23C8979CC(*(_QWORD *)(v16 - 136), v15, v11, *(_QWORD *)(v16 - 232), *(_QWORD *)(v16 - 224), (uint64_t)v19);
}

void sub_23C7F4398()
{
  void (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C7E2018();
  swift_retain();
  swift_retain();
  v0(v3, *(_QWORD *)(v4 - 144));
  swift_release();
  MEMORY[0x242626100](&unk_23C917C50, v2);
  **(_QWORD **)(v4 - 128) = sub_23C910D04();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(v1, v2);
  sub_23C7DBCB0();
}

uint64_t sub_23C7F440C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  void (*v19)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t);

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a8;
  *(_OWORD *)(v18 + 24) = a9;
  *(_QWORD *)(v18 + 40) = a10;
  *(_QWORD *)(v18 + 48) = a11;
  *(_QWORD *)(v18 + 56) = a12;
  *(_QWORD *)(v18 + 64) = a4;
  *(_QWORD *)(v18 + 72) = a5;
  *(_QWORD *)(v18 + 80) = a1;
  *(_QWORD *)(v18 + 88) = a2;
  *(_QWORD *)(v18 + 96) = a3;
  *(_QWORD *)(v18 + 104) = a6;
  *(_QWORD *)(v18 + 112) = a7;
  v19 = *(void (**)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a11 + 56);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v19(sub_23C7F5774, v18, a8, a11);
  return swift_release();
}

uint64_t sub_23C7F44FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23C7F4530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7E9A98();
  sub_23C7F440C(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_23C7DF2C8();
}

uint64_t sub_23C7F4550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(void (*)(), _QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[9];

  sub_23C7DDB10(&qword_25430CCC8);
  v15 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v15);
  sub_23C9114E4();
  v30 = swift_allocBox();
  v17 = v16;
  sub_23C7DE70C(v16, 1, 1, a11);
  v44[0] = 3;
  v34 = a9;
  v35 = a10;
  v36 = a11;
  v37 = a12;
  v38 = a13;
  v39 = a14;
  v40 = v17;
  v41 = a2;
  v42 = a3;
  v43 = a1;
  Database.inTransaction(_:_:)(v44, sub_23C7F57AC, (uint64_t)v33, v18, v19, v20, v21, v22);
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a9;
  v23[3] = a10;
  v23[4] = a11;
  v23[5] = a12;
  v23[6] = a13;
  v23[7] = a14;
  v23[8] = a4;
  v23[9] = a5;
  v23[10] = a7;
  v23[11] = a8;
  v23[12] = v30;
  v24 = *(void (**)(void (*)(), _QWORD *, uint64_t, uint64_t))(a13 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  v24(sub_23C7F5810, v23, a9, a13);
  swift_release();
  return swift_release();
}

uint64_t sub_23C7F479C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v12 = sub_23C9114E4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - v14;
  a2(a4);
  if (!v7)
  {
    sub_23C7DE70C((uint64_t)v15, 0, 1, a7);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(a1, v15, v12);
  }
  return 0;
}

uint64_t sub_23C7F4874(uint64_t a1, char a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v22 = a8;
  v23 = a5;
  v24 = a6;
  v25 = a4;
  v26 = a3;
  v21 = a13;
  sub_23C7DDB10(&qword_25430CCC8);
  v15 = sub_23C911C04();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  sub_23C9114E4();
  v35 = swift_projectBox();
  v36 = a1;
  v37 = a2 & 1;
  v27 = v22;
  v28 = a9;
  v29 = a10;
  v30 = a11;
  v31 = a12;
  v32 = v21;
  v33 = v23;
  v34 = v24;
  v19 = sub_23C7E79A8(&qword_256BCBC50);
  sub_23C8CFB70((void (*)(uint64_t))sub_23C7F5834, v19, (uint64_t)v18);
  v26(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void sub_23C7F49B4(uint64_t a1@<X8>)
{
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C88E1A4((void (*)(uint64_t))sub_23C7F5868, a1);
}

uint64_t sub_23C7F4A28(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[6];

  v15 = sub_23C9114E4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v21 - v17;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  result = sub_23C7DE718((uint64_t)v18, 1, a7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v20 = v21[5];
    a1(a3, v18);
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a7 - 8) + 8))(v18, a7);
    if (v20)
      *a11 = v20;
  }
  return result;
}

uint64_t DatabasePublishers.Write.receive<A>(subscriber:)()
{
  sub_23C7E79A8(&qword_25430CCC8);
  return sub_23C910CB0();
}

uint64_t sub_23C7F4BA0()
{
  return DatabasePublishers.Write.receive<A>(subscriber:)();
}

uint64_t sub_23C7F4BB4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_23C7F4BBC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

void sub_23C7F4BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7DB388();
  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a2;
  sub_23C7DB3A0();
}

uint64_t sub_23C7F4BF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7DB388();
  sub_23C7F4C30(a1);
  return v2;
}

uint64_t *sub_23C7F4C30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *((_BYTE *)v1 + 16) = 0;
  v1[3] = (uint64_t)sub_23C7F4C58(a1, *(_QWORD *)(v2 + 80));
  v1[4] = v3;
  return v1;
}

uint64_t (*sub_23C7F4C58(uint64_t a1, uint64_t a2))@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_23C7DDB10(&qword_25430CCC8);
  v4 = sub_23C911C04();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + v6, a1, v4);
  return sub_23C7F56C8;
}

uint64_t sub_23C7F4D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_23C7DDB10(&qword_25430CCC8);
  v4 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - v6, a1, v4);
  return sub_23C8CB600(v4, (uint64_t)&v9, a2);
}

void sub_23C7F4DC0()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    sub_23C9117B4();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v0 + 16) = 1;
    (*(void (**)(void))(v0 + 24))();
    sub_23C7E58A0();
  }
}

uint64_t DatabaseFuture.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t DatabaseFuture.__deallocating_deinit()
{
  DatabaseFuture.deinit();
  return swift_deallocClassInstance();
}

void AnyDatabaseWriter.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7DB388();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_23C7DB3A0();
}

uint64_t AnyDatabaseWriter.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void AnyDatabaseWriter.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(ObjectType);
  sub_23C7DB3A0();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyDatabaseWriter.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 16))(ObjectType);
}

Swift::Void __swiftcall AnyDatabaseWriter.interrupt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 24))(ObjectType);
}

void AnyDatabaseWriter.read<A>(_:)()
{
  sub_23C7E803C();
  sub_23C7E9794();
  sub_23C7E4BEC();
}

void AnyDatabaseWriter.asyncRead(_:)()
{
  uint64_t v0;

  sub_23C7F59A8();
  sub_23C7E6DFC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 8) + 40));
  sub_23C7DB3A0();
}

void AnyDatabaseWriter.unsafeRead<A>(_:)()
{
  sub_23C7E803C();
  sub_23C7E9794();
  sub_23C7E4BEC();
}

void AnyDatabaseWriter.asyncUnsafeRead(_:)()
{
  uint64_t v0;

  sub_23C7F59A8();
  sub_23C7E6DFC(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 8) + 56));
  sub_23C7DB3A0();
}

void AnyDatabaseWriter.unsafeReentrantRead<A>(_:)()
{
  sub_23C7E803C();
  sub_23C7E9794();
  sub_23C7E4BEC();
}

uint64_t AnyDatabaseWriter.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t ObjectType;

  v7 = *(_QWORD *)(v3 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 72))(a1, a2, a3, ObjectType, v7);
}

void AnyDatabaseWriter.spawnConcurrentRead(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7E168C();
  sub_23C7DFB10(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 80));
  sub_23C7DF5B4();
}

void AnyDatabaseWriter.write<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_23C7E803C();
  DatabaseWriter.write<A>(_:)(v3, v2, v4, v1, v0);
  sub_23C7E4BEC();
}

void AnyDatabaseWriter.writeWithoutTransaction<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

void AnyDatabaseWriter.barrierWriteWithoutTransaction<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

void AnyDatabaseWriter.asyncBarrierWriteWithoutTransaction(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7E168C();
  sub_23C7DFB10(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 40));
  sub_23C7DF5B4();
}

uint64_t AnyDatabaseWriter.asyncWrite<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t ObjectType;

  v11 = *(_QWORD *)(v5 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, a2, a3, a4, a5, ObjectType, v11);
}

void AnyDatabaseWriter.asyncWriteWithoutTransaction(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7E168C();
  sub_23C7DFB10(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 56));
  sub_23C7DF5B4();
}

void AnyDatabaseWriter.unsafeReentrantWrite<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23C7E805C();
  sub_23C7E4BCC(v0, v1, v2, v0);
  sub_23C7E87E8();
}

uint64_t AnyDatabaseWriter._add<A>(observation:scheduling:onChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v25[4];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;

  sub_23C7F59E4();
  v20 = v10[1];
  v21 = *v10;
  v18 = v10[3];
  v19 = v10[2];
  v12 = *((_QWORD *)v10 + 8);
  v11 = *((_QWORD *)v10 + 9);
  v13 = *((_BYTE *)v10 + 80);
  v14 = *((_QWORD *)v10 + 11);
  v15 = *(_QWORD *)(v6 + 24);
  ObjectType = swift_getObjectType();
  v25[0] = v21;
  v25[1] = v20;
  v25[2] = v19;
  v25[3] = v18;
  v26 = v12;
  v27 = v11;
  v28 = v13;
  v29 = v14;
  v30 = *(_OWORD *)(v9 + 96);
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 8) + 72))(v25, v8, v7, a4, a5, a6, ObjectType);
}

uint64_t AnyDatabaseWriter.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t AnyDatabaseWriter.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23C7F53B0()
{
  return MEMORY[0x24BEE3F20];
}

void sub_23C7F53BC()
{
  AnyDatabaseWriter.write<A>(_:)();
}

void sub_23C7F53D0()
{
  AnyDatabaseWriter.writeWithoutTransaction<A>(_:)();
}

void sub_23C7F53E4()
{
  AnyDatabaseWriter.barrierWriteWithoutTransaction<A>(_:)();
}

void sub_23C7F5404()
{
  AnyDatabaseWriter.unsafeReentrantWrite<A>(_:)();
}

void sub_23C7F5424()
{
  AnyDatabaseWriter.close()();
}

void sub_23C7F543C()
{
  AnyDatabaseWriter.read<A>(_:)();
}

void sub_23C7F5454()
{
  AnyDatabaseWriter.unsafeRead<A>(_:)();
}

void sub_23C7F546C()
{
  AnyDatabaseWriter.unsafeReentrantRead<A>(_:)();
}

uint64_t dispatch thunk of DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of DatabaseWriter.writeWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of DatabaseWriter.barrierWriteWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncBarrierWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncWrite<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of DatabaseWriter.unsafeReentrantWrite<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of DatabaseWriter.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of DatabaseWriter.spawnConcurrentRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t sub_23C7F550C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for DatabasePublishers.Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabasePublishers.Write);
}

uint64_t sub_23C7F5524()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DatabaseFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabaseFuture);
}

uint64_t method lookup function for DatabaseFuture()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseFuture.wait()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t type metadata accessor for AnyDatabaseWriter()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyDatabaseWriter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyDatabaseWriter.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23C7F55D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return DatabaseWriter.write<A>(_:)(a1, a2, *v5, a3, a5);
}

uint64_t sub_23C7F55F4()
{
  return DatabaseWriter.asyncWrite<A>(_:completion:)();
}

unint64_t sub_23C7F5600(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C7F5610(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_23C7F5620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  sub_23C7DDB10(&qword_25430CCC8);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C911C04() - 8) + 80);
  v3 = (v2 + 24) & ~v2;
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23C7F56C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_23C7DDB10(&qword_25430CCC8);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C911C04() - 8) + 80);
  return sub_23C7F4D00(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_23C7F573C()
{
  sub_23C7F59D0();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23C7F5774(uint64_t a1)
{
  uint64_t *v1;

  sub_23C7F4550(a1, v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
  sub_23C7DF2C8();
}

uint64_t sub_23C7F57AC()
{
  uint64_t v0;

  return sub_23C7F479C(*(_QWORD *)(v0 + 64), *(void (**)(uint64_t))(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23C7F57E0()
{
  sub_23C7F59D0();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23C7F5810()
{
  uint64_t v0;
  char v1;
  void (*v2)(char *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C7E9A98();
  sub_23C7F4874(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  sub_23C7DF2C8();
}

void sub_23C7F5834(uint64_t a1@<X8>)
{
  sub_23C7F49B4(a1);
}

void sub_23C7F5868(_QWORD *a1)
{
  uint64_t v1;

  sub_23C7F4A28(*(void (**)(uint64_t, char *))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
  sub_23C7E58A0();
}

uint64_t sub_23C7F58A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C7F58C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 56))(a2);
}

uint64_t sub_23C7F58E8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C7F5910(uint64_t a1)
{
  uint64_t *v1;

  sub_23C7F389C(a1, v1[5], v1[6], v1[7], v1[2], v1[3]);
}

uint64_t sub_23C7F5930()
{
  return swift_deallocObject();
}

uint64_t sub_23C7F5940(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C7F3324(a1, a2, v2[5], v2[2], v2[3]);
}

uint64_t sub_23C7F5954()
{
  return sub_23C7F2FAC();
}

uint64_t sub_23C7F596C(uint64_t a1)
{
  return sub_23C7F304C(a1);
}

uint64_t sub_23C7F5984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C7F55D8(a1, a2, a3, a4, a5);
}

uint64_t sub_23C7F599C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23C7F59A8()
{
  return swift_getObjectType();
}

uint64_t sub_23C7F59D0()
{
  return swift_release();
}

uint64_t sub_23C7F59D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t *)@<X8>, uint64_t a3)
{
  return a2(a1, &a3);
}

uint64_t Record.__allocating_init()()
{
  uint64_t result;

  result = sub_23C7DB388();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t Record.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

void Record.__allocating_init(row:)(uint64_t a1)
{
  sub_23C7DB388();
  Record.init(row:)(a1);
  sub_23C7DB390();
}

uint64_t Record.init(row:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  *(_QWORD *)(v1 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  sub_23C7E19C8();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    sub_23C7E19C8();
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 112))(a1, v6, v7);
    swift_release();
    *(_QWORD *)(v2 + 16) = v8;
  }
  swift_release();
  return v2;
}

void sub_23C7F5AF4()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C7F5B4C(_WORD *a1@<X8>)
{
  *a1 = 257;
}

double sub_23C7F5B58()
{
  uint64_t v0;
  double result;

  sub_23C7E79A8(&qword_25430D128);
  v0 = sub_23C7DB388();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v0 + 56) = &type metadata for AllColumns;
  *(_QWORD *)(v0 + 64) = &protocol witness table for AllColumns;
  return result;
}

void sub_23C7F5BA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = *v0;
  sub_23C7E16A0();
  v4 = v0;
  sub_23C7DB634();
  v2 = sub_23C820114((uint64_t)&v4, v1, (uint64_t)&protocol witness table for Record);
  (*(void (**)(uint64_t))(v1 + 96))(v2);
  v3 = swift_retain();
  sub_23C7F623C(v3);
  sub_23C7E252C();
}

uint64_t sub_23C7F5C08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  v5 = MEMORY[0x24BEE4AF8];
  v6 = sub_23C910DAC();
  (*(void (**)(uint64_t *))(*(_QWORD *)a1 + 128))(&v5);
  swift_bridgeObjectRelease();
  sub_23C7F79D4(v6);
  swift_bridgeObjectRelease();
  type metadata accessor for Row();
  swift_allocObject();
  sub_23C7F8DD8();
  v3 = v2;
  swift_release();
  return v3;
}

BOOL sub_23C7F5CD0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  sub_23C7F5E1C();
  sub_23C9117F0();
  swift_release();
  if (v2)
    sub_23C7F624C(v1, v2, v3, v4, v5);
  return v2 != 0;
}

uint64_t sub_23C7F5D2C(char a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 1) != 0)
    return sub_23C7F623C(0);
  v2 = swift_retain();
  v3 = sub_23C7F5C08(v2);
  return sub_23C7F623C(v3);
}

void (*sub_23C7F5D54(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_23C7F5CD0();
  return sub_23C7F5D8C;
}

void sub_23C7F5D8C(uint64_t a1)
{
  sub_23C7F5D2C(*(_BYTE *)(a1 + 8));
  sub_23C7DB390();
}

void sub_23C7F5DAC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7F5E1C();
  v1 = MEMORY[0x24BEE4B00];
  v0 = swift_retain();
  sub_23C7F8A8C(v0, 1, &v1);
  sub_23C7DE904();
  sub_23C7E252C();
}

void sub_23C7F5E1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v1 = v0[2];
  v2 = sub_23C7DB388();
  sub_23C7DB634();
  swift_retain();
  sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  *(_QWORD *)&v5 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v5 + 1) = sub_23C910DAC();
  (*(void (**)(__int128 *))(*v0 + 128))(&v5);
  swift_release();
  *(_OWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = sub_23C7DB388();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  sub_23C7E79A8(&qword_256BCBC70);
  v4 = sub_23C7DB388();
  *(_QWORD *)(v4 + 16) = sub_23C7F9264;
  *(_QWORD *)(v4 + 24) = v3;
  sub_23C7E252C();
}

void sub_23C7F5EEC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  __int128 v24;
  char v25;
  char v27;
  _QWORD v28[2];
  _BYTE v29[40];
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  unsigned __int8 v34[8];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[48];

  while (1)
  {
    swift_beginAccess();
    v5 = a1[4];
    v6 = a1[2];
    v7 = *(_QWORD *)(v6 + 16);
    if (v5 == v7)
    {
      v32 = 0;
      memset(v31, 0, sizeof(v31));
      v30 = 0u;
      goto LABEL_8;
    }
    if (v5 >= v7)
      break;
    v8 = a1[3];
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_22;
    v9 = v6 + 16 * v5;
    v11 = *(_QWORD *)(v9 + 32);
    v10 = *(_QWORD *)(v9 + 40);
    swift_bridgeObjectRetain_n();
    v12 = sub_23C7E94B8();
    if ((v13 & 1) == 0)
      goto LABEL_23;
    sub_23C7F91B8(*(_QWORD *)(v8 + 56) + 40 * v12, (uint64_t)v29);
    swift_bridgeObjectRelease();
    v28[0] = v11;
    v28[1] = v10;
    *(_QWORD *)&v30 = v11;
    *((_QWORD *)&v30 + 1) = v10;
    sub_23C7F91B8((uint64_t)v29, (uint64_t)v31);
    swift_bridgeObjectRetain();
    sub_23C7E7900((uint64_t)v28, &qword_25430B370);
    v14 = a1[4];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_24;
    a1[4] = v16;
LABEL_8:
    swift_endAccess();
    if (!*((_QWORD *)&v30 + 1))
    {
      sub_23C7E7900((uint64_t)&v30, &qword_25430B378);
      *(_BYTE *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
    v33 = v30;
    sub_23C7F926C((uint64_t)v31, (uint64_t)v34);
    v17 = v33;
    sub_23C7F926C((uint64_t)v34, (uint64_t)v37);
    sub_23C7F91B8((uint64_t)v37, (uint64_t)&v33);
    v18 = v35;
    if (v35)
    {
      v19 = v36;
      sub_23C7E7E34(&v33, v35);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 24))(&v30, v18, v19);
      v21 = *((_QWORD *)&v30 + 1);
      v20 = v30;
      v22 = v31[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v33);
      if (!a2)
        goto LABEL_17;
    }
    else
    {
      sub_23C7E7900((uint64_t)&v33, (uint64_t *)&unk_25430D6B8);
      v20 = 0;
      v21 = 0;
      v22 = 4;
      if (!a2)
      {
LABEL_17:
        sub_23C7E7900((uint64_t)v37, (uint64_t *)&unk_25430D6B8);
LABEL_19:
        sub_23C7E5640(v20, v21, v22);
        *(_OWORD *)a3 = v17;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_BYTE *)(a3 + 32) = -1;
        return;
      }
    }
    swift_retain();
    sub_23C7F89E8(v17, *((uint64_t *)&v17 + 1), (uint64_t)&v33);
    v23 = v34[0];
    if (v34[0] == 255)
    {
      sub_23C7E7900((uint64_t)v37, (uint64_t *)&unk_25430D6B8);
      swift_release();
      goto LABEL_19;
    }
    v24 = v33;
    *(_QWORD *)&v33 = v20;
    *((_QWORD *)&v33 + 1) = v21;
    v34[0] = v22;
    v30 = v24;
    LOBYTE(v31[0]) = v23;
    static DatabaseValue.== infix(_:_:)((uint64_t)&v33);
    v27 = v25;
    swift_release();
    sub_23C7E7900((uint64_t)v37, (uint64_t *)&unk_25430D6B8);
    sub_23C7E5640(v20, v21, v22);
    if ((v27 & 1) == 0)
    {
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v24;
      *(_BYTE *)(a3 + 32) = v23;
      return;
    }
    swift_bridgeObjectRelease();
    sub_23C7F6294(v24, *((unint64_t *)&v24 + 1), v23);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_23C7F623C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t sub_23C7F624C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return sub_23C7F6294(a3, a4, a5);
  }
  return result;
}

uint64_t sub_23C7F6294(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_23C7E5640(result, a2, a3);
  return result;
}

uint64_t sub_23C7F62A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  GRDBInternal::StatementArguments_optional v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 112))(v15);
  v4 = LOBYTE(v15[0]);
  sub_23C7E79A8(&qword_256BCBC58);
  sub_23C7DB388();
  swift_retain();
  sub_23C7DB634();
  result = sub_23C7F8694(a1, v1);
  if (!v2)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 32);
    v15[5] = *(_QWORD *)(result + 24);
    v16 = v7;
    swift_bridgeObjectRetain();
    sub_23C7DBBB0();
    sub_23C7F64A0(v4);
    v15[0] = 0;
    v15[1] = 0;
    v8.value.values._rawValue = v15;
    Statement.execute(arguments:)(v8);
    if (v9)
    {
      sub_23C7DFB3C();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      if ((_DWORD)v4 != 3)
      {
        Database.lastInsertedRowID.getter();
        v11 = v10;
        if (*(_BYTE *)(v6 + 72))
        {
          v12 = 0;
          v13 = 0;
        }
        else
        {
          v12 = *(_QWORD *)(v6 + 56);
          v13 = *(_QWORD *)(v6 + 64);
          sub_23C7F8E30(v12, v13, 0);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 136))(v11, v12, v13);
        if (v13)
        {
          v15[3] = MEMORY[0x24BEE4008];
          v15[4] = &protocol witness table for Int64;
          v15[0] = v11;
          sub_23C820278((uint64_t)v15);
          v7 = v16;
        }
      }
      swift_bridgeObjectRelease();
      sub_23C7F79D4(v7);
      swift_bridgeObjectRelease();
      type metadata accessor for Row();
      sub_23C7DB388();
      sub_23C7F8DD8();
      sub_23C7F623C(v14);
      return sub_23C7DFB3C();
    }
  }
  return result;
}

#error "23C7F6560: call analysis failed (funcsize=75)"

uint64_t sub_23C7F65CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  sub_23C7E79A8(&qword_256BCBC58);
  sub_23C7DB388();
  swift_retain();
  swift_retain();
  result = sub_23C7F8694(a1, v2);
  if (!v3)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v2 + 112))(v13);
    if (sub_23C7F6828(a2))
    {
      v13[0] = 0;
      v13[1] = 0;
      v8 = v13;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v7 - 1));
      if (!v9)
      {
        Database.changesCount.getter();
        if (v10)
        {
          v11 = swift_bridgeObjectRetain();
          sub_23C7F79D4(v11);
          swift_bridgeObjectRelease();
          type metadata accessor for Row();
          sub_23C7DB388();
          sub_23C7F8DD8();
          sub_23C7F623C(v12);
        }
        else
        {
          sub_23C7F6730();
          sub_23C7E8090();
        }
      }
      sub_23C7DFB3C();
    }
    else
    {
      sub_23C7F6730();
      sub_23C7E8090();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_23C7F6730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(unsigned __int8 *)(v0 + 72);
  if (*(_BYTE *)(v0 + 72))
  {
    if (v3 == 1)
      v4 = *(_OWORD **)(v0 + 56);
    else
      v4 = &unk_250D865A0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v4 = (_OWORD *)swift_allocObject();
    v4[1] = xmmword_23C912A20;
    *((_QWORD *)v4 + 4) = v1;
    *((_QWORD *)v4 + 5) = v2;
  }
  swift_retain();
  sub_23C7F8E30(v1, v2, v3);
  v5 = sub_23C7F7E84((uint64_t)v4, v0);
  swift_bridgeObjectRelease();
  v6 = sub_23C828EB8(v5);
  v8 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  sub_23C7F9170();
  v9 = swift_allocError();
  *v10 = v8;
  v10[1] = v7;
  v10[2] = v6;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t sub_23C7F6828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  GRDBInternal::StatementArguments v65;
  _OWORD *v66;
  uint64_t v67;
  char v68;
  _QWORD v69[5];

  v3 = v1;
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(unsigned __int8 *)(v1 + 72);
  if (v6)
  {
    v7 = a1;
    if (v6 == 1)
      v8 = (_OWORD *)v4;
    else
      v8 = &unk_250D86540;
  }
  else
  {
    v7 = a1;
    sub_23C7E79A8(&qword_25430DA10);
    v8 = (_OWORD *)swift_allocObject();
    v8[1] = xmmword_23C912A20;
    *((_QWORD *)v8 + 4) = v4;
    *((_QWORD *)v8 + 5) = v5;
  }
  swift_retain();
  sub_23C7F8E30(v4, v5, v6);
  v9 = sub_23C7F7CD0((uint64_t)v8, v3);
  v10 = v2;
  v11 = *(_QWORD *)(v9 + 16);
  if (!v11)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_BYTE *)(v9 + 48);
  while (*v12 == 4 && *((_OWORD *)v12 - 1) == 0)
  {
    v12 += 24;
    if (!--v11)
      goto LABEL_14;
  }
  v66 = v8;
  v67 = v3;
  v15 = v7;
  v16 = *(_QWORD *)(v7 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (!v16)
  {
LABEL_25:
    sub_23C7F70A4(v17);
    v14 = v67;
    v31 = *(_QWORD *)(v67 + 24);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v69[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23C7E649C();
      v33 = v69[0];
      v34 = v31 + 40;
      do
      {
        v35 = sub_23C910E18();
        v37 = v36;
        v69[0] = v33;
        v38 = *(_QWORD *)(v33 + 16);
        if (v38 >= *(_QWORD *)(v33 + 24) >> 1)
        {
          sub_23C7E649C();
          v33 = v69[0];
        }
        v34 += 16;
        *(_QWORD *)(v33 + 16) = v38 + 1;
        v39 = v33 + 16 * v38;
        *(_QWORD *)(v39 + 32) = v35;
        *(_QWORD *)(v39 + 40) = v37;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease();
      v10 = v2;
      v14 = v67;
    }
    v40 = sub_23C87C704();
    swift_bridgeObjectRelease();
    v41 = *((_QWORD *)v66 + 2);
    v42 = MEMORY[0x24BEE4AF8];
    if (v41)
    {
      v69[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v42 = v69[0];
      v43 = (char *)v66 + 40;
      do
      {
        v44 = sub_23C910E18();
        v46 = v45;
        v69[0] = v42;
        v47 = *(_QWORD *)(v42 + 16);
        if (v47 >= *(_QWORD *)(v42 + 24) >> 1)
        {
          sub_23C7E649C();
          v42 = v69[0];
        }
        v43 += 16;
        *(_QWORD *)(v42 + 16) = v47 + 1;
        v48 = v42 + 16 * v47;
        *(_QWORD *)(v48 + 32) = v44;
        *(_QWORD *)(v48 + 40) = v46;
        --v41;
      }
      while (v41);
      v14 = v67;
    }
    sub_23C87C82C(v42, v40);
    v50 = v49;
    swift_bridgeObjectRelease();
    v51 = *(_QWORD *)(v14 + 48);
    Database.columns(in:)(*(_QWORD *)(v14 + 40), v51);
    if (v10)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = sub_23C877D6C(v52);
      swift_bridgeObjectRelease();
      sub_23C878998(v53, v50);
      v55 = (_OWORD *)v54;
      if (*(_QWORD *)(v54 + 16))
      {
        v56 = v66;
      }
      else
      {
        swift_bridgeObjectRelease();
        v56 = v66;
        swift_bridgeObjectRetain();
        v55 = v66;
      }
      swift_retain();
      v57 = swift_bridgeObjectRetain();
      v58 = sub_23C7F7CD0(v57, v67);
      swift_bridgeObjectRelease();
      v69[2] = v51;
      v69[3] = v55;
      v69[4] = v56;
      swift_bridgeObjectRetain();
      v59 = sub_23C87BA30();
      v61 = v60;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = sub_23C7DF68C(v59, v61);
      swift_bridgeObjectRelease();
      sub_23C7EDA4C();
      MEMORY[0x24BDAC7A8](v62);
      sub_23C7E79A8(&qword_25430CF60);
      sub_23C7F910C();
      swift_getKeyPath();
      swift_retain();
      sub_23C8C8974(v58);
      v64 = v63;
      swift_bridgeObjectRelease();
      swift_release();
      v69[0] = v64;
      v69[1] = MEMORY[0x24BEE4B00];
      v65.values._rawValue = v69;
      Statement.setUncheckedArguments(_:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v14;
  }
  v69[0] = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  result = sub_23C87DAD4(v15);
  v19 = result;
  v21 = v20;
  v23 = v22 & 1;
  while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(_BYTE *)(v15 + 32))
  {
    if (((*(_QWORD *)(v15 + 56 + (((unint64_t)v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_45;
    if (*(_DWORD *)(v15 + 36) != (_DWORD)v21)
      goto LABEL_46;
    v68 = v23;
    v24 = sub_23C910E18();
    v26 = v25;
    v69[0] = v17;
    v27 = *(_QWORD *)(v17 + 16);
    if (v27 >= *(_QWORD *)(v17 + 24) >> 1)
    {
      sub_23C7E649C();
      v17 = v69[0];
    }
    *(_QWORD *)(v17 + 16) = v27 + 1;
    v28 = v17 + 16 * v27;
    *(_QWORD *)(v28 + 32) = v24;
    *(_QWORD *)(v28 + 40) = v26;
    result = sub_23C87D9EC(v19, v21, v68 & 1, v15);
    v19 = result;
    v21 = v29;
    v23 = v30 & 1;
    if (!--v16)
    {
      sub_23C7F91AC(result, v29, v23);
      v10 = v2;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

BOOL Record.updateChanges(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  sub_23C7F5DAC();
  v3 = sub_23C7F7438();
  v4 = v3[2];
  if (v4)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 224))(a1, v3);
  swift_bridgeObjectRelease();
  return v4 != 0;
}

_QWORD *sub_23C7F6EA8()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;

  sub_23C7ECB50();
  v18 = sub_23C7E5D9C();
  result = sub_23C90175C(v19, v0);
  v2 = v19[1];
  v3 = v19[3];
  v4 = v20;
  v5 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20)
    goto LABEL_3;
LABEL_2:
  v4 &= v4 - 1;
  while (1)
  {
    sub_23C7DBCC8();
    sub_23C7DBBB0();
    sub_23C7E4C0C((uint64_t)v17, v10, v11, v12, v13, v14, v15, v16, v17[0], v17[1]);
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_2;
LABEL_3:
    v6 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v6 >= v5)
      goto LABEL_21;
    v7 = *(_QWORD *)(v2 + 8 * v6);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3 + 2;
      if (v3 + 2 >= v5)
        goto LABEL_21;
      v7 = *(_QWORD *)(v2 + 8 * v8);
      if (!v7)
      {
        v8 = v3 + 3;
        if (v3 + 3 >= v5)
          goto LABEL_21;
        v7 = *(_QWORD *)(v2 + 8 * v8);
        if (!v7)
        {
          v8 = v3 + 4;
          if (v3 + 4 >= v5)
            goto LABEL_21;
          v7 = *(_QWORD *)(v2 + 8 * v8);
          if (!v7)
          {
            v8 = v3 + 5;
            if (v3 + 5 >= v5)
              goto LABEL_21;
            v7 = *(_QWORD *)(v2 + 8 * v8);
            if (!v7)
            {
              v9 = v3 + 6;
              while (v9 < v5)
              {
                v7 = *(_QWORD *)(v2 + 8 * v9++);
                if (v7)
                {
                  v8 = v9 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              sub_23C7DE904();
              return (_QWORD *)v18;
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v7 - 1) & v7;
    v3 = v8;
  }
  __break(1u);
  return result;
}

void sub_23C7F7024(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5[2];

  v5[1] = sub_23C911298();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = *(_QWORD *)(a1 + 8 * i + 32);
      sub_23C8FA748(v5, v4);
    }
    sub_23C7DB624();
  }
  else
  {
    sub_23C7DB624();
  }
  sub_23C7E252C();
}

void sub_23C7F70A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23C911298();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 40;
    do
    {
      sub_23C7DBCC8();
      sub_23C7E9510();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_23C7DB624();
  sub_23C7EE390();
}

uint64_t sub_23C7F713C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7ECB50();
  v1 = sub_23C7E5D9C();
  v15 = v1;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = v0 + 56;
    do
    {
      sub_23C7DBCC8();
      sub_23C7DBBB0();
      sub_23C7E4C0C((uint64_t)&v14, v4, v5, v6, v7, v8, v9, v10, v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 += 32;
      --v2;
    }
    while (v2);
    sub_23C7DB624();
    return v15;
  }
  else
  {
    v11 = v1;
    sub_23C7DB624();
  }
  return v11;
}

uint64_t sub_23C7F71E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10[2];
  char v11;
  uint64_t v12;

  sub_23C7F90AC();
  v2 = sub_23C7E5D9C();
  v12 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (char *)(a1 + 48);
    do
    {
      v5 = *((_QWORD *)v4 - 2);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v4 += 24;
      sub_23C7E56A4(v5, v6, v7);
      sub_23C8FAA68((uint64_t)v10, v5, v6, v7);
      sub_23C7E5640(v10[0], v10[1], v11);
      --v3;
    }
    while (v3);
    sub_23C7DB624();
    return v12;
  }
  else
  {
    v8 = v2;
    sub_23C7DB624();
  }
  return v8;
}

void sub_23C7F72A8(unint64_t a1)
{
  sub_23C7F72CC(a1, (uint64_t (*)(uint64_t))type metadata accessor for Row, &qword_256BCBC60, (uint64_t)&protocol conformance descriptor for Row, (void (*)(_QWORD *, uint64_t))sub_23C8FB678);
}

void sub_23C7F72CC(unint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t))
{
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD v14[2];

  v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23C9117C0();
    sub_23C7DB624();
  }
  a2(0);
  sub_23C7E45DC(a3, a2, a4);
  v14[1] = sub_23C911298();
  if (!v10)
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_5;
LABEL_13:
    sub_23C7DB624();
LABEL_14:
    sub_23C7EE390();
    return;
  }
  swift_bridgeObjectRetain();
  v11 = sub_23C9117C0();
  sub_23C7DB624();
  if (!v11)
    goto LABEL_13;
LABEL_5:
  if (v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x242625290](i, a1);
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      a5(v14, v13);
      swift_release();
    }
    sub_23C7DB624();
    goto LABEL_14;
  }
  __break(1u);
}

_QWORD *sub_23C7F742C()
{
  return sub_23C7F7438();
}

_QWORD *sub_23C7F7438()
{
  _QWORD *(*v0)(_QWORD *__return_ptr, uint64_t);
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  sub_23C7EC560();
  v11 = sub_23C911298();
  result = v0(v12, v1);
  v3 = v12[1];
  v4 = v12[3];
  v5 = v13;
  v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    sub_23C7DBCC8();
    sub_23C7E9510();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              sub_23C7DE904();
              return (_QWORD *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

void Record.save(_:)(uint64_t a1)
{
  sub_23C7F75B8(a1);
}

void sub_23C7F75B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = sub_23C7F8118(a1);
  if (!v2)
  {
    if (v4)
    {
      sub_23C7F8054(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 216))(a1);
    }
  }
}

BOOL sub_23C7F774C()
{
  BOOL v0;

  v0 = sub_23C7F7780();
  sub_23C7F623C(0);
  return v0;
}

BOOL sub_23C7F7780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  sub_23C7E79A8(&qword_256BCBC58);
  swift_allocObject();
  swift_retain();
  v2 = swift_retain();
  sub_23C7F8694(v2, v0);
  if (!v1)
  {
    v4 = sub_23C7F846C();
    swift_release();
    if (v4)
    {
      v11[0] = 0;
      v11[1] = 0;
      v7 = v11;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v5 - 1));
      if (v8)
      {
        swift_release();
      }
      else
      {
        Database.changesCount.getter();
        v10 = v9;
        swift_release();
        return v10 > 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t Record.deinit()
{
  uint64_t v0;

  sub_23C7E58A8();
  return v0;
}

uint64_t Record.__deallocating_deinit()
{
  sub_23C7E58A8();
  return swift_deallocClassInstance();
}

uint64_t sub_23C7F78A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_23C7F78D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_23C7F78D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_23C7F78E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t sub_23C7F7908()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

void sub_23C7F7930(uint64_t a1)
{
  Record.save(_:)(a1);
}

uint64_t sub_23C7F7950()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_23C7F7958()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
}

uint64_t sub_23C7F7980()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))() & 1;
}

uint64_t sub_23C7F79AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

void sub_23C7F79D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;
  _QWORD v39[2];
  _BYTE v40[40];
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v41 = MEMORY[0x24BEE4AF8];
    sub_23C7FD314();
    v3 = sub_23C8F74D0(v2);
    if ((v5 & 1) == 0)
    {
      v6 = v3;
      v7 = v4;
      v8 = v2 + 64;
      v24 = v2;
      v9 = v1 - 1;
      v23 = v2 + 64;
      if ((v3 & 0x8000000000000000) == 0)
      {
        while (v6 < 1 << *(_BYTE *)(v2 + 32))
        {
          if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_22;
          if (v7 != *(_DWORD *)(v2 + 36))
            goto LABEL_23;
          v25 = v9;
          v10 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v6);
          v11 = *v10;
          v12 = v10[1];
          sub_23C7F91B8(*(_QWORD *)(v2 + 56) + 40 * v6, (uint64_t)v40);
          v39[0] = v11;
          v39[1] = v12;
          *(_QWORD *)&v36 = v11;
          *((_QWORD *)&v36 + 1) = v12;
          sub_23C7F91B8((uint64_t)v40, (uint64_t)v37);
          v33 = v36;
          v34[0] = v37[0];
          v34[1] = v37[1];
          v35 = v38;
          swift_bridgeObjectRetain_n();
          sub_23C7E7900((uint64_t)v39, &qword_25430B370);
          v42 = *((_QWORD *)&v33 + 1);
          v27 = v33;
          sub_23C7F91B8((uint64_t)v34, (uint64_t)v30);
          v13 = v31;
          if (v31)
          {
            v14 = v32;
            sub_23C7E7E34(v30, v31);
            (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 24))(v28, v13, v14);
            v16 = v28[0];
            v15 = v28[1];
            v17 = v29;
            _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v30);
          }
          else
          {
            sub_23C7E7900((uint64_t)v30, (uint64_t *)&unk_25430D6B8);
            v16 = 0;
            v15 = 0;
            v17 = 4;
          }
          swift_bridgeObjectRetain();
          sub_23C7E7900((uint64_t)&v33, &qword_25430B370);
          v18 = v41;
          v26 = v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7FD314();
            v18 = v41;
          }
          v19 = *(_QWORD *)(v18 + 16);
          if (v19 >= *(_QWORD *)(v18 + 24) >> 1)
          {
            sub_23C7FD314();
            v18 = v41;
          }
          *(_QWORD *)(v18 + 16) = v19 + 1;
          v20 = v18 + 40 * v19;
          v21 = v42;
          *(_QWORD *)(v20 + 32) = v27;
          *(_QWORD *)(v20 + 40) = v21;
          *(_QWORD *)(v20 + 48) = v16;
          *(_QWORD *)(v20 + 56) = v15;
          *(_BYTE *)(v20 + 64) = v17;
          v2 = v24;
          if (v6 >= -(-1 << *(_BYTE *)(v24 + 32)))
            goto LABEL_24;
          v8 = v23;
          if ((*(_QWORD *)(v23 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_25;
          if (v26 != *(_DWORD *)(v24 + 36))
            goto LABEL_26;
          v22 = sub_23C91158C();
          if (!v25)
            return;
          v6 = v22;
          v7 = *(_DWORD *)(v24 + 36);
          v9 = v25 - 1;
          if (v22 < 0)
            break;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_23C7F7CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_23C7E56C8();
    v5 = v22;
    v6 = a1 + 40;
    v15 = a2;
    do
    {
      v7 = *(_QWORD *)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C821964((uint64_t)v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v20;
      if (v20)
      {
        v9 = v21;
        sub_23C7E7E34(v19, v20);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 24))(&v16, v8, v9);
        v8 = v16;
        v10 = v17;
        v11 = v18;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
      }
      else
      {
        sub_23C7E7900((uint64_t)v19, (uint64_t *)&unk_25430D6B8);
        v10 = 0;
        v11 = 4;
      }
      swift_bridgeObjectRelease();
      v22 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      if (v12 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_23C7E56C8();
        v5 = v22;
      }
      v6 += 16;
      *(_QWORD *)(v5 + 16) = v12 + 1;
      v13 = v5 + 24 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
      *(_BYTE *)(v13 + 48) = v11;
      --v3;
      a2 = v15;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t sub_23C7F7E84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_23C7FD314();
    v5 = v23;
    v6 = (uint64_t *)(a1 + 40);
    v16 = a2;
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)&v18 = *(_QWORD *)(a2 + 24);
      *((_QWORD *)&v18 + 1) = v9;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C821964((uint64_t)v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        sub_23C7E7E34(v20, v21);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 24))(&v18, v10, v11);
        v17 = v18;
        v12 = v19;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7E7900((uint64_t)v20, (uint64_t *)&unk_25430D6B8);
        swift_bridgeObjectRelease();
        v17 = 0u;
        v12 = 4;
      }
      v23 = v5;
      v13 = *(_QWORD *)(v5 + 16);
      if (v13 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_23C7FD314();
        v5 = v23;
      }
      v6 += 2;
      *(_QWORD *)(v5 + 16) = v13 + 1;
      v14 = v5 + 40 * v13;
      *(_QWORD *)(v14 + 32) = v7;
      *(_QWORD *)(v14 + 40) = v8;
      *(_OWORD *)(v14 + 48) = v17;
      *(_BYTE *)(v14 + 64) = v12;
      --v3;
      a2 = v16;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t sub_23C7F8054(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 104))();
  Database.columns(in:)(v5, v6);
  if (!v2)
  {
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = sub_23C877D6C(v8);
    swift_bridgeObjectRelease();
    sub_23C7F70A4(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 224))(a1, v10);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23C7F8118(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v3 = v1;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 104))();
  v6 = a1;
  Database.primaryKey(_:)(v5, v7, &v34);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    v8 = (_OWORD *)v34;
    v9 = v35;
    v10 = v36;
    v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104);
    swift_retain();
    v12 = swift_retain();
    v13 = v11(v12);
    Database.columns(in:)(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7F16C0();
    v17 = v16;
    sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
    v18 = sub_23C910DA0();
    v34 = v17;
    v35 = v18;
    (*(void (**)(uint64_t *))(*(_QWORD *)v3 + 128))(&v34);
    swift_release();
    swift_release();
    v19 = v34;
    v20 = v35;
    if (v10)
    {
      if (v10 == 1)
        v21 = v8;
      else
        v21 = &unk_250D858A8;
    }
    else
    {
      sub_23C7E79A8(&qword_25430DA10);
      v21 = (_OWORD *)swift_allocObject();
      v21[1] = xmmword_23C912A20;
      *((_QWORD *)v21 + 4) = v8;
      *((_QWORD *)v21 + 5) = v9;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = sub_23C878080((uint64_t)v21, v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_23C828EB8(v22);
    result = sub_23C90175C(&v37, v6);
    v23 = v40;
    v24 = v41;
    v25 = (unint64_t)(v39 + 64) >> 6;
    while (1)
    {
      if (v24)
      {
        v26 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        v27 = v26 | (v23 << 6);
      }
      else
      {
        v28 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
          return result;
        }
        if (v28 >= v25)
          goto LABEL_38;
        v29 = *(_QWORD *)(v38 + 8 * v28);
        v30 = v23 + 1;
        if (!v29)
        {
          v30 = v23 + 2;
          if (v23 + 2 >= v25)
            goto LABEL_38;
          v29 = *(_QWORD *)(v38 + 8 * v30);
          if (!v29)
          {
            v30 = v23 + 3;
            if (v23 + 3 >= v25)
              goto LABEL_38;
            v29 = *(_QWORD *)(v38 + 8 * v30);
            if (!v29)
            {
              v30 = v23 + 4;
              if (v23 + 4 >= v25)
                goto LABEL_38;
              v29 = *(_QWORD *)(v38 + 8 * v30);
              if (!v29)
              {
                v30 = v23 + 5;
                if (v23 + 5 >= v25)
                  goto LABEL_38;
                v29 = *(_QWORD *)(v38 + 8 * v30);
                if (!v29)
                {
                  v30 = v23 + 6;
                  if (v23 + 6 >= v25)
                    goto LABEL_38;
                  v29 = *(_QWORD *)(v38 + 8 * v30);
                  if (!v29)
                  {
                    v30 = v23 + 7;
                    if (v23 + 7 >= v25)
                      goto LABEL_38;
                    v29 = *(_QWORD *)(v38 + 8 * v30);
                    if (!v29)
                    {
                      v31 = v23 + 8;
                      while (v31 < v25)
                      {
                        v29 = *(_QWORD *)(v38 + 8 * v31++);
                        if (v29)
                        {
                          v30 = v31 - 1;
                          goto LABEL_32;
                        }
                      }
LABEL_38:
                      swift_release();
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_32:
        v24 = (v29 - 1) & v29;
        v27 = __clz(__rbit64(v29)) + (v30 << 6);
        v23 = v30;
      }
      v32 = *(_QWORD *)(v37 + 56) + 24 * v27;
      if (*(_BYTE *)(v32 + 16) != 4 || *(_OWORD *)v32 != 0)
      {
        swift_bridgeObjectRetain();
        swift_release();
        return (_QWORD *)v6;
      }
    }
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)v6;
}

uint64_t sub_23C7F846C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  GRDBInternal::StatementArguments v20;
  _QWORD v22[2];

  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(unsigned __int8 *)(v0 + 72);
  if (*(_BYTE *)(v0 + 72))
  {
    if (v4 == 1)
      v5 = *(_OWORD **)(v0 + 56);
    else
      v5 = &unk_250D864B0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v5 = (_OWORD *)swift_allocObject();
    v5[1] = xmmword_23C912A20;
    *((_QWORD *)v5 + 4) = v2;
    *((_QWORD *)v5 + 5) = v3;
  }
  swift_retain();
  sub_23C7F8E30(v2, v3, v4);
  v6 = sub_23C7F7CD0((uint64_t)v5, v0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = (_BYTE *)(v6 + 48);
    while (*v9 == 4 && *((_OWORD *)v9 - 1) == 0)
    {
      v9 += 24;
      if (!--v8)
        goto LABEL_14;
    }
    v11 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    sub_23C87BEF0();
    v13 = v12;
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = sub_23C7DF68C(v13, v15);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = v16;
      v17 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v17);
      sub_23C7E79A8(&qword_25430CF60);
      sub_23C7F910C();
      swift_getKeyPath();
      swift_retain();
      sub_23C8C8974(v7);
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_release();
      v22[0] = v19;
      v22[1] = MEMORY[0x24BEE4B00];
      v20.values._rawValue = v22;
      Statement.setUncheckedArguments(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

uint64_t sub_23C7F8694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v4 = v3;
  v5 = v2;
  *(_QWORD *)(v2 + 16) = a1;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104);
  v8 = swift_retain();
  v9 = v7(v8);
  v11 = v10;
  *(_QWORD *)(v2 + 40) = v9;
  *(_QWORD *)(v2 + 48) = v10;
  swift_bridgeObjectRetain();
  Database.primaryKey(_:)(v9, v11, &v25);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
LABEL_4:
    swift_release();
    return v5;
  }
  swift_bridgeObjectRelease();
  v12 = v26;
  *(_OWORD *)(v2 + 56) = v25;
  *(_BYTE *)(v2 + 72) = v12;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104);
  swift_retain();
  v14 = swift_retain();
  v15 = v13(v14);
  Database.columns(in:)(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F16C0();
  v19 = v18;
  sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  v20 = sub_23C910DA0();
  *(_QWORD *)&v25 = v19;
  *((_QWORD *)&v25 + 1) = v20;
  (*(void (**)(__int128 *))(*(_QWORD *)a2 + 128))(&v25);
  swift_release();
  swift_release();
  v21 = v25;
  *(_OWORD *)(v5 + 24) = v25;
  if (*(_QWORD *)(v21 + 16))
  {
    swift_release();
    goto LABEL_4;
  }
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = 0xE000000000000000;
  sub_23C911634();
  v22 = sub_23C911C70();
  v24 = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25 = v22;
  *((_QWORD *)&v25 + 1) = v24;
  sub_23C910F5C();
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

sqlite3_stmt *sub_23C7F892C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sqlite3_stmt *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;

  result = (sqlite3_stmt *)a1[8];
  if (!result)
  {
    v7 = a1[5];
    v8 = a1[6];
    sub_23C7E7E34(a1 + 2, v7);
    result = (sqlite3_stmt *)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 48))(&v10, a2, v7, v8);
    goto LABEL_6;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    result = (sqlite3_stmt *)sub_23C7EEF08(result, a2, (uint64_t)&v10);
LABEL_6:
    v9 = v11;
    *(_OWORD *)a3 = v10;
    *(_BYTE *)(a3 + 16) = v9;
    return result;
  }
  __break(1u);
  return result;
}

sqlite3_stmt *sub_23C7F89E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *result;
  char v11;

  v4 = v3;
  v8 = v4[5];
  v9 = v4[6];
  sub_23C7E7E34(v4 + 2, v8);
  result = (sqlite3_stmt *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88))(a1, a2, v8, v9);
  if ((v11 & 1) == 0)
    return sub_23C7F892C(v4, (uint64_t)result, a3);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = -1;
  return result;
}

void sub_23C7F8A8C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  swift_retain();
  sub_23C9117F0();
  v4 = v23;
  if (!v23)
  {
    swift_release_n();
    return;
  }
  while (1)
  {
    v5 = (_QWORD *)*a3;
    v7 = sub_23C7E94B8();
    v8 = v5[2];
    v9 = (v6 & 1) == 0;
    if (__OFADD__(v8, v9))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      sub_23C911B50();
      __break(1u);
      goto LABEL_18;
    }
    v10 = v6;
    if (v5[3] < v8 + v9)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v6 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_23C7E79A8(&qword_256BCBC68);
      sub_23C911784();
      if ((v10 & 1) != 0)
        goto LABEL_12;
    }
LABEL_9:
    v13 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v7 >> 6) + 64) |= 1 << v7;
    v14 = (_QWORD *)(v13[6] + 16 * v7);
    *v14 = v22;
    v14[1] = v4;
    v15 = v13[7] + 24 * v7;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v25;
    *(_BYTE *)(v15 + 16) = v26;
    v16 = v13[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_16;
    v13[2] = v18;
    sub_23C9117F0();
    v4 = v23;
    a2 = 1;
  }
  sub_23C8F9A50();
  v11 = sub_23C7E94B8();
  if ((v10 & 1) != (v12 & 1))
    goto LABEL_17;
  v7 = v11;
  if ((v10 & 1) == 0)
    goto LABEL_9;
LABEL_12:
  v19 = (void *)swift_allocError();
  swift_willThrow();
  v20 = v19;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    sub_23C7F6294(v24, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_18:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

void sub_23C7F8D74()
{
  sub_23C7E16A0();
  sub_23C7DB388();
  sub_23C7F8DD8();
}

void sub_23C7F8DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C7EC560();
  sub_23C7E16A0();
  v2 = sub_23C7DB388();
  sub_23C7EFC48(v1, v0, v2);
}

void sub_23C7F8DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  sub_23C7EC560();
  v6[3] = &unk_250D806F8;
  v6[4] = &off_250D80670;
  v6[0] = v2;
  sub_23C7DA9C0();
  sub_23C7E807C(v3, v4, v5);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
  sub_23C7E070C();
}

uint64_t sub_23C7F8E30(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

void sub_23C7F8E50(BOOL *a1@<X8>)
{
  *a1 = sub_23C7F5CD0();
  sub_23C7DB390();
}

void sub_23C7F8E78(char *a1)
{
  sub_23C7F5D2C(*a1);
  sub_23C7DB390();
}

uint64_t type metadata accessor for Record()
{
  return objc_opt_self();
}

uint64_t method lookup function for Record()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Record.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of Record.__allocating_init(row:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Record.databaseTableName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static Record.persistenceConflictPolicy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Record.databaseSelection.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of Record.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Record.didInsert(with:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Record.copy()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of Record.databaseChanges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of Record.insert(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Record.update(_:columns:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Record.delete(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))() & 1;
}

void sub_23C7F8F98()
{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  sub_23C7EC560();
  v8[3] = &unk_250D81A60;
  v8[4] = &off_250D819D8;
  v2 = (_OWORD *)sub_23C7DB388();
  v8[0] = v2;
  v3 = v1[1];
  v2[1] = *v1;
  v2[2] = v3;
  v4 = v1[3];
  v2[3] = v1[2];
  v2[4] = v4;
  sub_23C7DA9C0();
  sub_23C7E807C(v5, v6, v7);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(*((_QWORD *)v2 + 8) + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
  sub_23C7EE390();
}

void sub_23C7F9024(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  ValueMetadata *v6;
  _UNKNOWN **v7;

  v6 = &type metadata for EmptyRowImpl;
  v7 = &off_250D807B8;
  sub_23C7DA9C0();
  sub_23C7E807C(v2, v3, v4);
  *(_QWORD *)(a1 + 72) = 0;
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v5);
  sub_23C7E070C();
}

uint64_t sub_23C7F9074()
{
  uint64_t v0;

  sub_23C7E58A8();
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_23C7F90AC()
{
  unint64_t result;

  result = qword_25430B268;
  if (!qword_25430B268)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValue, &type metadata for DatabaseValue);
    atomic_store(result, (unint64_t *)&qword_25430B268);
  }
  return result;
}

uint64_t sub_23C7F90EC()
{
  return 24;
}

__n128 sub_23C7F90F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

unint64_t sub_23C7F910C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430CF28;
  if (!qword_25430CF28)
  {
    v1 = sub_23C7DDB10(&qword_25430CF60);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25430CF28);
  }
  return result;
}

uint64_t sub_23C7F9150(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_23C7F9170()
{
  unint64_t result;

  result = qword_25430B360;
  if (!qword_25430B360)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for PersistenceError, &type metadata for PersistenceError);
    atomic_store(result, (unint64_t *)&qword_25430B360);
  }
  return result;
}

uint64_t sub_23C7F91AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C7F91B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C7F9200()
{
  return sub_23C7F9220((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_23C7F9210()
{
  return sub_23C7F9220((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23C7F9220(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void sub_23C7F9264(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C7F5EEC(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C7F926C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_23C7F92B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v7 = (*(uint64_t (**)(void))(a2 + 8))();
  v9 = v8;
  v10 = (_QWORD *)sub_23C7DB388();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v3;
  v11 = sub_23C7DB388();
  *(_QWORD *)(v11 + 16) = sub_23C7FA700;
  *(_QWORD *)(v11 + 24) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  v14 = v13;
  v16 = v15;
  sub_23C82B8B0();
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = sub_23C7FA730;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v12;
  *(_BYTE *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = v14;
  *(_QWORD *)(a3 + 80) = v16;
  *(_QWORD *)(a3 + 88) = v18;
  *(_QWORD *)(a3 + 96) = v20;
  *(_BYTE *)(a3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 161) = 1;
  return result;
}

uint64_t sub_23C7F93D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v5 = sub_23C7F9434(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23C7F9434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  _QWORD __src[23];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v2 = v12;
    v4 = (_QWORD *)(a1 + 32);
    for (i = v1 - 1; ; --i)
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_23C7E7E34(v4, v6);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(__src, v6, v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7FD588();
        v2 = v12;
      }
      v9 = *(_QWORD *)(v2 + 16);
      if (v9 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD588();
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 184 * v9 + 32), __src, 0xB8uLL);
      if (!i)
        break;
      v4 += 5;
    }
  }
  return v2;
}

void *static TableRecord.all()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _BYTE __src[168];

  sub_23C7F92B4(a1, a2, (uint64_t)__src);
  return sub_23C80BC0C(__src, a3);
}

void static TableRecord.none()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;

  v8 = sub_23C7DE924(a1, a2, a3, a4, a5, a6, a7, a8, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
                       v62,
                       v65,
                       v68,
                       v71,
                       v74,
                       v77,
                       v80,
                       v83,
                       v86,
                       v89,
                       v92);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
          v63,
          v66,
          v69,
          v72,
          v75,
          v78,
          v81,
          v84,
          v87,
          v90,
          v93);
  v20 = sub_23C7E6174((uint64_t)v16, v17, v18, v19);
  v21 = FilteredRequest.none()(v20, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_23C7E4C38(v21, v22, v23, v24, v25, v26, v27, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
    v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94);
  sub_23C7E6BBC();
}

uint64_t static TableRecord.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

#error "23C7F9640: call analysis failed (funcsize=22)"

void static TableRecord.select(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  sub_23C7F9FD4(a1, a2, a3, a4, a5, &qword_25430D128, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:));
}

_QWORD *sub_23C7F96B0(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xE000000000FFC1FFLL;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

void *sub_23C7F96E0(const void *a1, void *a2)
{
  initializeWithTake for SQLSelection.Impl(a2, a1);
  return a2;
}

_QWORD *static TableRecord.select(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C7FA114(a1, a2, a3, &qword_25430D128, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:), a8);
}

#error "23C7F976C: call analysis failed (funcsize=18)"

void static TableRecord.select<A>(sql:arguments:as:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t InterfaceRequest;
  _BYTE v19[168];
  _QWORD v20[21];
  _QWORD v21[24];

  v12 = *a3;
  v11 = a3[1];
  static TableRecord.all()(a5, a7, v20);
  sub_23C7E0718(v19, v20);
  sub_23C7E79A8(&qword_25430D128);
  v13 = sub_23C7DB388();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v13 + 56) = &type metadata for SQL;
  *(_QWORD *)(v13 + 64) = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v14 = sub_23C7DB388();
  *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = v12;
  v21[3] = v11;
  sub_23C7F96B0(v21);
  sub_23C7F96E0(v21, (void *)(v14 + 32));
  *(_QWORD *)(v13 + 32) = v14;
  InterfaceRequest = type metadata accessor for QueryInterfaceRequest(0, a5, v15, v16);
  swift_bridgeObjectRetain();
  sub_23C7DBBB0();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(v13, a4, InterfaceRequest, a6);
  swift_bridgeObjectRelease();
  sub_23C7FA5C4(v20);
  sub_23C7DBCB0();
}

void static TableRecord.select<A>(literal:as:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[21];

  v7 = *a1;
  v8 = sub_23C7ECB5C(a3, a5, v71);
  sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71[0]);
  sub_23C7E79A8(&qword_25430D128);
  v16 = sub_23C7DB388();
  *(_OWORD *)(v16 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v16 + 56) = &type metadata for SQL;
  *(_QWORD *)(v16 + 64) = &protocol witness table for SQL;
  *(_QWORD *)(v16 + 32) = v7;
  v20 = sub_23C7DFB44(v16, v17, v18, v19);
  sub_23C7DBBB0();
  QueryInterfaceRequest.select<A>(_:as:)(v16, a2, v20, a4);
  v21 = swift_bridgeObjectRelease();
  sub_23C7E4C38(v21, v22, v23, v24, v25, v26, v27, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v71[0]);
  sub_23C7DE90C();
}

uint64_t static TableRecord.annotated(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

uint64_t static TableRecord.filter(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[5];
  _BYTE v15[168];
  _QWORD v16[21];

  sub_23C7E0720(a2, a3, v16);
  sub_23C7E0718(v15, v16);
  v4 = a1[3];
  v5 = a1[4];
  sub_23C7E7E34(a1, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v14[3] = &type metadata for SQLExpression;
  v14[4] = &protocol witness table for SQLExpression;
  v14[0] = sub_23C7DB388();
  v7 = v6(v4, v5);
  v11 = sub_23C7DFB50(v7, v8, v9, v10);
  FilteredRequest.filter(_:)((uint64_t)v14, v11, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  v12 = sub_23C7FA5C4(v16);
  return sub_23C7E6BCC((uint64_t)v12);
}

uint64_t sub_23C7F9A78()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_23C7F9AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  if ((a21 & 0x80000000) == 0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_23C7F1754(a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(a15);
  return sub_23C7F1754(a17);
}

void static TableRecord.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;

  v9 = sub_23C7E87FC(a1, a2, a3, a4, a5, a6, a7, a8, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                       v63,
                       v66,
                       v69,
                       v72,
                       v75,
                       v78,
                       v81,
                       v84,
                       v87,
                       v90,
                       v93);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
          v64,
          v67,
          v70,
          v73,
          v76,
          v79,
          v82,
          v85,
          v88,
          v91,
          v94);
  v21 = sub_23C7E6174((uint64_t)v17, v18, v19, v20);
  v22 = FilteredRequest.filter(_:)(a1, v21, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_23C7E4C38(v22, v23, v24, v25, v26, v27, v28, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95);
  sub_23C7E8D6C();
}

#error "23C7F9C54: call analysis failed (funcsize=24)"

void static TableRecord.filter<A>(keys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[21];

  v4 = sub_23C7EDAF4(a2, a4, v67);
  v12 = sub_23C7E4068(v4, v5, v6, v7, v8, v9, v10, v11, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45,
          v47,
          v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63,
          v65,
          v67[0]);
  v16 = sub_23C7DFB44((uint64_t)v12, v13, v14, v15);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v16);
  sub_23C7FA748();
  TableRequest<>.filter<A>(keys:)();
  sub_23C7E4C38(v17, v18, v19, v20, v21, v22, v23, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v67[0]);
  sub_23C7DE90C();
}

void static TableRecord.filter(key:)()
{
  sub_23C7F9D44();
}

void static TableRecord.filter(keys:)()
{
  sub_23C7F9D44();
}

void sub_23C7F9D44()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;

  sub_23C7ECF7C();
  v9 = sub_23C7E87FC(v1, v2, v3, v4, v5, v6, v7, v8, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                       v64,
                       v67,
                       v70,
                       v73,
                       v76,
                       v79,
                       v82,
                       v85,
                       v88,
                       v91,
                       v94);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92,
          v95);
  v21 = sub_23C7DFB50((uint64_t)v17, v18, v19, v20);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v21);
  v22 = sub_23C7E9AB8();
  v23 = v0(v22);
  sub_23C7E4C38(v23, v24, v25, v26, v27, v28, v29, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
  sub_23C7DD13C();
}

uint64_t static TableRecord.filter(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  _QWORD v20[24];

  v9 = *a3;
  v10 = a3[1];
  v19[3] = &type metadata for SQL;
  v19[4] = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v20[0] = a1;
  v20[1] = a2;
  v20[2] = v9;
  v20[3] = v10;
  sub_23C7F96B0(v20);
  sub_23C7F96E0(v20, (void *)(v11 + 32));
  v19[0] = v11;
  sub_23C7DBCC8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static TableRecord.filter(_:)((uint64_t)v19, a4, a5, v12, v13, v14, v15, v16);
  return sub_23C7E6BCC(v17);
}

uint64_t static TableRecord.filter(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];
  _BYTE v12[168];
  _QWORD v13[21];

  v3 = *a1;
  sub_23C7E0720(a2, a3, v13);
  v4 = sub_23C7E0718(v12, v13);
  v11[3] = &type metadata for SQL;
  v11[4] = &protocol witness table for SQL;
  v11[0] = v3;
  v8 = sub_23C7E6174((uint64_t)v4, v5, v6, v7);
  sub_23C7DBCC8();
  FilteredRequest.filter(_:)((uint64_t)v11, v8, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  v9 = sub_23C7FA5C4(v13);
  return sub_23C7E6BCC((uint64_t)v9);
}

uint64_t static TableRecord.order(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

{
  return sub_23C7F9618(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

void static TableRecord.orderByPrimaryKey()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;

  v8 = sub_23C7DE924(a1, a2, a3, a4, a5, a6, a7, a8, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58,
                       v61,
                       v64,
                       v67,
                       v70,
                       v73,
                       v76,
                       v79,
                       v82,
                       v85,
                       v88,
                       v91);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
          v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92);
  sub_23C7E6174((uint64_t)v16, v17, v18, v19);
  v20 = TableRequest<>.orderByPrimaryKey()();
  sub_23C7E4C38(v20, v21, v22, v23, v24, v25, v26, v27, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
    v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93);
  sub_23C7E6BBC();
}

void static TableRecord.order(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  sub_23C7F9FD4(a1, a2, a3, a4, a5, &qword_256BCBC78, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:));
}

void sub_23C7F9FD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[168];
  _QWORD v24[21];
  _QWORD v25[24];

  v14 = *a3;
  v13 = a3[1];
  sub_23C7ECB5C(a4, a5, v24);
  sub_23C7E0718(v23, v24);
  sub_23C7E79A8(a6);
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v15 + 56) = &type metadata for SQL;
  *(_QWORD *)(v15 + 64) = a7;
  sub_23C7E79A8(&qword_25430DA08);
  v16 = sub_23C7DB388();
  *(_OWORD *)(v16 + 16) = xmmword_23C912A20;
  v25[0] = a1;
  v25[1] = a2;
  v25[2] = v14;
  v25[3] = v13;
  sub_23C7F96B0(v25);
  v17 = sub_23C7F96E0(v25, (void *)(v16 + 32));
  *(_QWORD *)(v15 + 32) = v16;
  v21 = sub_23C7DB63C((uint64_t)v17, v18, v19, v20);
  swift_bridgeObjectRetain();
  sub_23C7DBBB0();
  sub_23C7DBCC8();
  a9(v15, v21, a8);
  swift_bridgeObjectRelease();
  sub_23C7FA5C4(v24);
  sub_23C7DBCB0();
}

_QWORD *static TableRecord.order(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C7FA114(a1, a2, a3, &qword_256BCBC78, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:), a8);
}

_QWORD *sub_23C7FA114(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;

  v12 = *a1;
  v13 = sub_23C7E87FC((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, (uint64_t)a7, a8, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
                        v68,
                        v71,
                        v74,
                        v77,
                        v80,
                        v83,
                        v86,
                        v89,
                        v92,
                        v95,
                        v98);
  sub_23C7E4068(v13, v14, v15, v16, v17, v18, v19, v20, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63, v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96,
    v99);
  sub_23C7E79A8(a4);
  v21 = sub_23C7DB388();
  *(_OWORD *)(v21 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v21 + 56) = &type metadata for SQL;
  *(_QWORD *)(v21 + 64) = a5;
  *(_QWORD *)(v21 + 32) = v12;
  v25 = sub_23C7E6E24(v21, v22, v23, v24);
  swift_bridgeObjectRetain();
  a7(v21, v25, a6);
  v26 = swift_bridgeObjectRelease();
  return sub_23C7E4C38(v26, v27, v28, v29, v30, v31, v32, v33, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64, v67,
           v70,
           v73,
           v76,
           v79,
           v82,
           v85,
           v88,
           v91,
           v94,
           v97,
           v100);
}

#error "23C7FA204: call analysis failed (funcsize=19)"

void static TableRecord.aliased(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;

  v10 = sub_23C7E87FC(a1, a2, a3, a4, a5, a6, a7, a8, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                        v63,
                        v66,
                        v69,
                        v72,
                        v75,
                        v78,
                        v81,
                        v84,
                        v87,
                        v90,
                        v93);
  v18 = sub_23C7E4068(v10, v11, v12, v13, v14, v15, v16, v17, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
          v64,
          v67,
          v70,
          v73,
          v76,
          v79,
          v82,
          v85,
          v88,
          v91,
          v94);
  sub_23C7E6174((uint64_t)v18, v19, v20, v21);
  QueryInterfaceRequest.aliased(_:)(a9);
  sub_23C7E4C38(v22, v23, v24, v25, v26, v27, v28, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95);
  sub_23C7E8D6C();
}

_QWORD *static TableRecord.with<A>(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[192];
  _BYTE v13[168];
  _QWORD v14[21];

  memcpy(v12, __src, 0xBBuLL);
  static TableRecord.all()(a2, a3, v14);
  v7 = sub_23C7E0718(v13, v14);
  sub_23C7E16A8((uint64_t)v7, v8, v9, v10);
  QueryInterfaceRequest.with<A>(_:)(v12, a4);
  return sub_23C7FA5C4(v14);
}

#error "23C7FA330: call analysis failed (funcsize=27)"

void static TableRecord<>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[168];
  _QWORD v10[21];

  sub_23C7EDAF4(a2, a4, v10);
  v4 = sub_23C7E0718(v9, v10);
  v8 = sub_23C7E6E24((uint64_t)v4, v5, v6, v7);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v8);
  TableRequest<>.filter<A>(ids:)();
  sub_23C7FA5C4(v10);
  sub_23C7DEEE4();
}

void static TableRecord<>.selectID()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[21];

  v8 = static TableRecord.all()(a1, a2, v71);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63,
          v65,
          v67,
          v69,
          v71[0]);
  v20 = sub_23C7E16A8((uint64_t)v16, v17, v18, v19);
  QueryInterfaceRequest<A>.selectID()(v20, a3, a4, a5);
  sub_23C7E4C38(v21, v22, v23, v24, v25, v26, v27, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v71[0]);
  sub_23C7DD13C();
}

void static TableRecord<>.filter(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;

  v8 = sub_23C7E87FC(a1, a2, a3, a4, a5, a6, a7, a8, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
                       v62,
                       v65,
                       v68,
                       v71,
                       v74,
                       v77,
                       v80,
                       v83,
                       v86,
                       v89,
                       v92);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
          v63,
          v66,
          v69,
          v72,
          v75,
          v78,
          v81,
          v84,
          v87,
          v90,
          v93);
  v20 = sub_23C7DFB44((uint64_t)v16, v17, v18, v19);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v20);
  sub_23C7FA748();
  TableRequest<>.filter(id:)();
  sub_23C7E4C38(v21, v22, v23, v24, v25, v26, v27, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
    v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94);
  sub_23C7DE90C();
}

void static TableRecord<>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[168];
  _QWORD v17[21];

  sub_23C7EDAF4(a2, a4, v17);
  v10 = sub_23C7E0718(v16, v17);
  v14 = sub_23C7DB63C((uint64_t)v10, v11, v12, v13);
  v15 = MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v14);
  TableRequest<>.filter<A>(ids:)(a1, v14, a3, &protocol witness table for QueryInterfaceRequest<A>, &protocol witness table for QueryInterfaceRequest<A>, v15, a6, a5);
  sub_23C7FA5C4(v17);
  sub_23C7DEEE4();
}

_QWORD *sub_23C7FA5C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[5];
  v3 = a1[14];
  v5 = a1[16];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  return a1;
}

#error "23C7FA6C4: call analysis failed (funcsize=23)"

uint64_t sub_23C7FA6F0()
{
  return swift_deallocObject();
}

uint64_t sub_23C7FA700(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C7F93D8(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_23C7FA70C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C7FA730(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_23C85C410(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23C7FA748()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C7FA75C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v8;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(v8 + 16);
      if (v5 >= *(_QWORD *)(v8 + 24) >> 1)
        sub_23C7E649C();
      v4 += 16;
      *(_QWORD *)(v8 + 16) = v5 + 1;
      v6 = v8 + 16 * v5;
      *(_QWORD *)(v6 + 32) = 34;
      *(_QWORD *)(v6 + 40) = 0xE100000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C7FA870(_QWORD *a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD __src[23];
  _BYTE __dst[184];
  _BYTE v9[192];
  uint64_t v10;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    v10 = MEMORY[0x24BEE4AF8];
    sub_23C7FD5BC(0, v1, 0);
    v2 += 4;
    v3 = v2[3];
    v4 = v2[4];
    sub_23C7E7E34(v2, v3);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(__src, v3, v4);
    memcpy(__dst, __src, sizeof(__dst));
    sub_23C801054(__dst, v9);
    v5 = (char *)&loc_23C7FA93C + 4 * byte_23C912C1E[sub_23C801090((uint64_t)v9)];
    __asm { BR              X9 }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;

  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  sub_23C7E58B0();
  sub_23C7E3164();
  v3 = sub_23C7E072C();
  sub_23C8012F0(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return sub_23C7ECF90();
}

uint64_t SQLInterpolation.appendInterpolation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;

  sub_23C7E7DA0(a1, a2);
  sub_23C7E58B0();
  sub_23C7E3164();
  v2 = sub_23C7E072C();
  sub_23C8012F0(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return sub_23C7ECF90();
}

uint64_t SQLInterpolation.appendInterpolation<A>(tableOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DynamicType;

  DynamicType = swift_getDynamicType();
  return SQLInterpolation.appendInterpolation<A>(_:)(DynamicType, a2, a3);
}

uint64_t SQLInterpolation.appendInterpolation(tableOf:)(_QWORD *a1)
{
  uint64_t DynamicType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;

  sub_23C7E7E34(a1, a1[3]);
  DynamicType = swift_getDynamicType();
  sub_23C7E7DA0(DynamicType, a1[4]);
  sub_23C7E58B0();
  sub_23C7E3164();
  v3 = sub_23C7E072C();
  sub_23C8012F0(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return sub_23C7ECF90();
}

void SQLInterpolation.appendInterpolation<A>(columnsOf:tableAlias:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[23];
  _BYTE v16[184];
  _QWORD v17[23];

  sub_23C7DF844();
  v2 = v1;
  v3 = v0;
  v5 = v4;
  v7 = v6;
  if (!v6)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
    v7 = v8;
  }
  type metadata accessor for TableAlias();
  v9 = sub_23C7DB388();
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 0;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)v10(v3, v2);
  swift_retain();
  v12 = sub_23C7FA870(v11);
  sub_23C7DE934();
  v15[0] = 8236;
  v15[1] = 0xE200000000000000;
  v15[2] = MEMORY[0x24BEE4AF8];
  v15[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v15);
  sub_23C7F96E0(v15, v16);
  sub_23C7DE93C(v17, v16);
  sub_23C7DBAC4(v17);
  v14 = v13;
  sub_23C7DB398();
  sub_23C7DE934();
  swift_bridgeObjectRelease();
  sub_23C7FB1F0(v12, v14);
  swift_release();
  sub_23C7DEEA8();
}

void sub_23C7FAE44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7F16C0();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_23C7FAEE4(unint64_t a1)
{
  return sub_23C7FAFF8(a1, (unint64_t *)type metadata accessor for TableAlias, &qword_256BCBCB0, &qword_256BCA6B8, (uint64_t *)sub_23C85989C);
}

void sub_23C7FAF08()
{
  sub_23C7FAF30();
}

void sub_23C7FAF1C()
{
  sub_23C7FAF30();
}

void sub_23C7FAF30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_23C7DF844();
  sub_23C80140C();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = sub_23C7E8D80();
  if (!(_DWORD)v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    v2 = sub_23C8013D4(v7, v8);
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  sub_23C7EDD70();
  if (v10 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_23C7E2030(v9);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_14:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DEEA8();
    return;
  }
  sub_23C801300();
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_23C7FAFD4(unint64_t a1)
{
  return sub_23C7FAFF8(a1, (unint64_t *)type metadata accessor for Database, &qword_256BCBC90, &qword_256BCBC88, (uint64_t *)sub_23C85986C);
}

uint64_t sub_23C7FAFF8(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    sub_23C7DB3B8();
    v13 = sub_23C9117C0();
    sub_23C7DBCD0();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
  {
    __break(1u);
    goto LABEL_24;
  }
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    sub_23C7DB3B8();
    v12 = MEMORY[0x24262529C](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_16:
    result = sub_23C8003E4(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    sub_23C7DB3B8();
    v17 = sub_23C9117C0();
    sub_23C7DBCD0();
  }
  if (v19 < 1)
    goto LABEL_20;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_20:
    swift_bridgeObjectRelease();
    return sub_23C9110DC();
  }
  __break(1u);
  return result;
}

void sub_23C7FB1F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v21;
  _BYTE v22[184];
  _BYTE v23[184];
  _BYTE v24[184];
  _BYTE v25[184];
  _BYTE v26[184];
  _BYTE __dst[232];
  _BYTE __src[232];

  v3 = v2;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (v8 = *(_QWORD *)(v6 + 24) >> 1, v8 < v7))
  {
    sub_23C7EE664();
    v6 = v9;
    v8 = *(_QWORD *)(v9 + 24) >> 1;
  }
  v10 = *(_QWORD *)(v6 + 16);
  v11 = v8 - v10;
  sub_23C7FF474((uint64_t)__src, (char *)(v6 + 184 * v10 + 32), v8 - v10, a1, a2);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!v12)
  {
LABEL_8:
    if (v12 != v11)
    {
LABEL_9:
      memcpy(__dst, __src, 0xE1uLL);
      sub_23C800B84((uint64_t)__dst);
      *v3 = v6;
      return;
    }
LABEL_11:
    v16 = *(_QWORD *)(v6 + 16);
    sub_23C800578();
    sub_23C800FCC((uint64_t)v26, (uint64_t)v24, &qword_256BCA510);
    sub_23C800FCC((uint64_t)v24, (uint64_t)v25, &qword_256BCA510);
    while (sub_23C800F80((uint64_t)v25) != 1)
    {
      v17 = *(_QWORD *)(v6 + 24) >> 1;
      if (v17 < v16 + 1)
      {
        sub_23C7EE664();
        v6 = v21;
        v17 = *(_QWORD *)(v21 + 24) >> 1;
      }
      sub_23C800FCC((uint64_t)v26, (uint64_t)v23, &qword_256BCA510);
      sub_23C800FCC((uint64_t)v23, (uint64_t)__dst, &qword_256BCA510);
      if (sub_23C800F80((uint64_t)__dst) != 1 && v16 < v17)
      {
        v19 = (char *)(v6 + 184 * v16 + 32);
        do
        {
          sub_23C800FCC((uint64_t)v23, (uint64_t)v22, &qword_256BCA510);
          sub_23C7F96E0(v22, v19);
          ++v16;
          sub_23C800578();
          sub_23C800FCC((uint64_t)v26, (uint64_t)v23, &qword_256BCA510);
          sub_23C800FCC((uint64_t)v23, (uint64_t)__dst, &qword_256BCA510);
          v19 += 184;
        }
        while (sub_23C800F80((uint64_t)__dst) != 1 && v16 < v17);
      }
      *(_QWORD *)(v6 + 16) = v16;
      sub_23C800FCC((uint64_t)v26, (uint64_t)v24, &qword_256BCA510);
      sub_23C800FCC((uint64_t)v24, (uint64_t)v25, &qword_256BCA510);
    }
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(v6 + 16);
  v14 = __OFADD__(v13, v12);
  v15 = v13 + v12;
  if (!v14)
  {
    *(_QWORD *)(v6 + 16) = v15;
    goto LABEL_8;
  }
  __break(1u);
}

void sub_23C7FB44C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7F2114();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E2030(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_23C7FB4E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7F2058();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E2030(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_23C7FB584()
{
  sub_23C7D83D0();
}

void sub_23C7FB598()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7ECB64();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_23C7E8D80() || (sub_23C7DFA0C(), !(v6 ^ v4 | v5)))
  {
    sub_23C7E6A60();
    sub_23C7F2540();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_23C7EDD70();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_23C7E2030(v8);
  sub_23C7DBCD8();
  if (!v3)
  {
LABEL_11:
    sub_23C7DB624();
    *v1 = v2;
    sub_23C7DF5B4();
    return;
  }
  sub_23C801300();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_23C7FB634(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(void **);
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void **);
  uint64_t v47;
  uint64_t v48;
  void (*v49[4])(void **);
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v2 = sub_23C8D6C94(a1);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = v2;
  if (!swift_isUniquelyReferenced_nonNull_native() || (v7 = *(_QWORD *)(v3 + 24) >> 1, v7 < v5))
  {
    sub_23C8013E0();
    v3 = v8;
    v7 = *(_QWORD *)(v8 + 24) >> 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = v7 - v9;
  v11 = sub_23C8013EC((unint64_t)&v50, (_QWORD *)(v3 + 40 * v9 + 32), v7 - v9);
  if (v11 < v6)
    goto LABEL_13;
  if (v11 >= 1)
  {
    v13 = *(_QWORD *)(v3 + 16);
    v14 = __OFADD__(v13, v11);
    v15 = v13 + v11;
    if (v14)
    {
      __break(1u);
      goto LABEL_17;
    }
    *(_QWORD *)(v3 + 16) = v15;
  }
  if (v11 != v10)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_14:
  v6 = v52;
  v12 = v50;
  if (v52 == *(_QWORD *)(v50 + 16))
    goto LABEL_10;
LABEL_17:
  v17 = *(_QWORD *)(v3 + 16);
  v42 = v12;
  v43 = v51;
  v18 = sub_23C7FC79C(v49, v6, v12, v51);
  v20 = v19[1];
  v48 = *v19;
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  sub_23C7DBBB8();
  sub_23C7DB3B8();
  v45 = v24;
  sub_23C7DBCC8();
  v47 = v20;
  sub_23C7DC46C();
  result = ((uint64_t (*)(void (**)(void **), _QWORD))v18)(v49, 0);
  v14 = __OFADD__(v6, 1);
  v25 = v6 + 1;
  if (!v14)
  {
LABEL_18:
    v26 = v17 + 1;
    while (1)
    {
      v27 = *(_QWORD *)(v3 + 24) >> 1;
      if (v27 < v26)
      {
        sub_23C8013E0();
        v3 = v28;
        v27 = *(_QWORD *)(v28 + 24) >> 1;
      }
      if (v17 < v27)
        break;
      *(_QWORD *)(v3 + 16) = v17;
    }
    v29 = (_QWORD *)(v3 + 40 * v17);
    v29[4] = v48;
    v29[5] = v47;
    v29[6] = v22;
    v29[7] = v23;
    v29[8] = v45;
    v30 = v42;
    if (v25 == *(_QWORD *)(v42 + 16))
    {
LABEL_30:
      *(_QWORD *)(v3 + 16) = v26;
      sub_23C7E5DE0();
      goto LABEL_11;
    }
    v31 = (_QWORD *)(v3 + 40 * v17 + 104);
    while (1)
    {
      v44 = v26;
      v46 = sub_23C7FC79C(v49, v25, v30, v43);
      v33 = v32[1];
      v48 = *v32;
      v35 = v34[1];
      v36 = v25;
      v37 = v34[2];
      v38 = *v34;
      swift_bridgeObjectRetain();
      v23 = v35;
      v39 = v37;
      v40 = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = v33;
      sub_23C7DBBB8();
      result = ((uint64_t (*)(void (**)(void **), _QWORD))v46)(v49, 0);
      v41 = v36 + 1;
      if (__OFADD__(v36, 1))
        break;
      if (v44 >= v27)
      {
        v45 = v39;
        *(_QWORD *)(v3 + 16) = v44;
        v17 = v44;
        v25 = v36 + 1;
        v22 = v38;
        goto LABEL_18;
      }
      *(v31 - 4) = v48;
      *(v31 - 3) = v33;
      *(v31 - 2) = v38;
      *(v31 - 1) = v23;
      *v31 = v39;
      v31 += 5;
      v26 = v44 + 1;
      v30 = v42;
      v25 = v40 + 1;
      if (v41 == *(_QWORD *)(v42 + 16))
        goto LABEL_30;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23C7FB904(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  int v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  v3 = v2;
  v4 = sub_23C80134C(a1, a2);
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || (v9 = *(_QWORD *)(v5 + 24) >> 1, v9 < v7))
  {
    sub_23C7E6A60();
    sub_23C7F2908();
    v5 = v10;
    v9 = *(_QWORD *)(v10 + 24) >> 1;
  }
  v11 = v9 - *(_QWORD *)(v5 + 16);
  v12 = sub_23C7FEBB4();
  if (v12 < v8)
    goto LABEL_13;
  if (v12 >= 1)
  {
    v13 = *(_QWORD *)(v5 + 16);
    v14 = __OFADD__(v13, v12);
    v15 = v13 + v12;
    if (v14)
    {
      __break(1u);
      goto LABEL_19;
    }
    *(_QWORD *)(v5 + 16) = v15;
  }
  if (v12 != v11)
  {
    swift_bridgeObjectRelease();
    sub_23C7DB398();
    sub_23C7DB62C();
    sub_23C7DFA18();
    v16 = v66;
    v17 = v67;
    v18 = v68;
LABEL_11:
    sub_23C7F91AC(v16, v17, v18);
    *v3 = v5;
    return;
  }
LABEL_14:
  if ((v68 & 1) == 0)
  {
    v11 = v65;
    if (*(_DWORD *)(v65 + 36) != (_DWORD)v67)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v66 == 1 << *(_BYTE *)(v65 + 32))
    {
      swift_bridgeObjectRelease();
      sub_23C7DC474();
      sub_23C7DBCD0();
      sub_23C7DFA18();
      v16 = sub_23C7EF8E8();
      goto LABEL_11;
    }
LABEL_19:
    v19 = *(_QWORD *)(v5 + 16);
    sub_23C7EF8E8();
    v20 = Row.ScopesView.subscript.getter();
    v61 = v21;
    v64 = v20;
    v23 = v22;
    swift_retain();
    sub_23C7DB3B8();
    sub_23C7DBCC8();
    sub_23C7DBBB8();
    v24 = sub_23C7EF8E8();
    v27 = sub_23C901798(v24, v25, v26, v11);
    v29 = v28;
    v31 = v30;
    v32 = v27;
    swift_bridgeObjectRelease();
    sub_23C7DB62C();
    sub_23C7DBCD0();
    sub_23C7DFA18();
    v33 = v31 & 1;
    v34 = v29;
    v35 = v61;
    v36 = v32;
    v37 = v34;
    while (1)
    {
      v57 = *(_QWORD *)(v5 + 24) >> 1;
      if (v57 < v19 + 1)
      {
        sub_23C7E6A60();
        v63 = v52;
        v54 = v53;
        sub_23C7F2908();
        v37 = v54;
        v33 = v63;
        v5 = v55;
        v57 = *(_QWORD *)(v55 + 24) >> 1;
      }
      if (v19 < v57)
        break;
LABEL_29:
      *(_QWORD *)(v5 + 16) = v19;
    }
    v38 = (_QWORD *)(v5 + 24 * v19 + 48);
    while (1)
    {
      *(v38 - 2) = v64;
      *(v38 - 1) = v23;
      *v38 = v35;
      if ((v33 & 1) != 0)
        goto LABEL_33;
      if (*(_DWORD *)(v11 + 36) != v37)
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v36 == 1 << *(_BYTE *)(v11 + 32))
      {
        *(_QWORD *)(v5 + 16) = v19 + 1;
        v56 = v33;
        swift_bridgeObjectRelease();
        sub_23C7E5DE0();
        sub_23C7DBCD0();
        swift_release();
        v18 = v56 & 1;
        v16 = v32;
        v17 = v34;
        goto LABEL_11;
      }
      sub_23C7E76E8();
      v39 = Row.ScopesView.subscript.getter();
      v62 = v40;
      v64 = v39;
      v60 = v41;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42 = sub_23C7E76E8();
      v45 = sub_23C901798(v42, v43, v44, v11);
      v58 = v46;
      v59 = v45;
      v48 = v47 & 1;
      v49 = sub_23C7E76E8();
      sub_23C7F91AC(v49, v50, v51);
      v35 = v62;
      swift_bridgeObjectRelease();
      ++v19;
      swift_bridgeObjectRelease();
      sub_23C7DBCD0();
      v23 = v60;
      swift_release();
      v33 = v48;
      v37 = v58;
      v36 = v59;
      v38 += 3;
      v32 = v59;
      v34 = v58;
      if (v19 >= v57)
      {
        v32 = v59;
        v34 = v58;
        goto LABEL_29;
      }
    }
  }
LABEL_34:
  __break(1u);
}

void SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[23];

  sub_23C801280(a1, a2, a3, a4);
  sub_23C7FCBB4(v7);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v6);
  *v4 = v5;
  sub_23C7E4078();
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[23];

  sub_23C801280(a1, a2, a3, a4);
  sub_23C7FCBE8(v7);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v6);
  *v4 = v5;
  sub_23C7E4078();
}

void SQLInterpolation.appendInterpolation(_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[23];

  v3 = sub_23C801394(a1);
  sub_23C8012A8((uint64_t)v3);
  sub_23C7FCBE8(v5);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v4);
  *v1 = v2;
  sub_23C7E4078();
}

void *sub_23C7FBE10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  _QWORD v6[21];
  _BYTE __src[168];
  _QWORD __dst[23];

  v6[0] = a1;
  v6[1] = a2;
  sub_23C800B0C((uint64_t)v6);
  sub_23C800B48(v6, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C7FCC1C(__dst);
  swift_bridgeObjectRetain();
  sub_23C7ECE1C();
  v3 = *(_QWORD *)(*v2 + 16);
  sub_23C7ECD84();
  v4 = *v2;
  *(_QWORD *)(v4 + 16) = v3 + 1;
  result = sub_23C7F96E0(__dst, (void *)(v4 + 184 * v3 + 32));
  *v2 = v4;
  return result;
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23C911C40();
  sub_23C801330(v0, v1);
  return sub_23C80129C();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23C911C40();
  sub_23C801330(v0, v1);
  return sub_23C80129C();
}

uint64_t SQLInterpolation.appendInterpolation(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23C801394(a1);
  v1 = sub_23C911C40();
  sub_23C801330(v1, v2);
  return sub_23C80129C();
}

void SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD v7[23];

  v4 = v3;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 16))(v7, a2, a3);
  sub_23C7FCC50(v7);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v6);
  *v4 = a1;
  sub_23C7E4078();
}

void SQLInterpolation.appendInterpolation<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[23];
  _BYTE v20[192];
  _QWORD v21[24];

  sub_23C7DE8EC();
  v18[2] = v0;
  v18[3] = v1;
  v18[4] = v2;
  sub_23C891CA0((uint64_t)sub_23C7FCC84, (uint64_t)v18, v0, (uint64_t)&type metadata for SQL.Element, MEMORY[0x24BEE4078], v1, MEMORY[0x24BEE40A8], v3);
  v5 = v4;
  if (*(_QWORD *)(v4 + 16))
  {
    v6._countAndFlagsBits = 40;
    v6._object = (void *)0xE100000000000000;
    SQLInterpolation.appendLiteral(_:)(v6);
    v7 = *(_QWORD *)(v5 + 16);
    v8 = MEMORY[0x24BEE4AF8];
    if (v7)
    {
      v19[0] = MEMORY[0x24BEE4AF8];
      sub_23C7FD5BC(0, v7, 0);
      v9 = v19[0];
      v10 = (char *)(v5 + 32);
      for (i = v7 - 1; ; --i)
      {
        sub_23C7F96E0(v10, v21);
        sub_23C8010AC(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
        v19[0] = v9;
        v13 = *(_QWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 24);
        if (v13 >= v12 >> 1)
        {
          sub_23C7FD5BC(v12 > 1, v13 + 1, 1);
          v9 = v19[0];
        }
        sub_23C7F96E0(v21, v20);
        *(_QWORD *)(v9 + 16) = v13 + 1;
        sub_23C7DE93C((void *)(v9 + 184 * v13 + 32), v20);
        if (!i)
          break;
        v10 += 184;
      }
      sub_23C7DB62C();
    }
    else
    {
      sub_23C7DB62C();
      v9 = MEMORY[0x24BEE4AF8];
    }
    v19[0] = 44;
    v19[1] = 0xE100000000000000;
    v19[2] = v8;
    v19[3] = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(v19);
    sub_23C7F96E0(v19, v20);
    sub_23C7DE93C(v21, v20);
    sub_23C7DBAC4(v21);
    v17 = v16;
    sub_23C7DB62C();
    sub_23C7E072C();
    swift_bridgeObjectRelease();
    sub_23C7FB1F0(v9, v17);
    v15 = 41;
    v14 = 0xE100000000000000;
  }
  else
  {
    sub_23C7DB62C();
    v14 = 0x800000023C91C7C0;
    v15 = 0xD000000000000018;
  }
  SQLInterpolation.appendLiteral(_:)(*(Swift::String *)&v15);
  sub_23C7DBCB0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v8[16];

  sub_23C7DE8EC();
  v0 = sub_23C91164C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v8[-v2];
  v4 = sub_23C911724();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v8[-v6];
  sub_23C911058();
  MEMORY[0x242626100](MEMORY[0x24BEE25B0], v0);
  sub_23C9117FC();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x242626100](MEMORY[0x24BEE2B40], v4);
  SQLInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  sub_23C7DBCB0();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v2[23];

  v2[0] = 34;
  v2[1] = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C7E3164();
  v2[2] = MEMORY[0x24BEE4AF8];
  v2[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v2);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v1);
  *v0 = v2;
  sub_23C7E4078();
}

void *sub_23C7FC184@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  void (*v4)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v7[23];

  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4(v7, AssociatedTypeWitness, a1);
  sub_23C7FCC1C(v7);
  return sub_23C7F96E0(v7, a2);
}

void *sub_23C7FC354@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD __src[21];

  v3 = a1[3];
  v4 = a1[4];
  sub_23C7E7E34(a1, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(__src, v3, v4);
  return memcpy(a2, __src, 0xA3uLL);
}

void _s12GRDBInternal16SQLInterpolationV19appendInterpolationyyxAA14SQLExpressibleRzAA15SQLOrderingTermRzAA13SQLSelectableRzlF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[23];

  sub_23C801280(a1, a2, a3, a4);
  sub_23C7FCC1C(v7);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C7E809C(v6);
  *v4 = v5;
  sub_23C7E4078();
}

void SQLInterpolation.appendInterpolation<A>(definitionFor:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v12[23];
  _QWORD v13[23];
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE __dst[168];
  _QWORD v19[23];

  sub_23C7DE8EC();
  v1 = v0;
  v3 = *(_QWORD *)(v2 + 16);
  memcpy(__dst, (const void *)(v2 + 24), 0xA2uLL);
  v19[0] = 34;
  v19[1] = 0xE100000000000000;
  sub_23C8013B0();
  sub_23C7E3164();
  v4 = MEMORY[0x24BEE4AF8];
  v5 = MEMORY[0x24BEE4B00];
  v19[2] = MEMORY[0x24BEE4AF8];
  v19[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v19);
  sub_23C7E66C0();
  v6 = *(_QWORD *)(*v0 + 16);
  sub_23C7ECD84();
  v7 = *v0;
  *(_QWORD *)(v7 + 16) = v6 + 1;
  sub_23C7F96E0(v19, (void *)(v7 + 184 * v6 + 32));
  *v1 = v7;
  if (v3 && *(_QWORD *)(v3 + 16))
  {
    sub_23C7FA75C(v3);
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    sub_23C910E3C();
    sub_23C7E072C();
    v14 = 40;
    v15 = 0xE100000000000000;
    sub_23C8013B0();
    sub_23C7DB398();
    v3 = 0xE100000000000000;
    sub_23C7DC46C();
    sub_23C910F5C();
    sub_23C7E072C();
    v16 = v4;
    v17 = v5;
    sub_23C7F96B0(&v14);
    sub_23C7E66C0();
    sub_23C7E8FD4();
    v8 = *v1;
    *(_QWORD *)(v8 + 16) = 0xE100000000000001;
    sub_23C7F96E0(&v14, (void *)(v8 - 0x47FFFFFFFFFFFFE0));
    *v1 = v8;
  }
  v12[0] = 0x2820534120;
  v12[1] = 0xE500000000000000;
  v12[2] = v4;
  v12[3] = v5;
  sub_23C7F96B0(v12);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  v9 = *v1;
  *(_QWORD *)(v9 + 16) = v3 + 1;
  sub_23C7F96E0(v12, (void *)(v9 + 184 * v3 + 32));
  *v1 = v9;
  memcpy(v13, __dst, 0xA2uLL);
  sub_23C7FCC50(v13);
  sub_23C7FD8C0((uint64_t)__dst);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C801364();
  sub_23C7F96E0(v13, v10);
  *v1 = v9;
  v14 = 41;
  v15 = 0xE100000000000000;
  v16 = v4;
  v17 = v5;
  sub_23C7F96B0(&v14);
  sub_23C7E66C0();
  sub_23C7E8FD4();
  sub_23C801364();
  sub_23C7F96E0(&v14, v11);
  *v1 = v9;
  sub_23C7DBCB0();
}

Swift::Void __swiftcall SQLInterpolation.appendInterpolation(_:)(GRDBInternal::Database::CollationName a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[23];

  v2 = *(_QWORD *)(a1.rawValue._countAndFlagsBits + 8);
  v5[0] = *(_QWORD *)a1.rawValue._countAndFlagsBits;
  v5[1] = v2;
  v5[2] = MEMORY[0x24BEE4AF8];
  v5[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v5);
  sub_23C7DF858();
  sub_23C7ECE1C();
  sub_23C7E0734();
  v3 = *v1;
  *(_QWORD *)(v3 + 16) = v2 + 1;
  sub_23C7EC56C(v3 + 184 * v2, v4);
  *v1 = v3;
  sub_23C7E4078();
}

void (*sub_23C7FC79C(void (**a1)(void **a1), unint64_t a2, uint64_t a3, uint64_t a4))(void **a1)
{
  void (*result)(void **);
  void (*v9)(void **);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void **);
  uint64_t v16;
  uint64_t v17;

  result = (void (*)(void **))malloc(0x28uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a3 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = result;
  v10 = a3 + 16 * a2;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain_n();
  result = (void (*)(void **))sub_23C866030(v11, v12, a4);
  if (v13)
  {
    v15 = result;
    v16 = v13;
    v17 = v14;
    swift_bridgeObjectRelease();
    *(_QWORD *)v9 = v15;
    *((_QWORD *)v9 + 1) = v16;
    *((_QWORD *)v9 + 2) = v17;
    *((_QWORD *)v9 + 3) = v11;
    *((_QWORD *)v9 + 4) = v12;
    return sub_23C7FC864;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_23C7FC864(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  sub_23C7E072C();
  sub_23C7DB62C();
  sub_23C7DE934();
  free(v1);
}

uint64_t sub_23C7FC8A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  if (v1 <= 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_23C7E79A8(&qword_25430B2A0);
    v2 = (_QWORD *)sub_23C7DB388();
    v3 = j__malloc_size(v2);
    v2[2] = v1;
    v2[3] = 2 * ((uint64_t)(v3 - 32) / 40);
  }
  swift_retain();
  v4 = sub_23C7FEED8(&v6, (uint64_t)(v2 + 4), v1);
  result = swift_release();
  if (v4 == (_QWORD *)v1)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

uint64_t sub_23C7FC968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = sub_23C80134C(a1, a2);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v4 = v3;
  if (v3 <= 0)
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_23C7E79A8(&qword_256BCA708);
    v5 = (const void *)sub_23C7DB388();
    sub_23C80137C(v5);
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = 2 * (v6 / 24);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7DBCC8();
  sub_23C7DC46C();
  v7 = sub_23C7FEBB4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DB398();
  swift_release();
  result = sub_23C7F91AC(v9, v10, v11);
  if (v7 == v4)
    return v2;
  __break(1u);
  return result;
}

void sub_23C7FCA8C()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C7E79A8(&qword_256BCBCC0);
    v1 = (const void *)sub_23C7DB388();
    v2 = j__malloc_size(v1);
    sub_23C7E5DBC(v2);
    sub_23C7FF010(v3, v4, v5, v6);
    sub_23C7EE244();
    sub_23C7E4C40();
    if (!v7)
      __break(1u);
  }
  sub_23C7E880C();
}

void sub_23C7FCAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;

  sub_23C8013C8();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    sub_23C80130C();
    if (!(v5 ^ v3 | v4))
    {
      sub_23C7E79A8(&qword_25430B400);
      v6 = (_QWORD *)sub_23C7DB388();
      sub_23C8012CC(v6);
    }
    if (v2 != v1)
    {
      sub_23C7E79A8(&qword_25430B3C8);
      sub_23C80131C();
LABEL_8:
      sub_23C7DF5B4();
      return;
    }
  }
  __break(1u);
}

void sub_23C7FCB94()
{
  sub_23C7FD160();
}

void sub_23C7FCBA8()
{
  sub_23C7FD008();
}

_QWORD *sub_23C7FCBB4(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xE000000000FFC1FFLL | 0xC00000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

_QWORD *sub_23C7FCBE8(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xE000000000FFC1FFLL | 0x1000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

_QWORD *sub_23C7FCC1C(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xE000000000FFC1FFLL | 0x800000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

_QWORD *sub_23C7FCC50(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xE000000000FFC1FFLL | 0x400000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

void *sub_23C7FCC84@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C7FC184(*(_QWORD *)(v1 + 32), a1);
}

void sub_23C7FCCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;

  sub_23C8013C8();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    sub_23C80130C();
    if (!(v5 ^ v3 | v4))
    {
      sub_23C7E79A8(&qword_25430B4A0);
      v6 = (_QWORD *)sub_23C7DB388();
      sub_23C8012CC(v6);
    }
    if (v2 != v1)
    {
      swift_arrayInitWithCopy();
LABEL_8:
      sub_23C7DF5B4();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_23C7FCD3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_23C7E79A8(&qword_25430B4A0);
  v3 = sub_23C7DB388();
  v4 = j__malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 232);
  v5 = sub_23C7FF988(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_23C7DB398();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void sub_23C7FCDEC()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C7E79A8(&qword_25430D7C0);
    v1 = (const void *)sub_23C7DB388();
    v2 = j__malloc_size(v1);
    sub_23C7E5DBC(v2);
    sub_23C7FFA9C(v3, v4, v5, v6);
    sub_23C7EE244();
    sub_23C7E4C40();
    if (!v7)
      __break(1u);
  }
  sub_23C7E880C();
}

void sub_23C7FCE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;

  sub_23C8013C8();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    sub_23C80130C();
    if (!(v5 ^ v3 | v4))
    {
      sub_23C7E79A8(&qword_25430DA10);
      v6 = (_QWORD *)sub_23C7DB388();
      v7 = j__malloc_size(v6);
      v6[2] = v0;
      v6[3] = 2 * ((uint64_t)(v7 - 32) / 16);
    }
    if (v2 != v1)
    {
      swift_arrayInitWithCopy();
LABEL_8:
      sub_23C7DF5B4();
      return;
    }
  }
  __break(1u);
}

void sub_23C7FCF04(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  unint64_t v5;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      sub_23C7E79A8(&qword_25430DBC8);
      v3 = (_QWORD *)sub_23C7DB388();
      v4 = j__malloc_size(v3);
      v3[2] = v2;
      v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
    }
    sub_23C7DF858();
    sub_23C8003E4((uint64_t)(v3 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for Row, &qword_256BCBCD0, qword_25430CAC0, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))sub_23C85986C);
    v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    sub_23C7DF858();
    v2 = sub_23C9117C0();
    sub_23C7DB624();
  }
  sub_23C7DB3A0();
}

void sub_23C7FCFFC()
{
  sub_23C7FD008();
}

void sub_23C7FD008()
{
  uint64_t v0;
  uint64_t *v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C8013A4(v0, v1);
    v2 = (const void *)sub_23C7DB388();
    sub_23C80137C(v2);
    sub_23C7DC44C(v3);
    sub_23C7FFCA8(v4, v5, v6, v7);
    sub_23C7E64FC();
    sub_23C7E4C40();
    if (!v8)
      __break(1u);
  }
  sub_23C7E880C();
}

void sub_23C7FD068()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C7E79A8(&qword_25430DA10);
    v1 = (const void *)sub_23C7DB388();
    v2 = j__malloc_size(v1);
    sub_23C7DC44C(v2 - 32);
    sub_23C7FFE3C(v3, v4, v5, v6);
    sub_23C7E64FC();
    sub_23C7E4C40();
    if (!v7)
      __break(1u);
  }
  sub_23C7E880C();
}

void sub_23C7FD0DC()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C7E79A8(&qword_256BCBD08);
    v1 = (const void *)sub_23C7DB388();
    v2 = j__malloc_size(v1);
    sub_23C7E5DBC(v2);
    sub_23C800038(v3, v4, v5, v6);
    sub_23C7EE244();
    sub_23C7E4C40();
    if (!v7)
      __break(1u);
  }
  sub_23C7E880C();
}

void sub_23C7FD14C()
{
  sub_23C7FD160();
}

void sub_23C7FD160()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(void);
  void (*v3)(void);
  const void *v4;
  size_t v5;
  char v6;

  sub_23C801264();
  if (*(_QWORD *)(v0 + 16))
  {
    v3 = v2;
    sub_23C8013A4(v0, v1);
    v4 = (const void *)sub_23C7DB388();
    v5 = j__malloc_size(v4);
    sub_23C7DC44C(v5 - 32);
    v3();
    sub_23C7E64FC();
    sub_23C7E4C40();
    if (!v6)
      __break(1u);
  }
  sub_23C7E880C();
}

_QWORD *sub_23C7FD1CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23C7E79A8(&qword_256BCA700);
  v3 = (const void *)sub_23C7DB388();
  sub_23C80137C(v3);
  v1[2] = v2;
  v1[3] = 2 * (v4 / 40);
  sub_23C7DBCC8();
  sub_23C7DC46C();
  v5 = sub_23C8013EC((unint64_t)v7, v1 + 4, v2);
  swift_bridgeObjectRelease();
  sub_23C7E5DE0();
  if (v5 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v1;
}

void sub_23C7FD27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;

  sub_23C8013C8();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    sub_23C80130C();
    if (!(v5 ^ v3 | v4))
    {
      sub_23C7E79A8(&qword_25430CEC0);
      v6 = (_QWORD *)sub_23C7DB388();
      sub_23C8012CC(v6);
    }
    if (v2 != v1)
    {
      sub_23C7E79A8(&qword_25430CEC8);
      sub_23C80131C();
LABEL_8:
      sub_23C7DF5B4();
      return;
    }
  }
  __break(1u);
}

void sub_23C7FD314()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

void sub_23C7FD348()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE348();
  *v0 = v1;
}

void sub_23C7FD37C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7E56FC();
  *v0 = v1;
}

void sub_23C7FD3B0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEB24();
  *v0 = v1;
}

uint64_t sub_23C7FD3E4(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FDD9C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23C7FD400()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEA90();
  *v0 = v1;
}

void sub_23C7FD434()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE9D0();
  *v0 = v1;
}

void sub_23C7FD468()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE2B8();
  *v0 = v1;
}

void sub_23C7FD49C(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_23C7FDEB4(a1, a2, a3, *v3);
  *v3 = v4;
}

void sub_23C7FD4B8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE11C();
  *v0 = v1;
}

void sub_23C7FD4EC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE9D0();
  *v0 = v1;
}

void sub_23C7FD520()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE834();
  *v0 = v1;
}

void sub_23C7FD554()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

void sub_23C7FD588()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FDF80();
  *v0 = v1;
}

uint64_t sub_23C7FD5BC(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FE010(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_23C7FD5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  if ((a21 & 0x80000000) == 0)
    return swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(a6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(a15);
  return sub_23C7F5610(a17);
}

uint64_t sub_23C7FD6D4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch(a21 >> 61)
  {
    case 0uLL:
      result = swift_retain();
      break;
    case 1uLL:
      result = sub_23C7E7E58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      sub_23C7E7E58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      goto LABEL_5;
    case 3uLL:
LABEL_5:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C7FD7E4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  switch(HIWORD(a21) & 6 | (a21 >> 14) & 1)
  {
    case 0u:
      goto LABEL_3;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      a21 &= 0xFFF9BFFF;
LABEL_3:
      result = sub_23C7E7E58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 5u:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C7FD8C0(uint64_t a1)
{
  sub_23C7FD5D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_WORD *)(a1 + 160));
  return a1;
}

void sub_23C7FD928()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE11C();
  *v0 = v1;
}

void sub_23C7FD95C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE11C();
  *v0 = v1;
}

uint64_t sub_23C7FD990(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FE1BC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23C7FD9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_23C7FE600(a1, a2, a3, *v3, &qword_25430CA48, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C902418);
  *v3 = v4;
}

void sub_23C7FD9D8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEA90();
  *v0 = v1;
}

void sub_23C7FDA0C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE2B8();
  *v0 = v1;
}

void sub_23C7FDA40()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE348();
  *v0 = v1;
}

void sub_23C7FDA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_23C7FE600(a1, a2, a3, *v3, &qword_25430B618, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C8F9060);
  *v3 = v4;
}

void sub_23C7FDAA0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEA90();
  *v0 = v1;
}

void sub_23C7FDAD4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE9D0();
  *v0 = v1;
}

void sub_23C7FDB08()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

uint64_t sub_23C7FDB3C(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FE3EC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23C7FDB58()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE9D0();
  *v0 = v1;
}

uint64_t sub_23C7FDB8C(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FE4F8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23C7FDBA8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

void sub_23C7FDBDC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

void sub_23C7FDC10()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE784();
  *v0 = v1;
}

uint64_t sub_23C7FDC44(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23C7FE8D4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void sub_23C7FDC60()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FE9D0();
  *v0 = v1;
}

void sub_23C7FDC94()
{
  _QWORD *v0;
  uint64_t v1;

  sub_23C7FEB24();
  *v0 = v1;
}

void sub_23C7FDCC8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  _QWORD *v10;

  if ((a3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v8 != v9)
    {
      sub_23C7E6B90();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v5)
  {
    sub_23C7E79A8(&qword_256BCBCC0);
    v10 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v10);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    sub_23C8F9038((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_256BCBCC8);
    sub_23C7DD128();
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

void sub_23C7FDD80()
{
  sub_23C7E56FC();
}

uint64_t sub_23C7FDD9C(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_256BCBCA8);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F90C8((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_23C7FDE98()
{
  sub_23C7FEA90();
}

void sub_23C7FDEB4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  _QWORD *v10;

  if ((a3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v8 != v9)
    {
      sub_23C7E6B90();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v5)
  {
    sub_23C7E79A8(&qword_25430D2C0);
    v10 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v10);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    sub_23C8F9108((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

void sub_23C7FDF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7FE600(a1, a2, a3, a4, &qword_25430CA48, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C902418);
}

void sub_23C7FDF80()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

uint64_t sub_23C7FE010(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_256BCBCE8);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C9023F4((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_256BCBCF0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_23C7FE11C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (const void *)sub_23C7DB388();
    v12 = j__malloc_size(v11);
    sub_23C8012C0((uint64_t)(v12 - 32) / 32);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v13, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

uint64_t sub_23C7FE1BC(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_25430B4A0);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 232);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F9178((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_23C7FE2B8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

void sub_23C7FE348()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;

  sub_23C7DF844();
  sub_23C7DF2D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (const void *)sub_23C7DB388();
    v12 = j__malloc_size(v11);
    sub_23C8012C0((uint64_t)(v12 - 32) / 16);
  }
  sub_23C8013BC();
  if ((v1 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C80135C();
    sub_23C7E9A84();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

uint64_t sub_23C7FE3EC(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_256BCBCD8);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F9018((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy((void *)(v10 + 32), (const void *)(a4 + 32), 16 * v8);
  }
  swift_release();
  return v10;
}

void sub_23C7FE4DC()
{
  sub_23C7FE784();
}

uint64_t sub_23C7FE4F8(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_256BCA6F0);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F9060((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_23C7FE5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C7FE600(a1, a2, a3, a4, &qword_256BCA528, (void (*)(uint64_t, uint64_t, _QWORD *))sub_23C902418);
}

void sub_23C7FE600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v10 != v11)
    {
      sub_23C7E6B90();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (v13)
  {
    sub_23C7E1684(a1, a2, a3, a4, a5);
    v14 = (_QWORD *)sub_23C7DB388();
    v15 = j__malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v14 + 4);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14 + 4, (const void *)(a4 + 32), 8 * v12);
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

void sub_23C7FE6CC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  _QWORD *v10;

  if ((a3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v8 != v9)
    {
      sub_23C7E6B90();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7EDD60();
  if (v5)
  {
    sub_23C7E79A8(&qword_256BCBD08);
    v10 = (_QWORD *)sub_23C7DB388();
    sub_23C7E10E8(v10);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    sub_23C8F91B8((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430B370);
    sub_23C7DD128();
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

void sub_23C7FE784()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  sub_23C7DF844();
  sub_23C7DF2D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C8013BC();
  if ((v1 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C80135C();
    sub_23C7E9A84();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

void sub_23C7FE818()
{
  sub_23C7FE834();
}

void sub_23C7FE834()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (const void *)sub_23C7DB388();
    v12 = j__malloc_size(v11);
    sub_23C8012C0((uint64_t)(v12 - 32) / 16);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v13, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DF5B4();
}

uint64_t sub_23C7FE8D4(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_23C7E79A8(&qword_25430D2B8);
    v10 = swift_allocObject();
    v11 = j__malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    sub_23C8F9150((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_23C7FE9D0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;

  sub_23C7DF844();
  sub_23C7DF2D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (const void *)sub_23C7DB388();
    v12 = j__malloc_size(v11);
    sub_23C8012C0((uint64_t)(v12 - 32) / 32);
  }
  sub_23C8013BC();
  if ((v1 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C80135C();
    sub_23C7E9A84();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

void sub_23C7FEA74()
{
  sub_23C7FEA90();
}

void sub_23C7FEA90()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  sub_23C7DF844();
  sub_23C7DF2D0();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C8013BC();
  if ((v1 & 1) != 0)
  {
    sub_23C7DC43C();
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C80135C();
    sub_23C7E9A84();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

void sub_23C7FEB24()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7DF844();
  sub_23C7DFAFC();
  if ((v3 & 1) != 0)
  {
    sub_23C7E8FC4();
    if (v4 != v5)
    {
      sub_23C7E6B90();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_23C7E6164();
    }
  }
  sub_23C7E9500();
  if (v2)
  {
    sub_23C7E1684(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)sub_23C7DB388();
    sub_23C7E06C0(v11);
  }
  sub_23C7ECF64();
  if ((v1 & 1) != 0)
  {
    sub_23C7DB3AC(v12, v13);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_23C7EE398();
  }
  sub_23C7DE904();
  sub_23C7DEEA8();
}

uint64_t sub_23C7FEBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[128];
  uint64_t v57;
  uint64_t v58;

  sub_23C7DE8EC();
  v57 = v0;
  v58 = v1;
  v3 = v2;
  v46 = v4;
  v6 = v5;
  v52 = v7;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  result = ((uint64_t (*)(uint64_t))sub_23C8F74D0)(v5);
  v16 = result;
  v18 = v17;
  v19 = v15 & 1;
  if (!v11)
  {
    result = 0;
LABEL_24:
    *(_QWORD *)v13 = v52;
    *(_QWORD *)(v13 + 8) = v6;
    *(_QWORD *)(v13 + 16) = v46;
    *(_QWORD *)(v13 + 24) = v3;
    *(_QWORD *)(v13 + 32) = v16;
    *(_QWORD *)(v13 + 40) = v18;
    *(_BYTE *)(v13 + 48) = v19;
    return result;
  }
  if (!v9)
  {
    result = 0;
    goto LABEL_24;
  }
  if (v9 < 0)
    goto LABEL_29;
  if ((v15 & 1) == 0)
  {
    v44 = v13;
    result = 0;
    v51 = v6 + 64;
    v43 = v9;
    v45 = v9 - 1;
    v47 = v3;
    while (1)
    {
      v20 = *(_DWORD *)(v6 + 36);
      if (v20 != (_DWORD)v18)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v16 == 1 << *(_BYTE *)(v6 + 32))
      {
        v19 = 0;
LABEL_23:
        v13 = v44;
        goto LABEL_24;
      }
      v49 = v11;
      v50 = result;
      sub_23C8F76A8((uint64_t)v56, v16, v18, 0, v6);
      v22 = v21;
      v24 = v23;
      v25 = type metadata accessor for Row();
      sub_23C7EFC04((uint64_t)v56, (uint64_t)v53);
      v27 = v54;
      v26 = v55;
      v28 = sub_23C800944((uint64_t)v53, v54);
      MEMORY[0x24BDAC7A8](v28);
      v30 = (char *)&v43 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v31 + 16))(v30);
      v32 = swift_retain();
      v33 = v26;
      v3 = v47;
      v34 = sub_23C846130(v32, (uint64_t)v30, v25, v27, v33);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v53);
      v35 = *(_QWORD *)(v3 + 16);
      v48 = v24;
      if (!v35)
        goto LABEL_12;
      sub_23C7DC46C();
      v36 = sub_23C7E94B8();
      if ((v37 & 1) == 0)
        break;
      v38 = *(_QWORD *)(v3 + 56) + 24 * v36;
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *(_QWORD *)(v38 + 16);
      sub_23C7DBBB8();
      sub_23C7DB3B8();
      swift_bridgeObjectRetain();
      sub_23C7E072C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v56);
      sub_23C7DC474();
      swift_beginAccess();
      *(_QWORD *)(v34 + 80) = v39;
      *(_QWORD *)(v34 + 88) = v40;
      v3 = v47;
      swift_bridgeObjectRelease();
      result = sub_23C7DC474();
LABEL_13:
      if (v16 < 0 || v16 >= -(-1 << *(_BYTE *)(v6 + 32)))
        goto LABEL_26;
      if (((*(_QWORD *)(v51 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        goto LABEL_27;
      if (*(_DWORD *)(v6 + 36) != v20)
        goto LABEL_28;
      swift_retain();
      sub_23C7DBCC8();
      swift_bridgeObjectRetain();
      sub_23C7DB3B8();
      v16 = sub_23C91158C();
      v18 = *(unsigned int *)(v6 + 36);
      sub_23C7DBCD0();
      sub_23C7DE934();
      sub_23C7DB62C();
      swift_release();
      v41 = v48;
      v42 = v49;
      *v49 = v22;
      v42[1] = v41;
      v42[2] = v34;
      if (v45 == v50)
      {
        v19 = 0;
        result = v43;
        goto LABEL_23;
      }
      result = v50 + 1;
      v11 = v42 + 3;
    }
    sub_23C7E072C();
LABEL_12:
    result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v56);
    goto LABEL_13;
  }
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *sub_23C7FEED8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v15;
  _QWORD v16[4];
  char v17;
  uint64_t v18;

  v15 = result;
  if (!a2)
  {
LABEL_9:
    v6 = 0;
    v5 = 0;
LABEL_12:
    *v15 = v3;
    v15[1] = v6;
    return (_QWORD *)v5;
  }
  if (!a3)
  {
    v6 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v3 + 72))
    {
      v4 = a2;
      v5 = 0;
      v6 = 0;
      v7 = a3 - 1;
      while (1)
      {
        v8 = Row.subscript.getter();
        v10 = v9;
        v12 = v16[2];
        v11 = v16[3];
        v13 = v17;
        swift_bridgeObjectRetain();
        sub_23C7E56A4(v12, v11, v13);
        swift_bridgeObjectRelease();
        sub_23C7E5640(v12, v11, v13);
        sub_23C8F4024(v16, v6);
        v6 = v16[0];
        v18 = v16[0];
        *(_QWORD *)v4 = v8;
        *(_QWORD *)(v4 + 8) = v10;
        *(_QWORD *)(v4 + 16) = v12;
        *(_QWORD *)(v4 + 24) = v11;
        *(_BYTE *)(v4 + 32) = v13;
        if (v7 == v5)
          break;
        v4 += 40;
        ++v5;
        if (v6 == *(_QWORD *)(v3 + 72))
          goto LABEL_12;
      }
      v5 = a3;
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23C7FF010(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 32 * v14);
    v19 = v18[1];
    v20 = v18[2];
    v21 = v18[3];
    v22 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + 16 * v14);
    *(_QWORD *)v10 = *v18;
    *(_QWORD *)(v10 + 8) = v19;
    *(_QWORD *)(v10 + 16) = v20;
    *(_QWORD *)(v10 + 24) = v21;
    *(_OWORD *)(v10 + 32) = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v25)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v25)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v25)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v25)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v25)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v25)
              {
                v8 = 0;
                v11 = v25 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v23;
      result = v24;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23C7FF278(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_23C7FF474(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[23];
  _BYTE v25[184];
  _BYTE v26[184];
  _BYTE v27[184];
  _QWORD v28[23];
  _BYTE v29[184];
  _QWORD __dst[23];
  _BYTE v31[184];
  _BYTE __src[184];
  _QWORD v33[23];
  _BYTE v34[184];
  _QWORD v35[29];
  _QWORD v36[29];
  _BYTE v37[192];

  v36[0] = a4;
  v36[1] = 0;
  sub_23C801020((uint64_t)v37);
  sub_23C800FCC((uint64_t)v37, (uint64_t)&v36[2], &qword_256BCBCF8);
  memset(&v36[26], 0, 17);
  v36[25] = a5;
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000) == 0)
      {
        v21 = a3;
        v22 = a2;
        v20 = (void *)a1;
        v10 = 0;
        a1 = 0;
        v23 = 0;
        v11 = a4 + 32;
        while ((_BYTE)a1)
        {
          if (a1 == 1)
            goto LABEL_14;
          v12 = v36[26];
          if (!v36[26])
            goto LABEL_28;
LABEL_12:
          v14 = v36[27];
          v15 = *(_QWORD *)(v12 + 16);
          if (v36[27] == v15)
            goto LABEL_13;
          if (v36[27] >= v15)
          {
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          sub_23C7F96E0((const void *)(v12 + 184 * v36[27] + 32), v33);
          v36[27] = v14 + 1;
          sub_23C7F96E0(v33, v35);
          nullsub_1(v35);
          sub_23C8010AC(v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
          sub_23C800FCC((uint64_t)v35, (uint64_t)v34, &qword_256BCA510);
          a1 = 2;
LABEL_25:
          sub_23C800FCC((uint64_t)v34, (uint64_t)v35, &qword_256BCA510);
          sub_23C7F96E0(v35, v22);
          if (++v23 == v21)
          {
            a1 = (uint64_t)v20;
            goto LABEL_33;
          }
          v22 += 184;
          v11 = a4 + 32;
        }
        v13 = *(_QWORD *)(a4 + 16);
        if (v10 == v13)
        {
LABEL_31:
          sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v33, &qword_256BCBCF8);
          v18 = v36[26];
          v19 = v36[27];
          v35[0] = a4;
          v35[1] = v10;
          sub_23C800FCC((uint64_t)v33, (uint64_t)&v35[2], &qword_256BCBCF8);
          v35[25] = a5;
          v35[26] = v18;
          v35[27] = v19;
          LOBYTE(v35[28]) = 3;
          memcpy(v20, v35, 0xE1uLL);
          return;
        }
        if (v10 < v13)
        {
          memcpy(__dst, (const void *)(v11 + 184 * v10++), sizeof(__dst));
          v36[1] = v10;
          sub_23C7F96E0(__dst, v31);
          nullsub_1(v31);
          sub_23C800FCC((uint64_t)v31, (uint64_t)__src, &qword_256BCA510);
          memcpy(v33, __src, sizeof(v33));
          nullsub_1(v33);
          sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v35, &qword_256BCBCF8);
          sub_23C8010AC(__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
          sub_23C8010AC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C800C84);
          sub_23C800FCC((uint64_t)v33, (uint64_t)&v36[2], &qword_256BCBCF8);
LABEL_13:
          LOBYTE(v36[28]) = 1;
LABEL_14:
          sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v33, &qword_256BCBCF8);
          sub_23C800FCC((uint64_t)v33, (uint64_t)v35, &qword_256BCBCF8);
          if (sub_23C800FF8((uint64_t)v35) == 1)
            goto LABEL_38;
          v16 = (char *)(v11 + 184 * v10);
          while (1)
          {
            sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v29, &qword_256BCA510);
            sub_23C800F98((uint64_t)__dst);
            sub_23C800FCC((uint64_t)__dst, (uint64_t)v31, &qword_256BCA510);
            memcpy(&v36[2], v31, 0xB8uLL);
            sub_23C800FCC((uint64_t)v29, (uint64_t)__src, &qword_256BCA510);
            if (sub_23C800F80((uint64_t)__src) != 1)
            {
              sub_23C800FCC((uint64_t)v29, (uint64_t)v34, &qword_256BCA510);
              a1 = 1;
              goto LABEL_25;
            }
            v17 = *(_QWORD *)(a4 + 16);
            if (v10 == v17)
            {
              sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v28, &qword_256BCBCF8);
              sub_23C8010AC(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C800C84);
              sub_23C800FCC((uint64_t)v37, (uint64_t)&v36[2], &qword_256BCBCF8);
              goto LABEL_31;
            }
            if (v10 >= v17)
            {
              __break(1u);
              goto LABEL_35;
            }
            memcpy(v24, v16, sizeof(v24));
            v36[1] = ++v10;
            sub_23C7F96E0(v24, v25);
            nullsub_1(v25);
            sub_23C800FCC((uint64_t)v25, (uint64_t)v26, &qword_256BCA510);
            memcpy(v27, v26, sizeof(v27));
            nullsub_1(v27);
            sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v28, &qword_256BCBCF8);
            sub_23C8010AC(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
            sub_23C8010AC(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C800C84);
            sub_23C800FCC((uint64_t)v27, (uint64_t)&v36[2], &qword_256BCBCF8);
            if (*(_QWORD *)(a5 + 16))
              break;
            sub_23C800FCC((uint64_t)&v36[2], (uint64_t)v33, &qword_256BCBCF8);
            sub_23C800FCC((uint64_t)v33, (uint64_t)v35, &qword_256BCBCF8);
            v16 += 184;
            if (sub_23C800FF8((uint64_t)v35) == 1)
              goto LABEL_38;
          }
          a1 = v36[26];
          swift_retain();
          swift_release();
          v36[26] = a5;
          v36[27] = 0;
          v12 = a5;
          LOBYTE(v36[28]) = 2;
          if (a5)
            goto LABEL_12;
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_36:
        __break(1u);
      }
      __break(1u);
LABEL_38:
      __break(1u);
    }
    else
    {
LABEL_33:
      memcpy((void *)a1, v36, 0xE1uLL);
    }
  }
  else
  {
LABEL_29:
    v35[0] = a4;
    v35[1] = 0;
    sub_23C800FCC((uint64_t)v37, (uint64_t)&v35[2], &qword_256BCBCF8);
    v35[25] = a5;
    memset(&v35[26], 0, 17);
    memcpy((void *)a1, v35, 0xE1uLL);
  }
}

uint64_t sub_23C7FF988(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE __dst[232];

  v6 = *(_QWORD *)(a4 + 16);
  if (!a2)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v11 = *(_QWORD *)(a4 + 16);
LABEL_13:
    v6 = a3;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_14;
  }
  v8 = a2;
  v9 = 0;
  v10 = (char *)(a4 + 232 * v6 - 200);
  while (1)
  {
    v11 = v6 + v9 - 1;
    memcpy(__dst, v10, 0xE3uLL);
    memmove(v8, v10, 0xE3uLL);
    if (a3 + v9 == 1)
      goto LABEL_10;
    if (v6 + v9 == 1)
      break;
    v8 += 232;
    sub_23C800974((uint64_t)__dst);
    --v9;
    v10 -= 232;
    if (v6 + v9 > *(_QWORD *)(a4 + 16))
    {
      __break(1u);
LABEL_10:
      sub_23C800974((uint64_t)__dst);
      goto LABEL_13;
    }
  }
  sub_23C800974((uint64_t)__dst);
LABEL_14:
  *a1 = a4;
  a1[1] = v11;
  return v6;
}

uint64_t sub_23C7FFA9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    *(_QWORD *)v11 = *(_QWORD *)v20;
    *(_QWORD *)(v11 + 8) = v22;
    *(_BYTE *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      sub_23C7E56A4(v21, v22, v23);
      goto LABEL_38;
    }
    v11 += 24;
    result = sub_23C7E56A4(v21, v22, v23);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_23C7FFCA8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_23C7FFE3C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_23C800038(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_37:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v12;
  }
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
    goto LABEL_39;
  v10 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v11 = 0;
  v12 = 0;
  v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_23C7DB5E4(*(_QWORD *)(a4 + 56) + 40 * v14, (uint64_t)&v28, (uint64_t *)&unk_25430D6B8);
    *(_QWORD *)&v27 = v20;
    *((_QWORD *)&v27 + 1) = v19;
    v21 = v30;
    v34 = v30;
    v22 = v29;
    v23 = v28;
    v32 = v28;
    v33 = v29;
    v31 = v27;
    *(_OWORD *)v10 = v27;
    *(_OWORD *)(v10 + 16) = v23;
    *(_OWORD *)(v10 + 32) = v22;
    *(_QWORD *)(v10 + 48) = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      v12 = a3;
      goto LABEL_36;
    }
    v10 += 56;
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v26)
      goto LABEL_35;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v26)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v11 = v15 + 1;
      if (v15 + 2 >= v26)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        v11 = v15 + 2;
        if (v15 + 3 >= v26)
          goto LABEL_35;
        v16 = *(_QWORD *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          v17 = v15 + 4;
          v11 = v15 + 3;
          if (v15 + 4 < v26)
          {
            v16 = *(_QWORD *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v15 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_40;
                if (v15 >= v26)
                {
                  v11 = v26 - 1;
                  goto LABEL_35;
                }
                v16 = *(_QWORD *)(v5 + 8 * v15);
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          v8 = 0;
LABEL_36:
          v6 = v24;
          result = v25;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_23C8002A0(unint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;

  v5 = a5;
  if (!a2)
  {
LABEL_13:
    v7 = 0;
    goto LABEL_17;
  }
  v7 = a3;
  if (!a3)
  {
LABEL_17:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = v7;
    return v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(a4 + 16);
    if (v8)
    {
      v9 = a2;
      v20 = result;
      v10 = (uint64_t *)(a4 + 40);
      v11 = 1;
      while (*(_QWORD *)(v5 + 16))
      {
        v12 = *(v10 - 1);
        v13 = *v10;
        swift_bridgeObjectRetain_n();
        result = sub_23C7E94B8();
        if ((v14 & 1) == 0)
          goto LABEL_19;
        v15 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * result);
        v17 = *v15;
        v16 = v15[1];
        v18 = v15[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        *v9 = v12;
        v9[1] = v13;
        v9[2] = v17;
        v9[3] = v16;
        v7 = a3;
        v9[4] = v18;
        if (a3 == v11)
          goto LABEL_16;
        if (v8 == v11)
        {
          v7 = v8;
LABEL_16:
          result = v20;
          v5 = a5;
          goto LABEL_17;
        }
        v10 += 2;
        v9 += 5;
        v19 = v11++ >= *(_QWORD *)(a4 + 16);
        v5 = a5;
        if (v19)
        {
          __break(1u);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v7 = 0;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_23C8003E4(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[32];

  v13 = result;
  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_23C7DF858();
    v15 = sub_23C9117C0();
    result = sub_23C7DB624();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      sub_23C7DF858();
      v16 = sub_23C9117C0();
      result = sub_23C7DB624();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          sub_23C7E1240(a5, a6, MEMORY[0x24BEE12E0]);
          v18 = v17;
          sub_23C7DF858();
          for (i = 0; i != v15; ++i)
          {
            v20 = sub_23C7E79A8(a6);
            v21 = (void (*)(_BYTE *, _QWORD))a7(v24, i, a3, v20, v18);
            v23 = *v22;
            swift_retain();
            v21(v24, 0);
            *(_QWORD *)(v13 + 8 * i) = v23;
          }
          sub_23C7DB624();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4(0);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23C800578()
{
  __asm { BR              X9 }
}

_QWORD *sub_23C8005E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[23];
  _BYTE v7[288];

  v2 = *(_QWORD *)(v1 + 208);
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x23C800930);
  }
  v3 = *(_QWORD *)(v1 + 216);
  v4 = *(_QWORD *)(v2 + 16);
  if (v3 == v4)
  {
    *(_BYTE *)(v1 + 224) = 1;
    JUMPOUT(0x23C8005D0);
  }
  if (v3 >= v4)
  {
    __break(1u);
    JUMPOUT(0x23C800928);
  }
  sub_23C7F96E0((const void *)(v2 + 184 * v3 + 32), v6);
  *(_QWORD *)(v1 + 216) = v3 + 1;
  sub_23C7F96E0(v6, v7);
  nullsub_1(v7);
  sub_23C800FCC((uint64_t)v7, v0, &qword_256BCA510);
  return sub_23C8010AC(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7E523C);
}

uint64_t sub_23C800944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_23C80096C()
{
  return swift_release();
}

uint64_t sub_23C800974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v6 = *(_BYTE *)(a1 + 56);
  sub_23C800A8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_23C800AA4(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v9);
  sub_23C7F5610(v10);
  return a1;
}

uint64_t sub_23C800A8C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C800AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 < 0)
    return swift_retain();
  swift_bridgeObjectRetain();
  return sub_23C800ADC(a3);
}

uint64_t sub_23C800ADC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C800B0C(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = BYTE2(v3) & 1;
  return result;
}

void *sub_23C800B48(const void *a1, void *a2)
{
  initializeWithTake for SQLOrdering.Impl(a2, a1);
  return a2;
}

uint64_t sub_23C800B84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 128);
  v9 = *(_OWORD *)(a1 + 176);
  v10 = *(_OWORD *)(a1 + 160);
  swift_bridgeObjectRelease();
  sub_23C800C84(v17, v16, v2, v3, v4, v5, v6, v7, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10,
    *((uint64_t *)&v10 + 1),
    v9);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23C800C84(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  BOOL v21;

  v21 = a9 >> 1 != 4294967294 || a14 > 1;
  if (v21 || (a21 & 0x1FFFFFFFFF003E00) != 0)
    return sub_23C800D0C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  return result;
}

uint64_t sub_23C800D0C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  BOOL v21;

  v21 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v21 || (a21 & 0x1FFFFFFFFF003E00) != 0)
    return sub_23C7E509C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  return result;
}

uint64_t sub_23C800D94(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch(a21 >> 61)
  {
    case 0uLL:
      result = swift_release();
      break;
    case 1uLL:
      result = sub_23C7E6F90(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      sub_23C7E6F90(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      goto LABEL_5;
    case 3uLL:
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C800EA4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  switch(HIWORD(a21) & 6 | (a21 >> 14) & 1)
  {
    case 0u:
      goto LABEL_3;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      a21 &= 0xFFF9BFFF;
LABEL_3:
      result = sub_23C7E6F90(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 5u:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23C800F80(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 64) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 64) >> 1);
  else
    return 0;
}

double sub_23C800F98(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void sub_23C800FCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_23C80133C(a1, a2, a3);
  sub_23C7DA4D4(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_23C7DB390();
}

uint64_t sub_23C800FF8(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 64) >> 1;
  v2 = -2 - v1;
  if (-2 - (int)v1 < 0)
    v2 = -1;
  if (v1 > 0x80000000)
    return (v2 + 1);
  else
    return 0;
}

double sub_23C801020(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void *sub_23C801054(const void *a1, void *a2)
{
  initializeWithTake for SQLSelection.Impl(a2, a1);
  return a2;
}

uint64_t sub_23C801090(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 160) >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

_QWORD *sub_23C8010AC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22]);
  return a1;
}

_QWORD *sub_23C801118(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xF981FFLL | 0x6000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_23C80114C(uint64_t a1)
{
  sub_23C7E6F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  return a1;
}

_QWORD *sub_23C8011BC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xF981FFLL | 0x4000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_23C8011F0(uint64_t result)
{
  *(_QWORD *)(result + 160) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_23C801200(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xF981FFLL | 0x2000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

_QWORD *sub_23C801234(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[13] & 1;
  v2 = result[20] & 0xF981FFLL;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

_QWORD *sub_23C801280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))((uint64_t *)va, a2, a3);
}

uint64_t sub_23C80129C()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23C8012A8(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 8))((uint64_t *)va, v1, v2);
}

void sub_23C8012C0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

size_t sub_23C8012CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void sub_23C8012F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v10;

  v10._countAndFlagsBits = a9;
  v10._object = a10;
  SQLInterpolation.appendLiteral(_:)(v10);
}

uint64_t sub_23C80131C()
{
  return swift_arrayInitWithCopy();
}

void *sub_23C801330(uint64_t a1, uint64_t a2)
{
  return sub_23C7FBE10(a1, a2);
}

uint64_t sub_23C80133C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_23C7E79A8(a3);
}

uint64_t sub_23C80134C(uint64_t a1, uint64_t a2)
{
  return sub_23C8D6A2C(a1, a2);
}

uint64_t sub_23C80135C()
{
  uint64_t *v0;

  return sub_23C7E79A8(v0);
}

void sub_23C801364()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1 + 1;
}

size_t sub_23C80137C(const void *a1)
{
  return j__malloc_size(a1);
}

_QWORD *sub_23C801394(_QWORD *a1)
{
  return sub_23C7E7E34(a1, a1[3]);
}

uint64_t sub_23C8013A4(uint64_t a1, uint64_t *a2)
{
  return sub_23C7E79A8(a2);
}

uint64_t sub_23C8013B0()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8013D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, 1, v2);
}

void sub_23C8013E0()
{
  sub_23C7F28EC();
}

unint64_t sub_23C8013EC(unint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_23C8002A0(a1, a2, a3, v4, v3);
}

uint64_t sub_23C801420()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23C80149C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  objc_msgSend(*(id *)(a1 + 24), sel_lock);
  result = sub_23C7E6180();
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v4;
    objc_msgSend(*(id *)(a1 + 24), sel_unlock);
    return v4;
  }
  return result;
}

uint64_t sub_23C801518(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 24), sel_lock);
  sub_23C7E6180();
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    *(_BYTE *)(a1 + 16) = 1;
    sub_23C7E6180();
    sqlite3_interrupt(*(sqlite3 **)(a2 + 16));
  }
  swift_endAccess();
  objc_msgSend(*(id *)(a1 + 24), sel_unlock);
  return swift_release();
}

uint64_t sub_23C8015BC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));

  return v0;
}

uint64_t sub_23C8015F8()
{
  sub_23C8015BC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LockedBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockedBox);
}

void DatabaseValueConvertible<>.databaseValue.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E4C68();
  MEMORY[0x24BDAC7A8](v1);
  sub_23C7E80BC(v2, v3);
  sub_23C7E97B0();
  sub_23C7E8828();
  sub_23C7E8FE4();

  sub_23C7DF5B4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E4C68();
  MEMORY[0x24BDAC7A8](v1);
  sub_23C7E80BC(v2, v3);
  sub_23C7E97B0();
  sub_23C7E8828();
  sub_23C7E8FE4();

  sub_23C7DF5B4();
}

{
  uint64_t v0;

  sub_23C7E31CC();
  sub_23C7E0854();
  sub_23C7E88EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7E81C0();
  sub_23C7E4184();
  sub_23C7E4CC4();
  sub_23C7DEEA8();
}

void static DatabaseValueConvertible<>.fromDatabaseValue(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  id v23;
  uint64_t v24;
  char v25;
  void *v26;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  v13 = sub_23C7E6188();
  v24 = v11;
  v25 = v12;
  sub_23C7E0744(v13, v14, v15, v16, v17, v18, v19, v20);
  v23 = v26;
  v22[2] = a2;
  v22[3] = a3;
  v22[4] = a4;
  v22[5] = a5;
  sub_23C7EC578();
  sub_23C7E19D4((void (*)(char *, char *))sub_23C8017A0, (uint64_t)v22, MEMORY[0x24BEE4078], v21, a6);

  sub_23C7E4088();
}

void sub_23C801734(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *a1;
  swift_getAssociatedTypeWitness();
  sub_23C8901F8((uint64_t)&v5, a2, a3);
}

void sub_23C8017A0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23C801734(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23C8017C0@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);

  v25 = a5;
  v26 = a4;
  v27 = a2;
  v28 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if (sub_23C7DE718((uint64_t)v20, 1, v14) == 1)
    return sub_23C7DE70C(a6, 1, 1, v26);
  v26 = a3;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v26);
  return result;
}

void sub_23C801948(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  char v19;

  v8 = sub_23C7E79A8(&qword_256BCBD10);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C801BEC();
  v18[0] = a1;
  v18[1] = a2;
  v19 = a3;
  v11 = static NSURL.fromDatabaseValue(_:)((uint64_t)v18);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = sub_23C910A94();
    sub_23C7DE70C((uint64_t)v10, 1, 1, v13);
    sub_23C801C28();
    sub_23C911808();
    if (sub_23C7DE718((uint64_t)v10, 1, v13) == 1)
    {
      v14 = a4;
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a4, v10, v13);
      v14 = a4;
      v15 = 0;
    }
    sub_23C7DE70C(v14, v15, 1, v13);

  }
  else
  {
    v16 = sub_23C910A94();
    sub_23C7DE70C(a4, 1, 1, v16);
  }
}

void static DatabaseValueConvertible<>.fromDatabaseValue(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  id v25;
  uint64_t v26;
  char v27;
  void *v28;

  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_BYTE *)(a1 + 16);
  v15 = sub_23C7E6188();
  v26 = v13;
  v27 = v14;
  sub_23C7E0744(v15, v16, v17, v18, v19, v20, v21, v22);
  v25 = v28;
  v24[2] = a2;
  v24[3] = a3;
  v24[4] = a4;
  v24[5] = a5;
  v24[6] = a6;
  sub_23C7EC578();
  sub_23C7E19D4((void (*)(char *, char *))sub_23C801B58, (uint64_t)v24, MEMORY[0x24BEE4078], v23, a7);

  sub_23C7E4088();
}

void sub_23C801B58(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23C801734(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_23C801BDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C801948(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2);
}

unint64_t sub_23C801BEC()
{
  unint64_t result;

  result = qword_256BCBD18;
  if (!qword_256BCBD18)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256BCBD18);
  }
  return result;
}

unint64_t sub_23C801C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256BCBD20;
  if (!qword_256BCBD20)
  {
    v1 = sub_23C910A94();
    result = MEMORY[0x242626100](MEMORY[0x24BDCDB20], v1);
    atomic_store(result, (unint64_t *)&qword_256BCBD20);
  }
  return result;
}

uint64_t HasManyAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t HasManyAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*HasManyAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C801CAC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C801CD8@<X0>(uint64_t *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  _BYTE v16[169];

  v7 = *a4;
  v8 = a4[1];
  v10 = *__src;
  v9 = __src[1];
  if (a3)
  {
    v11 = a3;
    v13 = 2;
  }
  else
  {
    swift_bridgeObjectRetain();
    v13 = 0;
    a2 = v10;
    v11 = v9;
  }
  memcpy(&v16[7], __src, 0xA2uLL);
  sub_23C7E79A8(&qword_25430B4A0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = v11;
  *(_BYTE *)(v14 + 48) = v13;
  *(_QWORD *)(v14 + 56) = v10;
  *(_QWORD *)(v14 + 64) = v9;
  *(_QWORD *)(v14 + 72) = v7;
  *(_QWORD *)(v14 + 80) = v8;
  *(_BYTE *)(v14 + 88) = 0;
  memcpy((void *)(v14 + 89), v16, 0xA9uLL);
  *(_BYTE *)(v14 + 258) = 1;
  *a5 = v14;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C801DC0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C801DF4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HasManyAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

void sub_23C801E38(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_23C801E64(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C801E90(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C801EBC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for HasManyAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HasManyAssociation);
}

void NSNull.databaseValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
}

uint64_t static NSNull.fromDatabaseValue(_:)()
{
  return 0;
}

void sub_23C801EE8(uint64_t a1@<X8>)
{
  NSNull.databaseValue.getter(a1);
}

void sub_23C801EFC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DatabaseValue.storage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23C7E56A4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

void static DatabaseValue.null.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
}

uint64_t DatabaseValue.Storage.value.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_23C801F74 + 4 * byte_23C912E10[a3]))();
}

uint64_t sub_23C801F74@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = MEMORY[0x24BEE4008];
  a2[4] = &protocol witness table for Int64;
  *a2 = result;
  return result;
}

uint64_t sub_23C801FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[3] = MEMORY[0x24BEE0D00];
  a3[4] = &protocol witness table for String;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C801FC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = MEMORY[0x24BDCDDE8];
  a3[4] = (uint64_t)&protocol witness table for Data;
  *a3 = a1;
  a3[1] = a2;
  return sub_23C7ED944(a1, a2);
}

double sub_23C801FE0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void static DatabaseValue.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

BOOL sub_23C802030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  return !a6 && v7 == v6;
}

void sub_23C802118(uint64_t a1)
{
  static DatabaseValue.Storage.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t DatabaseValue.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  sub_23C802224(a1, (uint64_t)v13);
  sub_23C7E79A8(&qword_25430CEB8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_23C7DB5CC(&v10, (uint64_t)v14);
    v4 = v15;
    v5 = v16;
    sub_23C7E7E34(v14, v15);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 24))(&v10, v4, v5);
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
    v7 = *((_QWORD *)&v10 + 1);
    v6 = v10;
    v8 = v11;
    result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
    result = sub_23C7E7A6C((uint64_t)&v10);
    v6 = 0;
    v7 = 0;
    v8 = -1;
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

uint64_t sub_23C802224(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BOOL DatabaseValue.isNull.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) == 4 && *(_OWORD *)v0 == 0;
}

void DatabaseValue.hashValue.getter()
{
  sub_23C7E3170();
  sub_23C911BBC();
  sub_23C7EDB00();
  sub_23C911BF8();
  sub_23C7E4C90();
}

void DatabaseValue.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23C8022FC()
{
  return sub_23C911BEC();
}

void sub_23C8023A0()
{
  sub_23C7E3170();
  sub_23C911BBC();
  sub_23C7EDB00();
  sub_23C911BF8();
  sub_23C7E4C90();
}

void DatabaseValue.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_23C802410()
{
  return sub_23C911880();
}

uint64_t static DatabaseValue.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  v4 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a2 + 16) = v4;
  return sub_23C7E56A4(v3, v2, v4);
}

void static DatabaseValue.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_23C802528()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  int v5;
  char v6;
  double v7;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;

  if (!v5)
  {
    sub_23C7E5640(v2, v3, 0);
    sub_23C7E19E0();
    v10 = v2 == v0;
LABEL_14:
    v6 = v10;
    return v6 & 1;
  }
  if (v5 != 1)
  {
    sub_23C7E56A4(v0, v1, v5);
    v11 = sub_23C7DFDFC();
    sub_23C7E5640(v11, v12, v4);
    sub_23C7E5640(v0, v1, v5);
    v6 = 0;
    return v6 & 1;
  }
  sub_23C7E5640(v2, v3, 0);
  sub_23C7E97C0();
  v6 = 0;
  v7 = trunc(*(double *)&v0);
  if (*(double *)&v0 > -9.22337204e18 && *(double *)&v0 < 9.22337204e18 && v7 == *(double *)&v0)
  {
    v10 = v2 == (uint64_t)*(double *)&v0;
    goto LABEL_14;
  }
  return v6 & 1;
}

uint64_t DatabaseValue.sqlExpression.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  char v9;
  _BYTE __src[168];

  v3 = *(_QWORD *)(v1 + 8);
  v8[0] = *(_QWORD *)v1;
  v8[1] = v3;
  v4 = *(_BYTE *)(v1 + 16);
  v9 = v4;
  sub_23C8027EC((uint64_t)v8);
  sub_23C800B48(v8, __src);
  memcpy(a1, __src, 0xA3uLL);
  v5 = sub_23C7DFDFC();
  return sub_23C7E56A4(v5, v6, v4);
}

uint64_t sub_23C8027EC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x100000u) >> 16;
  return result;
}

void sub_23C802858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_23C910B18();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v4 = *(unsigned __int8 *)(a1 + 16);
  sub_23C7E79A8(&qword_256BCBD28);
  __asm { BR              X9 }
}

BOOL sub_23C80290C()
{
  char v0;
  uint64_t v1;
  double v2;
  unint64_t v3;
  int v4;
  BOOL v5;

  switch(v4)
  {
    case 0:
      v5 = v1 < *(_QWORD *)&v2;
      break;
    case 1:
      v5 = (double)v1 < v2;
      break;
    case 2:
    case 3:
      sub_23C7E5640(v1, v3, v0);
      v5 = 1;
      break;
    default:
      v5 = 0;
      break;
  }
  return v5;
}

unint64_t sub_23C802C18(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  v33 = v7;
  v8 = 4 * v7;
  v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = 4 << v9;
  v27 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v28 = a4 & 0xFFFFFFFFFFFFFFLL;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  v30 = v8;
  v31 = v11;
  v29 = 4 * v11;
  v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v26 = a2 & 0xFFFFFFFFFFFFFFLL;
  v14 = 15;
  v15 = 15;
  while (v30 != v15 >> 14)
  {
    v16 = v15;
    if ((v15 & 0xC) == v10)
      v16 = sub_23C803288(v15, a3, a4);
    v17 = v16 >> 16;
    if (v16 >> 16 >= v33)
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      result = sub_23C803288(v14, a1, a2);
      goto LABEL_50;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      v19 = sub_23C910FBC();
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v34 = a3;
      v35 = v28;
      v19 = *((_BYTE *)&v34 + v17);
    }
    else
    {
      v18 = v27;
      if ((a3 & 0x1000000000000000) == 0)
        v18 = sub_23C9116A0();
      v19 = *(_BYTE *)(v18 + v17);
    }
    if ((v15 & 0xC) == v10)
    {
      v15 = sub_23C803288(v15, a3, a4);
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_22:
        v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_27;
      }
    }
    else if ((a4 & 0x1000000000000000) == 0)
    {
      goto LABEL_22;
    }
    if (v33 <= v15 >> 16)
      goto LABEL_61;
    v15 = sub_23C910FA4();
LABEL_27:
    if (v29 == v14 >> 14)
      return 0;
    v17 = v14 & 0xC;
    v20 = v14;
    if (v17 == v13)
      v20 = sub_23C803288(v14, a1, a2);
    v21 = v20 >> 16;
    if (v20 >> 16 >= v31)
      goto LABEL_60;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v23 = sub_23C910FBC();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v34 = a1;
      v35 = v26;
      v23 = *((_BYTE *)&v34 + v21);
    }
    else
    {
      v22 = v25;
      if ((a1 & 0x1000000000000000) == 0)
        v22 = sub_23C9116A0();
      v23 = *(_BYTE *)(v22 + v21);
    }
    if (v17 == v13)
    {
      v14 = sub_23C803288(v14, a1, a2);
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_42:
        if (v31 <= v14 >> 16)
          goto LABEL_62;
        v14 = sub_23C910FA4();
        goto LABEL_44;
      }
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      goto LABEL_42;
    }
    v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_44:
    if (v19 < v23)
      return 1;
    if (v23 < v19)
      return 0;
  }
  if (v29 == v14 >> 14)
    return 0;
  v17 = v14 & 0xC;
  result = v14;
  if (v17 == v13)
    goto LABEL_63;
LABEL_50:
  if (v31 <= result >> 16)
  {
    __break(1u);
    goto LABEL_65;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_65:
    result = sub_23C910FBC();
    goto LABEL_54;
  }
  if (!(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    result = sub_23C9116A0();
LABEL_54:
  if (v17 == v13)
  {
    result = sub_23C803288(v14, a1, a2);
    v14 = result;
    if ((a2 & 0x1000000000000000) == 0)
      return 1;
LABEL_56:
    if (v31 > v14 >> 16)
    {
      sub_23C910FA4();
      return 1;
    }
    __break(1u);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_56;
    return 1;
  }
  return result;
}

uint64_t sub_23C802FAC(uint64_t a1, uint64_t a2, uint64_t n, sqlite3_stmt *a4, int a5)
{
  int v5;
  sqlite3_stmt *v6;
  int v7;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  if (n < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = n;
  if (n > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = a5;
  v6 = a4;
  if (qword_25430D368 != -1)
LABEL_7:
    swift_once();
  return sqlite3_bind_blob(v6, v5, &v9, v7, (void (__cdecl *)(void *))qword_254310430);
}

unint64_t sub_23C8030E4()
{
  unint64_t result;

  result = qword_25430B270;
  if (!qword_25430B270)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseValue, &type metadata for DatabaseValue);
    atomic_store(result, (unint64_t *)&qword_25430B270);
  }
  return result;
}

__n128 initializeWithTake for Statement.TransactionEffect(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValue()
{
  return &type metadata for DatabaseValue;
}

void _s12GRDBInternal13DatabaseValueV7StorageOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  sub_23C7E40A4(a1, a2);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  v8 = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v2 + 16) = v5;
  sub_23C7E5640(v6, v7, v8);
  sub_23C7DB3A0();
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C803208(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_23C803220(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValue.Storage()
{
  return &type metadata for DatabaseValue.Storage;
}

unint64_t sub_23C803248()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256BCBD30[0];
  if (!qword_256BCBD30[0])
  {
    v1 = sub_23C910B18();
    result = MEMORY[0x242626100](MEMORY[0x24BDCDD80], v1);
    atomic_store(result, qword_256BCBD30);
  }
  return result;
}

uint64_t sub_23C803288(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23C910FEC();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x242624BDC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t ValueObservation.removeDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7E8130();
  v8 = (_QWORD *)swift_allocObject();
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v8[2] = v9;
  v8[3] = v10;
  v8[4] = a1;
  v8[5] = a2;
  v12 = type metadata accessor for ValueReducers.RemoveDuplicates(0, v9, v10, v11);
  swift_retain();
  v13 = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.RemoveDuplicates<A>, v12);
  sub_23C83B78C((uint64_t)sub_23C80346C, (uint64_t)v8, a3, v12, v13, a4);
  return sub_23C7E9004();
}

uint64_t sub_23C8033A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  sub_23C803478((uint64_t)v12, a2, a3, a4, a5, a6);
  return swift_retain();
}

uint64_t sub_23C803448()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C80346C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C8033A4(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_23C803478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  _QWORD *v15;

  v11 = type metadata accessor for ValueReducers.RemoveDuplicates(0, a4, a5, a4);
  v12 = a6 + *(int *)(v11 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DE70C(v12, 1, 1, AssociatedTypeWitness);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v15 = (_QWORD *)(a6 + *(int *)(v11 + 40));
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t type metadata accessor for ValueReducers.RemoveDuplicates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueReducers.RemoveDuplicates);
}

uint64_t ValueObservation<>.removeDuplicates()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7E8130();
  v6 = (_QWORD *)swift_allocObject();
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v6[2] = v7;
  v6[3] = v8;
  v6[4] = a2;
  v10 = type metadata accessor for ValueReducers.RemoveDuplicates(0, v7, v8, v9);
  v11 = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.RemoveDuplicates<A>, v10);
  sub_23C83B78C((uint64_t)sub_23C8036C0, (uint64_t)v6, a1, v10, v11, a3);
  return sub_23C7E9004();
}

uint64_t sub_23C8035D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  _QWORD *v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = AssociatedTypeWitness;
  return sub_23C803478((uint64_t)v10, (uint64_t)sub_23C804628, (uint64_t)v13, a2, a3, a5);
}

uint64_t sub_23C8036B4()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C8036C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C8035D8(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_23C8036CC()
{
  swift_getAssociatedTypeWitness();
  return sub_23C910E54() & 1;
}

uint64_t ValueReducers.RemoveDuplicates._fetch(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ValueReducers.RemoveDuplicates._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v38 = a2;
  v7 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23C9114E4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v35 - v15;
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v37 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v35 - v19;
  v21 = a1;
  v22 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v21, v6, v7);
  if (sub_23C7DE718((uint64_t)v16, 1, AssociatedTypeWitness) != 1)
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v23(v20, v16, AssociatedTypeWitness);
    v24 = v38;
    v25 = v22 + *(int *)(v38 + 36);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v25, v9);
    v26 = sub_23C7DE718((uint64_t)v13, 1, AssociatedTypeWitness);
    v36 = (void (*)(uint64_t, char *, uint64_t))v23;
    if (v26 == 1)
    {
      v27 = *(void (**)(char *, uint64_t))(v10 + 8);
      v27(v13, v9);
      v28 = v39;
    }
    else
    {
      v29 = v37;
      v23(v37, v13, AssociatedTypeWitness);
      v30 = (*(uint64_t (**)(char *, char *))(v22 + *(int *)(v24 + 40)))(v29, v20);
      v28 = v39;
      v31 = *(void (**)(char *, uint64_t))(v39 + 8);
      v31(v29, AssociatedTypeWitness);
      if ((v30 & 1) != 0)
      {
        v31(v20, AssociatedTypeWitness);
        goto LABEL_7;
      }
      v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    }
    v27((char *)v25, v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v25, v20, AssociatedTypeWitness);
    sub_23C7E6198(v25, 0);
    v33 = v40;
    v36(v40, v20, AssociatedTypeWitness);
    v32 = 0;
    return sub_23C7E6198(v33, v32);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
LABEL_7:
  v32 = 1;
  v33 = v40;
  return sub_23C7E6198(v33, v32);
}

uint64_t sub_23C8039E0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.RemoveDuplicates<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C803A0C(uint64_t a1, uint64_t a2)
{
  return ValueReducers.RemoveDuplicates._fetch(_:)(a1, a2);
}

uint64_t sub_23C803A24()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C803A2C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    v0 = sub_23C9114E4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_23C803AF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v7 + v10;
  if (*(_DWORD *)(v9 + 84))
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  v15 = (*(_DWORD *)(v6 + 80) | v10) & 0x100000;
  if (v14 > 7 || v15 != 0 || ((v13 + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    v19 = AssociatedTypeWitness;
    v20 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v21 = (const void *)(((unint64_t)a2 + v12) & v20);
    if (sub_23C7DE718((uint64_t)v21, 1, v19))
    {
      memcpy((void *)(((unint64_t)a1 + v12) & v20), v21, v13);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v20, v21, v19);
      sub_23C7DE70C(((unint64_t)a1 + v12) & v20, 0, 1, v19);
    }
    v23 = (_QWORD *)(((unint64_t)v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    v25 = (_QWORD *)(((((unint64_t)a1 + v12) & v20) + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v23;
    v25[1] = v24;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23C803C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!sub_23C7DE718(v7, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  return swift_release();
}

uint64_t sub_23C803D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (uint64_t)v10 + v15 + 7;
  v17 = (uint64_t *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v17;
  v18 = v17[1];
  v20 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  *v20 = v19;
  v20[1] = v18;
  swift_retain();
  return a1;
}

uint64_t sub_23C803E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness);
  v12 = sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness);
  if ((_DWORD)v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v13);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  v15 = (_QWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C803FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  *(_OWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C8040E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v6 + v9 + a1) & ~v9);
  v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness);
  v12 = sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness);
  if ((_DWORD)v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v13);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  *(_OWORD *)(((unint64_t)v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23C804254(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (v12 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  if ((_DWORD)v10)
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  if (!a2)
    return 0;
  v14 = AssociatedTypeWitness;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = *(_QWORD *)(v6 + 64) + v15;
  v17 = v13 + 7;
  if (v12 < a2)
  {
    if (((((v17 + (v16 & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v12 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v12)
    return sub_23C7DE718(a1, v7, v5);
  v22 = (v16 + a1) & ~v15;
  if (v11 == v12)
  {
    if (v10 < 2)
      return 0;
    v24 = sub_23C7DE718(v22, v10, v14);
    if (v24 >= 2)
      return v24 - 1;
    else
      return 0;
  }
  else
  {
    v23 = *(_QWORD *)((v17 + v22) & 0xFFFFFFFFFFFFF8);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    return (v23 + 1);
  }
}

void sub_23C80441C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v16 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v16;
  v15 = *(_QWORD *)(v7 + 64) + v14;
  if (v13 < a3)
  {
    if ((((_DWORD)v16 + 7 + (v15 & ~(_DWORD)v14)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v17 = a3 - v13 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v9 = v18;
    else
      v9 = 0;
  }
  if (a2 > v13)
  {
    if ((((_DWORD)v16 + 7 + (v15 & ~(_DWORD)v14)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v19 = ~v13 + a2;
      bzero(a1, ((v16 + 7 + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

void sub_23C804568(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *(_BYTE *)(v7 + v11) = 0;
  if ((_DWORD)v8)
  {
    if ((_DWORD)v10 == a3)
    {
      v12 = v7;
      v13 = v8;
      a1 = v10;
      a2 = v9;
LABEL_6:
      sub_23C7DE70C(v12, v13, a1, a2);
      return;
    }
    v12 = (v5 + v7) & v6;
    if (v3 == a3)
    {
      v13 = (v8 + 1);
      goto LABEL_6;
    }
    v14 = (_QWORD *)((v4 + v12) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0)
    {
      v15 = v8 ^ 0x80000000;
      v14[1] = 0;
    }
    else
    {
      v15 = (v8 - 1);
    }
    *v14 = v15;
  }
}

uint64_t sub_23C80461C()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C804628()
{
  return sub_23C8036CC();
}

void NSDate.databaseValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C7E886C();
  sub_23C7DFB5C();
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7DE944();
  sub_23C910B60();
  if (qword_25430B418 != -1)
    swift_once();
  v5 = (void *)qword_25430B410;
  v6 = (void *)sub_23C910B3C();
  v7 = objc_msgSend(v5, sel_stringFromDate_, v6);

  v8 = sub_23C910E78();
  v10 = v9;

  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = 2;
  sub_23C7EC594(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_23C7DEEA8();
}

void Date.databaseValue.getter(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_25430B418 != -1)
    swift_once();
  v2 = (void *)qword_25430B410;
  v3 = (void *)sub_23C910B3C();
  v4 = objc_msgSend(v2, sel_stringFromDate_, v3);

  v5 = sub_23C910E78();
  v7 = v6;

  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = 2;
}

uint64_t static NSDate.fromDatabaseValue(_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  char v13;

  sub_23C7E79A8(&qword_25430CEB0);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23C7E40C8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE95C();
  v9 = v8 - v7;
  LOBYTE(v7) = *((_BYTE *)a1 + 16);
  v12 = *a1;
  v13 = v7;
  static Date.fromDatabaseValue(_:)((uint64_t)&v12, v2);
  sub_23C7E07A0(v2, 1, v5);
  if (v10)
  {
    sub_23C7E7938(v2, &qword_25430CEB0);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v2, v5);
    sub_23C8901F8(v9, v1, (uint64_t)&v12);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    return v12;
  }
}

void static Date.fromDatabaseValue(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7E79A8(&qword_25430B238);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE944();
  v7 = sub_23C7E40E4();
  sub_23C7E0790();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v24[-v12];
  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned __int8 *)(a1 + 16);
  if (v16 != 3)
  {
    if (v16 == 2)
    {
      swift_bridgeObjectRetain();
      v17 = v14;
      goto LABEL_6;
    }
LABEL_8:
    sub_23C7DE70C(v2, 1, 1, v7);
    goto LABEL_9;
  }
  sub_23C7ED944(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23C910EA8();
  v17 = sub_23C910E90();
  v19 = v18;
  sub_23C7E5640(v14, v15, 3);
  if (!v19)
    goto LABEL_8;
  v15 = v19;
LABEL_6:
  sub_23C805D20(v17, v15, v2);
  swift_bridgeObjectRelease();
  sub_23C7E07A0(v2, 1, v7);
  if (!v20)
  {
    sub_23C805E24(v2, (uint64_t)v13);
    sub_23C805E68((uint64_t)v13, (uint64_t)v11);
    Date.init(databaseDateComponents:)((uint64_t)v11, a2);
    sub_23C805EAC((uint64_t)v13);
    goto LABEL_13;
  }
LABEL_9:
  sub_23C7E7938(v2, &qword_25430B238);
  if (v16 > 1)
  {
    v21 = sub_23C7E886C();
    v22 = a2;
    v23 = 1;
  }
  else
  {
    sub_23C910B48();
    v21 = sub_23C7E886C();
    v22 = a2;
    v23 = 0;
  }
  sub_23C7DE70C(v22, v23, 1, v21);
LABEL_13:
  sub_23C7DBCB0();
}

void sub_23C804AB0(uint64_t a1@<X8>)
{
  NSDate.databaseValue.getter(a1);
}

uint64_t sub_23C804AD0@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = static NSDate.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

void Date.init(databaseDateComponents:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_23C7E79A8(&qword_25430CEB0);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7DE96C();
  sub_23C7E886C();
  sub_23C7DFB5C();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7DE95C();
  v11 = v10 - v9;
  if (*(unsigned __int8 *)(a1 + *(int *)(sub_23C7E40E4() + 20)) > 3u)
  {
    sub_23C7E97D0();
    goto LABEL_8;
  }
  if (qword_25430B170 != -1)
    swift_once();
  v12 = sub_23C910C14();
  sub_23C805EE8(v12, (uint64_t)qword_25430B220);
  sub_23C910BF0();
  sub_23C7E07A0(v3, 1, v2);
  if (v13)
  {
    sub_23C7E97D0();
    sub_23C7E7938(v3, &qword_25430CEB0);
LABEL_8:
    v14 = 1;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11, v3, v2);
  sub_23C910B30();
  sub_23C910B24();
  sub_23C7E97D0();
  sub_23C7EC594(v11, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v14 = 0;
LABEL_9:
  sub_23C7E6198(a2, v14);
  sub_23C7DEEA8();
}

void Date.init(julianDay:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_23C7E79A8(&qword_25430CEB0);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23C7E40C8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE96C();
  sub_23C7E79A8(&qword_25430B2E8);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7DE944();
  sub_23C7E79A8(&qword_25430B168);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7DE95C();
  v12 = v11 - v10;
  v13 = sub_23C910A40();
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7DE95C();
  sub_23C7EDB0C();
  if (v15)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  sub_23C7E952C();
  if (!v17)
    goto LABEL_50;
  v18 = (uint64_t)v16 + 43200000;
  if (__OFADD__((uint64_t)v16, 43200000))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v19 = v18 / 86400000;
  v20 = ((double)(v18 / 86400000) + -1867216.25) / 36524.25;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v21 = v19 + 1 + (uint64_t)v20;
  if (__OFADD__(v19 + 1, (uint64_t)v20))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v22 = (uint64_t)v20 / 4;
  v23 = __OFSUB__(v21, v22);
  v24 = v21 - v22;
  if (v23)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v25 = v24 + 1524;
  if (__OFADD__(v24, 1524))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v26 = ((double)v25 + -122.1) / 365.25;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v27 = (uint64_t)v26;
  v28 = 36525 * ((uint64_t)v26 & 0x7FFF) / 0x64;
  v23 = __OFSUB__(v25, v28);
  v29 = v25 - v28;
  if (v23)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v30 = (double)v29 / 30.6001;
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v31 = (double)(uint64_t)v30 * 30.6001;
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v31 <= -9.22337204e18)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v31 >= 9.22337204e18)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (__OFSUB__(v29, (uint64_t)v31))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v43 = v7;
  v32 = (uint64_t)v30;
  v33 = (uint64_t)v30 - 13;
  if ((uint64_t)v30 <= 13)
  {
    v33 = v32 - 1;
    if (__OFSUB__(v32, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
  }
  if (v33 < 3)
  {
LABEL_29:
    if (!__OFADD__(v27, -4715))
      goto LABEL_30;
LABEL_82:
    __break(1u);
    return;
  }
  if (__OFADD__(v27, -4716))
  {
    __break(1u);
    goto LABEL_29;
  }
LABEL_30:
  sub_23C7EDB0C();
  if (v15)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  sub_23C7E952C();
  if (!v17)
    goto LABEL_71;
  v42 = v3;
  v46 = v2;
  v36 = (uint64_t)v35 % 3600;
  if (__OFSUB__((uint64_t)v35, 3600 * ((uint64_t)v35 / 3600)))
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v23 = __OFSUB__(v36, 60 * (v36 / 60));
  v37 = v36 % 60;
  if (v23)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v44 = v6;
  v45 = a1;
  v38 = v35 - (double)(uint64_t)v35 + (double)v37;
  v6 = sub_23C910C14();
  sub_23C7DE70C(v12, 1, 1, v6);
  v39 = sub_23C910C38();
  sub_23C7DE70C(v1, 1, 1, v39);
  sub_23C910A28();
  sub_23C9109D4();
  sub_23C9109EC();
  sub_23C9109A4();
  sub_23C9109BC();
  sub_23C910A04();
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v38 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v38 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  sub_23C910A1C();
  sub_23C7EDB0C();
  if (v15)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v40 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  sub_23C7E952C();
  if (!v17)
    goto LABEL_79;
  sub_23C91098C();
  if (qword_25430B170 != -1)
LABEL_80:
    swift_once();
  sub_23C805EE8(v6, (uint64_t)qword_25430B220);
  sub_23C910BF0();
  sub_23C7E07A0(v46, 1, v44);
  if (v15)
  {
    sub_23C7EDD84();
    sub_23C7E7938(v46, &qword_25430CEB0);
    v41 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v42, v46, v44);
    sub_23C910B30();
    sub_23C910B24();
    sub_23C7EC594(v42, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    sub_23C7EDD84();
    v41 = 0;
  }
  sub_23C7E6198(v45, v41);
}

void Date.init(sqliteStatement:index:)(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  sqlite3_stmt *v28;
  int v29;
  int v30;
  sqlite3_stmt *v31;
  int v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  sqlite3_stmt *v35;
  int v36;
  const unsigned __int8 *v37;
  uint64_t v38;
  sqlite3_stmt *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_23C7E79A8(&qword_25430CEB0);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v2);
  sub_23C7E16D4();
  v63 = v3;
  v4 = sub_23C910A40();
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7E16D4();
  v60 = v5;
  sub_23C7E79A8(&qword_25430B238);
  sub_23C7E0790();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v55 - v10;
  v64 = sub_23C7E40E4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7E66C8();
  v58 = v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v55 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v55 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v59 = (uint64_t)&v55 - v21;
  v22 = sub_23C7E886C();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  sub_23C7E66C8();
  v57 = v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v55 - v26;
  v28 = (sqlite3_stmt *)sub_23C7E8DA0();
  v30 = sqlite3_column_type(v28, v29);
  if ((v30 - 1) >= 2)
  {
    v56 = v23;
    if (v30 != 3)
    {
      v34 = 1;
      goto LABEL_15;
    }
    v55 = a1;
    v35 = (sqlite3_stmt *)sub_23C7E8DA0();
    v37 = sqlite3_column_text(v35, v36);
    if (v37)
    {
      v38 = (uint64_t)v37;
      v39 = (sqlite3_stmt *)sub_23C7E8DA0();
      v41 = sqlite3_column_bytes(v39, v40);
      SQLiteDateParser.components(cString:length:)(v38, v41, (uint64_t)v11);
      sub_23C805F00((uint64_t)v11, (uint64_t)v9);
      v42 = v64;
      sub_23C7E07A0((uint64_t)v9, 1, v64);
      if (v52)
      {
        v43 = &qword_25430B238;
        v44 = (uint64_t)v9;
      }
      else
      {
        sub_23C805E24((uint64_t)v9, (uint64_t)v17);
        v46 = v60;
        v45 = v61;
        v47 = v62;
        (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v60, v17, v62);
        v48 = v17[*(int *)(v42 + 20)];
        sub_23C805EAC((uint64_t)v17);
        v20[*(int *)(v42 + 20)] = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v20, v46, v47);
        v49 = v59;
        sub_23C805E24((uint64_t)v20, v59);
        v50 = v58;
        sub_23C805E68(v49, v58);
        v51 = v63;
        Date.init(databaseDateComponents:)(v50, v63);
        sub_23C7E07A0(v51, 1, v22);
        if (!v52)
        {
          v53 = v56;
          v54 = v57;
          v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
          v33(v57, v51, v22);
          sub_23C910B30();
          sub_23C910B24();
          sub_23C7EC594(v54, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
          sub_23C7E97D0();
          a1 = v55;
          goto LABEL_3;
        }
        sub_23C7E97D0();
        v43 = &qword_25430CEB0;
        v44 = v51;
      }
      sub_23C7E7938(v44, v43);
    }
    v34 = 1;
    a1 = v55;
    goto LABEL_15;
  }
  v31 = (sqlite3_stmt *)sub_23C7E8DA0();
  sqlite3_column_double(v31, v32);
  sub_23C910B48();
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
LABEL_3:
  v33(a1, (uint64_t)v27, v22);
  v34 = 0;
LABEL_15:
  sub_23C7E6198(a1, v34);
  sub_23C7DBCB0();
}

uint64_t sub_23C8055AC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  const unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = a4;
  v7 = sub_23C7E79A8(&qword_25430CEB0);
  MEMORY[0x24BDAC7A8](v7);
  v59 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23C910A40();
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23C7E79A8(&qword_25430B238);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v51 - v15;
  v17 = type metadata accessor for DatabaseDateComponents();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v54 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v51 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v51 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v55 = (uint64_t)&v51 - v27;
  v28 = *(_QWORD *)(a3 - 8);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v53 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v51 - v31;
  v33 = sqlite3_column_type(a1, a2);
  if ((v33 - 1) >= 2)
  {
    if (v33 == 3)
    {
      v52 = a3;
      v37 = sqlite3_column_text(a1, a2);
      if (v37)
      {
        v38 = (uint64_t)v37;
        v39 = sqlite3_column_bytes(a1, a2);
        SQLiteDateParser.components(cString:length:)(v38, v39, (uint64_t)v16);
        sub_23C805F00((uint64_t)v16, (uint64_t)v14);
        if (sub_23C7DE718((uint64_t)v14, 1, v17) != 1)
        {
          sub_23C805E24((uint64_t)v14, (uint64_t)v22);
          v42 = v56;
          v41 = v57;
          v43 = v58;
          (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v56, v22, v58);
          v44 = v22[*(int *)(v17 + 20)];
          sub_23C805EAC((uint64_t)v22);
          v25[*(int *)(v17 + 20)] = v44;
          (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v25, v42, v43);
          v45 = (uint64_t)v25;
          v46 = v55;
          sub_23C805E24(v45, v55);
          v47 = v54;
          sub_23C805E68(v46, v54);
          v48 = v59;
          Date.init(databaseDateComponents:)(v47, v59);
          a3 = v52;
          v49 = sub_23C7DE718(v48, 1, v52);
          v35 = v60;
          if (v49 == 1)
          {
            sub_23C805EAC(v46);
            sub_23C7E7938(v48, &qword_25430CEB0);
            v36 = 1;
            return sub_23C7DE70C(v35, v36, 1, a3);
          }
          v34 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
          v50 = v53;
          v34(v53, v48, a3);
          sub_23C910B30();
          sub_23C910B24();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v50, a3);
          sub_23C805EAC(v46);
          goto LABEL_3;
        }
        sub_23C7E7938((uint64_t)v14, &qword_25430B238);
      }
      v36 = 1;
      a3 = v52;
    }
    else
    {
      v36 = 1;
    }
    v35 = v60;
    return sub_23C7DE70C(v35, v36, 1, a3);
  }
  sqlite3_column_double(a1, a2);
  sub_23C910B48();
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v35 = v60;
LABEL_3:
  v34((char *)v35, (uint64_t)v32, a3);
  v36 = 0;
  return sub_23C7DE70C(v35, v36, 1, a3);
}

id sub_23C805990()
{
  id result;

  result = sub_23C8059AC();
  qword_25430B410 = (uint64_t)result;
  return result;
}

id sub_23C8059AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v0 = sub_23C7E79A8(&qword_25430B2E8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23C910BCC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  sub_23C805F9C(0xD000000000000017, 0x800000023C91C4D0, v7);
  sub_23C910BB4();
  v8 = (void *)sub_23C910BC0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, sel_setLocale_, v8);

  sub_23C910C20();
  v9 = sub_23C910C38();
  v10 = 0;
  if (sub_23C7DE718((uint64_t)v2, 1, v9) != 1)
  {
    v10 = (void *)sub_23C910C2C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v2, v9);
  }
  objc_msgSend(v7, sel_setTimeZone_, v10);

  return v7;
}

uint64_t sub_23C805B48()
{
  uint64_t v0;

  v0 = sub_23C910C14();
  sub_23C805F48(v0, qword_25430B220);
  sub_23C805EE8(v0, (uint64_t)qword_25430B220);
  return sub_23C805B90();
}

uint64_t sub_23C805B90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v0 = sub_23C7E79A8(&qword_25430B2E8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23C7E79A8(&qword_25430B218);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23C910BD8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCEF70], v6);
  sub_23C910BE4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_23C910BB4();
  v10 = sub_23C910BCC();
  sub_23C7DE70C((uint64_t)v5, 0, 1, v10);
  sub_23C910BFC();
  sub_23C910C20();
  v11 = sub_23C910C38();
  result = sub_23C7DE718((uint64_t)v2, 1, v11);
  if ((_DWORD)result != 1)
    return sub_23C910C08();
  __break(1u);
  return result;
}

uint64_t sub_23C805D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  size_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD v9[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_23C7E79A8(&qword_25430B238);
    return sub_23C911628();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v9[0] = a1;
    v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v5 = strlen((const char *)v9);
    v7 = (const char *)v9;
    v6 = a3;
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v4 = (const char *)sub_23C9116A0();
      if (!v4)
      {
        v5 = strlen(0);
        v6 = a3;
        v7 = 0;
        return SQLiteDateParser.components(cString:length:)((uint64_t)v7, v5, v6);
      }
    }
    v5 = strlen(v4);
    v6 = a3;
    v7 = v4;
  }
  return SQLiteDateParser.components(cString:length:)((uint64_t)v7, v5, v6);
}

uint64_t sub_23C805E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C805E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C805EAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C805EE8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_23C805F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430B238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_23C805F48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_23C805F88@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23C8B22D4(a1, a2);
}

void sub_23C805F9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)sub_23C910E6C();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setDateFormat_, v4);

}

uint64_t Database.add(transactionObserver:extent:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return sub_23C80848C(a1, a3, v3, ObjectType, a2);
}

uint64_t Database.remove(transactionObserver:)()
{
  swift_getObjectType();
  return sub_23C8080CC();
}

uint64_t sub_23C80606C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (a1 >> 62)
    goto LABEL_12;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_23C9117C0())
  {
    v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x242625290](v7 - 4, a1);
      else
        swift_retain();
      v8 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v9 = sub_23C80641C(a2, a3, 0, 1);
      swift_release();
      if ((v9 & 1) == 0)
      {
        ++v7;
        if (v8 != v6)
          continue;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t Database.afterNextTransactionCommit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _s13CommitHandlerCMa();
  v4 = sub_23C7DB388();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_23C7DB634();
  sub_23C8083D4();
  return swift_release();
}

BOOL static Database.TransactionObservationExtent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Database.TransactionObservationExtent.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t Database.TransactionObservationExtent.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

uint64_t sub_23C806270()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

void sub_23C8062B0()
{
  uint64_t v0;

  sub_23C806304(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) != 0);
}

void sub_23C8062C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  swift_bridgeObjectRelease();
  sub_23C8062B0();
}

void sub_23C8062E4(char a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 56) != (a1 & 1))
  {
    if (*(_BYTE *)(v1 + 56))
      sub_23C807458();
    else
      sub_23C807584();
  }
}

void sub_23C806304(char a1)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(v1 + 56) = a1;
  sub_23C8062E4(v2);
}

uint64_t sub_23C806314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for SavepointStack();
  v3 = sub_23C7DB388();
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = v4;
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v3;
  swift_unownedRetain();
  swift_release();
  return v1;
}

uint64_t sub_23C806368(uint64_t a1, uint64_t a2)
{
  swift_getObjectType();
  return sub_23C808390(a2) & 1;
}

uint64_t sub_23C8063BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  sub_23C7DF2E4();
  sub_23C7DF858();
  v4 = sub_23C7DB3D4();
  LOBYTE(a2) = sub_23C80606C(v4, a1, a2);
  sub_23C7DE934();
  return a2 & 1;
}

uint64_t sub_23C80641C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  char v12;

  if ((*(_BYTE *)(v4 + 17) & 1) != 0 || !sub_23C8076E8())
    return 0;
  v10 = v9;
  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a3, a4, ObjectType, v10);
  swift_unknownObjectRelease();
  return v12 & 1;
}

uint64_t sub_23C8064A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = sub_23C9117C0())
  {
    v8 = MEMORY[0x24BEE4AF8];
    v9 = 4;
    v17 = a5;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v10 = MEMORY[0x242625290](v9 - 4, a1);
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 8 * v9);
        swift_retain();
      }
      v11 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      if ((sub_23C80641C(a2, a3, a4, a5) & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F1C20();
          v8 = v14;
        }
        v12 = *(_QWORD *)(v8 + 16);
        if (v12 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7F1C20();
          v8 = v15;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        v13 = (_QWORD *)(v8 + 24 * v12);
        v13[5] = 0;
        v13[6] = 0;
        v13[4] = v10;
        a5 = v17;
      }
      else
      {
        swift_release();
      }
      ++v9;
      if (v11 == v7)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v8 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  sub_23C808700(a2, a3, a4, a5);
  return v8;
}

uint64_t sub_23C80664C(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_23C9117C0())
  {
    v19 = v3 & 0xC000000000000001;
    v5 = MEMORY[0x24BEE4AF8];
    v6 = 4;
    v17 = v4;
    v18 = v3;
    while (1)
    {
      if (v19)
      {
        v7 = MEMORY[0x242625290](v6 - 4, v3);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8 * v6);
        swift_retain();
      }
      v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      swift_retain();
      v9 = swift_bridgeObjectRetain();
      sub_23C80696C(v9);
      v11 = v10;
      if (*(_QWORD *)(v10 + 16))
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F1C20();
          v5 = v14;
        }
        v12 = *(_QWORD *)(v5 + 16);
        if (v12 >= *(_QWORD *)(v5 + 24) >> 1)
        {
          sub_23C7F1C20();
          v5 = v15;
        }
        *(_QWORD *)(v5 + 16) = v12 + 1;
        v13 = (_QWORD *)(v5 + 24 * v12);
        v13[4] = v7;
        v13[5] = v11;
        v13[6] = a2;
        v4 = v17;
        v3 = v18;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      ++v6;
      if (v8 == v4)
        goto LABEL_20;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  v5 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23C806814(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x242625290](v3, a1);
LABEL_7:
        v4 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        if (sub_23C8076E8())
        {
          swift_unknownObjectRelease();
          sub_23C9116AC();
          sub_23C9116DC();
          sub_23C9116E8();
          sub_23C9116B8();
        }
        else
        {
          swift_release();
        }
        ++v3;
        if (v4 == v2)
        {
          v5 = v7;
          goto LABEL_18;
        }
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = sub_23C9117C0();
      if (!v2)
        goto LABEL_17;
    }
    swift_retain();
    goto LABEL_7;
  }
LABEL_17:
  v5 = MEMORY[0x24BEE4AF8];
LABEL_18:
  swift_bridgeObjectRelease();
  return v5;
}

void sub_23C80696C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 56;
    v15 = MEMORY[0x24BEE4AF8];
    do
    {
      v5 = (unsigned __int8 *)(v4 + 32 * v3);
      v6 = v3;
      while (1)
      {
        if (v6 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v7 = *((_QWORD *)v5 - 3);
        v8 = *((_QWORD *)v5 - 2);
        v9 = *((_QWORD *)v5 - 1);
        v3 = v6 + 1;
        v10 = *v5;
        sub_23C8086A0(v7, v8, v9, *v5);
        if ((sub_23C80641C(v7, v8, v9, v10) & 1) != 0)
          break;
        sub_23C808700(v7, v8, v9, v10);
        v5 += 32;
        ++v6;
        if (v2 == v3)
          goto LABEL_13;
      }
      v11 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FD95C();
        v11 = v15;
      }
      v12 = *(_QWORD *)(v11 + 16);
      v13 = v12 + 1;
      if (v12 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_23C7FD95C();
        v13 = v12 + 1;
        v11 = v15;
      }
      *(_QWORD *)(v11 + 16) = v13;
      v15 = v11;
      v14 = v11 + 32 * v12;
      *(_QWORD *)(v14 + 32) = v7;
      *(_QWORD *)(v14 + 40) = v8;
      *(_QWORD *)(v14 + 48) = v9;
      *(_BYTE *)(v14 + 56) = v10;
      v4 = a1 + 56;
    }
    while (v2 - 1 != v6);
  }
LABEL_13:
  swift_release_n();
  swift_bridgeObjectRelease();
}

void sub_23C806B24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_23C8062C4(MEMORY[0x24BEE4AF8]);
  type metadata accessor for SchedulingWatchdog();
  v1 = sub_23C7E2FE0();
  if (!v1)
  {
    __break(1u);
    JUMPOUT(0x23C806BE8);
  }
  sub_23C8098CC(v1);
  sub_23C7DFA18();
  v2 = *(void **)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0;
  sub_23C7E7AAC(v2);
  sub_23C7DBBC0();
  if ((unint64_t)v2 >= 2)
  {
    if (v2 == (void *)2)
    {
      sub_23C807258();
    }
    else
    {
      sub_23C7E5DE8();
      sub_23C7E2840();
      v3 = v2;
      sub_23C7DFA18();
      sub_23C807258();
      swift_willThrow();
      sub_23C7DBBC0();
    }
  }
  else
  {
    sub_23C7DBBC0();
  }
  sub_23C7DEF1C();
}

uint64_t sub_23C806BF8(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  ValueMetadata *v74;
  _UNKNOWN **v75;

  v2 = (_QWORD *)result;
  v3 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
  {
    v74 = &type metadata for DatabaseEvent;
    v75 = &off_250D80CF8;
    *(_QWORD *)&v73 = sub_23C7DB388();
    v4 = v2[3];
    v5 = v2[4];
    sub_23C7E7E34(v2, v4);
    v6 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 24);
    swift_retain();
    v6(v2, v4, v5);
    v7 = *(_QWORD *)(v1 + 48);
    sub_23C7DB5CC(&v73, (uint64_t)&v70);
    *((_QWORD *)&v72 + 1) = v7;
    sub_23C7DF858();
    sub_23C7F1308();
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
    sub_23C7F1534();
    v9 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v9 + 16) = v8 + 1;
    v10 = (_OWORD *)(v9 + 48 * v8);
    v11 = v70;
    v12 = v72;
    v10[3] = v71;
    v10[4] = v12;
    v10[2] = v11;
    return swift_release();
  }
  v13 = *(_QWORD *)(v1 + 48);
  v66 = *(_QWORD *)(v13 + 16);
  if (v66)
  {
    v65 = v13 + 32;
    result = sub_23C7DC46C();
    v14 = 0;
    v63 = v13;
    v64 = v2;
    while (1)
    {
      if (v14 >= *(_QWORD *)(v13 + 16))
      {
        __break(1u);
        return result;
      }
      v15 = v65 + 24 * v14;
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(v15 + 16);
      sub_23C8092E8((uint64_t)v2, (uint64_t)&v70);
      if (!v16)
      {
        sub_23C7DC47C();
        goto LABEL_66;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v69 = v14;
      v67 = v17;
      v68 = v16;
      if (v18)
      {
        v19 = BYTE8(v72);
        sub_23C7DC47C();
        sub_23C7E76F8();
        swift_bridgeObjectRetain();
        v20 = (_BYTE *)(v16 + 56);
        while (1)
        {
          v22 = *((_QWORD *)v20 - 3);
          v21 = *((_QWORD *)v20 - 2);
          v23 = *v20;
          if (v19)
          {
            if (v19 == 1)
            {
              if (v23 == 1)
              {
                sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
                sub_23C7DB3B8();
                if (sub_23C809900() == v22 && v21 == v24)
                {
                  sub_23C7DE934();
                  v59 = sub_23C809920();
LABEL_64:
                  sub_23C808700(v59, v60, v61, v62);
LABEL_65:
                  v16 = v68;
                  sub_23C7DB398();
                  v13 = v63;
                  v2 = v64;
                  v14 = v69;
LABEL_66:
                  sub_23C80927C((uint64_t)&v70);
                  sub_23C7E13C4(v16);
                  sub_23C8070F4((uint64_t)v2);
                  goto LABEL_67;
                }
                v26 = sub_23C7E16E8();
                sub_23C7DE934();
                v27 = sub_23C809920();
                goto LABEL_29;
              }
            }
            else if (v23 == 2)
            {
              sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
              sub_23C7DB3B8();
              swift_bridgeObjectRetain();
              if (sub_23C809900() == v22 && v21 == v36)
              {
                sub_23C7DE934();
                v59 = sub_23C809934();
                goto LABEL_64;
              }
              v26 = sub_23C7E16E8();
              sub_23C7DE934();
              v27 = sub_23C809934();
              goto LABEL_29;
            }
          }
          else if (!*v20)
          {
            v32 = *((_QWORD *)&v71 + 1);
            v31 = v72;
            sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
            v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
            sub_23C7DB3B8();
            if (v33(v32, v31) == v22 && v21 == v34)
            {
              sub_23C7DE934();
              v59 = sub_23C80990C();
              goto LABEL_64;
            }
            v26 = sub_23C7E16E8();
            sub_23C7DE934();
            v27 = sub_23C80990C();
LABEL_29:
            sub_23C808700(v27, v28, v29, v30);
            if ((v26 & 1) != 0)
              goto LABEL_65;
          }
          v20 += 32;
          if (!--v18)
          {
            v16 = v68;
            sub_23C7DB398();
            v13 = v63;
            v2 = v64;
            v14 = v69;
            v17 = v67;
            goto LABEL_34;
          }
        }
      }
      sub_23C7DC47C();
      sub_23C7E76F8();
LABEL_34:
      v38 = *(_QWORD *)(v17 + 16);
      if (!v38)
        goto LABEL_66;
      v39 = BYTE8(v72);
      sub_23C7DEF00();
      v40 = (_BYTE *)(v17 + 56);
      while (1)
      {
        v42 = *((_QWORD *)v40 - 3);
        v41 = *((_QWORD *)v40 - 2);
        v43 = *((_QWORD *)v40 - 1);
        v44 = *v40;
        if (!v39)
          break;
        if (v39 == 1)
        {
          if (v44 != 1)
            goto LABEL_57;
          sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
          sub_23C7DEF00();
          if (sub_23C8098F4() == v42 && v41 == v45)
            goto LABEL_59;
          v47 = sub_23C7E8874();
          sub_23C7DE934();
          v48 = sub_23C7E6E30();
        }
        else
        {
          if (v44 != 2)
            goto LABEL_57;
          sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
          sub_23C7DEF00();
          sub_23C7DB3B8();
          if (sub_23C8098F4() == v42 && v41 == v57)
            goto LABEL_59;
          v47 = sub_23C7E8874();
          sub_23C7DE934();
          v48 = sub_23C7E6514();
        }
LABEL_56:
        sub_23C808700(v48, v49, v50, v51);
        if ((v47 & 1) != 0)
          goto LABEL_60;
LABEL_57:
        v40 += 32;
        if (!--v38)
        {
          swift_bridgeObjectRelease();
          v13 = v63;
          v2 = v64;
          v14 = v69;
          v16 = v68;
          goto LABEL_66;
        }
      }
      if (*v40)
        goto LABEL_57;
      v53 = *((_QWORD *)&v71 + 1);
      v52 = v72;
      sub_23C7E7E34(&v70, *((uint64_t *)&v71 + 1));
      v54 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 16);
      sub_23C7DEF00();
      if (v54(v53, v52) != v42 || v41 != v55)
        break;
LABEL_59:
      sub_23C7DE934();
      sub_23C808700(v42, v41, v43, v39);
LABEL_60:
      sub_23C7DB624();
      sub_23C80927C((uint64_t)&v70);
      sub_23C7E13C4(v68);
      v13 = v63;
      v2 = v64;
      v14 = v69;
LABEL_67:
      ++v14;
      result = sub_23C7DFA18();
      if (v14 == v66)
        return sub_23C7E072C();
    }
    v47 = sub_23C7E8874();
    sub_23C7DE934();
    v48 = sub_23C7E68B4();
    goto LABEL_56;
  }
  return result;
}

void sub_23C8070F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  if ((*(_BYTE *)(v1 + 17) & 1) != 0 || !sub_23C8076E8())
  {
    sub_23C7DB3A0();
  }
  else
  {
    v4 = v3;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, ObjectType, v4);
    swift_unknownObjectRelease();
  }
}

void DatabaseEvent.copy()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_23C7E7E34(v0, v1);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 24))(v0, v1, v2);
  sub_23C7DB3A0();
}

uint64_t sub_23C8071A0()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  result = sub_23C8076E8();
  if (result)
  {
    v2 = v1;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 24))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_23C8071F8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = sub_23C7EFA48();
  v3 = v2;
  if (v0 == 1)
  {
    if (v1)
    {
      sub_23C7E578C();
LABEL_5:
      ObjectType = swift_getObjectType();
      sub_23C8098BC(ObjectType, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
      sub_23C7DE984();
      return;
    }
  }
  else if (v1)
  {
    goto LABEL_5;
  }
  sub_23C7DF5B4();
}

void sub_23C807258()
{
  uint64_t v0;
  char v1;
  char v2;
  unint64_t v3;
  uint64_t v4;

  sub_23C809894();
  v2 = v1;
  sub_23C7DC47C();
  sub_23C7EC4D8();
  sub_23C7DFA18();
  if ((v2 & 1) == 0)
    goto LABEL_9;
  sub_23C7DF2E4();
  v3 = *(_QWORD *)(v0 + 40);
  if (v3 >> 62)
  {
    sub_23C7DC46C();
    v4 = sub_23C7DBCE0();
    if (v4)
      goto LABEL_4;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_23C7DC46C();
  if (!v4)
  {
LABEL_8:
    sub_23C7E072C();
LABEL_9:
    sub_23C7EBE64();
    sub_23C7DB648();
    return;
  }
LABEL_4:
  if (v4 >= 1)
  {
    while ((v3 & 0xC000000000000001) == 0)
    {
      sub_23C7DC47C();
      sub_23C8098AC();
      sub_23C80732C();
      sub_23C7DFA18();
      swift_release();
    }
    sub_23C7EF8F8();
  }
  __break(1u);
}

void sub_23C80732C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = sub_23C7EFA48();
  v3 = v2;
  if (v0 == 1)
  {
    if (v1)
    {
      sub_23C7E578C();
LABEL_5:
      ObjectType = swift_getObjectType();
      sub_23C8098BC(ObjectType, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
      sub_23C7DE984();
      return;
    }
  }
  else if (v1)
  {
    goto LABEL_5;
  }
  sub_23C7DF5B4();
}

void *sub_23C80738C()
{
  uint64_t v0;
  void *v1;
  sqlite3 *v2;
  sqlite3 *v3;

  sub_23C7E6BD4();
  sub_23C7E07C4();
  v2 = *(sqlite3 **)(v0 + 16);
  sub_23C7DE904();
  sqlite3_commit_hook(v2, (int (__cdecl *)(void *))sub_23C7EF72C, v1);
  sub_23C7E6BD4();
  sub_23C7E07C4();
  v3 = *(sqlite3 **)(v0 + 16);
  sub_23C7DE904();
  return sqlite3_rollback_hook(v3, (void (__cdecl *)(void *))sub_23C807454, v1);
}

uint64_t sub_23C80740C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 32);
    swift_retain();
    if ((unint64_t)v2 <= 2)
    {
      *(_QWORD *)(v1 + 32) = 2;
      sub_23C7E2830(v2);
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C807458()
{
  uint64_t v0;
  void *v1;
  sqlite3 *v2;

  sub_23C7E6BD4();
  sub_23C7DF2E4();
  v2 = *(sqlite3 **)(v0 + 16);
  sub_23C7DE904();
  sqlite3_update_hook(v2, (void (__cdecl *)(void *, int, const char *, const char *, sqlite3_int64))sub_23C807580, v1);
  sub_23C7DF304();
}

uint64_t sub_23C80749C(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  _QWORD v10[5];
  char v11;
  uint64_t v12;

  if (result)
  {
    result = swift_retain();
    switch(a2)
    {
      case 9:
        v9 = 1;
        goto LABEL_8;
      case 18:
        v9 = 0;
LABEL_8:
        v10[3] = &type metadata for MetalDatabaseEventImpl;
        v10[4] = &off_250D84FB8;
        v10[0] = a3;
        v10[1] = a4;
        v11 = v9;
        v12 = a5;
        sub_23C806BF8((uint64_t)v10);
        swift_release();
        return sub_23C80927C((uint64_t)v10);
      case 23:
        v9 = 2;
        goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

GRDBInternal::DatabaseEvent::Kind_optional __swiftcall DatabaseEvent.Kind.init(rawValue:)(Swift::Int32 rawValue)
{
  char *v1;
  char v2;
  char v3;

  if (rawValue == 23)
    v2 = 2;
  else
    v2 = 3;
  if (rawValue == 18)
    v2 = 0;
  if (rawValue == 9)
    v3 = 1;
  else
    v3 = v2;
  *v1 = v3;
  return (GRDBInternal::DatabaseEvent::Kind_optional)rawValue;
}

void *sub_23C807584()
{
  uint64_t v0;
  sqlite3 *v1;

  sub_23C7E6BD4();
  sub_23C7DF2E4();
  v1 = *(sqlite3 **)(v0 + 16);
  sub_23C7DE904();
  return sqlite3_update_hook(v1, 0, 0);
}

uint64_t sub_23C8075C8()
{
  uint64_t v0;

  swift_unownedRelease();
  swift_release();
  sub_23C7E2830(*(id *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23C807604()
{
  sub_23C8075C8();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall TransactionObserver.stopObservingDatabaseChangesUntilNextTransaction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  sub_23C7E40EC();
  v6 = sub_23C7E3188();
  if (v6 && (v7 = *(_QWORD *)(v6 + 24), sub_23C7DC47C(), swift_release(), v7))
  {
    sub_23C808020(v3, v7, v5, v4);
    swift_release();
  }
  else
  {
    sub_23C7DC484();
    sub_23C9117B4();
    __break(1u);
  }
}

uint64_t sub_23C8076E8()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 40))
    v1 = *(_QWORD *)(v0 + 40);
  else
    v1 = MEMORY[0x2426262A4](v0 + 24);
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_23C80773C()
{
  uint64_t v0;

  sub_23C809258(v0 + 24);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t DatabaseEventKind.tableName.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t DatabaseEvent.Kind.rawValue.getter()
{
  char *v0;

  return dword_23C91342C[*v0];
}

BOOL sub_23C8077AC(char *a1, char *a2)
{
  return sub_23C839770(*a1, *a2);
}

void sub_23C8077B8()
{
  sub_23C8E7DC0();
}

void sub_23C8077C0()
{
  sub_23C8E8294();
}

void sub_23C8077C8()
{
  sub_23C8E8488();
}

GRDBInternal::DatabaseEvent::Kind_optional sub_23C8077D0(Swift::Int32 *a1)
{
  return DatabaseEvent.Kind.init(rawValue:)(*a1);
}

uint64_t sub_23C8077D8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = DatabaseEvent.Kind.rawValue.getter();
  *a1 = result;
  return result;
}

void DatabaseEvent.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

void DatabaseEvent.databaseName.getter()
{
  uint64_t v0;

  sub_23C7DB660();
  sub_23C7E6A6C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_23C7DB3A0();
}

void DatabaseEvent.tableName.getter()
{
  uint64_t v0;

  sub_23C7DB660();
  sub_23C7E6A6C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16));
  sub_23C7DB3A0();
}

uint64_t DatabaseEvent.rowID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_23C807858(uint64_t result)
{
  if (result)
    return sub_23C910F74();
  __break(1u);
  return result;
}

uint64_t sub_23C807864(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return sub_23C910F74();
  __break(1u);
  return result;
}

uint64_t sub_23C807874@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;

  if (a2)
  {
    v6 = *(_BYTE *)(result + 40);
    v7 = *(_QWORD *)(result + 48);
    result = sub_23C910F74();
    if (a3)
    {
      v9 = result;
      v10 = v8;
      v11 = sub_23C910F74();
      v13 = v12;
      v16 = &type metadata for CopiedDatabaseEventImpl;
      v17 = &off_250D85370;
      v14 = (_QWORD *)swift_allocObject();
      *(_QWORD *)&v15 = v14;
      v14[2] = v9;
      v14[3] = v10;
      v14[4] = v11;
      v14[5] = v13;
      *(_BYTE *)(a4 + 40) = v6;
      *(_QWORD *)(a4 + 48) = v7;
      return sub_23C7DB5CC(&v15, a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23C807934()
{
  uint64_t *v0;

  return sub_23C807858(*v0);
}

uint64_t sub_23C80793C()
{
  uint64_t *v0;

  return sub_23C807864(*v0, v0[1]);
}

uint64_t sub_23C807944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C807874(a1, *v2, v2[1], a2);
}

uint64_t sub_23C80794C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23C8092E8(a1, a2);
}

uint64_t sub_23C807954()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C807980()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C8079AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23C80794C(a1, a2);
}

BOOL sub_23C8079B8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) == 0;
}

void sub_23C8079CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = sub_23C910E18();
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  sub_23C7F126C();
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  sub_23C7F14DC();
  v6 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  v7 = (_QWORD *)(v6 + 24 * v5);
  v7[4] = v1;
  v7[5] = v3;
  v7[6] = v4;
  sub_23C7DF5B4();
}

void sub_23C807A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_23C910E18();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v1;
    do
    {
      v7 = v4 + 24 * v5;
      v8 = *(_QWORD *)(v7 + 8) == v6 && *(_QWORD *)(v7 + 16) == v3;
      if (v8 || (sub_23C7E16E8() & 1) != 0)
        break;
      v9 = *(_QWORD *)(v0 + 24);
      if (!*(_QWORD *)(v9 + 16))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 24) = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C890954();
        v9 = v12;
        *(_QWORD *)(v0 + 24) = v12;
      }
      v11 = *(_QWORD *)(v9 + 16);
      if (!v11)
        goto LABEL_18;
      sub_23C8098D8(v11);
      *(_QWORD *)(v0 + 24) = v9;
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(v0 + 24);
      v5 = *(_QWORD *)(v4 + 16);
    }
    while (v5);
  }
  sub_23C7DB624();
  sub_23C842B94(*(_QWORD *)(v0 + 24));
  if (!v14)
    goto LABEL_16;
  v15 = v13;
  v16 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  swift_bridgeObjectRelease();
  if (!__OFSUB__(v16, v15))
  {
    sub_23C807B58(v16 - v15);
LABEL_16:
    sub_23C7DF5B4();
    return;
  }
LABEL_19:
  __break(1u);
}

void sub_23C807B20()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    sub_23C807FC0();
    if (!v1)
      sub_23C890678();
  }
  else
  {
    __break(1u);
  }
}

void sub_23C807B58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*v1 + 16);
      v3 = sub_23C8DEA48(v2, -a1, 0, *v1);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return;
      }
      if (v2 >= v3)
      {
        sub_23C9008E8();
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

void sub_23C807BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_23C910E18();
  v3 = v2;
  v6 = *(_QWORD *)(v0 + 24);
  v5 = (uint64_t *)(v0 + 24);
  v4 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v1;
    do
    {
      v9 = v4 + 24 * v7;
      v10 = *(_QWORD *)(v9 + 8) == v8 && *(_QWORD *)(v9 + 16) == v3;
      if (v10 || (sub_23C7E16E8() & 1) != 0)
        break;
      v11 = *v5;
      if (!*(_QWORD *)(*v5 + 16))
      {
        __break(1u);
LABEL_17:
        __break(1u);
        return;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C890954();
        v11 = v14;
        *v5 = v14;
      }
      v13 = *(_QWORD *)(v11 + 16);
      if (!v13)
        goto LABEL_17;
      sub_23C8098D8(v13);
      *v5 = v11;
      swift_bridgeObjectRelease();
      v4 = *v5;
      v7 = *(_QWORD *)(*v5 + 16);
    }
    while (v7);
  }
  sub_23C7DB624();
  if (*(_QWORD *)(*v5 + 16))
  {
    sub_23C807B20();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C7DF5B4();
  }
}

uint64_t sub_23C807C9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23C807CC0()
{
  sub_23C807C9C();
  return swift_deallocClassInstance();
}

uint64_t sub_23C807CE0()
{
  return 0;
}

uint64_t sub_23C807CE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_23C807D08()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23C807D38(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = isStackAllocationSafe;
  if ((*(_BYTE *)(isStackAllocationSafe + 32) & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    sub_23C7DF2F4();
    sub_23C7DB3C0();
    if (v1)
      swift_willThrow();
    else
      return v3;
  }
  else
  {
    v4 = swift_slowAlloc();
    sub_23C7DF2F4();
    sub_23C7DB3C0();
    v2 = v5;
    MEMORY[0x2426261F0](v4, -1, -1);
  }
  return v2;
}

void sub_23C807E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v5 << 6);
LABEL_20:
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 72);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = (unsigned __int8 *)(v16 + 56);
      while (1)
      {
        v19 = *v18;
        v18 += 32;
        if (v19 == 1)
          break;
        if (!--v17)
          goto LABEL_24;
      }
    }
    else
    {
LABEL_24:
      *(_QWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_27:
        sub_23C88D864(a1, a2, v4);
        return;
      }
    }
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v13 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v5;
  if (v14)
    goto LABEL_19;
  v5 = v13 + 1;
  if (v13 + 1 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_19;
  v5 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_20;
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_27;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
}

void sub_23C807FC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C890954();
    v1 = v3;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    *(_QWORD *)(v1 + 16) = v2 - 1;
    *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23C808020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[5];

  swift_beginAccess();
  v7 = *(_QWORD *)(a2 + 40);
  v10[2] = a1;
  v10[3] = a4;
  swift_bridgeObjectRetain();
  v8 = sub_23C825144((uint64_t (*)(uint64_t *))sub_23C8095BC, (uint64_t)v10, v7);
  result = swift_bridgeObjectRelease();
  if (v8)
  {
    *(_BYTE *)(v8 + 17) = 1;
    swift_retain();
    sub_23C89028C((uint64_t *)(a2 + 48), v8);
    sub_23C8062B0();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8080CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  sub_23C809894();
  v1 = v0;
  sub_23C7E40EC();
  if ((sub_23C7E2040() & 1) != 0)
  {
    sub_23C7DF5C4();
    sub_23C7E07B4();
    sub_23C7E253C();
    sub_23C7EC59C();
    sub_23C7E8DAC();
    sub_23C7E0408();
    sub_23C7E07B4();
    sub_23C8098EC();
    sub_23C7EC59C();
    sub_23C7ECB78();
    sub_23C7E23F4();
    sub_23C808184(v1, v2);
    return sub_23C7EE3BC();
  }
  else
  {
    sub_23C7DC484();
    result = sub_23C7E61A4();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C808184(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t i;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  swift_beginAccess();
  v3 = *(_QWORD *)(a2 + 40);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_23C9117C0();
    swift_bridgeObjectRelease();
    if (!v4)
      return swift_endAccess();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return swift_endAccess();
  }
  v5 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    MEMORY[0x242625290](0, v3);
  else
    swift_retain();
  v6 = swift_unknownObjectRetain();
  v7 = sub_23C808390(v6);
  swift_release();
  swift_unknownObjectRelease();
  if ((v7 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    if (v4 == 1)
      return swift_endAccess();
    if (v5)
      MEMORY[0x242625290](1, v3);
    else
      swift_retain();
    v9 = swift_unknownObjectRetain();
    v10 = sub_23C808390(v9);
    swift_release();
    swift_unknownObjectRelease();
    if ((v10 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      if (v4 == 2)
        return swift_endAccess();
      for (i = 6; ; ++i)
      {
        v8 = i - 4;
        if (v5)
          MEMORY[0x242625290](i - 4, v3);
        else
          swift_retain();
        v12 = swift_unknownObjectRetain();
        v13 = sub_23C808390(v12);
        swift_release();
        result = swift_unknownObjectRelease();
        if ((v13 & 1) != 0)
          break;
        v15 = i - 3;
        v5 = v3 & 0xC000000000000001;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return result;
        }
        if (v15 == v4)
          return swift_endAccess();
      }
    }
  }
  sub_23C8905E8(v8);
  swift_release();
  return swift_endAccess();
}

uint64_t sub_23C808390(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23C8076E8();
  if (result)
  {
    v3 = result;
    swift_unknownObjectRelease();
    return v3 == a1;
  }
  return result;
}

uint64_t sub_23C8083C8()
{
  return sub_23C8083D4();
}

uint64_t sub_23C8083D4()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_23C809894();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  sub_23C7E40EC();
  if ((sub_23C7E2040() & 1) != 0)
  {
    sub_23C7DF5C4();
    sub_23C7E07B4();
    sub_23C7E253C();
    sub_23C7EC59C();
    sub_23C7E8DAC();
    sub_23C7E0408();
    sub_23C7E07B4();
    sub_23C8098EC();
    sub_23C7EC59C();
    sub_23C7ECB78();
    sub_23C7E23F4();
    sub_23C809340(v5, v3, v6, v1);
    return sub_23C7EE3BC();
  }
  else
  {
    sub_23C7DC484();
    result = sub_23C7E61A4();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C80848C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 v11[9];

  v8 = *a2;
  sub_23C7E40EC();
  if ((sub_23C7E2040() & 1) != 0)
  {
    sub_23C7DF5C4();
    sub_23C7E07B4();
    sub_23C7E253C();
    sub_23C7EC59C();
    sub_23C7E8DAC();
    sub_23C7E0408();
    sub_23C7E07B4();
    sub_23C8098EC();
    sub_23C7EC59C();
    sub_23C7ECB78();
    sub_23C7E23F4();
    v11[0] = v8;
    sub_23C8093F0(a1, v11, v9, a4, a5);
    return swift_release();
  }
  else
  {
    sub_23C7DC484();
    result = sub_23C7E61A4();
    __break(1u);
  }
  return result;
}

uint64_t _s13CommitHandlerCMa()
{
  return objc_opt_self();
}

unint64_t sub_23C808598()
{
  unint64_t result;

  result = qword_256BCBDB8;
  if (!qword_256BCBDB8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for Database.TransactionObservationExtent, &type metadata for Database.TransactionObservationExtent);
    atomic_store(result, (unint64_t *)&qword_256BCBDB8);
  }
  return result;
}

unint64_t sub_23C8085D8()
{
  unint64_t result;

  result = qword_256BCBDC0;
  if (!qword_256BCBDC0)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseEvent.Kind, &type metadata for DatabaseEvent.Kind);
    atomic_store(result, (unint64_t *)&qword_256BCBDC0);
  }
  return result;
}

void type metadata accessor for Database.TransactionObservationExtent()
{
  sub_23C7DFB90();
}

uint64_t type metadata accessor for DatabaseObservationBroker()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of TransactionObserver.observes(eventsOfKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidChange(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of TransactionObserver.databaseWillCommit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidCommit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidRollback(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata accessor for TransactionObservation()
{
  return objc_opt_self();
}

uint64_t sub_23C8086A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 >= 2u)
  {
    if (a4 != 2)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DatabaseEventKind(uint64_t a1)
{
  return sub_23C808700(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_23C808700(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 >= 2u)
  {
    if (a4 != 2)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23C8086A0(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23C8086A0(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_23C808700(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_23C808700(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseEventKind(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseEventKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C8088FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_23C808904(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

void type metadata accessor for DatabaseEventKind()
{
  sub_23C7DFB90();
}

uint64_t initializeWithCopy for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  sub_23C8089A0((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t *sub_23C8089A0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DatabaseEvent()
{
  sub_23C7DFB90();
}

uint64_t getEnumTagSinglePayload for DatabaseUUIDEncodingStrategy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s28TransactionObservationExtentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C808CD8 + 4 * byte_23C9130C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C808D0C + 4 * byte_23C9130C0[v4]))();
}

uint64_t sub_23C808D0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C808D14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C808D1CLL);
  return result;
}

uint64_t sub_23C808D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C808D30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C808D34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C808D3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C808D48(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23C808D50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void type metadata accessor for DatabaseEvent.Kind()
{
  sub_23C7DFB90();
}

uint64_t type metadata accessor for SavepointStack()
{
  return objc_opt_self();
}

unint64_t sub_23C808D88(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C808DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    sub_23C7DB3D4();
  }
  return a1;
}

unint64_t *sub_23C808E14(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TableRegion(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_23C808ED8(_QWORD *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C808F4C(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_23C808F9C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_23C808FF0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23C809008(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

void type metadata accessor for DatabaseEventPredicate()
{
  sub_23C7DFB90();
}

_QWORD *sub_23C809034(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void sub_23C809070(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **sub_23C809088(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *initializeWithTake for DatabaseRegion(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **sub_23C809120(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t sub_23C809180(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t sub_23C8091DC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

_QWORD *sub_23C80922C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

void type metadata accessor for DatabaseObservationBroker.TransactionState()
{
  sub_23C7DFB90();
}

uint64_t sub_23C809258(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_23C80927C(uint64_t a1)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return a1;
}

uint64_t sub_23C8092A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCBAF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C8092E8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DatabaseEvent(a2, a1);
  return a2;
}

uint64_t sub_23C80931C()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C809340(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TransactionObservation();
  v7 = sub_23C7DB388();
  v8 = swift_retain();
  a4(v8, a2, v7);
  v9 = swift_beginAccess();
  MEMORY[0x242624CE4](v9);
  sub_23C7DD090(*(_QWORD *)((*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFF8) + 0x10));
  sub_23C911148();
  sub_23C9110DC();
  return swift_endAccess();
}

uint64_t sub_23C8093F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12[24];

  v12[0] = *a2;
  type metadata accessor for TransactionObservation();
  v8 = swift_allocObject();
  v9 = swift_unknownObjectRetain();
  sub_23C8095D8(v9, v12, v8, a4, a5);
  v10 = swift_beginAccess();
  MEMORY[0x242624CE4](v10);
  sub_23C7DD090(*(_QWORD *)((*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFF8) + 0x10));
  sub_23C911148();
  sub_23C9110DC();
  return swift_endAccess();
}

uint64_t sub_23C8094B4(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 17) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 16) = a2;
  if (a2)
  {
    *(_QWORD *)(a3 + 40) = a1;
    *(_QWORD *)(a3 + 48) = &off_250D87A18;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = &off_250D87A18;
    swift_unknownObjectWeakAssign();
    swift_release();
  }
  return a3;
}

uint64_t sub_23C809538(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 17) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 16) = a2;
  if (a2)
  {
    *(_QWORD *)(a3 + 40) = a1;
    *(_QWORD *)(a3 + 48) = &off_250D84F88;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = &off_250D84F88;
    swift_unknownObjectWeakAssign();
    swift_release();
  }
  return a3;
}

uint64_t sub_23C8095BC(uint64_t a1)
{
  uint64_t v1;

  return sub_23C806368(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_23C8095D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;

  v8 = *a2;
  *(_BYTE *)(a3 + 17) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 16) = v8;
  if (v8)
  {
    *(_QWORD *)(a3 + 40) = a1;
    *(_QWORD *)(a3 + 48) = a5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = a5;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  return a3;
}

uint64_t getEnumTagSinglePayload for MetalDatabaseEventImpl(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetalDatabaseEventImpl(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MetalDatabaseEventImpl()
{
  return &type metadata for MetalDatabaseEventImpl;
}

uint64_t sub_23C8096A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t destroy for CaseInsensitiveIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CaseInsensitiveIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CaseInsensitiveIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CaseInsensitiveIdentifier(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for CaseInsensitiveIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CaseInsensitiveIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaseInsensitiveIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CopiedDatabaseEventImpl()
{
  return &type metadata for CopiedDatabaseEventImpl;
}

uint64_t sub_23C8098AC()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_23C8098BC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_23C8098CC(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0;
  return swift_release();
}

uint64_t sub_23C8098D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = a1 - 1;
  result = *(_QWORD *)(v1 + v3 * v2 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_23C8098EC()
{
  uint64_t v0;

  return sub_23C807D38(v0);
}

uint64_t sub_23C8098F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_23C809900()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t sub_23C80990C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C809920()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C809934()
{
  uint64_t v0;

  return v0;
}

void sub_23C809948()
{
  sub_23C7EBD28();
}

void sub_23C809958()
{
  const void *v0;
  char *v1;
  _BYTE v2[184];
  _BYTE v3[184];

  sub_23C7DE93C(v2, v0);
  sub_23C801054(v2, v3);
  v1 = (char *)sub_23C8099B8 + 4 * byte_23C913438[sub_23C801090((uint64_t)v3)];
  __asm { BR              X10 }
}

void sub_23C8099B8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_23C7E97D8();
  v1 = sub_23C7DE93C(v0, &v55);
  sub_23C7E07D0((uint64_t)v1, (uint64_t)sub_23C7FD6D4, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v8);
}

void sub_23C809AFC()
{
  const void *v0;
  char *v1;
  _BYTE v2[184];
  _BYTE v3[184];

  sub_23C801054(v0, v2);
  sub_23C801054(v2, v3);
  v1 = (char *)sub_23C809B50 + 4 * byte_23C91343D[sub_23C801090((uint64_t)v3)];
  __asm { BR              X10 }
}

void *sub_23C809B50()
{
  void *v0;
  uint64_t v1;
  const void *v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int16 v9;
  uint64_t v10;
  _BYTE v11[168];
  uint64_t v12;

  v2 = (const void *)sub_23C8011F0(v1 - 216);
  sub_23C801054(&v12, v8);
  v3 = (__n128 *)sub_23C7EE3D4();
  sub_23C80A7B4(v3);
  sub_23C7E3190(v11, v2);
  sub_23C7E79A8(&qword_25430CF70);
  v4 = sub_23C7DE994();
  *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
  sub_23C7E3190((void *)(v4 + 32), v11);
  sub_23C7DFB98();
  v8[0] = v5;
  v8[1] = v6;
  v9 = 1;
  v10 = v4;
  sub_23C80A884((uint64_t)v8);
  return sub_23C800B48(v8, v0);
}

void sub_23C809CCC()
{
  uint64_t v0;

  sub_23C8011F0(v0 - 216);
  sub_23C9117B4();
  __break(1u);
}

void sub_23C809D20()
{
  const void *v0;
  char *v1;
  _BYTE v2[184];
  _BYTE v3[184];

  sub_23C801054(v0, v2);
  sub_23C801054(v2, v3);
  v1 = (char *)sub_23C809D80 + 4 * byte_23C913442[sub_23C801090((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23C809D80()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[784];

  sub_23C8011F0(v1 - 232);
  sub_23C80A8F4((uint64_t)v3);
  return sub_23C80A924((uint64_t)v3, v0);
}

void sub_23C809E84()
{
  const void *v0;
  char *v1;
  _BYTE v2[184];
  _BYTE v3[184];

  sub_23C801054(v0, v2);
  sub_23C801054(v2, v3);
  v1 = (char *)sub_23C809EEC + 4 * byte_23C913447[sub_23C801090((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23C809EEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v1 = *(_QWORD *)sub_23C8011F0(v0 - 248);
  v2 = sub_23C801054(&v95, &v72);
  sub_23C7EDB1C((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v29, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v72);
  swift_retain();
  sub_23C8804C4(v1);
  if (v18)
  {
    sub_23C7ECB88();
    sub_23C910F5C();
    sub_23C7E953C();
    sub_23C7DB62C();
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    v19 = sub_23C7DB62C();
    sub_23C7E4C9C(v19, (uint64_t)sub_23C800D94, v20, v21, v22, v23, v24, v25, v30, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51,
      v53,
      v55,
      v57,
      v59,
      v61,
      v63,
      v65,
      v67,
      v69,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v26);
    return v31;
  }
  else
  {
    sub_23C7E4C9C(v10, (uint64_t)sub_23C800D94, v11, v12, v13, v14, v15, v16, v30, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51,
      v53,
      v55,
      v57,
      v59,
      v61,
      v63,
      v65,
      v67,
      v69,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v17);
    return 42;
  }
}

void SQLSelection.sqlSelection.getter(void *a1@<X8>)
{
  const void *v1;
  __n128 v3[11];

  sub_23C7DE93C(v3, v1);
  sub_23C7DE93C(a1, v1);
  sub_23C80A808(v3);
  sub_23C7E5DF0();
}

void AllColumns.sqlSelection.getter(void *a1@<X8>)
{
  _QWORD v2[23];

  sub_23C80A1D8(v2);
  sub_23C801054(v2, a1);
  sub_23C7E5DF0();
}

void sub_23C80A1D8(_QWORD *a1)
{
  bzero(a1, 0xA0uLL);
  a1[21] = 0;
  a1[22] = 0;
  a1[20] = 0x8000000000000000;
}

void sub_23C80A208(void *a1@<X8>)
{
  AllColumns.sqlSelection.getter(a1);
}

void *initializeWithTake for SQLSelection.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

void type metadata accessor for SQLSelection()
{
  sub_23C7DFB90();
}

uint64_t dispatch thunk of SQLSelectable.sqlSelection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void type metadata accessor for AllColumns()
{
  sub_23C7DFB90();
}

uint64_t _s12GRDBInternal12SQLSelectionV4ImplOwxx_0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  sub_23C7E8164();
  return sub_23C800D94(v7, v0, v1, v2, v3, v4, v5, v6, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
}

void _s12GRDBInternal12SQLSelectionV4ImplOwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2[4];
  v4 = a2[5];
  v5 = a2[6];
  v6 = a2[7];
  v12 = a2[9];
  v13 = a2[10];
  v14 = a2[11];
  v15 = a2[12];
  v16 = a2[13];
  v17 = a2[14];
  v18 = a2[15];
  v19 = a2[16];
  v20 = a2[17];
  v21 = a2[18];
  v22 = a2[19];
  v23 = a2[20];
  v24 = a2[21];
  v25 = a2[22];
  v7 = a2[8];
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  sub_23C7FD6D4(*a2, v9, v10, v11, v3, v4, v5, v6, v7, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  a1[8] = v7;
  a1[9] = v12;
  a1[10] = v13;
  a1[11] = v14;
  a1[12] = v15;
  a1[13] = v16;
  a1[14] = v17;
  a1[15] = v18;
  a1[16] = v19;
  a1[17] = v20;
  a1[18] = v21;
  a1[19] = v22;
  a1[20] = v23;
  a1[21] = v24;
  a1[22] = v25;
  sub_23C7E8884();
}

void _s12GRDBInternal12SQLSelectionV4ImplOwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v33 = a2[9];
  v34 = a2[10];
  v35 = a2[11];
  v36 = a2[12];
  v37 = a2[13];
  v38 = a2[14];
  v39 = a2[15];
  v40 = a2[16];
  v41 = a2[17];
  v42 = a2[18];
  v43 = a2[19];
  v44 = a2[20];
  v45 = a2[21];
  v46 = a2[22];
  sub_23C7FD6D4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v33;
  a1[10] = v34;
  a1[11] = v35;
  a1[12] = v36;
  a1[13] = v37;
  a1[14] = v38;
  a1[15] = v39;
  a1[16] = v40;
  a1[17] = v41;
  a1[18] = v42;
  a1[19] = v43;
  a1[20] = v44;
  a1[21] = v45;
  a1[22] = v46;
  sub_23C7E8164();
  sub_23C800D94(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32);
  sub_23C7E8884();
}

void _s12GRDBInternal12SQLSelectionV4ImplOwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v2 = *(_QWORD *)(a2 + 176);
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v2;
  sub_23C7E8164();
  sub_23C800D94(v8, v15, v9, v10, v11, v12, v13, v14, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  sub_23C7E1710();
}

uint64_t getEnumTagSinglePayload for SQL.Element(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 184))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 64) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SQL.Element(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_23C80A6B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < 4)
  {
    v3 = a1[13] & 1;
    v4 = a1[20] & 0xF981FFLL | (a2 << 61);
    a1[8] &= 1uLL;
    a1[13] = v3;
    a1[20] = v4;
  }
  else
  {
    *a1 = (a2 - 4);
    bzero(a1 + 1, 0x98uLL);
    a1[21] = 0;
    a1[22] = 0;
    a1[20] = 0x8000000000000000;
  }
}

ValueMetadata *type metadata accessor for SQLSelection.Impl()
{
  return &type metadata for SQLSelection.Impl;
}

uint64_t sub_23C80A738(uint64_t a1)
{
  sub_23C7E7E58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C80A7B4(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = sub_23C7E40F4(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14);
  return v1;
}

void sub_23C80A808(__n128 *a1)
{
  void (*v1)(void);

  sub_23C7E40F4(a1);
  sub_23C7E8164();
  v1();
  sub_23C7E1710();
}

uint64_t sub_23C80A840(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x280000u) >> 16;
  return result;
}

uint64_t sub_23C80A884(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0x10177 | 0x88888888;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v2 & 0x81FF;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

void sub_23C80A8C4(uint64_t a1)
{
  bzero((void *)a1, 0xA0uLL);
  *(_BYTE *)(a1 + 162) = -88;
  *(_WORD *)(a1 + 160) = 0;
}

double sub_23C80A8F4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  return result;
}

uint64_t sub_23C80A924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCA520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_23C80A96C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  return result;
}

void *sub_23C80A99C(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0xA3uLL);
}

uint64_t sub_23C80A9B0(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 64);
  if ((v1 >> 1) <= 0x80000000)
    return sub_23C7E6F90(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), v1, *(_QWORD *)(result + 72), *(_QWORD *)(result + 80), *(_QWORD *)(result + 88), *(_QWORD *)(result + 96), *(_QWORD *)(result + 104), *(_QWORD *)(result + 112), *(_QWORD *)(result + 120), *(_QWORD *)(result + 128), *(_QWORD *)(result + 136), *(_QWORD *)(result + 144),
             *(_QWORD *)(result + 152),
             *(unsigned __int16 *)(result + 160) | (*(unsigned __int8 *)(result + 162) << 16));
  return result;
}

_QWORD *sub_23C80AA38(_QWORD *__dst, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v3 = a2[8];
  if ((v3 >> 1) > 0x80000000)
  {
    memcpy(__dst, a2, 0xA3uLL);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v9 = a2[4];
    v8 = a2[5];
    v13 = a2[9];
    v14 = a2[10];
    v15 = a2[11];
    v16 = a2[12];
    v17 = a2[13];
    v18 = a2[14];
    v19 = a2[15];
    v20 = a2[16];
    v21 = a2[17];
    v22 = a2[18];
    v24 = *((unsigned __int8 *)a2 + 162);
    v25 = *((unsigned __int16 *)a2 + 80);
    v23 = a2[19];
    v10 = a2[6];
    v11 = a2[7];
    sub_23C7E7E58(*a2, v5, v6, v7, v9, v8, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
      v23,
      v25 | (v24 << 16));
    *__dst = v4;
    __dst[1] = v5;
    __dst[2] = v6;
    __dst[3] = v7;
    __dst[4] = v9;
    __dst[5] = v8;
    __dst[6] = v10;
    __dst[7] = v11;
    __dst[8] = v3;
    __dst[9] = v13;
    __dst[10] = v14;
    __dst[11] = v15;
    __dst[12] = v16;
    __dst[13] = v17;
    __dst[14] = v18;
    __dst[15] = v19;
    __dst[16] = v20;
    __dst[17] = v21;
    __dst[18] = v22;
    __dst[19] = v23;
    *((_BYTE *)__dst + 162) = v24;
    *((_WORD *)__dst + 80) = v25;
  }
  return __dst;
}

uint64_t *sub_23C80ABAC(uint64_t *__dst, uint64_t *__src)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;

  v4 = __dst[8];
  v5 = __src[8];
  v6 = v5 >> 1;
  if ((v4 >> 1) > 0x80000000)
  {
    if (v6 <= 0x80000000)
    {
      v31 = *__src;
      v32 = __src[1];
      v33 = __src[2];
      v34 = __src[3];
      v35 = __src[4];
      v41 = __src[9];
      v43 = __src[10];
      v45 = __src[11];
      v47 = __src[12];
      v49 = __src[13];
      v51 = __src[14];
      v53 = __src[15];
      v55 = __src[16];
      v57 = __src[17];
      v59 = __src[18];
      v63 = *((unsigned __int8 *)__src + 162);
      v65 = *((unsigned __int16 *)__src + 80);
      v61 = __src[19];
      v36 = __src[5];
      v37 = __src[6];
      v38 = __src[7];
      sub_23C7E7E58(*__src, v32, v33, v34, v35, v36, v37, v38, v5, v41, v43, v45, v47, v49, v51, v53, v55, v57, v59,
        v61,
        v65 | (v63 << 16));
      *__dst = v31;
      __dst[1] = v32;
      __dst[2] = v33;
      __dst[3] = v34;
      __dst[4] = v35;
      __dst[5] = v36;
      __dst[6] = v37;
      __dst[7] = v38;
      __dst[8] = v5;
      __dst[9] = v41;
      __dst[10] = v43;
      __dst[11] = v45;
      __dst[12] = v47;
      __dst[13] = v49;
      __dst[14] = v51;
      __dst[15] = v53;
      __dst[16] = v55;
      __dst[17] = v57;
      __dst[18] = v59;
      __dst[19] = v61;
      *((_BYTE *)__dst + 162) = v63;
      *((_WORD *)__dst + 80) = v65;
      return __dst;
    }
LABEL_7:
    memcpy(__dst, __src, 0xA3uLL);
    return __dst;
  }
  if (v6 > 0x80000000)
  {
    sub_23C7E6F90(*__dst, __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], v4, __dst[9], __dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16], __dst[17], __dst[18],
      __dst[19],
      *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16));
    goto LABEL_7;
  }
  v7 = __src[1];
  v8 = __src[2];
  v9 = __src[3];
  v10 = __src[4];
  v11 = __src[5];
  v12 = __src[6];
  v13 = __src[7];
  v40 = __src[9];
  v42 = __src[10];
  v44 = __src[11];
  v46 = __src[12];
  v48 = __src[13];
  v50 = __src[14];
  v52 = __src[15];
  v54 = __src[16];
  v56 = __src[17];
  v58 = __src[18];
  v62 = *((unsigned __int16 *)__src + 80);
  v64 = *((unsigned __int8 *)__src + 162);
  v60 = __src[19];
  v14 = *__src;
  sub_23C7E7E58(*__src, v7, v8, v9, v10, v11, v12, v13, v5, v40, v42, v44, v46, v48, v50, v52, v54, v56, v58,
    v60,
    v62 | (v64 << 16));
  v15 = *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16);
  v16 = *__dst;
  v17 = __dst[1];
  *__dst = v14;
  __dst[1] = v7;
  v18 = __dst[2];
  v19 = __dst[3];
  __dst[2] = v8;
  __dst[3] = v9;
  v20 = __dst[4];
  v21 = __dst[5];
  __dst[4] = v10;
  __dst[5] = v11;
  v22 = __dst[6];
  v23 = __dst[7];
  __dst[6] = v12;
  __dst[7] = v13;
  v24 = *((_OWORD *)__dst + 4);
  v25 = *((_OWORD *)__dst + 5);
  __dst[8] = v5;
  __dst[9] = v40;
  __dst[10] = v42;
  __dst[11] = v44;
  v26 = *((_OWORD *)__dst + 6);
  v27 = *((_OWORD *)__dst + 7);
  __dst[12] = v46;
  __dst[13] = v48;
  __dst[14] = v50;
  __dst[15] = v52;
  v28 = *((_OWORD *)__dst + 8);
  __dst[16] = v54;
  __dst[17] = v56;
  *((_WORD *)__dst + 80) = v62;
  *((_BYTE *)__dst + 162) = v64;
  v29 = __dst[18];
  v30 = __dst[19];
  __dst[18] = v58;
  __dst[19] = v60;
  sub_23C7E6F90(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    v30,
    v15);
  return __dst;
}

void *initializeWithTake for SQLOrdering.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA3uLL);
}

_QWORD *sub_23C80AEF0(_QWORD *__dst, char *__src)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;

  v4 = __dst[8];
  if ((v4 >> 1) > 0x80000000)
    goto LABEL_5;
  v5 = *((_QWORD *)__src + 8);
  if ((v5 >> 1) > 0x80000000)
  {
    sub_23C7E6F90(*__dst, __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], v4, __dst[9], __dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16], __dst[17], __dst[18],
      __dst[19],
      *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16));
LABEL_5:
    memcpy(__dst, __src, 0xA3uLL);
    return __dst;
  }
  v6 = *((_QWORD *)__src + 19);
  v7 = *((_WORD *)__src + 80);
  v8 = __src[162];
  v9 = *__dst;
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v14 = __dst[5];
  v15 = __dst[6];
  v16 = __dst[7];
  v17 = *(_OWORD *)(__dst + 9);
  v18 = *(_OWORD *)(__dst + 11);
  v19 = *(_OWORD *)(__dst + 13);
  v20 = *(_OWORD *)(__dst + 15);
  v21 = *(_OWORD *)(__dst + 17);
  v22 = __dst[19];
  v23 = *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16);
  v24 = *((_OWORD *)__src + 1);
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_OWORD *)__dst + 1) = v24;
  v25 = *((_OWORD *)__src + 3);
  *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
  *((_OWORD *)__dst + 3) = v25;
  __dst[8] = v5;
  *(_OWORD *)(__dst + 9) = *(_OWORD *)(__src + 72);
  *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
  *(_OWORD *)(__dst + 13) = *(_OWORD *)(__src + 104);
  *(_OWORD *)(__dst + 15) = *(_OWORD *)(__src + 120);
  *(_OWORD *)(__dst + 17) = *(_OWORD *)(__src + 136);
  __dst[19] = v6;
  *((_BYTE *)__dst + 162) = v8;
  *((_WORD *)__dst + 80) = v7;
  sub_23C7E6F90(v9, v10, v11, v12, v13, v14, v15, v16, v4, v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1),
    v22,
    v23);
  return __dst;
}

uint64_t sub_23C80B05C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 163))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64) >> 1;
  if (v3 > 0x80000000)
    v4 = ~(_DWORD)v3;
  else
    v4 = -1;
  if (v4 + 1 >= 2)
    return v4;
  else
    return 0;
}

void sub_23C80B0B4(char *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5;

  if (a2 > 0x7FFFFFFE)
  {
    v5 = a2 - 0x7FFFFFFF;
    bzero(a1, 0xA3uLL);
    *(_DWORD *)a1 = v5;
    if (a3 >= 0x7FFFFFFF)
      a1[163] = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      a1[163] = 0;
    if (a2)
    {
      *((_OWORD *)a1 + 2) = 0u;
      *((_OWORD *)a1 + 3) = 0u;
      *(_OWORD *)a1 = 0u;
      *((_OWORD *)a1 + 1) = 0u;
      *((_QWORD *)a1 + 8) = 2 * ~a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 147) = 0u;
    }
  }
}

double sub_23C80B15C(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 162) = 0;
    *(_WORD *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 64) = 2 * -a2;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 147) = 0u;
  }
  return result;
}

void type metadata accessor for SQLCount()
{
  sub_23C7DFB90();
}

uint64_t sub_23C80B1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  _QWORD v11[23];
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v2 = v12;
    v4 = (_QWORD *)(a1 + 32);
    for (i = v1 - 1; ; --i)
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_23C7E7E34(v4, v6);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v11, v6, v7);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7DEF40();
        sub_23C7FD588();
        v2 = v12;
      }
      v9 = *(_QWORD *)(v2 + 16);
      if (v9 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD588();
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      sub_23C7DE93C((void *)(v2 + 184 * v9 + 32), v11);
      if (!i)
        break;
      v4 += 5;
    }
  }
  return v2;
}

uint64_t sub_23C80B308(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD __dst[23];
  _QWORD v14[23];
  _QWORD v15[21];
  _BYTE __src[176];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v5 = (uint64_t *)(a1 + 40);
    v6 = v17;
    for (i = v3 - 1; ; --i)
    {
      v8 = *v5;
      v15[0] = *(v5 - 1);
      v15[1] = v8;
      v15[2] = a2;
      sub_23C813794((uint64_t)v15);
      sub_23C800B48(v15, __src);
      v14[0] = 0x5F62647267;
      v14[1] = 0xE500000000000000;
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v9 = v14[0];
      v10 = v14[1];
      v17 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      if (v11 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_23C7FD588();
        v6 = v17;
      }
      memcpy(__dst, __src, 0xA3uLL);
      __dst[21] = v9;
      __dst[22] = v10;
      sub_23C8011BC(__dst);
      sub_23C801054(__dst, v14);
      *(_QWORD *)(v6 + 16) = v11 + 1;
      memcpy((void *)(v6 + 184 * v11 + 32), v14, 0xB8uLL);
      if (!i)
        break;
      v5 += 2;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t sub_23C80B4A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23C7FD9AC(0, v3, 0);
    v5 = v18;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v10 = a2[5];
      v9 = a2[6];
      sub_23C7E7E34(a2 + 2, v10);
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88);
      swift_bridgeObjectRetain();
      v12 = v11(v8, v7, v10, v9);
      if ((v13 & 1) != 0)
        break;
      v14 = v12;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      if (v16 >= v15 >> 1)
        sub_23C7FD9AC(v15 > 1, v16 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v18 + 16) = v16 + 1;
      *(_QWORD *)(v18 + 8 * v16 + 32) = v14;
      if (!--v3)
      {
        swift_release();
        return v5;
      }
    }
    swift_bridgeObjectRetain();
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C910F5C();
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23C80B690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_23C7E649C();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C80B764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_23C7E649C();
      v4 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C80B838(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23C7E56C8();
    v5 = v18;
    v6 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v6++;
      v8 = a2[5];
      v9 = a2[6];
      sub_23C7E7E34(a2 + 2, v8);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v9 + 48))(&v16, v7, v8, v9);
      v10 = v16;
      v11 = v17;
      v18 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      if (v12 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        v15 = v16;
        sub_23C7E56C8();
        v10 = v15;
        v5 = v18;
      }
      *(_QWORD *)(v5 + 16) = v12 + 1;
      v13 = v5 + 24 * v12;
      *(_OWORD *)(v13 + 32) = v10;
      *(_BYTE *)(v13 + 48) = v11;
      --v3;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t sub_23C80B97C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[22];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    ((void (*)(_QWORD, uint64_t, _QWORD))a3)(0, v3, 0);
    v4 = v17;
    v7 = (_QWORD *)(a1 + 32);
    for (i = v3 - 1; ; --i)
    {
      v9 = v7[3];
      v10 = v7[4];
      sub_23C7E7E34(v7, v9);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v16, v9, v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v12 = sub_23C7DEF40();
        a3(v12);
        v4 = v17;
      }
      v14 = *(_QWORD *)(v4 + 16);
      v13 = *(_QWORD *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))a3)(v13 > 1, v14 + 1, 1);
        v4 = v17;
      }
      *(_QWORD *)(v4 + 16) = v14 + 1;
      sub_23C7E3190((void *)(v4 + 168 * v14 + 32), v16);
      if (!i)
        break;
      v7 += 5;
    }
  }
  return v4;
}

uint64_t sub_23C80BAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_23C7FDB8C(0, v5, 0);
    v7 = v13;
    v8 = a1 + 32;
    while (1)
    {
      swift_bridgeObjectRetain();
      sub_23C85C97C();
      if (v3)
        break;
      v3 = 0;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        sub_23C7FDB8C(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v13 + 16) = v10 + 1;
      *(_QWORD *)(v13 + 8 * v10 + 32) = v12;
      v8 += 8;
      if (!--v5)
      {
        sub_23C813A5C(a2);
        goto LABEL_10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_23C813A5C(a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C813A5C(a2);
    v7 = MEMORY[0x24BEE4AF8];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_23C80BC0C@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0xA2uLL);
}

void QueryInterfaceRequest.select<A>(_:as:)(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];
  _BYTE v4[168];
  _BYTE v5[168];

  sub_23C7E0718(v5, v1);
  SelectionRequest.select(_:)();
  sub_23C7E0718(v4, v3);
  sub_23C7E0718(a1, v3);
  sub_23C7E0718(v5, v3);
  sub_23C812E48((uint64_t)v5);
  sub_23C812EE4((uint64_t)v4);
}

void QueryInterfaceRequest.limit(_:offset:)(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C7DB400((uint64_t (*)(uint64_t))sub_23C8101E0, a1);
  sub_23C7E954C();
}

void QueryInterfaceRequest.aliased(_:)(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C7DB400((uint64_t (*)(uint64_t))sub_23C8101F8, a1);
  sub_23C7E07F4();
}

void *sub_23C80BD90@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[176];
  _BYTE __src[74];
  _BYTE __dst[72];
  _BYTE v18[176];
  _BYTE v19[176];
  _QWORD v20[22];

  memcpy(__dst, v2, sizeof(__dst));
  v5 = v2[9];
  v6 = v2[10];
  memcpy(__src, v2 + 11, sizeof(__src));
  v8 = *a1;
  v7 = a1[1];
  memcpy(v18, a1 + 2, 0xABuLL);
  sub_23C8133B0((uint64_t)v18);
  sub_23C8133B0((uint64_t)v18);
  swift_bridgeObjectRetain();
  sub_23C812E48((uint64_t)v2);
  swift_isUniquelyReferenced_nonNull_native();
  v20[0] = v6;
  sub_23C862C08(v18, v8, v7);
  v9 = v20[0];
  swift_bridgeObjectRelease();
  sub_23C81348C((uint64_t)v15, (uint64_t)v19);
  sub_23C81348C((uint64_t)v19, (uint64_t)v20);
  if (sub_23C8134D4((uint64_t)v20) == 1)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7F16C0();
      v5 = v13;
    }
    v10 = *(_QWORD *)(v5 + 16);
    if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7F16C0();
      v5 = v14;
    }
    *(_QWORD *)(v5 + 16) = v10 + 1;
    v11 = v5 + 16 * v10;
    *(_QWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v7;
  }
  else
  {
    sub_23C8135C8((uint64_t)v19);
  }
  sub_23C8134EC((uint64_t)v18);
  swift_bridgeObjectRelease();
  memcpy(a2, __dst, 0x48uLL);
  result = memcpy(a2 + 11, __src, 0x4AuLL);
  a2[9] = v5;
  a2[10] = v9;
  return result;
}

uint64_t QueryInterfaceRequest.with<A>(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[168];
  _BYTE __dst[187];

  memcpy(__dst, __src, sizeof(__dst));
  sub_23C7E0718(v5, v2);
  return sub_23C7E4CA4(sub_23C810320, a2);
}

void QueryInterfaceRequest<A>.selectID()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  const void *v4;
  _QWORD *v9;
  _BYTE v10[168];
  _BYTE v11[168];
  _BYTE v12[168];
  _BYTE v13[176];

  sub_23C7E0718(v11, v4);
  v9 = (_QWORD *)sub_23C7DB388();
  v9[2] = *(_QWORD *)(a1 + 16);
  v9[3] = a2;
  v9[4] = a3;
  sub_23C7E0718(v9 + 5, v4);
  sub_23C812E48((uint64_t)v11);
  QueryInterfaceRequest.select(_:)((uint64_t)v10);
  swift_release();
  sub_23C7E0718(v12, v10);
  sub_23C7E0718(a4, v10);
  sub_23C7E0718(v13, v10);
  sub_23C812E48((uint64_t)v13);
  sub_23C812EE4((uint64_t)v12);
}

void QueryInterfaceRequest<A>.selectID()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  const void *v5;
  _QWORD *v11;
  _BYTE v12[168];
  _BYTE v13[168];
  _BYTE v14[168];
  _BYTE v15[168];

  sub_23C7E0718(v13, v5);
  v11 = (_QWORD *)sub_23C7DB388();
  v11[2] = *(_QWORD *)(a1 + 16);
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  sub_23C7E0718(v11 + 6, v5);
  sub_23C812E48((uint64_t)v13);
  QueryInterfaceRequest.select(_:)((uint64_t)v12);
  swift_release();
  sub_23C7E0718(v14, v12);
  sub_23C7E0718(a5, v12);
  sub_23C7E0718(v15, v12);
  sub_23C812E48((uint64_t)v15);
  sub_23C812EE4((uint64_t)v14);
}

void QueryInterfaceRequest.sqlSubquery.getter(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];
  _BYTE v4[168];
  _BYTE v5[176];

  sub_23C7E0718(v3, v1);
  sub_23C7E0718(v4, v1);
  sub_23C81048C((uint64_t)v4);
  sub_23C8104B8(v4, v5);
  sub_23C7E0718(a1, v5);
  sub_23C812E48((uint64_t)v3);
}

void QueryInterfaceRequest.fetchCount(_:)()
{
  const void *v0;
  _BYTE v1[168];

  sub_23C7E0718(v1, v0);
  sub_23C7E204C();
  sub_23C85B0E4();
}

void QueryInterfaceRequest.makePreparedRequest(_:forSingleResult:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  const void *v3;
  uint64_t v4;
  const void *v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[11];
  _BYTE v94[184];
  _QWORD v95[21];
  char v96;
  uint64_t v97;

  v5 = v3;
  v9 = sub_23C7E0718(v93, v5);
  sub_23C813BFC((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v43, v46, v49, v52, v55, v58, v61, v64, v67, v68, v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93[0]);
  sub_23C813BFC(v17, v18, v19, v20, v21, v22, v23, v24, v44, v47, v50, v53, v56, v59, v62, v65, v67, v68, v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93[0]);
  sub_23C909E74(v93, (uint64_t)&v72);
  sub_23C7E0808();
  sub_23C7DBBB0();
  sub_23C7ECFB8();
  v26 = v25;
  sub_23C7DB3DC();
  sub_23C7DB398();
  sub_23C812EE4((uint64_t)v93);
  sub_23C813BF4(v95, &v72);
  v96 = a2;
  v97 = v26;
  sub_23C7DE93C(v94, v95);
  sub_23C908C50();
  if (v4)
  {
    sub_23C811C18(v95);
  }
  else
  {
    v28 = v27;
    type metadata accessor for StatementArgumentsSink();
    sub_23C7DB388();
    swift_retain();
    sub_23C7DEF00();
    swift_bridgeObjectRetain();
    v29 = sub_23C7E0B8C(0);
    type metadata accessor for SQLGenerationContext();
    swift_initStackObject();
    sub_23C7E30C0(a1, v29, MEMORY[0x24BEE4AF8]);
    sub_23C90AAEC(v30, (uint64_t)&v67);
    swift_release();
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)a3 = v28;
    sub_23C811CFC((uint64_t)&v67, a3 + 8);
    sub_23C7F1754(*(_QWORD *)(a3 + 48));
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    sub_23C7E0808();
    sub_23C7DBBB0();
    sub_23C7ECFB8();
    v32 = v31;
    sub_23C7DB3DC();
    sub_23C7DB398();
    sub_23C811C18(v95);
    if (*(_QWORD *)(v32 + 16))
    {
      v33 = sub_23C7DB388();
      *(_QWORD *)(v33 + 16) = v32;
      v34 = sub_23C7E0718((void *)(v33 + 24), v93);
      v35 = *(_QWORD *)(a3 + 48);
      sub_23C813BFC((uint64_t)v34, v36, v37, v38, v39, v40, v41, v42, v45, v48, v51, v54, v57, v60, v63, v66, v67, v68, v69,
        v70,
        v71,
        v72,
        v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93[0]);
      sub_23C7F1754(v35);
      *(_QWORD *)(a3 + 48) = sub_23C811DD4;
      *(_QWORD *)(a3 + 56) = v33;
    }
    else
    {
      sub_23C7DE934();
    }
  }
  sub_23C7DEF28();
}

uint64_t sub_23C80C430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C80C454(a1, a3, a4, a2);
}

uint64_t sub_23C80C454(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE v169[162];
  _QWORD v170[21];
  _QWORD *v171;
  _QWORD v172[21];
  _BYTE v173[168];
  _QWORD v174[21];
  _QWORD v175[21];
  _BYTE v176[162];
  _BYTE v177[168];
  _BYTE v178[168];
  _QWORD v179[23];
  _QWORD v180[21];
  _QWORD v181[21];
  _QWORD v182[8];
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t __src[29];
  _BYTE v198[162];
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  _QWORD v204[8];
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  char v218;
  _BYTE v219[168];
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  char v225;
  __int128 v226;
  __int128 v227;
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  char v232;
  char v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  __int128 v240;
  __int128 v241;
  char v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char v246;
  char v247;
  _BYTE v248[162];
  uint64_t v249[24];
  _BYTE v250[162];
  _BYTE v251[168];
  _BYTE v252[162];
  _BYTE __dst[176];
  _QWORD *v254;

  MEMORY[0x24BDAC7A8](a1);
  v130 = v1;
  v3 = v2;
  v5 = (unint64_t)v4;
  v7 = v6;
  v138 = v2;
  if (v2 >> 62)
    goto LABEL_74;
  v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v9 = v8;
  if (!v8)
    return swift_bridgeObjectRelease();
  while (1)
  {
    v134 = v9;
    v129 = v7;
    sub_23C8E61E8(0);
    v137 = v3 & 0xC000000000000001;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v128 = (_QWORD *)MEMORY[0x242625290](0, v3);
    }
    else
    {
      v128 = *(_QWORD **)(v3 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v7 + 16))
      return swift_release();
    v124 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRetain();
    sub_23C8E6210(0, 1, v7);
    v10 = *(_QWORD *)(v7 + 32);
    sub_23C8E6210(0, 1, v10);
    v139 = (_QWORD *)v10;
    v11 = *(char *)(v10 + 88);
    if (v11 < 0)
      goto LABEL_78;
    v127 = 1;
    v125 = v5;
LABEL_8:
    v13 = v139[8];
    v14 = v139[9];
    v15 = v139[10];
    v17 = *(_QWORD *)v5;
    v16 = *(_QWORD *)(v5 + 8);
    v166 = *(_QWORD *)(v5 + 16);
    v199 = v139[7];
    v12 = v199;
    v200 = v13;
    v201 = v14;
    v202 = v15;
    v203 = v11 & 1;
    swift_bridgeObjectRetain();
    sub_23C800AA4(v12, v13, v14, v15, v11);
    v18 = v17;
    v164 = v16;
    v19 = sub_23C85BB90();
    if (v130)
      break;
    v20 = v19;
    sub_23C812DD0(v12, v13, v14, v15, v11);
    v21 = sub_23C80B690(v20);
    v254 = (_QWORD *)sub_23C80B764(v20);
    if (*(_QWORD *)(v20 + 16) < 2uLL)
      goto LABEL_15;
    if (qword_256BCBA48 != -1)
      swift_once();
    if (byte_256BD4C70 == 1)
    {
      swift_bridgeObjectRelease();
      v168 = v21;
      if ((*(_BYTE *)(v125 + 161) & 1) != 0)
      {
        sub_23C85BA2C((uint64_t)v204);
        v22 = v215;
        v23 = v216;
        v24 = v217;
        v25 = v218;
        v26 = v213;
        v27 = v214;
        v28 = v211;
        v29 = v212;
        v30 = v210;
        v31 = v208;
        v123 = v209;
        v32 = v206;
        v33 = v207;
        v34 = v205;
        v35 = v204[7];
        v36 = v204[6];
        v37 = v204[5];
        v38 = v204[4];
        v39 = v204[0];
        v40 = v204[1];
        v41 = v204[3];
        v42 = v204[2];
      }
      else
      {
        v149 = *(_BYTE *)(v125 + 160);
        v159 = *(_QWORD *)(v125 + 128);
        v161 = *(_QWORD *)(v125 + 144);
        v155 = *(_QWORD *)(v125 + 112);
        v157 = *(_QWORD *)(v125 + 136);
        v146 = *(_QWORD *)(v125 + 120);
        v147 = *(_QWORD *)(v125 + 152);
        v152 = *(_BYTE *)(v125 + 104);
        v33 = *(_QWORD *)(v125 + 80);
        v143 = *(_QWORD *)(v125 + 88);
        v123 = *(_QWORD *)(v125 + 96);
        v150 = *(_QWORD *)(v125 + 72);
        v54 = *(_QWORD *)(v125 + 48);
        v35 = *(_QWORD *)(v125 + 56);
        v34 = *(_BYTE *)(v125 + 64);
        v55 = *(_QWORD *)(v125 + 32);
        v37 = *(_QWORD *)(v125 + 40);
        v56 = *(_QWORD *)(v125 + 24);
        sub_23C812E48(v125);
        v24 = v149;
        v41 = v56;
        v36 = v54;
        v31 = v143;
        v29 = v146;
        v38 = v55;
        v32 = v150;
        v30 = v152;
        v28 = v155;
        v27 = v157;
        v26 = v159;
        v22 = v161;
        v25 = 0;
        v40 = v164;
        v42 = v166;
        v39 = v18;
        v23 = v147;
      }
      v167 = v42;
      v182[0] = v39;
      v182[1] = v40;
      v182[2] = v42;
      v126 = v41;
      v182[3] = v41;
      v182[4] = v38;
      v131 = v36;
      v132 = v37;
      v182[5] = v37;
      v182[6] = v36;
      v140 = v35;
      v182[7] = v35;
      v135 = v34;
      v183 = v34;
      v151 = v32;
      v184 = v32;
      v144 = v33;
      v185 = v33;
      v186 = v31;
      v187 = v123;
      v153 = v30;
      v188 = v30;
      v156 = v28;
      v158 = v27;
      v189 = v28;
      v190 = v29;
      v160 = v26;
      v162 = v22;
      v191 = v26;
      v192 = v27;
      v193 = v22;
      v194 = v23;
      v195 = v24;
      v141 = v25;
      v196 = v25;
      v57 = v24;
      v58 = v29;
      v59 = v38;
      v60 = v39;
      sub_23C812E48((uint64_t)v182);
      v61 = sub_23C833B04(v31, v123, (uint64_t (*)(_BYTE *))sub_23C85DDA0, 0);
      v121 = v62;
      v122 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C812EE4((uint64_t)v182);
      v63 = v254[2];
      if (v63)
      {
        v148 = v23;
        v165 = v40;
        v174[0] = MEMORY[0x24BEE4AF8];
        sub_23C7FD588();
        v64 = v174[0];
        v65 = v254 + 5;
        do
        {
          v66 = *v65;
          v180[0] = *(v65 - 1);
          v180[1] = v66;
          sub_23C800B0C((uint64_t)v180);
          sub_23C800B48(v180, v181);
          v174[0] = v64;
          v68 = *(_QWORD *)(v64 + 16);
          v67 = *(_QWORD *)(v64 + 24);
          swift_bridgeObjectRetain();
          if (v68 >= v67 >> 1)
          {
            sub_23C7FD588();
            v64 = v174[0];
          }
          v65 += 2;
          memcpy(v179, v181, 0xA3uLL);
          sub_23C801200(v179);
          sub_23C801054(v179, __src);
          *(_QWORD *)(v64 + 16) = v68 + 1;
          memcpy((void *)(v64 + 184 * v68 + 32), __src, 0xB8uLL);
          --v63;
        }
        while (v63);
        v69 = v167;
        v40 = v165;
        v23 = v148;
      }
      else
      {
        v64 = MEMORY[0x24BEE4AF8];
        v69 = v167;
      }
      v175[0] = v60;
      v175[1] = v40;
      v175[2] = v69;
      v175[3] = v126;
      v175[4] = v59;
      v175[5] = v132;
      v175[6] = v131;
      v175[7] = v140;
      LOBYTE(v175[8]) = v135;
      v175[9] = v151;
      v175[10] = v144;
      v175[11] = v122;
      v175[12] = v121;
      LOBYTE(v175[13]) = v153;
      v175[14] = v156;
      v175[15] = v58;
      v175[16] = v160;
      v175[17] = v158;
      v175[18] = v162;
      v175[19] = v23;
      LOBYTE(v175[20]) = v57;
      BYTE1(v175[20]) = v141;
      memcpy(v252, v175, sizeof(v252));
      sub_23C85BC78(v64, (uint64_t)v219);
      memcpy(v176, v219, sizeof(v176));
      swift_bridgeObjectRelease();
      sub_23C812EE4((uint64_t)v175);
      memcpy(v177, v176, 0xA2uLL);
      sub_23C81048C((uint64_t)v177);
      sub_23C8104B8(v177, v178);
      memcpy(&__src[3], v178, 0xA2uLL);
      __src[0] = 0x7361625F62647267;
      __src[1] = 0xE900000000000065;
      __src[2] = 0;
      BYTE2(__src[23]) = 0;
      memcpy(v249, __src, 0xBBuLL);
      v21 = v168;
      v70 = *(_QWORD *)(v168 + 16);
      if (v70)
      {
        sub_23C812E48((uint64_t)v219);
        v180[0] = MEMORY[0x24BEE4AF8];
        sub_23C7FD468();
        v71 = (_QWORD *)v180[0];
        v72 = (uint64_t *)(v168 + 40);
        do
        {
          v74 = *(v72 - 1);
          v73 = *v72;
          v180[0] = v71;
          v76 = v71[2];
          v75 = v71[3];
          swift_bridgeObjectRetain();
          if (v76 >= v75 >> 1)
          {
            sub_23C7FD468();
            v71 = (_QWORD *)v180[0];
          }
          v72 += 2;
          v181[0] = v74;
          v181[1] = v73;
          sub_23C800B0C((uint64_t)v181);
          sub_23C800B48(v181, v179);
          v71[2] = v76 + 1;
          memcpy(&v71[21 * v76 + 4], v179, 0xA3uLL);
          --v70;
        }
        while (v70);
      }
      else
      {
        sub_23C812E48((uint64_t)v219);
        v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v77 = v71[2];
      if (!v77)
      {
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_78:
        sub_23C9117B4();
        __break(1u);
        swift_bridgeObjectRelease();
        __break(1u);
        JUMPOUT(0x23C80EAB4);
      }
      sub_23C8E6210(0, 1, v71);
      memcpy(v179, v71 + 4, 0xA3uLL);
      if (v77 == 1)
      {
        sub_23C811F5C((uint64_t)v179, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
        swift_bridgeObjectRelease();
        v78 = v179;
      }
      else
      {
        v174[0] = v71;
        sub_23C8130C0((uint64_t)v174);
        sub_23C800B48(v174, v180);
        v78 = v180;
      }
      memcpy(v181, v78, 0xA3uLL);
      v172[0] = 0x7361625F62647267;
      v172[1] = 0xE900000000000065;
      sub_23C813104((uint64_t)v172);
      sub_23C813130(v172, v173);
      v79 = (_BYTE *)swift_allocObject();
      memcpy(v79 + 16, v181, 0xA3uLL);
      memcpy(v79 + 184, v173, 0xA2uLL);
      v79[346] = 0;
      v174[0] = v79;
      sub_23C813280((uint64_t)v174);
      sub_23C800B48(v174, v180);
      memcpy(v251, v180, 0xA3uLL);
      type metadata accessor for TableAlias();
      v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = 0u;
      *(_OWORD *)(v80 + 32) = 0u;
      *(_BYTE *)(v80 + 48) = 0;
      v171 = v139;
      swift_bridgeObjectRetain();
      sub_23C811F5C((uint64_t)v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
      sub_23C810E70((uint64_t *)&v171, v80, v251);
      v170[0] = v171;
      sub_23C8B583C(v81, v82, v83, v84, v85, v86, v87, (uint64_t)&v220);
      swift_bridgeObjectRelease();
      swift_retain();
      v88 = sub_23C80B308(v168, v80);
      v89 = swift_allocObject();
      *(_QWORD *)(v89 + 16) = v88;
      v90 = swift_allocObject();
      *(_OWORD *)(v90 + 16) = v222;
      *(_QWORD *)(v90 + 32) = sub_23C813B44;
      *(_QWORD *)(v90 + 40) = v89;
      swift_release();
      *(_OWORD *)v169 = v220;
      *(_QWORD *)&v169[16] = v221;
      *(_QWORD *)&v169[24] = sub_23C813B58;
      *(_QWORD *)&v169[32] = v90;
      *(_OWORD *)&v169[40] = v223;
      *(_QWORD *)&v169[56] = v224;
      v169[64] = v225;
      *(_OWORD *)&v169[72] = v226;
      *(_OWORD *)&v169[88] = v227;
      v169[104] = v228;
      *(_OWORD *)&v169[112] = v229;
      *(_OWORD *)&v169[128] = v230;
      *(_OWORD *)&v169[144] = v231;
      v169[160] = v232;
      v169[161] = v233;
      memcpy(v250, v169, sizeof(v250));
      sub_23C80BD90(v249, v170);
      swift_release();
      sub_23C812EE4((uint64_t)v219);
      sub_23C811F5C((uint64_t)v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
      sub_23C812EE4((uint64_t)v169);
      sub_23C8132C8((uint64_t)__src);
      memcpy(v198, v170, sizeof(v198));
    }
    else
    {
LABEL_15:
      sub_23C835564(v138, v20, __src);
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, 0xA3uLL);
      type metadata accessor for TableAlias();
      v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = 0u;
      *(_OWORD *)(v43 + 32) = 0u;
      *(_BYTE *)(v43 + 48) = 0;
      __src[0] = (uint64_t)v139;
      swift_bridgeObjectRetain();
      sub_23C810E70(__src, v43, __dst);
      v179[0] = __src[0];
      sub_23C8B583C(v44, v45, v46, v47, v48, v49, v50, (uint64_t)&v234);
      swift_bridgeObjectRelease();
      swift_retain();
      v51 = sub_23C80B308(v21, v43);
      v52 = swift_allocObject();
      *(_QWORD *)(v52 + 16) = v51;
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v236;
      *(_QWORD *)(v53 + 32) = sub_23C812E2C;
      *(_QWORD *)(v53 + 40) = v52;
      swift_release();
      sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
      LOBYTE(v179[0]) = v247;
      *(_OWORD *)v198 = v234;
      *(_QWORD *)&v198[16] = v235;
      *(_QWORD *)&v198[24] = sub_23C813B58;
      *(_OWORD *)&v198[40] = v237;
      *(_QWORD *)&v198[32] = v53;
      *(_QWORD *)&v198[56] = v238;
      v198[64] = v239;
      *(_OWORD *)&v198[72] = v240;
      *(_OWORD *)&v198[88] = v241;
      v198[104] = v242;
      *(_OWORD *)&v198[112] = v243;
      *(_OWORD *)&v198[128] = v244;
      *(_OWORD *)&v198[144] = v245;
      v198[160] = v246;
      v198[161] = v247;
    }
    memcpy(v248, v198, sizeof(v248));
    sub_23C812E48((uint64_t)v198);
    sub_23C82BBE8();
    v91 = v138;
    v93 = v92;
    v130 = 0;
    sub_23C812EE4((uint64_t)v198);
    v94 = *(_QWORD *)(v21 + 16);
    if (v94)
    {
      v179[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v95 = v179[0];
      v96 = v21 + 40;
      do
      {
        __src[0] = 0x5F62647267;
        __src[1] = 0xE500000000000000;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        swift_bridgeObjectRelease();
        v97 = __src[0];
        v98 = __src[1];
        v179[0] = v95;
        v99 = *(_QWORD *)(v95 + 16);
        if (v99 >= *(_QWORD *)(v95 + 24) >> 1)
        {
          sub_23C7E649C();
          v95 = v179[0];
        }
        v96 += 16;
        *(_QWORD *)(v95 + 16) = v99 + 1;
        v100 = v95 + 16 * v99;
        *(_QWORD *)(v100 + 32) = v97;
        *(_QWORD *)(v100 + 40) = v98;
        --v94;
      }
      while (v94);
      swift_bridgeObjectRelease();
      v91 = v138;
    }
    else
    {
      swift_bridgeObjectRelease();
      v95 = MEMORY[0x24BEE4AF8];
    }
    v145 = sub_23C810D18(v95, v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v7 = 0;
    v101 = sub_23C80B4A4((uint64_t)v254, v128);
    swift_bridgeObjectRelease();
    v136 = *(_QWORD *)(v101 + 16);
    v102 = v139[2];
    v133 = (uint64_t *)(v101 + 32);
    swift_bridgeObjectRetain();
    v5 = 0;
    v154 = v102;
    while (1)
    {
      if (v137)
      {
        v163 = (_QWORD *)MEMORY[0x242625290](v5, v91);
      }
      else
      {
        if (v5 >= *(_QWORD *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_73;
        v163 = *(_QWORD **)(v138 + 32 + 8 * v5);
        swift_retain();
      }
      v103 = __OFADD__(v5, 1);
      v142 = (_QWORD *)(v5 + 1);
      v5 = v145;
      if (v103)
        break;
      if (v136)
      {
        v179[0] = MEMORY[0x24BEE4AF8];
        sub_23C7E56C8();
        v254 = v163 + 2;
        v104 = v136;
        v105 = v179[0];
        v106 = v133;
        do
        {
          v107 = *v106++;
          v108 = v163[5];
          v109 = v163[6];
          sub_23C7E7E34(v254, v108);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v109 + 48))(__src, v107, v108, v109);
          v110 = __src[0];
          v111 = __src[1];
          v112 = __src[2];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v179[0] = v105;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_23C7E56C8();
            v105 = v179[0];
          }
          v114 = *(_QWORD *)(v105 + 16);
          if (v114 >= *(_QWORD *)(v105 + 24) >> 1)
          {
            sub_23C7E56C8();
            v105 = v179[0];
          }
          *(_QWORD *)(v105 + 16) = v114 + 1;
          v115 = v105 + 24 * v114;
          *(_QWORD *)(v115 + 32) = v110;
          *(_QWORD *)(v115 + 40) = v111;
          *(_BYTE *)(v115 + 48) = v112;
          --v104;
        }
        while (v104);
        v5 = v145;
        v102 = v154;
      }
      if (*(_QWORD *)(v5 + 16))
      {
        v116 = sub_23C8226BC();
        v7 = MEMORY[0x24BEE4AF8];
        if ((v117 & 1) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v145 + 56) + 8 * v116);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v7 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      if (v102)
      {
        v180[0] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_23C7E649C();
        memcpy(__src, v139 + 4, 0xE3uLL);
        v254 = (_QWORD *)__src[0];
        if ((__src[28] & 0x10000) != 0)
          __asm { BR              X9 }
        __asm { BR              X9 }
      }
      v118 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v91 = v138;
      swift_beginAccess();
      sub_23C8F7B94(v7, v118);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = (unint64_t)v142;
      if (v142 == (_QWORD *)v134)
      {
        swift_bridgeObjectRelease();
        sub_23C812EE4((uint64_t)v198);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v127 == v124)
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
        sub_23C8E6210(v127, 1, v129);
        v119 = *(_QWORD *)(v129 + 32 + 8 * v127);
        sub_23C8E6210(0, 1, v119);
        v139 = (_QWORD *)v119;
        v11 = *(char *)(v119 + 88);
        ++v127;
        v5 = v125;
        if (v11 < 0)
          goto LABEL_78;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    swift_bridgeObjectRetain();
    v9 = sub_23C9117C0();
    v3 = v138;
    if (!v9)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_23C812DD0(v12, v13, v14, v15, v11);
}

void sub_23C80EAD4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  QueryInterfaceRequest.makePreparedRequest(_:forSingleResult:)(a1, a2, a3);
}

void sub_23C80EAE8()
{
  QueryInterfaceRequest.fetchCount(_:)();
}

void QueryInterfaceRequest.select(_:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811DF4, a1);
}

__n128 sub_23C80EB0C(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  _BYTE __dst[162];
  _BYTE v23[176];
  int v24;
  char v25;

  memcpy(__dst, __src, sizeof(__dst));
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23C812DB8;
  *(_QWORD *)(v7 + 24) = v6;
  swift_retain();
  sub_23C812E48((uint64_t)__dst);
  swift_release();
  v8 = *(_QWORD *)&__dst[16];
  v18 = *(_OWORD *)__dst;
  v19 = *(_OWORD *)&__dst[40];
  v9 = *(_QWORD *)&__dst[56];
  v10 = __dst[64];
  v11 = __dst[104];
  v20 = *(__n128 *)&__dst[128];
  v21 = *(_OWORD *)&__dst[112];
  v12 = *(_QWORD *)&__dst[144];
  v13 = *(_QWORD *)&__dst[152];
  v24 = __dst[160];
  v14 = __dst[161];
  v25 = __dst[161];
  memcpy(v23, __src, 0xA2uLL);
  v16 = *(_OWORD *)&__dst[88];
  v17 = *(_OWORD *)&__dst[72];
  sub_23C812EE4((uint64_t)v23);
  *(_OWORD *)__src = v18;
  *((_QWORD *)__src + 2) = v8;
  *((_QWORD *)__src + 3) = sub_23C7FA730;
  *((_QWORD *)__src + 4) = v7;
  *(_OWORD *)(__src + 40) = v19;
  *((_QWORD *)__src + 7) = v9;
  __src[64] = v10;
  *(_OWORD *)(__src + 72) = v17;
  *(_OWORD *)(__src + 88) = v16;
  __src[104] = v11;
  result = v20;
  *((_OWORD *)__src + 7) = v21;
  *((__n128 *)__src + 8) = v20;
  *((_QWORD *)__src + 18) = v12;
  *((_QWORD *)__src + 19) = v13;
  __src[160] = v24;
  __src[161] = v14;
  return result;
}

void QueryInterfaceRequest.asRequest<A>(of:)(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C7E0718(a1, v1);
  sub_23C812E48((uint64_t)v3);
}

uint64_t QueryInterfaceRequest.select<A>(sql:arguments:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[24];

  v8 = *a3;
  v7 = a3[1];
  sub_23C7E79A8(&qword_25430D128);
  v9 = sub_23C7DB388();
  *(_OWORD *)(v9 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v9 + 56) = &type metadata for SQL;
  *(_QWORD *)(v9 + 64) = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v10 = sub_23C7DB388();
  *(_OWORD *)(v10 + 16) = xmmword_23C912A20;
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = v8;
  v12[3] = v7;
  sub_23C7F96B0(v12);
  sub_23C7F96E0(v12, (void *)(v10 + 32));
  *(_QWORD *)(v9 + 32) = v10;
  sub_23C7DBBB0();
  sub_23C7E0808();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(a4);
  return swift_bridgeObjectRelease();
}

uint64_t QueryInterfaceRequest.select<A>(literal:as:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  sub_23C7E79A8(&qword_25430D128);
  v4 = sub_23C7DB388();
  *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v4 + 56) = &type metadata for SQL;
  *(_QWORD *)(v4 + 64) = &protocol witness table for SQL;
  *(_QWORD *)(v4 + 32) = v3;
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(a2);
  return swift_bridgeObjectRelease();
}

void QueryInterfaceRequest.annotated(with:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811E0C, a1);
}

__n128 sub_23C80EE5C(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20;
  __int128 v21;
  _BYTE __dst[162];
  _BYTE v23[176];
  int v24;
  char v25;

  memcpy(__dst, __src, sizeof(__dst));
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = *(_OWORD *)&__dst[24];
  *(_QWORD *)(v7 + 32) = sub_23C813BCC;
  *(_QWORD *)(v7 + 40) = v6;
  v8 = *(_QWORD *)&__dst[16];
  v17 = *(_OWORD *)__dst;
  v18 = *(_OWORD *)&__dst[40];
  v9 = *(_QWORD *)&__dst[56];
  v10 = __dst[64];
  v11 = __dst[104];
  v20 = *(__n128 *)&__dst[128];
  v21 = *(_OWORD *)&__dst[112];
  v12 = *(_QWORD *)&__dst[144];
  v19 = *(_QWORD *)&__dst[152];
  v24 = __dst[160];
  v13 = __dst[161];
  v25 = __dst[161];
  memcpy(v23, __src, 0xA2uLL);
  swift_retain();
  v15 = *(_OWORD *)&__dst[88];
  v16 = *(_OWORD *)&__dst[72];
  sub_23C812E48((uint64_t)__dst);
  sub_23C812EE4((uint64_t)v23);
  *(_OWORD *)__src = v17;
  *((_QWORD *)__src + 2) = v8;
  *((_QWORD *)__src + 3) = sub_23C812D9C;
  *((_QWORD *)__src + 4) = v7;
  *(_OWORD *)(__src + 40) = v18;
  *((_QWORD *)__src + 7) = v9;
  __src[64] = v10;
  *(_OWORD *)(__src + 72) = v16;
  *(_OWORD *)(__src + 88) = v15;
  __src[104] = v11;
  result = v20;
  *((_OWORD *)__src + 7) = v21;
  *((__n128 *)__src + 8) = v20;
  *((_QWORD *)__src + 18) = v12;
  *((_QWORD *)__src + 19) = v19;
  __src[160] = v24;
  __src[161] = v13;
  return result;
}

void sub_23C80EFD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_23C7DEF54(a1, a2);
  if (!v2)
  {
    sub_23C80B1E4(v3);
    sub_23C7DE934();
  }
  sub_23C7E204C();
  sub_23C7EDFF0();
}

uint64_t sub_23C80F028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Interface;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _OWORD *v15;
  unint64_t v16;
  unsigned __int8 v17;

  Interface = QueryInterfaceRequest.databaseTableName.getter();
  Database.primaryKey(_:)(Interface, v5, &v15);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return a2;
  }
  swift_bridgeObjectRelease();
  v6 = (uint64_t)v15;
  v7 = v16;
  v8 = v17;
  if (v17)
  {
    if (v17 == 1)
      v9 = v15;
    else
      v9 = &unk_250D84A98;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_23C912A20;
    *((_QWORD *)v9 + 4) = v6;
    *((_QWORD *)v9 + 5) = v7;
  }
  v10 = *((_QWORD *)v9 + 2);
  sub_23C7F8E30(v6, v7, v8);
  swift_bridgeObjectRelease();
  if (v10 == 1)
  {
    sub_23C7E79A8(&qword_25430D128);
    a2 = swift_allocObject();
    *(_OWORD *)(a2 + 16) = xmmword_23C912A20;
    if (v8)
    {
      if (v8 == 1)
        v11 = (_OWORD *)v6;
      else
        v11 = &unk_250D84A68;
    }
    else
    {
      sub_23C7E79A8(&qword_25430DA10);
      v11 = (_OWORD *)swift_allocObject();
      v11[1] = xmmword_23C912A20;
      *((_QWORD *)v11 + 4) = v6;
      *((_QWORD *)v11 + 5) = v7;
    }
    if (*((_QWORD *)v11 + 2))
    {
      v13 = *((_QWORD *)v11 + 4);
      v12 = *((_QWORD *)v11 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 56) = &type metadata for Column;
      *(_QWORD *)(a2 + 64) = &protocol witness table for Column;
      *(_QWORD *)(a2 + 32) = v13;
      *(_QWORD *)(a2 + 40) = v12;
      return a2;
    }
    __break(1u);
  }
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_23C911634();
  sub_23C910F5C();
  QueryInterfaceRequest.databaseTableName.getter();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t QueryInterfaceRequest.databaseTableName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C7DB3D4();
  return v1;
}

uint64_t sub_23C80F270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Interface;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _OWORD *v15;
  unint64_t v16;
  unsigned __int8 v17;

  Interface = QueryInterfaceRequest.databaseTableName.getter();
  Database.primaryKey(_:)(Interface, v5, &v15);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return a2;
  }
  swift_bridgeObjectRelease();
  v6 = (uint64_t)v15;
  v7 = v16;
  v8 = v17;
  if (v17)
  {
    if (v17 == 1)
      v9 = v15;
    else
      v9 = &unk_250D84A38;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_23C912A20;
    *((_QWORD *)v9 + 4) = v6;
    *((_QWORD *)v9 + 5) = v7;
  }
  v10 = *((_QWORD *)v9 + 2);
  sub_23C7F8E30(v6, v7, v8);
  swift_bridgeObjectRelease();
  if (v10 == 1)
  {
    sub_23C7E79A8(&qword_25430D128);
    a2 = swift_allocObject();
    *(_OWORD *)(a2 + 16) = xmmword_23C912A20;
    if (v8)
    {
      if (v8 == 1)
        v11 = (_OWORD *)v6;
      else
        v11 = &unk_250D84A08;
    }
    else
    {
      sub_23C7E79A8(&qword_25430DA10);
      v11 = (_OWORD *)swift_allocObject();
      v11[1] = xmmword_23C912A20;
      *((_QWORD *)v11 + 4) = v6;
      *((_QWORD *)v11 + 5) = v7;
    }
    if (*((_QWORD *)v11 + 2))
    {
      v13 = *((_QWORD *)v11 + 4);
      v12 = *((_QWORD *)v11 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 56) = &type metadata for Column;
      *(_QWORD *)(a2 + 64) = &protocol witness table for Column;
      *(_QWORD *)(a2 + 32) = v13;
      *(_QWORD *)(a2 + 40) = v12;
      return a2;
    }
    __break(1u);
  }
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_23C911634();
  sub_23C910F5C();
  QueryInterfaceRequest.databaseTableName.getter();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

void QueryInterfaceRequest.filter(_:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811E24, a1);
}

__n128 sub_23C80F49C(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  char v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __n128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  _BYTE v25[168];
  _OWORD __dst[11];

  memcpy(__dst, __src, 0xA2uLL);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = *((_QWORD *)&__dst[2] + 1);
  v8 = sub_23C812D7C;
  if (*((_QWORD *)&__dst[2] + 1))
  {
    v9 = *(_QWORD *)&__dst[3];
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v7;
    v10[3] = v9;
    v10[4] = sub_23C812D7C;
    v10[5] = v6;
    v8 = sub_23C812CE0;
    v6 = (uint64_t)v10;
  }
  v19 = __dst[0];
  v11 = *(_QWORD *)&__dst[1];
  v12 = *((_QWORD *)&__dst[3] + 1);
  v13 = __dst[4];
  v23 = BYTE8(__dst[6]);
  v21 = (__n128)__dst[8];
  v22 = __dst[7];
  v14 = __dst[9];
  v20 = __dst[10];
  v15 = BYTE1(__dst[10]);
  memcpy(v25, __src, 0xA2uLL);
  swift_retain();
  v24 = *(_OWORD *)((char *)&__dst[4] + 8);
  v17 = *(_OWORD *)((char *)&__dst[1] + 8);
  v18 = *(_OWORD *)((char *)&__dst[5] + 8);
  sub_23C812E48((uint64_t)__dst);
  sub_23C812EE4((uint64_t)v25);
  *(_OWORD *)__src = v19;
  *((_QWORD *)__src + 2) = v11;
  *(_OWORD *)(__src + 24) = v17;
  *((_QWORD *)__src + 5) = v8;
  *((_QWORD *)__src + 6) = v6;
  *((_QWORD *)__src + 7) = v12;
  __src[64] = v13;
  *(_OWORD *)(__src + 72) = v24;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v23;
  result = v21;
  *((_OWORD *)__src + 7) = v22;
  *((__n128 *)__src + 8) = v21;
  *((_OWORD *)__src + 9) = v14;
  __src[160] = v20;
  __src[161] = v15;
  return result;
}

void QueryInterfaceRequest.order(_:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811E3C, a1);
}

__n128 sub_23C80F644(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  _BYTE __dst[162];
  _BYTE v24[176];
  int v25;
  char v26;

  memcpy(__dst, __src, sizeof(__dst));
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  sub_23C7E79A8(&qword_25430CBC8);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23C912A20;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_23C812D30;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v7 + 32) = sub_23C812D1C;
  *(_QWORD *)(v7 + 40) = v8;
  *(_BYTE *)(v7 + 48) = 0;
  swift_retain();
  sub_23C812E48((uint64_t)__dst);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)&__dst[16];
  v10 = *(_QWORD *)&__dst[40];
  v11 = *(_QWORD *)&__dst[48];
  v12 = __dst[104];
  v22 = *(_OWORD *)&__dst[112];
  v20 = *(_OWORD *)__dst;
  v21 = *(__n128 *)&__dst[128];
  v13 = *(_QWORD *)&__dst[144];
  v14 = *(_QWORD *)&__dst[152];
  v25 = __dst[160];
  v15 = __dst[161];
  v26 = __dst[161];
  memcpy(v24, __src, 0xA2uLL);
  v19 = *(_OWORD *)&__dst[72];
  v17 = *(_OWORD *)&__dst[24];
  v18 = *(_OWORD *)&__dst[88];
  sub_23C812EE4((uint64_t)v24);
  *(_OWORD *)__src = v20;
  *((_QWORD *)__src + 2) = v9;
  *(_OWORD *)(__src + 24) = v17;
  *((_QWORD *)__src + 5) = v10;
  *((_QWORD *)__src + 6) = v11;
  *((_QWORD *)__src + 7) = v7;
  __src[64] = 0;
  *(_OWORD *)(__src + 72) = v19;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v12;
  result = v21;
  *((_OWORD *)__src + 7) = v22;
  *((__n128 *)__src + 8) = v21;
  *((_QWORD *)__src + 18) = v13;
  *((_QWORD *)__src + 19) = v14;
  __src[160] = v25;
  __src[161] = v15;
  return result;
}

void sub_23C80F7E8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[8];

  v6 = sub_23C7DEF54(a1, a2);
  if (!v4)
  {
    sub_23C80B97C(v6, (uint64_t)v7, a4);
    sub_23C7DE934();
  }
  sub_23C7E204C();
  sub_23C7EDFF0();
}

void QueryInterfaceRequest.reversed()()
{
  sub_23C810194();
}

_BYTE *sub_23C80F844(_BYTE *result)
{
  char v1;
  char v2;

  v1 = result[104];
  v2 = result[161];
  result[64] = (result[64] & 1) == 0;
  result[104] = v1;
  result[161] = v2;
  return result;
}

void QueryInterfaceRequest.unordered()()
{
  sub_23C810194();
}

__n128 sub_23C80F880(char *__src)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD __dst[11];
  int v20;

  memcpy(__dst, __src, 0xA2uLL);
  v17 = *((_QWORD *)&__dst[9] + 1);
  v18 = *(_QWORD *)&__dst[9];
  v20 = LOBYTE(__dst[10]);
  v2 = BYTE1(__dst[10]);
  v15 = __dst[7];
  v16 = (__n128)__dst[8];
  v14 = BYTE8(__dst[6]);
  v12 = *(_QWORD *)&__dst[3];
  v13 = *((_QWORD *)&__dst[2] + 1);
  v3 = *(_QWORD *)&__dst[1];
  v9 = *(_OWORD *)((char *)&__dst[1] + 8);
  v10 = __dst[0];
  v11 = *(_OWORD *)((char *)&__dst[4] + 8);
  sub_23C812E48((uint64_t)__dst);
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x24BEE4AF8];
  sub_23C910DAC();
  v5 = sub_23C85BE98();
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C812EE4((uint64_t)__dst);
  *(_OWORD *)__src = v10;
  *((_QWORD *)__src + 2) = v3;
  *(_OWORD *)(__src + 24) = v9;
  *((_QWORD *)__src + 5) = v13;
  *((_QWORD *)__src + 6) = v12;
  *((_QWORD *)__src + 7) = v4;
  __src[64] = 0;
  *(_OWORD *)(__src + 72) = v11;
  *((_QWORD *)__src + 11) = v5;
  *((_QWORD *)__src + 12) = v7;
  __src[104] = v14;
  result = v16;
  *((_OWORD *)__src + 7) = v15;
  *((__n128 *)__src + 8) = v16;
  *((_QWORD *)__src + 18) = v18;
  *((_QWORD *)__src + 19) = v17;
  __src[160] = v20;
  __src[161] = v2;
  return result;
}

void QueryInterfaceRequest.group(_:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811E84, a1);
}

__n128 sub_23C80FA2C(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  _BYTE __dst[162];
  _BYTE v24[176];
  int v25;
  char v26;

  memcpy(__dst, __src, sizeof(__dst));
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23C812CFC;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = *(_QWORD *)&__dst[112];
  swift_retain();
  sub_23C812E48((uint64_t)__dst);
  sub_23C7F1754(v8);
  v9 = *(_QWORD *)&__dst[16];
  v20 = *(_OWORD *)__dst;
  v21 = *(_OWORD *)&__dst[40];
  v10 = *(_QWORD *)&__dst[56];
  v11 = __dst[64];
  v12 = __dst[104];
  v22 = *(__n128 *)&__dst[128];
  v13 = *(_QWORD *)&__dst[144];
  v14 = *(_QWORD *)&__dst[152];
  v25 = __dst[160];
  v15 = __dst[161];
  v26 = __dst[161];
  memcpy(v24, __src, 0xA2uLL);
  v19 = *(_OWORD *)&__dst[72];
  v17 = *(_OWORD *)&__dst[24];
  v18 = *(_OWORD *)&__dst[88];
  sub_23C812EE4((uint64_t)v24);
  *(_OWORD *)__src = v20;
  *((_QWORD *)__src + 2) = v9;
  *(_OWORD *)(__src + 24) = v17;
  *(_OWORD *)(__src + 40) = v21;
  *((_QWORD *)__src + 7) = v10;
  __src[64] = v11;
  *(_OWORD *)(__src + 72) = v19;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v12;
  *((_QWORD *)__src + 14) = sub_23C812D1C;
  *((_QWORD *)__src + 15) = v7;
  result = v22;
  *((__n128 *)__src + 8) = v22;
  *((_QWORD *)__src + 18) = v13;
  *((_QWORD *)__src + 19) = v14;
  __src[160] = v25;
  __src[161] = v15;
  return result;
}

void QueryInterfaceRequest.having(_:)(uint64_t a1@<X8>)
{
  sub_23C80FBBC((uint64_t (*)(uint64_t))sub_23C811E9C, a1);
}

void sub_23C80FBBC(uint64_t (*a1)(uint64_t)@<X3>, uint64_t a2@<X8>)
{
  const void *v2;
  _BYTE v5[168];

  sub_23C7E0718(v5, v2);
  sub_23C7E4CA4(a1, a2);
  sub_23C7E954C();
}

__n128 sub_23C80FC28(char *__src, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  _BYTE v26[168];
  _OWORD __dst[11];

  memcpy(__dst, __src, 0xA2uLL);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = *(_QWORD *)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v8 = *((_QWORD *)&__dst[8] + 1);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = sub_23C813BB8;
    v9[5] = v6;
    v24 = sub_23C812CE0;
    v6 = (uint64_t)v9;
  }
  else
  {
    v24 = sub_23C813BB8;
  }
  v10 = *(_QWORD *)&__dst[1];
  v18 = __dst[0];
  v19 = *(_OWORD *)((char *)&__dst[2] + 8);
  v11 = *((_QWORD *)&__dst[3] + 1);
  v12 = __dst[4];
  v13 = __dst[7];
  v22 = *((_QWORD *)&__dst[9] + 1);
  v23 = *(_QWORD *)&__dst[9];
  v20 = BYTE8(__dst[6]);
  v21 = __dst[10];
  v14 = BYTE1(__dst[10]);
  memcpy(v26, __src, 0xA2uLL);
  swift_retain();
  v25 = *(_OWORD *)((char *)&__dst[4] + 8);
  v16 = *(_OWORD *)((char *)&__dst[1] + 8);
  v17 = *(__n128 *)((char *)&__dst[5] + 8);
  sub_23C812E48((uint64_t)__dst);
  sub_23C812EE4((uint64_t)v26);
  *(_OWORD *)__src = v18;
  *((_QWORD *)__src + 2) = v10;
  *(_OWORD *)(__src + 24) = v16;
  *(_OWORD *)(__src + 40) = v19;
  *((_QWORD *)__src + 7) = v11;
  __src[64] = v12;
  *(_OWORD *)(__src + 72) = v25;
  result = v17;
  *(__n128 *)(__src + 88) = v17;
  __src[104] = v20;
  *((_OWORD *)__src + 7) = v13;
  *((_QWORD *)__src + 16) = v24;
  *((_QWORD *)__src + 17) = v6;
  *((_QWORD *)__src + 18) = v23;
  *((_QWORD *)__src + 19) = v22;
  __src[160] = v21;
  __src[161] = v14;
  return result;
}

_QWORD *sub_23C80FDD0(uint64_t a1, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  result = a2(v6);
  if (!v2)
  {
    v4 = v7;
    v5 = v8;
    sub_23C7E7E34(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return (_QWORD *)_s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
  }
  return result;
}

uint64_t QueryInterfaceRequest._including(all:)()
{
  return sub_23C80FF0C();
}

uint64_t QueryInterfaceRequest._including(optional:)()
{
  return sub_23C80FF0C();
}

void *sub_23C80FE6C(void *a1, uint64_t a2)
{
  _BYTE v5[168];
  _BYTE v6[168];
  uint64_t v7;

  sub_23C7E0718(v5, a1);
  v7 = a2;
  sub_23C85CF78();
  sub_23C812EE4((uint64_t)v5);
  return sub_23C7E0718(a1, v6);
}

uint64_t QueryInterfaceRequest._including(required:)()
{
  return sub_23C80FF0C();
}

uint64_t QueryInterfaceRequest._joining(optional:)()
{
  return sub_23C80FF0C();
}

uint64_t QueryInterfaceRequest._joining(required:)()
{
  return sub_23C80FF0C();
}

uint64_t sub_23C80FF0C()
{
  const void *v0;
  _BYTE v2[168];

  sub_23C7E0718(v2, v0);
  return sub_23C7E07D8();
}

void *sub_23C80FF6C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  uint64_t v4;
  void *result;
  _BYTE v9[168];
  uint64_t v10;
  _BYTE v11[168];

  sub_23C7E0718(v11, a1);
  v10 = a2;
  sub_23C7DBBB0();
  a4(&v10);
  if (v4)
  {
    result = (void *)swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    sub_23C85CF78();
    sub_23C7DB3DC();
    sub_23C812EE4((uint64_t)v11);
    return sub_23C7E0718(a1, v9);
  }
  return result;
}

__n128 sub_23C810030(char *__src, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD __dst[11];
  int v25;

  memcpy(__dst, __src, 0xA2uLL);
  v22 = *((_QWORD *)&__dst[9] + 1);
  v23 = *(_QWORD *)&__dst[9];
  v25 = LOBYTE(__dst[10]);
  v4 = BYTE1(__dst[10]);
  v20 = __dst[7];
  v21 = (__n128)__dst[8];
  v19 = BYTE8(__dst[6]);
  v5 = *((_QWORD *)&__dst[3] + 1);
  v6 = __dst[4];
  v7 = __dst[0];
  v8 = *(_QWORD *)&__dst[1];
  v17 = *(_OWORD *)((char *)&__dst[4] + 8);
  v18 = *(_OWORD *)((char *)&__dst[2] + 8);
  v15 = *(_OWORD *)((char *)&__dst[1] + 8);
  v16 = *(_OWORD *)((char *)&__dst[5] + 8);
  sub_23C812E48((uint64_t)__dst);
  v9 = sub_23C85C90C(a2, v7, *((uint64_t *)&v7 + 1), v8);
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C812EE4((uint64_t)__dst);
  *(_QWORD *)__src = v9;
  *((_QWORD *)__src + 1) = v11;
  *((_QWORD *)__src + 2) = v13;
  *(_OWORD *)(__src + 24) = v15;
  *(_OWORD *)(__src + 40) = v18;
  *((_QWORD *)__src + 7) = v5;
  __src[64] = v6;
  *(_OWORD *)(__src + 72) = v17;
  *(_OWORD *)(__src + 88) = v16;
  __src[104] = v19;
  result = v21;
  *((_OWORD *)__src + 7) = v20;
  *((__n128 *)__src + 8) = v21;
  *((_QWORD *)__src + 18) = v23;
  *((_QWORD *)__src + 19) = v22;
  __src[160] = v25;
  __src[161] = v4;
  return result;
}

void QueryInterfaceRequest.distinct()()
{
  sub_23C810194();
}

void sub_23C810194()
{
  const void *v0;
  _BYTE v1[168];

  sub_23C7E0718(v1, v0);
  sub_23C7E07D8();
  sub_23C7E07F4();
}

__n128 sub_23C8101E0(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  a1[9] = result;
  a1[10].n128_u16[0] = v2;
  return result;
}

double sub_23C8101F8(char *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_23C810030(a1, *(_QWORD *)(v1 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_23C810210(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE __dst[176];
  _BYTE v11[176];
  _BYTE v12[176];

  v4 = *a2;
  v3 = a2[1];
  memcpy(__dst, a2 + 2, 0xABuLL);
  sub_23C8133B0((uint64_t)__dst);
  sub_23C8133B0((uint64_t)__dst);
  swift_bridgeObjectRetain();
  sub_23C834D0C();
  sub_23C81348C((uint64_t)&v9, (uint64_t)v11);
  sub_23C81348C((uint64_t)v11, (uint64_t)v12);
  if (sub_23C8134D4((uint64_t)v12) == 1)
  {
    swift_bridgeObjectRetain();
    sub_23C7F1248();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
    sub_23C7F1494();
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(v6 + 16) = v5 + 1;
    v7 = v6 + 16 * v5;
    *(_QWORD *)(v7 + 32) = v4;
    *(_QWORD *)(v7 + 40) = v3;
    sub_23C8134EC((uint64_t)__dst);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 72) = v6;
  }
  else
  {
    sub_23C8135C8((uint64_t)v11);
    sub_23C8134EC((uint64_t)__dst);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C810320(uint64_t a1)
{
  uint64_t v1;

  return sub_23C810210(a1, *(uint64_t **)(v1 + 32));
}

uint64_t sub_23C81033C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[10])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DF314();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[19])
    swift_release();
  if (v0[21])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8103C4(uint64_t a1)
{
  uint64_t v1;

  return sub_23C80F028(a1, v1 + 40);
}

uint64_t sub_23C8103E4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[11])
    swift_release();
  swift_bridgeObjectRelease();
  sub_23C7DF314();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[20])
    swift_release();
  if (v0[22])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C81046C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C80F270(a1, v1 + 48);
}

uint64_t sub_23C81048C(uint64_t result)
{
  __int16 v1;
  uint64_t v2;

  v1 = *(_WORD *)(result + 160);
  v2 = *(_QWORD *)(result + 104) & 1;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v2;
  *(_WORD *)(result + 160) = v1 & 0x1FF | 0x8000;
  return result;
}

void *sub_23C8104B8(const void *a1, void *a2)
{
  initializeWithTake for SQLSubquery.Impl(a2, a1);
  return a2;
}

void sub_23C8104F8(uint64_t a1@<X8>)
{
  QueryInterfaceRequest.limit(_:offset:)(a1);
}

uint64_t sub_23C810500@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  return QueryInterfaceRequest.with<A>(_:)(__src, a2);
}

uint64_t QueryInterfaceRequest.isEmpty(_:)(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[23];
  _BYTE v47[168];

  sub_23C7E0718(v47, v2);
  v5 = MEMORY[0x24BEE4AF8];
  sub_23C7EE664();
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8 >= *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_23C7E6528();
    v7 = v16;
  }
  v46[0] = 0x205443454C4553;
  v46[1] = 0xE700000000000000;
  v46[2] = v5;
  v46[3] = MEMORY[0x24BEE4B00];
  sub_23C7F96B0(v46);
  *(_QWORD *)(v7 + 16) = v8 + 1;
  sub_23C7E68C8(v7 + 184 * v8, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46[0]);
  sub_23C7E0718(v46, v47);
  SQLSubqueryable.exists()(a2, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, v9);
  sub_23C811F5C((uint64_t)&v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    sub_23C7E6528();
    v7 = v17;
  }
  sub_23C7E3190(v46, &v25);
  sub_23C7FCC1C(v46);
  *(_QWORD *)(v7 + 16) = v10 + 1;
  sub_23C7E68C8(v7 + 184 * v10, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46[0]);
  sub_23C811F5C((uint64_t)&v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  sub_23C8106D0(v7, (uint64_t)&v18);
  v11 = sub_23C7E204C();
  v13 = sub_23C8117E4(v11, v12);
  result = sub_23C7E7938((uint64_t)&v18, &qword_256BCBDC8);
  if (v3)
    return v15;
  if (v13 != 2)
    return (v13 & 1) == 0;
  __break(1u);
  return result;
}

uint64_t sub_23C8106D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[40];
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  sub_23C812C74((uint64_t)v10, (uint64_t)v9, &qword_25430DBD0);
  v6 = 0u;
  v7 = 0u;
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = a1;
  sub_23C811CFC((uint64_t)v9, (uint64_t)&v6);
  *(_BYTE *)(a2 + 48) = 2;
  v4 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v8;
  return sub_23C7E7938((uint64_t)v10, &qword_25430DBD0);
}

void QueryInterfaceRequest.deleteAll(_:)()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[184];
  uint64_t v11[21];
  _BYTE v12[168];
  _QWORD v13[21];
  char v14;
  uint64_t v15;

  sub_23C7E0718(v11, v0);
  sub_23C812E48((uint64_t)v11);
  sub_23C812E48((uint64_t)v11);
  sub_23C909E74(v11, (uint64_t)v12);
  v2 = v11[11];
  v3 = v11[12];
  sub_23C7DB3D4();
  sub_23C7E0808();
  sub_23C811870(v2, v3);
  v5 = v4;
  sub_23C7DB398();
  sub_23C7DE934();
  sub_23C812EE4((uint64_t)v11);
  sub_23C813BF4(v13, v12);
  v14 = 0;
  v15 = v5;
  sub_23C7DE93C(v10, v13);
  sub_23C907B90();
  sub_23C811C18(v13);
  if (!v1)
  {
    v9[0] = 0;
    v9[1] = 0;
    v7 = v9;
    Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v6 - 1));
    sub_23C7DFA18();
    if (!v8)
      Database.changesCount.getter();
  }
}

_QWORD *sub_23C810864@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  result = (_QWORD *)sub_23C7EF87C(*(_QWORD *)(a1 + 16));
  if (result)
  {
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v4 + 24))(&v6);
    v5 = BYTE1(v6);
  }
  else
  {
    v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t QueryInterfaceRequest.updateAll(_:onConflict:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _BYTE v21[168];
  _QWORD v22[21];
  char v23;
  uint64_t v24;
  char v25;
  _BYTE v26[184];
  uint64_t v27[21];
  _BYTE v28[88];
  uint64_t v29;
  uint64_t v30;

  v8 = *a2;
  sub_23C7E0718(v28, v4);
  if (v8 == 5)
  {
    sub_23C810864(a4, &v25);
    LOBYTE(v8) = v25;
  }
  sub_23C7E0718(v27, v28);
  sub_23C812E48((uint64_t)v28);
  sub_23C909E74(v27, (uint64_t)v21);
  v9 = v29;
  v10 = v30;
  sub_23C7DB3D4();
  sub_23C7DBBB0();
  sub_23C811870(v9, v10);
  v12 = v11;
  sub_23C7DB3DC();
  sub_23C7DE934();
  sub_23C813BF4(v22, v21);
  v23 = 0;
  v24 = v12;
  sub_23C7DE93C(v26, v22);
  LOBYTE(v20[0]) = v8;
  sub_23C907F04();
  v14 = v13;
  sub_23C811C18(v22);
  if (!v5)
  {
    if (v14)
    {
      v20[0] = 0;
      v20[1] = 0;
      v17 = v20;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v15 - 1));
      if (!v18)
      {
        Database.changesCount.getter();
        a1 = v19;
      }
      sub_23C7DFB3C();
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

uint64_t QueryInterfaceRequest.updateAll(_:onConflict:_:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v9;
  unsigned __int8 v11;

  v11 = *a2;
  sub_23C7E79A8(&qword_25430AF38);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  sub_23C811FD0(a3, inited + 32);
  sub_23C7DBBB0();
  sub_23C7FB44C();
  v9 = QueryInterfaceRequest.updateAll(_:onConflict:_:)(a1, &v11, inited, a5);
  sub_23C7DB3DC();
  return v9;
}

void *ColumnExpression.set(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD __src[21];

  v18 = a2;
  v19 = a3;
  v8 = sub_23C812004((uint64_t *)&v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v8, v4, a2);
  sub_23C812C74(a1, (uint64_t)v14, &qword_25430CF68);
  v9 = v15;
  if (v15)
  {
    v10 = v16;
    sub_23C7E7E34(v14, v15);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(__src, v9, v10);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  }
  else
  {
    sub_23C7E7938((uint64_t)v14, &qword_25430CF68);
    v12[0] = 0;
    v12[1] = 0;
    v13 = 4;
    sub_23C8027EC((uint64_t)v12);
    sub_23C800B48(v12, __src);
  }
  sub_23C7DB5CC(&v17, a4);
  return memcpy((void *)(a4 + 40), __src, 0xA3uLL);
}

uint64_t += infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23C810BFC(a1, a2, (void (*)(uint64_t *, uint64_t))+ infix(_:_:), a3);
}

uint64_t -= infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23C810BFC(a1, a2, (void (*)(uint64_t *, uint64_t))- infix(_:_:), a3);
}

uint64_t sub_23C810BFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v15[5];
  _QWORD v16[5];

  v8 = a1[3];
  v9 = a1[4];
  sub_23C7E7E34(a1, v8);
  v10 = a1[3];
  v11 = a1[4];
  v12 = sub_23C7E7E34(a1, v10);
  v15[3] = v10;
  v15[4] = *(_QWORD *)(v11 + 8);
  v13 = sub_23C812004(v15);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v13, v12, v10);
  v16[3] = &type metadata for SQLExpression;
  v16[4] = &protocol witness table for SQLExpression;
  v16[0] = sub_23C7DB388();
  a3(v15, a2);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
  ColumnExpression.set(to:)((uint64_t)v16, v8, v9, a4);
  return sub_23C7E7938((uint64_t)v16, &qword_25430CF68);
}

uint64_t *= infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23C810BFC(a1, a2, (void (*)(uint64_t *, uint64_t))* infix(_:_:), a3);
}

uint64_t /= infix(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23C810BFC(a1, a2, (void (*)(uint64_t *, uint64_t))/ infix(_:_:), a3);
}

uint64_t sub_23C810D18(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    if (sub_23C9117C0())
      goto LABEL_3;
LABEL_7:
    swift_bridgeObjectRelease();
    sub_23C7E79A8(&qword_25430CF60);
    sub_23C7E79A8(qword_25430CAC0);
    sub_23C813730();
    return sub_23C910DAC();
  }
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_7;
LABEL_3:
  sub_23C8E61E8(0);
  if ((a2 & 0xC000000000000001) != 0)
  {
    v5 = (_QWORD *)MEMORY[0x242625290](0, a2);
  }
  else
  {
    v5 = *(_QWORD **)(a2 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  swift_retain();
  v6 = sub_23C80B4A4(a1, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_23C8113E4(a2, v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v7;
}

void sub_23C810E70(uint64_t *a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[231];
  char v43;
  _QWORD v44[29];
  _QWORD __dst[22];
  uint64_t *v46;

  v46 = a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    memcpy(__dst, (const void *)(*a1 + 96), 0xA2uLL);
    v39 = __dst[19];
    v40 = __dst[18];
    v38 = __dst[20];
    v10 = BYTE1(__dst[20]);
    v36 = __dst[17];
    v37 = __dst[16];
    v34 = __dst[15];
    v35 = __dst[14];
    v33 = __dst[13];
    v31 = *(_OWORD *)&__dst[9];
    v32 = *(_OWORD *)&__dst[11];
    v30 = __dst[8];
    v7 = __dst[6];
    v29 = __dst[7];
    v28 = *(_OWORD *)&__dst[3];
    v13 = __dst[0];
    v14 = __dst[1];
    v4 = __dst[5];
    v15 = __dst[2];
    sub_23C812E48((uint64_t)__dst);
    sub_23C812E48((uint64_t)__dst);
    v3 = sub_23C85C90C(a2, v13, v14, v15);
    v5 = v16;
    v6 = v17;
    swift_bridgeObjectRelease();
    swift_release();
    sub_23C812EE4((uint64_t)__dst);
    v9 = swift_allocObject();
    v41 = (uint64_t)a3;
    memcpy((void *)(v9 + 16), a3, 0xA3uLL);
    v8 = sub_23C8137DC;
    if (v4)
    {
      v18 = (_QWORD *)swift_allocObject();
      v18[2] = v4;
      v18[3] = v7;
      v18[4] = sub_23C8137DC;
      v18[5] = v9;
      v8 = sub_23C813B6C;
      v9 = (uint64_t)v18;
    }
    v43 = v10;
    v19 = *v46;
    if (*(_QWORD *)(*v46 + 16))
    {
      v24 = v8;
      v25 = v6;
      v26 = v5;
      v27 = v3;
      memcpy(v44, (const void *)(v19 + 32), 0xE3uLL);
      v23 = BYTE2(v44[28]);
      v7 = v44[4];
      v22 = v44[3];
      v6 = v44[5];
      v8 = (void *)v44[6];
      v21 = v44[7];
      v3 = v44[0];
      v4 = v44[1];
      LOBYTE(v5) = v44[2];
      sub_23C811F5C(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
      sub_23C800974((uint64_t)v44);
      sub_23C812EE4((uint64_t)&v44[8]);
      v10 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  sub_23C890984();
  v19 = v20;
LABEL_6:
  if (*(_QWORD *)(v19 + 16))
  {
    memcpy(v42, (const void *)(v19 + 32), 0xE3uLL);
    *(_QWORD *)(v19 + 32) = v3;
    *(_QWORD *)(v19 + 40) = v4;
    *(_BYTE *)(v19 + 48) = v5;
    *(_QWORD *)(v19 + 56) = v22;
    *(_QWORD *)(v19 + 64) = v7;
    *(_QWORD *)(v19 + 72) = v6;
    *(_QWORD *)(v19 + 80) = v8;
    *(_BYTE *)(v19 + 88) = v21;
    *(_QWORD *)(v19 + 96) = v27;
    *(_QWORD *)(v19 + 104) = v26;
    *(_QWORD *)(v19 + 112) = v25;
    *(_OWORD *)(v19 + 120) = v28;
    *(_QWORD *)(v19 + 136) = v24;
    *(_QWORD *)(v19 + 144) = v9;
    *(_QWORD *)(v19 + 152) = v29;
    *(_BYTE *)(v19 + 160) = v30;
    *(_OWORD *)(v19 + 168) = v31;
    *(_OWORD *)(v19 + 184) = v32;
    *(_BYTE *)(v19 + 200) = v33;
    *(_QWORD *)(v19 + 208) = v35;
    *(_QWORD *)(v19 + 216) = v34;
    *(_QWORD *)(v19 + 224) = v37;
    *(_QWORD *)(v19 + 232) = v36;
    *(_QWORD *)(v19 + 240) = v40;
    *(_QWORD *)(v19 + 248) = v39;
    *(_BYTE *)(v19 + 256) = v38;
    *(_BYTE *)(v19 + 257) = v10;
    *(_BYTE *)(v19 + 258) = v23;
    sub_23C812FA8((uint64_t)v42);
    *v46 = v19;
  }
  else
  {
    __break(1u);
  }
}

void sub_23C811160(_QWORD *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[231];
  char v38;
  _QWORD __dst[29];
  _QWORD v40[3];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;

  v9 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    __break(1u);
LABEL_9:
    sub_23C890984();
    v9 = v14;
    goto LABEL_6;
  }
  v36 = a1;
  sub_23C7E0718(v40, (const void *)(v9 + 96));
  v4 = sub_23C7DB388();
  sub_23C7E3190((void *)(v4 + 16), a2);
  v11 = v42;
  if (v42)
  {
    v12 = v43;
    v13 = (_QWORD *)sub_23C7DB388();
    v13[2] = v11;
    v13[3] = v12;
    v13[4] = sub_23C813BA4;
    v13[5] = v4;
    v35 = sub_23C813B6C;
    v4 = (uint64_t)v13;
  }
  else
  {
    v35 = sub_23C813BA4;
  }
  v21 = v40[1];
  v22 = v40[0];
  v23 = v41;
  v20 = v40[2];
  v32 = v44;
  v33 = v47;
  v34 = v46;
  v30 = v48;
  v31 = v45;
  v28 = v50;
  v29 = v49;
  v26 = v52;
  v27 = v51;
  v24 = v54;
  v25 = v53;
  v38 = v56;
  v19 = v55;
  memcpy(__dst, (const void *)(v9 + 32), 0xE3uLL);
  v18 = BYTE2(__dst[28]);
  v7 = __dst[4];
  v8 = __dst[5];
  v16 = __dst[6];
  v17 = __dst[3];
  v15 = __dst[7];
  v2 = __dst[0];
  v3 = __dst[1];
  v6 = __dst[2];
  sub_23C811F5C((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  sub_23C812E48((uint64_t)v40);
  sub_23C800974((uint64_t)__dst);
  sub_23C812EE4((uint64_t)&__dst[8]);
  v5 = v38;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
LABEL_6:
  if (*(_QWORD *)(v9 + 16))
  {
    memcpy(v37, (const void *)(v9 + 32), 0xE3uLL);
    *(_QWORD *)(v9 + 32) = v2;
    *(_QWORD *)(v9 + 40) = v3;
    *(_BYTE *)(v9 + 48) = v6;
    *(_QWORD *)(v9 + 56) = v17;
    *(_QWORD *)(v9 + 64) = v7;
    *(_QWORD *)(v9 + 72) = v8;
    *(_QWORD *)(v9 + 80) = v16;
    *(_BYTE *)(v9 + 88) = v15;
    *(_QWORD *)(v9 + 96) = v22;
    *(_QWORD *)(v9 + 104) = v21;
    *(_QWORD *)(v9 + 112) = v20;
    *(_OWORD *)(v9 + 120) = v23;
    *(_QWORD *)(v9 + 136) = v35;
    *(_QWORD *)(v9 + 144) = v4;
    *(_QWORD *)(v9 + 152) = v32;
    *(_BYTE *)(v9 + 160) = v31;
    *(_OWORD *)(v9 + 168) = v34;
    *(_OWORD *)(v9 + 184) = v33;
    *(_BYTE *)(v9 + 200) = v30;
    *(_QWORD *)(v9 + 208) = v29;
    *(_QWORD *)(v9 + 216) = v28;
    *(_QWORD *)(v9 + 224) = v27;
    *(_QWORD *)(v9 + 232) = v26;
    *(_QWORD *)(v9 + 240) = v25;
    *(_QWORD *)(v9 + 248) = v24;
    *(_BYTE *)(v9 + 256) = v19;
    *(_BYTE *)(v9 + 257) = v5;
    *(_BYTE *)(v9 + 258) = v18;
    sub_23C812FA8((uint64_t)v37);
    *v36 = v9;
    sub_23C7DEF28();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23C8113E4(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v3 = v2;
  v4 = a1;
  v30 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v5 = sub_23C9117C0();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      v26 = v4 & 0xC000000000000001;
      v6 = (_QWORD *)MEMORY[0x24BEE4B00];
      v7 = 4;
      v25 = (_QWORD *)v4;
      while (1)
      {
        if (v26)
        {
          v8 = (_QWORD *)MEMORY[0x242625290](v7 - 4, v4);
        }
        else
        {
          v8 = *(_QWORD **)(v4 + 8 * v7);
          swift_retain();
        }
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        v28 = v7 - 3;
        swift_retain();
        v9 = v3;
        v10 = sub_23C80B838(a2, v8);
        v4 = (unint64_t)v6;
        v3 = sub_23C8226BC();
        v12 = v6[2];
        v13 = (v11 & 1) == 0;
        if (__OFADD__(v12, v13))
          goto LABEL_21;
        v14 = v11;
        if (v6[3] < v12 + v13)
        {
          sub_23C8FA100();
          v6 = v30;
          v15 = sub_23C8226BC();
          if ((v14 & 1) != (v16 & 1))
          {
            sub_23C7E79A8(&qword_25430CF60);
            swift_bridgeObjectRelease();
            result = sub_23C911B50();
            __break(1u);
            return result;
          }
          v3 = v15;
        }
        if ((v14 & 1) != 0)
        {
          v17 = swift_bridgeObjectRelease();
          v18 = (_QWORD *)(v6[7] + 8 * v3);
          MEMORY[0x242624CE4](v17);
          if (*(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_23C91110C();
          sub_23C911148();
          sub_23C9110DC();
        }
        else
        {
          sub_23C7E79A8(&qword_25430DBC8);
          v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_23C9134B0;
          *(_QWORD *)(v19 + 32) = v8;
          v29 = v19;
          v4 = (unint64_t)&v29;
          sub_23C9110DC();
          v20 = v29;
          v6[(v3 >> 6) + 8] |= 1 << v3;
          *(_QWORD *)(v6[6] + 8 * v3) = v10;
          *(_QWORD *)(v6[7] + 8 * v3) = v20;
          v21 = v6[2];
          v22 = __OFADD__(v21, 1);
          v23 = v21 + 1;
          if (v22)
            goto LABEL_22;
          v6[2] = v23;
        }
        v3 = v9;
        ++v7;
        v4 = (unint64_t)v25;
        if (v28 == v5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_25:
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t sub_23C81169C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23C7EC5B8();
  sub_23C8546C8(v3, v4);
  if (!v1)
  {
    v5 = swift_retain();
    v0 = sub_23C84C298(v5, 0, 0, v2 + 8, v6);
    sub_23C7ECB9C(v0, v7, v8, v9, v10, v11, v12, v13, v15);
    sub_23C7DFB3C();
  }
  return v0;
}

void sub_23C81171C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23C7EC5B8();
  sub_23C8546C8(v1, v2);
  if (!v0)
  {
    v3 = sub_23C7E9ADC();
    v8 = sub_23C7E8DC8(v3, v4, v5, v6, v7);
    sub_23C7ECB9C(v8, v9, v10, v11, v12, v13, v14, v15, v16);
    sub_23C7DFA18();
  }
  sub_23C7E6BE0();
}

void sub_23C811780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7EC5B8();
  sub_23C828ECC();
  if (!v0)
  {
    v1 = sub_23C7E9ADC();
    v6 = sub_23C7E8DC8(v1, v2, v3, v4, v5);
    sub_23C7ECB9C(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    sub_23C7DFA18();
  }
  sub_23C7E6BE0();
}

uint64_t sub_23C8117E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  sub_23C8546C8(a1, (uint64_t)&v7);
  if (!v2)
  {
    v4 = swift_retain();
    a2 = sub_23C84C3C0(v4, 0, 0, (uint64_t)&v8, v5);
    sub_23C812C40((uint64_t)&v7);
    swift_release();
  }
  return a2;
}

void sub_23C811870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[168];
  _BYTE __src[176];
  _BYTE v35[216];
  _QWORD v36[2];
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[22];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(swift_bridgeObjectRetain() + 16))
    {
      v3 = (uint64_t *)(a1 + 40);
      v4 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v6 = *(v3 - 1);
        v5 = *v3;
        swift_bridgeObjectRetain_n();
        v7 = sub_23C7E94B8();
        if ((v8 & 1) == 0)
          break;
        v9 = (const void *)(*(_QWORD *)(a2 + 56) + 216 * v7);
        sub_23C7E58D4(v38, v9);
        sub_23C7E58D4(v35, v9);
        sub_23C7EE25C();
        swift_bridgeObjectRelease();
        v36[0] = v6;
        v36[1] = v5;
        sub_23C7E58D4(&v37, v35);
        sub_23C7DEF00();
        sub_23C7EE25C();
        sub_23C81394C((uint64_t)v36);
        if (v38[0] == 2)
        {
          sub_23C7E79A8(&qword_256BCA6F0);
          v10 = sub_23C7DB388();
          *(_OWORD *)(v10 + 16) = xmmword_23C912A20;
          v30 = v4;
          v31 = v2;
          v11 = v39;
          v29 = v40;
          v12 = v41;
          v13 = v42;
          v14 = v43;
          sub_23C7E0718(v33, v44);
          sub_23C7E0718(&__src[7], v44);
          sub_23C7E79A8(&qword_25430B4A0);
          v15 = sub_23C7DB388();
          *(_OWORD *)(v15 + 16) = xmmword_23C912A20;
          *(_QWORD *)(v15 + 32) = v6;
          *(_QWORD *)(v15 + 40) = v5;
          *(_BYTE *)(v15 + 48) = 3;
          *(_QWORD *)(v15 + 56) = v11;
          *(_QWORD *)(v15 + 64) = v29;
          *(_QWORD *)(v15 + 72) = v12;
          *(_QWORD *)(v15 + 80) = v13;
          *(_BYTE *)(v15 + 88) = v14;
          memcpy((void *)(v15 + 89), __src, 0xA9uLL);
          *(_BYTE *)(v15 + 258) = 1;
          *(_QWORD *)(v10 + 32) = v15;
          sub_23C7DEF00();
          v16 = v11;
          v17 = v12;
          v4 = v30;
          v2 = v31;
          sub_23C800AA4(v16, v29, v17, v13, v14);
          sub_23C812E48((uint64_t)v33);
        }
        else
        {
          v18 = v44[11];
          v19 = v4;
          v20 = v44[12];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21 = sub_23C811870(v18, v20);
          v4 = v19;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_23C7DEF00();
          sub_23C7EE25C();
          v10 = sub_23C80BAA4(v21, (uint64_t)v38);
          swift_bridgeObjectRelease();
        }
        sub_23C81394C((uint64_t)v36);
        v22 = *(_QWORD *)(v10 + 16);
        v23 = *(_QWORD *)(v4 + 16);
        if (__OFADD__(v23, v22))
          goto LABEL_24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v23 + v22 > *(_QWORD *)(v4 + 24) >> 1)
        {
          sub_23C7F1D04();
          v4 = v24;
        }
        if (*(_QWORD *)(v10 + 16))
        {
          if ((*(_QWORD *)(v4 + 24) >> 1) - *(_QWORD *)(v4 + 16) < v22)
            goto LABEL_26;
          swift_arrayInitWithCopy();
          if (v22)
          {
            v25 = *(_QWORD *)(v4 + 16);
            v26 = __OFADD__(v25, v22);
            v27 = v25 + v22;
            if (v26)
              goto LABEL_27;
            *(_QWORD *)(v4 + 16) = v27;
          }
        }
        else if (v22)
        {
          goto LABEL_25;
        }
        swift_bridgeObjectRelease();
        if (!--v2)
          goto LABEL_21;
        v3 += 2;
        if (!*(_QWORD *)(a2 + 16))
          goto LABEL_20;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
LABEL_20:
      __break(1u);
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_23C811BF0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_23C7DEF54(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

_QWORD *sub_23C811C18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[6];
  v3 = a1[12];
  v5 = a1[14];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C811CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430DBD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C811D44()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[8])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DF314();
  if (v0[17])
    swift_release();
  if (v0[19])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C811DD4(uint64_t a1)
{
  return sub_23C80C454(a1);
}

double sub_23C811DF4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80EB0C(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_23C811E0C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80EE5C(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_23C811E24()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80F49C(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_23C811E3C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80F644(v0, v1, v2).n128_u64[0];
  return result;
}

_BYTE *sub_23C811E54(_BYTE *a1)
{
  return sub_23C80F844(a1);
}

double sub_23C811E6C(char *a1)
{
  double result;

  *(_QWORD *)&result = sub_23C80F880(a1).n128_u64[0];
  return result;
}

double sub_23C811E84()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80FA2C(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_23C811E9C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  sub_23C7E1118();
  *(_QWORD *)&result = sub_23C80FC28(v0, v1, v2).n128_u64[0];
  return result;
}

void *sub_23C811EB4(void *a1)
{
  uint64_t v1;

  return sub_23C80FE6C(a1, *(_QWORD *)(v1 + 24));
}

void *sub_23C811ED0(void *a1)
{
  uint64_t v1;

  return sub_23C80FE6C(a1, *(_QWORD *)(v1 + 24));
}

void *sub_23C811EEC(void *a1)
{
  uint64_t v1;

  return sub_23C80FE6C(a1, *(_QWORD *)(v1 + 24));
}

void *sub_23C811F08(void *a1)
{
  uint64_t v1;

  return sub_23C80FF6C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16), (void (*)(uint64_t *))sub_23C85DDB4);
}

void *sub_23C811F2C(void *a1)
{
  uint64_t v1;

  return sub_23C80FF6C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16), (void (*)(uint64_t *))sub_23C85DEAC);
}

uint64_t sub_23C811F50(uint64_t result)
{
  *(_BYTE *)(result + 104) = 1;
  return result;
}

uint64_t sub_23C811F5C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  return a1;
}

uint64_t sub_23C811FD0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ColumnAssignment(a2, a1);
  return a2;
}

uint64_t *sub_23C812004(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23C812044(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C812070(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C81209C(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (a1[5])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (a1[14])
    result = swift_release();
  if (a1[16])
    return swift_release();
  return result;
}

uint64_t sub_23C812130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  v7 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  v13 = *(_QWORD *)(a2 + 128);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t sub_23C81227C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7938(a1 + 40, &qword_256BCBDD0);
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 112);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v9;
      *(_QWORD *)(a1 + 120) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7938(a1 + 112, &qword_256BCBDD8);
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_15:
  v12 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v12;
      *(_QWORD *)(a1 + 136) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_22;
  }
  if (!v12)
  {
    sub_23C7E7938(a1 + 128, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  v15 = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v15;
  return a1;
}

void *initializeWithTake for SQLSubquery.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA2uLL);
}

uint64_t sub_23C8124B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7938(a1 + 40, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a1 + 112);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  if (v8)
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v7;
      *(_QWORD *)(a1 + 120) = v9;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7938(a1 + 112, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_11:
  v10 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
LABEL_15:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_16;
  }
  if (!v10)
  {
    sub_23C7E7938(a1 + 128, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t sub_23C812650(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 162))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C812690(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 162) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 162) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for QueryInterfaceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryInterfaceRequest);
}

uint64_t destroy for ColumnAssignment(uint64_t a1)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return sub_23C7E6F90(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16));
}

uint64_t initializeWithCopy for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a2 + 160);
  v22 = *(_QWORD *)(a2 + 168);
  v26 = *(unsigned __int8 *)(a2 + 202);
  v27 = *(unsigned __int16 *)(a2 + 200);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a2 + 184);
  v25 = *(_QWORD *)(a2 + 192);
  v11 = *(_QWORD *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 96);
  sub_23C7E7E58(v12, v5, v6, v7, v8, v9, v10, v13, v11, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
    v25,
    v27 | (v26 << 16));
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)(a1 + 168) = v22;
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v24;
  *(_QWORD *)(a1 + 192) = v25;
  *(_BYTE *)(a1 + 202) = v26;
  *(_WORD *)(a1 + 200) = v27;
  return a1;
}

uint64_t assignWithCopy for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  sub_23C8089A0((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_QWORD *)(a2 + 120);
  v33 = *(_QWORD *)(a2 + 128);
  v34 = *(_QWORD *)(a2 + 136);
  v35 = *(_QWORD *)(a2 + 144);
  v36 = *(_QWORD *)(a2 + 152);
  v37 = *(_QWORD *)(a2 + 160);
  v38 = *(_QWORD *)(a2 + 168);
  v39 = *(_QWORD *)(a2 + 176);
  v42 = *(unsigned __int8 *)(a2 + 202);
  v11 = *(unsigned __int16 *)(a2 + 200);
  v40 = *(_QWORD *)(a2 + 184);
  v41 = *(_QWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a2 + 40);
  sub_23C7E7E58(v12, v4, v5, v6, v7, v8, v9, v10, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41,
    v11 | (v42 << 16));
  v13 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v4;
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v10;
  v22 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v31;
  v23 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v32;
  *(_QWORD *)(a1 + 128) = v33;
  v24 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v34;
  *(_QWORD *)(a1 + 144) = v35;
  v25 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v36;
  *(_QWORD *)(a1 + 160) = v37;
  v26 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v38;
  *(_QWORD *)(a1 + 176) = v39;
  *(_WORD *)(a1 + 200) = v11;
  *(_BYTE *)(a1 + 202) = v42;
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v40;
  *(_QWORD *)(a1 + 192) = v41;
  sub_23C7E6F90(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27,
    v28,
    v13);
  return a1;
}

void *initializeWithTake for ColumnAssignment(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xCBuLL);
}

uint64_t assignWithTake for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_WORD *)(a2 + 200);
  v6 = *(_BYTE *)(a2 + 202);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 104);
  v16 = *(_OWORD *)(a1 + 120);
  v17 = *(_OWORD *)(a1 + 136);
  v18 = *(_OWORD *)(a1 + 152);
  v19 = *(_OWORD *)(a1 + 168);
  v20 = *(_QWORD *)(a1 + 184);
  v21 = *(_QWORD *)(a1 + 192);
  v22 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 202) = v6;
  *(_WORD *)(a1 + 200) = v5;
  sub_23C7E6F90(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    v21,
    v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnAssignment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 203))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnAssignment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 202) = 0;
    *(_WORD *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 203) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 203) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnAssignment()
{
  return &type metadata for ColumnAssignment;
}

uint64_t sub_23C812C40(uint64_t a1)
{
  destroy for PreparedRequest(a1);
  return a1;
}

uint64_t sub_23C812C74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_23C7E79A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C812CB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C812CE0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C85C6F4(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

void sub_23C812CFC(uint64_t a1)
{
  uint64_t v1;

  sub_23C80F7E8(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(_QWORD))sub_23C7FD468);
}

uint64_t sub_23C812D1C@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C812D50(a1);
}

void sub_23C812D30(uint64_t a1)
{
  uint64_t v1;

  sub_23C80F7E8(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(_QWORD))sub_23C7FDA0C);
}

uint64_t sub_23C812D50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

_QWORD *sub_23C812D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C80FDD0(a1, *(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16));
}

void sub_23C812D9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_23C85C644(a1, *(void (**)(uint64_t *__return_ptr))(v2 + 16), *(void (**)(uint64_t))(v2 + 32), a2);
}

void sub_23C812DB8(uint64_t a1)
{
  uint64_t v1;

  sub_23C80EFD8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_23C812DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 < 0)
    return swift_release();
  swift_bridgeObjectRelease();
  return sub_23C7E13C4(a3);
}

uint64_t sub_23C812E08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C812E2C()
{
  return sub_23C85C6DC();
}

void sub_23C812E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  sub_23C7DC490();
  swift_retain();
  swift_retain();
  sub_23C7DB3D4();
  sub_23C7F5610(v1);
  sub_23C7DBBB0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7DEF00();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v2);
  sub_23C7F5610(v3);
  sub_23C7DB3E4();
}

void sub_23C812EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 112);
  sub_23C7DC490();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v2);
  sub_23C7F1754(v3);
  sub_23C7DB3E4();
}

uint64_t sub_23C812F90(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C812FA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v6 = *(_BYTE *)(a1 + 56);
  sub_23C812F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_23C812DD0(v2, v3, v4, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v9);
  sub_23C7F1754(v10);
  return a1;
}

uint64_t sub_23C8130C0(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x180000u) >> 16;
  return result;
}

uint64_t sub_23C813104(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 104) & 1;
  v2 = *(_WORD *)(result + 160) & 0x81FF | 0x4000;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

void *sub_23C813130(const void *a1, void *a2)
{
  initializeWithTake for SQLSubquery.Impl(a2, a1);
  return a2;
}

uint64_t sub_23C81316C()
{
  uint64_t v0;

  sub_23C7E411C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_23C8131FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328),
    *(_QWORD *)(v0 + 336),
    *(_WORD *)(v0 + 344));
  return swift_deallocObject();
}

uint64_t sub_23C8131FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int16 a21)
{
  int v21;

  v21 = (a21 >> 13) & 3;
  if (v21 == 2)
    return swift_bridgeObjectRelease();
  if (v21 != 1)
  {
    if (v21)
      return result;
    return swift_bridgeObjectRelease();
  }
  return sub_23C7F9AE0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21 & 0x9FFF);
}

uint64_t sub_23C813280(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x580000u) >> 16;
  return result;
}

uint64_t sub_23C8132C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 104);
  v15 = *(_OWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 136);
  v13 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(_WORD *)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F9AE0(v18, v17, v16, v2, v3, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v7,
    v8,
    v9);
  return a1;
}

uint64_t sub_23C8133B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 72);
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 104);
  v12 = *(_OWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 160);
  v10 = *(_WORD *)(a1 + 168);
  swift_bridgeObjectRetain();
  sub_23C7FD5D8(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_23C81348C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(qword_256BCBDE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C8134D4(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 72) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 72) >> 1);
  else
    return 0;
}

uint64_t sub_23C8134EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 72);
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 104);
  v12 = *(_OWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 160);
  v10 = *(_WORD *)(a1 + 168);
  swift_bridgeObjectRelease();
  sub_23C7F9AE0(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_23C8135C8(uint64_t a1)
{
  sub_23C813638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_WORD *)(a1 + 168));
  return a1;
}

uint64_t sub_23C813638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int16 a22)
{
  BOOL v22;
  uint64_t result;

  v22 = a10 >> 1 != 0xFFFFFFFF || a15 > 1;
  if (v22 || (a22 & 0xFE00) != 0)
  {
    swift_bridgeObjectRelease();
    return sub_23C7F9AE0(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22);
  }
  return result;
}

unint64_t sub_23C813730()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_256BCA6C0;
  if (!qword_256BCA6C0)
  {
    v1 = sub_23C7DDB10(&qword_25430CF60);
    v2 = sub_23C7F90AC();
    result = MEMORY[0x242626100](MEMORY[0x24BEE12A8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256BCA6C0);
  }
  return result;
}

uint64_t sub_23C813794(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x80000u) >> 16;
  return result;
}

void sub_23C8137DC(void *a1@<X8>)
{
  uint64_t v1;

  sub_23C85C708((const void *)(v1 + 16), a1);
}

uint64_t sub_23C8137FC()
{
  uint64_t v0;

  sub_23C7E411C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_23C813838()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C813864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 160);
  sub_23C800AA4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v4);
  sub_23C7F5610(v5);
  return a1;
}

uint64_t sub_23C81394C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v6 = *(_BYTE *)(a1 + 56);
  swift_bridgeObjectRelease();
  sub_23C812DD0(v2, v3, v4, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v9);
  sub_23C7F1754(v10);
  return a1;
}

uint64_t sub_23C813A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 176);
  sub_23C812DD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v4);
  sub_23C7F1754(v5);
  return a1;
}

uint64_t sub_23C813B44()
{
  return sub_23C812E2C();
}

void sub_23C813B58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_23C812D9C(a1, a2);
}

uint64_t sub_23C813B6C(uint64_t a1)
{
  return sub_23C812CE0(a1);
}

void sub_23C813BA4(void *a1@<X8>)
{
  sub_23C8137DC(a1);
}

_QWORD *sub_23C813BB8(uint64_t a1)
{
  return sub_23C812D7C(a1);
}

void sub_23C813BCC(uint64_t a1)
{
  sub_23C812DB8(a1);
}

uint64_t sub_23C813BE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  return sub_23C811BF0(a1, a2, a3);
}

void *sub_23C813BF4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

void sub_23C813BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_23C812E48((uint64_t)&a43);
}

void sub_23C813C04()
{
  uint64_t v0;

  sub_23C7E9018();
  v0 = MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>);
  sub_23C7E8178(v0);
  sub_23C7E4150();
}

_QWORD *FetchRequest.databaseRegion(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t))(a3 + 32))(v9, a1, 0, a2);
  if (!v4)
  {
    v7 = v9[0];
    swift_retain();
    sub_23C812C40((uint64_t)v9);
    swift_beginAccess();
    v8 = *(_QWORD *)(v7 + 32);
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_release();
    *a4 = v8;
  }
  return result;
}

uint64_t PreparedRequest.statement.getter()
{
  return swift_retain();
}

uint64_t PreparedRequest.statement.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*PreparedRequest.statement.modify())()
{
  return nullsub_1;
}

uint64_t PreparedRequest.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7DF56C(v1 + 8, a1);
}

uint64_t PreparedRequest.adapter.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23C811CFC(a1, v1 + 8);
}

uint64_t (*PreparedRequest.adapter.modify())()
{
  return nullsub_1;
}

uint64_t FetchRequest.adapted(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v5);
  sub_23C813DCC((uint64_t)v12, a1, a2, a3, a4, a5);
  return swift_retain();
}

uint64_t sub_23C813DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for AdaptedFetchRequest(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t AdaptedFetchRequest.sqlSubquery.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t AdaptedFetchRequest.fetchCount(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 40))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t AdaptedFetchRequest.makePreparedRequest(_:forSingleResult:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8[2];
  __int128 v9;
  void *v10;
  _UNKNOWN **v11;
  _BYTE v12[40];

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 32))();
  if (!v2)
  {
    sub_23C7DF56C(a2 + 8, (uint64_t)&v9);
    if (v10)
    {
      sub_23C7DB5CC(&v9, (uint64_t)v12);
      sub_23C7EFC04((uint64_t)v12, (uint64_t)v8);
      sub_23C7E88A0();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
      v10 = &unk_250D81B08;
      v11 = &off_250D81AD8;
      v5 = swift_allocObject();
      *(_QWORD *)&v9 = v5;
      sub_23C7DB5CC(v8, v5 + 16);
      sub_23C7DB5CC(&v7, v5 + 56);
      v6 = &v9;
    }
    else
    {
      sub_23C7D9F34((uint64_t)&v9);
      sub_23C7E88A0();
      v6 = (__int128 *)v12;
    }
    return sub_23C811CFC((uint64_t)v6, a2 + 8);
  }
  return result;
}

uint64_t sub_23C813FB0()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 56);
  return swift_deallocObject();
}

uint64_t sub_23C813FDC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return AdaptedFetchRequest.makePreparedRequest(_:forSingleResult:)(a1, a2);
}

uint64_t sub_23C813FF0(uint64_t a1, uint64_t a2)
{
  return AdaptedFetchRequest.fetchCount(_:)(a1, a2);
}

_QWORD *sub_23C814008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x242626100](&protocol conformance descriptor for AdaptedFetchRequest<A>);
  return FetchRequest.databaseRegion(_:)(a1, a2, v6, a3);
}

uint64_t AnyFetchRequest.asRequest<A>(of:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t AnyFetchRequest.sqlSubquery.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t AnyFetchRequest.fetchCount(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t AnyFetchRequest.makePreparedRequest(_:forSingleResult:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_23C8140E0()
{
  return AnyFetchRequest.makePreparedRequest(_:forSingleResult:)();
}

uint64_t sub_23C8140F4()
{
  return AnyFetchRequest.fetchCount(_:)();
}

_QWORD *sub_23C81410C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x242626100](&protocol conformance descriptor for AnyFetchRequest<A>);
  return FetchRequest.databaseRegion(_:)(a1, a2, v6, a3);
}

uint64_t AnyFetchRequest.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for ConcreteFetchRequestEraser(0, a2, a3, a3);
  result = sub_23C8141B4(a1);
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for ConcreteFetchRequestEraser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteFetchRequestEraser);
}

uint64_t sub_23C8141B4(uint64_t a1)
{
  swift_allocObject();
  return sub_23C814D3C(a1);
}

uint64_t dispatch thunk of FetchRequest.makePreparedRequest(_:forSingleResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of FetchRequest.fetchCount(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t destroy for PreparedRequest(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 32))
    result = _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  if (*(_QWORD *)(a1 + 48))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for PreparedRequest(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[4];
  swift_retain();
  if (v6)
  {
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v5[4];
  }
  v9 = a2[6];
  if (v9)
  {
    v10 = a2[7];
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  }
  return a1;
}

uint64_t assignWithCopy for PreparedRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      sub_23C8089A0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
    _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
    goto LABEL_8;
  }
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
LABEL_8:
  v7 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for SchemaInfo.SchemaObject(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PreparedRequest(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 + 1;
  *(_QWORD *)a1 = *a2;
  swift_release();
  if (*(_QWORD *)(a1 + 32))
    _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  v5 = *((_OWORD *)v4 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = v4[4];
  v6 = a2[6];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      v8 = a2[7];
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = v8;
      return a1;
    }
LABEL_9:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_9;
  }
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreparedRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreparedRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreparedRequest()
{
  return &type metadata for PreparedRequest;
}

uint64_t sub_23C81457C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23C8145F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_23C8146A4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_23C8146E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_23C814744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C8147B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C81480C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23C814870(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C8148EC + 4 * byte_23C913660[v11]))();
  }
}

void sub_23C81496C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C814A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t type metadata accessor for AdaptedFetchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptedFetchRequest);
}

uint64_t type metadata accessor for AnyFetchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyFetchRequest);
}

void sub_23C814B00()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C814B58()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C814BB0()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C814C08()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FetchRequestEraser()
{
  return objc_opt_self();
}

uint64_t sub_23C814C38()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23C814CA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_23C814CD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_23C814CF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

_QWORD *sub_23C814D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return FetchRequest.databaseRegion(_:)(a1, a2, (uint64_t)&off_256BCAEA8, a3);
}

uint64_t sub_23C814D3C(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 112) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128), a1);
  return v1;
}

uint64_t sub_23C814D70()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) + 16) + 16))(*(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t sub_23C814DA4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 120) + 40))(a1, *(_QWORD *)(*(_QWORD *)v1 + 112));
}

uint64_t sub_23C814DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 120) + 32))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 112));
}

uint64_t sub_23C814E04()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t sub_23C814E20()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  return v0;
}

uint64_t sub_23C814E50()
{
  sub_23C814E20();
  return swift_deallocClassInstance();
}

void sub_23C814E70()
{
  uint64_t v0;

  sub_23C7E9018();
  v0 = MEMORY[0x242626100](&protocol conformance descriptor for SQLRequest<A>);
  sub_23C7E8178(v0);
  sub_23C7E4150();
}

void RowKey.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23C814ED0()
{
  sub_23C911BC8();
  return sub_23C910F14();
}

uint64_t sub_23C814F08()
{
  sub_23C911BC8();
  return sub_23C911BC8();
}

void static RowKey.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_23C814F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_23C8150F4(v0, v1, v5);
    v8 = sub_23C7E61D4(v2, v3, v4);
    sub_23C815110(v8, v9, v5);
    v7 = 0;
  }
  else
  {
    if (v2 == v0 && v3 == v1)
      v7 = 1;
    else
      v7 = sub_23C7E88AC();
    sub_23C8150F4(v0, v1, 0);
    sub_23C8150F4(v2, v3, 0);
    v10 = sub_23C7E61D4(v2, v3, 0);
    sub_23C815110(v10, v11, 0);
  }
  return v7 & 1;
}

uint64_t sub_23C8150F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u && a3 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C815110(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u && a3 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void RowKey.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23C911BBC();
  __asm { BR              X9 }
}

uint64_t sub_23C81516C()
{
  sub_23C911BC8();
  sub_23C910F14();
  return sub_23C911BF8();
}

void sub_23C8151E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23C911BBC();
  __asm { BR              X9 }
}

uint64_t sub_23C81521C()
{
  sub_23C911BC8();
  sub_23C910F14();
  return sub_23C911BF8();
}

uint64_t RowDecodingError.Context.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C8152BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  sub_23C7E66DC();
  sub_23C7EE3DC();
  sub_23C7E76BC(v8);
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C911C70();
  sub_23C7DFE4C();
  sub_23C7DC474();
  sub_23C7DFE4C();
  DatabaseValue.description.getter();
  sub_23C7DFE4C();
  sub_23C7DC474();
  v9 = sub_23C7E66DC();
  v10 = sub_23C7FC8A8(v9);
  sub_23C7E8DDC();
  sub_23C7EE3DC();
  sub_23C7E76BC(v8);
  sub_23C7E8DDC();
  sub_23C7EDD94();
  swift_bridgeObjectRelease();
  result = sub_23C7E13C4(v8);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = 0xD000000000000011;
  *(_QWORD *)(a3 + 16) = 0x800000023C91CD60;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v4;
  *(_QWORD *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v7;
  *(_QWORD *)(a3 + 72) = v8;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = v13;
  *(_BYTE *)(a3 + 104) = 1;
  return result;
}

uint64_t static RowDecodingError.valueMismatch(_:sqliteStatement:index:context:)@<X0>(uint64_t a1@<X0>, sqlite3_stmt *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = *((_BYTE *)a4 + 24);
  v15 = *a4;
  v16 = *(_OWORD *)(a4 + 1);
  v17 = v7;
  v8 = *((_OWORD *)a4 + 3);
  v18 = *((_OWORD *)a4 + 2);
  v19 = v8;
  sub_23C7EEF08(a2, a3, (uint64_t)v13);
  v9 = v13[0];
  v10 = v13[1];
  v11 = v14;
  sub_23C8152BC(a1, (uint64_t)&v15, a5);
  return sub_23C7E5640(v9, v10, v11);
}

#error "23C81551C: call analysis failed (funcsize=46)"

uint64_t static RowDecodingError.columnNotFound(_:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(unsigned __int8 *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 40);
  v15 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a3 + 48);
  v10 = *(_QWORD *)(a3 + 56);
  sub_23C7E66DC();
  sub_23C7EDB24();
  sub_23C816E3C();
  sub_23C911634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C910EE4();
  sub_23C910F5C();
  sub_23C7DB624();
  v11 = sub_23C7E66DC();
  v12 = sub_23C7FC8A8(v11);
  sub_23C7E8DDC();
  sub_23C7EDB24();
  sub_23C816E3C();
  sub_23C7E8DDC();
  sub_23C7EDD94();
  sub_23C7DC474();
  sub_23C7E13C4(v9);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0xD000000000000012;
  *(_QWORD *)(a4 + 32) = 0x800000023C91CD40;
  *(_QWORD *)(a4 + 40) = v12;
  *(_QWORD *)(a4 + 48) = v5;
  *(_QWORD *)(a4 + 56) = v6;
  *(_QWORD *)(a4 + 64) = v7;
  *(_QWORD *)(a4 + 72) = v15;
  *(_QWORD *)(a4 + 80) = v8;
  *(_QWORD *)(a4 + 88) = v9;
  *(_QWORD *)(a4 + 96) = v10;
  *(_BYTE *)(a4 + 104) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t RowDecodingContext.init(row:key:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v20 = *a2;
  v5 = *((_BYTE *)a2 + 16);
  if (a1[7])
  {
    v6 = a1[5];
    v7 = a1[6];
    sub_23C7E7E34(a1 + 2, v6);
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 112);
    swift_retain();
    v9 = v8(a1, v6, v7);
    v10 = (sqlite3_stmt *)Statement.sql.getter();
    v12 = v11;
    sub_23C7DFE08();
    Statement.arguments.getter(&v21);
    result = swift_release();
    v14 = v21;
LABEL_10:
    *(_QWORD *)a3 = v9;
    *(_OWORD *)(a3 + 8) = v20;
    *(_BYTE *)(a3 + 24) = v5;
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 40) = v12;
    *(_OWORD *)(a3 + 48) = v14;
    return result;
  }
  v10 = (sqlite3_stmt *)a1[8];
  v15 = a1[5];
  v16 = a1[6];
  sub_23C7E7E34(a1 + 2, v15);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 112))(a1, v15, v16);
  if (!v10)
  {
    result = sub_23C7DFE08();
    v12 = 0;
LABEL_9:
    v14 = 0uLL;
    goto LABEL_10;
  }
  result = (uint64_t)sqlite3_sql(v10);
  if (result)
  {
    *(_QWORD *)&v21 = sub_23C910F74();
    *((_QWORD *)&v21 + 1) = v17;
    if (qword_25430B2E0 != -1)
      swift_once();
    v18 = sub_23C910920();
    sub_23C805EE8(v18, (uint64_t)qword_254310410);
    sub_23C7EEE60();
    v10 = (sqlite3_stmt *)sub_23C911544();
    v12 = v19;
    sub_23C7DFE08();
    result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t RowDecodingError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  if ((*(_BYTE *)(v0 + 104) & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 8);
    v9 = *(_QWORD *)(v0 + 48);
    v44 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C815EDC(v1, v2, v3);
    swift_bridgeObjectRetain();
    sub_23C7ECFC8();
    v45 = v8;
    v3 = v1;
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 24);
    v12 = v0 + 88;
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v12 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C815EDC(v3, v5, v4);
    swift_bridgeObjectRetain();
    sub_23C7E76BC(v10);
    v44 = v1;
    v2 = v5;
    v9 = v4;
    v4 = v7;
    v6 = v10;
    v7 = v11;
  }
  type metadata accessor for Row();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  sub_23C7F8DD8();
  v14 = v13;
  v15 = MEMORY[0x24BEE4AF8];
  v46 = v13;
  v43 = v9;
  if (v9 - 2 >= 2)
  {
    if (v9)
    {
      if (v9 != 1)
        goto LABEL_20;
      sub_23C815DE0(0, v3, &v52);
      swift_retain();
      v16 = Row.subscript.getter();
      v18 = v17;
      sub_23C7E5640(v49, v50, v51);
      swift_release();
      sub_23C7E19F0();
      v52 = v16;
      v53 = v18;
      sub_23C910EE4();
      sub_23C7E415C();
      sub_23C7DB624();
      v19 = v47;
      v20 = v48;
      sub_23C7E171C();
      v15 = v21;
      v22 = *(_QWORD *)(v21 + 16);
      if (v22 >= *(_QWORD *)(v21 + 24) >> 1)
      {
        sub_23C7E8190();
        v15 = v38;
      }
      *(_QWORD *)(v15 + 16) = v22 + 1;
      v23 = v15 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v20;
      sub_23C7EC5CC();
      swift_bridgeObjectRelease();
      sub_23C7E0810();
      v52 = v3;
      sub_23C911880();
      sub_23C7E415C();
      sub_23C7DB624();
      sub_23C7ECBA4();
      if (v24)
      {
        sub_23C7E8190();
        v15 = v39;
      }
      sub_23C7E97E0();
    }
    else
    {
      v26 = v13[5];
      v25 = v13[6];
      sub_23C7E7E34(v13 + 2, v26);
      v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 88);
      sub_23C8150F4(v3, v2, 0);
      sub_23C8150F4(v3, v2, 0);
      v28 = v27(v3, v2, v26, v25);
      if ((v29 & 1) != 0)
      {
        sub_23C7E3198();
        sub_23C7E3198();
        v15 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v42 = v28;
        sub_23C7E19F0();
        v52 = v3;
        v53 = v2;
        sub_23C910EE4();
        sub_23C7E415C();
        sub_23C7DB624();
        sub_23C7E171C();
        v15 = v30;
        if (*(_QWORD *)(v30 + 16) >= *(_QWORD *)(v30 + 24) >> 1)
        {
          sub_23C7E8190();
          v15 = v40;
        }
        sub_23C7E97E0();
        sub_23C7EC5CC();
        swift_bridgeObjectRelease();
        sub_23C7E0810();
        v52 = v42;
        sub_23C911880();
        sub_23C7E415C();
        sub_23C7DB624();
        sub_23C7ECBA4();
        if (v24)
        {
          sub_23C7E8190();
          v15 = v41;
        }
        sub_23C7E97E0();
        sub_23C7E3198();
      }
    }
    v14 = v46;
  }
LABEL_20:
  v47 = 0x203A776F72;
  v48 = 0xE500000000000000;
  Row.description.getter();
  sub_23C7E415C();
  sub_23C7DB624();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C7E902C();
    v15 = v34;
  }
  sub_23C7ECBA4();
  if (v24)
  {
    sub_23C7E8190();
    v15 = v35;
  }
  sub_23C7E97E0();
  if (v4)
  {
    v47 = 0x60203A6C7173;
    v48 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C7E9AEC();
    if (v24)
    {
      sub_23C7E902C();
      v15 = v36;
    }
    *(_QWORD *)(v15 + 16) = 0x203A776F72;
    v31 = v15 + 16 * (_QWORD)v14;
    *(_QWORD *)(v31 + 32) = &v47;
    *(_QWORD *)(v31 + 40) = 0xE500000000000000;
  }
  if (v6)
  {
    v47 = 0x746E656D75677261;
    v48 = 0xEB00000000203A73;
    v52 = v6;
    v53 = v7;
    sub_23C7ECFC8();
    StatementArguments.description.getter();
    sub_23C7E415C();
    sub_23C7DB624();
    sub_23C7E6BF0();
    sub_23C7E9AEC();
    if (v24)
    {
      sub_23C7E902C();
      v15 = v37;
    }
    *(_QWORD *)(v15 + 16) = 0x203A776F72;
    v32 = v15 + 16 * (_QWORD)v14;
    *(_QWORD *)(v32 + 32) = &v52;
    *(_QWORD *)(v32 + 40) = 0xE500000000000000;
  }
  swift_bridgeObjectRelease();
  sub_23C815EF0(v3, v2, v43);
  swift_bridgeObjectRelease();
  sub_23C7E6BF0();
  v47 = v45;
  v48 = v44;
  sub_23C910F5C();
  v52 = v15;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_release();
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t sub_23C815DE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return result;
  }
  *a3 = v4;
  if (v4 < 0 || *(_QWORD *)(v3 + 72) < v4)
    goto LABEL_6;
  return result;
}

uint64_t sub_23C815E0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23C7FC8A8(v0);
  swift_release();
  return v1;
}

uint64_t sub_23C815E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_23C7FC968(a1, a2);
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DFE08();
  return v2;
}

uint64_t sub_23C815E98(uint64_t a1)
{
  if (a1 < 16)
    return 0;
  sub_23C911634();
  return 0;
}

uint64_t sub_23C815EDC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C8150F4(a1, a2, a3);
  return a1;
}

uint64_t sub_23C815EF0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C815110(a1, a2, a3);
  return a1;
}

unint64_t sub_23C815F08()
{
  unint64_t result;

  result = qword_256BCBF68[0];
  if (!qword_256BCBF68[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for RowKey, &type metadata for RowKey);
    atomic_store(result, qword_256BCBF68);
  }
  return result;
}

uint64_t destroy for RowKey(uint64_t a1)
{
  return sub_23C815110(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12GRDBInternal6RowKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C8150F4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RowKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C8150F4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C815110(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RowKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C815110(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Statement.TransactionEffect(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Statement.TransactionEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C8160BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23C8160C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for RowKey()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8160D8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C815EDC(a5, a6, a7);
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_23C8150F4(a1, a2, a3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C815EDC(a7, a8, a9);
    swift_bridgeObjectRetain();
    a10 = a12;
  }
  return sub_23C7E76BC(a10);
}

uint64_t destroy for RowDecodingError(uint64_t a1)
{
  return sub_23C8161E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t sub_23C8161E4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C815EF0(a5, a6, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C815110(a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C815EF0(a7, a8, a9);
    swift_bridgeObjectRelease();
    a10 = a12;
  }
  return sub_23C7E13C4(a10);
}

uint64_t initializeWithCopy for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_BYTE *)(a2 + 104);
  sub_23C8160D8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 104) = v17;
  return a1;
}

uint64_t assignWithCopy for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_BYTE *)(a2 + 104);
  sub_23C8160D8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_BYTE *)(a1 + 104) = v29;
  sub_23C8161E4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23);
  return a1;
}

void *initializeWithTake for RowDecodingError(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x69uLL);
}

uint64_t assignWithTake for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(_BYTE *)(a2 + 104);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_BYTE *)(a1 + 104);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 96) = v3;
  *(_BYTE *)(a1 + 104) = v4;
  sub_23C8161E4(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RowDecodingError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 105))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 104);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RowDecodingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C8165C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_23C8165C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 104) = a2 & 1;
  return result;
}

void type metadata accessor for RowDecodingError()
{
  sub_23C7DFB90();
}

uint64_t destroy for RowDecodingError.Context(uint64_t a1)
{
  int v2;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255)
    sub_23C815110(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2);
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    sub_23C8150F4(v6, v7, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = v5;
  }
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      sub_23C8150F4(v12, v13, *(_BYTE *)(a2 + 40));
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_BYTE *)(a1 + 40) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_23C8168B8(a1 + 24);
    v14 = *(_BYTE *)(a2 + 40);
    *v4 = *v5;
    *(_BYTE *)(a1 + 40) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    sub_23C8150F4(v7, v8, *(_BYTE *)(a2 + 40));
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    v11 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v6;
    sub_23C815110(v9, v10, v11);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v16)
  {
    sub_23C8168E4(a1 + 64);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 64) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C8168B8(uint64_t a1)
{
  destroy for RowKey(a1);
  return a1;
}

uint64_t sub_23C8168E4(uint64_t a1)
{
  destroy for TableRegion();
  return a1;
}

void *initializeWithTake for RowDecodingError.Context(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 != 255)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *v5;
      *(_BYTE *)(a1 + 40) = v7;
      sub_23C815110(v8, v9, v6);
      goto LABEL_6;
    }
    sub_23C8168B8(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
LABEL_6:
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
LABEL_10:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v11)
  {
    sub_23C8168E4(a1 + 64);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RowDecodingError.Context(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RowDecodingError.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for RowDecodingError.Context()
{
  sub_23C7DFB90();
}

uint64_t destroy for RowDecodingContext(uint64_t a1)
{
  int v2;
  uint64_t result;

  swift_release();
  v2 = *(unsigned __int8 *)(a1 + 24);
  if (v2 != 255)
    sub_23C815110(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v2);
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  if (v5 == 255)
  {
    *v4 = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_23C8150F4(v6, v7, v5);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v5;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain();
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(_QWORD *)(a2 + 16);
      sub_23C8150F4(v12, v13, *(_BYTE *)(a2 + 24));
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v13;
      *(_BYTE *)(a1 + 24) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_23C8168B8(a1 + 8);
    v14 = *(_BYTE *)(a2 + 24);
    *v4 = *v5;
    *(_BYTE *)(a1 + 24) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    sub_23C8150F4(v7, v8, *(_BYTE *)(a2 + 24));
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    v11 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v6;
    sub_23C815110(v9, v10, v11);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v16)
  {
    sub_23C8168E4(a1 + 48);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 48) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = (_OWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 24);
    if (v6 != 255)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)(a1 + 8) = *v4;
      *(_BYTE *)(a1 + 24) = v6;
      sub_23C815110(v7, v8, v5);
      goto LABEL_6;
    }
    sub_23C8168B8(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
LABEL_6:
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
LABEL_10:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v10)
  {
    sub_23C8168E4(a1 + 48);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for RowDecodingContext()
{
  sub_23C7DFB90();
}

uint64_t sub_23C816E3C()
{
  uint64_t v0;

  return sub_23C7E76BC(v0);
}

Swift::Int32 __swiftcall String.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  void (__cdecl *v4)(void *);
  uint64_t v5;
  Swift::Int32 v6;

  if (qword_25430D368 != -1)
    swift_once();
  v4 = (void (__cdecl *)(void *))qword_254310430;
  v5 = sub_23C910EFC();
  v6 = sqlite3_bind_text((sqlite3_stmt *)to._rawValue, at, (const char *)(v5 + 32), -1, v4);
  swift_release();
  return v6;
}

uint64_t static Double.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 16) != 1)
    v1 = 0;
  if (*(_BYTE *)(a1 + 16))
    return v1;
  else
    *(double *)&result = (double)*(uint64_t *)a1;
  return result;
}

Swift::Bool __swiftcall Bool.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  return sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index) != 0;
}

void Bool.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

uint64_t static Bool.fromDatabaseValue(_:)(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0;
  if (*(_BYTE *)(a1 + 16) != 1)
    v1 = 2;
  if (*(_BYTE *)(a1 + 16))
    return v1;
  else
    return *(_QWORD *)a1 != 0;
}

Swift::Int32 __swiftcall Bool.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  char v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2 & 1);
}

void sub_23C816F78(uint64_t a1@<X8>)
{
  Bool.databaseValue.getter(a1);
}

uint64_t sub_23C816F80@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = static Bool.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

void sub_23C816FA4(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, Swift::Bool *a3@<X8>)
{
  *a3 = Bool.init(sqliteStatement:index:)(a1, a2);
  sub_23C7DB390();
}

uint64_t sub_23C816FC8(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Bool.bind(to:at:)(to, at);
}

Swift::Int_optional __swiftcall Int.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_int64 v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v2 = sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  v3 = 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t static Int.fromDatabaseValue(_:)(uint64_t *a1)
{
  uint64_t result;
  int v3;

  result = *a1;
  v3 = *((unsigned __int8 *)a1 + 16);
  if (v3)
  {
    if (v3 != 1 || *(double *)&result < -9.22337204e18 || *(double *)&result >= 9.22337204e18)
    {
      *(double *)&result = COERCE_DOUBLE(sub_23C7EDB44());
      return result;
    }
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        *(double *)&result = COERCE_DOUBLE(sub_23C7EE3FC(*(double *)&result));
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t static Int64.fromDatabaseValue(_:)(uint64_t *a1)
{
  uint64_t result;
  int v3;
  BOOL v4;

  result = *a1;
  v3 = *((unsigned __int8 *)a1 + 16);
  if (v3)
  {
    if (v3 != 1 || (*(double *)&result >= -9.22337204e18 ? (v4 = *(double *)&result < 9.22337204e18) : (v4 = 0), !v4))
    {
      *(double *)&result = COERCE_DOUBLE(sub_23C7EDB44());
      return result;
    }
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        *(double *)&result = COERCE_DOUBLE(sub_23C7EE3FC(*(double *)&result));
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8170C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = static Int.fromDatabaseValue(_:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_23C8170EC(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int.bind(to:at:)(to, at);
}

Swift::Int8_optional __swiftcall Int8.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  Swift::Int8_optional v2;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7EC5E0();
  sub_23C7E1A0C();
  return v2;
}

void Int8.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static Int8.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  char v3;
  BOOL v4;

  if (!*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 16) != 1)
    goto LABEL_10;
  v2 = sub_23C7E97F0(*(double *)a1);
  v4 = v4 == v3 && v2 < 9.22337204e18;
  if (!v4)
    goto LABEL_10;
  if ((~v1 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
LABEL_10:
      sub_23C7EDDA4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int32 __swiftcall Int8.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  char v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C8171B4(uint64_t a1@<X8>)
{
  Int8.databaseValue.getter(a1);
}

void sub_23C8171BC(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  char v4;

  static Int8.fromDatabaseValue(_:)(a1);
  *a2 = v3;
  a2[1] = v4 & 1;
}

void sub_23C8171E8(sqlite3_stmt *a1, int a2)
{
  _BYTE *v2;
  char v3;
  char v4;
  char v5;
  char v6;

  sub_23C7E0838(a1, a2);
  sub_23C7EC5E0();
  if (v5)
    v6 = v3;
  else
    v6 = 0;
  *v2 = v6;
  v2[1] = v4;
  sub_23C7DB390();
}

uint64_t sub_23C817214(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int8.bind(to:at:)(to, at);
}

Swift::Int16_optional __swiftcall Int16.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  int v2;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7EC5E0();
  sub_23C7E1A0C();
  return (Swift::Int16_optional)v2;
}

void Int16.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static Int16.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  char v3;
  BOOL v4;

  if (!*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 16) != 1)
    goto LABEL_10;
  v2 = sub_23C7E97F0(*(double *)a1);
  v4 = v4 == v3 && v2 < 9.22337204e18;
  if (!v4)
    goto LABEL_10;
  if ((~v1 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
LABEL_10:
      sub_23C7EDDA4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int32 __swiftcall Int16.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  __int16 v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C8172DC(uint64_t a1@<X8>)
{
  Int16.databaseValue.getter(a1);
}

void sub_23C8172E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  char v4;

  static Int16.fromDatabaseValue(_:)(a1);
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = v4 & 1;
}

void sub_23C817310(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;
  __int16 v6;

  sub_23C7E0838(a1, a2);
  sub_23C7EC5E0();
  if (v5)
    v6 = v3;
  else
    v6 = 0;
  *(_WORD *)v2 = v6;
  *(_BYTE *)(v2 + 2) = v4;
  sub_23C7DB390();
}

uint64_t sub_23C81733C(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int16.bind(to:at:)(to, at);
}

Swift::Int32_optional __swiftcall Int32.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  char v5;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7EC5E0();
  v4 = v3;
  if (!v5)
    v4 = 0;
  return (Swift::Int32_optional)(v4 | ((unint64_t)v2 << 32));
}

void Int32.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static Int32.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  char v4;
  BOOL v5;
  BOOL v6;

  v1 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) != 1
      || ((v3 = sub_23C7E97F0(*(double *)&v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_23C7E88C4(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  v6 = (int)v1 == v1;
  v1 = v1;
  if (!v6)
    v1 = 0;
  sub_23C7E88C4(v1);
}

Swift::Int32 __swiftcall Int32.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  int v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C81740C(uint64_t a1@<X8>)
{
  Int32.databaseValue.getter(a1);
}

void sub_23C817414(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  char v4;

  static Int32.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v4 & 1;
}

void sub_23C817440(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  sqlite3_int64 v3;
  int v4;

  v3 = sub_23C7E0838(a1, a2);
  v4 = v3;
  if ((int)v3 != v3)
    v4 = 0;
  *(_DWORD *)v2 = v4;
  *(_BYTE *)(v2 + 4) = (int)v3 != v3;
  sub_23C7DB390();
}

uint64_t sub_23C817470(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int32.bind(to:at:)(to, at);
}

uint64_t sub_23C81747C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = static Int64.fromDatabaseValue(_:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_23C8174A8(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = Int64.init(sqliteStatement:index:)(a1, a2);
  *(_BYTE *)(a3 + 8) = 0;
  sub_23C7DB390();
}

Swift::UInt_optional __swiftcall UInt.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_int64 v2;
  _BOOL8 v3;
  Swift::UInt v4;
  Swift::UInt_optional result;

  v2 = sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  v3 = (unint64_t)v2 >> 63;
  v4 = v2 & ~(v2 >> 63);
  result.is_nil = v3;
  result.value = v4;
  return result;
}

uint64_t sub_23C8174F8()
{
  _QWORD *v0;

  return UInt.databaseValue.getter(*v0);
}

uint64_t sub_23C817500@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = static UInt.fromDatabaseValue(_:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_23C81752C(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  sqlite3_int64 v3;

  v3 = sub_23C7E0838(a1, a2);
  *(_QWORD *)v2 = v3 & ~(v3 >> 63);
  *(_BYTE *)(v2 + 8) = v3 < 0;
  sub_23C7DB390();
}

uint64_t sub_23C817558(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt.bind(to:at:)(to, at);
}

Swift::UInt8_optional __swiftcall UInt8.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  Swift::UInt8_optional v2;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7E1A0C();
  return v2;
}

void UInt8.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static UInt8.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  char v3;
  BOOL v4;

  if (!*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 16) != 1)
    goto LABEL_10;
  v2 = sub_23C7E97F0(*(double *)a1);
  v4 = v4 == v3 && v2 < 9.22337204e18;
  if (!v4)
    goto LABEL_10;
  if ((~v1 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
LABEL_10:
      sub_23C7EDDA4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int32 __swiftcall UInt8.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  unsigned __int8 v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C81761C(uint64_t a1@<X8>)
{
  UInt8.databaseValue.getter(a1);
}

void sub_23C817624(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  char v4;

  static UInt8.fromDatabaseValue(_:)(a1);
  *a2 = v3;
  a2[1] = v4 & 1;
}

void sub_23C817650(sqlite3_stmt *a1, int a2)
{
  _BYTE *v2;
  unint64_t v3;
  char v4;

  v3 = sub_23C7E0838(a1, a2);
  if (v3 <= 0xFF)
    v4 = v3;
  else
    v4 = 0;
  *v2 = v4;
  v2[1] = v3 > 0xFF;
  sub_23C7DB390();
}

uint64_t sub_23C81767C(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt8.bind(to:at:)(to, at);
}

Swift::UInt16_optional __swiftcall UInt16.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  int v2;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7E172C();
  sub_23C7E1A0C();
  return (Swift::UInt16_optional)v2;
}

void UInt16.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static UInt16.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  char v3;
  BOOL v4;

  if (!*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 16) != 1)
    goto LABEL_10;
  v2 = sub_23C7E97F0(*(double *)a1);
  v4 = v4 == v3 && v2 < 9.22337204e18;
  if (!v4)
    goto LABEL_10;
  if ((~v1 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
LABEL_10:
      sub_23C7EDDA4();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int32 __swiftcall UInt16.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  unsigned __int16 v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C817744(uint64_t a1@<X8>)
{
  UInt16.databaseValue.getter(a1);
}

void sub_23C81774C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  char v4;

  static UInt16.fromDatabaseValue(_:)(a1);
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = v4 & 1;
}

void sub_23C817778(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  char v5;
  __int16 v6;

  sub_23C7E0838(a1, a2);
  sub_23C7E172C();
  if (v5)
    v6 = v3;
  else
    v6 = 0;
  *(_WORD *)v2 = v6;
  *(_BYTE *)(v2 + 2) = v4;
  sub_23C7DB390();
}

uint64_t sub_23C8177A4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt16.bind(to:at:)(to, at);
}

Swift::UInt32_optional __swiftcall UInt32.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  char v5;

  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_23C7E172C();
  v4 = v3;
  if (!v5)
    v4 = 0;
  return (Swift::UInt32_optional)(v4 | ((unint64_t)v2 << 32));
}

void UInt32.databaseValue.getter(uint64_t a1@<X8>)
{
  sub_23C7E9038(a1);
}

void static UInt32.fromDatabaseValue(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  double v3;
  char v4;
  BOOL v5;
  BOOL v6;

  v1 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) != 1
      || ((v3 = sub_23C7E97F0(*(double *)&v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_23C7E88C4(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  v6 = HIDWORD(v1) == 0;
  v1 = v1;
  if (!v6)
    v1 = 0;
  sub_23C7E88C4(v1);
}

Swift::Int32 __swiftcall UInt32.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  unsigned int v2;

  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C817874(uint64_t a1@<X8>)
{
  UInt32.databaseValue.getter(a1);
}

void sub_23C81787C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  char v4;

  static UInt32.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v4 & 1;
}

void sub_23C8178A8(sqlite3_stmt *a1, int a2)
{
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  int v6;

  sub_23C7E0838(a1, a2);
  sub_23C7E172C();
  if (v5)
    v6 = v3;
  else
    v6 = 0;
  *(_DWORD *)v2 = v6;
  *(_BYTE *)(v2 + 4) = v4;
  sub_23C7DB390();
}

uint64_t sub_23C8178D4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt32.bind(to:at:)(to, at);
}

uint64_t sub_23C8178E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) == 0)
    return _sSi12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0(result, a2);
  __break(1u);
  return result;
}

void _sSu12GRDBInternalE17fromDatabaseValueySuSgAA0cD0VFZ_0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  char v3;
  BOOL v4;

  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 16) == 1)
  {
    v2 = sub_23C7E97F0(*(double *)a1);
    v4 = v4 == v3 && v2 < 9.22337204e18;
    if (v4)
    {
      if ((~v1 & 0x7FF0000000000000) != 0)
      {
        if (v2 > -9.22337204e18)
          return;
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

sqlite3_stmt *sub_23C817964(sqlite3_stmt *result, int a2, sqlite3_int64 a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    return (sqlite3_stmt *)sqlite3_bind_int64(result, a2, a3);
  __break(1u);
  return result;
}

uint64_t sub_23C817974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = static Double.fromDatabaseValue(_:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_23C8179A0(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  *(Swift::Double *)a3 = Double.init(sqliteStatement:index:)(a1, a2);
  *(_BYTE *)(a3 + 8) = 0;
  sub_23C7DB390();
}

uint64_t sub_23C8179C4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Double.bind(to:at:)(to, at);
}

Swift::Float __swiftcall Float.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  return sqlite3_column_double((sqlite3_stmt *)sqliteStatement._rawValue, index);
}

void Float.databaseValue.getter(uint64_t a1@<X8>, float a2@<S0>)
{
  _sSd12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0(a1, a2);
}

unint64_t static Float.fromDatabaseValue(_:)(uint64_t a1)
{
  float v1;
  float v2;

  v1 = *(double *)a1;
  v2 = v1;
  if (*(_BYTE *)(a1 + 16) != 1)
    v2 = 0.0;
  if (*(_BYTE *)(a1 + 16))
    return sub_23C7E88C4(LODWORD(v2));
  else
    return sub_23C7E88C4(COERCE_UNSIGNED_INT((float)*(uint64_t *)a1));
}

Swift::Int32 __swiftcall Float.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  float v2;

  return sqlite3_bind_double((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_23C817A34(uint64_t a1@<X8>)
{
  float *v1;

  Float.databaseValue.getter(a1, *v1);
}

unint64_t sub_23C817A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = static Float.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_23C817A68(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  *(Swift::Float *)a3 = Float.init(sqliteStatement:index:)(a1, a2);
  *(_BYTE *)(a3 + 4) = 0;
  sub_23C7DB390();
}

uint64_t sub_23C817A8C(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Float.bind(to:at:)(to, at);
}

uint64_t sub_23C817A94(Swift::OpaquePointer to, Swift::Int32 at)
{
  return String.bind(to:at:)(to, at);
}

void sub_23C817A9C(uint64_t a1)
{
  sub_23C7E81A8(a1, 22, 0x800000023C91CE40, (uint64_t)sub_23C817AC4, &qword_25430DA30);
}

void sub_23C817AC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817E58(a1, (uint64_t (*)(_QWORD, unint64_t))MEMORY[0x24BDD04F0], a2);
}

uint64_t static DatabaseFunction.capitalize.getter()
{
  return sub_23C817F9C(&qword_25430DC20);
}

void sub_23C817AFC(uint64_t a1)
{
  sub_23C7E81A8(a1, 20, 0x800000023C91CE20, (uint64_t)sub_23C817BA4, &qword_25430DA68);
}

void sub_23C817B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;

  type metadata accessor for DatabaseFunction();
  swift_allocObject();
  DatabaseFunction.init(_:argumentCount:pure:function:)(a2, a3, 1, 1, a4, 0);
  *a5 = v9;
}

void sub_23C817BA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817C20(a1, (uint64_t (*)(uint64_t, unint64_t))MEMORY[0x24BEE0A08], a2);
}

uint64_t static DatabaseFunction.lowercase.getter()
{
  return sub_23C817F9C(&qword_25430D958);
}

void sub_23C817BDC(uint64_t a1)
{
  sub_23C7E81A8(a1, 20, 0x800000023C91CE00, (uint64_t)sub_23C817C04, &qword_25430DA70);
}

void sub_23C817C04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817C20(a1, (uint64_t (*)(uint64_t, unint64_t))MEMORY[0x24BEE0A20], a2);
}

void sub_23C817C20(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7E61EC();
  if (v7)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 48);
    if (v10 == 3)
    {
      sub_23C7E56A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 3);
      sub_23C910EA8();
      v11 = sub_23C910E90();
      v13 = v12;
      sub_23C7E5640(v9, v8, 3);
      if (v13)
      {
        v9 = v11;
        v8 = v13;
        goto LABEL_7;
      }
    }
    else if (v10 == 2)
    {
      sub_23C7E56A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 2);
LABEL_7:
      v14 = a2(v9, v8);
      v16 = v15;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 24) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(a3 + 32) = &protocol witness table for String;
      *(_QWORD *)a3 = v14;
      *(_QWORD *)(a3 + 8) = v16;
LABEL_9:
      sub_23C7E4BEC();
      return;
    }
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t static DatabaseFunction.uppercase.getter()
{
  return sub_23C817F9C(&qword_25430DA78);
}

void sub_23C817D54(uint64_t a1)
{
  sub_23C7E81A8(a1, 31, 0x800000023C91CDE0, (uint64_t)sub_23C817D7C, &qword_25430DA58);
}

void sub_23C817D7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817E58(a1, MEMORY[0x24BDD0558], a2);
}

uint64_t static DatabaseFunction.localizedCapitalize.getter()
{
  return sub_23C817F9C(&qword_25430DA60);
}

void sub_23C817DB4(uint64_t a1)
{
  sub_23C7E81A8(a1, 29, 0x800000023C91CDC0, (uint64_t)sub_23C817DDC, &qword_25430DA38);
}

void sub_23C817DDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817E58(a1, MEMORY[0x24BDD0530], a2);
}

uint64_t static DatabaseFunction.localizedLowercase.getter()
{
  return sub_23C817F9C(&qword_25430DA40);
}

void sub_23C817E14(uint64_t a1)
{
  sub_23C7E81A8(a1, 29, 0x800000023C91CDA0, (uint64_t)sub_23C817E3C, &qword_25430DA48);
}

void sub_23C817E3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C817E58(a1, MEMORY[0x24BDD0538], a2);
}

void sub_23C817E58(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C910EB4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7E61EC();
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 48);
    if (v10 == 3)
    {
      sub_23C7E56A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 3);
      sub_23C910EA8();
      sub_23C910E90();
      v12 = v11;
      sub_23C7E5640(v8, v9, 3);
      if (v12)
        goto LABEL_6;
    }
    else if (v10 == 2)
    {
      sub_23C7E56A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 2);
LABEL_6:
      v13 = sub_23C7EEE60();
      v14 = MEMORY[0x24BEE0D00];
      v15 = a2(MEMORY[0x24BEE0D00], v13);
      v17 = v16;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 24) = v14;
      *(_QWORD *)(a3 + 32) = &protocol witness table for String;
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v17;
LABEL_8:
      sub_23C7E4BEC();
      return;
    }
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t static DatabaseFunction.localizedUppercase.getter()
{
  return sub_23C817F9C(&qword_25430DA50);
}

uint64_t sub_23C817F9C(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_23C817FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 0;
  if ((sub_23C911A18() & 1) != 0)
    return -1;
  return (sub_23C911A18() & 1) == 0;
}

uint64_t static DatabaseCollation.unicodeCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.caseInsensitiveCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedCaseInsensitiveCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedStandardCompare.getter()
{
  return swift_initStaticObject();
}

double EncodableRecord<>.encode(to:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for RecordEncoder(0, a2, a3, a4);
  v6 = a1[1];
  v11.n128_u64[0] = *a1;
  v11.n128_u64[1] = v6;
  v7 = sub_23C8181DC(&v11);
  v9 = v8;
  v12 = v5;
  v13 = MEMORY[0x242626100](&unk_23C913FE8, v5, v7);
  v11.n128_u64[0] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7DF5CC();
  sub_23C910E00();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v11);
  sub_23C818220(&v11);
  swift_release();
  result = v11.n128_f64[0];
  *(__n128 *)a1 = v11;
  return result;
}

uint64_t type metadata accessor for RecordEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RecordEncoder);
}

__n128 sub_23C8181DC(__n128 *a1)
{
  uint64_t v2;
  __n128 result;

  v2 = swift_allocObject();
  result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  return result;
}

uint64_t sub_23C818210()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C818220@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C81826C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23C8182AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 48))();
}

void sub_23C8182D8()
{
  swift_retain();
  type metadata accessor for RecordEncoder.KeyedContainer();
}

uint64_t sub_23C818324(uint64_t a1)
{
  MEMORY[0x242626100](&unk_23C914060, a1);
  return sub_23C91185C();
}

void sub_23C818368()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C8183C0()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C818418(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;
  uint64_t v11[5];
  _BYTE v12[24];
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = MEMORY[0x24BEE1328];
  v14 = &protocol witness table for Bool;
  v12[0] = a1;
  v11[3] = a5;
  v11[4] = a7;
  v9 = sub_23C812004(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v9, a2, a5);
  sub_23C8195F4((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_23C7E7938((uint64_t)v12, (uint64_t *)&unk_25430D6B8);
}

void sub_23C8184B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_23C7E4168();
  v28 = v1;
  v29 = v0;
  v27 = v2;
  v3 = sub_23C812004(v26);
  v4 = sub_23C7E4CB0((uint64_t)v3);
  v12 = sub_23C7E81B0(v4, v5, v6, v7, v8, v9, v10, v11, v26[0], v26[1], v26[2], v27, v28, v29);
  v20 = sub_23C7E7704(v12, v13, v14, v15, v16, v17, v18, v19, v26[0]);
  sub_23C7E9804(v20, (uint64_t *)&unk_25430D6B8, v21, v22, v23, v24, v25);
  sub_23C7E31BC();
}

void sub_23C818500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  sub_23C7E4168();
  v42 = v0;
  v8 = sub_23C7E1738(v0, v1, v2, v3, v4, v5, v6, v7, v31, v34, v36, v38, v40);
  v9 = sub_23C7E4CB0((uint64_t)v8);
  v17 = sub_23C7E81B0(v9, v10, v11, v12, v13, v14, v15, v16, v32, v35, v37, v39, v41, v42);
  v25 = sub_23C7E7704(v17, v18, v19, v20, v21, v22, v23, v24, v33);
  sub_23C7E9804(v25, (uint64_t *)&unk_25430D6B8, v26, v27, v28, v29, v30);
  sub_23C7E31BC();
}

void sub_23C818544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  sub_23C7E4168();
  v42 = v0;
  v8 = sub_23C7E1738(v0, v1, v2, v3, v4, v5, v6, v7, v31, v34, v36, v38, v40);
  v9 = sub_23C7E4CB0((uint64_t)v8);
  v17 = sub_23C7E81B0(v9, v10, v11, v12, v13, v14, v15, v16, v32, v35, v37, v39, v41, v42);
  v25 = sub_23C7E7704(v17, v18, v19, v20, v21, v22, v23, v24, v33);
  sub_23C7E9804(v25, (uint64_t *)&unk_25430D6B8, v26, v27, v28, v29, v30);
  sub_23C7E31BC();
}

void sub_23C818588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  sub_23C7E4168();
  v42 = v0;
  v8 = sub_23C7E1738(v0, v1, v2, v3, v4, v5, v6, v7, v31, v34, v36, v38, v40);
  v9 = sub_23C7E4CB0((uint64_t)v8);
  v17 = sub_23C7E81B0(v9, v10, v11, v12, v13, v14, v15, v16, v32, v35, v37, v39, v41, v42);
  v25 = sub_23C7E7704(v17, v18, v19, v20, v21, v22, v23, v24, v33);
  sub_23C7E9804(v25, (uint64_t *)&unk_25430D6B8, v26, v27, v28, v29, v30);
  sub_23C7E31BC();
}

uint64_t sub_23C8185CC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;
  uint64_t v11[5];
  _DWORD v12[6];
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = MEMORY[0x24BEE14E8];
  v14 = &protocol witness table for Float;
  *(float *)v12 = a2;
  v11[3] = a5;
  v11[4] = a7;
  v9 = sub_23C812004(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v9, a1, a5);
  sub_23C8195F4((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_23C7E7938((uint64_t)v12, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C818668(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;
  uint64_t v11[5];
  _QWORD v12[5];

  v12[3] = MEMORY[0x24BEE13C8];
  v12[4] = &protocol witness table for Double;
  *(double *)v12 = a2;
  v11[3] = a5;
  v11[4] = a7;
  v9 = sub_23C812004(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v9, a1, a5);
  sub_23C8195F4((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_23C7E7938((uint64_t)v12, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C818704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v12[5];
  _QWORD v13[5];

  v13[3] = MEMORY[0x24BEE0D00];
  v13[4] = &protocol witness table for String;
  v13[0] = a1;
  v13[1] = a2;
  v12[3] = a6;
  v12[4] = a8;
  v10 = sub_23C812004(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v10, a3, a6);
  swift_bridgeObjectRetain();
  sub_23C8195F4((uint64_t)v13, v12);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  return sub_23C7E7938((uint64_t)v13, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C8187B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v13;
  uint64_t v15[5];

  v15[3] = a5;
  v15[4] = a8;
  v13 = sub_23C812004(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v13, a2, a5);
  sub_23C819754(a1, v15, a6, a9);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
}

uint64_t sub_23C818854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v10[5];
  _OWORD v11[2];
  uint64_t v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10[3] = a4;
  v10[4] = a6;
  v8 = sub_23C812004(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v8, a1, a4);
  sub_23C8195F4((uint64_t)v11, v10);
  sub_23C7E7938((uint64_t)v11, (uint64_t *)&unk_25430D6B8);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
}

uint64_t sub_23C8188E4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v9;
  uint64_t v11[5];
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  if (a1 == 2)
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  else
  {
    *((_QWORD *)&v13 + 1) = MEMORY[0x24BEE1328];
    v14 = &protocol witness table for Bool;
    LOBYTE(v12) = a1 & 1;
  }
  v11[3] = a5;
  v11[4] = a7;
  v9 = sub_23C812004(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v9, a2, a5);
  sub_23C8195F4((uint64_t)&v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_23C7E7938((uint64_t)&v12, (uint64_t *)&unk_25430D6B8);
}

void sub_23C81899C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[5];
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  if ((a2 & 1) != 0)
  {
    a1 = 0;
    v26 = 0u;
    v27 = 0u;
  }
  else
  {
    v27 = a9;
  }
  v24[4] = a8;
  v25 = a1;
  v24[3] = a6;
  v9 = sub_23C812004(v24);
  sub_23C7E0840((uint64_t)v9);
  v10 = sub_23C8195F4((uint64_t)&v25, v24);
  v18 = sub_23C7E7704(v10, v11, v12, v13, v14, v15, v16, v17, v24[0]);
  sub_23C7E9804(v18, (uint64_t *)&unk_25430D6B8, v19, v20, v21, v22, v23);
  sub_23C7E31BC();
}

void sub_23C818A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7EE408();
  if ((v0 & 0x100) != 0)
    sub_23C7E5DFC();
  v8 = sub_23C7E8DE4(v0, v1, v2, v3, v4, v5, v6, v7, v18, v19, v20, v21, v22, v23);
  v9 = sub_23C7E0840((uint64_t)v8);
  v10 = sub_23C7E66E4(v9);
  v11 = sub_23C7E6BCC(v10);
  sub_23C7DE9A0(v11, (uint64_t *)&unk_25430D6B8, v12, v13, v14, v15, v16, v17);
  sub_23C7E9564();
}

void sub_23C818A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7EE408();
  if ((v0 & 0x10000) != 0)
    sub_23C7E5DFC();
  v8 = sub_23C7E8DE4(v0, v1, v2, v3, v4, v5, v6, v7, v18, v19, v20, v21, v22, v23);
  v9 = sub_23C7E0840((uint64_t)v8);
  v10 = sub_23C7E66E4(v9);
  v11 = sub_23C7E6BCC(v10);
  sub_23C7DE9A0(v11, (uint64_t *)&unk_25430D6B8, v12, v13, v14, v15, v16, v17);
  sub_23C7E9564();
}

void sub_23C818ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7EE408();
  if ((v0 & 0x100000000) != 0)
    sub_23C7E5DFC();
  v8 = sub_23C7E8DE4(v0, v1, v2, v3, v4, v5, v6, v7, v18, v19, v20, v21, v22, v23);
  v9 = sub_23C7E0840((uint64_t)v8);
  v10 = sub_23C7E66E4(v9);
  v11 = sub_23C7E6BCC(v10);
  sub_23C7DE9A0(v11, (uint64_t *)&unk_25430D6B8, v12, v13, v14, v15, v16, v17);
  sub_23C7E9564();
}

uint64_t sub_23C818B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v12[5];
  __int128 v13;
  __int128 v14;
  _UNKNOWN **v15;

  if (a2)
  {
    *((_QWORD *)&v14 + 1) = MEMORY[0x24BEE0D00];
    v15 = &protocol witness table for String;
    *(_QWORD *)&v13 = a1;
    *((_QWORD *)&v13 + 1) = a2;
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  v12[3] = a6;
  v12[4] = a8;
  v10 = sub_23C812004(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v10, a3, a6);
  swift_bridgeObjectRetain();
  sub_23C8195F4((uint64_t)&v13, v12);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  return sub_23C7E7938((uint64_t)&v13, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C818BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[5];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a8;
  v26 = a2;
  v31 = a3;
  v12 = sub_23C9114E4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  if (sub_23C7DE718((uint64_t)v16, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v27[3] = a5;
    v27[4] = v25;
    v20 = sub_23C812004(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v20, v26, a5);
    sub_23C8195F4((uint64_t)&v28, v27);
    sub_23C7E7938((uint64_t)&v28, (uint64_t *)&unk_25430D6B8);
    v21 = v27;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, a6);
    *((_QWORD *)&v29 + 1) = a5;
    v30 = v25;
    v22 = sub_23C812004((uint64_t *)&v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v22, v26, a5);
    sub_23C819754((uint64_t)v19, &v28, a6, a9);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a6);
    v21 = (uint64_t *)&v28;
  }
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
}

void sub_23C818DAC()
{
  sub_23C9117B4();
  __break(1u);
}

void sub_23C818E0C()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C818E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for RecordEncoder(0, a2, a3, a3);
  a4[3] = v6;
  a4[4] = MEMORY[0x242626100](&unk_23C913FE8, v6);
  *a4 = a1;
  return swift_retain();
}

uint64_t sub_23C818EB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for RecordEncoder(0, a2, a4, a3);
  a5[3] = v7;
  a5[4] = MEMORY[0x242626100](&unk_23C913FE8, v7);
  *a5 = a1;
  return swift_retain();
}

uint64_t sub_23C818F08()
{
  return sub_23C818210();
}

uint64_t sub_23C818F1C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_23C818854(a1, *v2, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_23C818F40(char a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;

  return sub_23C818418(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_23C818F64(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  return sub_23C81924C(a1, a2, a3, a4, a5, sub_23C818704);
}

uint64_t sub_23C818F80(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t *v3;

  return sub_23C818668(a1, a3, *v3, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_23C818FA4(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t *v3;

  return sub_23C8185CC(a1, a3, *v3, a2[2], a2[3], a2[4], a2[5]);
}

void sub_23C818FC8()
{
  sub_23C819198();
}

void sub_23C818FEC()
{
  sub_23C8190D8();
}

void sub_23C819010()
{
  sub_23C819118();
}

void sub_23C819034()
{
  sub_23C819158();
}

void sub_23C819058()
{
  sub_23C819198();
}

uint64_t sub_23C81907C()
{
  return sub_23C911B2C();
}

void sub_23C819090()
{
  sub_23C819198();
}

void sub_23C8190B4()
{
  sub_23C8190D8();
}

void sub_23C8190D8()
{
  sub_23C7E9044();
  sub_23C818500();
  sub_23C7E1A0C();
}

void sub_23C8190F4()
{
  sub_23C819118();
}

void sub_23C819118()
{
  sub_23C7E9044();
  sub_23C818544();
  sub_23C7E1A0C();
}

void sub_23C819134()
{
  sub_23C819158();
}

void sub_23C819158()
{
  sub_23C7E9044();
  sub_23C818588();
  sub_23C7E1A0C();
}

void sub_23C819174()
{
  sub_23C819198();
}

void sub_23C819198()
{
  sub_23C7E9044();
  sub_23C8184B4();
  sub_23C7E1A0C();
}

uint64_t sub_23C8191B4()
{
  return sub_23C911B38();
}

void sub_23C8191C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  sub_23C819540(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))sub_23C8187B4);
}

uint64_t sub_23C8191E4()
{
  return sub_23C911B20();
}

uint64_t sub_23C81920C(char a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;

  return sub_23C8188E4(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_23C819230(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  return sub_23C81924C(a1, a2, a3, a4, a5, sub_23C818B24);
}

uint64_t sub_23C81924C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v6;

  return a6(a1, a2, a3, *v6, a4[2], a4[3], a4[4], a4[5]);
}

void sub_23C819274(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  sub_23C8194D4(a1, a2, a3, a4, a5, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
}

void sub_23C819298()
{
  sub_23C819470();
}

void sub_23C8192BC(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  sub_23C8194D4(a1, a2, a3, a4, a5, MEMORY[0x24BEE1768], (uint64_t)&protocol witness table for Int);
}

void sub_23C8192E0()
{
  sub_23C8193D0();
}

void sub_23C819304()
{
  sub_23C819420();
}

void sub_23C819328()
{
  sub_23C819470();
}

void sub_23C81934C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  sub_23C8194D4(a1, a2, a3, a4, a5, MEMORY[0x24BEE4008], (uint64_t)&protocol witness table for Int64);
}

uint64_t sub_23C819370()
{
  return sub_23C911AFC();
}

void sub_23C819388(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  sub_23C8194D4(a1, a2, a3, a4, a5, MEMORY[0x24BEE1E88], (uint64_t)&protocol witness table for UInt);
}

void sub_23C8193AC()
{
  sub_23C8193D0();
}

void sub_23C8193D0()
{
  sub_23C7E88D8();
  sub_23C818A18();
  sub_23C7E1A0C();
}

void sub_23C8193FC()
{
  sub_23C819420();
}

void sub_23C819420()
{
  sub_23C7E88D8();
  sub_23C818A74();
  sub_23C7E1A0C();
}

void sub_23C81944C()
{
  sub_23C819470();
}

void sub_23C819470()
{
  sub_23C818ACC();
  sub_23C7E1A0C();
}

void sub_23C8194B0(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  sub_23C8194D4(a1, a2, a3, a4, a5, MEMORY[0x24BEE4568], (uint64_t)&protocol witness table for UInt64);
}

void sub_23C8194D4(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  __int128 v8;

  *(_QWORD *)&v8 = a6;
  *((_QWORD *)&v8 + 1) = a7;
  sub_23C81899C(a1, a2 & 1, a3, *v7, a4[2], a4[3], a4[4], a4[5], v8);
  sub_23C7E1A0C();
}

uint64_t sub_23C81950C()
{
  return sub_23C911B14();
}

void sub_23C819524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  sub_23C819540(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))sub_23C818BE4);
}

void sub_23C819540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v7;

  a7(a1, a2, *v7, a5[2], a5[3], a3, a5[4], a5[5], a4);
  sub_23C7E1A0C();
}

void sub_23C819578()
{
  sub_23C818DAC();
}

uint64_t sub_23C8195B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23C8195DC(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C818E0C);
}

uint64_t sub_23C8195BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_23C818E6C(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_23C8195D0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_23C8195DC(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C818EB8);
}

uint64_t sub_23C8195DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_23C8195F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  uint64_t (*v11)(_QWORD *);

  sub_23C8182AC();
  if (v11)
  {
    if (v11 == (uint64_t (*)(_QWORD *))1)
    {
      sub_23C7E7E34(a2, a2[3]);
      sub_23C911C40();
      v4 = sub_23C821FD8();
      v6 = v5;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      v4 = v11(a2);
      v6 = v8;
      sub_23C7EFD08((unint64_t)v11);
      sub_23C7EFD08((unint64_t)v11);
    }
  }
  else
  {
    sub_23C7E7E34(a2, a2[3]);
    v4 = sub_23C911C40();
    v6 = v7;
  }
  sub_23C7F91B8(a1, (uint64_t)&v11);
  swift_beginAccess();
  sub_23C8211D0((uint64_t)&v11, v4, v6, (uint64_t)v10);
  sub_23C7E7938((uint64_t)&v11, (uint64_t *)&unk_25430D6B8);
  sub_23C7E7938((uint64_t)v10, &qword_25430CEA8);
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void sub_23C819754(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata *v36;
  _UNKNOWN **v37;
  void (*v38)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **);
  uint64_t v39;
  ValueMetadata *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  void *v69;
  __int128 v70;
  char v71;
  __int128 v72;
  __int128 v73;
  _UNKNOWN **v74;
  __int128 v75;
  char v76;
  ValueMetadata *v77;
  _UNKNOWN **v78;
  uint64_t v79;

  v62 = a4;
  v67 = a2;
  v79 = *MEMORY[0x24BDAC8D0];
  v64 = *v4;
  v7 = sub_23C7E79A8(&qword_25430CCD0);
  MEMORY[0x24BDAC7A8](v7);
  v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_23C910BA8();
  v60 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v59 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23C7E79A8(&qword_25430CEB0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v63 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v59 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v59 - v20;
  v22 = sub_23C910B6C();
  v61 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25(v21, a1, a3);
  if (swift_dynamicCast())
  {
    sub_23C7DE70C((uint64_t)v13, 0, 1, v22);
    if (sub_23C7DE718((uint64_t)v13, 1, v22) != 1)
    {
      v26 = v61;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v24, v13, v22);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v64 + 88) + 32))(&v72);
      v27 = v72;
      v28 = v73;
      v70 = v72;
      v71 = v73;
      sub_23C82097C((uint64_t)v24, (uint64_t *)&v75);
      sub_23C81ABB8((void *)v27, *((uint64_t *)&v27 + 1), v28);
      sub_23C8195F4((uint64_t)&v75, v67);
      sub_23C7E7938((uint64_t)&v75, (uint64_t *)&unk_25430D6B8);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v22);
      return;
    }
  }
  else
  {
    sub_23C7DE70C((uint64_t)v13, 1, 1, v22);
  }
  sub_23C7E7938((uint64_t)v13, &qword_25430CEB0);
  v25(v19, a1, a3);
  v29 = (uint64_t)v65;
  v30 = v66;
  if (swift_dynamicCast())
  {
    sub_23C7DE70C(v29, 0, 1, v30);
    if (sub_23C7DE718(v29, 1, v30) != 1)
    {
      v31 = v60;
      v32 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v59, v29, v30);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v64 + 88) + 40))(&v70);
      if ((_BYTE)v70)
      {
        v33 = v67;
        if (v70 == 1)
        {
          v34 = sub_23C910B84();
          v77 = (ValueMetadata *)MEMORY[0x24BEE0D00];
          v78 = &protocol witness table for String;
          *(_QWORD *)&v75 = v34;
          *((_QWORD *)&v75 + 1) = v35;
        }
        else
        {
          sub_23C910B84();
          v56 = sub_23C910E18();
          v58 = v57;
          swift_bridgeObjectRelease();
          v77 = (ValueMetadata *)MEMORY[0x24BEE0D00];
          v78 = &protocol witness table for String;
          *(_QWORD *)&v75 = v56;
          *((_QWORD *)&v75 + 1) = v58;
        }
      }
      else
      {
        v77 = &type metadata for DatabaseValue;
        v78 = &protocol witness table for DatabaseValue;
        *(_QWORD *)&v72 = sub_23C910B9C();
        WORD4(v72) = v48;
        BYTE10(v72) = v49;
        BYTE11(v72) = v50;
        BYTE12(v72) = v51;
        BYTE13(v72) = v52;
        BYTE14(v72) = v53;
        HIBYTE(v72) = v54;
        *(_QWORD *)&v75 = MEMORY[0x242624738](&v72, 16);
        *((_QWORD *)&v75 + 1) = v55;
        v76 = 3;
        v33 = v67;
      }
      sub_23C8195F4((uint64_t)&v75, v33);
      sub_23C7E7938((uint64_t)&v75, (uint64_t *)&unk_25430D6B8);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
      return;
    }
  }
  else
  {
    sub_23C7DE70C(v29, 1, 1, v30);
  }
  sub_23C7E7938(v29, &qword_25430CCD0);
  v25(v63, a1, a3);
  sub_23C7E79A8(&qword_25430CEB8);
  if (swift_dynamicCast())
  {
    sub_23C7DB5CC(&v72, (uint64_t)&v75);
    v36 = v77;
    v37 = v78;
    sub_23C7E7E34(&v75, (uint64_t)v77);
    v38 = (void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v37[3];
    *((_QWORD *)&v73 + 1) = &type metadata for DatabaseValue;
    v74 = &protocol witness table for DatabaseValue;
    v38(&v72, v36, v37);
    sub_23C8195F4((uint64_t)&v72, v67);
    sub_23C7E7938((uint64_t)&v72, (uint64_t *)&unk_25430D6B8);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v75);
    return;
  }
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  sub_23C7E7938((uint64_t)&v72, (uint64_t *)&unk_25430D6B8);
  v40 = (ValueMetadata *)type metadata accessor for ColumnEncoder(0, *(_QWORD *)(v64 + 80), *(_QWORD *)(v64 + 88), v39);
  v41 = v67;
  sub_23C7EFC04((uint64_t)v67, (uint64_t)&v75);
  v42 = v68;
  v43 = sub_23C819EB8((uint64_t)v68, &v75);
  v77 = v40;
  v78 = (_UNKNOWN **)MEMORY[0x242626100](&unk_23C913FA0, v40);
  *(_QWORD *)&v75 = v43;
  swift_retain();
  swift_retain();
  v44 = v69;
  sub_23C910E00();
  v45 = v44;
  if (v44)
  {
    swift_release();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v75);
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v75);
    if (*(_BYTE *)(v43 + 64) != 1)
    {
      swift_release();
      return;
    }
    sub_23C7DAF10();
    v45 = (void *)swift_allocError();
    swift_willThrow();
    swift_release();
  }
  *(_QWORD *)&v75 = v45;
  v46 = v45;
  sub_23C7E79A8(&qword_25430CCC8);
  if (swift_dynamicCast())
  {

    v47 = (void *)MEMORY[0x2426258E4]();
    sub_23C819F00(v41, a1, v42);
    objc_autoreleasePoolPop(v47);
  }

}

uint64_t sub_23C819EB8(uint64_t a1, __int128 *a2)
{
  swift_allocObject();
  return sub_23C81A204(a1, a2);
}

uint64_t sub_23C819F00(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[7];

  v4 = *a3;
  v5 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7E7E34(a1, a1[3]);
  v6 = sub_23C911C40();
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 88) + 24))(v6);
  swift_bridgeObjectRelease();
  v7 = sub_23C9108B4();
  v9 = v8;
  result = swift_release();
  if (!v12[6])
  {
    sub_23C910EA8();
    result = sub_23C910E90();
    if (v11)
    {
      v12[3] = MEMORY[0x24BEE0D00];
      v12[4] = &protocol witness table for String;
      v12[0] = result;
      v12[1] = v11;
      sub_23C8195F4((uint64_t)v12, a1);
      sub_23C7EEE1C(v7, v9);
      return sub_23C7E7938((uint64_t)v12, (uint64_t *)&unk_25430D6B8);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_23C81A068()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23C81A094()
{
  sub_23C81A068();
  return swift_deallocClassInstance();
}

uint64_t sub_23C81A0B0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23C81A108()
{
  return sub_23C818210();
}

void sub_23C81A128()
{
  sub_23C8182D8();
}

void sub_23C81A148()
{
  sub_23C818368();
}

void sub_23C81A168()
{
  sub_23C8183C0();
}

uint64_t sub_23C81A188()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E79A8(&qword_25430CEC0);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_23C912A20;
  sub_23C7EFC04(v0 + 24, v1 + 32);
  return v1;
}

uint64_t sub_23C81A1D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 16))();
}

uint64_t sub_23C81A204(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  sub_23C7DB5CC(a2, v2 + 24);
  return v2;
}

uint64_t sub_23C81A230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v3 + 64) = 1;
  v6 = sub_23C81A188();
  nullsub_1(v6);
  v8 = type metadata accessor for JSONRequiredEncoder.KeyedContainer(0, a2, a3, v7);
  MEMORY[0x242626100](&unk_23C9182A4, v8);
  return sub_23C91185C();
}

unint64_t sub_23C81A2BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;

  *(_BYTE *)(v1 + 64) = 1;
  v3 = sub_23C81A188();
  a1[3] = (uint64_t)&type metadata for JSONRequiredEncoder;
  result = sub_23C81AB7C();
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_23C81A300@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for ColumnEncoder(0, *(_QWORD *)(*(_QWORD *)v2 + 80), *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  a2[3] = v4;
  a2[4] = MEMORY[0x242626100](&unk_23C913EE8, v4);
  *a2 = v2;
  return swift_retain();
}

uint64_t sub_23C81A34C()
{
  uint64_t v0;

  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 24);
  return v0;
}

uint64_t sub_23C81A370()
{
  sub_23C81A34C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ColumnEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ColumnEncoder);
}

uint64_t sub_23C81A398()
{
  return sub_23C81A188();
}

uint64_t sub_23C81A3B8()
{
  return sub_23C81821C();
}

uint64_t sub_23C81A3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C81A230(a1, a2, a3);
}

unint64_t sub_23C81A3F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C81A2BC(a1);
}

uint64_t sub_23C81A418@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  return sub_23C81A300(a1, a2);
}

uint64_t sub_23C81A438()
{
  uint64_t v0;
  _QWORD v2[5];
  _OWORD v3[2];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  sub_23C7EFC04(v0 + 24, (uint64_t)v2);
  swift_retain();
  sub_23C8195F4((uint64_t)v3, v2);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v2);
  return sub_23C7E7938((uint64_t)v3, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C81A4BC(char a1)
{
  uint64_t v1;
  _QWORD v3[5];
  _BYTE v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  v5 = MEMORY[0x24BEE1328];
  v6 = &protocol witness table for Bool;
  v4[0] = a1;
  sub_23C7EFC04(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_23C8195F4((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_23C7E7938((uint64_t)v4, (uint64_t *)&unk_25430D6B8);
}

void sub_23C81A54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  sub_23C7EDB50();
  v37 = v0;
  sub_23C7EDDAC(v0, v1, v2, v3, v4, v5, v6, v7, v30);
  v8 = sub_23C7DF5CC();
  sub_23C7E81B0(v8, v9, v10, v11, v12, v13, v14, v15, v31, v33, v34, v35, v36, v37);
  v16 = sub_23C7DFE08();
  v24 = sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v32);
  sub_23C7E9804(v24, (uint64_t *)&unk_25430D6B8, v25, v26, v27, v28, v29);
  sub_23C7E6208();
}

void sub_23C81A594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  sub_23C7EDB50();
  v37 = v0;
  sub_23C7EDDAC(v0, v1, v2, v3, v4, v5, v6, v7, v30);
  v8 = sub_23C7DF5CC();
  sub_23C7E81B0(v8, v9, v10, v11, v12, v13, v14, v15, v31, v33, v34, v35, v36, v37);
  v16 = sub_23C7DFE08();
  v24 = sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v32);
  sub_23C7E9804(v24, (uint64_t *)&unk_25430D6B8, v25, v26, v27, v28, v29);
  sub_23C7E6208();
}

void sub_23C81A5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  sub_23C7EDB50();
  v37 = v0;
  sub_23C7EDDAC(v0, v1, v2, v3, v4, v5, v6, v7, v30);
  v8 = sub_23C7DF5CC();
  sub_23C7E81B0(v8, v9, v10, v11, v12, v13, v14, v15, v31, v33, v34, v35, v36, v37);
  v16 = sub_23C7DFE08();
  v24 = sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v32);
  sub_23C7E9804(v24, (uint64_t *)&unk_25430D6B8, v25, v26, v27, v28, v29);
  sub_23C7E6208();
}

void sub_23C81A624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  sub_23C7EDB50();
  v37 = v0;
  sub_23C7EDDAC(v0, v1, v2, v3, v4, v5, v6, v7, v30);
  v8 = sub_23C7DF5CC();
  sub_23C7E81B0(v8, v9, v10, v11, v12, v13, v14, v15, v31, v33, v34, v35, v36, v37);
  v16 = sub_23C7DFE08();
  v24 = sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v32);
  sub_23C7E9804(v24, (uint64_t *)&unk_25430D6B8, v25, v26, v27, v28, v29);
  sub_23C7E6208();
}

uint64_t sub_23C81A66C(float a1)
{
  uint64_t v1;
  _QWORD v3[5];
  _DWORD v4[6];
  uint64_t v5;
  _UNKNOWN **v6;

  v5 = MEMORY[0x24BEE14E8];
  v6 = &protocol witness table for Float;
  *(float *)v4 = a1;
  sub_23C7EFC04(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_23C8195F4((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_23C7E7938((uint64_t)v4, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C81A6FC(double a1)
{
  uint64_t v1;
  _QWORD v3[5];
  _QWORD v4[5];

  v4[3] = MEMORY[0x24BEE13C8];
  v4[4] = &protocol witness table for Double;
  *(double *)v4 = a1;
  sub_23C7EFC04(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_23C8195F4((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_23C7E7938((uint64_t)v4, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C81A78C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v5[3] = MEMORY[0x24BEE0D00];
  v5[4] = &protocol witness table for String;
  v5[0] = a1;
  v5[1] = a2;
  sub_23C7EFC04(v2 + 24, (uint64_t)v4);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C8195F4((uint64_t)v5, v4);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v4);
  return sub_23C7E7938((uint64_t)v5, (uint64_t *)&unk_25430D6B8);
}

uint64_t sub_23C81A828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v8[5];

  sub_23C7EFC04(v3 + 24, (uint64_t)v8);
  swift_retain();
  sub_23C819754(a1, v8, a2, a3);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
  return swift_release();
}

uint64_t sub_23C81A8B4()
{
  return sub_23C81A438();
}

uint64_t sub_23C81A8D4(char a1)
{
  return sub_23C81A4BC(a1);
}

uint64_t sub_23C81A8F4(uint64_t a1, uint64_t a2)
{
  return sub_23C81A78C(a1, a2);
}

uint64_t sub_23C81A914(double a1)
{
  return sub_23C81A6FC(a1);
}

uint64_t sub_23C81A934(float a1)
{
  return sub_23C81A66C(a1);
}

void sub_23C81A954()
{
  sub_23C81A54C();
}

void sub_23C81A984()
{
  sub_23C81A594();
}

void sub_23C81A9B4()
{
  sub_23C81A5DC();
}

void sub_23C81A9E4()
{
  sub_23C81A624();
}

void sub_23C81AA14()
{
  sub_23C81A54C();
}

uint64_t sub_23C81AA44()
{
  return sub_23C911A54();
}

void sub_23C81AA58()
{
  sub_23C81A54C();
}

void sub_23C81AA88()
{
  sub_23C81A594();
}

void sub_23C81AAB8()
{
  sub_23C81A5DC();
}

void sub_23C81AAE8()
{
  sub_23C81A624();
}

void sub_23C81AB18()
{
  sub_23C81A54C();
}

uint64_t sub_23C81AB48()
{
  return sub_23C911A60();
}

uint64_t sub_23C81AB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C81A828(a1, a2, a3);
}

unint64_t sub_23C81AB7C()
{
  unint64_t result;

  result = qword_25430B368;
  if (!qword_25430B368)
  {
    result = MEMORY[0x242626100](&unk_23C918034, &type metadata for JSONRequiredEncoder);
    atomic_store(result, (unint64_t *)&qword_25430B368);
  }
  return result;
}

void sub_23C81ABB8(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {

  }
}

void type metadata accessor for RecordEncoder.KeyedContainer()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C81ABE4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C81ABEC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

void SQLSelectable<>.sqlSelection.getter()
{
  uint64_t v0;

  sub_23C7E31CC();
  sub_23C7E0854();
  sub_23C7E88EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7E81C0();
  sub_23C7E4184();
  sub_23C7E4CC4();
  sub_23C7DEEA8();
}

void _s12GRDBInternal15SQLOrderingTermPAASYRzAaB8RawValueSYRpzrlE11sqlOrderingAA0B0Vvg_0()
{
  uint64_t v0;

  sub_23C7E31CC();
  sub_23C7E0854();
  sub_23C7E88EC();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7E81C0();
  sub_23C7E4184();
  sub_23C7E4CC4();
  sub_23C7DEEA8();
}

uint64_t StatementBinding<>.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  sub_23C9110A0();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a2, AssociatedTypeWitness, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  return v13;
}

uint64_t static DatabaseValueConvertible<>.fromDatabaseValue(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  v7 = v6;
  v21 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_23C9114E4();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v20 - v16;
  LOBYTE(v16) = *((_BYTE *)a1 + 16);
  v28 = *a1;
  v29 = v16;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a5 + 32))(&v28, AssociatedTypeWitness, a5);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = v7;
  sub_23C8017C0((void (*)(char *, char *))sub_23C81AFE4, (uint64_t)v22, MEMORY[0x24BEE4078], a2, v18, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_23C81AF28(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  return sub_23C9110AC();
}

uint64_t sub_23C81AFE4(uint64_t a1)
{
  return sub_23C81AF28(a1);
}

uint64_t RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  sub_23C9113C4();
  sub_23C8200C4();
  sub_23C81FEF8((uint64_t)sub_23C81B0A4, (uint64_t)&v7, v5);
  result = swift_unknownObjectRelease();
  if (v2)
    return sub_23C81FE48(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8));
  return result;
}

uint64_t sub_23C81B0A4(uint64_t a1)
{
  return sub_23C81B21C(a1);
}

uint64_t RangeReplaceableCollection.init<A>(_:minimumCapacity:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  sub_23C9113C4();
  sub_23C81FEC0();
  sub_23C9113A0();
  sub_23C8200C4();
  sub_23C81FEF8((uint64_t)sub_23C81B0A4, (uint64_t)&v7, v5);
  result = swift_unknownObjectRelease();
  if (v2)
    return sub_23C81FE48(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8));
  return result;
}

uint64_t sub_23C81B170(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  sub_23C81FE60();
  return sub_23C9113AC();
}

uint64_t sub_23C81B21C(uint64_t a1)
{
  return sub_23C81B170(a1);
}

uint64_t Dictionary.init<A>(grouping:by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23C7DC4A4();
  sub_23C7E6A7C();
  swift_getAssociatedTypeWitness();
  sub_23C8200E4();
  v15 = v5;
  v16 = sub_23C910D7C();
  v9 = v4;
  v10 = v3;
  v11 = v1;
  v12 = v2;
  v13 = &v16;
  v14 = v6;
  sub_23C7E6218((uint64_t)sub_23C81B2E8, (uint64_t)&v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 24));
  sub_23C81FFF4();
  if (v0)
    sub_23C7DE934();
  return sub_23C7E7E20();
}

uint64_t sub_23C81B2E8(uint64_t a1)
{
  return sub_23C81B6CC(a1, &unk_250D8B530, &unk_250D8B558, sub_23C81FDC8);
}

uint64_t Dictionary.init<A>(minimumCapacity:grouping:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v16[10];
  uint64_t v17;

  sub_23C7E6A7C();
  swift_getAssociatedTypeWitness();
  sub_23C8200E4();
  v17 = sub_23C910DA0();
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  v16[5] = a8;
  v16[6] = &v17;
  v16[7] = a3;
  v16[8] = a4;
  sub_23C7E6218((uint64_t)sub_23C81B6A0, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 24));
  sub_23C81FFF4();
  if (v8)
    sub_23C7DE934();
  return sub_23C7E7E20();
}

void sub_23C81B3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  void (*v29)(uint64_t);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t AssociatedTypeWitness;
  uint64_t *v66;
  char *v67;
  uint64_t v68;

  sub_23C7DEF5C();
  v63 = v25;
  v64 = v24;
  v27 = v26;
  v29 = v28;
  v66 = v30;
  v32 = v31;
  v62 = (char *)v33;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7DEF74();
  v36 = MEMORY[0x24BDAC7A8](v35);
  v67 = (char *)v59 - v37;
  v38 = *(_QWORD *)(v27 - 8);
  v39 = MEMORY[0x24BDAC7A8](v36);
  v41 = (char *)v59 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)v59 - v42;
  v29(v32);
  if (v23)
  {
LABEL_9:
    sub_23C7DEF28();
    return;
  }
  v59[0] = v41;
  v59[1] = 0;
  v60 = v38;
  v61 = a23;
  v44 = (_QWORD *)sub_23C7DB388();
  v45 = (uint64_t)v62;
  v46 = v63;
  v44[2] = v27;
  v44[3] = v45;
  v48 = v64;
  v47 = AssociatedTypeWitness;
  v44[4] = v64;
  v44[5] = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v67, v32, v47);
  v49 = (_QWORD *)sub_23C7DB388();
  v49[2] = v27;
  v49[3] = v45;
  v49[4] = v48;
  v49[5] = v46;
  v49[6] = v61;
  v49[7] = v44;
  v50 = v66;
  swift_isUniquelyReferenced_nonNull_native();
  v51 = *v50;
  v68 = *v50;
  *v50 = 0x8000000000000000;
  v62 = v43;
  v63 = sub_23C820108((uint64_t)v43);
  if (__OFADD__(*(_QWORD *)(v51 + 16), (v52 & 1) == 0))
  {
    __break(1u);
  }
  else
  {
    v53 = v52;
    v61 = v44;
    sub_23C91119C();
    sub_23C9117A8();
    v54 = sub_23C911778();
    v55 = (uint64_t)v62;
    if ((v54 & 1) == 0 || (v63 = sub_23C820108((uint64_t)v62), (v53 & 1) == (v56 & 1)))
    {
      *v66 = v68;
      swift_bridgeObjectRelease();
      if ((v53 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v57 = v60;
      }
      else
      {
        v58 = swift_bridgeObjectRetain();
        ((void (*)(uint64_t))v49[6])(v58);
        v57 = v60;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v60 + 16))(v59[0], v55, v27);
        sub_23C8200B8();
        sub_23C91179C();
      }
      swift_bridgeObjectRelease();
      sub_23C91116C();
      sub_23C7E5E0C(v55, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
      swift_release();
      swift_release();
      goto LABEL_9;
    }
  }
  sub_23C911B50();
  __break(1u);
}

uint64_t sub_23C81B6A0(uint64_t a1)
{
  return sub_23C81B6CC(a1, &unk_250D8B4E0, &unk_250D8B508, sub_23C81FD50);
}

#error "23C81B6FC: call analysis failed (funcsize=16)"

uint64_t sub_23C81B70C()
{
  swift_getAssociatedTypeWitness();
  return sub_23C911124();
}

void Dictionary.init<A>(uniqueKeysWithValues:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  sub_23C81FE98();
  v1 = sub_23C910D7C();
  sub_23C7EDFFC(v1);
  sub_23C7DD15C();
  sub_23C7E6218((uint64_t)sub_23C81B7C8, (uint64_t)&v3, v2);
  sub_23C820000();
  if (v0)
    sub_23C7DE934();
  sub_23C7E7E20();
  sub_23C81FDCC();
}

uint64_t sub_23C81B7C0(uint64_t a1, uint64_t a2)
{
  return sub_23C81BA84(a1, a2);
}

uint64_t sub_23C81B7C8(uint64_t a1)
{
  return sub_23C81BAB4(a1);
}

void Dictionary.init<A>(minimumCapacity:uniqueKeysWithValues:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  sub_23C7DC4A4();
  v1 = sub_23C910DA0();
  sub_23C7EDFFC(v1);
  sub_23C7DD15C();
  sub_23C7E6218((uint64_t)sub_23C81B7C8, (uint64_t)&v3, v2);
  sub_23C820000();
  if (v0)
    sub_23C7DE934();
  sub_23C7E7E20();
  sub_23C81FDCC();
}

uint64_t sub_23C81B84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v29 = a3;
  v26 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7E66C8();
  v28 = v9;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v27 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE95C();
  v17 = v16 - v15;
  v18 = sub_23C9114E4();
  v19 = *(_QWORD *)(v18 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v26 - v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  sub_23C910DDC();
  sub_23C81FEEC();
  sub_23C910D94();
  LODWORD(a2) = sub_23C7DE718((uint64_t)v22, 1, a5);
  result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if ((_DWORD)a2 != 1)
  {
    v24 = v27;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v25(v27, a1, a4);
    v30 = 0;
    v31 = 0xE000000000000000;
    sub_23C911634();
    swift_bridgeObjectRelease();
    v30 = 0xD00000000000001BLL;
    v31 = 0x800000023C91C780;
    v25(v28, (uint64_t)v24, a4);
    sub_23C910ECC();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    result = sub_23C9117B4();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C81BA7C(uint64_t a1, uint64_t a2)
{
  return sub_23C81BA84(a1, a2);
}

uint64_t sub_23C81BA84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23C81B84C(a1, a2, v2[7], v2[2], v2[3]);
}

uint64_t sub_23C81BAB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

void Set.init<A>(_:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;

  sub_23C7E9B00();
  sub_23C910D88();
  sub_23C81FF18();
  sub_23C7E6218((uint64_t)sub_23C81BB74, (uint64_t)&v2, v1);
  sub_23C81FFA0();
  if (v0)
    sub_23C7DE934();
  sub_23C7E7E20();
  sub_23C7DB40C();
}

uint64_t sub_23C81BB74(uint64_t a1)
{
  return sub_23C81BCC0(a1);
}

void Set.init<A>(_:minimumCapacity:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;

  sub_23C81FE98();
  sub_23C911298();
  sub_23C81FF18();
  sub_23C7E6218((uint64_t)sub_23C81BB74, (uint64_t)&v2, v1);
  sub_23C81FFA0();
  if (v0)
    sub_23C7DE934();
  sub_23C7E7E20();
  sub_23C7DB40C();
}

uint64_t sub_23C81BBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v3 = *(_QWORD *)(a3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  (*(void (**)(char *))(v3 + 16))(v6);
  sub_23C9112B0();
  sub_23C9112A4();
  return sub_23C7ECBB4((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

uint64_t sub_23C81BCC0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C81BBF0(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

void Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_23C7E9B00();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7DE95C();
  v17 = v16 - v15;
  sub_23C81FF40();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = sub_23C8200F0(AssociatedTypeWitness, v19, v20, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v17, v6, v7);
  sub_23C81FE60();
  AnyCursor.__allocating_init<A>(_:)(v23, v24);
  v25 = MEMORY[0x242626100](&protocol conformance descriptor for AnyCursor<A>, v22);
  Cursor.flatMap<A>(_:)(v9, v8, v22, a4, v25, a6);
  sub_23C7DFA18();
  sub_23C7DBCB0();
}

uint64_t type metadata accessor for AnyCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyCursor);
}

void AnyCursor.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  v7 = v6 - v5;
  swift_getAssociatedTypeWitness();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C81FE7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, a2);
  sub_23C91101C();
  sub_23C81FEC0();
  swift_getAssociatedConformanceWitness();
  AnyCursor.__allocating_init<A>(iterator:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  sub_23C7DBCB0();
}

void Cursor.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C7E9B00();
  v12 = (_QWORD *)sub_23C7DB388();
  v12[2] = v6;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = v8;
  v12[7] = v7;
  Cursor.map<A>(_:)((uint64_t)sub_23C81E360, (uint64_t)v12);
  swift_retain();
  sub_23C7E6BFC();
  sub_23C81FE60();
  v16 = type metadata accessor for MapCursor(v13, v14, v15, a5);
  v17 = MEMORY[0x242626100](&protocol conformance descriptor for MapCursor<A, B>, v16);
  Cursor<>.joined()(v16, v17, a6);
  sub_23C7DFA18();
  sub_23C7DEEA8();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23C7E9B00();
  v12 = (_QWORD *)sub_23C7DB388();
  v12[2] = v6;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = v8;
  v12[7] = v7;
  v13 = sub_23C820048();
  v17 = sub_23C8200F0(v13, v14, v15, v16);
  swift_retain();
  v18 = MEMORY[0x242626100](&protocol conformance descriptor for AnyCursor<A>, v17);
  Cursor.flatMap<A>(_:)((uint64_t)sub_23C81F984, (uint64_t)v12, v6, v17, a5, v18);
  sub_23C7E6BFC();
  sub_23C7DEEA8();
}

void sub_23C81BF8C()
{
  Cursor.forEach(_:)();
}

uint64_t sub_23C81BFA0(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t result;
  uint64_t i;
  uint64_t v5;

  result = sub_23C7E156C();
  if (!v1)
  {
    for (i = result; i; i = result)
    {
      v5 = i;
      a1(&v5);
      swift_release();
      result = sub_23C7E156C();
    }
  }
  return result;
}

void Cursor.forEach(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);

  sub_23C7DEF5C();
  v23 = v1;
  v4 = v3;
  v6 = v5;
  v21 = v7;
  v24 = v8;
  sub_23C81FF40();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = sub_23C9114E4();
  v10 = *(_QWORD *)(v20 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7EC5EC();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  v16 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
  v23 = v6;
  v16(v6, v4);
  if (!v1)
  {
    v19 = v10;
    v22 = v0;
    while (1)
    {
      sub_23C7E07A0(v2, 1, AssociatedTypeWitness);
      if (v17)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v15, v2, AssociatedTypeWitness);
      v24(v15);
      sub_23C7DFE54((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
      v16(v23, v4);
    }
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v20);
  }
  sub_23C7DEF28();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Cursor.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = v1;
  v6 = v0;
  sub_23C7E6A7C();
  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(sub_23C7E4CD4() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7DF5D4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v6, v5);
  if (!v2)
  {
    sub_23C7E07A0(v4, 1, v3);
    if (v9)
      LOBYTE(v3) = 1;
    else
      LOBYTE(v3) = 0;
    sub_23C81FE48(v4, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }
  return v3 & 1;
}

void Cursor.contains(where:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(char *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *);
  uint64_t v23;
  uint64_t v24;

  sub_23C7DEF5C();
  v3 = v2;
  v22 = v4;
  v23 = v5;
  sub_23C81FF5C();
  v24 = v6;
  swift_getAssociatedTypeWitness();
  v7 = sub_23C81FF30();
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(v1 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - v13;
  v15 = *(void (**)(uint64_t, uint64_t))(v3 + 16);
  do
  {
    v16 = sub_23C81FFE0();
    v15(v16, v3);
    if (v0)
      break;
    sub_23C7E07A0((uint64_t)v10, 1, v1);
    if (v17)
    {
      sub_23C7DFBB8(v20);
      break;
    }
    sub_23C8200D8((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
    v18 = v22(v14);
    sub_23C7DBCE8((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  while ((v18 & 1) == 0);
  sub_23C7DD150();
  sub_23C7DEF28();
}

void Cursor.enumerated()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for EnumeratedCursor(0, a1, a2, a4);
  sub_23C81C3B8(v4);
  sub_23C7EDDB8();
  sub_23C7DB390();
}

void sub_23C81C3B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7DB388();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = 0;
  sub_23C7DB390();
}

void Cursor.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C81C7D8(a1, a2, a3, a4, (uint64_t)type metadata accessor for FilterCursor, (void (*)(uint64_t, uint64_t, uint64_t))sub_23C81C3F4);
}

void Cursor.first(where:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*i)(uint64_t, uint64_t);
  uint64_t (*v30)(uint64_t);

  sub_23C7DEF5C();
  v6 = v5;
  v8 = v7;
  v30 = v9;
  sub_23C81FF6C();
  sub_23C7E4CD4();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7EDB60();
  v11 = *(_QWORD *)(v3 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v12);
  sub_23C81FE7C();
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  v13(v8, v6);
  if (!v2)
  {
    for (i = v13; ; i(v8, v15))
    {
      sub_23C7E07A0(v0, 1, v3);
      if (v14)
      {
        v24 = sub_23C820080();
        v26 = v25(v24);
        v27 = 1;
        goto LABEL_8;
      }
      v15 = v6;
      v16 = v1;
      v17 = v3;
      v18 = v11;
      v19 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
      v20 = v4;
      v21 = v4;
      v22 = v17;
      v19(v20, v0);
      if ((v30(v21) & 1) != 0)
        break;
      v11 = v18;
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
      v3 = v22;
      v4 = v21;
      sub_23C7ECBB4(v21, v23);
      v1 = v16;
      v6 = v15;
    }
    v28 = sub_23C8200B8();
    v26 = ((uint64_t (*)(uint64_t))v19)(v28);
    v27 = 0;
LABEL_8:
    sub_23C81FF08(v26, v27);
  }
  sub_23C7DEF28();
}

void Cursor.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_23C9114E4();
  sub_23C81FE60();
  Cursor.map<A>(_:)(v9, v10);
  v11 = (_QWORD *)sub_23C7DB388();
  v12 = sub_23C7DA4E0(v11);
  v13 = type metadata accessor for MapCursor(v12, a3, v8, a5);
  v14 = MEMORY[0x242626100](&protocol conformance descriptor for MapCursor<A, B>, v13);
  Cursor.filter(_:)((uint64_t)sub_23C81E3BC, a2, v13, v14);
  sub_23C7DFA18();
  sub_23C7DFB3C();
  v15 = (_QWORD *)sub_23C7DB388();
  v16 = sub_23C7DA4E0(v15);
  v18 = type metadata accessor for FilterCursor(v16, v13, v14, v17);
  MEMORY[0x242626100](&protocol conformance descriptor for FilterCursor<A>, v18);
  Cursor.map<A>(_:)((uint64_t)sub_23C81E3F8, a2);
  sub_23C7E6BFC();
  sub_23C7DFB3C();
  sub_23C7DEEA8();
}

void Cursor.map<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_23C8200A4();
  type metadata accessor for MapCursor(v4, v5, v6, v7);
  sub_23C81C3F4(v2, v2, a2);
  sub_23C7EDDB8();
  swift_retain();
  sub_23C7DB3A0();
}

uint64_t sub_23C81C708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v6 = sub_23C9114E4();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v11 - v7, a1);
  result = sub_23C7DE718((uint64_t)v8, 1, a2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, v8, a2);
  __break(1u);
  return result;
}

void Cursor.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C81C7D8(a1, a2, a3, a4, (uint64_t)type metadata accessor for DropWhileCursor, (void (*)(uint64_t, uint64_t, uint64_t))sub_23C81C834);
}

void sub_23C81C7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  void (*v10)(uint64_t);

  v9 = sub_23C8200A4();
  v10(v9);
  a6(v6, v6, a2);
  swift_unknownObjectRetain();
  swift_retain();
  sub_23C7DB3A0();
}

void Cursor.dropFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for DropFirstCursor(0, a2, a3, a4);
  v4 = sub_23C81FFB4();
  sub_23C81C86C(v4, v5);
  sub_23C7EDDB8();
  sub_23C7DB390();
}

void sub_23C81C86C(uint64_t a1, uint64_t a2)
{
  sub_23C7DB388();
  sub_23C81E710(a1, a2);
  sub_23C7DB3A0();
}

void Cursor.dropFirst()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Cursor.dropFirst(_:)(1, a1, a2, a4);
}

void Cursor.dropLast(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char isClassOrObjCExistentialType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_23C7DEF5C();
  v4 = v3;
  v6 = v5;
  sub_23C81FF40();
  v8 = v7;
  swift_getAssociatedTypeWitness();
  sub_23C7EFA54();
  sub_23C7DEF74();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v44 = (uint64_t)&v36 - v11;
  v12 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7E66C8();
  v43 = v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  if (v6 < 0)
  {
    sub_23C81FE10();
    sub_23C9117B4();
    __break(1u);
  }
  else
  {
    if (v6)
    {
      v36 = v16;
      v37 = v15;
      v42 = v6;
      sub_23C81FFD4();
      v45 = sub_23C81FFD4();
      swift_bridgeObjectRetain();
      v38 = sub_23C9110C4();
      sub_23C7DB624();
      v19 = v8;
      v41 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
      v41(v8, v4);
      v20 = v1;
      if (v1)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v21 = v19;
        v22 = v38;
        v39 = v0;
        v40 = v4;
        v23 = v42;
        while (1)
        {
          sub_23C7E07A0(v44, 1, v2);
          if (v24)
            break;
          (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v18, v44, v2);
          v25 = sub_23C81FF94();
          v26 = MEMORY[0x242624D80](v25, v2);
          sub_23C7DB624();
          if (v26 >= v23)
          {
            v38 = v20;
            sub_23C81FEC0();
            sub_23C9111CC();
            sub_23C7DF31C();
            v20 = v38;
            sub_23C91116C();
            sub_23C911118();
            v27 = v45;
            sub_23C81FEC0();
            sub_23C81F934(v28, v29);
            isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            v31 = v27 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0)
              v31 = v27;
            sub_23C7EE0F4(v31+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 24));
            sub_23C81FF94();
            sub_23C81FEC0();
            v32 = sub_23C911160();
            sub_23C7DB624();
            sub_23C7E5E0C((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
            v22 = v32 % v23;
          }
          else
          {
            sub_23C7EE0F4(v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
            sub_23C7DF31C();
            sub_23C91116C();
            sub_23C7E5E0C((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
          }
          v41(v21, v40);
          if (v20)
            goto LABEL_12;
        }
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v44, v37);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v33 = sub_23C7DF31C();
      swift_unknownObjectRetain();
      MEMORY[0x242626100](MEMORY[0x24BEE12E8], v33);
      sub_23C8200B8();
      RangeReplaceableCollection.init<A>(_:)(v34, v35);
    }
    sub_23C7DEF28();
  }
}

void Cursor.dropLast()()
{
  Cursor.dropLast(_:)();
}

void sub_23C81CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v7);
  if (!v5)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for AnyCursor(0, AssociatedTypeWitness, v12, v13);
    AnyCursor.__allocating_init<A>(_:)((uint64_t)v9, a5);
  }
}

void Cursor<>.joined()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  type metadata accessor for FlattenCursor(0, a1, a2, a3);
  sub_23C81C3B8(v3);
  sub_23C7EDDB8();
  sub_23C7DB390();
}

void sub_23C81CDE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_23C7E6E44();
  v3 = (_QWORD *)sub_23C7DB388();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  sub_23C7DB3A0();
}

void Cursor.max(by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7DEF5C();
  sub_23C81FE2C(v5, v6, v7);
  sub_23C81FF4C();
  v8 = sub_23C7E4CD4();
  v9 = sub_23C7EBC14(v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7E2058();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7E68D4();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DEF80();
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7E9574();
  if (!v1)
  {
    sub_23C7E07A0(v3, 1, v19);
    if (v13)
    {
      sub_23C7DBBC8();
      v14 = sub_23C820060();
    }
    else
    {
      sub_23C7E1744();
      sub_23C7E66F0();
      sub_23C82000C();
      while (1)
      {
        sub_23C7E07A0(v2, 1, v0);
        if (v13)
          break;
        sub_23C7E6534(v2, v2);
        if ((sub_23C7DFA2C() & 1) != 0)
        {
          sub_23C7EE41C(v4);
          sub_23C7E6534(v4, v2);
        }
        else
        {
          sub_23C7EE41C(v2);
        }
        sub_23C81FDE4();
      }
      sub_23C7E770C();
      sub_23C7E6534(v18, v4);
      sub_23C81FEB0();
    }
    sub_23C7DE70C(v14, v15, v16, v17);
  }
  sub_23C7DEF28();
}

void Cursor.min(by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7DEF5C();
  sub_23C81FE2C(v5, v6, v7);
  sub_23C81FF4C();
  v8 = sub_23C7E4CD4();
  v9 = sub_23C7EBC14(v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7E2058();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7E68D4();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DEF80();
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7E9574();
  if (!v1)
  {
    sub_23C7E07A0(v3, 1, v19);
    if (v13)
    {
      sub_23C7DBBC8();
      v14 = sub_23C820060();
    }
    else
    {
      sub_23C7E1744();
      sub_23C7E66F0();
      sub_23C82000C();
      while (1)
      {
        sub_23C7E07A0(v2, 1, v0);
        if (v13)
          break;
        sub_23C7E6534(v2, v2);
        if ((sub_23C7DFA2C() & 1) != 0)
        {
          sub_23C7EE41C(v4);
          sub_23C7E6534(v4, v2);
        }
        else
        {
          sub_23C7EE41C(v2);
        }
        sub_23C81FDE4();
      }
      sub_23C7E770C();
      sub_23C7E6534(v18, v4);
      sub_23C81FEB0();
    }
    sub_23C7DE70C(v14, v15, v16, v17);
  }
  sub_23C7DEF28();
}

void Cursor.prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PrefixCursor(0, a2, a3, a4);
  v4 = sub_23C81FFB4();
  sub_23C81D15C(v4, v5);
  sub_23C7EDDB8();
  sub_23C7DB390();
}

void sub_23C81D15C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_23C7DB388();
  v4[3] = a2;
  v4[4] = 0;
  v4[2] = a1;
  sub_23C7DB3A0();
}

void Cursor.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C81C7D8(a1, a2, a3, a4, (uint64_t)type metadata accessor for PrefixWhileCursor, (void (*)(uint64_t, uint64_t, uint64_t))sub_23C81C834);
}

void sub_23C81D1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E6E44();
  v3 = sub_23C7DB388();
  *(_BYTE *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_QWORD *)(v3 + 32) = v0;
  sub_23C7DB3A0();
}

void Cursor.reduce<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  sub_23C7DEF5C();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v30 = v10;
  v12 = v11;
  v14 = v13;
  v15 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE95C();
  v29 = v17 - v16;
  swift_getAssociatedTypeWitness();
  v18 = sub_23C7EFA54();
  v25 = *(_QWORD *)(v18 - 8);
  v26 = v18;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v19);
  sub_23C7DF5D4();
  v28 = *(_QWORD *)(v3 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v20);
  sub_23C7EDB60();
  v31 = v7;
  v21 = v7;
  v22 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v12, v21);
  v23 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v23(v9, v22);
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v31);
  }
  else
  {
    v27 = v2;
    while (1)
    {
      sub_23C7E07A0(v2, 1, v3);
      if (v24)
        break;
      sub_23C7EE0F4(v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
      v30(v14, v0);
      sub_23C7E5E0C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v31);
      v2 = v27;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v29, v31);
      v23(v9, v22);
    }
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v26);
  }
  sub_23C7DEF28();
}

void Cursor.reduce<A>(into:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  char v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;

  sub_23C7DEF5C();
  v24 = v3;
  v5 = v4;
  v7 = v6;
  v25 = v8;
  v10 = v9;
  v12 = v11;
  v23 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C9114E4();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7EDB60();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v15);
  sub_23C7ECFD4();
  v16 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v12, v10);
  v17 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v17(v25, v5);
  if (v1)
  {
    v22 = *(void (**)(uint64_t))(v16 + 8);
    v21 = v23;
  }
  else
  {
    while (1)
    {
      sub_23C7E07A0(v0, 1, AssociatedTypeWitness);
      if (v18)
        break;
      v19 = sub_23C81FEEC();
      v20(v19);
      v24(v23, v2);
      sub_23C81FEDC();
      v17(v25, v5);
    }
    v21 = sub_23C820080();
  }
  v22(v21);
  sub_23C82008C();
  sub_23C7DEF28();
}

void Cursor.suffix(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char isClassOrObjCExistentialType;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_23C7DEF5C();
  v5 = v4;
  v7 = v6;
  sub_23C7E6A7C();
  v57 = v8;
  swift_getAssociatedTypeWitness();
  sub_23C7E4CD4();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7EC5EC();
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7E66C8();
  v53 = v12;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v49 - v16;
  if ((v7 & 0x8000000000000000) == 0)
  {
    if (v7)
    {
      v50 = v15;
      v51 = v14;
      v61 = sub_23C81FFC8();
      v18 = sub_23C91119C();
      v56 = v0;
      v52 = v18;
      sub_23C911100();
      sub_23C820054();
      v55 = sub_23C9110C4();
      sub_23C7DB398();
      v58 = v7;
      v19 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
      v19(v57, v5);
      if (!v1)
      {
        for (i = v5; ; v19(v57, i))
        {
          sub_23C7E07A0(v3, 1, v2);
          if (v20)
            break;
          sub_23C81FF8C((uint64_t)v17, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
          v21 = swift_bridgeObjectRetain();
          v22 = MEMORY[0x242624D80](v21, v2);
          sub_23C7DE934();
          if (v22 >= v58)
          {
            sub_23C911118();
            v23 = v55;
            sub_23C81F934(v55, v61);
            isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            v25 = v61 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0)
              v25 = v61;
            sub_23C81FF8C(v25+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v23, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24));
            if (__OFADD__(v23, 1))
            {
              __break(1u);
LABEL_21:
              __break(1u);
              goto LABEL_22;
            }
            sub_23C7ECBB4((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
            v55 = (uint64_t)(v23 + 1) % v58;
          }
          else
          {
            sub_23C81FF8C(v53, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
            sub_23C91116C();
            sub_23C7ECBB4((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
          }
        }
        sub_23C7DFBB8(v50);
        sub_23C820054();
        v26 = sub_23C9110C4();
        sub_23C7DB398();
        v27 = v55;
        if (v55 == v26)
          goto LABEL_15;
        v28 = swift_bridgeObjectRetain();
        v29 = MEMORY[0x242624DA4](v28, v2);
        sub_23C7DB398();
        if (v29 < v27)
          goto LABEL_21;
        v30 = sub_23C8200FC();
        v57 = v32;
        v58 = v31;
        v56 = v33;
        if ((v27 & 0x8000000000000000) == 0)
        {
          v34 = v30;
          v35 = sub_23C8200FC();
          v37 = v36;
          v39 = v38;
          v41 = v40;
          sub_23C81FF40();
          v42 = sub_23C91155C();
          sub_23C91188C();
          sub_23C7DB388();
          v43 = sub_23C9110E8();
          v44 = v58;
          *v45 = v34;
          v45[1] = v44;
          v46 = v56;
          v45[2] = v57;
          v45[3] = v46;
          v45[4] = v35;
          v45[5] = v37;
          v45[6] = v39;
          v45[7] = v41;
          sub_23C8909A4();
          v59 = v43;
          v47 = sub_23C91119C();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          MEMORY[0x242626100](MEMORY[0x24BEE12C8], v47);
          MEMORY[0x242626100](MEMORY[0x24BEE2180], v42);
          sub_23C911088();
          v59 = v60;
          v48 = sub_23C911718();
          MEMORY[0x242626100](MEMORY[0x24BEE2AC8], v48);
          sub_23C9111B4();
          sub_23C7DB398();
          sub_23C81FFA0();
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      sub_23C7DB398();
    }
    else
    {
      sub_23C81FFC8();
    }
LABEL_15:
    sub_23C7E7E20();
    sub_23C7DEF28();
    return;
  }
LABEL_23:
  sub_23C9117B4();
  __break(1u);
}

void Cursor<>.contains(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7DEF5C();
  v21 = v3;
  v22 = v4;
  v6 = v5;
  v23 = v7;
  swift_getAssociatedTypeWitness();
  v8 = sub_23C81FF30();
  v19 = *(_QWORD *)(v8 - 8);
  v20 = v8;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(v2 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7DF5D4();
  v14 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  do
  {
    v15 = sub_23C81FFE0();
    v14(v15, v6);
    if (v0)
      break;
    sub_23C7E07A0((uint64_t)v11, 1, v2);
    if (v16)
    {
      sub_23C7DFBB8(v19);
      break;
    }
    sub_23C8200D8(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    v17 = sub_23C910E54();
    sub_23C7DBCE8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  while ((v17 & 1) == 0);
  sub_23C7DD150();
  sub_23C7DEF28();
}

uint64_t Cursor<>.max()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C81DB24(a1, a2, a3, (uint64_t)sub_23C81F9C8, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))Cursor.max(by:));
}

uint64_t Cursor<>.min()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C81DB24(a1, a2, a3, (uint64_t)sub_23C81FD94, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))Cursor.min(by:));
}

uint64_t sub_23C81DB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return a5(a4, &v8, v9, v10);
}

uint64_t sub_23C81DBB4()
{
  swift_getAssociatedTypeWitness();
  return sub_23C910E48() & 1;
}

void Cursor<>.joined()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23C7EF904();
  v3 = (_QWORD *)sub_23C7DB388();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  sub_23C820048();
  sub_23C81FE60();
  Cursor.flatMap<A>(_:)(v4, v5, v6, v7, v1, v0);
  sub_23C7DFB3C();
  sub_23C7DF5B4();
}

uint64_t sub_23C81DCAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

void Cursor<>.joined(separator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[2];
  void (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  sub_23C7DEF5C();
  v53 = v2;
  v4 = v3;
  v6 = (unint64_t)v5;
  v8 = v7;
  sub_23C7E6A7C();
  v51 = v9;
  swift_getAssociatedTypeWitness();
  v10 = sub_23C81FF7C();
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v41 - v15;
  v17 = *(_QWORD *)(v0 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v48 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v41 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v27 = (char *)v41 - v26;
  v49 = v8;
  v50 = (void (*)(uint64_t, uint64_t))v6;
  v28 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v28 = HIBYTE(v6) & 0xF;
  if (v28)
  {
    v44 = v25;
    v54 = 0;
    v55 = 0xE000000000000000;
    v29 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
    v30 = v24;
    v29(v51, v4);
    if (!v1)
    {
      sub_23C7E07A0(v30, 1, v0);
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v47);
      }
      else
      {
        v34 = v44;
        v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
        v43(v44, v30, v0);
        v42 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
        v42(v23, v34, v0);
        sub_23C82002C();
        v36 = *(_QWORD *)(v35 + 8);
        sub_23C81FEEC();
        v53 = v37;
        sub_23C911004();
        sub_23C820020();
        v38 = v4;
        swift_bridgeObjectRelease();
        v39 = (uint64_t)v45;
        v29(v51, v38);
        v41[1] = v36;
        v52 = v38;
        v40 = v48;
        while (1)
        {
          sub_23C7E07A0(v39, 1, v0);
          if (v31)
            break;
          v43((uint64_t)v40, v39, v0);
          sub_23C910F5C();
          v42(v23, (uint64_t)v40, v0);
          sub_23C81FEEC();
          sub_23C911004();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v17 + 8))(v40, v0);
          v29(v51, v52);
        }
        sub_23C81FE48(v44, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v39, v47);
      }
    }
  }
  else
  {
    v54 = 0;
    v55 = 0xE000000000000000;
    v32 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
    v32(v51, v4);
    if (v1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v50 = v32;
      v52 = v4;
      for (i = v51; ; v50(i, v52))
      {
        sub_23C7E07A0((uint64_t)v16, 1, v0);
        if (v31)
          break;
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v27, v16, v0);
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v27, v0);
        sub_23C82002C();
        sub_23C81FEEC();
        sub_23C911004();
        sub_23C820020();
        swift_bridgeObjectRelease();
        sub_23C81FE48((uint64_t)v27, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
    }
  }
  sub_23C82008C();
}

void AnyCursor.__allocating_init<A>(_:)()
{
  sub_23C7E6E44();
  sub_23C7DB388();
  AnyCursor.init<A>(_:)();
  sub_23C7DB3A0();
}

void AnyCursor.init<A>(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  sub_23C7EF904();
  v4 = *(_QWORD *)(*v1 + 80);
  v1[2] = sub_23C81E1C0(v5, v4, v2, v0);
  v1[3] = v6;
  v7 = sub_23C81E230(v3, v4, v2, v0);
  v9 = v8;
  swift_unknownObjectRelease();
  v1[4] = v7;
  v1[5] = v9;
  sub_23C7DF5B4();
}

void (*sub_23C81E1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_unknownObjectRetain();
  return sub_23C81FD20;
}

void (*sub_23C81E230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_unknownObjectRetain();
  return sub_23C81FCFC;
}

void AnyCursor.__allocating_init<A>(iterator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_23C7EF904();
  v4 = swift_allocBox();
  v5 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v3, v2);
  v7 = (_QWORD *)sub_23C7DB388();
  v7[2] = *(_QWORD *)(v1 + 80);
  v7[3] = v2;
  v7[4] = v0;
  v7[5] = v4;
  swift_retain();
  AnyCursor.__allocating_init(_:)((uint64_t)sub_23C81FA28, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  sub_23C7DFB3C();
  sub_23C7DEEA8();
}

uint64_t sub_23C81E33C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C81E360@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t type metadata accessor for MapCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapCursor);
}

uint64_t type metadata accessor for EnumeratedCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnumeratedCursor);
}

uint64_t type metadata accessor for FilterCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterCursor);
}

uint64_t sub_23C81E3B0()
{
  return sub_23C7E40C0();
}

BOOL sub_23C81E3BC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  sub_23C7E07A0(a1, 1, *(_QWORD *)(v1 + 24));
  return !v2;
}

uint64_t sub_23C81E3EC()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C81E3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C81FE8C();
  return sub_23C81C708(v0, v1, v2);
}

uint64_t type metadata accessor for DropWhileCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropWhileCursor);
}

uint64_t type metadata accessor for DropFirstCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropFirstCursor);
}

uint64_t sub_23C81E428()
{
  swift_projectBox();
  swift_beginAccess();
  sub_23C911520();
  return swift_endAccess();
}

void AnyCursor.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  sub_23C7DB388();
  AnyCursor.init(_:)(a1, a2);
  sub_23C7DB3A0();
}

void AnyCursor.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v2;
  v2[2] = a1;
  v2[3] = a2;
  v6 = (_QWORD *)sub_23C7DB388();
  v6[2] = *(_QWORD *)(v5 + 80);
  v6[3] = a1;
  v6[4] = a2;
  v2[4] = (uint64_t)sub_23C81FA60;
  v2[5] = (uint64_t)v6;
  swift_retain();
  sub_23C7DB3A0();
}

uint64_t sub_23C81E53C(void (*a1)(char *), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  void (*v18)(char *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  void (*v24)(uint64_t);

  v22 = a2;
  v23 = a1;
  v8 = sub_23C9114E4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = a3(v14);
  if (!v5)
  {
    v20 = v9;
    v21 = v8;
    v24 = (void (*)(uint64_t))a3;
    v18 = v23;
    while (sub_23C7DE718((uint64_t)v12, 1, a5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, a5);
      v18(v16);
      v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
      v24(v19);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v12, v21);
  }
  return result;
}

void AnyCursor.next()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_23C7DE9A8();
}

uint64_t AnyCursor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t AnyCursor.__deallocating_deinit()
{
  AnyCursor.deinit();
  sub_23C7E5E14();
  return swift_deallocClassInstance();
}

void sub_23C81E6FC()
{
  AnyCursor.next()();
}

uint64_t sub_23C81E710(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  v2[4] = 0;
  if (a2 < 0)
  {
    sub_23C81FE10();
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    v2[2] = a1;
    v2[3] = a2;
    return (uint64_t)v2;
  }
  return result;
}

void DropFirstCursor.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;

  sub_23C7DEF5C();
  v3 = v0;
  v13 = v4;
  sub_23C81FF5C();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(sub_23C9114E4() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7EC5EC();
  v8 = *(_QWORD *)(v0 + 24);
  for (i = *(_QWORD *)(v0 + 32); ; *(_QWORD *)(v3 + 32) = i)
  {
    if (i >= v8)
    {
      sub_23C81FE50();
LABEL_9:
      sub_23C7DD150();
      sub_23C7DEF28();
      return;
    }
    sub_23C81FE50();
    if (v1)
      goto LABEL_9;
    v9 = sub_23C7DE718(v2, 1, AssociatedTypeWitness);
    sub_23C7DBCE8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    if (v9 == 1)
    {
      *(_QWORD *)(v3 + 32) = v8;
      sub_23C820040(v13, 1, v10, AssociatedTypeWitness);
      goto LABEL_9;
    }
    v11 = *(_QWORD *)(v3 + 32);
    v12 = __OFADD__(v11, 1);
    i = v11 + 1;
    if (v12)
      break;
  }
  __break(1u);
}

void sub_23C81E874()
{
  DropFirstCursor.next()();
}

void DropWhileCursor.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_23C7DEF5C();
  sub_23C81FECC();
  v8 = *(_QWORD *)(v6 + 80);
  v7 = *(_QWORD *)(v6 + 88);
  sub_23C81FF5C();
  swift_getAssociatedTypeWitness();
  sub_23C7E4CD4();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7EC5EC();
  v10 = *(_QWORD *)(v3 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7EDB60();
  if (*(_BYTE *)(v4 + 40) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
  }
  else
  {
    v26 = v3;
    v24 = v12;
    v13 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
    v13(v8, v7);
    if (!v2)
    {
      v25 = v4;
      v27 = v10;
      v14 = v26;
      while (1)
      {
        sub_23C7E07A0(v5, 1, v14);
        if (v15)
        {
          sub_23C7DFBB8(v24);
          v22 = 1;
          goto LABEL_10;
        }
        v16 = v7;
        v17 = v8;
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
        v18(v0, v5, v14);
        if ((sub_23C820098(*(uint64_t (**)(uint64_t))(v25 + 24)) & 1) == 0)
          break;
        v19 = sub_23C820080();
        v14 = v26;
        v20(v19, v26);
        v8 = v17;
        v21 = v17;
        v7 = v16;
        v13(v21, v16);
      }
      *(_BYTE *)(v25 + 40) = 1;
      v23 = sub_23C8200B8();
      ((void (*)(uint64_t))v18)(v23);
      v22 = 0;
LABEL_10:
      sub_23C7E1124(v1, v22);
    }
  }
  sub_23C82008C();
  sub_23C7DEF28();
}

uint64_t DropWhileCursor.__deallocating_deinit()
{
  FilterCursor.deinit();
  return swift_deallocClassInstance();
}

void sub_23C81EA74()
{
  DropWhileCursor.next()();
}

void EnumeratedCursor.next()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;

  sub_23C7DEF5C();
  v23 = v4;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 88);
  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(sub_23C81FF7C() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C81FE7C();
  v9 = *(_QWORD *)(v0 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7EDB60();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  if (v2)
    goto LABEL_7;
  sub_23C7E07A0(v3, 1, v0);
  if (v11)
  {
    sub_23C7ECBB4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v12 = sub_23C81FDFC();
    sub_23C820040((uint64_t)v23, 1, v13, v12);
LABEL_7:
    sub_23C7DEF28();
    return;
  }
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v14(v0, v3, v0);
  v15 = (char *)v23 + *(int *)(sub_23C81FDFC() + 48);
  *v23 = v1[3];
  v14((uint64_t)v15, v0, v0);
  sub_23C81FEB0();
  sub_23C7DE70C(v16, v17, v18, v19);
  v20 = v1[3];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (!v21)
  {
    v1[3] = v22;
    goto LABEL_7;
  }
  __break(1u);
}

void EnumeratedCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  sub_23C81EF84(a1, a2, (uint64_t)sub_23C81FA7C);
}

uint64_t sub_23C81EC0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;

  result = a3(*(_QWORD *)(a2 + 24), a1);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  v9 = v7;
  if (v3)
  {
    if (!v9)
    {
LABEL_8:
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    __break(1u);
  }
  if (!v9)
    goto LABEL_8;
  __break(1u);
  return result;
}

uint64_t EnumeratedCursor.__deallocating_deinit()
{
  PrefixCursor.deinit();
  return swift_deallocClassInstance();
}

void sub_23C81EC7C()
{
  EnumeratedCursor.next()();
}

void sub_23C81EC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v3[1] = *(_OWORD *)(a3 + 80);
  v4 = a1;
  v5 = a2;
  EnumeratedCursor.forEach(_:)((uint64_t)sub_23C81FCC4, (uint64_t)v3);
}

uint64_t sub_23C81ECC4(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v13[16];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = &v13[-v10];
  *(_QWORD *)&v13[-v10] = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(&v13[*(int *)(v9 + 48) - v10], a2, AssociatedTypeWitness);
  a3(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, TupleTypeMetadata2);
}

void FilterCursor.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  char *v29;

  sub_23C7DEF5C();
  v22 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v23 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  sub_23C81FF6C();
  v6 = sub_23C7E4CD4();
  v7 = *(_QWORD *)(v6 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7EC5EC();
  v28 = *(_QWORD *)(v2 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  v29 = (char *)&v21 - v10;
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v12 = *(_QWORD *)(v0 + 16);
  v11(v23, v5);
  if (!v1)
  {
    v24 = v12;
    v25 = v11;
    v13 = v23;
    v26 = v6;
    for (i = v7; ; v7 = i)
    {
      sub_23C7E07A0(v3, 1, v2);
      if (v14)
      {
        v19 = sub_23C7E5E0C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
        v20 = 1;
        goto LABEL_8;
      }
      v15 = v5;
      v16 = v13;
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
      v17(v29, v3, v2);
      if ((sub_23C820098(*(uint64_t (**)(uint64_t))(v0 + 24)) & 1) != 0)
        break;
      sub_23C7ECBB4((uint64_t)v29, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      v13 = v16;
      v18 = v16;
      v5 = v15;
      v25(v18, v15);
    }
    v19 = ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(v22, v29, v2);
    v20 = 0;
LABEL_8:
    sub_23C81FF08(v19, v20);
  }
  sub_23C82008C();
  sub_23C7DEF28();
}

void FilterCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  sub_23C81EF84(a1, a2, (uint64_t)sub_23C81FA94);
}

void sub_23C81EF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[6];

  v4 = *v3;
  v5[3] = a1;
  v5[4] = a2;
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)(v4 + 88) + 24))(a3, v5, *(_QWORD *)(v4 + 80));
  sub_23C7E8904();
}

uint64_t sub_23C81EFC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 24))();
  if (!v3 && (result & 1) != 0)
    return a3(a1);
  return result;
}

uint64_t FilterCursor.__deallocating_deinit()
{
  FilterCursor.deinit();
  sub_23C7EC5FC();
  return swift_deallocClassInstance();
}

void sub_23C81F02C()
{
  FilterCursor.next()();
}

void sub_23C81F040(uint64_t a1, uint64_t a2)
{
  FilterCursor.forEach(_:)(a1, a2);
}

void FlattenCursor.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_23C7DEF5C();
  a19 = v23;
  a20 = v24;
  v36 = v25;
  v27 = *(_QWORD *)(*v20 + 88);
  v26 = *(_QWORD *)(*v20 + 96);
  v39 = *(_QWORD *)(*v20 + 80);
  sub_23C820074();
  v37 = v26;
  v28 = sub_23C820074();
  v38 = sub_23C9114E4();
  v29 = *(_QWORD *)(v38 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v30);
  sub_23C7EC5EC();
  while (1)
  {
    if (v20[3])
    {
      v31 = *(void (**)(uint64_t, uint64_t))(v37 + 16);
      swift_unknownObjectRetain();
      v32 = swift_checkMetadataState();
      v31(v32, v37);
      swift_unknownObjectRelease();
      if (v21)
        goto LABEL_12;
      sub_23C7E07A0(v22, 1, v28);
      if (!v33)
      {
        v34 = v36;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v36, v22, v28);
        v35 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      sub_23C7E1124(v22, 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v22, v38);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 16))(&a10, v39, v27);
    if (v21)
      goto LABEL_12;
    if (!a10)
      break;
    v20[3] = a10;
    swift_unknownObjectRelease();
  }
  v35 = 1;
  v34 = v36;
LABEL_11:
  sub_23C7E1124(v34, v35);
LABEL_12:
  sub_23C7DD150();
  sub_23C7DEF28();
}

uint64_t FlattenCursor.deinit()
{
  uint64_t v0;

  sub_23C7E7DAC();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t FlattenCursor.__deallocating_deinit()
{
  FlattenCursor.deinit();
  return swift_deallocClassInstance();
}

#error "23C81F220: call analysis failed (funcsize=5)"

void MapCursor.next()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23C7DEF5C();
  v4 = v0;
  v18 = v5;
  v6 = *v0;
  v7 = *(_QWORD *)(*v0 + 96);
  v8 = *(_QWORD *)(*v0 + 80);
  sub_23C81FF40();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = sub_23C9114E4();
  v10 = *(_QWORD *)(v17 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7ECFD4();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7EC5EC();
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
  if (!v1)
  {
    sub_23C7E07A0(v2, 1, AssociatedTypeWitness);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v17);
      v16 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v3, v2, AssociatedTypeWitness);
      ((void (*)(uint64_t))v4[3])(v3);
      sub_23C81FE6C();
      v16 = 0;
    }
    sub_23C820040(v18, v16, v15, *(_QWORD *)(v6 + 88));
  }
  sub_23C7DEF28();
}

void MapCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD v4[4];

  v3 = *v2;
  v4[2] = a1;
  v4[3] = a2;
  (*(void (**)(uint64_t (*)(), _QWORD *, _QWORD))(*(_QWORD *)(v3 + 96) + 24))(sub_23C81FAAC, v4, *(_QWORD *)(v3 + 80));
  sub_23C7E8904();
}

uint64_t sub_23C81F3C0(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)a4 + 88);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(v11 + 24))(v8);
  if (!v4)
  {
    a2(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

void sub_23C81F470()
{
  MapCursor.next()();
}

void sub_23C81F484(uint64_t a1, uint64_t a2)
{
  MapCursor.forEach(_:)(a1, a2);
}

void PrefixCursor.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7DEF5C();
  sub_23C81FECC();
  v7 = *(_QWORD *)(v5 + 80);
  v6 = *(_QWORD *)(v5 + 88);
  sub_23C7E6A7C();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(sub_23C7EF9A8() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7ECFD4();
  v11 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v3 + 32);
  if (v10 >= v11)
  {
    sub_23C7DB670(v0, 1);
  }
  else
  {
    *(_QWORD *)(v3 + 32) = v10 + 1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6);
    if (!v1)
    {
      sub_23C7E07A0(v4, 1, v2);
      if (v12)
      {
        sub_23C7E5E0C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
        *(_QWORD *)(v3 + 32) = v11;
        v13 = v0;
        v14 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v4, v2);
        v13 = v0;
        v14 = 0;
      }
      sub_23C7DB670(v13, v14);
    }
  }
  sub_23C7DEF28();
}

uint64_t PrefixCursor.deinit()
{
  uint64_t v0;

  sub_23C7E7DAC();
  return v0;
}

uint64_t PrefixCursor.__deallocating_deinit()
{
  PrefixCursor.deinit();
  sub_23C7EC5FC();
  return swift_deallocClassInstance();
}

void sub_23C81F5E0()
{
  PrefixCursor.next()();
}

void sub_23C81F5F4()
{
  Cursor.forEach(_:)();
}

void PrefixWhileCursor.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7DEF5C();
  sub_23C81FECC();
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(sub_23C7EF9A8() - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7ECFD4();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v18 = v11;
    v19 = v0;
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    if (v1)
      goto LABEL_5;
    sub_23C7E07A0(v4, 1, v2);
    if (v15)
    {
      sub_23C7DFE54(v4, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
      v14 = 1;
      v0 = v19;
    }
    else
    {
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
      v16(v13, v4, v2);
      v17 = (*(uint64_t (**)(char *))(v3 + 24))(v13);
      v0 = v19;
      if ((v17 & 1) != 0)
      {
        v16((char *)v19, (uint64_t)v13, v2);
        v14 = 0;
      }
      else
      {
        sub_23C81FFA8(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
        v14 = 1;
        *(_BYTE *)(v3 + 40) = 1;
      }
    }
  }
  sub_23C7DB670(v0, v14);
LABEL_5:
  sub_23C7DEF28();
}

uint64_t _s12GRDBInternal15DropWhileCursorCfd_0()
{
  uint64_t v0;

  sub_23C7E7DAC();
  swift_release();
  return v0;
}

void sub_23C81F7AC()
{
  PrefixWhileCursor.next()();
}

uint64_t sub_23C81F7C0(void (*a1)(uint64_t *))
{
  return sub_23C81BFA0(a1);
}

unint64_t sub_23C81F7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C910E0C();
  return sub_23C81F81C(a1, v6, a2, a3);
}

unint64_t sub_23C81F81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = sub_23C910E54();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t sub_23C81F934(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

void sub_23C81F984(uint64_t a1)
{
  uint64_t *v1;

  sub_23C81CCE8(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t type metadata accessor for FlattenCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FlattenCursor);
}

uint64_t type metadata accessor for PrefixCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrefixCursor);
}

uint64_t type metadata accessor for PrefixWhileCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrefixWhileCursor);
}

uint64_t sub_23C81F9C8()
{
  return sub_23C81DBB4() & 1;
}

uint64_t sub_23C81F9E8()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C81F9F4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C81FE8C();
  return sub_23C81DCAC(v0, v1);
}

uint64_t sub_23C81FA0C()
{
  swift_release();
  sub_23C7E5E14();
  return swift_deallocObject();
}

uint64_t sub_23C81FA28()
{
  return sub_23C81E428();
}

uint64_t sub_23C81FA44()
{
  swift_release();
  sub_23C7EC5FC();
  return swift_deallocObject();
}

uint64_t sub_23C81FA60(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;

  return sub_23C81E53C(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_23C81FA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  sub_23C81FE8C();
  return sub_23C81EC0C(v0, v1, v2);
}

uint64_t sub_23C81FA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  sub_23C81FE8C();
  return sub_23C81EFC8(v0, v1, v2);
}

uint64_t sub_23C81FAAC()
{
  uint64_t v0;
  void (*v1)(char *);
  uint64_t v2;
  uint64_t v3;

  sub_23C81FE8C();
  return sub_23C81F3C0(v0, v1, v2, v3);
}

uint64_t dispatch thunk of Cursor.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Cursor.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_23C81FAF4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AnyCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyCursor.__allocating_init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AnyCursor.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_23C81FB54()
{
  return sub_23C81FC70();
}

uint64_t method lookup function for DropFirstCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FB74()
{
  return sub_23C81FC70();
}

uint64_t method lookup function for DropWhileCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FB98()
{
  return sub_23C81FBC4();
}

uint64_t method lookup function for EnumeratedCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FBB4()
{
  return sub_23C81FBC4();
}

uint64_t sub_23C81FBC4()
{
  return sub_23C7DF860();
}

uint64_t method lookup function for FilterCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FC00()
{
  return sub_23C81FC28();
}

uint64_t method lookup function for FlattenCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FC18()
{
  return sub_23C81FC28();
}

uint64_t sub_23C81FC28()
{
  return sub_23C7DF860();
}

uint64_t method lookup function for MapCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for PrefixCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FC70()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PrefixWhileCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C81FCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C81ECC4(a1, a2, *(void (**)(char *))(v2 + 32));
}

uint64_t sub_23C81FCE0()
{
  swift_unknownObjectRelease();
  sub_23C7E5E14();
  return swift_deallocObject();
}

void sub_23C81FCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 32) + 24))(a1, a2, *(_QWORD *)(v2 + 24));
  sub_23C7DE9A8();
}

void sub_23C81FD20()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 16))(*(_QWORD *)(v0 + 24));
  sub_23C7DE9A8();
}

uint64_t sub_23C81FD44()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C81FD50()
{
  return sub_23C81B70C();
}

uint64_t sub_23C81FD5C()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C81FD68()
{
  return sub_23C7E40C0();
}

uint64_t sub_23C81FD74()
{
  return sub_23C7E40C0();
}

void sub_23C81FD80()
{
  sub_23C81F5F4();
}

uint64_t sub_23C81FD94()
{
  return sub_23C81F9C8() & 1;
}

uint64_t sub_23C81FDE4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 - 128))(*(_QWORD *)(v1 - 72), v0);
}

uint64_t sub_23C81FDFC()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_23C81FE2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 160) = a2;
  *(_QWORD *)(v4 - 96) = result;
  *(_QWORD *)(v4 - 136) = a3;
  return result;
}

uint64_t sub_23C81FE48@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_23C81FE50()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(v2 - 72), v0);
}

uint64_t sub_23C81FE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 88));
}

uint64_t sub_23C81FEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_23C81FEEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C81FEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return a3(a1, a2, v4, v3);
}

uint64_t sub_23C81FF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C7DE70C(v2, a2, 1, v3);
}

uint64_t sub_23C81FF30()
{
  return sub_23C9114E4();
}

uint64_t sub_23C81FF40()
{
  return 255;
}

uint64_t sub_23C81FF4C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C81FF5C()
{
  return 255;
}

uint64_t sub_23C81FF6C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C81FF7C()
{
  return sub_23C9114E4();
}

uint64_t sub_23C81FF8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23C81FF94()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C81FFA0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C81FFA8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_23C81FFB4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C81FFC8()
{
  return sub_23C911124();
}

uint64_t sub_23C81FFD4()
{
  return sub_23C911124();
}

uint64_t sub_23C81FFE0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 88);
}

uint64_t sub_23C81FFF4()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C820000()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_23C820020()
{
  return sub_23C910F5C();
}

uint64_t sub_23C820040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DE70C(a1, a2, 1, a4);
}

uint64_t sub_23C820048()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C820054()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C820060()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 136);
}

uint64_t sub_23C820074()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C820080()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C820098@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_23C8200A4()
{
  return 0;
}

uint64_t sub_23C8200B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8200D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_23C8200E4()
{
  return sub_23C91119C();
}

uint64_t sub_23C8200F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for AnyCursor(0, a1, a3, a4);
}

uint64_t sub_23C8200FC()
{
  return sub_23C9111C0();
}

unint64_t sub_23C820108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_23C81F7D4(a1, v1, v2);
}

uint64_t sub_23C820114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE96C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, a2);
  sub_23C8201E8(v3, a2, a3, v11);
  swift_bridgeObjectRelease();
  sub_23C7F79D4(v11[1]);
  sub_23C7DB398();
  sub_23C7DB388();
  sub_23C8250F0();
  sub_23C7F8DD8();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  return v9;
}

uint64_t sub_23C8201E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  v8 = MEMORY[0x24BEE4AF8];
  v9 = sub_23C910DAC();
  *a4 = v8;
  a4[1] = v9;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 8))(a4, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

void sub_23C820278(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];
  uint64_t v45;

  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_23C7EBCB0();
  sub_23C82116C(v3, v4);
  sub_23C7E072C();
  v5 = v45;
  sub_23C7E7900((uint64_t)v44, &qword_25430CEA8);
  if (v5 != 1)
  {
    sub_23C7DB5E4(a1, (uint64_t)v44, (uint64_t *)&unk_25430D6B8);
    sub_23C825138();
    sub_23C820840(v20, v21, v22);
    v23 = a1;
LABEL_25:
    sub_23C7E7900(v23, (uint64_t *)&unk_25430D6B8);
    return;
  }
  sub_23C7EBCB0();
  sub_23C910E18();
  v7 = v6;
  v8 = (_QWORD *)*v1;
  v9 = *(_QWORD *)(*v1 + 16);
  if (!v9)
  {
    v24 = sub_23C7DBCD0();
LABEL_23:
    sub_23C8250E0(v24, v25, v26, v27, v28);
    sub_23C825138();
    goto LABEL_24;
  }
  v11 = v8[4];
  v10 = v8[5];
  sub_23C7E110C();
  v43 = v12;
  if (sub_23C910E18() == v12 && v13 == v7)
  {
    sub_23C7E0808();
    sub_23C7E072C();
    v15 = sub_23C7DE9B0();
    goto LABEL_12;
  }
  v41 = sub_23C7E16E8();
  sub_23C7E0808();
  sub_23C7DF858();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
  {
    sub_23C7DBCD0();
    sub_23C7E072C();
    v15 = sub_23C7DB624();
LABEL_12:
    sub_23C8250E0(v15, v16, v17, v18, v19);
    v29 = v44;
    v30 = v11;
    v31 = v10;
LABEL_24:
    sub_23C820840((uint64_t)v29, v30, v31);
    v23 = a1;
    goto LABEL_25;
  }
  v42 = a1;
  sub_23C7DB398();
  if (v9 == 1)
  {
LABEL_22:
    sub_23C7DBCD0();
    v24 = sub_23C7DB624();
    a1 = v42;
    goto LABEL_23;
  }
  v32 = v9;
  v33 = v8 + 7;
  v34 = 1;
  while (v34 < v8[2])
  {
    v11 = *(v33 - 1);
    v10 = *v33;
    sub_23C7E110C();
    if (sub_23C910E18() == v43 && v35 == v7)
    {
      sub_23C7E0808();
      sub_23C7E072C();
      sub_23C7DB624();
      v15 = sub_23C7DE9B0();
      a1 = v42;
      goto LABEL_12;
    }
    v37 = v11;
    v38 = v8;
    v39 = v7;
    v40 = sub_23C7E16E8();
    sub_23C7E0808();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
      sub_23C7DB624();
      sub_23C7E072C();
      v15 = sub_23C7DB3DC();
      a1 = v42;
      v11 = v37;
      goto LABEL_12;
    }
    ++v34;
    sub_23C7DB398();
    v33 += 2;
    v7 = v39;
    v8 = v38;
    if (v32 == v34)
      goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_23C8204DC()
{
  return static EncodableRecord.databaseEncodingUserInfo.getter();
}

uint64_t static EncodableRecord.databaseEncodingUserInfo.getter()
{
  sub_23C91176C();
  return sub_23C910DAC();
}

void static EncodableRecord.databaseJSONEncoder(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23C7DE8EC();
  v17 = v3;
  v18 = v0;
  v16 = v4;
  v5 = sub_23C910854();
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE96C();
  v6 = sub_23C91089C();
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7EC60C();
  v7 = sub_23C910878();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23C91086C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7E2548();
  sub_23C9108D8();
  swift_allocObject();
  sub_23C9108CC();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v1, *MEMORY[0x24BDCB320], v11);
  sub_23C910884();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCB340], v7);
  sub_23C910890();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v2, *MEMORY[0x24BDCB390], v15);
  sub_23C9108A8();
  sub_23C910848();
  sub_23C910860();
  (*(void (**)(uint64_t))(v16 + 16))(v17);
  sub_23C9108C0();
  sub_23C7DBCB0();
}

void sub_23C8206C0(uint64_t a1@<X8>)
{
  static EncodableRecord.databaseDateEncodingStrategy.getter(a1);
}

void static EncodableRecord.databaseDateEncodingStrategy.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

void sub_23C8206E4(_BYTE *a1@<X8>)
{
  static EncodableRecord.databaseUUIDEncodingStrategy.getter(a1);
}

void static EncodableRecord.databaseUUIDEncodingStrategy.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_23C820700(_QWORD *a1@<X8>)
{
  static EncodableRecord.databaseColumnEncodingStrategy.getter(a1);
}

void static EncodableRecord.databaseColumnEncodingStrategy.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_23C82071C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v3 = v11;
    v4 = a1 + 40;
    do
    {
      sub_23C911010();
      v5 = sub_23C9114F0();
      v7 = v6;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v11 + 16);
      if (v8 >= *(_QWORD *)(v11 + 24) >> 1)
        sub_23C7E649C();
      v4 += 16;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v7;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void sub_23C820840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD v8[5];
  _BYTE v9[40];

  sub_23C7DB5E4(a1, (uint64_t)v8, &qword_25430CEA8);
  if (v8[3] == 1)
  {
    v6 = &qword_25430CEA8;
    sub_23C7E7900((uint64_t)v8, &qword_25430CEA8);
    sub_23C822344(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)a1;
  }
  else
  {
    v6 = (uint64_t *)&unk_25430D6B8;
    sub_23C800FCC((uint64_t)v8, (uint64_t)v9, (uint64_t *)&unk_25430D6B8);
    sub_23C8211D0((uint64_t)v9, a2, a3, (uint64_t)v8);
    swift_bridgeObjectRelease();
    sub_23C7E7900(a1, &qword_25430CEA8);
    v7 = v8;
  }
  sub_23C7E7900((uint64_t)v7, &qword_25430CEA8);
  sub_23C7E7900((uint64_t)v9, v6);
}

void PersistenceContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v4[40];

  sub_23C8211D0(a1, a2, a3, (uint64_t)v4);
  sub_23C7DF328(v3, (uint64_t *)&unk_25430D6B8);
  sub_23C7E7900((uint64_t)v4, &qword_25430CEA8);
  sub_23C7DB624();
  sub_23C7E653C();
}

void sub_23C82097C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v5 = *(void (**)(uint64_t))v2;
  if (*(_BYTE *)(v2 + 16))
  {
    if (*(_BYTE *)(v2 + 16) != 1)
      __asm { BR              X9 }
    swift_retain();
    v5(a1);
    v6 = (void *)sub_23C7DFDFC();
    sub_23C81ABB8(v6, v7, 1);
  }
  else
  {
    v8 = v5;
    v9 = (void *)sub_23C825130();
    v10 = objc_msgSend(v8, sel_stringFromDate_, v9);

    v11 = sub_23C910E78();
    v13 = v12;

    a2[3] = MEMORY[0x24BEE0D00];
    a2[4] = (uint64_t)&protocol witness table for String;
    v14 = (void *)sub_23C7DFDFC();
    sub_23C81ABB8(v14, v15, 0);
    *a2 = v11;
    a2[1] = v13;
    sub_23C7DF5B4();
  }
}

void EncodableRecord.databaseDictionary.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7E2548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, a1);
  sub_23C7E5E24(v2, v5);
  swift_bridgeObjectRelease();
  sub_23C824618(v5[1]);
  sub_23C7DB624();
  sub_23C7DB3A0();
}

BOOL EncodableRecord.databaseEquals(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE96C();
  v6 = *(void (**)(void))(v5 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v3, v2, a2);
  sub_23C7E5E24(v3, &v15);
  sub_23C825138();
  v6();
  sub_23C7E5E24(v3, v14);
  v7 = v14[1];
  v8 = sub_23C7DB388();
  *(_OWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v8 + 32) = 0;
  swift_retain();
  sub_23C7DF858();
  sub_23C7DB3D4();
  v9 = (_QWORD *)sub_23C7E31EC();
  sub_23C821C24(v9, v10, v7, v11);
  sub_23C7DE9B0();
  sub_23C7DE9B0();
  swift_release_n();
  v12 = v17;
  if (v17)
    sub_23C8248E4(v16, v17, v18, v19, v20);
  return v12 == 0;
}

void EncodableRecord.databaseChanges<A>(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  sub_23C7DE8EC();
  v7 = v6;
  sub_23C825110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7EC60C();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v0, v3);
  sub_23C8201E8((uint64_t)v13, v3, v1, &v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v4, v2);
  sub_23C8201E8(v5, v2, v7, &v20);
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = v21;
  *(_QWORD *)(v15 + 32) = 0;
  v16 = sub_23C7DB388();
  *(_QWORD *)(v16 + 16) = v15;
  *(_OWORD *)(v16 + 24) = v20;
  sub_23C7E79A8(qword_25430AF40);
  v17 = sub_23C7DB388();
  *(_QWORD *)(v17 + 16) = sub_23C824960;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)&v21 = MEMORY[0x24BEE4B00];
  v18 = swift_retain_n();
  sub_23C824330(v18, 1, &v21);
  swift_release_n();
  sub_23C7DBCB0();
}

void PersistenceContainer.subscript.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (!*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = xmmword_23C914530;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_23C7EBCB0();
  v3 = sub_23C7E94B8();
  if ((v4 & 1) == 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = xmmword_23C914530;
    sub_23C7E072C();
    goto LABEL_7;
  }
  v5 = sub_23C7E959C(v3);
  sub_23C7DB5E4(v5, (uint64_t)&v6, (uint64_t *)&unk_25430D6B8);
  sub_23C7E072C();
  if ((_QWORD)v9 == 1)
  {
LABEL_7:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    sub_23C7E7900((uint64_t)&v6, &qword_25430CEA8);
    goto LABEL_8;
  }
  sub_23C800FCC((uint64_t)&v6, a1, (uint64_t *)&unk_25430D6B8);
LABEL_8:
  sub_23C7E653C();
}

uint64_t sub_23C821034@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PersistenceContainer.subscript.getter(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23C8210A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[40];

  v3 = *a3;
  v4 = a3[1];
  sub_23C7DB5E4(a1, (uint64_t)v5, (uint64_t *)&unk_25430D6B8);
  swift_bridgeObjectRetain();
  PersistenceContainer.subscript.setter((uint64_t)v5, v3, v4);
}

uint64_t sub_23C8210FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  char v6;
  uint64_t v7;

  if (!*(_QWORD *)(a4 + 16))
    return 0;
  v5 = sub_23C7E94B8();
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 24 * v5);
  sub_23C7DF858();
  sub_23C7DB3D4();
  sub_23C7DC46C();
  return v7;
}

double sub_23C82116C@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  double result;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_23C7E94B8(), (v5 & 1) != 0))
  {
    sub_23C7DB5E4(*(_QWORD *)(a1 + 56) + 40 * v4, a2, (uint64_t *)&unk_25430D6B8);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)&result = 1;
    *(_OWORD *)(a2 + 24) = xmmword_23C914530;
  }
  return result;
}

void sub_23C8211D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  sub_23C7DB5E4(a1, (uint64_t)&v11, (uint64_t *)&unk_25430D6B8);
  sub_23C834D3C();
  if (v13 == 1)
  {
    sub_23C7E7900((uint64_t)v12, &qword_25430CEA8);
    sub_23C7DBCC8();
    sub_23C7F1248();
    v8 = *(_QWORD *)(*v4 + 16);
    sub_23C7F1494();
    v9 = *v4;
    *(_QWORD *)(v9 + 16) = v8 + 1;
    v10 = v9 + 16 * v8;
    *(_QWORD *)(v10 + 32) = a2;
    *(_QWORD *)(v10 + 40) = a3;
    *v4 = v9;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    *(_OWORD *)(a4 + 24) = xmmword_23C914530;
  }
  else
  {
    sub_23C800FCC((uint64_t)v12, a4, (uint64_t *)&unk_25430D6B8);
  }
}

uint64_t sub_23C8212B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRetain();
  sub_23C7E0808();
  swift_bridgeObjectRetain();
  sub_23C7E110C();
  v8 = sub_23C834D6C();
  if (!v9)
  {
    sub_23C7DC46C();
    sub_23C7F1248();
    v10 = *(_QWORD *)(*v5 + 16);
    sub_23C7F1494();
    v11 = *v5;
    *(_QWORD *)(v11 + 16) = v10 + 1;
    v12 = v11 + 16 * v10;
    *(_QWORD *)(v12 + 32) = a4;
    *(_QWORD *)(v12 + 40) = a5;
    *v5 = v11;
  }
  return v8;
}

void (*PersistenceContainer.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v7 = (uint64_t)malloc(0x90uLL);
  v8 = v7;
  *a1 = v7;
  v9 = (_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 128) = a3;
  *(_QWORD *)(v7 + 136) = v3;
  *(_QWORD *)(v7 + 120) = a2;
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 8) + 16))
  {
    *v9 = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_OWORD *)(v7 + 64) = xmmword_23C914530;
    goto LABEL_7;
  }
  sub_23C7DBCC8();
  v10 = sub_23C7E94B8();
  if ((v11 & 1) == 0)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)(v8 + 64) = xmmword_23C914530;
    v7 = sub_23C7DB62C();
    goto LABEL_7;
  }
  v12 = sub_23C7E959C(v10);
  sub_23C7DB5E4(v12, (uint64_t)v9, (uint64_t *)&unk_25430D6B8);
  v7 = sub_23C7DB62C();
  if (*(_QWORD *)(v8 + 64) == 1)
  {
LABEL_7:
    *(_QWORD *)(v8 + 32) = 0;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    sub_23C7DF328(v7, &qword_25430CEA8);
    return sub_23C821470;
  }
  v13 = sub_23C7E31EC();
  sub_23C800FCC(v13, v14, v15);
  return sub_23C821470;
}

void sub_23C821470(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    v4 = v2[16];
    v5 = v2[15];
    sub_23C7DB5E4(*a1, v3, (uint64_t *)&unk_25430D6B8);
    sub_23C7E0808();
    sub_23C8211D0(v3, v5, v4, (uint64_t)(v2 + 10));
    sub_23C7EE264(v3);
    sub_23C7E7900((uint64_t)(v2 + 10), &qword_25430CEA8);
    sub_23C7DB398();
    sub_23C7EE264((uint64_t)v2);
  }
  else
  {
    v6 = v2[16];
    v7 = v2[15];
    sub_23C7DBCC8();
    sub_23C8211D0((uint64_t)v2, v7, v6, v3);
    sub_23C7E7900((uint64_t)v2, (uint64_t *)&unk_25430D6B8);
    sub_23C7DF328(v8, &qword_25430CEA8);
    sub_23C7DB62C();
  }
  free(v2);
}

uint64_t PersistenceContainer.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _BYTE v9[40];

  v5 = *(_QWORD *)(v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    sub_23C7DF858();
    sub_23C7DBCC8();
    v6 = sub_23C7E94B8();
    if ((v7 & 1) != 0)
    {
      sub_23C7DB5E4(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v9, (uint64_t *)&unk_25430D6B8);
      sub_23C800FCC((uint64_t)v9, a3, (uint64_t *)&unk_25430D6B8);
      sub_23C7DB62C();
      sub_23C7DB624();
      return sub_23C7E072C();
    }
  }
  else
  {
    sub_23C7DF858();
    sub_23C7DBCC8();
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_23C7DB62C();
  sub_23C7DB624();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C821640@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return PersistenceContainer.subscript.getter(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
}

void sub_23C821680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[40];

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v12[-v7 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v12[-v7 - 8], v10, v5);
  sub_23C7DB5E4(a1, (uint64_t)v12, (uint64_t *)&unk_25430D6B8);
  PersistenceContainer.subscript.setter((uint64_t)v12, (uint64_t)v8, v5, v6);
}

void PersistenceContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  _BYTE v10[40];
  _BYTE v11[40];

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v7 = v6;
  sub_23C7DB5E4(a1, (uint64_t)v11, (uint64_t *)&unk_25430D6B8);
  sub_23C8211D0((uint64_t)v11, v5, v7, (uint64_t)v10);
  sub_23C7EE264((uint64_t)v11);
  sub_23C7E7900((uint64_t)v10, &qword_25430CEA8);
  sub_23C7DB3DC();
  v8 = sub_23C7EBCB0();
  v9(v8);
  sub_23C7EE264(a1);
}

void (*PersistenceContainer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  void (*v11)(void);

  v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[10] = a3;
  v8[11] = a4;
  v9 = *(_QWORD *)(a3 - 8);
  v8[12] = v4;
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[14] = malloc(v10);
  v8[15] = malloc(v10);
  sub_23C825138();
  v11();
  PersistenceContainer.subscript.getter(a3, a4, (uint64_t)v8);
  return sub_23C8218A4;
}

void sub_23C8218A4()
{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);

  sub_23C7DE8EC();
  v1 = (uint64_t *)*v0;
  v4 = *(void **)(*v0 + 112);
  v3 = *(void **)(*v0 + 120);
  if ((v2 & 1) != 0)
  {
    v6 = v1[10];
    v5 = v1[11];
    sub_23C7DB5E4(*v0, (uint64_t)(v1 + 5), (uint64_t *)&unk_25430D6B8);
    v7 = sub_23C7EBCB0();
    v8(v7);
    PersistenceContainer.subscript.setter((uint64_t)(v1 + 5), (uint64_t)v4, v6, v5);
    sub_23C7E7900((uint64_t)v1, (uint64_t *)&unk_25430D6B8);
  }
  else
  {
    PersistenceContainer.subscript.setter(*v0, v1[15], v1[10], v1[11]);
  }
  free(v3);
  free(v4);
  free(v1);
}

void sub_23C821964(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _BYTE v30[40];
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v4 = *v1;
  v3 = v1[1];
  if (*(_QWORD *)(v3 + 16))
  {
    sub_23C7DF858();
    v5 = sub_23C7E94B8();
    if ((v6 & 1) != 0)
    {
      v7 = sub_23C7E959C(v5);
      sub_23C7DB5E4(v7, (uint64_t)&v34, (uint64_t *)&unk_25430D6B8);
      sub_23C7DB624();
      if ((_QWORD)v37 != 1)
      {
        v8 = &v34;
        v9 = a1;
LABEL_24:
        sub_23C800FCC((uint64_t)v8, v9, (uint64_t *)&unk_25430D6B8);
        return;
      }
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = xmmword_23C914530;
      sub_23C7DB624();
    }
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = xmmword_23C914530;
  }
  v26 = a1;
  sub_23C7E7900((uint64_t)&v34, &qword_25430CEA8);
  v10 = sub_23C910E18();
  v12 = v11;
  v13 = *(_QWORD *)(v4 + 16);
  v27 = v4 + 32;
  v28 = v4;
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  v14 = 0;
  while (1)
  {
    if (v14 == v13)
    {
      v33 = 0;
      memset(v32, 0, sizeof(v32));
      v14 = v13;
      v31 = 0u;
      goto LABEL_14;
    }
    if (v14 >= *(_QWORD *)(v28 + 16))
      break;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_26;
    v15 = (uint64_t *)(v27 + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    sub_23C7DB420();
    v18 = sub_23C7E94B8();
    if ((v19 & 1) == 0)
      goto LABEL_27;
    v20 = sub_23C7E959C(v18);
    sub_23C7E1760(v20, (uint64_t)v30);
    sub_23C7DB624();
    v29[0] = v17;
    v29[1] = v16;
    *(_QWORD *)&v31 = v17;
    *((_QWORD *)&v31 + 1) = v16;
    sub_23C7E1760((uint64_t)v30, (uint64_t)v32);
    sub_23C7DF858();
    sub_23C7E7900((uint64_t)v29, &qword_25430B370);
    ++v14;
LABEL_14:
    sub_23C800FCC((uint64_t)&v31, (uint64_t)&v34, &qword_25430B378);
    if (!v35)
    {
      sub_23C7DB62C();
      sub_23C7DE934();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 32) = 0;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      return;
    }
    sub_23C7DF874((uint64_t)&v36, (uint64_t)&v31);
    v21 = sub_23C910E18();
    v23 = v22;
    swift_bridgeObjectRelease();
    if (v21 == v10 && v23 == v12)
    {
      sub_23C7DE934();
LABEL_23:
      sub_23C7DE934();
      sub_23C7DB624();
      sub_23C7DB62C();
      v8 = (uint64_t *)&v31;
      v9 = v26;
      goto LABEL_24;
    }
    v25 = sub_23C7E16E8();
    sub_23C7DB624();
    if ((v25 & 1) != 0)
      goto LABEL_23;
    sub_23C7E8DF0((uint64_t)&v31);
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void sub_23C821C24(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE v46[40];
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  _BYTE v51[40];
  _BYTE v52[48];

  *(_QWORD *)&v43 = a2;
  *((_QWORD *)&v43 + 1) = a3;
  while (1)
  {
    swift_beginAccess();
    v5 = a1[4];
    v6 = a1[2];
    v7 = *(_QWORD *)(v6 + 16);
    if (v5 == v7)
    {
      v49 = 0;
      memset(v48, 0, sizeof(v48));
      v47 = 0u;
      goto LABEL_9;
    }
    if (v5 >= v7)
      break;
    if (!*(_QWORD *)(a1[3] + 16))
      goto LABEL_22;
    v8 = v6 + 16 * v5;
    v10 = *(_QWORD *)(v8 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    sub_23C7DB420();
    sub_23C7E31EC();
    v11 = sub_23C7E94B8();
    if ((v12 & 1) == 0)
      goto LABEL_23;
    v13 = sub_23C7E959C(v11);
    sub_23C7E1760(v13, (uint64_t)v46);
    sub_23C7DB624();
    v44 = v10;
    v45 = v9;
    *(_QWORD *)&v47 = v10;
    *((_QWORD *)&v47 + 1) = v9;
    sub_23C7E1760((uint64_t)v46, (uint64_t)v48);
    sub_23C7DF858();
    sub_23C7E7900((uint64_t)&v44, &qword_25430B370);
    v14 = a1[4];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_24;
    a1[4] = v16;
LABEL_9:
    swift_endAccess();
    if (!*((_QWORD *)&v47 + 1))
    {
      sub_23C7E7900((uint64_t)&v47, &qword_25430B378);
      *(_BYTE *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return;
    }
    v50 = v47;
    sub_23C7DF874((uint64_t)v48, (uint64_t)v51);
    v17 = v50;
    sub_23C7DF874((uint64_t)v51, (uint64_t)v52);
    v47 = v43;
    sub_23C7DBCC8();
    sub_23C7DC46C();
    sub_23C821964((uint64_t)&v50);
    sub_23C7E072C();
    sub_23C7DB62C();
    sub_23C7E1760((uint64_t)&v50, (uint64_t)&v47);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v18 = sub_23C7E7E34(&v47, *((uint64_t *)&v48[0] + 1));
      sub_23C7DFBC4((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
      v26 = v44;
      v27 = v45;
      v28 = v46[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v47);
    }
    else
    {
      sub_23C7E8DF0((uint64_t)&v47);
      v26 = 0;
      v27 = 0;
      v28 = 4;
    }
    sub_23C7E1760((uint64_t)v52, (uint64_t)&v47);
    v29 = *((_QWORD *)&v48[0] + 1);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v30 = sub_23C7E7E34(&v47, *((uint64_t *)&v48[0] + 1));
      sub_23C7DFBC4((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
      v38 = v44;
      v29 = v45;
      v39 = v46[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v47);
    }
    else
    {
      sub_23C7E8DF0((uint64_t)&v47);
      v38 = 0;
      v39 = 4;
    }
    *(_QWORD *)&v47 = v38;
    *((_QWORD *)&v47 + 1) = v29;
    LOBYTE(v48[0]) = v39;
    v44 = v26;
    v45 = v27;
    v46[0] = v28;
    static DatabaseValue.== infix(_:_:)((uint64_t)&v47);
    v41 = v40;
    sub_23C7E8DF0((uint64_t)&v50);
    sub_23C7E8DF0((uint64_t)v52);
    sub_23C7E5640(v38, v29, v39);
    if ((v41 & 1) == 0)
    {
      *(_OWORD *)a4 = v17;
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 24) = v27;
      *(_BYTE *)(a4 + 32) = v28;
      return;
    }
    sub_23C7DB624();
    sub_23C7E5640(v26, v27, v28);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

id sub_23C821EF8()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  result = objc_msgSend(v0, sel_setFormatOptions_, 1907);
  qword_256BCC2F0 = (uint64_t)v0;
  return result;
}

void static DatabaseUUIDEncodingStrategy.string.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static DatabaseUUIDEncodingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DatabaseUUIDEncodingStrategy.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t DatabaseUUIDEncodingStrategy.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C7DA4F4();
}

uint64_t sub_23C821FD8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  sub_23C7DE8EC();
  v2 = v1;
  v4 = v3;
  v34 = sub_23C910920();
  MEMORY[0x24BDAC7A8](v34);
  sub_23C7EC60C();
  if ((v2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v2) & 0xF;
  else
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    sub_23C7DF858();
    return sub_23C7E31EC();
  }
  v6 = sub_23C910F2C();
  v7 = 7;
  if (((v2 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  v33 = 4 * v5;
  if (4 * v5 < v6 >> 14)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  else
  {
    v36 = v4;
    v8 = MEMORY[0x24BEE4AF8];
    v0 = 15;
    v35 = v7 | (v5 << 16);
    while (1)
    {
      sub_23C9108FC();
      sub_23C7EEE60();
      v9 = sub_23C911538();
      v11 = v10;
      sub_23C7E5798();
      if ((v11 & 1) != 0)
      {
        v12 = v0 >> 14;
        goto LABEL_27;
      }
      v12 = v9 >> 14;
      if (v9 >> 14 < v0 >> 14)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7E31E0();
        v8 = v24;
      }
      v13 = *(_QWORD *)(v8 + 16);
      if (v13 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7E31E0();
        v8 = v25;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      v14 = v8 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v0;
      *(_QWORD *)(v14 + 40) = v9;
      if (v33 < v12)
        goto LABEL_34;
      v0 = v36;
      sub_23C9108F0();
      v15 = sub_23C911538();
      v17 = v16;
      v19 = v18;
      sub_23C7E5798();
      if ((v19 & 1) != 0)
        break;
      if ((sub_23C910F2C() ^ (unint64_t)v15) >= 0x4000)
      {
        v20 = sub_23C910F38();
        if (v12 > v20 >> 14)
          goto LABEL_36;
        v21 = v20;
        v22 = *(_QWORD *)(v8 + 16);
        if (v22 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          sub_23C7E31E0();
          v8 = v26;
        }
        *(_QWORD *)(v8 + 16) = v22 + 1;
        v23 = v8 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v9;
        *(_QWORD *)(v23 + 40) = v21;
        v9 = v21;
      }
      v0 = v9;
      if (v33 < v17 >> 14)
        goto LABEL_35;
    }
    v0 = v9;
LABEL_27:
    if (v33 < v12)
      goto LABEL_38;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_29;
  }
  sub_23C7E31E0();
  v8 = v31;
LABEL_29:
  v27 = *(_QWORD *)(v8 + 16);
  if (v27 >= *(_QWORD *)(v8 + 24) >> 1)
  {
    sub_23C7E31E0();
    v8 = v32;
  }
  *(_QWORD *)(v8 + 16) = v27 + 1;
  v28 = v8 + 16 * v27;
  *(_QWORD *)(v28 + 32) = v0;
  *(_QWORD *)(v28 + 40) = v35;
  sub_23C7DF858();
  v29 = sub_23C7DBCC8();
  sub_23C82071C(v29);
  sub_23C7DE9B0();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  sub_23C7DB398();
  return sub_23C7E31EC();
}

void sub_23C822344(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD v9[6];
  _BYTE v10[24];
  uint64_t v11;
  _BYTE v12[40];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  sub_23C86321C((uint64_t)v10);
  if (v11 == 1)
  {
    sub_23C7E7900((uint64_t)v10, &qword_25430CEA8);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 24) = xmmword_23C914530;
  }
  else
  {
    sub_23C800FCC((uint64_t)v10, (uint64_t)v12, (uint64_t *)&unk_25430D6B8);
    v5 = *v3;
    MEMORY[0x24BDAC7A8](v6);
    v9[2] = v13;
    swift_bridgeObjectRetain();
    sub_23C85C34C(sub_23C8250B4, (uint64_t)v9, v5);
    v8 = v7;
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      sub_23C89056C();
      swift_bridgeObjectRelease();
      sub_23C800FCC((uint64_t)v12, a3, (uint64_t *)&unk_25430D6B8);
    }
  }
}

unint64_t sub_23C822464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C825110();
  sub_23C7E9064();
  sub_23C7E0808();
  sub_23C910F14();
  sub_23C7DB398();
  sub_23C7DA4F4();
  v2 = sub_23C7E110C();
  return sub_23C822704(v2, v3, v1, v0, v4);
}

unint64_t sub_23C8224CC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E9064();
  sub_23C88129C();
  sub_23C7DA4F4();
  v0 = sub_23C8250F0();
  return sub_23C8227E4(v0, v1);
}

unint64_t sub_23C822514(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  sub_23C7E9064();
  sub_23C911BC8();
  if (a2 > 1)
    sub_23C7E58DC();
  sub_23C7DA4F4();
  v3 = sub_23C7EBCB0();
  return sub_23C8228F4(v3, v4, v5);
}

uint64_t sub_23C822588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[72];

  sub_23C7E9064();
  sub_23C8E7ED4((uint64_t)v10, a1);
  sub_23C7DBCC8();
  sub_23C910F14();
  sub_23C7DB62C();
  sub_23C7DC46C();
  sub_23C824F78();
  sub_23C7E072C();
  v8 = sub_23C7DA4F4();
  return sub_23C8229D4(a1, a2, a3, a4, v8);
}

uint64_t sub_23C822620(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  sub_23C7E9064();
  sub_23C8E7ED4((uint64_t)v5, *a1);
  sub_23C7DBCC8();
  sub_23C910F14();
  sub_23C7DB62C();
  sub_23C7E0808();
  sub_23C824F78();
  sub_23C7DB398();
  swift_bridgeObjectRetain();
  sub_23C824F78();
  sub_23C7DB3DC();
  sub_23C7DA4F4();
  v2 = sub_23C8250F0();
  return sub_23C822CFC(v2, v3);
}

unint64_t sub_23C8226BC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E9064();
  sub_23C824FBC();
  sub_23C7DA4F4();
  v0 = sub_23C8250F0();
  return sub_23C8230F8(v0, v1);
}

unint64_t sub_23C822704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = (_QWORD *)(v11 + 32 * v8);
    v13 = *v12 == a1 && v12[1] == a2;
    if (!v13 && (sub_23C911A18() & 1) == 0)
    {
      v14 = ~v7;
      do
      {
        v8 = (v8 + 1) & v14;
        if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v15 = (_QWORD *)(v11 + 32 * v8);
        v16 = *v15 == a1 && v15[1] == a2;
      }
      while (!v16 && (sub_23C911A18() & 1) == 0);
    }
  }
  return v8;
}

unint64_t sub_23C8227E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for TableAlias();
    swift_retain();
    v6 = static TableAlias.== infix(_:_:)();
    swift_release();
    if (!v6)
    {
      v7 = ~v4;
      for (i = (i + 1) & v7; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v7)
      {
        swift_retain();
        v8 = static TableAlias.== infix(_:_:)();
        swift_release();
        if (v8)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_23C8228F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (_QWORD *)(v10 + 16 * v6);
      v12 = v11[1];
      if (v12)
      {
        if (v12 == 1)
        {
          if (a2 == 1)
            return v6;
        }
        else if (a2 >= 2)
        {
          v13 = *v11 == a1 && v12 == a2;
          if (v13 || (sub_23C911A18() & 1) != 0)
            return v6;
        }
      }
      else if (!a2)
      {
        return v6;
      }
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t sub_23C8229D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  return a5 & ~v6;
}

uint64_t sub_23C822CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~v3;
}

unint64_t sub_23C8230F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result);
      if (*(_QWORD *)(v7 + 16) == v6)
        break;
      result = (result + 1) & ~v4;
      if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        return result;
    }
    if (v6)
    {
      if (v7 != a1)
      {
        swift_bridgeObjectRetain();
        __asm { BR              X8 }
      }
    }
  }
  return result;
}

void sub_23C824330(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  swift_retain();
  sub_23C9117F0();
  v4 = v23;
  if (!v23)
  {
    swift_release_n();
    return;
  }
  while (1)
  {
    v5 = (_QWORD *)*a3;
    v7 = sub_23C7E94B8();
    v8 = v5[2];
    v9 = (v6 & 1) == 0;
    if (__OFADD__(v8, v9))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      sub_23C911B50();
      __break(1u);
      goto LABEL_18;
    }
    v10 = v6;
    if (v5[3] < v8 + v9)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v6 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_23C7E79A8(&qword_25430B610);
      sub_23C911784();
      if ((v10 & 1) != 0)
        goto LABEL_12;
    }
LABEL_9:
    v13 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v7 >> 6) + 64) |= 1 << v7;
    v14 = (_QWORD *)(v13[6] + 16 * v7);
    *v14 = v22;
    v14[1] = v4;
    v15 = v13[7] + 24 * v7;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v25;
    *(_BYTE *)(v15 + 16) = v26;
    v16 = v13[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_16;
    v13[2] = v18;
    sub_23C9117F0();
    v4 = v23;
    a2 = 1;
  }
  sub_23C8F9A64();
  v11 = sub_23C7E94B8();
  if ((v10 & 1) != (v12 & 1))
    goto LABEL_17;
  v7 = v11;
  if ((v10 & 1) == 0)
    goto LABEL_9;
LABEL_12:
  v19 = (void *)swift_allocError();
  swift_willThrow();
  v20 = v19;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    sub_23C7E5640(v24, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_18:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C824618(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  int64_t v40;

  sub_23C7E79A8(qword_25430B708);
  result = sub_23C9117CC();
  v3 = 0;
  v33 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v29 = v5;
  v30 = (unint64_t)(v7 + 63) >> 6;
  v31 = (_QWORD *)result;
  v32 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v40 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    sub_23C7DB5E4(*(_QWORD *)(v33 + 56) + 40 * i, (uint64_t)v39, (uint64_t *)&unk_25430D6B8);
    sub_23C7DB5E4((uint64_t)v39, (uint64_t)v36, (uint64_t *)&unk_25430D6B8);
    v19 = v37;
    if (v37)
    {
      v20 = v38;
      sub_23C7E7E34(v36, v37);
      v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24);
      swift_bridgeObjectRetain();
      v21(v34, v19, v20);
      v22 = v34[0];
      v19 = v34[1];
      v23 = v35;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v36);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_23C7E7900((uint64_t)v36, (uint64_t *)&unk_25430D6B8);
      v22 = 0;
      v23 = 4;
    }
    sub_23C7E7900((uint64_t)v39, (uint64_t *)&unk_25430D6B8);
    result = (uint64_t)v31;
    *(_QWORD *)(v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v24 = (_QWORD *)(v31[6] + 16 * i);
    *v24 = v17;
    v24[1] = v18;
    v25 = v31[7] + 24 * i;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v19;
    *(_BYTE *)(v25 + 16) = v23;
    v26 = v31[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v31[2] = v28;
    v3 = v40;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_27;
    if (v12 >= v30)
      return result;
    v13 = *(_QWORD *)(v29 + 8 * v12);
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v30)
        return result;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v30)
          return result;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v9 = (v13 - 1) & v13;
    v40 = v14;
  }
  v15 = v3 + 4;
  if (v3 + 4 >= v30)
    return result;
  v13 = *(_QWORD *)(v29 + 8 * v15);
  if (v13)
  {
    v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v30)
      return result;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23C8248B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C8248E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return sub_23C7E5640(a3, a4, a5);
  }
  return result;
}

uint64_t sub_23C82492C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C824960(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C821C24(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_23C824970()
{
  unint64_t result;

  result = qword_256BCC2F8;
  if (!qword_256BCC2F8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseUUIDEncodingStrategy, &type metadata for DatabaseUUIDEncodingStrategy);
    atomic_store(result, (unint64_t *)&qword_256BCC2F8);
  }
  return result;
}

uint64_t sub_23C8249B4()
{
  return 0;
}

uint64_t sub_23C8249CC()
{
  return 16;
}

__n128 sub_23C8249D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of EncodableRecord.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseEncodingUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseJSONEncoder(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseDateEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseUUIDEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseColumnEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

_QWORD *assignWithCopy for StatementArguments(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TableRegion(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for PersistenceContainer()
{
  sub_23C7DFB90();
}

id sub_23C824ABC(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_retain();
  if (!a3)
    return result;
  return result;
}

void destroy for DatabaseDateEncodingStrategy(uint64_t a1)
{
  sub_23C81ABB8(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void _s12GRDBInternal28DatabaseDateEncodingStrategyOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C824ABC(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C7DB3A0();
}

uint64_t assignWithCopy for DatabaseDateEncodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C824ABC(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C81ABB8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DatabaseDateEncodingStrategy(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C81ABB8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Database.BusyMode(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Database.BusyMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C824C48(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23C824C60(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for DatabaseDateEncodingStrategy()
{
  sub_23C7DFB90();
}

uint64_t storeEnumTagSinglePayload for DatabaseUUIDEncodingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C824CD0 + 4 * byte_23C914545[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C824D04 + 4 * byte_23C914540[v4]))();
}

uint64_t sub_23C824D04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C824D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C824D14);
  return result;
}

uint64_t sub_23C824D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C824D28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C824D2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C824D34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for DatabaseUUIDEncodingStrategy()
{
  sub_23C7DFB90();
}

_QWORD *destroy for DatabaseColumnEncodingStrategy(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

void _s12GRDBInternal30DatabaseColumnEncodingStrategyOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  sub_23C7DB390();
}

unint64_t *assignWithCopy for DatabaseColumnEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for DatabaseColumnEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseColumnEncodingStrategy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatabaseColumnEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for DatabaseColumnEncodingStrategy()
{
  sub_23C7DFB90();
}

void sub_23C824F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C7E6C04();
  if (v0)
  {
    v2 = v1 + 40;
    do
    {
      sub_23C7DBCC8();
      sub_23C8250D0();
      sub_23C7DB62C();
      v2 += 16;
      --v0;
    }
    while (v0);
  }
  sub_23C7DF5B4();
}

uint64_t sub_23C824FBC()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23C7E6C04();
  if (v0)
    __asm { BR              X8 }
  return result;
}

uint64_t sub_23C82508C(uint64_t *a1, uint64_t *a2)
{
  return sub_23C85C2F4(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_23C8250B4(uint64_t *a1)
{
  uint64_t v1;

  return sub_23C82508C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_23C8250D0()
{
  return sub_23C910F14();
}

void sub_23C8250E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  sub_23C7DB5E4(v6, (uint64_t)va, v5);
}

uint64_t sub_23C8250F0()
{
  uint64_t v0;

  return v0;
}

double sub_23C8250FC(double a1)
{
  return floor(a1);
}

void sub_23C825124()
{
  void *v0;

}

uint64_t sub_23C825130()
{
  return sub_23C910B3C();
}

uint64_t sub_23C825144(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_23C9117C0())
  {
    v7 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x242625290](v7 - 4, a3);
      }
      else
      {
        v8 = *(_QWORD *)(a3 + 8 * v7);
        swift_retain();
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v12 = v8;
      v10 = a1(&v12);
      if (v3)
      {
        sub_23C7DB62C();
        swift_release();
        return v8;
      }
      if ((v10 & 1) != 0)
      {
        sub_23C7DB62C();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  sub_23C7DB62C();
  return 0;
}

uint64_t sub_23C825264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = v0;
  type metadata accessor for SchedulingWatchdog();
  v2 = sub_23C7E2FE0();
  if (v2 && (v3 = *(_QWORD *)(v2 + 24), swift_retain(), swift_release(), v3))
  {
    sub_23C828668(v1, v3);
    return swift_release();
  }
  else
  {
    result = sub_23C9117B4();
    __break(1u);
  }
  return result;
}

void DatabaseRegionObservation.extent.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *DatabaseRegionObservation.extent.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*DatabaseRegionObservation.extent.modify())()
{
  return nullsub_1;
}

uint64_t DatabaseRegionObservation.init(tracking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_23C7E9070();
  *(_QWORD *)(result + 16) = a1;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = sub_23C826928;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

{
  uint64_t result;

  result = sub_23C7E9070();
  *(_QWORD *)(result + 16) = a1;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = sub_23C82871C;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

_QWORD *DatabaseRegionObservation.start(in:onChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  char v9;
  uint64_t ObjectType;
  _QWORD *(*v11)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t *@<X8>), _BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *result;
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *v4;
  ObjectType = swift_getObjectType();
  v14[16] = v9;
  v15 = *(_OWORD *)(v4 + 8);
  v16 = a3;
  v17 = a4;
  v11 = *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *(*)@<X0>(uint64_t *@<X8>), _BYTE *, uint64_t, uint64_t, uint64_t))(a2 + 64);
  v12 = sub_23C7E79A8(qword_256BCC300);
  result = v11(&v18, sub_23C826940, v14, v12, ObjectType, a2);
  if (!v5)
    return (_QWORD *)v18;
  return result;
}

_QWORD *sub_23C825470@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a1(&v12);
  if (!v4)
  {
    if (v12)
    {
      v9 = swift_bridgeObjectRetain();
      sub_23C88CFFC(v9);
      swift_bridgeObjectRelease();
    }
    sub_23C8679E0(&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v13;
    type metadata accessor for DatabaseRegionObserver();
    v11 = swift_allocObject();
    *(_BYTE *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = a2;
    *(_QWORD *)(v11 + 32) = a3;
    swift_retain();
    swift_retain();
    sub_23C8083C8();
    result = (_QWORD *)swift_release();
    *a4 = v11;
    a4[1] = (uint64_t)&off_250D84F88;
  }
  return result;
}

uint64_t DatabaseRegionObservation.publisher(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v3;
  v7 = *((_QWORD *)v3 + 1);
  v6 = *((_QWORD *)v3 + 2);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v6;
  swift_retain();
  return swift_unknownObjectRetain();
}

BOOL sub_23C8255CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  BOOL v8;

  swift_bridgeObjectRetain();
  v8 = DatabaseRegion.isModified(byEventsOfKind:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_23C825644(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
    goto LABEL_9;
  v5 = a1[3];
  v6 = a1[4];
  sub_23C7E7E34(a1, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v8 = v7(v5, v6);
  v10 = v9;
  v11 = sub_23C910E18();
  sub_23C866094(v11, v12, v8, v10, v3);
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 == 1)
    goto LABEL_9;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_23C868540(a1[6], v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(v2 + 40) = 1;
    return sub_23C825264();
  }
  return result;
}

uint64_t sub_23C825764()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 40) == 1)
  {
    *(_BYTE *)(v0 + 40) = 0;
    return (*(uint64_t (**)(void))(v0 + 24))();
  }
  return result;
}

void sub_23C825794()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 40) = 0;
}

uint64_t sub_23C82579C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_23C8257C0()
{
  sub_23C82579C();
  return swift_deallocClassInstance();
}

uint64_t DatabasePublishers.DatabaseRegion.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  _QWORD v21[5];

  v20 = a3;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)v3;
  v10 = *(_QWORD *)(v3 + 8);
  v11 = *(_BYTE *)(v3 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v3 + 32);
  v17 = _s26DatabaseRegionSubscriptionCMa(0, v14, v15, v16);
  LOBYTE(v21[0]) = v11;
  v21[1] = v12;
  v21[2] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  swift_unknownObjectRetain();
  swift_retain();
  v18 = sub_23C8258FC(v9, v10, (uint64_t)v21, (uint64_t)v8);
  v21[3] = v17;
  v21[4] = MEMORY[0x242626100](&unk_23C9148D0, v17);
  v21[0] = v18;
  sub_23C910C5C();
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
}

char *sub_23C8258FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_23C825A70(a1, a2, a3, a4);
}

__n128 sub_23C82595C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 result;

  v13 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  v15 = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa(0, a5, a6, v14);
  v16 = (_QWORD *)(a7 + *(int *)(v15 + 36));
  *v16 = a2;
  v16[1] = a3;
  v17 = a7 + *(int *)(v15 + 40);
  *(_BYTE *)v17 = v13;
  result = *(__n128 *)(a4 + 8);
  *(__n128 *)(v17 + 8) = result;
  return result;
}

uint64_t sub_23C8259F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  result = _s26DatabaseRegionSubscriptionC9ObservingVMa(0, a5, a6, v13);
  v15 = (_QWORD *)(a7 + *(int *)(result + 36));
  *v15 = a2;
  v15[1] = a3;
  *(_QWORD *)(a7 + *(int *)(result + 40)) = a4;
  return result;
}

char *sub_23C825A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[8];
  __int128 v21;

  v18 = a2;
  v19 = a4;
  v7 = *(_QWORD *)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v10 = _s26DatabaseRegionSubscriptionC5StateOMa(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  v14 = *(_BYTE *)a3;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  v15 = *(_QWORD *)(v7 + 112);
  *(_QWORD *)&v4[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  v20[0] = v14;
  v21 = *(_OWORD *)(a3 + 8);
  sub_23C82595C(v19, a1, v18, v20, v8, v9, (uint64_t)v13);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 104)], v13, v10);
  return v4;
}

void sub_23C825B80(uint64_t a1)
{
  sub_23C82637C(a1, (uint64_t)sub_23C825B94, (void (*)(id))sub_23C8285DC);
}

uint64_t sub_23C825B94()
{
  return 0x2874736575716572;
}

uint64_t sub_23C825BB4(char *a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t result;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void (*v60)(__int128 *__return_ptr, _QWORD *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t ObjectType;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v76 = a2;
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v74 = _s26DatabaseRegionSubscriptionC9ObservingVMa(0, v7, v6, a4);
  v72 = *(char **)(v74 - 8);
  v8 = MEMORY[0x24BDAC7A8](v74);
  v75 = (char *)&v69 - v9;
  v73 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v71 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa(0, v7, v6, v11);
  v12 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v14 = (char *)&v69 - v13;
  v16 = _s26DatabaseRegionSubscriptionC5StateOMa(0, v7, v6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v78 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v80 = (uint64_t)&v69 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v69 - v22;
  v24 = &a1[*(_QWORD *)(v5 + 104)];
  swift_beginAccess();
  ObjectType = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v24, v16);
  v79 = v16;
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
      return result;
    v26 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v72 + 4);
    v28 = v74;
    v27 = v75;
    v26(v75, v23, v74);
    v29 = *(int *)(v28 + 40);
    v30 = *(_QWORD *)&v27[v29];
    sub_23C910CA4();
    v31 = sub_23C910C8C();
    v32 = v79;
    v33 = v80;
    if ((v31 & 1) != 0)
      goto LABEL_19;
    sub_23C910CA4();
    v34 = sub_23C910C8C();
    v35 = sub_23C910CA4();
    if ((v34 & 1) != 0)
    {
LABEL_18:
      *(_QWORD *)&v27[v29] = v35;
LABEL_19:
      v26((char *)v33, v27, v28);
      swift_storeEnumTagMultiPayload();
      v68 = ObjectType;
      v67 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(ObjectType + 32))(v78, v33, v32);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v68 + 40))(v24, v67, v32);
      return swift_endAccess();
    }
    v36 = (int64_t)v76;
    result = sub_23C910C8C();
    if ((result & 1) != 0)
    {
LABEL_9:
      v35 = sub_23C910CA4();
      v27 = v75;
      goto LABEL_18;
    }
    if (((v30 | v36) & 0x8000000000000000) == 0)
    {
      v35 = v30 + v36;
      if (!__OFADD__(v30, v36))
      {
        v27 = v75;
        if ((v35 & 0x8000000000000000) == 0)
          goto LABEL_18;
LABEL_23:
        __break(1u);
        return result;
      }
      goto LABEL_9;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v75 = a1;
  v37 = v23;
  v38 = v83;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v37, v83);
  sub_23C910CA4();
  v39 = (uint64_t)v76;
  result = sub_23C910C8C();
  if ((result & 1) == 0)
  {
    if (v39 < 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    if (!v39)
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v38);
  }
  v74 = v12;
  v40 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
  v41 = v7;
  v70 = v7;
  v42 = v7;
  v43 = (uint64_t)v71;
  v44 = v6;
  v40(v71, v14, v42);
  v45 = (uint64_t *)&v14[*(int *)(v38 + 36)];
  v46 = v80;
  sub_23C8259F0(v43, *v45, v45[1], v39, v41, v44, v80);
  v47 = v14;
  v48 = v79;
  swift_storeEnumTagMultiPayload();
  v50 = ObjectType;
  v49 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(ObjectType + 32))(v78, v46, v48);
  swift_beginAccess();
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 40);
  swift_unknownObjectRetain();
  v76 = v51;
  v51(v24, (uint64_t)v49, v48);
  swift_endAccess();
  v52 = *(int *)(v83 + 40);
  v78 = v47;
  v53 = &v47[v52];
  LOBYTE(v49) = *v53;
  v55 = *((_QWORD *)v53 + 1);
  v54 = *((_QWORD *)v53 + 2);
  v56 = v45[1];
  v57 = swift_allocObject();
  v72 = v24;
  v58 = v57;
  swift_weakInit();
  v59 = (_QWORD *)swift_allocObject();
  v59[2] = v70;
  v59[3] = v44;
  v73 = v44;
  v59[4] = v58;
  ObjectType = swift_getObjectType();
  MEMORY[0x24BDAC7A8](ObjectType);
  *((_BYTE *)&v69 - 48) = (_BYTE)v49;
  *(&v69 - 5) = v55;
  *(&v69 - 4) = v54;
  *(&v69 - 3) = (uint64_t)sub_23C82863C;
  *(&v69 - 2) = (uint64_t)v59;
  v60 = *(void (**)(__int128 *__return_ptr, _QWORD *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v56 + 64);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v61 = sub_23C7E79A8(qword_256BCC300);
  v62 = (void *)v81;
  v60(&v82, sub_23C826940, &v69 - 8, v61, ObjectType, v56);
  if (v62)
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v64 = v79;
    v63 = v80;
    swift_storeEnumTagMultiPayload();
    v65 = v72;
    swift_beginAccess();
    v76(v65, v63, v64);
    swift_endAccess();
    *(_QWORD *)&v82 = v62;
    v66 = v78;
    sub_23C910C50();

    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v66, v83);
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    v81 = v82;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v83);
    swift_release();
    *((_OWORD *)v75 + 1) = v81;
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_23C8261BC(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C826368(a1);
    return swift_release();
  }
  return result;
}

void sub_23C826218()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  sub_23C88850C((uint64_t)sub_23C826280, 0, (void (*)(id))sub_23C8285C4);

}

uint64_t sub_23C826280()
{
  return 0x29286C65636E6163;
}

uint64_t sub_23C826298(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v11;

  v5 = _s26DatabaseRegionSubscriptionC5StateOMa(0, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  a1[2] = 0;
  a1[3] = 0;
  swift_unknownObjectRelease();
  swift_storeEnumTagMultiPayload();
  v9 = (char *)a1 + *(_QWORD *)(*a1 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  return swift_endAccess();
}

void sub_23C826368(uint64_t a1)
{
  sub_23C82637C(a1, (uint64_t)sub_23C8263E0, (void (*)(id))sub_23C8285AC);
}

void sub_23C82637C(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v3;
  id v6;

  v6 = *(id *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 112));
  sub_23C88850C(a2, 0, a3);

}

uint64_t sub_23C8263E0()
{
  return 0x2865766965636572;
}

uint64_t sub_23C826400(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v53 = a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 80);
  v7 = *(_QWORD *)(*a1 + 88);
  v8 = _s26DatabaseRegionSubscriptionC5StateOMa(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v50 = (char *)&v46 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)&v46 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - v16;
  v54 = v6;
  v19 = _s26DatabaseRegionSubscriptionC9ObservingVMa(0, v6, v7, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v52 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v46 - v23;
  v25 = (uint64_t)a1 + *(_QWORD *)(v5 + 104);
  swift_beginAccess();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v26(v17, v25, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  v47 = v9;
  v48 = v25;
  v49 = v20;
  v27 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v27(v24, v17, v19);
  v28 = *(_QWORD *)&v24[*(int *)(v19 + 40)];
  v29 = sub_23C910C98();
  sub_23C910CA4();
  v30 = v19;
  if ((sub_23C910C8C() & 1) != 0)
  {
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0)
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v24, v19);
  }
  sub_23C910CA4();
  if ((sub_23C910C8C() & 1) == 0)
  {
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0 || v29 >= v28)
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v24, v19);
  }
  v46 = v27;
  v56 = v53;
  v31 = sub_23C910C68();
  v32 = v55;
  v33 = v8;
  v26(v55, v48, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = v52;
    v46(v52, v32, v30);
    v35 = *(int *)(v30 + 40);
    v36 = *(_QWORD *)&v34[v35];
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) == 0)
    {
      sub_23C910CA4();
      v37 = sub_23C910C8C();
      v38 = sub_23C910CA4();
      if ((v37 & 1) == 0)
      {
        result = sub_23C910C8C();
        if ((result & 1) != 0)
          goto LABEL_14;
        if ((v36 | v31) < 0)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v38 = v36 + v31;
        if (__OFADD__(v36, v31))
        {
LABEL_14:
          v38 = sub_23C910CA4();
        }
        else if (v38 < 0)
        {
LABEL_32:
          __break(1u);
          return result;
        }
      }
      *(_QWORD *)&v34[v35] = v38;
      v36 = v38;
    }
    v40 = v49;
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0)
    {
LABEL_28:
      (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v30);
      v42 = v50;
      v46(v50, v34, v30);
      swift_storeEnumTagMultiPayload();
      v43 = v47;
      v44 = v51;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v51, v42, v33);
      v45 = v48;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 40))(v45, v44, v33);
      return swift_endAccess();
    }
    sub_23C910CA4();
    result = sub_23C910C8C();
    if ((result & 1) != 0)
    {
      v41 = sub_23C910CA4();
LABEL_27:
      *(_QWORD *)&v34[v35] = v41;
      goto LABEL_28;
    }
    if (v36 < 0)
    {
      __break(1u);
    }
    else if (v36)
    {
      v41 = v36 - 1;
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_31;
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v32, v8);
}

uint64_t *sub_23C826818()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  swift_unknownObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = _s26DatabaseRegionSubscriptionC5StateOMa(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);

  return v0;
}

uint64_t sub_23C826884()
{
  sub_23C826818();
  return swift_deallocClassInstance();
}

void sub_23C8268A4(uint64_t a1)
{
  sub_23C825B80(a1);
}

void sub_23C8268C4()
{
  sub_23C826218();
}

uint64_t sub_23C8268E4()
{
  return sub_23C910C44();
}

uint64_t sub_23C826904()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C826928@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23C86890C(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_23C826940@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C828648(a1);
}

uint64_t _s26DatabaseRegionSubscriptionCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s26DatabaseRegionSubscriptionCMn);
}

uint64_t destroy for DatabaseRegionObservation()
{
  return swift_release();
}

uint64_t _s12GRDBInternal25DatabaseRegionObservationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DatabaseRegionObservation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DatabaseRegionObservation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Row.Prefetch(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Row.Prefetch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseRegionObservation()
{
  return &type metadata for DatabaseRegionObservation;
}

uint64_t type metadata accessor for DatabaseRegionObserver()
{
  return objc_opt_self();
}

uint64_t _s14DatabaseRegionVwxx()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _s14DatabaseRegionVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s14DatabaseRegionVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for DatabaseSchemaCache(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14DatabaseRegionVwta(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t _s14DatabaseRegionVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14DatabaseRegionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabasePublishers.DatabaseRegion()
{
  return &type metadata for DatabasePublishers.DatabaseRegion;
}

uint64_t sub_23C826C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = _s26DatabaseRegionSubscriptionC5StateOMa(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s26DatabaseRegionSubscriptionC5StateOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s26DatabaseRegionSubscriptionC5StateOMn);
}

uint64_t sub_23C826D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = _s26DatabaseRegionSubscriptionC9ObservingVMa(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_23C826DC8(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 24;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (v10 | 1) > 0x18)
  {
    v13 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
  }
  else
  {
    v14 = __src[v10];
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      v21 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      v22 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      *(_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v4 + v10) = 1;
      swift_unknownObjectRetain();
      return v4;
    }
    if (v14)
    {
      memcpy(__dst, __src, v10 | 1);
      return v4;
    }
    (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v16 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v17 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v18 = *(_BYTE *)v19;
    v20 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v18 + 16) = v20;
    *((_BYTE *)v4 + v10) = 0;
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

_DWORD *sub_23C826F48(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 24;
  v5 = v3 + 8;
  if (v5 <= v4)
    v5 = v4;
  v6 = v5 & 0xFFFFFFF8;
  v7 = *((unsigned __int8 *)result + v5);
  if (v7 >= 2 && v6 != 0)
    v7 = *result + 2;
  if (v7 == 1)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    return (_DWORD *)swift_unknownObjectRelease();
  }
  else if (!v7)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    swift_unknownObjectRelease();
    return (_DWORD *)swift_release();
  }
  return result;
}

_BYTE *sub_23C827014(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 24;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v18 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v19 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
    swift_unknownObjectRetain();
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v13 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v14 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v15 = *(_BYTE *)v16;
    v17 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v15 + 16) = v17;
    __dst[v10] = 0;
    swift_unknownObjectRetain();
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_23C827158(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 24;
    v10 = v8 + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_unknownObjectRelease();
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_unknownObjectRelease();
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v21 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v22 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      *(_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
      swift_unknownObjectRetain();
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v16 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v17 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v16 = *v17;
      v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
      v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)v18 = *(_BYTE *)v19;
      v20 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 8);
      *(_QWORD *)(v18 + 16) = v20;
      __dst[v11] = 0;
      swift_unknownObjectRetain();
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *sub_23C827338(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 24;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    v18 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v19 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    *(_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    v13 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v14 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_OWORD *)v15;
    v17 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v17 = v16;
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_23C827464(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  _OWORD *v21;
  _OWORD *v22;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 24;
    v10 = v8 + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_unknownObjectRelease();
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_unknownObjectRelease();
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      v21 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v22 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      *(_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      v16 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v17 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v16 = *v17;
      v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
      v19 = *(_OWORD *)v18;
      v20 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v20 = v19;
      __dst[v11] = 0;
    }
  }
  return __dst;
}

uint64_t sub_23C82762C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  v3 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 24;
  v5 = v3 + 8;
  if (v5 <= v4)
    v5 = v4;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v6 = v5 | 1;
  v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v8)
      goto LABEL_20;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    v13 = a1[v5];
    if (v13 >= 3)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 254;
}

void sub_23C82770C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 24;
  v7 = v5 + 8;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 | 1;
  v9 = 8 * (v7 | 1);
  if (a3 < 0xFE)
  {
    v10 = 0;
  }
  else if (v8 <= 3)
  {
    v12 = (a3 + ~(-1 << v9) - 253) >> v9;
    if (v12 > 0xFFFE)
    {
      v10 = 4u;
    }
    else if (v12 >= 0xFF)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 != 0;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v8 < 4)
  {
    v11 &= ~(-1 << v9);
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
    {
      *a1 = v11;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
  }
  *(_DWORD *)a1 = v11;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t sub_23C8278A4(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v3 = v2 + 24;
  v4 = v2 + 8;
  if (v4 <= v3)
    v4 = v3;
  v5 = v4 & 0xFFFFFFF8;
  v6 = *((unsigned __int8 *)a1 + v4);
  if (v6 >= 2 && v5 != 0)
    return (*a1 + 2);
  return v6;
}

void sub_23C8278F4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  size_t v6;
  char v7;
  unsigned int v8;

  v4 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 + 24;
  v6 = v4 + 8;
  if (v6 <= v5)
    v6 = v5;
  if (a2 > 1)
  {
    if ((_DWORD)v6)
      v7 = 2;
    else
      v7 = a2;
    if ((_DWORD)v6)
      v8 = a2 - 2;
    else
      v8 = 0;
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s26DatabaseRegionSubscriptionC16WaitingForDemandVMn);
}

uint64_t _s26DatabaseRegionSubscriptionC9ObservingVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s26DatabaseRegionSubscriptionC9ObservingVMn);
}

uint64_t sub_23C82798C()
{
  return sub_23C827F30();
}

uint64_t *sub_23C82799C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t sub_23C827A6C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_unknownObjectRelease();
}

uint64_t sub_23C827AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_23C827B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7[1] = v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C827BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C827C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  swift_unknownObjectRelease();
  v7[1] = v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C827C9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C827D20 + 4 * byte_23C9146AA[v11]))();
  }
}

void sub_23C827DA0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C827E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t sub_23C827F24()
{
  return sub_23C827F30();
}

uint64_t sub_23C827F30()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23C827FAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v12 = *(_BYTE *)v13;
    v14 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v12 + 16) = v14;
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23C828088(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_23C8280D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *v8;
  v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = v11;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_23C828158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  v12 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 16) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C828200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_23C828274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  swift_unknownObjectRelease();
  v7[1] = v9;
  v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
  swift_release();
  return a1;
}

uint64_t sub_23C828304(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C828388 + 4 * byte_23C9146B9[v11]))();
  }
}

void sub_23C828408(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C8284FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

void sub_23C82858C()
{
  JUMPOUT(0x242626100);
}

void sub_23C82859C()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C8285AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C826400(*(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_23C8285C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  return sub_23C826298(v4, a2, a3, a4);
}

uint64_t sub_23C8285DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C825BB4(*(char **)(v4 + 16), *(void (**)(char *, uint64_t, uint64_t))(v4 + 24), a3, a4);
}

uint64_t sub_23C8285F4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23C828618()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C82863C(uint64_t a1)
{
  return sub_23C8261BC(a1);
}

_QWORD *sub_23C828648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C825470(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 24), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_23C828668(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[5];

  swift_beginAccess();
  v4 = *(_QWORD *)(a2 + 40);
  v7[2] = a1;
  v7[3] = &off_250D84F88;
  swift_bridgeObjectRetain();
  v5 = sub_23C825144((uint64_t (*)(uint64_t *))sub_23C8095BC, (uint64_t)v7, v4);
  result = swift_bridgeObjectRelease();
  if (v5)
  {
    *(_BYTE *)(v5 + 17) = 1;
    swift_retain();
    sub_23C89028C((uint64_t *)(a2 + 48), v5);
    sub_23C8062B0();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C82871C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23C826928(a1, a2);
}

uint64_t ValueObservation.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = (_QWORD *)swift_allocObject();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  v10[2] = v11;
  v10[3] = a4;
  v10[4] = v12;
  v10[5] = a1;
  v10[6] = a2;
  v13 = type metadata accessor for ValueReducers.Map(0, v11, a4, v12);
  swift_retain();
  v14 = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Map<A, B>, v13);
  sub_23C83B78C((uint64_t)sub_23C8288FC, (uint64_t)v10, a3, v13, v14, a5);
  return swift_release();
}

uint64_t sub_23C828824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  sub_23C828918((uint64_t)v14, a2, a3, a4, a5, a6, a7);
  return swift_retain();
}

uint64_t sub_23C8288D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8288FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C828824(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t type metadata accessor for ValueReducers.Map(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueReducers.Map);
}

uint64_t sub_23C828918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = type metadata accessor for ValueReducers.Map(0, a4, a5, a6);
  v14 = (_QWORD *)(a7 + *(int *)(result + 44));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t ValueReducers.Map._fetch(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 24))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ValueReducers.Map._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_23C9114E4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v22 - v14;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v17 = v22;
  v22 = v3;
  v16(v17, v6, v5);
  if (sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = 1;
    v19 = v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
    v20 = v23;
    (*(void (**)(char *))(v22 + *(int *)(a2 + 44)))(v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
    v18 = 0;
    v19 = v20;
  }
  return sub_23C7DE70C(v19, v18, 1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_23C828B30(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Map<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C828B5C(uint64_t a1, uint64_t a2)
{
  return ValueReducers.Map._fetch(_:)(a1, a2);
}

uint64_t sub_23C828B74()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23C828BEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C828C68 + 4 * byte_23C914908[v11]))();
  }
}

void sub_23C828CE8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C828DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

void sub_23C828E6C()
{
  ValueReducers.Auto._fetch(_:)();
}

uint64_t dispatch thunk of _ValueReducer._fetch(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _ValueReducer._value(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

ValueMetadata *type metadata accessor for ValueReducers()
{
  return &type metadata for ValueReducers;
}

ValueMetadata *type metadata accessor for ValueReducers.Auto()
{
  return &type metadata for ValueReducers.Auto;
}

uint64_t sub_23C828EB8(uint64_t a1)
{
  return sub_23C7E0CD0(a1, qword_25430B708, (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C82C3C4);
}

_QWORD *sub_23C828ECC()
{
  return sub_23C828EF0();
}

_QWORD *sub_23C828EF0()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _BYTE v47[168];
  uint64_t v48[10];
  _QWORD v49[23];
  _QWORD v50[25];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_23C7DEF5C();
  v52 = v2;
  v53 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_23C7E0718(v48, v0);
  sub_23C82CD18((uint64_t)v0, v14, v15, v16, v17, v18, v19, v20, v39, v40, v42, v44);
  sub_23C909E74(v48, (uint64_t)v47);
  memcpy(v50, v47, 0xA8uLL);
  sub_23C7DBBB8();
  sub_23C7DB3B8();
  sub_23C82CF94();
  v22 = v21;
  sub_23C7DBCD0();
  sub_23C7DC474();
  LOBYTE(v50[21]) = v9;
  v50[22] = v22;
  memcpy(v49, v50, sizeof(v49));
  sub_23C908C50();
  if (v1)
    return sub_23C811C18(v50);
  v24 = v23;
  v51 = v5;
  type metadata accessor for StatementArgumentsSink();
  sub_23C7DB388();
  swift_retain();
  sub_23C7DF858();
  sub_23C7E0808();
  v25 = sub_23C7E0B8C(0);
  type metadata accessor for SQLGenerationContext();
  swift_initStackObject();
  sub_23C7E30C0(v11, v25, MEMORY[0x24BEE4AF8]);
  sub_23C90AAEC(v26, (uint64_t)v46);
  swift_release();
  *(_QWORD *)(v13 + 56) = 0;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)v13 = v24;
  sub_23C811CFC((uint64_t)v46, v13 + 8);
  sub_23C7F1754(*(_QWORD *)(v13 + 48));
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  sub_23C7DBBB8();
  sub_23C7DB3B8();
  sub_23C82CF94();
  v29 = v28;
  sub_23C7DBCD0();
  sub_23C7DC474();
  sub_23C811C18(v50);
  if (!*(_QWORD *)(v29 + 16))
    return (_QWORD *)swift_bridgeObjectRelease();
  v30 = sub_23C7DB388();
  *(_QWORD *)(v30 + 16) = v29;
  sub_23C7E0718((void *)(v30 + 24), v48);
  v31 = *(_QWORD *)(v13 + 48);
  sub_23C82CD18((uint64_t)v48, v32, v33, v34, v35, v36, v37, v38, v7, v41, v43, v45);
  result = (_QWORD *)sub_23C7E58EC(v31);
  *(_QWORD *)(v13 + 48) = v51;
  *(_QWORD *)(v13 + 56) = v30;
  return result;
}

uint64_t Table.tableName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C7DB3D4();
  return v1;
}

uint64_t Table.tableName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Table.tableName.modify())()
{
  return nullsub_1;
}

uint64_t Table.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Table<A>.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void Table.databaseRegion(_:)()
{
  sub_23C865AF4();
}

void sub_23C8291B8()
{
  Table.databaseRegion(_:)();
}

double sub_23C8291CC@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *v1;
  v3 = v1[1];
  sub_23C7DB3D4();
  v5 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  v7 = v6;
  v9 = v8;
  sub_23C82B8B0();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = sub_23C82B930;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 161) = 1;
  return result;
}

void *Table.all()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  _BYTE __src[168];

  sub_23C82CF84(a1, a2, a3);
  return sub_23C80BC0C(__src, a4);
}

void Table.none()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;

  v9 = sub_23C7EE424(a1, a2, a3, a4, a5, a6, a7, a8, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
                       v62,
                       v65,
                       v68,
                       v71,
                       v74,
                       v77,
                       v80,
                       v83,
                       v86,
                       v89,
                       v92);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
          v63,
          v66,
          v69,
          v72,
          v75,
          v78,
          v81,
          v84,
          v87,
          v90,
          v93);
  v20 = sub_23C7E31F8((uint64_t)v17, *(_QWORD *)(a1 + 16), v18, v19);
  v21 = FilteredRequest.none()(v20, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_23C7DFBDC(v21, v22, v23, v24, v25, v26, v27, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
    v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94);
  sub_23C7E6BBC();
}

uint64_t Table.select(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

#error "23C829350: call analysis failed (funcsize=22)"

void Table.select(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C829A08(a1, a2, a3, a4, &qword_25430D128, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:));
}

void Table.select(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C829B38(a1, a2, &qword_25430D128, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:), a7, a8);
}

#error "23C8293F8: call analysis failed (funcsize=21)"

void Table.select<A>(sql:arguments:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[168];
  _BYTE v32[168];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_23C82CE88();
  Table.all()(v14, v12, v13, v15);
  sub_23C7E0718(v31, v32);
  sub_23C7E79A8(&qword_25430D128);
  v16 = sub_23C7DB388();
  *(_OWORD *)(v16 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v16 + 56) = &type metadata for SQL;
  *(_QWORD *)(v16 + 64) = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v17 = sub_23C7DB388();
  *(_OWORD *)(v17 + 16) = xmmword_23C912A20;
  v33 = v9;
  v34 = v8;
  v35 = v7;
  v36 = v6;
  sub_23C7F96B0(&v33);
  v18 = sub_23C7F96E0(&v33, (void *)(v17 + 32));
  *(_QWORD *)(v16 + 32) = v17;
  v21 = sub_23C7E31F8((uint64_t)v18, *(_QWORD *)(a5 + 16), v19, v20);
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  sub_23C7E0808();
  QueryInterfaceRequest.select<A>(_:as:)(v16, a4, v21, a6);
  sub_23C7E087C();
  sub_23C82C100((uint64_t)v32, v22, v23, v24, v25, v26, v27, v28, 1, 2, v29, a6);
  sub_23C7DBCB0();
}

#error "23C82955C: call analysis failed (funcsize=40)"

uint64_t Table.annotated(with:)(uint64_t a1, uint64_t a2)
{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

void Table.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;

  v10 = sub_23C7E81DC(a1, a2, a3, a4, a5, a6, a7, a8, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                        v63,
                        v66,
                        v69,
                        v72,
                        v75,
                        v78,
                        v81,
                        v84,
                        v87,
                        v90,
                        v93);
  v18 = sub_23C7E4068(v10, v11, v12, v13, v14, v15, v16, v17, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
          v64,
          v67,
          v70,
          v73,
          v76,
          v79,
          v82,
          v85,
          v88,
          v91,
          v94);
  v21 = sub_23C7E31F8((uint64_t)v18, *(_QWORD *)(a2 + 16), v19, v20);
  v22 = FilteredRequest.filter(_:)(a1, v21, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_23C7DFBDC(v22, v23, v24, v25, v26, v27, v28, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95);
  sub_23C7E8D6C();
}

#error "23C82968C: call analysis failed (funcsize=28)"

#error "23C82970C: call analysis failed (funcsize=18)"

#error "23C829750: call analysis failed (funcsize=10)"

void Table.filter(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C829774(a1, a2, (uint64_t (*)(uint64_t))TableRequest<>.filter(key:), a4, a5, a6, a7, a8);
}

void Table.filter(keys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C829774(a1, a2, (uint64_t (*)(uint64_t))TableRequest<>.filter(keys:), a4, a5, a6, a7, a8);
}

void sub_23C829774(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;

  v10 = sub_23C7E81DC(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94);
  v18 = sub_23C7E4068(v10, v11, v12, v13, v14, v15, v16, v17, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92,
          v95);
  v21 = sub_23C7E31F8((uint64_t)v18, *(_QWORD *)(a2 + 16), v19, v20);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v21);
  v22 = sub_23C7E9AB8();
  v23 = a3(v22);
  sub_23C7DFBDC(v23, v24, v25, v26, v27, v28, v29, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
  sub_23C7DD13C();
}

uint64_t Table.filter(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[7];
  _QWORD v20[23];

  v8 = *a3;
  v9 = a3[1];
  v10 = v4[1];
  v19[5] = *v4;
  v19[6] = v10;
  v19[3] = &type metadata for SQL;
  v19[4] = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v20[0] = a1;
  v20[1] = a2;
  v20[2] = v8;
  v20[3] = v9;
  sub_23C7F96B0(v20);
  sub_23C7F96E0(v20, (void *)(v11 + 32));
  v19[0] = v11;
  sub_23C7DBCC8();
  sub_23C7DBBB0();
  sub_23C7DBBB8();
  Table.filter(_:)((uint64_t)v19, a4, v12, v13, v14, v15, v16, v17);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
}

void Table.filter(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[5];
  _QWORD v20[21];
  _BYTE v21[168];

  v5 = *a1;
  v6 = v3[1];
  v20[0] = *v3;
  v20[1] = v6;
  sub_23C7EDDC4(a2, a3, v21);
  v7 = sub_23C7E0718(v20, v21);
  v19[3] = (uint64_t)&type metadata for SQL;
  v19[4] = (uint64_t)&protocol witness table for SQL;
  v19[0] = v5;
  v10 = sub_23C7E31F8((uint64_t)v7, *(_QWORD *)(a2 + 16), v8, v9);
  sub_23C7DBCC8();
  FilteredRequest.filter(_:)((uint64_t)v19, v10, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_23C82C100((uint64_t)v21, v11, v12, v13, v14, v15, v16, v17, v18, v19[0], v19[1], v19[2]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
  sub_23C7EF914();
}

uint64_t Table.order(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

{
  return sub_23C829328(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

void Table.orderByPrimaryKey()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;

  v9 = sub_23C7EE424(a1, a2, a3, a4, a5, a6, a7, a8, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58,
                       v61,
                       v64,
                       v67,
                       v70,
                       v73,
                       v76,
                       v79,
                       v82,
                       v85,
                       v88,
                       v91);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
          v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92);
  sub_23C7E31F8((uint64_t)v17, *(_QWORD *)(a1 + 16), v18, v19);
  v20 = TableRequest<>.orderByPrimaryKey()();
  sub_23C7DFBDC(v20, v21, v22, v23, v24, v25, v26, v27, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
    v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93);
  sub_23C7E6BBC();
}

void Table.order(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C829A08(a1, a2, a3, a4, &qword_256BCBC78, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:));
}

void sub_23C829A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[168];
  _BYTE v36[168];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_23C82CE88();
  Table.all()(v18, v16, v17, v19);
  sub_23C7E0718(v35, v36);
  sub_23C7E79A8(a5);
  v20 = sub_23C7DB388();
  *(_OWORD *)(v20 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v20 + 56) = &type metadata for SQL;
  *(_QWORD *)(v20 + 64) = a6;
  sub_23C7E79A8(&qword_25430DA08);
  v21 = sub_23C7DB388();
  *(_OWORD *)(v21 + 16) = xmmword_23C912A20;
  v37 = v11;
  v38 = v10;
  v39 = v9;
  v40 = v8;
  sub_23C7F96B0(&v37);
  v22 = sub_23C7F96E0(&v37, (void *)(v21 + 32));
  *(_QWORD *)(v20 + 32) = v21;
  v25 = sub_23C7E31F8((uint64_t)v22, *(_QWORD *)(a4 + 16), v23, v24);
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  sub_23C7E0808();
  a8(v20, v25, a7);
  sub_23C7E087C();
  sub_23C82C100((uint64_t)v36, v26, v27, v28, v29, v30, v31, v32, 1, 2, v33, (uint64_t)a8);
  sub_23C7DBCB0();
}

void Table.order(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C829B38(a1, a2, &qword_256BCBC78, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:), a7, a8);
}

void sub_23C829B38(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  char v99;

  v13 = *a1;
  v14 = sub_23C7E81DC((uint64_t)a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94,
                        v97);
  sub_23C7E4068(v14, v15, v16, v17, v18, v19, v20, v21, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98);
  sub_23C7E79A8(a3);
  v22 = sub_23C7DB388();
  *(_OWORD *)(v22 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v22 + 56) = &type metadata for SQL;
  *(_QWORD *)(v22 + 64) = a4;
  *(_QWORD *)(v22 + 32) = v13;
  v25 = sub_23C7E31F8(v22, *(_QWORD *)(a2 + 16), v23, v24);
  sub_23C7DB3B8();
  a6(v22, v25, a5);
  v26 = swift_bridgeObjectRelease();
  sub_23C7DFBDC(v26, v27, v28, v29, v30, v31, v32, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63, v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96,
    v99);
}

#error "23C829C34: call analysis failed (funcsize=23)"

void Table.aliased(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;

  v11 = sub_23C7E81DC(a1, a2, a3, a4, a5, a6, a7, a8, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
                        v63,
                        v66,
                        v69,
                        v72,
                        v75,
                        v78,
                        v81,
                        v84,
                        v87,
                        v90,
                        v93);
  v19 = sub_23C7E4068(v11, v12, v13, v14, v15, v16, v17, v18, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
          v64,
          v67,
          v70,
          v73,
          v76,
          v79,
          v82,
          v85,
          v88,
          v91,
          v94);
  sub_23C7E31F8((uint64_t)v19, *(_QWORD *)(a2 + 16), v20, v21);
  sub_23C82D0C8();
  QueryInterfaceRequest.aliased(_:)(a9);
  sub_23C7DFBDC(v22, v23, v24, v25, v26, v27, v28, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95);
  sub_23C7E8D6C();
}

void Table.with<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[24];
  _QWORD v18[21];
  _BYTE v19[168];

  sub_23C7EF7B0();
  sub_23C82D05C(v17, v3);
  v4 = v0[1];
  v18[0] = *v0;
  v18[1] = v4;
  Table.all()(v1, v5, v6, v19);
  v7 = sub_23C7E0718(v18, v19);
  sub_23C7E31F8((uint64_t)v7, *(_QWORD *)(v1 + 16), v8, v9);
  QueryInterfaceRequest.with<A>(_:)(v17, v2);
  sub_23C82C100((uint64_t)v19, v10, v11, v12, v13, v14, v15, v16, v17[0], v17[1], v17[2], v17[3]);
}

#error "23C829D5C: call analysis failed (funcsize=28)"

void Table<A>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[21];
  _BYTE v10[168];

  v5 = v3[1];
  v9[0] = *v3;
  v9[1] = v5;
  sub_23C7EDDC4(a2, a3, v10);
  v6 = sub_23C7E0718(v9, v10);
  sub_23C7E31F8((uint64_t)v6, *(_QWORD *)(a2 + 16), v7, v8);
  sub_23C82D110();
}

#error "23C829E60: call analysis failed (funcsize=16)"

void Table<A>.selectID()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;

  v13 = sub_23C7EE424(a1, a2, a3, a4, a5, a6, a7, a8, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
                        v66,
                        v69,
                        v72,
                        v75,
                        v78,
                        v81,
                        v84,
                        v87,
                        v90,
                        v93,
                        v96);
  v21 = sub_23C7E4068(v13, v14, v15, v16, v17, v18, v19, v20, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61, v64,
          v67,
          v70,
          v73,
          v76,
          v79,
          v82,
          v85,
          v88,
          v91,
          v94,
          v97);
  v24 = sub_23C7E31F8((uint64_t)v21, *(_QWORD *)(a1 + 16), v22, v23);
  QueryInterfaceRequest<A>.selectID()(v24, a2, a3, a9);
  sub_23C7DFBDC(v25, v26, v27, v28, v29, v30, v31, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62, v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v98);
  sub_23C7DD13C();
}

#error "23C829EF0: call analysis failed (funcsize=18)"

#error "23C829F44: call analysis failed (funcsize=14)"

void Table<A>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[168];

  v15 = v7[1];
  v28 = *v7;
  v29 = v15;
  sub_23C7EDDC4(a2, a3, v30);
  v16 = sub_23C7E0718(&v28, v30);
  v19 = sub_23C7E31F8((uint64_t)v16, *(_QWORD *)(a2 + 16), v17, v18);
  v20 = MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v19);
  TableRequest<>.filter<A>(ids:)(a1, v19, a3, &protocol witness table for QueryInterfaceRequest<A>, &protocol witness table for QueryInterfaceRequest<A>, v20, a5, a4);
  sub_23C82C100((uint64_t)v30, v21, v22, v23, v24, v25, v26, v27, a7, a6, v28, v29);
  sub_23C7DEEE4();
}

#error "23C82A03C: call analysis failed (funcsize=23)"

uint64_t Table.fetchCount(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C82AD10(a1, a2, (uint64_t (*)(uint64_t))QueryInterfaceRequest.fetchCount(_:), a4, a5, a6, a7, a8);
}

void Table<A>.fetchCursor(_:)()
{
  sub_23C82A0C4();
}

{
  sub_23C82A0C4();
}

{
  sub_23C82A38C();
}

{
  sub_23C82A38C();
}

void Table<A>.fetchAll(_:)()
{
  sub_23C82A0C4();
}

{
  sub_23C82A0C4();
}

{
  sub_23C82A38C();
}

{
  sub_23C82A38C();
}

void sub_23C82A0C4()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;

  sub_23C82CFA4();
  v10 = sub_23C7E81DC(v2, v3, v4, v5, v6, v7, v8, v9, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94);
  v18 = sub_23C7E4068(v10, v11, v12, v13, v14, v15, v16, v17, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92,
          v95);
  v21 = sub_23C7E31F8((uint64_t)v18, *(_QWORD *)(v1 + 16), v19, v20);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v21);
  sub_23C82CFBC();
  v22 = sub_23C82D040();
  v23 = v0(v22);
  sub_23C7EC624(v23, v24, v25, v26, v27, v28, v29, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
  sub_23C7E690C();
  sub_23C7E3214();
}

void Table<A>.fetchOne(_:)()
{
  sub_23C82A2F0();
}

{
  sub_23C82A2F0();
}

void Table<A>.fetchSet(_:)()
{
  sub_23C82A38C();
}

{
  sub_23C82A38C();
}

void Table<A>.fetchCursor(_:)(uint64_t a1)
{
  sub_23C82A198(a1, (void (*)(uint64_t, uint64_t *))sub_23C82B95C);
}

void Table<A>.fetchAll(_:)(uint64_t a1)
{
  sub_23C82A198(a1, (void (*)(uint64_t, uint64_t *))sub_23C82BBE8);
}

void sub_23C82A198(uint64_t a1, void (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[21];
  _QWORD v23[8];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;

  v6 = *v2;
  v5 = v2[1];
  sub_23C7DB3D4();
  v7 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  v9 = v8;
  v11 = v10;
  sub_23C82B8B0();
  v23[0] = v6;
  v23[1] = v5;
  v23[2] = 0;
  v23[3] = sub_23C82B930;
  memset(&v23[4], 0, 24);
  v23[7] = v7;
  v24 = 0;
  v25 = v9;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = 1;
  sub_23C7E0718(v22, v23);
  a2(a1, v22);
  sub_23C82D00C();
  sub_23C82C100((uint64_t)v23, v14, v15, v16, v17, v18, v19, v20, v21, v22[0], v22[1], v22[2]);
  sub_23C7E690C();
  sub_23C7E2074();
}

void Table<A>.fetchOne(_:)(uint64_t a1)
{
  sub_23C82A198(a1, (void (*)(uint64_t, uint64_t *))sub_23C82BF4C);
}

void Table<A>.fetchSet(_:)(uint64_t a1)
{
  sub_23C82A198(a1, (void (*)(uint64_t, uint64_t *))sub_23C82BCBC);
}

void sub_23C82A2F0()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;

  sub_23C82CFA4();
  v10 = sub_23C7E81DC(v2, v3, v4, v5, v6, v7, v8, v9, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94);
  v18 = sub_23C7E4068(v10, v11, v12, v13, v14, v15, v16, v17, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92,
          v95);
  v21 = sub_23C7E31F8((uint64_t)v18, *(_QWORD *)(v1 + 16), v19, v20);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v21);
  sub_23C82CFBC();
  v22 = sub_23C82D040();
  v23 = v0(v22);
  sub_23C7DFBDC(v23, v24, v25, v26, v27, v28, v29, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
}

void sub_23C82A38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  sub_23C7EF9B8();
  v9 = sub_23C7E81DC(v1, v2, v3, v4, v5, v6, v7, v8, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
          v43,
          v45,
          v47,
          v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63);
  sub_23C7E31F8((uint64_t)v17, *(_QWORD *)(v0 + 16), v18, v19);
  sub_23C82D0D4();
}

uint64_t sub_23C82A3CC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  sub_23C82CFBC();
  v3 = v0(v2, v1);
  sub_23C7EC624(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33);
  return sub_23C7E690C();
}

void Table<A>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82A4D4(a1, a2, a3, a4, FetchRequest<>.fetchOne(_:));
}

{
  sub_23C82A4D4(a1, a2, a3, a4, FetchRequest<>.fetchOne(_:));
}

uint64_t Table<A>.fetchSet(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C82A54C(a1, a2, a3, a4, a5, FetchRequest<>.fetchSet(_:));
}

{
  return sub_23C82A54C(a1, a2, a3, a4, a5, FetchRequest<>.fetchSet(_:));
}

#error "23C82A4F0: call analysis failed (funcsize=14)"

#error "23C82A520: call analysis failed (funcsize=8)"

#error "23C82A57C: call analysis failed (funcsize=28)"

uint64_t Table<A>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C82A54C(a1, a2, a3, a4, a5, FetchRequest<>.fetchCursor(_:));
}

uint64_t Table<A>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23C82A54C(a1, a2, a3, a4, a5, FetchRequest<>.fetchAll(_:));
}

#error "23C82A61C: call analysis failed (funcsize=16)"

#error "23C82A650: call analysis failed (funcsize=9)"

#error "23C82A684: call analysis failed (funcsize=26)"

uint64_t Table.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C82A6F0(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C8BB7F0);
}

uint64_t Table.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C82A6F0(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C801CD8);
}

uint64_t Table.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C82A6F0(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C8BBA20);
}

uint64_t sub_23C82A6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  _QWORD v17[2];
  _BYTE v18[168];

  v13 = *a4;
  v14 = a4[1];
  v15 = sub_23C7F92B4(a6, a7, (uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a8(v18, a2, a3, v17, *(_QWORD *)(a5 + 16), a6, v15);
  sub_23C7DBCC8();
  return sub_23C7DE9B8(v13);
}

uint64_t Table.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_23C82A798(a1, a2, a3, a4, a5, a6, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C8BB7F0);
}

uint64_t Table.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_23C82A798(a1, a2, a3, a4, a5, a6, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C801CD8);
}

uint64_t Table.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_23C82A798(a1, a2, a3, a4, a5, a6, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))sub_23C8BBA20);
}

uint64_t sub_23C82A798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(_BYTE *, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, double))
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  _QWORD v16[2];
  _BYTE v17[168];

  v12 = *a4;
  v13 = a4[1];
  v14 = sub_23C82CF84(a1, a2, a3);
  v16[0] = v12;
  v16[1] = v13;
  a7(v17, a2, a3, v16, *(_QWORD *)(a5 + 16), a6, v14);
  sub_23C7E0808();
  return sub_23C7DE9B8(v12);
}

uint64_t Table.association<A>(to:on:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 *v21;
  uint64_t v23;
  uint64_t (*v24)@<X0>(uint64_t@<X8>);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v7 = sub_23C82D05C(&v24, a1);
  v11 = sub_23C7E256C((uint64_t)v7, v8, v9, v10);
  sub_23C7DEF9C(v11, v12, v13, v14, v15, v16, v17, v18, v23, (uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v32, v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48);
  v19 = sub_23C7DB388();
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v24 = sub_23C82C0F8;
  v25 = v19;
  sub_23C82CF44();
  sub_23C87F40C(v20, v21, a4);
  return swift_retain();
}

uint64_t sub_23C82A8A8@<X0>(void (*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[21];

  a1(v6);
  v3 = v7;
  v4 = v8;
  sub_23C7E7E34(v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  nullsub_1(v9);
  sub_23C82CBCC((uint64_t)v9, a2, &qword_25430CF58);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t Table.association<A>(to:)()
{
  uint64_t *v0;
  const void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 *v15;
  uint64_t v17;
  void (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  sub_23C7EF7B0();
  v2 = sub_23C82D05C(&v18, v1);
  v6 = sub_23C7E256C((uint64_t)v2, v3, v4, v5);
  sub_23C7DEF9C(v6, v7, v8, v9, v10, v11, v12, v13, v17, (uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42);
  v18 = sub_23C861AF0;
  v19 = 0;
  sub_23C82CF44();
  return sub_23C87F40C(v14, v15, v0);
}

#error "23C82A9B0: call analysis failed (funcsize=28)"

#error "23C82AA44: call analysis failed (funcsize=30)"

void Table.including<A>(all:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AAD4(a1, a2, a3, a4, JoinableRequest.including<A>(all:));
}

void Table.including<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AAD4(a1, a2, a3, a4, JoinableRequest.including<A>(optional:));
}

#error "23C82AB00: call analysis failed (funcsize=18)"

#error "23C82AB30: call analysis failed (funcsize=7)"

void Table.including<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AAD4(a1, a2, a3, a4, JoinableRequest.including<A>(required:));
}

void Table.joining<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AAD4(a1, a2, a3, a4, JoinableRequest.joining<A>(optional:));
}

void Table.joining<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AAD4(a1, a2, a3, a4, JoinableRequest.joining<A>(required:));
}

void Table.annotated<A>(withOptional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AB78(a1, a2, a3, a4, JoinableRequest<>.annotated<A>(withOptional:));
}

void Table.annotated<A>(withRequired:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C82AB78(a1, a2, a3, a4, JoinableRequest<>.annotated<A>(withRequired:));
}

#error "23C82ABA4: call analysis failed (funcsize=18)"

#error "23C82ABDC: call analysis failed (funcsize=8)"

void _s12GRDBInternal5TableV9annotated4withAA21QueryInterfaceRequestVyxGAA20AssociationAggregateVyxGd_tF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;

  v9 = sub_23C7E81DC(a1, a2, a3, a4, a5, a6, a7, a8, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
                       v62,
                       v65,
                       v68,
                       v71,
                       v74,
                       v77,
                       v80,
                       v83,
                       v86,
                       v89,
                       v92);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
          v63,
          v66,
          v69,
          v72,
          v75,
          v78,
          v81,
          v84,
          v87,
          v90,
          v93);
  v20 = sub_23C7E31F8((uint64_t)v17, *(_QWORD *)(a2 + 16), v18, v19);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v20);
  sub_23C82CFBC();
  DerivableRequest.annotated(with:)();
  sub_23C7DFBDC(v21, v22, v23, v24, v25, v26, v27, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
    v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91,
    v94);
  sub_23C7E8D6C();
}

void Table.having(_:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[21];
  _BYTE v20[168];

  v17 = *a1;
  v5 = v3[1];
  v19[0] = *v3;
  v19[1] = v5;
  sub_23C7EDDC4(a2, a3, v20);
  v6 = sub_23C7E0718(v19, v20);
  v9 = sub_23C7E31F8((uint64_t)v6, *(_QWORD *)(a2 + 16), v7, v8);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v9);
  DerivableRequest.having(_:)();
  sub_23C82C100((uint64_t)v20, v10, v11, v12, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, v17);
  sub_23C7EF914();
}

uint64_t Table.deleteAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C82AD10(a1, a2, (uint64_t (*)(uint64_t))QueryInterfaceRequest.deleteAll(_:), a4, a5, a6, a7, a8);
}

uint64_t sub_23C82AD10(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;

  v11 = sub_23C7E81DC(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94);
  v19 = sub_23C7E4068(v11, v12, v13, v14, v15, v16, v17, v18, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
          v65,
          v68,
          v71,
          v74,
          v77,
          v80,
          v83,
          v86,
          v89,
          v92,
          v95);
  sub_23C7E31F8((uint64_t)v19, *(_QWORD *)(a2 + 16), v20, v21);
  sub_23C82D0C8();
  v22 = a3(a1);
  sub_23C7EC624(v22, v23, v24, v25, v26, v27, v28, v29, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
  return sub_23C7E690C();
}

void Table.exists<A>(_:key:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[21];
  uint64_t v32;

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v28 = v9;
  v10 = sub_23C7E2560();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - v12;
  v14 = v0[1];
  v29 = *v0;
  v30 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))((char *)&v27 - v12, v8, v4);
  sub_23C7DE70C((uint64_t)v13, 0, 1, v4);
  Table.filter<A>(key:)(v31, v13, v6, v4, v2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_23C7E0718(&v32, v31);
  v15 = sub_23C7E0718(&v29, v31);
  v18 = sub_23C7E31F8((uint64_t)v15, *(_QWORD *)(v6 + 16), v16, v17);
  v19 = QueryInterfaceRequest.isEmpty(_:)(v28, v18);
  sub_23C82D0B4(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  sub_23C7DEF28();
}

void Table<A>.exists(_:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;

  v3 = sub_23C7E5E30(a1, a2);
  v4 = Table<A>.filter(id:)(v3);
  v12 = sub_23C7E4068(v4, v5, v6, v7, v8, v9, v10, v11, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44,
          v46,
          v48,
          v50,
          v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66);
  v15 = sub_23C7E31F8((uint64_t)v12, *(_QWORD *)(v2 + 16), v13, v14);
  v16 = sub_23C7E3200(v15);
  sub_23C7EC624(v16, v17, v18, v19, v20, v21, v22, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67);
  sub_23C7E68F4();
  sub_23C7E6228();
}

{
  uint64_t v2;

  v2 = sub_23C7E5E30(a1, a2);
  Table<A>.filter(id:)(v2);
}

#error "23C82AF04: call analysis failed (funcsize=9)"

void Table.exists(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;

  v33 = *v3;
  v35 = v3[1];
  v5 = sub_23C82D0DC(a1, a2);
  Table.filter(key:)(v5, v6, v7, v8, v9, v10, v11, v12);
  v21 = sub_23C7E4068(v13, v14, v15, v16, v17, v18, v19, v20, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51, v53,
          v55,
          v57,
          v59,
          v61,
          v63,
          v65,
          v67,
          v69,
          v71,
          v73,
          v75);
  v24 = sub_23C7E31F8((uint64_t)v21, *(_QWORD *)(a3 + 16), v22, v23);
  v25 = sub_23C7E3200(v24);
  sub_23C7EC624(v25, v26, v27, v28, v29, v30, v31, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50, v52, v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v72,
    v74,
    v76);
  sub_23C7E68F4();
  sub_23C7E6228();
}

void Table.deleteAll<A>(_:keys:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[66];

  sub_23C7DEF5C();
  v4[1] = v0;
  MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *))(v3 + 16))((char *)v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getAssociatedTypeWitness();
  v4[44] = sub_23C9111B4();
  sub_23C82CF60();
  sub_23C82D004();
}

uint64_t sub_23C82B048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((sub_23C911364() & 1) == 0)
  {
    *(_QWORD *)(v4 - 256) = v1;
    *(_QWORD *)(v4 - 248) = v2;
    *(_QWORD *)(v0 + 16) = v3;
    sub_23C82D004();
  }
  sub_23C7DBCD0();
  return 0;
}

void Table.deleteOne<A>(_:key:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7DEF5C();
  v20[2] = v2;
  v21 = v1;
  v4 = v3;
  v20[0] = v5;
  v20[1] = v6;
  v8 = v7;
  v9 = sub_23C7E2560();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v20 - v12;
  v14 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v0;
  v18 = v0[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v8, v9);
  if (sub_23C7DE718((uint64_t)v13, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v4);
    v22 = v17;
    v23 = v18;
    sub_23C894358(v4, v4);
    sub_23C7E980C();
    sub_23C82D054();
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v19, v16, v4);
    sub_23C8909A4();
    sub_23C91119C();
    sub_23C82D004();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_23C7DEF28();
}

void Table<A>.deleteAll<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_23C82CFD4() & 1) == 0)
    Table<A>.filter<A>(ids:)(a2, a3, a4);
  sub_23C7E7E20();
  sub_23C7E2074();
}

void Table<A>.deleteOne(_:id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7DF87C();
  v2 = v1;
  v3 = sub_23C82D0F0();
  sub_23C82D034(v3);
  v4 = *(_QWORD *)(v0 - 8);
  sub_23C7E980C();
  sub_23C82D054();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v2, v0);
  sub_23C8909A4();
  sub_23C82CF60();
  sub_23C82D004();
}

BOOL sub_23C82B414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Table<A>.deleteAll<A>(_:ids:)(v1, (uint64_t)&v4, v0, v2);
  sub_23C82D00C();
  sub_23C7DBCD0();
  return sub_23C82CFF4();
}

uint64_t Table<A>.deleteAll<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v31[21];
  _BYTE v32[176];
  uint64_t v33;

  v33 = a1;
  v13 = *v8;
  v14 = v8[1];
  if ((sub_23C82CFD4() & 1) == 0)
  {
    v31[0] = v13;
    v31[1] = v14;
    v15 = sub_23C82CFC8();
    Table<A>.filter<A>(ids:)(v15, v16, a4, a5, a6, a7, a8);
    v17 = sub_23C7E0718(v31, v32);
    sub_23C7E31F8((uint64_t)v17, *(_QWORD *)(a3 + 16), v18, v19);
    sub_23C82D078();
    sub_23C7E2090();
    sub_23C82C100((uint64_t)v32, v20, v21, v22, v23, v24, v25, v26, v28, a7, a8, v31[0]);
  }
  return sub_23C7E7E20();
}

BOOL Table<A>.deleteOne(_:id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_23C7EBC28();
  v6 = v5;
  v8 = v7;
  swift_getAssociatedTypeWitness();
  v9 = sub_23C82D0F0();
  sub_23C82D034(v9);
  v10 = *(_QWORD *)(v0 - 8);
  sub_23C7E980C();
  v11 = sub_23C82D054();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v6, v0);
  sub_23C8909A4();
  v16 = v11;
  v13 = sub_23C82CF60();
  v14 = MEMORY[0x242626100](MEMORY[0x24BEE12E0], v13);
  Table<A>.deleteAll<A>(_:ids:)(v8, (uint64_t)&v16, v4, v13, v3, v14, v2, v1);
  sub_23C82D00C();
  swift_bridgeObjectRelease();
  return sub_23C82CFF4();
}

uint64_t Table.deleteAll(_:keys:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;

  if (*(_QWORD *)(a2 + 16))
  {
    v33 = *v3;
    v35 = v3[1];
    v5 = sub_23C82D0DC(a1, a2);
    Table.filter(keys:)(v5, v6, v7, v8, v9, v10, v11, v12);
    v21 = sub_23C7E4068(v13, v14, v15, v16, v17, v18, v19, v20, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51, v53,
            v55,
            v57,
            v59,
            v61,
            v63,
            v65,
            v67,
            v69,
            v71,
            v73,
            v75);
    sub_23C7E31F8((uint64_t)v21, *(_QWORD *)(a3 + 16), v22, v23);
    sub_23C82D0C8();
    sub_23C82D078();
    sub_23C7E2090();
    sub_23C7DFBDC(v24, v25, v26, v27, v28, v29, v30, v31, v34, v36, v38, v40, v42, v44, v46, v48, v50, v52, v54,
      v56,
      v58,
      v60,
      v62,
      v64,
      v66,
      v68,
      v70,
      v72,
      v74,
      v76);
  }
  return sub_23C7E7E20();
}

BOOL Table.deleteOne(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7E79A8(&qword_256BCC588);
  v6 = sub_23C7DB388();
  *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v6 + 32) = a2;
  sub_23C7E0808();
  Table.deleteAll(_:keys:)(a1, v6, a3);
  sub_23C82D00C();
  sub_23C7DC474();
  return sub_23C82CFF4();
}

void Table.updateAll(_:onConflict:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned __int8 v76;

  v7 = *a2;
  v8 = sub_23C82D0FC(a1, (uint64_t)a2, a3, a4);
  v12 = Table.all()(v8, v9, v10, v11);
  v20 = sub_23C7E4068(v12, v13, v14, v15, v16, v17, v18, v19, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50, v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70,
          v72,
          v74);
  v76 = v7;
  v23 = sub_23C7E31F8((uint64_t)v20, *(_QWORD *)(a4 + 16), v21, v22);
  v24 = QueryInterfaceRequest.updateAll(_:onConflict:_:)(a1, &v76, a3, v23);
  sub_23C7EC624(v24, v25, v26, v27, v28, v29, v30, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51, v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73,
    v75);
  sub_23C7E690C();
  sub_23C7E3214();
}

uint64_t Table.updateAll(_:onConflict:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t inited;
  unsigned __int8 v7;

  sub_23C7DF87C();
  v3 = v2;
  v7 = *v4;
  sub_23C7E79A8(&qword_25430AF38);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  sub_23C811FD0(v1, inited + 32);
  sub_23C7E0808();
  sub_23C7FB44C();
  Table.updateAll(_:onConflict:_:)(v3, &v7, inited, v0);
  sub_23C82D00C();
  sub_23C7DB398();
  return sub_23C7E690C();
}

void sub_23C82B8B0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23C82D018();
  v3 = v2;
  if (*(_QWORD *)(v2 + 16))
  {
    sub_23C7E670C();
    v4 = v3 + 40;
    do
    {
      sub_23C7ECBBC();
      if (v0 >= v1 >> 1)
        sub_23C7E8DF8();
      v4 += 232;
      sub_23C7DF5E4();
    }
    while (!v5);
  }
  sub_23C82D0C0(v2, &qword_256BCC5A8, (void (*)(uint64_t, uint64_t, uint64_t *))sub_23C82C6EC);
  sub_23C7E1768();
}

void *sub_23C82B930@<X0>(_QWORD *a1@<X8>)
{
  void *result;

  result = sub_23C85C404();
  *a1 = result;
  return result;
}

uint64_t sub_23C82B95C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for Row();
  sub_23C828EF0();
  if (v2)
    return a2;
  v4 = v12;
  if (!v12)
  {
    sub_23C7F5610(0);
    sub_23C7F1754(0);
    v9[0] = 0;
    v9[1] = 0;
    v5 = swift_retain();
    a2 = static Row.fetchCursor(_:arguments:adapter:)(v5, v9, (uint64_t)&v11);
    sub_23C812C40((uint64_t)&v10);
    swift_release();
    return a2;
  }
  v7 = v13;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v7;
  sub_23C7F5610(v4);
  result = sub_23C7F1754((uint64_t)sub_23C82CE38);
  __break(1u);
  return result;
}

uint64_t sub_23C82BA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C7DBBD8(a1, a2, a3);
  if (v3)
    return sub_23C7E7E20();
  if (!v11)
  {
    sub_23C7F5610(0);
    sub_23C7F1754(0);
    swift_retain();
    sub_23C82CECC();
    v7 = static Row.fetchCursor(_:arguments:adapter:)(v4, v5, v6);
    sub_23C7EDB70(v7, v8, 0, 0);
    swift_release();
    return sub_23C7E7E20();
  }
  v10 = sub_23C7DB388();
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v12;
  sub_23C7F5610(v11);
  result = sub_23C7F1754((uint64_t)sub_23C82CA7C);
  __break(1u);
  return result;
}

void sub_23C82BB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7DBBD8(a1, a2, a3);
  if (!v3)
  {
    sub_23C7E9B10();
    sub_23C82CECC();
    static Row.fetchAll(_:arguments:adapter:)(v4, v5, v6);
    v7 = sub_23C7DC4C4();
    if (v11)
    {
      sub_23C82D094();
      v9 = sub_23C82D070();
      sub_23C7EDB70(v9, v10);
      sub_23C82D064();
    }
    else
    {
      sub_23C7EDB70(v7, v8);
    }
  }
  sub_23C7E771C();
}

void sub_23C82BBE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  type metadata accessor for Row();
  sub_23C828EF0();
  if (!v0)
  {
    v1 = sub_23C7E9B10();
    static Row.fetchAll(_:arguments:adapter:)(v1, &v6, 0);
    v2 = sub_23C7DC4C4();
    if (v7)
    {
      sub_23C82D094();
      sub_23C82CFC8();
      v4 = sub_23C82D070();
      sub_23C7EDB70(v4, v5);
      sub_23C82D064();
    }
    else
    {
      sub_23C7EDB70(v2, v3);
    }
  }
  sub_23C7E771C();
}

uint64_t sub_23C82BCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  void (*v16)(uint64_t, unint64_t);

  type metadata accessor for Row();
  sub_23C828EF0();
  if (!v2)
  {
    v5 = v16;
    v13 = 0uLL;
    if (v16)
    {
      sub_23C7F5610((uint64_t)v16);
      v6 = swift_retain();
      static Row.fetchAll(_:arguments:adapter:)(v6, &v13, (uint64_t)v15);
      v10 = v9;
      swift_release();
      v5(a1, v10);
      sub_23C7F72A8(v10);
      a2 = v12;
      sub_23C7F1754((uint64_t)v5);
      sub_23C812C40((uint64_t)&v14);
    }
    else
    {
      v7 = swift_retain();
      static Row.fetchSet(_:arguments:adapter:)(v7, &v13, (uint64_t)v15);
      a2 = v8;
      sub_23C812C40((uint64_t)&v14);
      swift_release();
    }
  }
  return a2;
}

void sub_23C82BE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, unint64_t);

  sub_23C7DBBD8(a1, a2, a3);
  if (!v3)
  {
    if (v18)
    {
      v5 = sub_23C82CFC8();
      sub_23C7F5610(v5);
      swift_retain();
      sub_23C82D0A0();
      static Row.fetchAll(_:arguments:adapter:)(v6, v7, v8);
      v15 = v14;
      sub_23C7DC4C4();
      v18(a1, v15);
      sub_23C7F72A8(v15);
      v16 = sub_23C7E58EC((uint64_t)v18);
      sub_23C7EDB70(v16, v17, 0, 0);
    }
    else
    {
      swift_retain();
      sub_23C82D0A0();
      static Row.fetchSet(_:arguments:adapter:)(v9, v10, v11);
      sub_23C7EDB70(v12, v13, 0, 0);
      sub_23C7DC4C4();
    }
  }
  sub_23C7E7E20();
  sub_23C7E0864();
}

uint64_t sub_23C82BF4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v3 = type metadata accessor for Row();
  sub_23C828EF0();
  if (!v1)
  {
    v9 = 0uLL;
    v4 = swift_retain();
    v3 = static Row.fetchOne(_:arguments:adapter:)(v4, &v9, (uint64_t)&v11);
    swift_release();
    if (v3 && (v6 = v12) != 0)
    {
      sub_23C7E79A8(&qword_25430DBC8);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_23C9134B0;
      *(_QWORD *)(v7 + 32) = v3;
      *(_QWORD *)&v9 = v7;
      sub_23C9110DC();
      v8 = v9;
      sub_23C7F5610((uint64_t)v6);
      swift_retain();
      v6(a1, v8);
      sub_23C812C40((uint64_t)&v10);
      swift_bridgeObjectRelease();
      sub_23C7F1754((uint64_t)v6);
    }
    else
    {
      sub_23C812C40((uint64_t)&v10);
    }
  }
  return v3;
}

uint64_t type metadata accessor for Table(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Table);
}

uint64_t sub_23C82C0D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C82C0F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C82A8A8(*(void (**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

void sub_23C82C100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7DF330();
  v13 = *(_QWORD *)(v12 + 112);
  sub_23C7DC490();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v14 = sub_23C82CFC8();
  sub_23C7F1754(v14);
  swift_bridgeObjectRelease();
  sub_23C7E087C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v13);
  sub_23C7F1754(a12);
  sub_23C7DB3E4();
}

void sub_23C82C198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;

  sub_23C8546C8(a1, (uint64_t)v13);
  if (!v1)
  {
    sub_23C7E9B10();
    sub_23C82CECC();
    v5 = static Row.fetchOne(_:arguments:adapter:)(v2, v3, v4);
    v6 = sub_23C7DC4C4();
    if (v5 && (v8 = v14) != 0)
    {
      sub_23C7E79A8(&qword_25430DBC8);
      v9 = sub_23C7DB388();
      *(_OWORD *)(v9 + 16) = xmmword_23C9134B0;
      *(_QWORD *)(v9 + 32) = v5;
      v12 = v9;
      sub_23C9110DC();
      sub_23C7F5610(v8);
      swift_retain();
      v10 = sub_23C82D070();
      sub_23C7EDB70(v10, v11, v12);
      sub_23C7DBCD0();
      sub_23C7F1754(v8);
    }
    else
    {
      sub_23C7EDB70(v6, v7);
    }
  }
  sub_23C7E0864();
}

_QWORD *initializeBufferWithCopyOfBuffer for FTS5(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DatabaseFunction.Identity()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for FTS5(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FTS5(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatementCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatementCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_23C82C3C4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  id v27;
  unint64_t v29;
  char v30;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  v5 = 0;
  v6 = (char *)(a1 + 64);
  while (1)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_23C911B50();
      __break(1u);
      goto LABEL_24;
    }
    v7 = *v6;
    v9 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v11 = *((_QWORD *)v6 - 4);
    v10 = *((_QWORD *)v6 - 3);
    swift_bridgeObjectRetain();
    sub_23C7E56A4(v9, v8, v7);
    if (!v10)
      goto LABEL_18;
    v29 = v8;
    v30 = v7;
    v12 = (_QWORD *)*a3;
    v14 = sub_23C7E94B8();
    v15 = v12[2];
    v16 = (v13 & 1) == 0;
    if (__OFADD__(v15, v16))
      goto LABEL_21;
    v17 = v13;
    if (v12[3] < v15 + v16)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v13 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_23C7E79A8(&qword_25430B610);
      sub_23C911784();
      if ((v17 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    v21 = (_QWORD *)(v20[6] + 16 * v14);
    *v21 = v11;
    v21[1] = v10;
    v22 = v20[7] + 24 * v14;
    *(_QWORD *)v22 = v9;
    *(_QWORD *)(v22 + 8) = v29;
    *(_BYTE *)(v22 + 16) = v30;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_22;
    ++v5;
    v20[2] = v25;
    v6 += 40;
    a2 = 1;
    if (v4 == v5)
      goto LABEL_18;
  }
  sub_23C8F9A64();
  v18 = sub_23C7E94B8();
  if ((v17 & 1) != (v19 & 1))
    goto LABEL_23;
  v14 = v18;
  if ((v17 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v26 = (void *)swift_allocError();
  swift_willThrow();
  v27 = v26;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_23C7E5640(v9, v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

void sub_23C82C6EC(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _BYTE v26[216];
  _BYTE v27[232];
  _BYTE __dst[232];
  _QWORD v29[30];
  id v30;

  v4 = *(_QWORD *)(a1 + 16);
  v23 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    if (v5 == v4)
    {
      sub_23C82CC28(__dst);
      sub_23C82CBCC((uint64_t)__dst, (uint64_t)v29, &qword_25430CF18);
      v5 = v4;
    }
    else
    {
      if (v5 >= *(_QWORD *)(a1 + 16))
        goto LABEL_23;
      memcpy(__dst, (const void *)(v23 + 232 * v5), 0xE2uLL);
      memcpy(v29, (const void *)(v23 + 232 * v5++), 0xE2uLL);
      nullsub_1(v29);
      sub_23C82CABC((uint64_t)__dst);
    }
    sub_23C82CBCC((uint64_t)v29, (uint64_t)v27, &qword_25430CF18);
    sub_23C82CBCC((uint64_t)v27, (uint64_t)__dst, &qword_25430CF18);
    if (sub_23C82CC10((uint64_t)__dst) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v6 = v29[0];
    v7 = v29[1];
    memcpy(v26, &v29[2], 0xD2uLL);
    v8 = (_QWORD *)*a3;
    v10 = sub_23C7E94B8();
    v11 = v8[2];
    v12 = (v9 & 1) == 0;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      sub_23C911B50();
      __break(1u);
      goto LABEL_25;
    }
    v13 = v9;
    if (v8[3] < v11 + v12)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      sub_23C7E79A8(&qword_25430B330);
      sub_23C911784();
      if ((v13 & 1) != 0)
        goto LABEL_17;
    }
LABEL_14:
    v16 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v17 = (_QWORD *)(v16[6] + 16 * v10);
    *v17 = v6;
    v17[1] = v7;
    memcpy((void *)(v16[7] + 216 * v10), v26, 0xD2uLL);
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_22;
    v16[2] = v20;
    a2 = 1;
  }
  sub_23C8F9CF4();
  v14 = sub_23C7E94B8();
  if ((v13 & 1) != (v15 & 1))
    goto LABEL_24;
  v10 = v14;
  if ((v13 & 1) == 0)
    goto LABEL_14;
LABEL_17:
  v21 = (void *)swift_allocError();
  swift_willThrow();
  v30 = v21;
  v22 = v21;
  sub_23C7E79A8(&qword_25430CCC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_23C813A5C((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_25:
  sub_23C911634();
  sub_23C910F5C();
  sub_23C911730();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C82CA7C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_23C8D3CDC(a1, a2, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16));
}

void sub_23C82CA94(void *a1)
{
  bzero(a1, 0xBBuLL);
}

uint64_t sub_23C82CAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23C80C430(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24);
}

uint64_t sub_23C82CABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  v6 = *(_BYTE *)(a1 + 56);
  swift_bridgeObjectRetain();
  sub_23C800AA4(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v9);
  sub_23C7F5610(v10);
  return a1;
}

uint64_t sub_23C82CBCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_23C7E79A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C82CC10(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void sub_23C82CC28(void *a1)
{
  bzero(a1, 0xE2uLL);
}

uint64_t sub_23C82CC30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 104);
  v15 = *(_OWORD *)(a1 + 88);
  v12 = *(_OWORD *)(a1 + 136);
  v13 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(_WORD *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7FD5D8(v18, v17, v16, v2, v3, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v7,
    v8,
    v9);
  return a1;
}

void sub_23C82CD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_23C7DF330();
  sub_23C7DC490();
  swift_retain();
  swift_retain();
  sub_23C7DB3D4();
  v12 = sub_23C82CFC8();
  sub_23C7F5610(v12);
  sub_23C7DBBB0();
  sub_23C7DBBB8();
  sub_23C7DB3B8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(a10);
  sub_23C7F5610(a12);
  sub_23C7DB3E4();
}

uint64_t sub_23C82CDA4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[8])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[17])
    swift_release();
  if (v0[19])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C82CE38(_QWORD *a1, _QWORD *a2)
{
  return sub_23C82CA7C(a1, a2);
}

uint64_t sub_23C82CE58(uint64_t a1, uint64_t a2)
{
  return sub_23C82CAA0(a1, a2);
}

uint64_t sub_23C82CEE0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C82CF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_23C82CF1C()
{
  return swift_unexpectedError();
}

_QWORD *sub_23C82CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(a2 + 8))((uint64_t *)va, v4);
}

uint64_t sub_23C82CF60()
{
  return sub_23C91119C();
}

double sub_23C82CF84(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_23C8291CC((uint64_t)va);
}

void sub_23C82CF94()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C811870(v0, v1);
}

uint64_t sub_23C82CFC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C82CFD4()
{
  return sub_23C9112E0();
}

uint64_t sub_23C82CFE4()
{
  return sub_23C9117E4();
}

BOOL sub_23C82CFF4()
{
  uint64_t v0;

  return v0 > 0;
}

void sub_23C82D004()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C82D034(uint64_t a1)
{
  return sub_23C894358(a1, a1);
}

uint64_t sub_23C82D040()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C82D054()
{
  return sub_23C9110E8();
}

void *sub_23C82D05C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xBBuLL);
}

uint64_t sub_23C82D064()
{
  uint64_t v0;

  return sub_23C7F1754(v0);
}

uint64_t sub_23C82D070()
{
  uint64_t (*v0)(void);

  return v0();
}

void sub_23C82D078()
{
  QueryInterfaceRequest.deleteAll(_:)();
}

uint64_t sub_23C82D080()
{
  return 0;
}

uint64_t sub_23C82D094()
{
  return swift_retain();
}

void sub_23C82D0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_23C82C100(v12 - 256, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_23C82D0C0(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;

  return sub_23C7E0CD0(v3, a2, a3);
}

void sub_23C82D0D4()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C82D0DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23C82D0F0()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C82D0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void sub_23C82D110()
{
  JUMPOUT(0x242626100);
}

void sub_23C82D118(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x242625290](v3, a1);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 8 * v3 + 32);
        swift_retain();
      }
      v6 = *(_QWORD *)(v4 + 16);
      v5 = *(_QWORD *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v7 = *(_QWORD *)(v9 + 16);
      if (v7 >= *(_QWORD *)(v9 + 24) >> 1)
        sub_23C7E649C();
      ++v3;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      v8 = v9 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v6;
      *(_QWORD *)(v8 + 40) = v5;
      if (v2 == v3)
        return;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
}

void sub_23C82D27C()
{
  void *v0;
  __int128 v1;
  char v2;
  __int128 v3;
  char v4;

  v0 = (void *)sub_23C910A64();
  NSURL.databaseValue.getter((uint64_t)&v1);

  v3 = v1;
  v4 = v2;
  sub_23C8027EC((uint64_t)&v3);
  sub_23C7E322C(&v3);
  sub_23C830B1C();
}

void *sub_23C82D2CC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v6[2];
  char v7;

  if (qword_25430B418 != -1)
    swift_once();
  v1 = (void *)qword_25430B410;
  v2 = (void *)sub_23C910B3C();
  v3 = objc_msgSend(v1, sel_stringFromDate_, v2);

  sub_23C910E78();
  sub_23C825124();
  v6[0] = v2;
  v6[1] = v0;
  v7 = 2;
  v4 = sub_23C8027EC((uint64_t)v6);
  return sub_23C7E907C(v4);
}

void sub_23C82D378()
{
  __int16 v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = sub_23C910B9C();
  LOWORD(v9) = v0;
  BYTE2(v9) = v1;
  BYTE3(v9) = v2;
  BYTE4(v9) = v3;
  BYTE5(v9) = v4;
  BYTE6(v9) = v5;
  HIBYTE(v9) = v6;
  v8 = MEMORY[0x242624738](&v8, 16);
  v9 = v7;
  v10 = 3;
  sub_23C8027EC((uint64_t)&v8);
  sub_23C7E322C(&v8);
  sub_23C7E4198();
}

void sub_23C82D468()
{
  __int128 v0;
  char v1;
  __int128 v2;
  char v3;

  DatabaseDateComponents.databaseValue.getter((uint64_t)&v0);
  v2 = v0;
  v3 = v1;
  sub_23C8027EC((uint64_t)&v2);
  sub_23C7E322C(&v2);
  sub_23C830B1C();
}

uint64_t sub_23C82D4AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v7[2];
  char v8;
  _BYTE __src[168];

  v7[0] = a1;
  v7[1] = a2;
  v8 = 3;
  sub_23C8027EC((uint64_t)v7);
  sub_23C800B48(v7, __src);
  memcpy(a3, __src, 0xA3uLL);
  return sub_23C7ED944(a1, a2);
}

void sub_23C82D51C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v4[2];
  char v5;

  v4[0] = a1;
  v4[1] = a2;
  v5 = 2;
  sub_23C8027EC((uint64_t)v4);
  sub_23C800B48(v4, a3);
  sub_23C7DF858();
  sub_23C7E4198();
}

void sub_23C82D560(char a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1 & 1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D594(double a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  *(double *)v2 = a1;
  v2[1] = 0;
  v3 = 1;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D5CC(float a1)
{
  uint64_t v1;
  double v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0.0;
  v3 = 1;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void *sub_23C82D608@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  void *v23;
  void *v24;
  id v25;
  __int16 v26;
  __int16 v27;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  v23 = a4;
  v7 = HIDWORD(a1);
  v8 = HIWORD(a1);
  v9 = a2 >> 16;
  v10 = HIDWORD(a2);
  v21 = HIWORD(a2);
  v22 = HIWORD(a3);
  v11 = sub_23C910BCC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(MEMORY[0x24BDD1518]);
  LODWORD(v24) = v6;
  WORD2(v24) = v7;
  HIWORD(v24) = v8;
  LOWORD(v25) = v5;
  WORD1(v25) = v9;
  WORD2(v25) = v10;
  HIWORD(v25) = v21;
  v26 = v4;
  v27 = v22;
  v16 = objc_msgSend(v15, sel_initWithDecimal_, &v24);
  sub_23C910BB4();
  v17 = (void *)sub_23C910BC0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v18 = objc_msgSend(v16, sel_descriptionWithLocale_, v17);

  sub_23C910E78();
  sub_23C825124();
  v24 = v17;
  v25 = v16;
  LOBYTE(v26) = 2;
  sub_23C8027EC((uint64_t)&v24);
  return sub_23C800B48(&v24, v23);
}

void sub_23C82D7AC(char a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D7E0(__int16 a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D814(int a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D848(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D878(unsigned __int8 a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D8AC(unsigned __int16 a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D8E0(unsigned int a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v2[0] = a1;
  v2[1] = 0;
  v3 = 0;
  v1 = sub_23C8027EC((uint64_t)v2);
  sub_23C7E907C(v1);
  sub_23C7E4198();
}

void sub_23C82D914(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2[0] = a1;
    v2[1] = 0;
    v3 = 0;
    v1 = sub_23C8027EC((uint64_t)v2);
    sub_23C7E907C(v1);
    sub_23C7E4198();
  }
}

BOOL static FTS5.Diacritics.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void FTS5.Diacritics.hash(into:)()
{
  sub_23C911BC8();
  sub_23C7DB390();
}

uint64_t FTS5.Diacritics.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

GRDBInternal::FTS5 __swiftcall FTS5.init()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  GRDBInternal::FTS5 result;

  sub_23C830B34(v0);
  result.moduleName._object = v2;
  result.moduleName._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_23C82D9E0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v4 = (int *)type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)v6 = 1;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_DWORD *)(v6 + 23) = 0;
  *((_QWORD *)v6 + 4) = MEMORY[0x24BEE4AF8];
  *((_WORD *)v6 + 20) = 0;
  v6[64] = 2;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 10) = 0;
  v6[88] = -1;
  *((_QWORD *)v6 + 12) = 5;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  sub_23C910D4C();
  *(_QWORD *)&v6[v4[17]] = 0;
  *(_QWORD *)&v6[v4[18]] = 0;
  v6[v4[19]] = 1;
  v6[v4[20]] = 0;
  v7 = &v6[v4[21]];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v6[v4[22]];
  *v8 = 0;
  v8[1] = 0;
  v9 = &v6[v4[23]];
  type metadata accessor for DatabaseQueue();
  *v9 = 0;
  v9[1] = 0;
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v6);
  v13 = a1;
  v14 = a2;
  v10 = sub_23C8A5020();
  sub_23C7DC4C4();
  return v10;
}

void sub_23C82DB38()
{
  uint64_t v0;
  uint64_t v1;

  static FTS5TokenizerDescriptor.ascii(separators:tokenCharacters:)(MEMORY[0x24BEE4B08], MEMORY[0x24BEE4B08], &v1);
  v0 = v1;
  Database.makeTokenizer(_:)(&v0);
}

void FTS5.moduleName.getter()
{
  sub_23C7DB3D4();
  sub_23C7DB390();
}

double FTS5.makeTableDefinition(configuration:)(char *a1)
{
  char v1;
  uint64_t v2;
  double result;

  v1 = *a1;
  type metadata accessor for FTS5TableDefinition();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_BYTE *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 16) = v1;
  return result;
}

uint64_t type metadata accessor for FTS5TableDefinition()
{
  return objc_opt_self();
}

uint64_t FTS5.moduleArguments(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __objc2_class_ro **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __objc2_class_ro *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE __dst[168];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t __src[21];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194[8];
  uint64_t v195;
  uint64_t v196;

  p_info = (__objc2_class_ro **)(a1 + 24);
  sub_23C7E07C4();
  v164 = a1;
  v7 = *(_QWORD *)(a1 + 24);
  if (!((unint64_t)v7 >> 62))
  {
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_102:
    LODWORD(v154) = 0;
    v153 = 100;
    sub_23C9117B4();
    __break(1u);
    goto LABEL_103;
  }
  if (v7 < 0)
    v2 = v7;
  else
    v2 = v7 & 0xFFFFFFFFFFFFFF8;
  sub_23C7DB3D4();
  v140 = sub_23C9117C0();
  sub_23C7DE934();
  if (!v140)
    goto LABEL_102;
LABEL_3:
  v3 = (uint64_t)*p_info;
  v163 = a2;
  if (!((unint64_t)*p_info >> 62))
  {
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_23C7DBBB8();
    goto LABEL_5;
  }
LABEL_103:
  if (v3 < 0)
    v2 = v3;
  else
    v2 = v3 & 0xFFFFFFFFFFFFFF8;
  sub_23C7DBBB8();
  v8 = sub_23C9117C0();
LABEL_5:
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
LABEL_108:
      swift_once();
      goto LABEL_21;
    }
    for (i = 0; i != v8; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x242625290](i, v3);
      }
      else
      {
        v11 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_retain();
      }
      if (*(_BYTE *)(v11 + 32) == 1)
      {
        v13 = *(_QWORD *)(v11 + 16);
        v12 = *(_QWORD *)(v11 + 24);
        sub_23C7DB3D4();
      }
      else
      {
        v14 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)v194 = *(_QWORD *)(v11 + 16);
        v195 = v14;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        v13 = *(_QWORD *)v194;
        v12 = v195;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C830AE4();
        sub_23C7F16C0();
        v9 = v18;
      }
      v15 = *(_QWORD *)(v9 + 16);
      v16 = v9;
      if (v15 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        sub_23C7F16C0();
        v16 = v19;
      }
      *(_QWORD *)(v16 + 16) = v15 + 1;
      v9 = v16;
      v17 = v16 + 16 * v15;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v12;
      sub_23C7DC4C4();
    }
  }
  sub_23C7DC474();
  sub_23C7E07C4();
  p_info = _TtC12GRDBInternal18SchedulingWatchdog.info;
  if (!*(_QWORD *)(v164 + 72))
    goto LABEL_29;
  v8 = v9;
  __src[0] = *(_QWORD *)(v164 + 72);
  sub_23C7DBBB8();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v20 = sub_23C7E209C();
  v22 = v21;
  sub_23C7DC474();
  v191 = v20;
  v192 = v22;
  LOBYTE(v193) = 2;
  sub_23C8027EC((uint64_t)&v191);
  sub_23C7E6C18();
  v2 = qword_25430CC40;
  sub_23C830B04();
  if (v2 != -1)
    goto LABEL_108;
LABEL_21:
  sub_23C7DE9DC();
  sub_23C7E58F4();
  sub_23C830AF4();
  sub_23C7EDB78();
  sub_23C7DF34C((uint64_t)p_info);
  sub_23C7E9838(v23, v24, v25, v26, v27, v28, v29, v30, v153, v154, v155, v156, v157, v159, v160, v163, v164, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
    *(uint64_t *)&__dst[16],
    *(uint64_t *)&__dst[24],
    *(uint64_t *)&__dst[32],
    *(uint64_t *)&__dst[40],
    *(uint64_t *)&__dst[48],
    *(uint64_t *)&__dst[56],
    *(uint64_t *)&__dst[64],
    *(uint64_t *)&__dst[72],
    *(uint64_t *)&__dst[80],
    *(uint64_t *)&__dst[88],
    *(uint64_t *)&__dst[96],
    *(uint64_t *)&__dst[104],
    *(uint64_t *)&__dst[112],
    *(uint64_t *)&__dst[120],
    *(uint64_t *)&__dst[128],
    *(uint64_t *)&__dst[136],
    *(uint64_t *)&__dst[144],
    *(uint64_t *)&__dst[152],
    *(uint64_t *)&__dst[160],
    v166,
    v167,
    v168,
    v169,
    v170,
    v171,
    v172,
    v173,
    v174,
    v175,
    v176,
    v177,
    v178,
    v179,
    v180,
    v181,
    v182,
    v183,
    v184,
    v185,
    v186,
    v187,
    v188,
    v189,
    __src[0]);
  sub_23C7EF9D4();
  if (v2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    sub_23C7DB3DC();
    return swift_release();
  }
  sub_23C7DB3DC();
  swift_release();
  sub_23C7E5E60();
  sub_23C7DB62C();
  v32 = __src[0];
  v33 = __src[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v196 = 0;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_23C830AE4();
    sub_23C7F16C0();
    v8 = v141;
  }
  v35 = *(_QWORD *)(v8 + 16);
  sub_23C830AC0();
  if (v37)
  {
    sub_23C7E7730(v36);
    sub_23C7F16C0();
    v8 = v142;
  }
  *(_QWORD *)(v8 + 16) = __src;
  v38 = v8 + 16 * v35;
  *(_QWORD *)(v38 + 32) = v32;
  *(_QWORD *)(v38 + 40) = v33;
  v9 = v8;
LABEL_29:
  v40 = *(_QWORD *)(v164 + 32);
  v39 = *(_QWORD *)(v164 + 40);
  v41 = *(_QWORD *)(v164 + 48);
  v42 = *(_QWORD *)(v164 + 56);
  v43 = v196;
  if (*(_BYTE *)(v164 + 64) != 1)
  {
    if (v39)
    {
      v191 = *(_QWORD *)(v164 + 32);
      v192 = v39;
      LOBYTE(v193) = 2;
      sub_23C8027EC((uint64_t)&v191);
      sub_23C7E6C18();
      sub_23C830B28();
      v59 = sub_23C830AD8();
      sub_23C82FE2C(v59, v60, v41, v42, 0);
      if (qword_25430CC40 != -1)
        swift_once();
      sub_23C7DE9DC();
      sub_23C7E58F4();
      sub_23C7EE284();
      sub_23C7EDB78();
      sub_23C7E4CE4(v8);
      sub_23C7E9838(v61, v62, v63, v64, v65, v66, v67, v68, v153, v154, v155, v156, v157, v41, v9, v163, v164, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
        *(uint64_t *)&__dst[16],
        *(uint64_t *)&__dst[24],
        *(uint64_t *)&__dst[32],
        *(uint64_t *)&__dst[40],
        *(uint64_t *)&__dst[48],
        *(uint64_t *)&__dst[56],
        *(uint64_t *)&__dst[64],
        *(uint64_t *)&__dst[72],
        *(uint64_t *)&__dst[80],
        *(uint64_t *)&__dst[88],
        *(uint64_t *)&__dst[96],
        *(uint64_t *)&__dst[104],
        *(uint64_t *)&__dst[112],
        *(uint64_t *)&__dst[120],
        *(uint64_t *)&__dst[128],
        *(uint64_t *)&__dst[136],
        *(uint64_t *)&__dst[144],
        *(uint64_t *)&__dst[152],
        *(uint64_t *)&__dst[160],
        v166,
        v167,
        v168,
        v169,
        v170,
        v171,
        v172,
        v173,
        v174,
        v175,
        v176,
        v177,
        v178,
        v179,
        v180,
        v181,
        v182,
        v183,
        v184,
        v185,
        v186,
        v187,
        v188,
        v189,
        __src[0]);
      sub_23C7ECFE4();
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C7DC4C4();
        return swift_bridgeObjectRelease();
      }
      v9 = v69;
      swift_bridgeObjectRelease();
      sub_23C7DC4C4();
      sub_23C7E5E60();
      sub_23C7DB62C();
      if ((sub_23C7DF5F8() & 1) == 0)
      {
        sub_23C7EDDCC();
        v160 = v145;
      }
      v79 = v163;
      sub_23C830AC0();
      if (v37)
      {
        sub_23C7E0884();
        v160 = v146;
      }
      sub_23C7DB42C();
      v43 = 0;
      v41 = v159;
      if (!v42)
        goto LABEL_55;
    }
    else
    {
      sub_23C7DBBB8();
      v79 = v163;
      if (!v42)
      {
LABEL_55:
        v196 = v43;
LABEL_63:
        v98 = _TtC12GRDBInternal18SchedulingWatchdog.info;
        goto LABEL_64;
      }
    }
    v80 = v9;
    v191 = v41;
    v192 = v42;
    LOBYTE(v193) = 2;
    sub_23C8027EC((uint64_t)&v191);
    sub_23C7E6C18();
    v81 = qword_25430CC40;
    swift_retain();
    if (v81 != -1)
      swift_once();
    sub_23C7DE9DC();
    sub_23C7E58F4();
    sub_23C7EE284();
    sub_23C7EDB78();
    sub_23C7E4CE4(v79);
    sub_23C7E9838(v82, v83, v84, v85, v86, v87, v88, v89, v153, v154, v155, v156, v157, v159, v160, v163, v164, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
      *(uint64_t *)&__dst[16],
      *(uint64_t *)&__dst[24],
      *(uint64_t *)&__dst[32],
      *(uint64_t *)&__dst[40],
      *(uint64_t *)&__dst[48],
      *(uint64_t *)&__dst[56],
      *(uint64_t *)&__dst[64],
      *(uint64_t *)&__dst[72],
      *(uint64_t *)&__dst[80],
      *(uint64_t *)&__dst[88],
      *(uint64_t *)&__dst[96],
      *(uint64_t *)&__dst[104],
      *(uint64_t *)&__dst[112],
      *(uint64_t *)&__dst[120],
      *(uint64_t *)&__dst[128],
      *(uint64_t *)&__dst[136],
      *(uint64_t *)&__dst[144],
      *(uint64_t *)&__dst[152],
      *(uint64_t *)&__dst[160],
      v166,
      v167,
      v168,
      v169,
      v170,
      v171,
      v172,
      v173,
      v174,
      v175,
      v176,
      v177,
      v178,
      v179,
      v180,
      v181,
      v182,
      v183,
      v184,
      v185,
      v186,
      v187,
      v188,
      v189,
      __src[0]);
    sub_23C7ECFE4();
    if (v81)
    {
      swift_bridgeObjectRelease();
      sub_23C7DC474();
      return swift_release();
    }
    sub_23C7DC474();
    sub_23C7DC4C4();
    __src[0] = 0;
    __src[1] = 0xE000000000000000;
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C7DC4CC();
    __src[0] = v90;
    __src[1] = v91;
    sub_23C7DE9D4();
    sub_23C7DBCD0();
    v92 = __src[0];
    v93 = __src[1];
    v94 = swift_isUniquelyReferenced_nonNull_native();
    v196 = 0;
    if ((v94 & 1) == 0)
    {
      sub_23C830AE4();
      sub_23C7F16C0();
      v80 = v151;
    }
    v79 = v163;
    v95 = *(_QWORD *)(v80 + 16);
    sub_23C830AC0();
    if (v37)
    {
      sub_23C7E7730(v96);
      sub_23C7F16C0();
      v80 = v152;
    }
    *(_QWORD *)(v80 + 16) = __src;
    v97 = v80 + 16 * v95;
    *(_QWORD *)(v97 + 32) = v92;
    *(_QWORD *)(v97 + 40) = v93;
    v9 = v80;
    goto LABEL_63;
  }
  v166 = 0;
  v167 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_23C910F5C();
  v191 = v40;
  v192 = v39;
  LOBYTE(v193) = 2;
  sub_23C8027EC((uint64_t)&v191);
  sub_23C7E6C18();
  sub_23C830B28();
  v44 = sub_23C830AD8();
  v158 = v42;
  sub_23C82FE2C(v44, v45, v41, v42, 1);
  if (qword_25430CC40 != -1)
    swift_once();
  sub_23C7DE9DC();
  sub_23C7E58F4();
  v46 = sub_23C7EE284();
  sub_23C7EDB78();
  sub_23C7E4CE4(v8);
  sub_23C7E9838(v47, v48, v49, v50, v51, v52, v53, v54, v153, v154, v155, v156, v158, v41, v9, v163, v164, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
    *(uint64_t *)&__dst[16],
    *(uint64_t *)&__dst[24],
    *(uint64_t *)&__dst[32],
    *(uint64_t *)&__dst[40],
    *(uint64_t *)&__dst[48],
    *(uint64_t *)&__dst[56],
    *(uint64_t *)&__dst[64],
    *(uint64_t *)&__dst[72],
    *(uint64_t *)&__dst[80],
    *(uint64_t *)&__dst[88],
    *(uint64_t *)&__dst[96],
    *(uint64_t *)&__dst[104],
    *(uint64_t *)&__dst[112],
    *(uint64_t *)&__dst[120],
    *(uint64_t *)&__dst[128],
    *(uint64_t *)&__dst[136],
    *(uint64_t *)&__dst[144],
    *(uint64_t *)&__dst[152],
    *(uint64_t *)&__dst[160],
    v166,
    v167,
    v168,
    v169,
    v170,
    v171,
    v172,
    v173,
    v174,
    v175,
    v176,
    v177,
    v178,
    v179,
    v180,
    v181,
    v182,
    v183,
    v184,
    v185,
    v186,
    v187,
    v188,
    v189,
    __src[0]);
  sub_23C7ECFE4();
  if (v2)
  {
    sub_23C7DC4C4();
    v55 = sub_23C830AD8();
    sub_23C7E2578(v55, v56, v159, v157);
    v57 = sub_23C830AD8();
    sub_23C7E2578(v57, v58, v159, v157);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v156 = v46;
  sub_23C7DC4C4();
  v70 = sub_23C830AD8();
  sub_23C7E2578(v70, v71, v159, v157);
  sub_23C7E6918();
  sub_23C7DB62C();
  v73 = v166;
  v72 = v167;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C7EDDCC();
    v161 = v143;
  }
  v74 = *(_QWORD *)(v161 + 16);
  if (v74 >= *(_QWORD *)(v161 + 24) >> 1)
  {
    sub_23C7E0884();
    v161 = v144;
  }
  *(_QWORD *)(v161 + 16) = v74 + 1;
  v75 = v161 + 16 * v74;
  *(_QWORD *)(v75 + 32) = v73;
  *(_QWORD *)(v75 + 40) = v72;
  v76 = sub_23C830AD8();
  Database.primaryKey(_:)(v76, v77, v78);
  v196 = 0;
  sub_23C7E2578(v40, v39, v159, v157);
  if ((_BYTE)v189)
  {
    sub_23C7F9150(v187, v188, v189);
    v9 = v161;
    v79 = v163;
    goto LABEL_63;
  }
  v166 = v187;
  v167 = v188;
  LOBYTE(v168) = 2;
  sub_23C8027EC((uint64_t)&v166);
  sub_23C800B48(&v166, __src);
  sub_23C830B04();
  swift_retain();
  sub_23C7E58F4();
  sub_23C7EDB78();
  sub_23C7E4CE4(v161);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C7EF9D4();
  v196 = 0;
  swift_release();
  sub_23C7E6AB0();
  *(_QWORD *)__dst = 0;
  *(_QWORD *)&__dst[8] = 0xE000000000000000;
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C7DC4CC();
  *(_QWORD *)__dst = v138;
  *(_QWORD *)&__dst[8] = v139;
  sub_23C910F5C();
  sub_23C7DB3DC();
  v9 = *(_QWORD *)__dst;
  sub_23C830AC0();
  if (v37)
    sub_23C7E0884();
  v79 = v163;
  v98 = (__objc2_class_ro **)(_TtC12GRDBInternal18SchedulingWatchdog + 32);
  sub_23C7DB42C();
LABEL_64:
  sub_23C7E07C4();
  if (*(_QWORD *)(v164 + 80))
  {
    v162 = v9;
    swift_bridgeObjectRetain_n();
    sub_23C7FCBA8();
    v100 = v99;
    sub_23C7DE934();
    *(_QWORD *)v194 = v100;
    v101 = v196;
    sub_23C82FE94((uint64_t *)v194);
    if (v101)
    {
      result = swift_release();
      __break(1u);
      return result;
    }
    v102 = 0;
    sub_23C7DE934();
    v103 = *(_QWORD *)v194;
    v104 = *(_QWORD *)(*(_QWORD *)v194 + 16);
    if (v104)
    {
      v196 = 0;
      *(_QWORD *)v194 = MEMORY[0x24BEE4AF8];
      sub_23C7E623C();
      v105 = 0;
      v106 = *(_QWORD *)v194;
      do
      {
        v107 = v103;
        v191 = *(_QWORD *)(v103 + 8 * v105 + 32);
        v108 = sub_23C911880();
        v110 = v109;
        *(_QWORD *)v194 = v106;
        v111 = *(_QWORD *)(v106 + 16);
        if (v111 >= *(_QWORD *)(v106 + 24) >> 1)
        {
          sub_23C7DBBE4();
          v106 = *(_QWORD *)v194;
        }
        ++v105;
        *(_QWORD *)(v106 + 16) = v111 + 1;
        v112 = v106 + 16 * v111;
        *(_QWORD *)(v112 + 32) = v108;
        *(_QWORD *)(v112 + 40) = v110;
        v103 = v107;
      }
      while (v104 != v105);
      swift_release();
      v79 = v163;
      v98 = (__objc2_class_ro **)(_TtC12GRDBInternal18SchedulingWatchdog + 32);
      v102 = v196;
    }
    else
    {
      swift_release();
      v106 = MEMORY[0x24BEE4AF8];
    }
    __src[0] = v106;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    v113 = sub_23C7E209C();
    v115 = v114;
    sub_23C7DC474();
    v191 = v113;
    v192 = v115;
    LOBYTE(v193) = 2;
    sub_23C8027EC((uint64_t)&v191);
    sub_23C7E6C18();
    v116 = v98[392];
    swift_retain();
    if (v116 != (__objc2_class_ro *)-1)
      swift_once();
    sub_23C7DE9DC();
    sub_23C7E58F4();
    sub_23C830AF4();
    sub_23C7EDB78();
    sub_23C7DF34C(v79);
    sub_23C7E9838(v117, v118, v119, v120, v121, v122, v123, v124, v153, v154, v155, v156, v157, v159, v162, v163, v164, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
      *(uint64_t *)&__dst[16],
      *(uint64_t *)&__dst[24],
      *(uint64_t *)&__dst[32],
      *(uint64_t *)&__dst[40],
      *(uint64_t *)&__dst[48],
      *(uint64_t *)&__dst[56],
      *(uint64_t *)&__dst[64],
      *(uint64_t *)&__dst[72],
      *(uint64_t *)&__dst[80],
      *(uint64_t *)&__dst[88],
      *(uint64_t *)&__dst[96],
      *(uint64_t *)&__dst[104],
      *(uint64_t *)&__dst[112],
      *(uint64_t *)&__dst[120],
      *(uint64_t *)&__dst[128],
      *(uint64_t *)&__dst[136],
      *(uint64_t *)&__dst[144],
      *(uint64_t *)&__dst[152],
      *(uint64_t *)&__dst[160],
      v166,
      v167,
      v168,
      v169,
      v170,
      v171,
      v172,
      v173,
      v174,
      v175,
      v176,
      v177,
      v178,
      v179,
      v180,
      v181,
      v182,
      v183,
      v184,
      v185,
      v186,
      v187,
      v188,
      v189,
      __src[0]);
    sub_23C7EA244();
    if (v102)
      goto LABEL_22;
    v9 = v125;
    sub_23C7DB3DC();
    swift_release();
    sub_23C7E5E60();
    sub_23C7DB62C();
    v126 = sub_23C7DF5F8();
    v196 = 0;
    if ((v126 & 1) == 0)
      sub_23C7EDDCC();
    sub_23C830AC0();
    if (v37)
      sub_23C7E0884();
    sub_23C7DB42C();
  }
  sub_23C7E07C4();
  if ((*(_BYTE *)(v164 + 96) & 1) != 0)
  {
    v127 = v9;
  }
  else
  {
    v128 = *(_QWORD *)(v164 + 88);
    v191 = 0x69536E6D756C6F63;
    v192 = 0xEB000000003D657ALL;
    __src[0] = v128;
    sub_23C911880();
    v129 = v9;
    sub_23C910F5C();
    sub_23C7DB62C();
    v130 = v191;
    v131 = v192;
    v127 = v129;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7E6E58();
      v127 = v149;
    }
    v132 = *(_QWORD *)(v127 + 16);
    sub_23C830AC0();
    if (v37)
    {
      sub_23C7E6E58();
      v127 = v150;
    }
    *(_QWORD *)(v127 + 16) = &v191;
    v133 = v127 + 16 * v132;
    *(_QWORD *)(v133 + 32) = v130;
    *(_QWORD *)(v133 + 40) = v131;
  }
  sub_23C7E07C4();
  if (*(_QWORD *)(v164 + 112))
  {
    __src[0] = 0x3D6C6961746564;
    __src[1] = 0xE700000000000000;
    sub_23C7DBCC8();
    sub_23C7E6918();
    sub_23C7DB62C();
    v134 = __src[0];
    v135 = __src[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7E6E58();
      v127 = v147;
    }
    v136 = *(_QWORD *)(v127 + 16);
    sub_23C830AC0();
    if (v37)
    {
      sub_23C7E6E58();
      v127 = v148;
    }
    *(_QWORD *)(v127 + 16) = __src;
    v137 = v127 + 16 * v136;
    *(_QWORD *)(v137 + 32) = v134;
    *(_QWORD *)(v137 + 40) = v135;
  }
  return v127;
}

uint64_t FTS5.database(_:didCreate:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  GRDBInternal::StatementArguments v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  GRDBInternal::StatementArguments v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  if (*(_BYTE *)(a4 + 64) == 1)
  {
    v5 = *(_QWORD *)(a4 + 32);
    v6 = *(_QWORD *)(a4 + 40);
    v7 = *(_QWORD *)(a4 + 48);
    v8 = *(_QWORD *)(a4 + 56);
    swift_bridgeObjectRetain();
    Database.primaryKey(_:)(v5, v6, &v37);
    if (v4)
    {
      return sub_23C7E2578(v5, v6, v7, v8);
    }
    else
    {
      if (v39)
      {
        if (v39 == 1)
          v10 = 1;
        else
          v10 = 2;
        sub_23C7F9150(v37, v38, v10);
        v33 = 0x6469776F72;
        v34 = 0xE500000000000000;
      }
      else
      {
        v33 = v37;
        v34 = v38;
      }
      v37 = 34;
      v38 = 0xE100000000000000;
      sub_23C910F5C();
      sub_23C7E3164();
      v37 = 34;
      v38 = 0xE100000000000000;
      sub_23C7DE9D4();
      sub_23C7E3164();
      sub_23C7E2578(v5, v6, v7, v8);
      sub_23C7E07C4();
      v11 = sub_23C7DF858();
      sub_23C82D118(v11);
      sub_23C7DB624();
      sub_23C7DBCC8();
      sub_23C7FAE44();
      sub_23C7FA75C((uint64_t)&unk_250D86B60);
      sub_23C7DB624();
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      sub_23C7DC474();
      sub_23C7E79A8(&qword_25430DA10);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23C912A20;
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v34;
      v35[0] = inited;
      sub_23C7DBCC8();
      sub_23C7DC46C();
      sub_23C7FAE44();
      v13 = *(_QWORD *)(v35[0] + 16);
      v14 = MEMORY[0x24BEE4AF8];
      if (v13)
      {
        v36 = MEMORY[0x24BEE4AF8];
        sub_23C7E623C();
        v15 = v36;
        v16 = v35[0] + 40;
        do
        {
          v35[0] = 779576686;
          v35[1] = 0xE400000000000000;
          sub_23C7DF858();
          sub_23C7E8E10();
          sub_23C7E3164();
          sub_23C7E1784();
          sub_23C7DB624();
          sub_23C7DB398();
          v36 = v15;
          v17 = *(_QWORD *)(v15 + 16);
          if (v17 >= *(_QWORD *)(v15 + 24) >> 1)
          {
            sub_23C7DBBE4();
            v15 = v36;
          }
          v16 += 16;
          *(_QWORD *)(v15 + 16) = v17 + 1;
          v18 = v15 + 16 * v17;
          *(_QWORD *)(v18 + 32) = 779576686;
          *(_QWORD *)(v18 + 40) = 0xE400000000000000;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        v14 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        sub_23C7DC474();
      }
      sub_23C7DEFA8();
      sub_23C7DBCD0();
      v19 = swift_initStackObject();
      *(_OWORD *)(v19 + 16) = xmmword_23C912A20;
      *(_QWORD *)(v19 + 32) = v33;
      *(_QWORD *)(v19 + 40) = v34;
      v35[0] = v19;
      sub_23C7FAE44();
      v20 = *(_QWORD *)(v35[0] + 16);
      if (v20)
      {
        sub_23C7E623C();
        v21 = v35[0] + 40;
        v22 = v14;
        do
        {
          v35[0] = 778333295;
          v35[1] = 0xE400000000000000;
          sub_23C7DBBB8();
          sub_23C7E9848();
          sub_23C7E3164();
          sub_23C7DE9D4();
          sub_23C7DC474();
          sub_23C7DBCD0();
          v36 = v22;
          v23 = *(_QWORD *)(v22 + 16);
          if (v23 >= *(_QWORD *)(v22 + 24) >> 1)
          {
            sub_23C7DBBE4();
            v22 = v36;
          }
          v21 += 16;
          *(_QWORD *)(v22 + 16) = v23 + 1;
          v24 = v22 + 16 * v23;
          *(_QWORD *)(v24 + 32) = 778333295;
          *(_QWORD *)(v24 + 40) = 0xE400000000000000;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7DB62C();
        v22 = MEMORY[0x24BEE4AF8];
      }
      v35[0] = v22;
      sub_23C7DEFA8();
      sub_23C7DB62C();
      sub_23C911634();
      sub_23C910F5C();
      sub_23C7E1784();
      sub_23C7E1784();
      sub_23C7EDB84();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C910F5C();
      sub_23C910F5C();
      sub_23C7EE11C();
      sub_23C7EF928();
      sub_23C7DE9D4();
      sub_23C7E06E4();
      sub_23C7E9848();
      sub_23C7E654C();
      sub_23C910F5C();
      sub_23C7EE11C();
      sub_23C7EF928();
      sub_23C910F5C();
      sub_23C7DBCF0();
      sub_23C7E1784();
      sub_23C7EDB84();
      sub_23C830B40();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C910F5C();
      sub_23C910F5C();
      sub_23C7E8E10();
      sub_23C7DE9D4();
      sub_23C7E06E4();
      sub_23C7DE9D4();
      sub_23C830B10();
      sub_23C7E9848();
      sub_23C7EE11C();
      sub_23C910F5C();
      sub_23C7E6918();
      sub_23C910F5C();
      sub_23C7E1784();
      sub_23C7DB398();
      sub_23C7DBCF0();
      sub_23C910F5C();
      sub_23C7DFA58();
      sub_23C7EDB84();
      sub_23C830B40();
      sub_23C7E1784();
      sub_23C7E3164();
      sub_23C7DB398();
      sub_23C7E1784();
      sub_23C7DB398();
      sub_23C7EE11C();
      sub_23C910F5C();
      sub_23C7E1784();
      sub_23C7DB398();
      sub_23C7E8E10();
      sub_23C7DE9D4();
      sub_23C7E06E4();
      sub_23C7DE9D4();
      sub_23C830B10();
      sub_23C7E8E10();
      sub_23C910F5C();
      sub_23C7E6918();
      sub_23C7DB62C();
      sub_23C7EE11C();
      sub_23C910F5C();
      sub_23C7DE9D4();
      sub_23C7E06E4();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C7E654C();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C910F5C();
      v25._countAndFlagsBits = 0;
      v26 = MEMORY[0x24BEE4B00];
      v27 = MEMORY[0x24BEE4AF8];
      v35[0] = MEMORY[0x24BEE4AF8];
      v35[1] = MEMORY[0x24BEE4B00];
      v28.values._rawValue = v35;
      v25._object = (void *)0xE000000000000000;
      Database.execute(sql:arguments:)(v25, v28);
      if (v29)
      {
        sub_23C7DBCD0();
        sub_23C7DB398();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7DB398();
        sub_23C7DB62C();
        swift_bridgeObjectRelease();
        v35[0] = 0;
        v35[1] = 0xE000000000000000;
        sub_23C911634();
        swift_bridgeObjectRelease();
        strcpy((char *)v35, "INSERT INTO ");
        BYTE5(v35[1]) = 0;
        HIWORD(v35[1]) = -5120;
        sub_23C7DE9D4();
        sub_23C7E06E4();
        sub_23C7DE9D4();
        sub_23C7DBCD0();
        sub_23C7EE11C();
        sub_23C910F5C();
        v30._countAndFlagsBits = v35[0];
        v31 = (void *)v35[1];
        v35[0] = v27;
        v35[1] = v26;
        v32.values._rawValue = v35;
        v30._object = v31;
        Database.execute(sql:arguments:)(v30, v32);
        sub_23C7DB624();
        sub_23C7DB62C();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_23C82F3EC(uint64_t a1)
{
  sqlite3_stmt *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  sqlite3_stmt *ppStmt[2];

  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x24BDAC8D0];
  ppStmt[0] = 0;
  v5 = 0;
  sub_23C7E6180();
  if (sqlite3_prepare_v3(*(sqlite3 **)(a1 + 16), "SELECT fts5(?)", -1, 0, ppStmt, 0)
    || (sqlite3_bind_pointer(ppStmt[0], 1, &v5, "fts5_api_ptr", 0),
        v2 = ppStmt[0],
        sqlite3_step(ppStmt[0]),
        (v3 = v5) == 0))
  {
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    sqlite3_finalize(v2);
    return v3;
  }
  return result;
}

void sub_23C82F510()
{
  FTS5.makeTableDefinition()();
}

void sub_23C82F51C(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  FTS5.makeTableDefinition(configuration:)(a1);
  *a2 = v3;
  sub_23C7DB390();
}

uint64_t sub_23C82F53C(uint64_t *a1, uint64_t a2)
{
  return FTS5.moduleArguments(for:in:)(*a1, a2);
}

uint64_t sub_23C82F554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return FTS5.database(_:didCreate:using:)(a1, a2, a3, *a4);
}

void FTS5TableDefinition.tokenizer.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_23C7E6180();
  *a1 = *(_QWORD *)(v1 + 72);
  swift_bridgeObjectRetain();
  sub_23C7DF890();
}

void FTS5TableDefinition.tokenizer.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  sub_23C7E6180();
  *(_QWORD *)(v1 + 72) = v2;
  swift_bridgeObjectRelease();
  sub_23C7DF890();
}

void FTS5TableDefinition.tokenizer.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

void FTS5TableDefinition.content.getter()
{
  sub_23C7DB3D4();
  sub_23C7DB390();
}

uint64_t FTS5TableDefinition.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v5 = *(unsigned __int8 *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 32);
  if (v5 == 1)
  {
    v7 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 32) = a1;
    *(_QWORD *)(v2 + 40) = a2;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_BYTE *)(v2 + 64) = 0;
    return sub_23C830AB0(v6, v7, v4, v3, 1);
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 32) = a1;
    *(_QWORD *)(v2 + 40) = a2;
    *(_QWORD *)(v2 + 48) = v4;
    *(_QWORD *)(v2 + 56) = v3;
    *(_BYTE *)(v2 + 64) = 0;
    sub_23C7DF858();
    return sub_23C830AB0(v6, v9, v4, v3, v5);
  }
}

void FTS5TableDefinition.content.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  FTS5TableDefinition.content.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_23C7DB390();
}

void sub_23C82F6E8(uint64_t a1, char a2)
{
  sub_23C82F810(a1, a2);
}

void FTS5TableDefinition.contentRowID.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
    sub_23C7DF858();
  sub_23C7DB390();
}

void sub_23C82F72C()
{
  sub_23C7DC46C();
  sub_23C830ACC();
  sub_23C7DB3A0();
}

uint64_t FTS5TableDefinition.contentRowID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(unsigned __int8 *)(v2 + 64);
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  if (v4 == 1)
  {
    v7 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = a1;
    *(_QWORD *)(v2 + 56) = a2;
    *(_BYTE *)(v2 + 64) = 0;
    return sub_23C830AB0(v3, v5, v6, v7, 1);
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 48) = a1;
    *(_QWORD *)(v2 + 56) = a2;
    *(_BYTE *)(v2 + 64) = 0;
    sub_23C7DC46C();
    return sub_23C830AB0(v3, v5, v6, v9, v4);
  }
}

void FTS5TableDefinition.contentRowID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  FTS5TableDefinition.contentRowID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_23C7DB390();
}

void sub_23C82F804(uint64_t a1, char a2)
{
  sub_23C82F810(a1, a2);
}

void sub_23C82F810(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    sub_23C7DC46C();
    sub_23C830ACC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C830ACC();
    sub_23C7DB3A0();
  }
}

uint64_t FTS5TableDefinition.prefixes.getter()
{
  sub_23C7E6180();
  return swift_bridgeObjectRetain();
}

void FTS5TableDefinition.prefixes.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23C7E6180();
  *(_QWORD *)(v1 + 80) = a1;
  swift_bridgeObjectRelease();
  sub_23C7DF890();
}

void FTS5TableDefinition.prefixes.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t FTS5TableDefinition.columnSize.getter()
{
  uint64_t v0;

  sub_23C7E6180();
  return *(_QWORD *)(v0 + 88);
}

void FTS5TableDefinition.columnSize.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_23C7E6180();
  *(_QWORD *)(v2 + 88) = a1;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  sub_23C7DF304();
}

void FTS5TableDefinition.columnSize.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t FTS5TableDefinition.detail.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E6180();
  v1 = *(_QWORD *)(v0 + 104);
  sub_23C7DB3D4();
  return v1;
}

void FTS5TableDefinition.detail.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7E6180();
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  swift_bridgeObjectRelease();
  sub_23C7DF304();
}

void FTS5TableDefinition.detail.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t sub_23C82FA50(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 16) = v2;
  return v1;
}

uint64_t FTS5TableDefinition.column(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for FTS5ColumnDefinition();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 32) = 1;
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  MEMORY[0x242624CE4](v6);
  sub_23C7DD090(*(_QWORD *)((*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFF8) + 0x10));
  sub_23C911148();
  sub_23C9110DC();
  swift_endAccess();
  return v5;
}

Swift::Void __swiftcall FTS5TableDefinition.synchronize(withTable:)(Swift::String withTable)
{
  uint64_t v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  object = withTable._object;
  v3 = *(_QWORD *)(v1 + 32);
  withTable._object = *(void **)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_BYTE *)(v1 + 64);
  *(_QWORD *)(v1 + 32) = withTable._countAndFlagsBits;
  *(_QWORD *)(v1 + 40) = object;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  sub_23C82FE58(v3, (uint64_t)withTable._object, v4, v5, v6);
  swift_bridgeObjectRetain();
}

uint64_t FTS5TableDefinition.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  sub_23C82FE58(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FTS5TableDefinition.__deallocating_deinit()
{
  FTS5TableDefinition.deinit();
  return swift_deallocClassInstance();
}

uint64_t FTS5ColumnDefinition.notIndexed()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 32) = 0;
  return swift_retain();
}

uint64_t FTS5ColumnDefinition.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  return v0;
}

uint64_t FTS5ColumnDefinition.__deallocating_deinit()
{
  sub_23C7EE024();
  return swift_deallocClassInstance();
}

void static Column.rank.getter(_QWORD *a1@<X8>)
{
  sub_23C830B34(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.dropFTS5SynchronizationTriggers(forTable:)(Swift::String forTable)
{
  Swift::String v1;
  GRDBInternal::StatementArguments v2;
  _QWORD v3[2];

  sub_23C911634();
  sub_23C7EE11C();
  sub_23C910F5C();
  sub_23C7E1784();
  sub_23C7EDB84();
  sub_23C7E9848();
  sub_23C7E3164();
  sub_23C7DC474();
  sub_23C7E9848();
  sub_23C7DC474();
  sub_23C7E9848();
  sub_23C7E1784();
  sub_23C7EDB84();
  sub_23C7DE9D4();
  sub_23C7E3164();
  sub_23C7DBCD0();
  sub_23C7DE9D4();
  sub_23C7DBCD0();
  sub_23C7E9848();
  sub_23C7E1784();
  sub_23C7DFA58();
  sub_23C7EDB84();
  sub_23C7E1784();
  sub_23C7E3164();
  sub_23C7DB398();
  sub_23C7E1784();
  sub_23C7DB398();
  sub_23C7E06E4();
  v1._countAndFlagsBits = 0;
  v3[0] = MEMORY[0x24BEE4AF8];
  v3[1] = MEMORY[0x24BEE4B00];
  v2.values._rawValue = v3;
  v1._object = (void *)0xE000000000000000;
  Database.execute(sql:arguments:)(v1, v2);
  sub_23C7DB398();
  sub_23C7DC474();
  sub_23C7DB3DC();
}

uint64_t sub_23C82FE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C82FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a5 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C82FE94(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DE9B8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C8302C8(v6);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for FTS5ColumnDefinition()
{
  return objc_opt_self();
}

unint64_t sub_23C82FF20()
{
  unint64_t result;

  result = qword_256BCC5B0;
  if (!qword_256BCC5B0)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5.Diacritics, &type metadata for FTS5.Diacritics);
    atomic_store(result, (unint64_t *)&qword_256BCC5B0);
  }
  return result;
}

void sub_23C82FF5C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  FTS5TableDefinition.content.getter();
  *a1 = v2;
  a1[1] = v3;
  sub_23C7DB390();
}

void sub_23C82FF80()
{
  sub_23C82F72C();
}

void sub_23C82FF9C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  FTS5TableDefinition.contentRowID.getter();
  *a1 = v2;
  a1[1] = v3;
  sub_23C7DB390();
}

void sub_23C82FFC0()
{
  sub_23C82F72C();
}

void type metadata accessor for FTS5()
{
  sub_23C7DFB90();
}

uint64_t storeEnumTagSinglePayload for FTS5.Diacritics(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C830034 + 4 * byte_23C914A15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C830068 + 4 * byte_23C914A10[v4]))();
}

uint64_t sub_23C830068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C830070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C830078);
  return result;
}

uint64_t sub_23C830084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C83008CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C830090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C830098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for FTS5.Diacritics()
{
  sub_23C7DFB90();
}

uint64_t method lookup function for FTS5TableDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for FTS5ColumnDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C8300C8(uint64_t a1)
{
  return sub_23C82FE58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_23C8300DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C82FE2C(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_23C83013C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C82FE2C(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_23C82FE58(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for TableAlias.Impl(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_23C8301C0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_23C82FE58(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t sub_23C830208(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C830248(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C830290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_23C830298(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

void type metadata accessor for FTS5TableDefinition.ContentMode()
{
  sub_23C7DFB90();
}

void sub_23C8302B0()
{
  sub_23C82DB38();
}

uint64_t sub_23C8302C8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v2 = a1;
  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_127;
    if (v3)
      return sub_23C8308C8(0, v3, 1, v2);
    return result;
  }
  if (v3 < -1)
    goto LABEL_126;
  v85 = result;
  v86 = v3;
  if (v3 > 1)
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v84 = result;
    v88 = (char *)(result + 32);
LABEL_10:
    v6 = 0;
    v7 = *v2;
    v82 = v2;
    v83 = *v2 - 8;
    v8 = MEMORY[0x24BEE4AF8];
    v87 = *v2;
    while (1)
    {
      v9 = v6++;
      if (v6 < v3)
      {
        v10 = *(_QWORD *)(v7 + 8 * v6);
        v11 = *(_QWORD *)(v7 + 8 * v9);
        v6 = v9 + 2;
        if (v9 + 2 < v3)
        {
          v12 = v10;
          while (1)
          {
            v13 = *(_QWORD *)(v7 + 8 * v6);
            if (v10 < v11 == v13 >= v12)
              break;
            ++v6;
            v12 = v13;
            if (v6 >= v3)
            {
              v6 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v6 < v9)
            goto LABEL_128;
          if (v9 < v6)
          {
            v14 = v6 - 1;
            v15 = v9;
            do
            {
              if (v15 != v14)
              {
                if (!v7)
                  goto LABEL_133;
                v16 = *(_QWORD *)(v7 + 8 * v15);
                *(_QWORD *)(v7 + 8 * v15) = *(_QWORD *)(v7 + 8 * v14);
                *(_QWORD *)(v7 + 8 * v14) = v16;
              }
              v56 = ++v15 < v14--;
            }
            while (v56);
          }
        }
      }
      if (v6 < v3)
      {
        if (__OFSUB__(v6, v9))
          goto LABEL_125;
        if (v6 - v9 < v85)
        {
          v17 = v9 + v85;
          if (__OFADD__(v9, v85))
            goto LABEL_129;
          if (v17 >= v3)
            v17 = v3;
          if (v17 < v9)
          {
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v6 != v17)
          {
            v18 = (uint64_t *)(v83 + 8 * v6);
            do
            {
              v19 = *(_QWORD *)(v7 + 8 * v6);
              v20 = v9;
              v21 = v18;
              do
              {
                v22 = *v21;
                if (v19 >= *v21)
                  break;
                if (!v7)
                  goto LABEL_131;
                *v21 = v19;
                v21[1] = v22;
                --v21;
                ++v20;
              }
              while (v6 != v20);
              ++v6;
              ++v18;
            }
            while (v6 != v17);
            v6 = v17;
          }
        }
      }
      if (v6 < v9)
        goto LABEL_120;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v24 = *(_QWORD *)(v8 + 16);
      v23 = *(_QWORD *)(v8 + 24);
      v25 = v24 + 1;
      v7 = v87;
      if (v24 >= v23 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v23 > 1), v24 + 1, 1, (char *)v8);
        v7 = v87;
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v25;
      v26 = v8 + 32;
      v27 = (uint64_t *)(v8 + 32 + 16 * v24);
      *v27 = v9;
      v27[1] = v6;
      if (v24)
      {
        while (1)
        {
          v28 = v25 - 1;
          if (v25 >= 4)
          {
            v33 = v26 + 16 * v25;
            v34 = *(_QWORD *)(v33 - 64);
            v35 = *(_QWORD *)(v33 - 56);
            v39 = __OFSUB__(v35, v34);
            v36 = v35 - v34;
            if (v39)
              goto LABEL_109;
            v38 = *(_QWORD *)(v33 - 48);
            v37 = *(_QWORD *)(v33 - 40);
            v39 = __OFSUB__(v37, v38);
            v31 = v37 - v38;
            v32 = v39;
            if (v39)
              goto LABEL_110;
            v40 = v25 - 2;
            v41 = (uint64_t *)(v26 + 16 * (v25 - 2));
            v43 = *v41;
            v42 = v41[1];
            v39 = __OFSUB__(v42, v43);
            v44 = v42 - v43;
            if (v39)
              goto LABEL_111;
            v39 = __OFADD__(v31, v44);
            v45 = v31 + v44;
            if (v39)
              goto LABEL_113;
            if (v45 >= v36)
            {
              v63 = (uint64_t *)(v26 + 16 * v28);
              v65 = *v63;
              v64 = v63[1];
              v39 = __OFSUB__(v64, v65);
              v66 = v64 - v65;
              if (v39)
                goto LABEL_119;
              v56 = v31 < v66;
              goto LABEL_77;
            }
          }
          else
          {
            if (v25 != 3)
            {
              v57 = *(_QWORD *)(v8 + 32);
              v58 = *(_QWORD *)(v8 + 40);
              v39 = __OFSUB__(v58, v57);
              v50 = v58 - v57;
              v51 = v39;
              goto LABEL_71;
            }
            v30 = *(_QWORD *)(v8 + 32);
            v29 = *(_QWORD *)(v8 + 40);
            v39 = __OFSUB__(v29, v30);
            v31 = v29 - v30;
            v32 = v39;
          }
          if ((v32 & 1) != 0)
            goto LABEL_112;
          v40 = v25 - 2;
          v46 = (uint64_t *)(v26 + 16 * (v25 - 2));
          v48 = *v46;
          v47 = v46[1];
          v49 = __OFSUB__(v47, v48);
          v50 = v47 - v48;
          v51 = v49;
          if (v49)
            goto LABEL_114;
          v52 = (uint64_t *)(v26 + 16 * v28);
          v54 = *v52;
          v53 = v52[1];
          v39 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v39)
            goto LABEL_116;
          if (__OFADD__(v50, v55))
            goto LABEL_118;
          if (v50 + v55 >= v31)
          {
            v56 = v31 < v55;
LABEL_77:
            if (v56)
              v28 = v40;
            goto LABEL_79;
          }
LABEL_71:
          if ((v51 & 1) != 0)
            goto LABEL_115;
          v59 = (uint64_t *)(v26 + 16 * v28);
          v61 = *v59;
          v60 = v59[1];
          v39 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v39)
            goto LABEL_117;
          if (v62 < v50)
            goto LABEL_88;
LABEL_79:
          v67 = v28 - 1;
          if (v28 - 1 >= v25)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (!v7)
            goto LABEL_132;
          v68 = (uint64_t *)(v26 + 16 * v67);
          v69 = *v68;
          v70 = v26;
          v71 = (_QWORD *)(v26 + 16 * v28);
          v72 = v71[1];
          result = sub_23C830920((char *)(v7 + 8 * *v68), (char *)(v7 + 8 * *v71), v7 + 8 * v72, v88);
          if (v1)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v84 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v72 < v69)
            goto LABEL_106;
          if (v28 > *(_QWORD *)(v8 + 16))
            goto LABEL_107;
          *v68 = v69;
          *(_QWORD *)(v70 + 16 * v67 + 8) = v72;
          v73 = *(_QWORD *)(v8 + 16);
          if (v28 >= v73)
            goto LABEL_108;
          v25 = v73 - 1;
          result = (uint64_t)memmove(v71, v71 + 2, 16 * (v73 - 1 - v28));
          v26 = v70;
          *(_QWORD *)(v8 + 16) = v73 - 1;
          v7 = v87;
          if (v73 <= 2)
            goto LABEL_88;
        }
      }
      v25 = 1;
LABEL_88:
      v3 = v86;
      if (v6 >= v86)
      {
        v5 = v84;
        v2 = v82;
        goto LABEL_93;
      }
    }
  }
  v5 = MEMORY[0x24BEE4AF8];
  v88 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v84 = MEMORY[0x24BEE4AF8];
    goto LABEL_10;
  }
  v25 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v8 = MEMORY[0x24BEE4AF8];
LABEL_93:
  v84 = v5;
  if (v25 >= 2)
  {
    v74 = *v2;
    do
    {
      v75 = v25 - 2;
      if (v25 < 2)
        goto LABEL_121;
      if (!v74)
        goto LABEL_134;
      v76 = v8;
      v77 = v8 + 32;
      v78 = *(_QWORD *)(v8 + 32 + 16 * v75);
      v79 = *(_QWORD *)(v8 + 32 + 16 * (v25 - 1) + 8);
      result = sub_23C830920((char *)(v74 + 8 * v78), (char *)(v74 + 8 * *(_QWORD *)(v77 + 16 * (v25 - 1))), v74 + 8 * v79, v88);
      if (v1)
        goto LABEL_90;
      if (v79 < v78)
        goto LABEL_122;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v76 = result;
      }
      if (v75 >= *(_QWORD *)(v76 + 16))
        goto LABEL_123;
      v80 = (_QWORD *)(v76 + 32 + 16 * v75);
      *v80 = v78;
      v80[1] = v79;
      v81 = *(_QWORD *)(v76 + 16);
      if (v25 > v81)
        goto LABEL_124;
      result = (uint64_t)memmove((void *)(v76 + 32 + 16 * (v25 - 1)), (const void *)(v76 + 32 + 16 * v25), 16 * (v81 - v25));
      v8 = v76;
      *(_QWORD *)(v76 + 16) = v81 - 1;
      v25 = v81 - 1;
    }
    while (v81 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v84 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8308C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C830920(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_23C902418(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_23C902418(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  v24 = (v12 - v4) / 8;
  if (v6 != v4 || v6 >= &v4[8 * v24])
    memmove(v6, v4, 8 * v24);
  return 1;
}

uint64_t sub_23C830AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_23C82FE58(a1, a2, a3, a4, a5);
}

uint64_t sub_23C830ACC()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_23C830AD8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C830AE4()
{
  return 0;
}

uint64_t sub_23C830AF4()
{
  return type metadata accessor for SQLGenerationContext();
}

uint64_t sub_23C830B04()
{
  return swift_retain();
}

uint64_t sub_23C830B10()
{
  return sub_23C910F5C();
}

uint64_t sub_23C830B28()
{
  return swift_retain();
}

void sub_23C830B34(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0xE400000000000000;
}

void sub_23C830B40()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 208) = 34;
  *(_QWORD *)(v0 - 200) = 0xE100000000000000;
}

_QWORD *FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(a1, v5, AssociatedTypeWitness, a2, a4, a5, a3);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  sub_23C7E6A0C();
  sub_23C7EE1E8();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible.fetchOne<A>(_:_:)(v8, v5, AssociatedTypeWitness, v7, a5, v6);
}

void FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_23C830C20(a1, a2, a3, a4, a5, (void (*)(uint64_t))static DatabaseValueConvertible<>.fetchCursor<A>(_:_:));
}

{
  sub_23C8D593C(a1, a2, a3, a4, a5, (void (*)(uint64_t))static Optional<A>.fetchCursor<A>(_:_:));
}

void FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_23C830C20(a1, a2, a3, a4, a5, (void (*)(uint64_t))static DatabaseValueConvertible<>.fetchAll<A>(_:_:));
}

{
  sub_23C8D593C(a1, a2, a3, a4, a5, (void (*)(uint64_t))static Optional<A>.fetchAll<A>(_:_:));
}

void sub_23C830C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  sub_23C7E57AC();
  sub_23C7E57C4();
  v7 = sub_23C832808();
  a6(v7);
  sub_23C7DEFC0();
}

void FetchRequest<>.fetchSet(_:)()
{
  uint64_t v0;

  sub_23C7E57AC();
  sub_23C7E57C4();
  v0 = sub_23C832808();
  static DatabaseValueConvertible<>.fetchSet<A>(_:_:)(v0);
  sub_23C7DEFC0();
}

{
  uint64_t v0;

  sub_23C7DF604();
  sub_23C7DBBEC();
  sub_23C832874();
  v0 = sub_23C7E6AC0();
  static Optional<A>.fetchSet<A>(_:_:)(v0);
  sub_23C7DF89C();
}

{
  uint64_t v0;

  sub_23C7E6A0C();
  sub_23C7EE1E8();
  v0 = sub_23C7E262C();
  static DatabaseValueConvertible<>.fetchSet<A>(_:_:)(v0);
  sub_23C7EE330();
}

{
  uint64_t v0;

  sub_23C7E57AC();
  sub_23C8D6A10();
  sub_23C7DBC30();
  v0 = sub_23C8D69F8();
  static Optional<A>.fetchSet<A>(_:_:)(v0);
  sub_23C7DEFC0();
}

void FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_23C830D04(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))static Optional<A>.fetchCursor<A>(_:_:));
}

void FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_23C830D04(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))static Optional<A>.fetchAll<A>(_:_:));
}

void sub_23C830D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v8;

  sub_23C7DF604();
  sub_23C7DBBEC();
  sub_23C832874();
  v8 = sub_23C7E6AC0();
  a7(v8);
  sub_23C7DF89C();
}

void FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;

  sub_23C7E57AC();
  sub_23C7E57C4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(v10, v6, AssociatedTypeWitness, v9, v7, a6, v8);
  sub_23C7DF89C();
}

void static DatabaseValueConvertible<>.fetchOne(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[5];
  uint64_t v86[8];
  _QWORD v87[24];

  sub_23C7DEF5C();
  v50 = v0;
  v55 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v12 = *v10;
  v11 = v10[1];
  sub_23C7DF56C(v13, (uint64_t)v85);
  sub_23C7E79A8(&qword_25430DA08);
  v14 = sub_23C7E41DC();
  *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
  v87[0] = v7;
  v87[1] = v5;
  v87[2] = v12;
  v87[3] = v11;
  v15 = sub_23C7F96B0(v87);
  v23 = sub_23C7DD174((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v50, v55, v60, v63, v66, v69, v72, v75, v77, v79, v80,
          v81,
          v82,
          v83,
          v84,
          v85[0],
          v85[1],
          v85[2],
          v85[3],
          v85[4],
          v86[0],
          v86[1],
          v86[2],
          v86[3],
          v86[4],
          v86[5],
          v86[6],
          v86[7],
          v87[0]);
  sub_23C7E5EA4((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30, v51, v56);
  sub_23C7E6E64();
  sub_23C7E6260();
  v31 = sub_23C7DB3B8();
  v33 = sub_23C7E17A4(v31, v32);
  *(_QWORD *)&v41 = sub_23C7E41C0(v33, v34, v35, v36, v37, v38, v39, v40, v52, v57, v61, v64, v67, v70, v73).n128_u64[0];
  sub_23C7DB6A8(v42, &qword_25430DBD0, v43, v44, v45, v46, v47, v48, v53, v58, v62, v65, v68, v71, v74, v76, v78, v41);
  sub_23C7DBD08();
  v49 = sub_23C7DB6A0();
  static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(v9, (uint64_t)v86, v3, v14, v54, v59, v49);
  sub_23C7E7938((uint64_t)v86, &qword_25430DA18);
  sub_23C7DEF28();
}

#error "23C830F70: call analysis failed (funcsize=22)"

#error "23C830FCC: call analysis failed (funcsize=22)"

#error "23C831028: call analysis failed (funcsize=22)"

#error "23C831084: call analysis failed (funcsize=22)"

uint64_t sub_23C8310CC()
{
  return sub_23C8310E0();
}

#error "23C8310F4: call analysis failed (funcsize=22)"

#error "23C831150: call analysis failed (funcsize=22)"

#error "23C8311AC: call analysis failed (funcsize=22)"

#error "23C831208: call analysis failed (funcsize=22)"

#error "23C831264: call analysis failed (funcsize=22)"

#error "23C8312C0: call analysis failed (funcsize=22)"

#error "23C83131C: call analysis failed (funcsize=22)"

#error "23C831378: call analysis failed (funcsize=22)"

#error "23C8313D4: call analysis failed (funcsize=22)"

#error "23C831430: call analysis failed (funcsize=22)"

void static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  sqlite3_stmt *v52;
  void (*v53)(uint64_t *__return_ptr);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  sqlite3_stmt *v65;
  int v66;

  sub_23C7E6244();
  a47 = v48;
  a48 = v49;
  a38 = v50;
  v66 = v51;
  v65 = v52;
  v53(&a28);
  v55 = a28;
  v54 = a29;
  v56 = a30;
  v57 = a32;
  v58 = a33;
  v64 = a29;
  v59 = a34;
  v60 = a35;
  v61 = a31;
  sub_23C83256C();
  sub_23C7DB694();
  v63 = v62;
  a20 = v55;
  a21 = v54;
  a22 = v56;
  a23 = v61;
  a24 = v57;
  a25 = v58;
  a26 = v59;
  a27 = v60;
  sub_23C7EEF08(v65, v66, (uint64_t)&a17);
  sub_23C7E3234();
  sub_23C8152BC(a38, (uint64_t)&a20, v63);
  sub_23C7E5640(v57, v59, v60);
  swift_release();
  sub_23C815EF0(v64, v56, v61);
  swift_bridgeObjectRelease();
  sub_23C7E13C4(v59);
  swift_willThrow();
  sub_23C7E41A4();
}

#error "23C831658: call analysis failed (funcsize=68)"

#error "23C8317AC: call analysis failed (funcsize=96)"

#error "23C8318F8: call analysis failed (funcsize=71)"

#error "23C831A94: call analysis failed (funcsize=105)"

void sub_23C831AE0(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  char v5;

  v4 = a1;
  v5 = 1;
  v3 = (_QWORD *)swift_retain();
  RowDecodingContext.init(row:key:)(v3, &v4, a2);
  sub_23C7DF890();
}

void FastDatabaseValueCursor._isDone.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  sub_23C7DF890();
}

uint64_t (*FastDatabaseValueCursor._isDone.modify())()
{
  sub_23C7DF364();
  return j__swift_endAccess;
}

uint64_t FastDatabaseValueCursor.columnIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

#error "23C831C60: call analysis failed (funcsize=64)"

void (*sub_23C831C8C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FastDatabaseValueCursor._isDone.modify();
  return sub_23C831CD0;
}

uint64_t sub_23C831CD4()
{
  return FastDatabaseValueCursor._element(sqliteStatement:)();
}

uint64_t (*FastNullableDatabaseValueCursor._isDone.modify())()
{
  sub_23C7DF364();
  return j_j__swift_endAccess;
}

uint64_t sub_23C831D24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2();
  return RowDecodingContext.init(statement:index:)(v3, *(int *)(a1 + 28));
}

void (*sub_23C831D50(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FastNullableDatabaseValueCursor._isDone.modify();
  return sub_23C831CD0;
}

void static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_23C8327A0();
  v4 = type metadata accessor for FastDatabaseValueCursor(v0, v1, v2, v3);
  sub_23C7EFA7C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  swift_retain();
  v12 = sub_23C7DFA20();
  sub_23C8327C4(v12);
  sub_23C7DB40C();
}

void static DatabaseValueConvertible<>.fetchAll(_:arguments:adapter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EF9E0(a1, a2);
  static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_23C91119C();
    v4 = sub_23C7EF934();
    v8 = type metadata accessor for FastDatabaseValueCursor(v4, v5, v6, v7);
    MEMORY[0x242626100](MEMORY[0x24BEE12E8], v3);
    v9 = MEMORY[0x242626100](&protocol conformance descriptor for FastDatabaseValueCursor<A>, v8);
    sub_23C7DC4F0(v9, v10, v11);
  }
  sub_23C7E1130();
}

void static DatabaseValueConvertible<>.fetchSet(_:arguments:adapter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;

  static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)();
  if (!v6)
  {
    v10 = type metadata accessor for FastDatabaseValueCursor(0, a4, a5, a6);
    MEMORY[0x242626100](&protocol conformance descriptor for FastDatabaseValueCursor<A>, v10);
    Set.init<A>(_:)();
  }
}

void static DatabaseValueConvertible<>.fetchCursor(_:sql:arguments:adapter:)()
{
  sub_23C831F68();
  sub_23C7E1A0C();
}

uint64_t static DatabaseValueConvertible<>.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C832034(a1, a2, a3, a4, a5, a6, a7, static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:));
}

void static DatabaseValueConvertible<>.fetchAll(_:sql:arguments:adapter:)()
{
  sub_23C831F68();
  sub_23C7E1A0C();
}

void sub_23C831F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  sub_23C7DEF5C();
  sub_23C7ECFF8(v4, v5, v6, v7, v8, v9, v10, v11, v63, v70, v77, v82, v87, v92, v97, v103, v108, v113, v117, v121);
  sub_23C7E79A8(&qword_25430DA08);
  v12 = sub_23C7E41DC();
  *(_OWORD *)(v12 + 16) = xmmword_23C912A20;
  v159 = v3;
  v160 = v1;
  v161 = v2;
  v162 = v0;
  v13 = sub_23C7F96B0(&v159);
  v21 = sub_23C7ECBF4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v64, v71, v78, v83, v88, v93, v98, v104, v109, v114, v118,
          v122,
          v125,
          v128,
          v131,
          v134,
          v137,
          v140,
          v143,
          v146,
          v149,
          v152,
          v153,
          v154,
          v155,
          v156,
          v157,
          v158,
          v159);
  sub_23C7E5EA4((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28, v65, v72);
  *(_QWORD *)&v99 = 0;
  *((_QWORD *)&v99 + 1) = v12;
  sub_23C7DB3B8();
  swift_bridgeObjectRetain();
  v29 = swift_bridgeObjectRetain();
  v31 = sub_23C7E17A4(v29, v30);
  *(_QWORD *)&v39 = sub_23C7E41C0(v31, v32, v33, v34, v35, v36, v37, v38, v66, v73, 0, 0, 0, 0, v99).n128_u64[0];
  sub_23C7DB6A8(v40, &qword_25430DBD0, v41, v42, v43, v44, v45, v46, v67, v74, v79, v84, v89, v94, v100, v105, v110, v39);
  sub_23C7DBD08();
  v47 = sub_23C7DB6A0();
  v55 = sub_23C7E2580(v47, v48, v49, v50, v51, v52, v53, v54, v68, v75, v80, v85, v90, v95, v101, v106, v111, v115, v119,
          v123,
          v126,
          v129,
          v132,
          v135,
          v138,
          v141,
          v144,
          v147,
          v150);
  sub_23C7E8E18(v55, v56, v57, v58, v59, v60, v61, v62, v69, v76, v81, v86, v91, v96, v102, v107, v112, v116, v120,
    v124,
    v127,
    v130,
    v133,
    v136,
    v139,
    v142,
    v145,
    v148,
    v151);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

uint64_t static DatabaseValueConvertible<>.fetchAll<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C832034(a1, a2, a3, a4, a5, a6, a7, static DatabaseValueConvertible<>.fetchAll(_:arguments:adapter:));
}

#error "23C832048: call analysis failed (funcsize=16)"

_QWORD *static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *result;
  _QWORD v9[8];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 32))(v9, a1, 1, a4, a7);
  if (!v7)
  {
    swift_retain();
    static DatabaseValueConvertible<>.fetchOne(_:arguments:adapter:)();
    sub_23C812C40((uint64_t)v9);
    return (_QWORD *)swift_release();
  }
  return result;
}

void static DatabaseValueConvertible<>.fetchSet(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  sub_23C7DEF5C();
  sub_23C7E6C24(v4, v5, v6, v7, v8, v9, v10, v11, v55, v61, v67, v72, v77, v82, v87, v92, v96, v100, v103, v106);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7E41DC() + 16) = xmmword_23C912A20;
  v134 = v0;
  v135 = v2;
  v136 = v3;
  v137 = v1;
  v12 = sub_23C7F96B0(&v134);
  v20 = sub_23C7DD174((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v56, v62, v68, v73, v78, v83, v88, v93, v97, v101, v104,
          v107,
          v109,
          v111,
          v113,
          v115,
          v117,
          v119,
          v121,
          v123,
          v125,
          v127,
          v128,
          v129,
          v130,
          v131,
          v132,
          v133,
          v134);
  sub_23C7E5EA4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v57, v63);
  sub_23C7E6E64();
  sub_23C7E6260();
  v28 = sub_23C7DB3B8();
  v30 = sub_23C7E17A4(v28, v29);
  *(_QWORD *)&v38 = sub_23C7E41C0(v30, v31, v32, v33, v34, v35, v36, v37, v58, v64, v69, v74, v79, v84, v89).n128_u64[0];
  sub_23C7DB6A8(v39, &qword_25430DBD0, v40, v41, v42, v43, v44, v45, v59, v65, v70, v75, v80, v85, v90, v94, v98, v38);
  sub_23C7DBD08();
  sub_23C7DB6A0();
  v46 = sub_23C7DB440();
  v47 = static DatabaseValueConvertible<>.fetchSet<A>(_:_:)(v46);
  sub_23C7E8E18(v47, v48, v49, v50, v51, v52, v53, v54, v60, v66, v71, v76, v81, v86, v91, v95, v99, v102, v105,
    v108,
    v110,
    v112,
    v114,
    v116,
    v118,
    v120,
    v122,
    v124,
    v126);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  sub_23C7DEF5C();
  sub_23C7E8C8C(v4, v5, v6, v7, v8, v9, v10, v11, v55, v11, v66, v71, v76, v81, v86, v91, v95, v99, v102, v105);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7E41DC() + 16) = xmmword_23C912A20;
  v133 = v3;
  v134 = v2;
  v135 = v1;
  v136 = v0;
  v12 = sub_23C7F96B0(&v133);
  v20 = sub_23C7ECBF4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v56, v61, v67, v72, v77, v82, v87, v92, v96, v100, v103,
          v106,
          v108,
          v110,
          v112,
          v114,
          v116,
          v118,
          v120,
          v122,
          v124,
          v126,
          v127,
          v128,
          v129,
          v130,
          v131,
          v132,
          v133);
  sub_23C7E5EA4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v57, v62);
  sub_23C7E1C8C();
  sub_23C7DB3B8();
  v28 = sub_23C7DBBB8();
  v30 = sub_23C7E17A4(v28, v29);
  *(_QWORD *)&v38 = sub_23C7E41C0(v30, v31, v32, v33, v34, v35, v36, v37, v58, v63, v68, v73, v78, v83, v88).n128_u64[0];
  sub_23C7DB6A8(v39, &qword_25430DBD0, v40, v41, v42, v43, v44, v45, v59, v64, v69, v74, v79, v84, v89, v93, v97, v38);
  sub_23C7DBD08();
  sub_23C7DB6A0();
  v46 = sub_23C7DEB08();
  v47 = static DatabaseValueConvertible<>.fetchSet<A>(_:_:)(v46);
  sub_23C7E8E18(v47, v48, v49, v50, v51, v52, v53, v54, v60, v65, v70, v75, v80, v85, v90, v94, v98, v101, v104,
    v107,
    v109,
    v111,
    v113,
    v115,
    v117,
    v119,
    v121,
    v123,
    v125);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

#error "23C8321E4: call analysis failed (funcsize=17)"

void static Optional<A>.fetchCursor(_:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_23C8327A0();
  v4 = type metadata accessor for FastNullableDatabaseValueCursor(v0, v1, v2, v3);
  sub_23C7EFA7C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  swift_retain();
  v12 = sub_23C7DFA20();
  sub_23C8327C4(v12);
  sub_23C7DB40C();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_23C8D69C0();
  v4 = type metadata accessor for NullableDatabaseValueCursor(v0, v1, v2, v3);
  sub_23C7EFA7C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20);
  sub_23C7DF5CC();
  v12 = sub_23C7DFA20();
  sub_23C7ED1BC(v12);
  sub_23C7DB40C();
}

void static Optional<A>.fetchAll(_:arguments:adapter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EF9E0(a1, a2);
  static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_23C9114E4();
    sub_23C91119C();
    v4 = sub_23C7EF934();
    v8 = type metadata accessor for FastNullableDatabaseValueCursor(v4, v5, v6, v7);
    MEMORY[0x242626100](MEMORY[0x24BEE12E8], v3);
    v9 = MEMORY[0x242626100](&protocol conformance descriptor for FastNullableDatabaseValueCursor<A>, v8);
    sub_23C7DC4F0(v9, v10, v11);
  }
  sub_23C7E1130();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C8D69E0(a1, a2);
  static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_23C9114E4();
    sub_23C91119C();
    v4 = sub_23C7EFA20();
    v8 = type metadata accessor for NullableDatabaseValueCursor(v4, v5, v6, v7);
    MEMORY[0x242626100](MEMORY[0x24BEE12E8], v3);
    v9 = MEMORY[0x242626100](&protocol conformance descriptor for NullableDatabaseValueCursor<A>, v8);
    sub_23C7E8F2C(v9, v10, v11);
  }
  sub_23C7DB764();
}

void static Optional<A>.fetchSet(_:arguments:adapter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v7)
  {
    v12 = sub_23C9114E4();
    v13 = type metadata accessor for FastNullableDatabaseValueCursor(0, a4, a5, a6);
    v14 = a7;
    MEMORY[0x242626100](MEMORY[0x24BEE4AB0], v12, &v14);
    MEMORY[0x242626100](&protocol conformance descriptor for FastNullableDatabaseValueCursor<A>, v13);
    Set.init<A>(_:)();
  }
}

void static Optional<A>.fetchCursor(_:sql:arguments:adapter:)()
{
  sub_23C831F68();
  sub_23C7E1A0C();
}

{
  sub_23C8D6148();
}

uint64_t static Optional<A>.fetchCursor<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C832034(a1, a2, a3, a4, a5, a6, a7, static Optional<A>.fetchCursor(_:arguments:adapter:));
}

void static Optional<A>.fetchAll(_:sql:arguments:adapter:)()
{
  sub_23C831F68();
  sub_23C7E1A0C();
}

{
  sub_23C8D6148();
}

uint64_t static Optional<A>.fetchAll<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C832034(a1, a2, a3, a4, a5, a6, a7, static Optional<A>.fetchAll(_:arguments:adapter:));
}

void static Optional<A>.fetchSet(_:sql:arguments:adapter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  sub_23C7DEF5C();
  sub_23C7E6C24(v4, v5, v6, v7, v8, v9, v10, v11, v55, v61, v67, v72, v77, v82, v87, v92, v96, v100, v103, v106);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7E41DC() + 16) = xmmword_23C912A20;
  v134 = v0;
  v135 = v2;
  v136 = v3;
  v137 = v1;
  v12 = sub_23C7F96B0(&v134);
  v20 = sub_23C7DD174((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v56, v62, v68, v73, v78, v83, v88, v93, v97, v101, v104,
          v107,
          v109,
          v111,
          v113,
          v115,
          v117,
          v119,
          v121,
          v123,
          v125,
          v127,
          v128,
          v129,
          v130,
          v131,
          v132,
          v133,
          v134);
  sub_23C7E5EA4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v57, v63);
  sub_23C7E6E64();
  sub_23C7E6260();
  v28 = sub_23C7DB3B8();
  v30 = sub_23C7E17A4(v28, v29);
  *(_QWORD *)&v38 = sub_23C7E41C0(v30, v31, v32, v33, v34, v35, v36, v37, v58, v64, v69, v74, v79, v84, v89).n128_u64[0];
  sub_23C7DB6A8(v39, &qword_25430DBD0, v40, v41, v42, v43, v44, v45, v59, v65, v70, v75, v80, v85, v90, v94, v98, v38);
  sub_23C7DBD08();
  sub_23C7DB6A0();
  v46 = sub_23C7DB440();
  v47 = static Optional<A>.fetchSet<A>(_:_:)(v46);
  sub_23C7E8E18(v47, v48, v49, v50, v51, v52, v53, v54, v60, v66, v71, v76, v81, v86, v91, v95, v99, v102, v105,
    v108,
    v110,
    v112,
    v114,
    v116,
    v118,
    v120,
    v122,
    v124,
    v126);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  sub_23C7DEF5C();
  sub_23C7E8C8C(v4, v5, v6, v7, v8, v9, v10, v11, v55, v11, v66, v71, v76, v81, v86, v91, v95, v99, v102, v105);
  sub_23C7E79A8(&qword_25430DA08);
  *(_OWORD *)(sub_23C7E41DC() + 16) = xmmword_23C912A20;
  v133 = v3;
  v134 = v2;
  v135 = v1;
  v136 = v0;
  v12 = sub_23C7F96B0(&v133);
  v20 = sub_23C7ECBF4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v56, v61, v67, v72, v77, v82, v87, v92, v96, v100, v103,
          v106,
          v108,
          v110,
          v112,
          v114,
          v116,
          v118,
          v120,
          v122,
          v124,
          v126,
          v127,
          v128,
          v129,
          v130,
          v131,
          v132,
          v133);
  sub_23C7E5EA4((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v57, v62);
  sub_23C7E1C8C();
  sub_23C7DB3B8();
  v28 = sub_23C7DBBB8();
  v30 = sub_23C7E17A4(v28, v29);
  *(_QWORD *)&v38 = sub_23C7E41C0(v30, v31, v32, v33, v34, v35, v36, v37, v58, v63, v68, v73, v78, v83, v88).n128_u64[0];
  sub_23C7DB6A8(v39, &qword_25430DBD0, v40, v41, v42, v43, v44, v45, v59, v64, v69, v74, v79, v84, v89, v93, v97, v38);
  sub_23C7DBD08();
  sub_23C7DB6A0();
  v46 = sub_23C7DEB08();
  v47 = static Optional<A>.fetchSet<A>(_:_:)(v46);
  sub_23C7E8E18(v47, v48, v49, v50, v51, v52, v53, v54, v60, v65, v70, v75, v80, v85, v90, v94, v98, v101, v104,
    v107,
    v109,
    v111,
    v113,
    v115,
    v117,
    v119,
    v121,
    v123,
    v125);
  sub_23C7E6C50();
  sub_23C7DEF28();
}

#error "23C8324F8: call analysis failed (funcsize=17)"

unint64_t sub_23C832528()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430CF08;
  if (!qword_25430CF08)
  {
    v1 = sub_23C7DDB10(&qword_25430DA18);
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQLRequest<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25430CF08);
  }
  return result;
}

unint64_t sub_23C83256C()
{
  unint64_t result;

  result = qword_256BCC5B8;
  if (!qword_256BCC5B8)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for RowDecodingError, &type metadata for RowDecodingError);
    atomic_store(result, (unint64_t *)&qword_256BCC5B8);
  }
  return result;
}

void sub_23C8325A8()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_23C7DB390();
}

void sub_23C8325C4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C831AE0(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C8325DC()
{
  uint64_t v0;

  return sub_23C831D24(v0, FastDatabaseValueCursor.statement.getter);
}

uint64_t sub_23C8325FC()
{
  uint64_t v0;

  return sub_23C831D24(v0, FastNullableDatabaseValueCursor.statement.getter);
}

uint64_t type metadata accessor for FastDatabaseValueCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FastDatabaseValueCursor);
}

uint64_t sub_23C832628(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for FastDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C832654(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for FastDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C832680(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for FastNullableDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8326AC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for FastNullableDatabaseValueCursor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of StatementColumnConvertible.init(sqliteStatement:index:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for FastDatabaseValueCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C8326F0()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for FastNullableDatabaseValueCursor()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C832764(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_23C7DC6C8(a1, a2, a3);
}

uint64_t sub_23C832784(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7DE718(a1, 1, v1);
}

uint64_t sub_23C8327A0()
{
  return 0;
}

uint64_t sub_23C8327C4(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  return sub_23C7DC6C8(v1, (uint64_t *)va1, (uint64_t)va);
}

uint64_t sub_23C8327FC()
{
  int v0;
  sqlite3_stmt *v1;

  return sqlite3_column_type(v1, v0);
}

uint64_t sub_23C832808()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C832824()
{
  return sub_23C9114E4();
}

void sub_23C832848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(a1, a2, a3, a4, v48, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

uint64_t sub_23C832854()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C832868()
{
  return sub_23C9114E4();
}

uint64_t sub_23C832874()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C832880@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

ValueMetadata *type metadata accessor for DatabasePublishers()
{
  return &type metadata for DatabasePublishers;
}

_QWORD *initializeBufferWithCopyOfBuffer for RenameColumnAdapter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for RenameColumnAdapter()
{
  return swift_release();
}

_QWORD *assignWithCopy for RenameColumnAdapter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for RenameColumnAdapter(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for DatabasePromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabasePromise);
}

uint64_t sub_23C832948(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int16 a21)
{
  int v21;

  v21 = (a21 >> 13) & 3;
  if (v21 == 2)
    return swift_bridgeObjectRetain();
  if (v21 != 1)
  {
    if (v21)
      return result;
    return swift_bridgeObjectRetain();
  }
  return sub_23C7FD5D8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21 & 0x9FFF);
}

uint64_t sub_23C8329E4(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 160) >> 13) & 3;
}

uint64_t sub_23C8329F0(uint64_t result)
{
  *(_WORD *)(result + 160) &= 0x9FFFu;
  return result;
}

uint64_t sub_23C832A00(uint64_t result, char a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(result + 104) & 1;
  v3 = *(_WORD *)(result + 160) & 0x81FF | ((a2 & 3) << 13);
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v2;
  *(_WORD *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SQLCollection.Impl()
{
  return &type metadata for SQLCollection.Impl;
}

uint64_t sub_23C832A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[163];
  _BYTE __dst[163];
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v4 = v16;
    v5 = (char *)(a1 + 32);
    for (i = v2 - 1; ; --i)
    {
      memcpy(__dst, v5, sizeof(__dst));
      memcpy(v14, v5, sizeof(v14));
      sub_23C832F44();
      sub_23C7EA244();
      if (v1)
      {
        sub_23C832F44();
        swift_release();
        swift_release();
        return v4;
      }
      v9 = v7;
      v10 = v8;
      sub_23C832F44();
      v16 = v4;
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_23C7E649C();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v10;
      if (!i)
        break;
      v5 += 168;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

void sub_23C832BC4(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  int v4;
  const void *v5;
  uint64_t v6;
  _QWORD v7[21];
  _QWORD v8[21];
  _BYTE v9[168];
  _BYTE v10[168];

  sub_23C813130(v1, v9);
  sub_23C813130(v9, v10);
  v4 = sub_23C8329E4((uint64_t)v10);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = (const void *)sub_23C7E9860();
      memcpy(v7, v5, 0xA2uLL);
      sub_23C813130(v9, v8);
      sub_23C8329F0((uint64_t)v8);
      sub_23C833030();
      sub_23C88F1DC(a1);
      if (!v2)
      {
        v7[0] = 40;
        v7[1] = 0xE100000000000000;
        sub_23C910F5C();
        sub_23C7DB62C();
        swift_bridgeObjectRetain();
        sub_23C7E06E4();
        sub_23C7DB62C();
      }
      sub_23C7E41E8();
    }
    else
    {
      sub_23C7E9860();
      v8[0] = 34;
      v8[1] = 0xE100000000000000;
      sub_23C7E41E8();
      sub_23C910F5C();
      sub_23C7E06E4();
      sub_23C7E41E8();
    }
  }
  else
  {
    v6 = *(_QWORD *)sub_23C7E9860();
    swift_retain();
    sub_23C7E41E8();
    sub_23C832A40(v6);
    sub_23C7E41E8();
    if (!v2)
    {
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      sub_23C7DB62C();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C7E06E4();
      sub_23C7DB62C();
    }
  }
}

void sub_23C832DF0(const void *a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  _BYTE *v8;
  _QWORD v9[21];
  _QWORD v10[2];
  char v11;
  _BYTE v12[168];
  _BYTE __dst[168];
  _BYTE v14[168];

  sub_23C7E3190(v12, a1);
  memcpy(__dst, v2, 0xA2uLL);
  sub_23C813130(__dst, v14);
  v4 = sub_23C8329E4((uint64_t)v14);
  v5 = sub_23C8329F0((uint64_t)v14);
  if (v4)
  {
LABEL_5:
    v8 = (_BYTE *)swift_allocObject();
    sub_23C7E3190(v8 + 16, v12);
    memcpy(v8 + 184, __dst, 0xA2uLL);
    v8[346] = 0;
    v9[0] = v8;
    sub_23C813280((uint64_t)v9);
    sub_23C800B48(v9, v10);
    sub_23C7E3190(a2, v10);
    sub_23C832F44();
    sub_23C833030();
    return;
  }
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = (const void *)(*(_QWORD *)v5 + 32);
      sub_23C7E3190(v10, v12);
      sub_23C7E3190(v9, v7);
      sub_23C86F20C(0, v10, v9, a2);
      return;
    }
    goto LABEL_5;
  }
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  sub_23C8027EC((uint64_t)v10);
  sub_23C800B48(v10, a2);
}

void sub_23C832F44()
{
  void (*v0)(void);

  sub_23C7E3248();
  sub_23C7EC63C();
  v0();
  sub_23C7E4C90();
}

uint64_t sub_23C832F90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v22 = *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16);
  sub_23C7E08BC();
  sub_23C7E6F90(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  sub_23C7E894C(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 328), *(__n128 *)(v0 + 248), *(__n128 *)(v0 + 264), *(__n128 *)(v0 + 280), *(__n128 *)(v0 + 296), *(__n128 *)(v0 + 312));
  return swift_deallocObject();
}

void sub_23C833030()
{
  void (*v0)(void);

  sub_23C7E3248();
  sub_23C7E08BC();
  v0();
  sub_23C7E4C90();
}

uint64_t _s12GRDBInternal13SQLCollectionV4ImplOwxx_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;

  v22 = *(_WORD *)(a1 + 160);
  sub_23C7E08BC();
  return sub_23C8131FC(v8, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
}

void _s12GRDBInternal13SQLCollectionV4ImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_WORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  sub_23C832948(*(_QWORD *)a2, v11, v3, v4, v5, v6, v7, v8, v9, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v20;
  *(_QWORD *)(a1 + 144) = v21;
  *(_QWORD *)(a1 + 152) = v22;
  *(_WORD *)(a1 + 160) = v23;
  sub_23C7E8930();
}

void _s12GRDBInternal13SQLCollectionV4ImplOwca_0(__n128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_QWORD *)(a2 + 120);
  v33 = *(_QWORD *)(a2 + 128);
  v34 = *(_QWORD *)(a2 + 136);
  v35 = *(_QWORD *)(a2 + 144);
  v36 = *(_QWORD *)(a2 + 152);
  v37 = *(_WORD *)(a2 + 160);
  sub_23C832948(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35,
    v36,
    v37);
  v12 = a1->n128_u64[0];
  v13 = a1->n128_i64[1];
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  v14 = a1[1].n128_i64[0];
  v15 = a1[1].n128_i64[1];
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  v16 = a1[2].n128_i64[0];
  v17 = a1[2].n128_i64[1];
  a1[2].n128_u64[0] = v7;
  a1[2].n128_u64[1] = v8;
  v18 = a1[3].n128_i64[0];
  v19 = a1[3].n128_i64[1];
  a1[3].n128_u64[0] = v9;
  a1[3].n128_u64[1] = v10;
  v20 = a1[4];
  v21 = a1[5];
  a1[4].n128_u64[0] = v11;
  a1[4].n128_u64[1] = v26;
  a1[5].n128_u64[0] = v27;
  a1[5].n128_u64[1] = v28;
  v22 = a1[6];
  v23 = a1[7];
  a1[6].n128_u64[0] = v29;
  a1[6].n128_u64[1] = v30;
  a1[7].n128_u64[0] = v31;
  a1[7].n128_u64[1] = v32;
  v24 = a1[8];
  a1[8].n128_u64[0] = v33;
  a1[8].n128_u64[1] = v34;
  v25 = a1[9].n128_i64[0];
  a1[9].n128_u64[0] = v35;
  a1[9].n128_u64[1] = v36;
  a1[10].n128_u16[0] = v37;
  sub_23C7E894C(v12, v13, v14, v15, v16, v17, v18, v19, v25, v20, v21, v22, v23, v24);
  sub_23C7E8930();
}

void _s12GRDBInternal13SQLCollectionV4ImplOwta_0(uint64_t a1)
{
  unsigned __int16 v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;

  sub_23C7E3248();
  v2 = *(_WORD *)(a1 + 160);
  v4 = v3[1];
  *(_OWORD *)a1 = *v3;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = v3[3];
  *(_OWORD *)(a1 + 32) = v3[2];
  *(_OWORD *)(a1 + 48) = v5;
  v6 = v3[5];
  *(_OWORD *)(a1 + 64) = v3[4];
  *(_OWORD *)(a1 + 80) = v6;
  v7 = v3[7];
  *(_OWORD *)(a1 + 96) = v3[6];
  *(_OWORD *)(a1 + 112) = v7;
  v8 = v3[9];
  *(_OWORD *)(a1 + 128) = v3[8];
  *(_OWORD *)(a1 + 144) = v8;
  *(_WORD *)(a1 + 160) = v9;
  v30 = v2;
  sub_23C7EC63C();
  sub_23C8131FC(v10, v17, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  sub_23C7E4C90();
}

uint64_t _s12GRDBInternal11SQLSubqueryV4ImplOwet_0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 162))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 64) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double sub_23C8333E4(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 162) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 146) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 162) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLCollection()
{
  return &type metadata for SQLCollection;
}

uint64_t destroy for Migration()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseSchemaCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseSchemaCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Migration()
{
  return &type metadata for Migration;
}

BOOL sub_23C833644(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23C833654()
{
  return sub_23C911BC8();
}

uint64_t sub_23C833678()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

BOOL sub_23C8336BC(char *a1, char *a2)
{
  return sub_23C833644(*a1, *a2);
}

uint64_t sub_23C8336C8()
{
  return sub_23C833678();
}

uint64_t sub_23C8336D0()
{
  return sub_23C833654();
}

void sub_23C8336D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C833738(a1, (void (*)(_QWORD *, uint64_t, __int128 *, uint64_t))sub_23C8E75EC, a3, a4);
}

uint64_t sub_23C8336F4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void sub_23C83371C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C833738(a1, (void (*)(_QWORD *, uint64_t, __int128 *, uint64_t))sub_23C8E7754, a3, a4);
}

void sub_23C833738(uint64_t a1, void (*a2)(_QWORD *, uint64_t, __int128 *, uint64_t), uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v6;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;

  v6 = v4;
  v14[0] = MEMORY[0x24BEE4AF8];
  v14[1] = MEMORY[0x24BEE4B00];
  v8._object = (void *)0x800000023C91D3F0;
  v9 = v14;
  v8._countAndFlagsBits = 0xD000000000000019;
  Database.execute(sql:arguments:)(v8, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v10)
  {
    LOBYTE(v14[0]) = 1;
    v15 = *v6;
    sub_23C8336F4((uint64_t)&v15);
    swift_retain();
    swift_retain();
    a2(v14, a1, v6, a1);
    sub_23C83393C(a1, v11, v12, v13);
  }
}

uint64_t sub_23C83386C()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  GRDBInternal::StatementArguments v5;
  uint64_t v7;

  sub_23C7E79A8(&qword_25430D7C8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  v3 = *v0;
  v2 = v0[1];
  *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 64) = &protocol witness table for String;
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  swift_bridgeObjectRetain();
  sub_23C7E53DC(inited, &v7);
  v4._object = (void *)0x800000023C91D430;
  v5.values._rawValue = &v7;
  v4._countAndFlagsBits = 0xD000000000000033;
  Database.execute(sql:arguments:)(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C83393C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v4;
  _QWORD *v5;
  _QWORD v7[2];

  v7[0] = MEMORY[0x24BEE4AF8];
  v7[1] = MEMORY[0x24BEE4B00];
  v4._object = (void *)0x800000023C91D410;
  v5 = v7;
  v4._countAndFlagsBits = 0xD000000000000018;
  Database.execute(sql:arguments:)(v4, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for Migration.ForeignKeyChecks(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C833A00 + 4 * byte_23C914D85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C833A34 + 4 * asc_23C914D80[v4]))();
}

uint64_t sub_23C833A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C833A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C833A44);
  return result;
}

uint64_t sub_23C833A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C833A58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C833A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C833A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Migration.ForeignKeyChecks()
{
  return &type metadata for Migration.ForeignKeyChecks;
}

unint64_t sub_23C833A84()
{
  unint64_t result;

  result = qword_256BCC5C0[0];
  if (!qword_256BCC5C0[0])
  {
    result = MEMORY[0x242626100](&unk_23C914E04, &type metadata for Migration.ForeignKeyChecks);
    atomic_store(result, qword_256BCC5C0);
  }
  return result;
}

_QWORD *sub_23C833AC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary);
}

uint64_t sub_23C833B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BYTE *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRetain();
  v9 = sub_23C834968(a2, a3, a4);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      v11 = (uint64_t *)(a1 + 40);
      a2 = MEMORY[0x24BEE4AF8];
      do
      {
        if (*(_QWORD *)(v9 + 16))
        {
          v13 = *(v11 - 1);
          v12 = *v11;
          swift_bridgeObjectRetain();
          sub_23C7E94B8();
          if ((v14 & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_23C7E649C();
            v15 = *(_QWORD *)(a2 + 16);
            if (v15 >= *(_QWORD *)(a2 + 24) >> 1)
              sub_23C7E649C();
            *(_QWORD *)(a2 + 16) = v15 + 1;
            v16 = a2 + 16 * v15;
            *(_QWORD *)(v16 + 32) = v13;
            *(_QWORD *)(v16 + 40) = v12;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      return MEMORY[0x24BEE4AF8];
    }
  }
  return a2;
}

uint64_t sub_23C833C90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_23C833CA4(a1, a2, a3);
}

uint64_t sub_23C833CA4(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[176];
  _BYTE v49[176];
  _QWORD __src[24];
  _BYTE __dst[192];
  _BYTE v52[176];
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v45 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = (uint64_t *)(v45 + 40);
      v46 = a2;
      do
      {
        v8 = *(v6 - 1);
        v7 = *v6;
        swift_bridgeObjectRetain_n();
        v9 = sub_23C7E94B8();
        if ((v10 & 1) == 0)
          goto LABEL_39;
        v47 = v3;
        sub_23C7E41F0(v49, (const void *)(*(_QWORD *)(a2 + 56) + 176 * v9));
        sub_23C8133B0((uint64_t)v49);
        swift_bridgeObjectRelease();
        __src[0] = v8;
        __src[1] = v7;
        sub_23C7E41F0(&__src[2], v49);
        swift_bridgeObjectRetain();
        sub_23C8133B0((uint64_t)v49);
        sub_23C8132C8((uint64_t)__src);
        memcpy(__dst, __src, 0xBBuLL);
        nullsub_1(__dst);
        sub_23C834E14((uint64_t)__dst, (uint64_t)v53);
        v11 = v53[0];
        v12 = v53[1];
        sub_23C7E41F0(v52, &v54);
        if (*(_QWORD *)(a3[1] + 16) && (sub_23C7E90A8(), (v13 & 1) != 0))
        {
          sub_23C7EDDF4();
          swift_isUniquelyReferenced_nonNull_native();
          v14 = a3[1];
          v55 = v14;
          a3[1] = 0x8000000000000000;
          sub_23C7E90A8();
          sub_23C7EDB8C();
          if (v17)
            goto LABEL_42;
          v18 = v15;
          v19 = v16;
          sub_23C7E79A8(&qword_256BCC5A0);
          if ((sub_23C7E9868() & 1) != 0)
          {
            v14 = v55;
            v20 = sub_23C7E90A8();
            if ((v19 & 1) != (v21 & 1))
              goto LABEL_44;
            v18 = v20;
          }
          if ((v19 & 1) != 0)
          {
            v22 = (void *)(*(_QWORD *)(v55 + 56) + 176 * v18);
            sub_23C7E41F0(v48, v22);
            sub_23C7E41F0(v22, v52);
            sub_23C7EE438();
            sub_23C8134EC((uint64_t)v48);
LABEL_19:
            sub_23C7EC650();
            sub_23C7DC514();
            a2 = v46;
            v31 = v47;
            goto LABEL_33;
          }
          sub_23C7E822C();
          v37 = *(_QWORD *)(v14 + 16);
          v17 = __OFADD__(v37, 1);
          v38 = v37 + 1;
          if (v17)
            goto LABEL_43;
          *(_QWORD *)(v14 + 16) = v38;
          a3[1] = v14;
          sub_23C7E6260();
          swift_bridgeObjectRelease();
          v34 = *a3;
          sub_23C7E6260();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7E3264();
            v34 = v43;
          }
          v39 = *(_QWORD *)(v34 + 16);
          a2 = v46;
          v31 = v47;
          if (v39 >= *(_QWORD *)(v34 + 24) >> 1)
          {
            sub_23C7E3264();
            v34 = v44;
          }
          *(_QWORD *)(v34 + 16) = v39 + 1;
          v40 = v34 + 16 * v39;
          *(_QWORD *)(v40 + 32) = v11;
          *(_QWORD *)(v40 + 40) = v12;
        }
        else
        {
          sub_23C7EDDF4();
          sub_23C7EDDF4();
          sub_23C7E6260();
          swift_isUniquelyReferenced_nonNull_native();
          v23 = a3[1];
          v55 = v23;
          a3[1] = 0x8000000000000000;
          sub_23C7E90A8();
          sub_23C7EDB8C();
          if (v17)
            goto LABEL_40;
          v26 = v24;
          v27 = v25;
          sub_23C7E79A8(&qword_256BCC5A0);
          if ((sub_23C7E9868() & 1) != 0)
          {
            v23 = v55;
            v28 = sub_23C7E90A8();
            if ((v27 & 1) != (v29 & 1))
              goto LABEL_44;
            v26 = v28;
          }
          if ((v27 & 1) != 0)
          {
            v30 = (void *)(*(_QWORD *)(v55 + 56) + 176 * v26);
            sub_23C7E41F0(v48, v30);
            sub_23C7E41F0(v30, v52);
            sub_23C7EE438();
            sub_23C8134EC((uint64_t)v48);
            sub_23C7EC650();
            sub_23C7DC514();
            goto LABEL_19;
          }
          sub_23C7E822C();
          v32 = *(_QWORD *)(v23 + 16);
          v17 = __OFADD__(v32, 1);
          v33 = v32 + 1;
          if (v17)
            goto LABEL_41;
          *(_QWORD *)(v23 + 16) = v33;
          a3[1] = v23;
          sub_23C7E6260();
          swift_bridgeObjectRelease();
          v34 = *a3;
          sub_23C7E6260();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7E3264();
            v34 = v41;
          }
          v35 = *(_QWORD *)(v34 + 16);
          a2 = v46;
          v31 = v47;
          if (v35 >= *(_QWORD *)(v34 + 24) >> 1)
          {
            sub_23C7E3264();
            v34 = v42;
          }
          *(_QWORD *)(v34 + 16) = v35 + 1;
          v36 = v34 + 16 * v35;
          *(_QWORD *)(v36 + 32) = v11;
          *(_QWORD *)(v36 + 40) = v12;
          sub_23C7EC650();
          sub_23C7DC514();
        }
        sub_23C7EC650();
        sub_23C7DC514();
        *a3 = v34;
LABEL_33:
        v3 = v31 - 1;
        if (!v3)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v6 += 2;
      }
      while (*(_QWORD *)(a2 + 16));
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    result = sub_23C911B50();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8340D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8[2];

  v8[1] = a4;
  v8[0] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C833CA4(a1, a2, v8);
  result = v8[0];
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23C834150()
{
  JUMPOUT(0x242624D80);
}

uint64_t sub_23C834158(uint64_t a1)
{
  BOOL v1;
  uint64_t result;

  v1 = __OFADD__(a1, 1);
  result = a1 + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t sub_23C834168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v13 = sub_23C9114E4();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C9111CC();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v19, a6);
  MEMORY[0x242624A20](v19, a5, a6, a7, a8);
  result = sub_23C7DE718((uint64_t)v16, 1, a7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v22, v16, a7);
  }
  return result;
}

void sub_23C8342B0()
{
  sub_23C834150();
}

uint64_t sub_23C8342D0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_23C8342E0(uint64_t **a1, uint64_t *a2, _QWORD *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  void (*v13)(_QWORD *);
  uint64_t v14;
  uint64_t v15;

  v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  v8 = a3[2];
  v9 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[5] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  v13 = sub_23C834420(v7, *a2, *v3, v3[1], v8, v9, a3[4]);
  v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v9);
  return sub_23C8343CC;
}

void sub_23C8343CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 40) + 8))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(*a1 + 32));
  v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_23C834420(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  void *v16;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v15 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v15;
  v16 = malloc(*(_QWORD *)(v15 + 64));
  a1[2] = (uint64_t)v16;
  sub_23C834168((uint64_t)v16, (uint64_t)v16 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, a5, a6, a7);
  return sub_23C8344E8;
}

void sub_23C8344E8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_23C834528(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_23C834550@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_23C834158(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_23C834578(uint64_t *a1)
{
  uint64_t result;

  result = sub_23C834158(*a1);
  *a1 = result;
  return result;
}

__n128 sub_23C8345A0@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_23C8345B0(uint64_t a1)
{
  MEMORY[0x242626100](&unk_23C914F34, a1);
  return sub_23C911304();
}

uint64_t sub_23C8345E4()
{
  return 2;
}

uint64_t sub_23C8345EC(uint64_t a1)
{
  MEMORY[0x242626100](&unk_23C914F34, a1);
  return sub_23C911334();
}

uint64_t sub_23C834624()
{
  return sub_23C91104C();
}

uint64_t sub_23C834644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v12 = a1;
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  swift_getTupleTypeMetadata2();
  v6 = sub_23C91119C();
  v7 = MEMORY[0x242626100](MEMORY[0x24BEE12E0], v6);
  v9 = sub_23C8C6CB8((void (*)(char *, uint64_t))sub_23C834948, (uint64_t)v11, v6, a2, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  v12 = a1;
  MEMORY[0x242626100](MEMORY[0x24BEE12C8], v6);
  sub_23C910DB8();
  return v9;
}

uint64_t sub_23C834738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t sub_23C834824@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_23C834644(a1, a2[2], a2[3], a2[4]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23C834854()
{
  if ((sub_23C9111A8() & 1) != 0)
    return sub_23C910DE8();
  else
    return 0;
}

uint64_t sub_23C8348D8()
{
  return sub_23C834854();
}

void sub_23C8348FC()
{
  JUMPOUT(0x242626100);
}

void sub_23C83490C()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C83491C()
{
  return MEMORY[0x24BEE1780];
}

void sub_23C834928()
{
  JUMPOUT(0x242626100);
}

void sub_23C834938()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C834948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C834738(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23C834968(uint64_t isStackAllocationSafe, uint64_t (*a2)(_BYTE *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = isStackAllocationSafe;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v9 = (_QWORD *)((char *)v14 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_23C88CFE0(0, v8, v9);
    sub_23C834AE4((uint64_t)v9, v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (_QWORD *)swift_slowAlloc();
    sub_23C88CFE0(0, v8, v11);
    sub_23C834AE4((uint64_t)v11, v8, v6, a2);
    a3 = v12;
    MEMORY[0x2426261F0](v11, -1, -1);
  }
  return a3;
}

void sub_23C834AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_BYTE *))
{
  uint64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  const void *v16;
  char v17;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[216];
  _BYTE __dst[224];
  int64_t v24;

  v7 = 0;
  v20 = 0;
  v21 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v7 << 6);
LABEL_17:
    v16 = (const void *)(*(_QWORD *)(a3 + 56) + 216 * v12);
    memcpy(__dst, v16, 0xD2uLL);
    memcpy(v22, v16, 0xD2uLL);
    swift_bridgeObjectRetain();
    sub_23C813864((uint64_t)__dst);
    v17 = a4(v22);
    sub_23C813A5C((uint64_t)__dst);
    swift_bridgeObjectRelease();
    if (v4)
      return;
    if ((v17 & 1) != 0)
    {
      *(_QWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v20++, 1);
      if (v13)
        goto LABEL_30;
    }
  }
  v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24)
    goto LABEL_27;
  v14 = *(_QWORD *)(v21 + 8 * v7);
  if (v14)
  {
LABEL_16:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  v15 = v7 + 1;
  if (v7 + 1 >= v24)
    goto LABEL_27;
  v14 = *(_QWORD *)(v21 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 2;
  if (v7 + 2 >= v24)
    goto LABEL_27;
  v14 = *(_QWORD *)(v21 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_27:
    sub_23C88DA98(a1, a2, v20);
    return;
  }
  v14 = *(_QWORD *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v24)
      goto LABEL_27;
    v14 = *(_QWORD *)(v21 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_23C834D0C()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  sub_23C7E4D10();
  v0 = (const void *)sub_23C7E8964();
  v3 = sub_23C862C08(v0, v1, v2);
  sub_23C7E95B8(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return sub_23C7E08D0();
}

uint64_t sub_23C834D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_23C7E4D10();
  sub_23C7E8964();
  sub_23C862D54();
  sub_23C7E95B8(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  return sub_23C7E08D0();
}

uint64_t sub_23C834D6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  swift_isUniquelyReferenced_nonNull_native();
  v11 = *v0;
  *v0 = 0x8000000000000000;
  v1 = sub_23C862FE8();
  sub_23C7E95B8(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_23C834E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCC648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C834E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t i;
  char v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _BYTE __src[163];
  _BYTE __dst[163];
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  sub_23C7FD468();
  v3 = v13;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = (char *)(a1 + 48);
    for (i = v2 - 1; ; --i)
    {
      v6 = *v4;
      v9 = *((_QWORD *)v4 - 2);
      v10 = *((_QWORD *)v4 - 1);
      sub_23C7E56A4(v9, v10, *v4);
      swift_getAtKeyPath();
      sub_23C7E5640(v9, v10, v6);
      memcpy(__dst, __src, sizeof(__dst));
      v13 = v3;
      v7 = *(_QWORD *)(v3 + 16);
      if (v7 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_23C7FD468();
        v3 = v13;
      }
      *(_QWORD *)(v3 + 16) = v7 + 1;
      memcpy((void *)(v3 + 168 * v7 + 32), __dst, 0xA3uLL);
      if (!i)
        break;
      v4 += 24;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_23C834FC4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __src[168];
  _BYTE v13[168];
  _BYTE v14[168];
  _BYTE v15[176];
  uint64_t v16;

  if (a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_23C9117C0())
  {
    v6 = MEMORY[0x24BEE4AF8];
    v7 = 4;
    v16 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x242625290](v7 - 4, a1);
      else
        swift_retain();
      if (__OFADD__(v7 - 4, 1))
        break;
      sub_23C8370B0(a2, (uint64_t)v15);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v6;
      }
      swift_release();
      sub_23C838EA0((uint64_t)v15, (uint64_t)v13);
      sub_23C838EA0((uint64_t)v13, (uint64_t)v14);
      if (sub_23C800F80((uint64_t)v14) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F1D20();
          v6 = v9;
        }
        v8 = *(_QWORD *)(v6 + 16);
        if (v8 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_23C7F1D20();
          v6 = v10;
        }
        sub_23C838EA0((uint64_t)v13, (uint64_t)__src);
        *(_QWORD *)(v6 + 16) = v8 + 1;
        memcpy((void *)(v6 + 168 * v8 + 32), __src, 0xA3uLL);
        a2 = v16;
      }
      if (v7 - 3 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      ++v7;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C8351D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE __src[168];
  _BYTE v15[168];
  _BYTE v16[168];
  _BYTE v17[176];
  unint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = 0;
    v7 = v4 - 1;
    v8 = MEMORY[0x24BEE4AF8];
    do
    {
      v9 = v6;
      while (1)
      {
        if (v9 >= v4)
        {
          __break(1u);
          return result;
        }
        sub_23C83748C(a2, (uint64_t)v17);
        if (v2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        sub_23C838EA0((uint64_t)v17, (uint64_t)v15);
        sub_23C838EA0((uint64_t)v15, (uint64_t)v16);
        result = sub_23C800F80((uint64_t)v16);
        if ((_DWORD)result != 1)
          break;
        if (v4 == ++v9)
          goto LABEL_17;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7F1D20();
        v8 = v12;
      }
      v11 = *(_QWORD *)(v8 + 16);
      if (v11 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F1D20();
        v8 = v13;
      }
      v6 = v9 + 1;
      sub_23C838EA0((uint64_t)v15, (uint64_t)__src);
      *(_QWORD *)(v8 + 16) = v11 + 1;
      result = (uint64_t)memcpy((void *)(v8 + 168 * v11 + 32), __src, 0xA3uLL);
      v7 = v18;
    }
    while (v18 != v9);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_23C835368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE __src[168];
  _BYTE v18[168];
  _BYTE v19[168];
  _BYTE v20[176];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = swift_bridgeObjectRetain();
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C837758(v7, v8, a2, (uint64_t)v20);
    if (v2)
    {
      v9 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = (uint64_t *)(a1 + 56);
      v9 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C838EA0((uint64_t)v20, (uint64_t)v18);
        sub_23C838EA0((uint64_t)v18, (uint64_t)v19);
        if (sub_23C800F80((uint64_t)v19) != 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7F1D20();
            v9 = v14;
          }
          v11 = *(_QWORD *)(v9 + 16);
          if (v11 >= *(_QWORD *)(v9 + 24) >> 1)
          {
            sub_23C7F1D20();
            v9 = v15;
          }
          sub_23C838EA0((uint64_t)v18, (uint64_t)__src);
          *(_QWORD *)(v9 + 16) = v11 + 1;
          memcpy((void *)(v9 + 168 * v11 + 32), __src, 0xA3uLL);
        }
        if (!--v4)
          break;
        v12 = *(v10 - 1);
        v13 = *v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23C837758(v12, v13, a2, (uint64_t)v20);
        v10 += 2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v9;
}

void sub_23C835564(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[2];
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27[21];
  uint64_t v28;

  if (!(a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_14:
    sub_23C7E5918();
    sub_23C7E08E4();
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v21 = sub_23C9117C0();
  sub_23C7DE934();
  if (!v21)
    goto LABEL_14;
LABEL_3:
  sub_23C8E61E8(0);
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_15:
    v6 = MEMORY[0x242625290](0, a1);
    goto LABEL_5;
  }
  v6 = swift_retain();
LABEL_5:
  v28 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v23 = (__int128 *)&v28;
  sub_23C878368((uint64_t)sub_23C839010, (uint64_t)v22, a2);
  v8 = (uint64_t)v7;
  v9 = v7[2];
  if (!v9 || (v11 = v7[4], v10 = v7[5], v12 = v7[6], sub_23C7E0808(), !v12))
  {
    sub_23C7DB3DC();
    v25 = xmmword_23C914530;
    v26 = 0;
    sub_23C8027EC((uint64_t)&v25);
    sub_23C800B48(&v25, v27);
    memcpy(a3, v27, 0xA3uLL);
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  if (v9 != 1)
  {
    swift_bridgeObjectRetain();
    sub_23C834FC4(a1, v8);
    v18 = sub_23C7DB3DC();
    v27[0] = 21071;
    v27[1] = 0xE200000000000000;
    memset(&v27[2], 0, 17);
    *(_WORD *)((char *)&v27[4] + 1) = 1;
    MEMORY[0x24BDAC7A8](v18);
    v22[0] = sub_23C7E79A8(&qword_25430B3B0);
    v22[1] = sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
    v23 = (__int128 *)&protocol witness table for SQLExpression;
    swift_getKeyPath();
    swift_retain();
    sub_23C907A54();
    v20 = v19;
    swift_release();
    sub_23C87019C(v27, v20, a3);
    sub_23C7DE934();
    swift_bridgeObjectRelease();
    sub_23C7DB398();
    goto LABEL_11;
  }
  sub_23C7E0808();
  v13 = sub_23C7DB3DC();
  *(_QWORD *)&v25 = v11;
  MEMORY[0x24BDAC7A8](v13);
  v23 = &v25;
  sub_23C878458((uint64_t)sub_23C839028, (uint64_t)v22, a1);
  v24 = sub_23C7F71E8(v14);
  sub_23C7ECC00((uint64_t)v27);
  sub_23C7F6294(v27[0], v27[1], v27[2]);
  swift_bridgeObjectRetain_n();
  sub_23C7FCDEC();
  v16 = v15;
  sub_23C7DB3DC();
  v27[0] = v16;
  sub_23C837E0C((uint64_t (*)(uint64_t *, uint64_t *))sub_23C802858, 0);
  swift_bridgeObjectRelease_n();
  v17 = v27[0];
  v27[3] = (uint64_t)&type metadata for Column;
  v27[4] = (uint64_t)&protocol witness table for Column;
  v27[0] = v10;
  v27[1] = v12;
  sub_23C836F84(v27, v17, a3);
  sub_23C7DB398();
  swift_release();
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v27);
LABEL_12:
  sub_23C7DBCB0();
}

void sub_23C8358D8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  ValueMetadata *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_23C8A6094(a1);
  if (v6)
  {
    sub_23C7E5918();
    sub_23C7E08E4();
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v6);
    v7 = (_QWORD *)sub_23C8785D0((uint64_t)sub_23C839040, (uint64_t)&v24, a2);
    v8 = (uint64_t)v7;
    v9 = v7[2];
    if (v9 && (v11 = v7[4], v10 = v7[5], swift_bridgeObjectRetain(), v10))
    {
      if (v9 == 1)
      {
        swift_bridgeObjectRetain();
        v12 = sub_23C7DB398();
        MEMORY[0x24BDAC7A8](v12);
        sub_23C8786EC((uint64_t)sub_23C839058, (uint64_t)&v24, a1, (uint64_t)&v27, v13, v14, v15, v16, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, (uint64_t)v32, (uint64_t)v33,
          v34,
          v35,
          v36,
          v37,
          v38);
        v28 = sub_23C7F71E8(v17);
        sub_23C7ECC00((uint64_t)&v30);
        sub_23C7F6294(v30, *((unint64_t *)&v30 + 1), v31);
        swift_bridgeObjectRetain_n();
        sub_23C7FCDEC();
        v19 = v18;
        sub_23C7DB398();
        *(_QWORD *)&v30 = v19;
        sub_23C837E0C((uint64_t (*)(uint64_t *, uint64_t *))sub_23C802858, 0);
        swift_bridgeObjectRelease_n();
        v20 = v30;
        v32 = &type metadata for Column;
        v33 = &protocol witness table for Column;
        *(_QWORD *)&v30 = v11;
        *((_QWORD *)&v30 + 1) = v10;
        sub_23C836F84(&v30, v20, a3);
        swift_bridgeObjectRelease();
        swift_release();
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v30);
      }
      else
      {
        sub_23C7E0808();
        sub_23C8351D4(a1, v8);
        v21 = sub_23C7DB398();
        *(_QWORD *)&v30 = 21071;
        *((_QWORD *)&v30 + 1) = 0xE200000000000000;
        v31 = 0;
        v32 = 0;
        LOBYTE(v33) = 0;
        *(_WORD *)((char *)&v33 + 1) = 1;
        MEMORY[0x24BDAC7A8](v21);
        *(_QWORD *)&v24 = sub_23C7E79A8(&qword_25430B3B0);
        *((_QWORD *)&v24 + 1) = sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
        *(_QWORD *)&v25 = &protocol witness table for SQLExpression;
        swift_getKeyPath();
        swift_retain();
        sub_23C907A54();
        v23 = v22;
        swift_release();
        sub_23C87019C((uint64_t *)&v30, v23, a3);
        sub_23C7DE934();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_23C7DB398();
      v30 = xmmword_23C914530;
      LOBYTE(v31) = 0;
      sub_23C8027EC((uint64_t)&v30);
      sub_23C800B48(&v30, a3);
    }
    sub_23C7DBCB0();
  }
}

uint64_t sub_23C835BE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD v23[2];
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28[21];
  _QWORD v29[3];

  if (a1[2])
  {
    v6 = a1[5];
    v29[0] = a1[4];
    v29[1] = v6;
    MEMORY[0x24BDAC7A8](v29[0]);
    v24 = (__int128 *)v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C8787AC((uint64_t)sub_23C838DB4, (uint64_t)v23, a2);
    v8 = (uint64_t)v7;
    v9 = v7[2];
    if (v9
      && (v11 = v7[4], v10 = v7[5],
                       v13 = v7[6],
                       v12 = v7[7],
                       swift_bridgeObjectRetain(),
                       swift_bridgeObjectRetain(),
                       v10))
    {
      if (v9 == 1)
      {
        swift_bridgeObjectRetain();
        v14 = swift_bridgeObjectRelease();
        *(_QWORD *)&v26 = v11;
        *((_QWORD *)&v26 + 1) = v10;
        MEMORY[0x24BDAC7A8](v14);
        v24 = &v26;
        swift_bridgeObjectRetain();
        sub_23C8788B8((uint64_t)sub_23C838E14, (uint64_t)v23, (uint64_t)a1);
        v25 = sub_23C7F71E8(v15);
        sub_23C8EC1F0((uint64_t)v28);
        sub_23C7F6294(v28[0], v28[1], v28[2]);
        swift_bridgeObjectRetain_n();
        sub_23C7FCDEC();
        v17 = v16;
        swift_bridgeObjectRelease();
        v28[0] = v17;
        sub_23C837E0C((uint64_t (*)(uint64_t *, uint64_t *))sub_23C802858, 0);
        swift_bridgeObjectRelease_n();
        v18 = v28[0];
        v28[3] = (uint64_t)&type metadata for Column;
        v28[4] = (uint64_t)&protocol witness table for Column;
        v28[0] = v13;
        v28[1] = v12;
        swift_bridgeObjectRetain();
        sub_23C836F84(v28, v18, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_23C835368((uint64_t)a1, v8);
      v19 = swift_bridgeObjectRelease();
      v28[0] = 21071;
      v28[1] = 0xE200000000000000;
      memset(&v28[2], 0, 17);
      *(_WORD *)((char *)&v28[4] + 1) = 1;
      MEMORY[0x24BDAC7A8](v19);
      v23[0] = sub_23C7E79A8(&qword_25430B3B0);
      v23[1] = sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
      v24 = (__int128 *)&protocol witness table for SQLExpression;
      swift_getKeyPath();
      swift_retain();
      sub_23C907A54();
      v21 = v20;
      swift_release();
      sub_23C87019C(v28, v21, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v26 = xmmword_23C914530;
      v27 = 0;
      sub_23C8027EC((uint64_t)&v26);
      sub_23C800B48(&v26, v28);
      memcpy(a3, v28, 0xA3uLL);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  sub_23C9117B4();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void static TableRecord.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C7E6568(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_23C7E1A0C();
}

void static TableRecord.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C7E6568(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_23C7E1A0C();
}

void static TableRecord.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C7E6568(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_23C7E1A0C();
}

uint64_t sub_23C836020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double))
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  _QWORD v17[2];
  _BYTE v18[168];

  v13 = *a4;
  v14 = a4[1];
  v15 = sub_23C7F92B4(a6, a8, (uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a9(v18, a2, a3, v17, a5, a6, v15);
  swift_bridgeObjectRetain();
  return sub_23C7DE9B8(v13);
}

uint64_t static TableRecord.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C8360CC(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double))sub_23C8BB7F0);
}

uint64_t static TableRecord.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C8360CC(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double))sub_23C801CD8);
}

uint64_t static TableRecord.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23C8360CC(a1, a2, a3, a4, a5, a6, a7, (void (*)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double))sub_23C8BBA20);
}

uint64_t sub_23C8360CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_BYTE *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, double))
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  _QWORD v17[2];
  _BYTE v18[168];

  v13 = *a4;
  v14 = a4[1];
  type metadata accessor for Table(0, a6, a3, (uint64_t)a4);
  v15 = sub_23C8291CC((uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a8(v18, a2, a3, v17, a5, a6, v15);
  sub_23C7E0808();
  return sub_23C7DE9B8(v13);
}

uint64_t static TableRecord.association<A>(to:on:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 *v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v12 = sub_23C7E9B34((int)a1, a1, a3, a4, a5, a6, a7, a8, v28, v30);
  v16 = sub_23C7E256C((uint64_t)v12, v13, v14, v15);
  sub_23C7DEF9C(v16, v17, v18, v19, v20, v21, v22, v23, v29, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  sub_23C7E6C60();
  sub_23C7DC51C(v25, v26, a9);
  return swift_retain();
}

uint64_t sub_23C8361F0@<X0>(void (*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[21];

  a1(v6);
  v3 = v7;
  v4 = v8;
  sub_23C7E7E34(v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  nullsub_1(v9);
  sub_23C838EA0((uint64_t)v9, a2);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t sub_23C836274()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C836298@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C8361F0(*(void (**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

uint64_t static TableRecord.association<A>(to:)@<X0>(const void *a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t *a8@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v9 = sub_23C7E9B34((int)a1, a1, a2, a3, a4, a5, a6, a7, v24, v26);
  v13 = sub_23C7E256C((uint64_t)v9, v10, v11, v12);
  sub_23C7DEF9C(v13, v14, v15, v16, v17, v18, v19, v20, v25, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51);
  sub_23C7E6C60();
  return sub_23C7DC51C(v21, v22, a8);
}

#error "23C836320: call analysis failed (funcsize=28)"

#error "23C8363B0: call analysis failed (funcsize=30)"

void TableRecord<>.request<A>(for:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, void *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD __src[21];
  _QWORD v27[4];
  char v28;
  _QWORD __dst[30];

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  v9(&v25, a2, v8);
  if (*(_QWORD *)(v25 + 16))
  {
    v22 = a1;
    v23 = a4;
    memcpy(__dst, (const void *)(v25 + 32), 0xE3uLL);
    v10 = __dst[3];
    v11 = __dst[4];
    v12 = __dst[5];
    v13 = __dst[6];
    v14 = SLOBYTE(__dst[7]);
    sub_23C800974((uint64_t)__dst);
    swift_bridgeObjectRelease();
    sub_23C800AA4(v10, v11, v12, v13, v14);
    sub_23C812FA8((uint64_t)__dst);
    if ((v14 & 0x80000000) == 0)
    {
      v27[0] = v10;
      v27[1] = v11;
      v27[2] = v12;
      v27[3] = v13;
      v28 = v14 & 1;
      v9(__src, a2, v8);
      v24 = __src[0];
      swift_bridgeObjectRetain();
      sub_23C836600((uint64_t)&v24, (uint64_t)v27, v4, v22);
      sub_23C7DE934();
      v15 = sub_23C7E95C8();
      sub_23C8B583C(v15, v16, v17, v18, v19, v20, v21, (uint64_t)__src);
      swift_bridgeObjectRelease();
      swift_getAssociatedTypeWitness();
      sub_23C80BC0C(__src, v23);
      sub_23C7DBCB0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  sub_23C7E95C8();
  sub_23C9117B4();
  __break(1u);
  swift_bridgeObjectRelease();
  __break(1u);
}

void sub_23C836600(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  _BYTE v47[231];
  char v48;
  _QWORD v49[29];
  _OWORD __dst[11];
  uint64_t v51;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v51 = MEMORY[0x24BDAC7A8](a1);
  v15 = *(_QWORD *)v51;
  if (*(_QWORD *)(*(_QWORD *)v51 + 16))
  {
    *(_QWORD *)&v45 = v13;
    v46 = v14;
    v16 = v12;
    v4 = v11;
    memcpy(__dst, (const void *)(v15 + 96), 0xA2uLL);
    (*(void (**)(_BYTE *, void *, uint64_t))(v8 + 16))(&v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, a4);
    v17 = (*(unsigned __int8 *)(v8 + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a4;
    *(_QWORD *)(v9 + 24) = v4;
    *(_QWORD *)(v9 + 32) = v16;
    v18 = a2;
    v19 = v46;
    *(_QWORD *)(v9 + 40) = v45;
    *(_QWORD *)(v9 + 48) = v19;
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v9 + 56) = *(_OWORD *)a2;
    *(_OWORD *)(v9 + 72) = v20;
    *(_BYTE *)(v9 + 88) = *(_BYTE *)(a2 + 32);
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v8 + 32))(v9 + v17, v10, a4);
    v10 = (_BYTE *)*((_QWORD *)&__dst[2] + 1);
    a3 = sub_23C837C08;
    if (*((_QWORD *)&__dst[2] + 1))
    {
      v4 = *(_QWORD *)&__dst[3];
      v21 = (_QWORD *)swift_allocObject();
      v21[2] = v10;
      v21[3] = v4;
      v21[4] = sub_23C837C08;
      v21[5] = v9;
      a3 = sub_23C812CE0;
      v9 = (uint64_t)v21;
    }
    v48 = BYTE1(__dst[10]);
    v22 = *(_QWORD *)v51;
    if (*(_QWORD *)(*(_QWORD *)v51 + 16))
    {
      v33 = *(_QWORD *)&__dst[1];
      v34 = *((_QWORD *)&__dst[0] + 1);
      v35 = *(_QWORD *)&__dst[0];
      v36 = *(_OWORD *)((char *)&__dst[1] + 8);
      v37 = LOBYTE(__dst[10]);
      v38 = BYTE8(__dst[6]);
      v39 = LOBYTE(__dst[4]);
      v40 = *((_QWORD *)&__dst[3] + 1);
      v41 = __dst[9];
      v42 = __dst[8];
      v43 = __dst[7];
      v44 = *(_OWORD *)((char *)&__dst[5] + 8);
      v45 = *(_OWORD *)((char *)&__dst[4] + 8);
      v46 = a3;
      memcpy(v49, (const void *)(v22 + 32), 0xE3uLL);
      v32 = BYTE2(v49[28]);
      a2 = v49[4];
      v30 = v49[5];
      v31 = v49[3];
      v29 = v49[6];
      v28 = LOBYTE(v49[7]);
      v4 = v49[0];
      a3 = (void *)v49[1];
      LOBYTE(v8) = v49[2];
      sub_23C837C40(v18);
      sub_23C837C80(__dst);
      sub_23C800974((uint64_t)v49);
      sub_23C837D4C();
      LOBYTE(v10) = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  sub_23C890984();
  v22 = v26;
LABEL_6:
  if (*(_QWORD *)(v22 + 16))
  {
    memcpy(v47, (const void *)(v22 + 32), 0xE3uLL);
    *(_QWORD *)(v22 + 32) = v4;
    *(_QWORD *)(v22 + 40) = a3;
    *(_BYTE *)(v22 + 48) = v8;
    *(_QWORD *)(v22 + 56) = v31;
    *(_QWORD *)(v22 + 64) = a2;
    v23 = v29;
    *(_QWORD *)(v22 + 72) = v30;
    *(_QWORD *)(v22 + 80) = v23;
    *(_BYTE *)(v22 + 88) = v28;
    v24 = v34;
    *(_QWORD *)(v22 + 96) = v35;
    *(_QWORD *)(v22 + 104) = v24;
    *(_QWORD *)(v22 + 112) = v33;
    *(_OWORD *)(v22 + 120) = v36;
    *(_QWORD *)(v22 + 136) = v46;
    *(_QWORD *)(v22 + 144) = v9;
    *(_QWORD *)(v22 + 152) = v40;
    *(_BYTE *)(v22 + 160) = v39;
    *(_OWORD *)(v22 + 168) = v45;
    *(_OWORD *)(v22 + 184) = v44;
    *(_BYTE *)(v22 + 200) = v38;
    v25 = v42;
    *(_OWORD *)(v22 + 208) = v43;
    *(_OWORD *)(v22 + 224) = v25;
    *(_OWORD *)(v22 + 240) = v41;
    *(_BYTE *)(v22 + 256) = v37;
    *(_BYTE *)(v22 + 257) = (_BYTE)v10;
    *(_BYTE *)(v22 + 258) = v32;
    sub_23C812FA8((uint64_t)v47);
    *(_QWORD *)v51 = v22;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23C836924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = a4;
  v24 = a2;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v13[1];
  v25 = *v13;
  v26 = v14;
  v27 = *((_BYTE *)v13 + 32);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
  v17 = sub_23C85BB90();
  if (v6)
    return swift_bridgeObjectRelease();
  v22 = a6;
  v23 = v17;
  swift_bridgeObjectRelease();
  sub_23C7E79A8(&qword_256BCA518);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v24, a3);
  v20 = swift_retain();
  sub_23C87999C(v20, (uint64_t)v12, a3, v28, a5);
  sub_23C835BE8((_QWORD *)inited, v23, v22);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  return sub_23C8C92F4();
}

void static TableRecord.including<A>(all:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836AC8(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest.including<A>(all:), a7, a8);
}

void static TableRecord.including<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836AC8(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest.including<A>(optional:), a7, a8);
}

void sub_23C836AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  v8 = sub_23C7E90B4(a1, a2, a3, a4, a5, a6, a7, a8, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
          v43,
          v45,
          v47,
          v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63);
  sub_23C7DFB44((uint64_t)v16, v17, v18, v19);
  sub_23C7E57A4();
}

void sub_23C836B00()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  v1 = sub_23C7EE26C();
  v0(v1);
  sub_23C7EE128();
  sub_23C7DE90C();
}

void static TableRecord.including<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836AC8(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest.including<A>(required:), a7, a8);
}

void static TableRecord.joining<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836AC8(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest.joining<A>(optional:), a7, a8);
}

void static TableRecord.joining<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836AC8(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest.joining<A>(required:), a7, a8);
}

void static TableRecord.annotated<A>(withOptional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836B58(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest<>.annotated<A>(withOptional:), a7, a8);
}

void static TableRecord.annotated<A>(withRequired:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_23C836B58(a1, a2, a3, a4, a5, (uint64_t)JoinableRequest<>.annotated<A>(withRequired:), a7, a8);
}

void sub_23C836B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  v8 = sub_23C7E90B4(a1, a2, a3, a4, a5, a6, a7, a8, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
          v43,
          v45,
          v47,
          v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63);
  sub_23C7DFB44((uint64_t)v16, v17, v18, v19);
  sub_23C7E57A4();
}

void sub_23C836B90()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  v1 = sub_23C7EE26C();
  v0(v1);
  sub_23C7EE128();
  sub_23C7DE90C();
}

_QWORD *_s12GRDBInternal11TableRecordPAAE9annotated4withAA21QueryInterfaceRequestVyxGAA20AssociationAggregateVyxGd_tFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[168];

  v3 = sub_23C7E0720(a2, a3, v38);
  v11 = sub_23C7E4068(v3, v4, v5, v6, v7, v8, v9, v10, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
          v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38[0]);
  v15 = sub_23C7E6174((uint64_t)v11, v12, v13, v14);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v15);
  DerivableRequest.annotated(with:)();
  return sub_23C7EE128();
}

_QWORD *static TableRecord.having(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE __dst[162];
  _BYTE __src[168];

  sub_23C7E0720(a2, a3, __src);
  v3 = memcpy(__dst, __src, sizeof(__dst));
  v7 = sub_23C7E6174((uint64_t)v3, v4, v5, v6);
  MEMORY[0x242626100](&protocol conformance descriptor for QueryInterfaceRequest<A>, v7);
  DerivableRequest.having(_:)();
  return sub_23C837D4C();
}

uint64_t sub_23C836CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;

  v11 = a5[5];
  v12 = a5[6];
  sub_23C7E7E34(a5 + 2, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 88))(a1, a2, v11, v12);
  if ((v14 & 1) != 0)
  {
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    *a6 = v13;
    a6[1] = a3;
    a6[2] = a4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C836DF4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C836E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C836E44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (uint64_t)sub_23C8DDEB0(a1, a2);
  if (v2)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

double sub_23C836E8C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_OWORD *)a1 = xmmword_23C914530;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_23C836EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)&v10 = a1;
  *((_QWORD *)&v10 + 1) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C821964((uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v13;
  if (v13)
  {
    v5 = v14;
    sub_23C7E7E34(v12, v13);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 24))(&v10, v4, v5);
    v9 = v10;
    v6 = v11;
    result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
    v8 = v9;
  }
  else
  {
    result = sub_23C7E7A6C((uint64_t)v12);
    v8 = 0uLL;
    v6 = 4;
  }
  *(_OWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_23C836F84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[168];
  _BYTE __dst[162];
  _QWORD v12[21];
  _BYTE __src[168];
  _QWORD v14[21];

  sub_23C7E79A8(&qword_25430CF60);
  sub_23C838E38((unint64_t *)&qword_25430CF28, &qword_25430CF60);
  swift_getKeyPath();
  swift_retain();
  v6 = sub_23C834E60(a2);
  swift_release();
  v12[0] = v6;
  sub_23C838E78((uint64_t)v12);
  sub_23C813130(v12, __src);
  memcpy(__dst, __src, sizeof(__dst));
  v7 = a1[3];
  v8 = a1[4];
  sub_23C7E7E34(a1, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v14, v7);
  memcpy(v10, v14, 0xA3uLL);
  sub_23C832DF0(v10, a3);
  sub_23C811F5C((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8370B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[168];
  _BYTE v24[168];
  _BYTE v25[168];
  _QWORD v26[21];
  _BYTE v27[168];
  __int128 v28;
  char v29;
  _BYTE v30[163];
  uint64_t v31;
  _BYTE __src[176];

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 48);
    v22 = MEMORY[0x24BEE4AF8];
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = *(v6 - 2);
      swift_bridgeObjectRetain();
      if (!v8)
        break;
      sub_23C8DDEB0(v9, (uint64_t)v30);
      if (v3)
      {
        result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      v10 = *(_OWORD *)v30;
      v11 = v30[16];
      if (v30[16] == 4 && *(_OWORD *)v30 == 0)
      {
        sub_23C7E5640(0, 0, 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C80A96C((uint64_t)v30);
        return sub_23C838EA0((uint64_t)v30, a2);
      }
      v26[0] = v7;
      v26[1] = v8;
      sub_23C800B0C((uint64_t)v26);
      sub_23C800B48(v26, v27);
      v28 = v10;
      v29 = v11;
      sub_23C8027EC((uint64_t)&v28);
      sub_23C800B48(&v28, __src);
      sub_23C800B48(v26, v30);
      sub_23C800B48(&v28, &v31);
      sub_23C811F5C((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
      sub_23C7E56A4(v10, *((unint64_t *)&v10 + 1), v11);
      swift_bridgeObjectRetain();
      sub_23C7E5640(0, 0, 4);
      sub_23C7E5640(v10, *((unint64_t *)&v10 + 1), v11);
      sub_23C838EE8((uint64_t)v30);
      memcpy(v25, v27, 0xA3uLL);
      memcpy(v24, __src, 0xA3uLL);
      sub_23C86F20C(0, v25, v24, v23);
      v13 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F1D20();
        v22 = v15;
      }
      v14 = *(_QWORD *)(v22 + 16);
      if (v14 >= *(_QWORD *)(v22 + 24) >> 1)
      {
        sub_23C7F1D20();
        v22 = v16;
      }
      v6 += 3;
      *(_QWORD *)(v22 + 16) = v14 + 1;
      memcpy((void *)(v22 + 168 * v14 + 32), v23, 0xA3uLL);
      sub_23C7E5640(v10, *((unint64_t *)&v10 + 1), v11);
      swift_bridgeObjectRelease();
      v5 = v13 - 1;
      v3 = 0;
    }
    while (v13 != 1);
  }
  v17 = swift_bridgeObjectRelease();
  *(_QWORD *)v30 = 4476481;
  *(_QWORD *)&v30[8] = 0xE300000000000000;
  *(_OWORD *)&v30[16] = xmmword_23C914530;
  *(_WORD *)&v30[32] = 256;
  v30[34] = 0;
  MEMORY[0x24BDAC7A8](v17);
  sub_23C7E79A8(&qword_25430B3B0);
  sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
  swift_getKeyPath();
  swift_retain();
  sub_23C907A54();
  v19 = v18;
  swift_release();
  sub_23C87019C((uint64_t *)v30, v19, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v30, __src, sizeof(v30));
  nullsub_1(v30);
  return sub_23C838EA0((uint64_t)v30, a2);
}

uint64_t sub_23C83748C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  _BYTE v17[168];
  _BYTE v18[168];
  _QWORD v19[21];
  _BYTE v20[168];
  __int128 v21;
  char v22;
  _BYTE v23[168];
  _BYTE v24[163];
  uint64_t v25;
  _BYTE __src[176];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = swift_bridgeObjectRetain();
  v16 = a2;
  if (v3)
  {
    v5 = (uint64_t *)(v4 + 40);
    v6 = MEMORY[0x24BEE4AF8];
    do
    {
      v7 = *(v5 - 1);
      v8 = *v5;
      swift_bridgeObjectRetain();
      if (!v8)
        break;
      v19[0] = v7;
      v19[1] = v8;
      sub_23C800B0C((uint64_t)v19);
      sub_23C800B48(v19, v20);
      v21 = xmmword_23C914530;
      v22 = 0;
      sub_23C8027EC((uint64_t)&v21);
      sub_23C800B48(&v21, v23);
      sub_23C800B48(v19, v24);
      sub_23C800B48(&v21, &v25);
      sub_23C811F5C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
      sub_23C838EE8((uint64_t)v24);
      memcpy(v18, v20, 0xA3uLL);
      memcpy(v17, v23, 0xA3uLL);
      sub_23C86F20C(0, v18, v17, __src);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F1D20();
        v6 = v10;
      }
      v9 = *(_QWORD *)(v6 + 16);
      if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_23C7F1D20();
        v6 = v11;
      }
      v5 += 2;
      *(_QWORD *)(v6 + 16) = v9 + 1;
      memcpy((void *)(v6 + 168 * v9 + 32), __src, 0xA3uLL);
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  v12 = swift_bridgeObjectRelease();
  *(_QWORD *)v24 = 4476481;
  *(_QWORD *)&v24[8] = 0xE300000000000000;
  *(_OWORD *)&v24[16] = xmmword_23C914530;
  *(_WORD *)&v24[32] = 256;
  v24[34] = 0;
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7E79A8(&qword_25430B3B0);
  sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
  swift_getKeyPath();
  swift_retain();
  sub_23C907A54();
  v14 = v13;
  swift_release();
  sub_23C87019C((uint64_t *)v24, v14, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v24, __src, sizeof(v24));
  nullsub_1(v24);
  return sub_23C838EA0((uint64_t)v24, v16);
}

uint64_t sub_23C837758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v30;
  _BYTE v31[168];
  _BYTE v32[168];
  _BYTE v33[168];
  _QWORD v34[21];
  _BYTE v35[168];
  _QWORD v36[2];
  char v37;
  _BYTE v38[163];
  uint64_t v39;
  _QWORD __src[22];

  v6 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  v27 = a4;
  if (v6)
  {
    v7 = (uint64_t *)(a3 + 56);
    v8 = MEMORY[0x24BEE4AF8];
    do
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v11 = *(v7 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v11)
        break;
      v30 = v6;
      __src[0] = a1;
      __src[1] = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C821964((uint64_t)v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)&v38[24];
      if (*(_QWORD *)&v38[24])
      {
        v13 = v8;
        v14 = *(_QWORD *)&v38[32];
        sub_23C7E7E34(v38, *(uint64_t *)&v38[24]);
        v15 = *(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t))(v14 + 24);
        v16 = v14;
        v8 = v13;
        v15(__src, v12, v16);
        v17 = __src[0];
        v12 = __src[1];
        v18 = LOBYTE(__src[2]);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v38);
      }
      else
      {
        sub_23C7E7A6C((uint64_t)v38);
        v17 = 0;
        v18 = 4;
      }
      if (v18 == 4 && !(v12 | v17))
      {
        sub_23C7E5640(0, 0, 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C80A96C((uint64_t)v38);
        return sub_23C838EA0((uint64_t)v38, v27);
      }
      v34[0] = v10;
      v34[1] = v9;
      sub_23C800B0C((uint64_t)v34);
      sub_23C800B48(v34, v35);
      v36[0] = v17;
      v36[1] = v12;
      v37 = v18;
      sub_23C8027EC((uint64_t)v36);
      sub_23C800B48(v36, __src);
      sub_23C800B48(v34, v38);
      sub_23C800B48(v36, &v39);
      sub_23C811F5C((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
      sub_23C7E56A4(v17, v12, v18);
      swift_bridgeObjectRetain();
      sub_23C7E5640(0, 0, 4);
      sub_23C7E5640(v17, v12, v18);
      sub_23C838EE8((uint64_t)v38);
      memcpy(v33, v35, 0xA3uLL);
      memcpy(v32, __src, 0xA3uLL);
      sub_23C86F20C(0, v33, v32, v31);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F1D20();
        v8 = v21;
      }
      v19 = *(_QWORD *)(v8 + 16);
      v20 = v8;
      if (v19 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_23C7F1D20();
        v20 = v22;
      }
      v7 += 4;
      *(_QWORD *)(v20 + 16) = v19 + 1;
      v8 = v20;
      memcpy((void *)(v20 + 168 * v19 + 32), v31, 0xA3uLL);
      sub_23C7E5640(v17, v12, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v30 - 1;
    }
    while (v30 != 1);
  }
  v23 = swift_bridgeObjectRelease();
  *(_QWORD *)v38 = 4476481;
  *(_QWORD *)&v38[8] = 0xE300000000000000;
  *(_OWORD *)&v38[16] = xmmword_23C914530;
  *(_WORD *)&v38[32] = 256;
  v38[34] = 0;
  MEMORY[0x24BDAC7A8](v23);
  sub_23C7E79A8(&qword_25430B3B0);
  sub_23C838E38((unint64_t *)&qword_25430B3B8, &qword_25430B3B0);
  swift_getKeyPath();
  swift_retain();
  sub_23C907A54();
  v25 = v24;
  swift_release();
  sub_23C87019C((uint64_t *)v38, v25, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v38, __src, sizeof(v38));
  nullsub_1(v38);
  return sub_23C838EA0((uint64_t)v38, v27);
}

uint64_t sub_23C837B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 89) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_23C837C08@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2[2];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_23C836924(a1, (uint64_t)v2 + ((v4 + 89) & ~v4), v3, v2[4], v2[5], a2);
}

uint64_t sub_23C837C40(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  sub_23C800ADC(v2);
  return a1;
}

_QWORD *sub_23C837C80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[5];
  v4 = a1[14];
  v5 = a1[16];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7F5610(v4);
  sub_23C7F5610(v5);
  return a1;
}

_QWORD *sub_23C837D4C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_23C7DF330();
  v1 = v0;
  v2 = v0[5];
  v3 = v0[14];
  v5 = v0[16];
  swift_release();
  sub_23C7DE934();
  swift_release();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  return v1;
}

uint64_t sub_23C837E0C(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DE9C8();
    v5 = v6;
  }
  result = sub_23C837E8C(a1, a2);
  *v2 = v5;
  return result;
}

uint64_t sub_23C837E8C(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  __int128 *v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  uint64_t v142;

  v4 = v3;
  v142 = a2;
  v5 = v2[1];
  result = sub_23C911874();
  if (result >= v5)
  {
    if (v5 < 0)
      goto LABEL_134;
    if (v5)
      return sub_23C83871C(0, v5, 1, a1);
    return result;
  }
  if (v5 < -1)
    goto LABEL_133;
  v129 = v5;
  v123 = result;
  v119 = v2;
  if (v5 < 2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v132 = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    v124 = MEMORY[0x24BEE4AF8];
    if (v5 != 1)
    {
      v43 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_96:
      if (v43 >= 2)
      {
        v106 = *v119;
        do
        {
          v107 = v43 - 2;
          if (v43 < 2)
            goto LABEL_128;
          if (!v106)
            goto LABEL_142;
          v108 = v7;
          v109 = v7 + 32;
          v110 = *(_QWORD *)(v7 + 32 + 16 * v107);
          v111 = *(_QWORD *)(v7 + 32 + 16 * (v43 - 1) + 8);
          result = sub_23C838894((uint64_t *)(v106 + 24 * v110), (char *)(v106 + 24 * *(_QWORD *)(v109 + 16 * (v43 - 1))), (char *)(v106 + 24 * v111), v132, a1);
          if (v4)
            break;
          if (v111 < v110)
            goto LABEL_129;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v108 = result;
          }
          if (v107 >= *(_QWORD *)(v108 + 16))
            goto LABEL_130;
          v112 = (_QWORD *)(v108 + 32 + 16 * v107);
          *v112 = v110;
          v112[1] = v111;
          v113 = *(_QWORD *)(v108 + 16);
          if (v43 > v113)
            goto LABEL_131;
          v7 = v108;
          result = (uint64_t)memmove((void *)(v108 + 32 + 16 * (v43 - 1)), (const void *)(v108 + 32 + 16 * v43), 16 * (v113 - v43));
          *(_QWORD *)(v108 + 16) = v113 - 1;
          v43 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_107:
      swift_bridgeObjectRelease();
      goto LABEL_110;
    }
  }
  else
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v5 / 2;
    v124 = result;
    v132 = (uint64_t *)(result + 32);
  }
  v8 = 0;
  v9 = *v2;
  v120 = *v2 + 64;
  v7 = MEMORY[0x24BEE4AF8];
  v10 = v5;
  v133 = *v2;
  while (1)
  {
    v11 = v8;
    v12 = v8 + 1;
    if (v8 + 1 < v10)
    {
      v125 = v7;
      v13 = v9 + 24 * v12;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      v139 = *(_QWORD *)v13;
      v14 = v139;
      v140 = v15;
      v141 = v16;
      v17 = v9 + 24 * v8;
      v18 = v4;
      v20 = *(_QWORD *)(v17 + 8);
      v21 = *(_BYTE *)(v17 + 16);
      v136 = *(_QWORD *)v17;
      v19 = v136;
      v137 = v20;
      v138 = v21;
      sub_23C7E56A4(v139, v15, v16);
      sub_23C7E56A4(v19, v20, v21);
      v130 = a1(&v139, &v136);
      if (v18)
      {
        sub_23C7E5640(v19, v20, v21);
        v114 = v14;
        v115 = v15;
        v116 = v16;
LABEL_109:
        sub_23C7E5640(v114, v115, v116);
        swift_bridgeObjectRelease();
LABEL_110:
        *(_QWORD *)(v124 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      sub_23C7E5640(v19, v20, v21);
      result = sub_23C7E5640(v14, v15, v16);
      v12 = v11 + 2;
      if (v11 + 2 < v129)
      {
        v121 = v11;
        v22 = (char *)(v120 + 24 * v11);
        while (1)
        {
          v23 = v12;
          v24 = *((_QWORD *)v22 - 2);
          v25 = *((_QWORD *)v22 - 1);
          v26 = *v22;
          v139 = v24;
          v140 = v25;
          v141 = v26;
          v28 = *((_QWORD *)v22 - 4);
          v29 = *(v22 - 24);
          v136 = *((_QWORD *)v22 - 5);
          v27 = v136;
          v137 = v28;
          v138 = v29;
          sub_23C7E56A4(v24, v25, v26);
          sub_23C7E56A4(v27, v28, v29);
          v30 = a1(&v139, &v136);
          sub_23C7E5640(v27, v28, v29);
          result = sub_23C7E5640(v24, v25, v26);
          if (((v130 ^ v30) & 1) != 0)
            break;
          v22 += 24;
          v12 = v23 + 1;
          if (v23 + 1 >= v129)
          {
            v12 = v129;
            goto LABEL_18;
          }
        }
        v12 = v23;
LABEL_18:
        v11 = v121;
      }
      v9 = v133;
      v4 = 0;
      v7 = v125;
      if ((v130 & 1) != 0)
      {
        if (v12 < v11)
          goto LABEL_138;
        if (v11 < v12)
        {
          v31 = 24 * v12;
          v32 = 24 * v11;
          v33 = v12;
          v34 = v11;
          do
          {
            if (v34 != --v33)
            {
              if (!v133)
                goto LABEL_141;
              v35 = v133 + v32;
              v36 = v133 + v31;
              v37 = *(_BYTE *)(v133 + v32 + 16);
              v38 = *(_OWORD *)(v133 + v32);
              v39 = *(_QWORD *)(v133 + v31 - 8);
              *(_OWORD *)v35 = *(_OWORD *)(v133 + v31 - 24);
              *(_QWORD *)(v35 + 16) = v39;
              *(_OWORD *)(v36 - 24) = v38;
              *(_BYTE *)(v36 - 8) = v37;
            }
            ++v34;
            v31 -= 24;
            v32 += 24;
          }
          while (v34 < v33);
        }
      }
    }
    if (v12 < v129)
    {
      if (__OFSUB__(v12, v11))
        goto LABEL_135;
      if (v12 - v11 < v123)
        break;
    }
LABEL_35:
    if (v12 < v11)
      goto LABEL_132;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
      v7 = result;
    }
    v42 = *(_QWORD *)(v7 + 16);
    v41 = *(_QWORD *)(v7 + 24);
    v43 = v42 + 1;
    v9 = v133;
    if (v42 >= v41 >> 1)
    {
      result = (uint64_t)sub_23C8DE884((char *)(v41 > 1), v42 + 1, 1, (char *)v7);
      v9 = v133;
      v7 = result;
    }
    *(_QWORD *)(v7 + 16) = v43;
    v44 = v7 + 32;
    v45 = (uint64_t *)(v7 + 32 + 16 * v42);
    *v45 = v11;
    v45[1] = v12;
    v127 = v12;
    if (v42)
    {
      while (1)
      {
        v46 = v43 - 1;
        if (v43 >= 4)
        {
          v51 = v44 + 16 * v43;
          v52 = *(_QWORD *)(v51 - 64);
          v53 = *(_QWORD *)(v51 - 56);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_117;
          v56 = *(_QWORD *)(v51 - 48);
          v55 = *(_QWORD *)(v51 - 40);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_118;
          v58 = v43 - 2;
          v59 = (uint64_t *)(v44 + 16 * (v43 - 2));
          v61 = *v59;
          v60 = v59[1];
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_119;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_121;
          if (v63 >= v54)
          {
            v81 = (uint64_t *)(v44 + 16 * v46);
            v83 = *v81;
            v82 = v81[1];
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_127;
            v74 = v49 < v84;
            goto LABEL_72;
          }
        }
        else
        {
          if (v43 != 3)
          {
            v75 = *(_QWORD *)(v7 + 32);
            v76 = *(_QWORD *)(v7 + 40);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_66;
          }
          v48 = *(_QWORD *)(v7 + 32);
          v47 = *(_QWORD *)(v7 + 40);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_120;
        v58 = v43 - 2;
        v64 = (uint64_t *)(v44 + 16 * (v43 - 2));
        v66 = *v64;
        v65 = v64[1];
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_122;
        v70 = (uint64_t *)(v44 + 16 * v46);
        v72 = *v70;
        v71 = v70[1];
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_124;
        if (__OFADD__(v68, v73))
          goto LABEL_126;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_72:
          if (v74)
            v46 = v58;
          goto LABEL_74;
        }
LABEL_66:
        if ((v69 & 1) != 0)
          goto LABEL_123;
        v77 = (uint64_t *)(v44 + 16 * v46);
        v79 = *v77;
        v78 = v77[1];
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_125;
        if (v80 < v68)
          goto LABEL_83;
LABEL_74:
        v85 = v46 - 1;
        if (v46 - 1 >= v43)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v9)
          goto LABEL_139;
        v86 = v7;
        v87 = (uint64_t *)(v44 + 16 * v85);
        v88 = *v87;
        v89 = (_QWORD *)(v44 + 16 * v46);
        v90 = v89[1];
        result = sub_23C838894((uint64_t *)(v9 + 24 * *v87), (char *)(v9 + 24 * *v89), (char *)(v9 + 24 * v90), v132, a1);
        if (v4)
          goto LABEL_107;
        if (v90 < v88)
          goto LABEL_114;
        if (v46 > *(_QWORD *)(v86 + 16))
          goto LABEL_115;
        *v87 = v88;
        *(_QWORD *)(v44 + 16 * v85 + 8) = v90;
        v91 = *(_QWORD *)(v86 + 16);
        if (v46 >= v91)
          goto LABEL_116;
        v7 = v86;
        v43 = v91 - 1;
        result = (uint64_t)memmove((void *)(v44 + 16 * v46), v89 + 2, 16 * (v91 - 1 - v46));
        *(_QWORD *)(v86 + 16) = v91 - 1;
        v9 = v133;
        if (v91 <= 2)
          goto LABEL_83;
      }
    }
    v43 = 1;
LABEL_83:
    v8 = v127;
    v10 = v129;
    if (v127 >= v129)
      goto LABEL_96;
  }
  if (__OFADD__(v11, v123))
    goto LABEL_136;
  v40 = v129;
  if (v11 + v123 < v129)
    v40 = v11 + v123;
  if (v40 >= v11)
  {
    if (v12 == v40)
      goto LABEL_35;
    v126 = v7;
    v134 = v4;
    v92 = (__int128 *)(v9 + 24 * v12);
    v122 = v11;
    v117 = v40;
LABEL_86:
    v93 = v11;
    v118 = v92;
    v94 = v92;
    v128 = v12;
    while (1)
    {
      v131 = v93;
      v96 = *((_QWORD *)v94 + 1);
      v97 = *((_BYTE *)v94 + 16);
      v139 = *(_QWORD *)v94;
      v95 = v139;
      v140 = v96;
      v98 = *((_QWORD *)v94 - 3);
      v99 = *((_QWORD *)v94 - 2);
      v141 = v97;
      v100 = *((_BYTE *)v94 - 8);
      v136 = v98;
      v137 = v99;
      v138 = v100;
      sub_23C7E56A4(v139, v96, v97);
      sub_23C7E56A4(v98, v99, v100);
      v101 = a1(&v139, &v136);
      if (v134)
        break;
      v102 = v101;
      sub_23C7E5640(v98, v99, v100);
      result = sub_23C7E5640(v95, v96, v97);
      if ((v102 & 1) == 0)
      {
        v103 = v128;
LABEL_93:
        v12 = v103 + 1;
        v92 = (__int128 *)((char *)v118 + 24);
        v11 = v122;
        if (v12 == v117)
        {
          v12 = v117;
          v4 = 0;
          v7 = v126;
          goto LABEL_35;
        }
        goto LABEL_86;
      }
      v103 = v128;
      if (!v133)
        goto LABEL_140;
      v104 = *((_BYTE *)v94 + 16);
      v105 = *v94;
      *v94 = *(__int128 *)((char *)v94 - 24);
      *((_QWORD *)v94 + 2) = *((_QWORD *)v94 - 1);
      *((_BYTE *)v94 - 8) = v104;
      *(__int128 *)((char *)v94 - 24) = v105;
      v94 = (__int128 *)((char *)v94 - 24);
      v93 = v131 + 1;
      if (v128 == v131 + 1)
        goto LABEL_93;
    }
    sub_23C7E5640(v98, v99, v100);
    v114 = v95;
    v115 = v96;
    v116 = v97;
    goto LABEL_109;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
  return result;
}

uint64_t sub_23C83871C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, _QWORD *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29[2];
  char v30;
  int v31;

  v6 = v5;
  if (a3 != a2)
  {
    v7 = result;
    v22 = *v4;
    v8 = *v4 + 24 * a3;
    v19 = result;
LABEL_3:
    v21 = v8;
    v23 = a3;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(unsigned __int8 *)(v8 + 16);
      v29[0] = *(_QWORD *)v8;
      v29[1] = v9;
      v25 = v9;
      v26 = v29[0];
      v12 = *(_QWORD *)(v8 - 24);
      v11 = *(_QWORD *)(v8 - 16);
      v31 = v10;
      v30 = v10;
      v13 = *(_BYTE *)(v8 - 8);
      v27[0] = v12;
      v27[1] = v11;
      v28 = v13;
      sub_23C7E56A4(v29[0], v9, v10);
      sub_23C7E56A4(v12, v11, v13);
      v14 = v6;
      v15 = a4(v29, v27);
      sub_23C7E5640(v12, v11, v13);
      result = sub_23C7E5640(v26, v25, v31);
      if (v14)
        break;
      if ((v15 & 1) == 0)
      {
        v6 = 0;
        v18 = v23;
LABEL_10:
        a3 = v18 + 1;
        v8 = v21 + 24;
        v7 = v19;
        if (a3 != a2)
          goto LABEL_3;
        return result;
      }
      if (!v22)
      {
        __break(1u);
        return result;
      }
      v16 = *(_BYTE *)(v8 + 16);
      v17 = *(_OWORD *)v8;
      *(_OWORD *)v8 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 - 8);
      *(_BYTE *)(v8 - 8) = v16;
      *(_OWORD *)(v8 - 24) = v17;
      v8 -= 24;
      ++v7;
      v18 = v23;
      v6 = 0;
      if (v23 == v7)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_23C838894(uint64_t *a1, char *a2, char *a3, uint64_t *a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t *v5;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v16;
  BOOL v17;
  void *v18;
  uint64_t *v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  char *v30;
  uint64_t *v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  BOOL v45;
  BOOL v46;
  __int128 v47;
  BOOL v48;
  char *v50;
  uint64_t v51;
  char *__dst;
  char *__dsta;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *__srca;
  uint64_t *__src;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;

  v5 = a4;
  v7 = a2;
  v8 = a1;
  v9 = a2 - (char *)a1;
  v10 = (a2 - (char *)a1) / 24;
  v11 = a3 - a2;
  v12 = (a3 - a2) / 24;
  if (v10 < v12)
  {
    sub_23C7EC96C(a1, (a2 - (char *)a1) / 24, a4);
    v13 = (unint64_t)&v5[3 * v10];
    if (v7 < a3 && v9 >= 24)
    {
      v66 = &v5[3 * v10];
      __dst = a3;
      while (1)
      {
        v56 = v8;
        __srca = v5;
        v21 = *(_QWORD *)v7;
        v22 = *((_QWORD *)v7 + 1);
        v23 = v7;
        v24 = v7[16];
        v63 = v21;
        v64 = v22;
        v65 = v24;
        v26 = v5[1];
        v27 = *((_BYTE *)v5 + 16);
        v60 = *v5;
        v25 = v60;
        v61 = v26;
        v62 = v27;
        sub_23C7E56A4(v21, v22, v24);
        sub_23C7E56A4(v25, v26, v27);
        v28 = a5(&v63, &v60);
        if (v55)
          break;
        v29 = v28;
        sub_23C7E5640(v25, v26, v27);
        sub_23C7E5640(v21, v22, v24);
        if ((v29 & 1) != 0)
        {
          v30 = v23;
          v7 = v23 + 24;
          v31 = v56;
          v5 = __srca;
          v32 = v56 == (uint64_t *)v23;
        }
        else
        {
          v31 = v56;
          v30 = (char *)__srca;
          v5 = __srca + 3;
          v32 = v56 == __srca;
          v7 = v23;
        }
        if (!v32)
        {
          v33 = *(_OWORD *)v30;
          v31[2] = *((_QWORD *)v30 + 2);
          *(_OWORD *)v31 = v33;
        }
        v8 = v31 + 3;
        v13 = (unint64_t)v66;
        if (v5 >= v66 || v7 >= __dst)
        {
          v7 = (char *)v8;
          goto LABEL_13;
        }
      }
      sub_23C7E5640(v25, v26, v27);
      sub_23C7E5640(v21, v22, v24);
      v18 = v56;
      v19 = v5;
      v16 = 3 * (((char *)v66 - (char *)v5) / 24);
      v48 = v56 < v5 || v56 >= &v5[v16];
      if (v48 || v56 != v5)
        goto LABEL_19;
      return 1;
    }
    v7 = (char *)v8;
LABEL_13:
    v16 = 3 * ((uint64_t)(v13 - (_QWORD)v5) / 24);
    v17 = v7 < (char *)v5 || v7 >= (char *)&v5[v16];
    if (v17 || v7 != (char *)v5)
    {
      v18 = v7;
      v19 = v5;
      goto LABEL_19;
    }
    return 1;
  }
  sub_23C7EC96C(a2, (a3 - a2) / 24, a4);
  v13 = (unint64_t)&v5[3 * v12];
  if (v8 >= (uint64_t *)v7 || v11 < 24)
    goto LABEL_13;
  v34 = (unint64_t)(a3 - 24);
  v57 = (unint64_t)v8;
  __src = v5;
  while (1)
  {
    v66 = (uint64_t *)v13;
    v36 = *(_QWORD *)(v13 - 16);
    v35 = v13 - 24;
    v37 = *(_BYTE *)(v13 - 8);
    v63 = *(_QWORD *)(v13 - 24);
    v64 = v36;
    v65 = v37;
    v51 = v63;
    __dsta = v7;
    v38 = v7;
    v41 = *((_QWORD *)v7 - 3);
    v39 = *((_QWORD *)v38 - 2);
    v40 = v38 - 24;
    v42 = v40[16];
    v60 = v41;
    v61 = v39;
    v62 = v42;
    sub_23C7E56A4(v63, v36, v37);
    sub_23C7E56A4(v41, v39, v42);
    v43 = a5(&v63, &v60);
    if (v55)
      break;
    v44 = v43;
    v50 = (char *)(v34 + 24);
    sub_23C7E5640(v41, v39, v42);
    sub_23C7E5640(v51, v36, v37);
    if ((v44 & 1) != 0)
    {
      v45 = v50 != __dsta || v34 >= (unint64_t)__dsta;
      v7 = v40;
      v13 = (unint64_t)v66;
      if (!v45)
        goto LABEL_43;
    }
    else
    {
      v46 = v50 != (char *)v66 || v34 >= (unint64_t)v66;
      v40 = (char *)v35;
      v13 = v35;
      v7 = __dsta;
      if (!v46)
        goto LABEL_43;
    }
    v47 = *(_OWORD *)v40;
    *(_QWORD *)(v34 + 16) = *((_QWORD *)v40 + 2);
    *(_OWORD *)v34 = v47;
LABEL_43:
    v5 = __src;
    if ((unint64_t)v7 > v57)
    {
      v34 -= 24;
      if (v13 > (unint64_t)__src)
        continue;
    }
    goto LABEL_13;
  }
  sub_23C7E5640(v41, v39, v42);
  sub_23C7E5640(v51, v36, v37);
  v19 = __src;
  v16 = 3 * (((char *)v66 - (char *)__src) / 24);
  v18 = __dsta;
  if (__dsta < (char *)__src || __dsta >= (char *)&__src[3 * (((char *)v66 - (char *)__src) / 24)])
  {
    memmove(__dsta, __src, v16 * 8);
  }
  else
  {
    if (__dsta == (char *)__src)
      return 1;
LABEL_19:
    memmove(v18, v19, v16 * 8);
  }
  return 1;
}

uint64_t sub_23C838C70()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C838C9C@<X0>(uint64_t *a1@<X0>, _QWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_23C836CD8(*a1, a1[1], a1[2], a1[3], *a2, a3);
}

uint64_t sub_23C838CDC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_23C836E44(*a1, a2);
}

uint64_t sub_23C838D10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C836DF4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void sub_23C838D48(uint64_t a1@<X8>)
{
  sub_23C836E8C(a1);
}

uint64_t sub_23C838D74@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C836E10(*a1, a1[1], a1[2], a1[3], a2);
}

uint64_t sub_23C838DB4()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_23C7EDBA0();
  return sub_23C838D74(v0, v1);
}

uint64_t sub_23C838DD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23C836EA0(*a1, a1[1], a2);
}

uint64_t sub_23C838E14()
{
  uint64_t *v0;
  uint64_t v1;

  sub_23C7EDBA0();
  return sub_23C838DD8(v0, v1);
}

uint64_t sub_23C838E38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_23C7DDB10(a2);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C838E78(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 104) & 1;
  v2 = *(_WORD *)(result + 160) & 0x81FF;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

uint64_t sub_23C838EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430CF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C838EE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 248);
  v16 = *(_OWORD *)(a1 + 232);
  v13 = *(_OWORD *)(a1 + 280);
  v14 = *(_OWORD *)(a1 + 264);
  v12 = *(_OWORD *)(a1 + 296);
  v8 = *(unsigned __int16 *)(a1 + 328) | (*(unsigned __int8 *)(a1 + 330) << 16);
  v9 = *(_QWORD *)(a1 + 312);
  v10 = *(_QWORD *)(a1 + 320);
  sub_23C7E6F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  sub_23C7E6F90(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v10,
    v8);
  return a1;
}

uint64_t sub_23C839010()
{
  uint64_t *v0;
  _QWORD **v1;
  uint64_t *v2;

  sub_23C7EDBA0();
  return sub_23C838C9C(v0, v1, v2);
}

uint64_t sub_23C839028()
{
  uint64_t *v0;
  uint64_t v1;

  sub_23C7EDBA0();
  return sub_23C838CDC(v0, v1);
}

uint64_t sub_23C839040()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23C7EDBA0();
  return sub_23C838D10(v0, v1);
}

void sub_23C839058()
{
  uint64_t v0;

  sub_23C7EDBA0();
  sub_23C838D48(v0);
}

void CGFloat.databaseValue.getter(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t static CGFloat.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(uint64_t *)a1;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 1)
  {
    if (v3)
      *(double *)&result = 0.0;
    else
      *(double *)&result = (double)result;
  }
  return result;
}

void sub_23C8390B8(uint64_t a1@<X8>)
{
  double *v1;

  CGFloat.databaseValue.getter(a1, *v1);
}

uint64_t sub_23C8390C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = static CGFloat.fromDatabaseValue(_:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

BOOL sub_23C8390EC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_23C8390F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23C839148(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C8391B4 + 4 * byte_23C9150B1[a2]))(0x54524F4241);
}

void sub_23C8391B4(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x54524F4241 && v1 == 0xE500000000000000)
    sub_23C7DB6B0();
  else
    sub_23C7E987C();
  sub_23C7DB624();
  sub_23C7DE934();
  sub_23C7DB3A0();
}

void sub_23C839230(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23C839280(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C8392EC + 4 * byte_23C9150BA[a2]))(0x5443495254534552);
}

void sub_23C8392EC(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x5443495254534552 && v1 == 0xE800000000000000)
    sub_23C7DB6B0();
  else
    sub_23C7E987C();
  sub_23C7DB624();
  sub_23C7DE934();
  sub_23C7DB3A0();
}

void sub_23C839368(char a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000045;
  v3 = 0x4445525245464544;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x54414944454D4D49;
    else
      v4 = 0x564953554C435845;
    v5 = 0xE900000000000045;
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x4445525245464544;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x54414944454D4D49;
    else
      v3 = 0x564953554C435845;
  }
  else
  {
    v2 = 0xE800000000000000;
  }
  if (v4 != v3 || v5 != v2)
    sub_23C7E25A0();
  sub_23C7DE934();
  sub_23C7DB624();
  sub_23C7DB3A0();
}

BOOL sub_23C83944C(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_23C839458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_23C911A18();
}

void sub_23C839474(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23C8394E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_23C839574 + 4 * byte_23C9150C5[a2]))(0xD000000000000010);
}

void sub_23C839574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 != 0xD000000000000010 || v2 != ((v1 - 32) | 0x8000000000000000))
    sub_23C7E25A0();
  sub_23C7DE934();
  sub_23C7DB624();
  sub_23C7DB3A0();
}

void sub_23C839618(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1313427274;
  else
    v3 = 0x494F4A205446454CLL;
  if (v2)
    v4 = 0xE90000000000004ELL;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1313427274;
  else
    v5 = 0x494F4A205446454CLL;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE90000000000004ELL;
  if (v3 == v5 && v4 == v6)
    sub_23C7DB6B0();
  else
    sub_23C7E987C();
  sub_23C7DB624();
  sub_23C7DE934();
  sub_23C7DB3A0();
}

void sub_23C839694(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23C8396CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C839718 + 4 * byte_23C9150D0[a2]))(15932);
}

void sub_23C839718(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 15932 && v1 == 0xE200000000000000)
    sub_23C7DB6B0();
  else
    sub_23C7E987C();
  sub_23C7DB624();
  sub_23C7DE934();
  sub_23C7DB3A0();
}

BOOL sub_23C839770(char a1, char a2)
{
  return dword_23C915238[a1] == dword_23C915238[a2];
}

uint64_t ResultCode.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ResultCode.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void ResultCode.primaryResultCode.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

BOOL static ResultCode.~= infix(_:_:)(_DWORD *a1, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a1 < 0x100u)
    v2 = *a2;
  return *a1 == v2;
}

void static ResultCode.SQLITE_OK.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ResultCode.SQLITE_ERROR.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_INTERNAL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_PERM.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ABORT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_BUSY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_LOCKED.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOMEM.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_INTERRUPT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CORRUPT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOTFOUND.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_FULL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_PROTOCOL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_EMPTY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_SCHEMA.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_TOOBIG.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_MISMATCH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_MISUSE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOLFS.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_AUTH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_FORMAT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_RANGE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOTADB.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOTICE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_WARNING.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ROW.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_DONE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ERROR_MISSING_COLLSEQ.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ERROR_RETRY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ERROR_SNAPSHOT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_READ.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SHORT_READ.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_WRITE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_FSYNC.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_DIR_FSYNC.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_TRUNCATE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_FSTAT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_UNLOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_RDLOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_DELETE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_BLOCKED.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_NOMEM.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_ACCESS.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_CHECKRESERVEDLOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_LOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_CLOSE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_DIR_CLOSE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SHMOPEN.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SHMSIZE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SHMLOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SHMMAP.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_SEEK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_DELETE_NOENT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_MMAP.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_GETTEMPPATH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_CONVPATH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_VNODE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_AUTH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_BEGIN_ATOMIC.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_COMMIT_ATOMIC.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_ROLLBACK_ATOMIC.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_DATA.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_IOERR_CORRUPTFS.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_LOCKED_SHAREDCACHE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_LOCKED_VTAB.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_BUSY_RECOVERY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_BUSY_SNAPSHOT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_BUSY_TIMEOUT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_NOTEMPDIR.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_ISDIR.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_FULLPATH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_CONVPATH.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_DIRTYWAL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CANTOPEN_SYMLINK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CORRUPT_VTAB.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CORRUPT_SEQUENCE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CORRUPT_INDEX.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_RECOVERY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_CANTLOCK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_ROLLBACK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_DBMOVED.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_CANTINIT.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_READONLY_DIRECTORY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_ABORT_ROLLBACK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_CHECK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_COMMITHOOK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_FOREIGNKEY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_FUNCTION.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_NOTNULL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_PRIMARYKEY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_TRIGGER.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_UNIQUE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_VTAB.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_ROWID.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_PINNED.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_CONSTRAINT_DATATYPE.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOTICE_RECOVER_WAL.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_NOTICE_RECOVER_ROLLBACK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_WARNING_AUTOINDEX.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_AUTH_USER.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_OK_LOAD_PERMANENTLY.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static ResultCode.SQLITE_OK_SYMLINK.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

uint64_t sub_23C839B1C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = ResultCode.init(rawValue:)(*a1, (_DWORD *)a2);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_23C839B44@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = ResultCode.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL sub_23C839B68(int *a1, int *a2)
{
  return sub_23C83944C(*a1, *a2);
}

const char *ResultCode.description.getter()
{
  int *v0;
  const char *result;
  uint64_t v2;

  result = sqlite3_errstr(*v0);
  if (result)
  {
    sub_23C910F74();
    v2 = sub_23C911880();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C7DB62C();
    sub_23C910F5C();
    return (const char *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ResultCode.~= infix(_:_:)(unsigned int *a1, id a2)
{
  unsigned int v2;
  id v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a2;
  sub_23C7E79A8(&qword_25430CCC8);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    swift_bridgeObjectRelease();
    sub_23C7DB624();
    sub_23C7E13C4(v6);
    if (v2 <= 0xFF)
      return v2 == v5;
    else
      return v2 == v5;
  }
  return result;
}

void DatabaseError.resultCode.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void DatabaseError.extendedResultCode.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

uint64_t DatabaseError.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatabaseError.sql.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatabaseError.arguments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *a1 = v2;
  a1[1] = v3;
  return sub_23C7E76BC(v2);
}

void DatabaseError.init(resultCode:message:sql:arguments:publicStatementArguments:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  __n128 *v5;
  int v6;
  int v7;
  __n128 v8;
  __int128 v9;
  __n128 v10;

  sub_23C7E5934();
  v8 = *v5;
  if (v2)
    goto LABEL_4;
  if (sub_23C83B780(v0, v1, 0, v3, v4, (int)v5, v6, v7, v9))
  {
    v0 = sub_23C910F74();
    v2 = v1;
    v8 = v10;
LABEL_4:
    sub_23C83B720(v8, v0, v1, v2);
    sub_23C7E0914();
    return;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  __n128 *v5;
  int v6;
  int v7;
  __n128 v8;
  __int128 v9;
  __n128 v10;

  sub_23C7E5934();
  v8 = *v5;
  if (v2)
    goto LABEL_4;
  if (sub_23C83B780(v0, v1, 0, v3, v4, (int)v5, v6, v7, v9))
  {
    v0 = sub_23C910F74();
    v2 = v1;
    v8 = v10;
LABEL_4:
    sub_23C83B720(v8, v0, v1, v2);
    sub_23C7E0914();
    return;
  }
  __break(1u);
}

uint64_t DatabaseError.init(resultCode:message:sql:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v9;
  uint64_t v11;

  v9 = result;
  if (a3)
    goto LABEL_4;
  result = (uint64_t)sqlite3_errstr(result);
  if (result)
  {
    result = sub_23C910F74();
    a2 = result;
    a3 = v11;
LABEL_4:
    *(_DWORD *)a6 = v9;
    *(_QWORD *)(a6 + 8) = a2;
    *(_QWORD *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = a5;
    *(_QWORD *)(a6 + 40) = 0;
    *(_QWORD *)(a6 + 48) = 0;
    *(_BYTE *)(a6 + 56) = 0;
    return result;
  }
  __break(1u);
  return result;
}

double sub_23C839E44@<D0>(uint64_t a1@<X8>)
{
  double result;

  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0x2068637573206F6ELL;
  *(_QWORD *)(a1 + 16) = 0xEF203A656C626174;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_23C839EE8()
{
  sub_23C83B488();
  return sub_23C911B68();
}

uint64_t sub_23C839F10()
{
  sub_23C83B488();
  return sub_23C911B5C();
}

uint64_t DatabaseError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;

  sub_23C83B76C();
  v5 = *(unsigned __int8 *)(v0 + 56);
  sub_23C7EDE10();
  sub_23C911880();
  sub_23C7EE02C();
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_23C7DFC00();
    sub_23C7E6920();
    sub_23C7DB62C();
  }
  if (v1)
  {
    sub_23C7DEA30();
    sub_23C7E592C();
    sub_23C7E17C4();
    sub_23C83B73C();
    sub_23C7E1A34();
    sub_23C7DB624();
  }
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if (v6 == 1 && (*(_QWORD *)(v3 + 16) || *(_QWORD *)(v4 + 16)))
  {
    sub_23C7E6C78();
    sub_23C7E592C();
    sub_23C7ECC10();
    sub_23C7DF388();
    sub_23C7DB624();
    sub_23C7E1A34();
    sub_23C7DB624();
  }
  return v8;
}

unint64_t sub_23C83A03C()
{
  static DatabaseError.errorDomain.getter();
  return 0xD000000000000012;
}

unint64_t static DatabaseError.errorDomain.getter()
{
  return 0xD000000000000012;
}

uint64_t DatabaseError.errorCode.getter()
{
  int *v0;

  return *v0;
}

unint64_t DatabaseError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_23C7E79A8(&qword_25430B288);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  *(_QWORD *)(inited + 32) = sub_23C910E78();
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 48) = DatabaseError.description.getter();
  *(_QWORD *)(inited + 56) = v5;
  v6 = sub_23C910DAC();
  if (v2)
  {
    v7 = sub_23C910E78();
    v9 = v8;
    swift_bridgeObjectRetain();
    swift_isUniquelyReferenced_nonNull_native();
    sub_23C83B060(v1, v2, v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = sub_23C83A5B4(v6);
  sub_23C7DE934();
  return v10;
}

BOOL DatabaseError.isInterruptionError.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  return v1 == 4 || v1 == 9;
}

uint64_t DatabaseError.expandedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_23C83B76C();
  sub_23C7EDE10();
  sub_23C911880();
  sub_23C7EE02C();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_23C7DFC00();
    sub_23C7E6920();
    sub_23C7DB62C();
  }
  if (v0)
  {
    sub_23C7DEA30();
    sub_23C7E592C();
    sub_23C7E17C4();
    sub_23C83B73C();
    sub_23C7E1A34();
    sub_23C7DB624();
  }
  if (v2 && (*(_QWORD *)(v2 + 16) || *(_QWORD *)(v3 + 16)))
  {
    sub_23C7E6C78();
    sub_23C7E592C();
    sub_23C7ECC10();
    sub_23C7DF388();
    sub_23C7DB624();
    sub_23C7E1A34();
    sub_23C7DB624();
  }
  return v5;
}

void sub_23C83A2C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[16];
  _BYTE v63[40];
  _BYTE v64[48];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E79A8(&qword_256BCC650);
    v2 = (_QWORD *)sub_23C9117E4();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v52 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v51 = (unint64_t)(63 - v3) >> 6;
  v49 = -1 << *(_BYTE *)(a1 + 32);
  v50 = (uint64_t)(v2 + 8);
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v8 = v7 | (v6 << 6);
      }
      else
      {
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_38;
        if (v9 >= v51)
        {
LABEL_35:
          sub_23C80096C();
          return;
        }
        v10 = *(_QWORD *)(v52 + 8 * v9);
        v11 = v6 + 1;
        if (!v10)
        {
          sub_23C7EE130();
          if (v12 == v13)
            goto LABEL_35;
          sub_23C7DB478();
          if (!v10)
          {
            sub_23C7EE130();
            if (v12 == v13)
              goto LABEL_35;
            sub_23C7DB478();
            if (!v10)
            {
              sub_23C7EE130();
              if (v12 == v13)
                goto LABEL_35;
              sub_23C7DB478();
              if (!v10)
              {
                v15 = v14 + 4;
                if (v15 >= v51)
                  goto LABEL_35;
                v10 = *(_QWORD *)(v52 + 8 * v15);
                if (!v10)
                {
                  while (!__OFADD__(v15, 1))
                  {
                    sub_23C7EE130();
                    if (v12 == v13)
                      goto LABEL_35;
                    sub_23C7DB478();
                    v15 = v16 + 1;
                    if (v10)
                      goto LABEL_29;
                  }
                  goto LABEL_39;
                }
                v11 = v15;
              }
            }
          }
        }
LABEL_29:
        v5 = (v10 - 1) & v10;
        v8 = __clz(__rbit64(v10)) + (v11 << 6);
        v6 = v11;
      }
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v19 = *v17;
      v18 = v17[1];
      v20 = *(_QWORD *)(a1 + 56) + 24 * v8;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(_BYTE *)(v20 + 16);
      v55 = v19;
      v56 = v18;
      v53 = *(_QWORD *)v20;
      LOBYTE(v54) = v23;
      swift_bridgeObjectRetain();
      sub_23C7E56A4(v21, v22, v23);
      sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
      swift_dynamicCast();
      sub_23C7F926C((uint64_t)&v57, (uint64_t)v63);
      sub_23C7F926C((uint64_t)v63, (uint64_t)v64);
      sub_23C7F926C((uint64_t)v64, (uint64_t)v62);
      v24 = sub_23C7E94B8();
      if ((v25 & 1) == 0)
        break;
      v32 = (uint64_t *)(v2[6] + 16 * v24);
      v33 = swift_bridgeObjectRelease();
      *v32 = v55;
      v32[1] = v56;
      v41 = sub_23C7E20C4(v33, v34, v35, v36, v37, v38, v39, v40, v48, v49, v50, v51, v52, v53, v22, v54, v55, v56, v57,
              v58,
              v59,
              v60,
              v61,
              v62[0]);
      sub_23C83B508((uint64_t)v41, v42);
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)(v50 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v43 = (uint64_t *)(v2[6] + 16 * v24);
    *v43 = v55;
    v43[1] = v56;
    v44 = sub_23C7E20C4(v24, v25, v26, v27, v28, v29, v30, v31, v48, v49, v50, v51, v52, v53, v22, v54, v55, v56, v57,
            v58,
            v59,
            v60,
            v61,
            v62[0]);
    sub_23C7F926C((uint64_t)v44, v45);
    v46 = v2[2];
    v13 = __OFADD__(v46, 1);
    v47 = v46 + 1;
    if (v13)
      goto LABEL_37;
    v2[2] = v47;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

unint64_t sub_23C83A5B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E79A8(&qword_256BCA6E0);
    v2 = (_QWORD *)sub_23C9117E4();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        v34 = (v5 - 1) & v5;
        v12 = __clz(__rbit64(v5)) | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_34;
        if (v13 >= v31)
        {
LABEL_31:
          sub_23C80096C();
          return (unint64_t)v2;
        }
        v14 = *(_QWORD *)(v32 + 8 * v13);
        v15 = v9 + 1;
        if (!v14)
        {
          v15 = v9 + 2;
          if (v9 + 2 >= v31)
            goto LABEL_31;
          v14 = *(_QWORD *)(v32 + 8 * v15);
          if (!v14)
          {
            v15 = v9 + 3;
            if (v9 + 3 >= v31)
              goto LABEL_31;
            v14 = *(_QWORD *)(v32 + 8 * v15);
            if (!v14)
            {
              v15 = v9 + 4;
              if (v9 + 4 >= v31)
                goto LABEL_31;
              v14 = *(_QWORD *)(v32 + 8 * v15);
              if (!v14)
              {
                v16 = v9 + 5;
                if (v9 + 5 >= v31)
                  goto LABEL_31;
                v14 = *(_QWORD *)(v32 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_35;
                    if (v15 >= v31)
                      goto LABEL_31;
                    v14 = *(_QWORD *)(v32 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_25;
                  }
                }
                v15 = v9 + 5;
              }
            }
          }
        }
LABEL_25:
        v34 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
        v9 = v15;
      }
      v17 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
      v35 = *v17;
      v36 = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      sub_23C83B550(v6, v7);
      sub_23C83B550(v7, v40);
      sub_23C83B550(v40, &v38);
      result = sub_23C7E94B8();
      v18 = result;
      if ((v19 & 1) == 0)
        break;
      v33 = v9;
      v20 = v7;
      v21 = v6;
      v22 = v1;
      v23 = v11;
      v24 = v10;
      v25 = (_QWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v25 = v35;
      v25[1] = v36;
      v10 = v24;
      v11 = v23;
      v1 = v22;
      v6 = v21;
      v7 = v20;
      v9 = v33;
      v26 = (_OWORD *)(v2[7] + 32 * v18);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v26);
      result = (unint64_t)sub_23C83B550(&v38, v26);
      v5 = v34;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (_QWORD *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_23C83B550(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_33;
    v2[2] = v30;
    v5 = v34;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void sub_23C83A910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C7E5EB0(a1, a2, a3);
  sub_23C8224CC();
  sub_23C7E90DC();
  if (v7)
  {
    __break(1u);
LABEL_9:
    type metadata accessor for TableAlias();
    sub_23C911B50();
    __break(1u);
    return;
  }
  sub_23C83B760();
  sub_23C7E79A8(qword_256BCA530);
  if ((sub_23C7E0900() & 1) != 0)
  {
    v4 = (_QWORD *)*v4;
    sub_23C8224CC();
    sub_23C7EDBAC();
    if (!v8)
      goto LABEL_9;
  }
  if ((v6 & 1) != 0)
  {
    sub_23C7E6E84();
    *v4 = v5;
    v4[1] = v3;
    sub_23C7DEEA8();
  }
  else
  {
    v9 = sub_23C7E95E0();
    sub_23C86A440(v9, v10, v11, v12, v13);
    swift_retain();
  }
}

void sub_23C83A9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;

  sub_23C822464();
  sub_23C7E90DC();
  if (v14)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v15 = v12;
  v16 = v13;
  sub_23C7E79A8(&qword_25430DBC0);
  if ((sub_23C7E1144() & 1) != 0)
  {
    sub_23C822464();
    sub_23C7EE2A0();
    if (!v18)
      goto LABEL_10;
    v15 = v17;
  }
  v19 = *v6;
  if ((v16 & 1) != 0)
  {
    v20 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v15);
    swift_bridgeObjectRelease();
    sub_23C7DB624();
    *v20 = a1;
    v20[1] = a2;
    sub_23C7E1768();
  }
  else
  {
    sub_23C86A470(v15, a3, a4, a5, a6, a1, a2, v19);
    swift_bridgeObjectRetain();
    sub_23C7EC658();
  }
}

void sub_23C83AAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7E8E2C(a1, a2);
  sub_23C7E94B8();
  sub_23C7E90DC();
  if (v6)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  sub_23C83B760();
  sub_23C7E79A8(&qword_25430CF20);
  if ((sub_23C7E0900() & 1) != 0)
  {
    sub_23C7E94B8();
    sub_23C7EDBAC();
    if (!v8)
      goto LABEL_10;
    v4 = v7;
  }
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v3 + 56);
    swift_release();
    *(_QWORD *)(v9 + 8 * v4) = v2;
    sub_23C7DEEA8();
  }
  else
  {
    v10 = sub_23C7E95E0();
    sub_23C86A4A8(v10, v11, v12, v13, v14);
    swift_bridgeObjectRetain();
  }
}

void sub_23C83AB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = sub_23C7E8E2C(a1, a2);
  sub_23C822514(v8, v9);
  sub_23C7E90DC();
  if (v10)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  sub_23C83B760();
  sub_23C7E79A8(&qword_25430D610);
  if ((sub_23C7E0900() & 1) != 0)
  {
    sub_23C822514(v4, v3);
    sub_23C7EDBAC();
    if (!v12)
      goto LABEL_10;
    v6 = v11;
  }
  if ((v7 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v5 + 56) + 40 * v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7DB62C();
    swift_bridgeObjectRelease();
    sub_23C7DE934();
    v14 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v2;
    *(_OWORD *)(v13 + 16) = v14;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v2 + 32);
    sub_23C7DEEA8();
  }
  else
  {
    v15 = sub_23C7E95E0();
    sub_23C86A500(v15, v16, v17, v18, v19);
    sub_23C83B474(v4, v3);
  }
}

void sub_23C83AC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C83ADC0(a1, a2, a3, a4, &qword_25430B5B0, sub_23C86A558);
}

void sub_23C83AC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C7E94B8();
  sub_23C7E90DC();
  if (v13)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v14 = v11;
  v15 = v12;
  sub_23C7E79A8(&qword_25430D130);
  if ((sub_23C911778() & 1) != 0)
  {
    sub_23C7E94B8();
    sub_23C7EE2A0();
    if (!v17)
      goto LABEL_10;
    v14 = v16;
  }
  v18 = *v5;
  if ((v15 & 1) != 0)
  {
    v19 = *(_QWORD *)(v18 + 56) + 24 * v14;
    sub_23C83B560(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
    *(_QWORD *)v19 = a1;
    *(_QWORD *)(v19 + 8) = a2;
    *(_BYTE *)(v19 + 16) = a3;
    sub_23C7DBCB0();
  }
  else
  {
    sub_23C86A55C(v14, a4, a5, a1, a2, a3, v18);
    sub_23C7E41F8();
  }
}

void sub_23C83AD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C83ADC0(a1, a2, a3, a4, &qword_25430D2D0, sub_23C86A558);
}

void sub_23C83ADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C83ADC0(a1, a2, a3, a4, &qword_25430CBD0, sub_23C86A558);
}

void sub_23C83ADC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  sub_23C7E94B8();
  sub_23C7E90DC();
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v12;
  v16 = v13;
  sub_23C7E79A8(a5);
  if ((sub_23C7ED03C() & 1) == 0)
    goto LABEL_5;
  v17 = sub_23C7DC528();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = *v6;
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v19 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v20 + 8 * v15) = a1;
    sub_23C7DBCB0();
  }
  else
  {
    a6(v15, a2, a3, a1, v19);
    sub_23C7E41F8();
  }
}

void sub_23C83AE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;

  sub_23C822588(a3, a4, a5, a6);
  sub_23C7E90DC();
  if (v14)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v15 = v12;
  v16 = v13;
  sub_23C7E79A8(&qword_25430CE98);
  if ((sub_23C7E1144() & 1) != 0)
  {
    sub_23C822588(a3, a4, a5, a6);
    sub_23C7EE2A0();
    if (!v18)
      goto LABEL_10;
    v15 = v17;
  }
  v19 = *v6;
  if ((v16 & 1) != 0)
  {
    v20 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v15);
    swift_bridgeObjectRelease();
    *v20 = a1;
    v20[1] = a2;
    sub_23C7E1768();
  }
  else
  {
    sub_23C86A584(v15, a3, a4, a5, a6, a1, a2, v19);
    swift_bridgeObjectRetain();
    sub_23C7EC658();
  }
}

void sub_23C83AFAC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char *v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (char *)sub_23C7E5EB0(a1, a2, (uint64_t)a3);
  sub_23C822620(v8);
  sub_23C7E90DC();
  if (v9)
  {
    __break(1u);
LABEL_9:
    sub_23C911B50();
    __break(1u);
    return;
  }
  sub_23C83B760();
  sub_23C7E79A8(&qword_25430B608);
  if ((sub_23C7E0900() & 1) != 0)
  {
    v4 = (_QWORD *)*v4;
    sub_23C822620(a3);
    sub_23C7EDBAC();
    if (!v10)
      goto LABEL_9;
  }
  if ((v6 & 1) != 0)
  {
    sub_23C7E6E84();
    *v4 = v5;
    v4[1] = v3;
    sub_23C7DEEA8();
  }
  else
  {
    v11 = sub_23C7E95E0();
    sub_23C86A604(v11, v12, v13, v14, v15);
    sub_23C83B4C4((uint64_t)a3);
  }
}

void sub_23C83B060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t *v17;

  sub_23C7E5EB0(a1, a2, a3);
  sub_23C7E94B8();
  sub_23C7E90DC();
  if (v11)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  sub_23C7E79A8(&qword_256BCA6D0);
  if ((sub_23C7ED03C() & 1) != 0)
  {
    sub_23C7DC528();
    sub_23C7EDBAC();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  v16 = *v5;
  if ((v13 & 1) != 0)
  {
    v17 = (uint64_t *)(v16[7] + 16 * v12);
    swift_bridgeObjectRelease();
    *v17 = v6;
    v17[1] = v4;
    sub_23C7DBCB0();
  }
  else
  {
    sub_23C86A6B0(v12, a3, a4, v6, v4, v16);
    sub_23C7E41F8();
  }
}

uint64_t destroy for DatabaseError(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v7 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for DatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_23C8168E4(a1 + 40);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for DatabaseError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  if (!v6)
  {
    sub_23C8168E4(a1 + 40);
LABEL_5:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseError(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_23C83B474(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_23C83B488()
{
  unint64_t result;

  result = qword_256BCA618[0];
  if (!qword_256BCA618[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for DatabaseError, &type metadata for DatabaseError);
    atomic_store(result, qword_256BCA618);
  }
  return result;
}

uint64_t sub_23C83B4C4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C83B508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_OWORD *sub_23C83B550(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23C83B560(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C7F9150(a1, a2, a3);
  return a1;
}

void sub_23C83B720(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_DWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v4;
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 32) = v6;
  *(__n128 *)(v7 + 40) = a1;
  *(_BYTE *)(v7 + 56) = v5 & 1;
}

uint64_t sub_23C83B73C()
{
  return sub_23C910F5C();
}

const char *sub_23C83B780(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  int v9;

  return sqlite3_errstr(v9);
}

uint64_t sub_23C83B78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v9 = *(_QWORD *)(v6 + 8);
  v10 = *(_QWORD *)(v6 + 24);
  v22 = *(_QWORD *)v6;
  v23 = *(_QWORD *)(v6 + 16);
  v11 = *(_QWORD *)(v6 + 48);
  v24 = *(_QWORD *)(v6 + 40);
  v25 = *(_QWORD *)(v6 + 32);
  v13 = *(_QWORD *)(v6 + 56);
  v12 = *(_QWORD *)(v6 + 64);
  v26 = *(_QWORD *)(v6 + 72);
  v27 = *(_BYTE *)(v6 + 80);
  v14 = *(_QWORD *)(v6 + 88);
  v15 = *(_QWORD *)(v6 + 96);
  v16 = *(_QWORD *)(v6 + 104);
  v17 = (_QWORD *)sub_23C7DB388();
  v18 = *(_QWORD *)(a3 + 24);
  v17[2] = *(_QWORD *)(a3 + 16);
  v17[3] = a4;
  v17[4] = v18;
  v17[5] = a5;
  v17[6] = a1;
  v17[7] = a2;
  v17[8] = v15;
  v17[9] = v16;
  *(_QWORD *)a6 = v22;
  *(_QWORD *)(a6 + 8) = v9;
  *(_QWORD *)(a6 + 16) = v23;
  *(_QWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = v25;
  *(_QWORD *)(a6 + 40) = v24;
  *(_QWORD *)(a6 + 48) = v11;
  *(_QWORD *)(a6 + 56) = v13;
  *(_QWORD *)(a6 + 64) = v12;
  *(_QWORD *)(a6 + 72) = v26;
  *(_BYTE *)(a6 + 80) = v27;
  *(_QWORD *)(a6 + 88) = v14;
  *(_QWORD *)(a6 + 96) = sub_23C842504;
  *(_QWORD *)(a6 + 104) = v17;
  swift_retain();
  sub_23C7F5610(v22);
  sub_23C7F5610(v23);
  sub_23C7F5610(v25);
  sub_23C7F5610(v11);
  sub_23C7F5610(v12);
  sub_23C7F5600(v14);
  return swift_retain();
}

uint64_t ValueObservation.requiresWriteAccess.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ValueObservation.requiresWriteAccess.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*ValueObservation.requiresWriteAccess.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C83B8F8(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v13;

  v7 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  a1(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a5);
}

void ValueObservation.start(in:scheduling:onError:onChange:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_23C7DE8EC();
  v21 = v0;
  v22 = v1;
  v20 = v2;
  v23 = v3;
  v18 = *(_QWORD *)(v4 + 24);
  v19 = *(_QWORD *)(v4 + 16);
  v5 = sub_23C8AC9C4(sub_23C83BC4C, v4, (uint64_t)&v27);
  v7 = (uint64_t)v27;
  v6 = v28;
  v8 = v29;
  v9 = v30;
  v11 = v31;
  v10 = v32;
  v13 = v33;
  v12 = v34;
  v14 = v35;
  v17 = v37;
  v24 = v36;
  v25 = v38;
  v16 = v39;
  v26 = v40;
  if (v27)
    v27(v5);
  ObjectType = swift_getObjectType();
  v27 = (void (*)(uint64_t))v7;
  v28 = v6;
  v29 = v8;
  v30 = v9;
  v31 = v11;
  v32 = v10;
  v33 = v13;
  v34 = v12;
  v35 = v14;
  v36 = v24;
  v37 = v17;
  v38 = v25;
  v39 = v16;
  v40 = v26;
  (*(void (**)(void (**)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 72))(&v27, v20, v21, v22, v19, v18, ObjectType);
  sub_23C7F1754(v7);
  sub_23C7F1754(v8);
  sub_23C7F1754(v11);
  sub_23C7F1754(v13);
  sub_23C7F1754(v14);
  sub_23C83BC68(v25);
  swift_release();
  sub_23C7DBCB0();
}

uint64_t sub_23C83BB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t *);
  uint64_t v12;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a3;
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = sub_23C842520;
    v10[3] = v8;
    v10[4] = sub_23C842520;
    v10[5] = v9;
    v11 = sub_23C842524;
  }
  else
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a2;
    v10[3] = a3;
    v11 = sub_23C842520;
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v10;
  swift_retain();
  sub_23C7F5610(v6);
  result = sub_23C7F1754(v6);
  *(_QWORD *)(a1 + 48) = sub_23C842560;
  *(_QWORD *)(a1 + 56) = v12;
  return result;
}

uint64_t sub_23C83BC4C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C83BB18(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_23C83BC68(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

void ValueObservation.handleEvents(willStart:willFetch:willTrackRegion:databaseDidChange:didReceiveValue:didFail:didCancel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[16];

  sub_23C7DE8EC();
  v28 = v27;
  v30 = v29;
  v41 = v31;
  v32 = (_QWORD *)sub_23C7DB388();
  v34 = *(_QWORD *)(a27 + 16);
  v33 = *(_QWORD *)(a27 + 24);
  v32[2] = v34;
  v32[3] = v33;
  v32[4] = v30;
  v32[5] = v28;
  v32[6] = a21;
  v32[7] = a22;
  v35 = sub_23C7EBCB0();
  sub_23C7F5610(v35);
  sub_23C7F5610(a21);
  v37 = type metadata accessor for ValueReducers.Trace(0, v34, v33, v36);
  v38 = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Trace<A>, v37);
  sub_23C83B78C((uint64_t)sub_23C83C06C, (uint64_t)v32, a27, v37, v38, (uint64_t)v48);
  swift_release();
  v42 = v48[0];
  v43 = v48[2];
  v44 = v48[4];
  v45 = v48[6];
  v46 = v48[8];
  v47 = v48[11];
  v40 = type metadata accessor for ValueObservation(0, v37, v38, v39);
  sub_23C8AC9C4((uint64_t (*)(uint64_t))sub_23C83C380, v40, v41);
  sub_23C7F1754(v42);
  sub_23C7F1754(v43);
  sub_23C7F1754(v44);
  sub_23C7F1754(v45);
  sub_23C7F1754(v46);
  sub_23C83BC68(v47);
  swift_release();
  sub_23C7DBCB0();
}

uint64_t sub_23C83BE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)();
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(uint64_t);
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a8;
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  if (a2)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    v18 = sub_23C7DE2F0;
  }
  else
  {
    v17 = 0;
    v18 = (void (*)())nullsub_1;
  }
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v17;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a6;
  v20[3] = a7;
  if (a4)
  {
    v20[4] = a4;
    v20[5] = a5;
    v21 = sub_23C8424B0;
  }
  else
  {
    v21 = (void (*)(uint64_t))nullsub_1;
  }
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = a6;
  v22[3] = a7;
  v22[4] = v21;
  v22[5] = v20;
  sub_23C88766C((uint64_t)v15, (uint64_t)sub_23C7DE2F0, v19, (uint64_t)sub_23C8424B0, (uint64_t)v22, a6, a7, v25);
  sub_23C7F5610(a2);
  return sub_23C7F5610(a4);
}

uint64_t sub_23C83C038()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    sub_23C7DB484();
  if (*(_QWORD *)(v0 + 48))
    sub_23C7E6930();
  return swift_deallocObject();
}

uint64_t sub_23C83C06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23C83BE94(a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3], a2);
}

uint64_t sub_23C83C07C(void (**a1)(), uint64_t a2, void (*a3)(), uint64_t a4, void (*a5)(), uint64_t a6, void (*a7)(), uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)())
{
  void (*v17)();
  void (*v18)();
  void (*v19)();
  void (*v20)();
  uint64_t v21;
  void (*v22)();
  uint64_t (*v23)(uint64_t *);
  void (*v24)();
  uint64_t v25;
  void (*v26)();
  void (*v27)();
  void (*v28)();
  void (*v29)();
  uint64_t v30;
  uint64_t v31;
  void (*v32)();
  uint64_t v33;
  uint64_t (*v34)(_QWORD *);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void (*v41)();
  void (*v42)();
  void (*v43)();
  void (*v44)();
  uint64_t v47;

  v18 = *a1;
  v17 = a1[1];
  if (a2)
  {
    v19 = (void (*)())a2;
    v20 = a3;
    if (v18)
    {
      v20 = (void (*)())swift_allocObject();
      *((_QWORD *)v20 + 2) = v18;
      *((_QWORD *)v20 + 3) = v17;
      *((_QWORD *)v20 + 4) = a2;
      *((_QWORD *)v20 + 5) = a3;
      v19 = sub_23C8423E4;
    }
  }
  else
  {
    v19 = *a1;
    v20 = a1[1];
  }
  v47 = a6;
  *a1 = v19;
  a1[1] = v20;
  v21 = (uint64_t)a1[2];
  v22 = a1[3];
  if (a4)
  {
    v23 = (uint64_t (*)(uint64_t *))a4;
    v24 = a5;
    if (v21)
    {
      v24 = (void (*)())swift_allocObject();
      *((_QWORD *)v24 + 2) = v21;
      *((_QWORD *)v24 + 3) = v22;
      *((_QWORD *)v24 + 4) = a4;
      *((_QWORD *)v24 + 5) = a5;
      v23 = sub_23C842458;
    }
    goto LABEL_9;
  }
  v23 = (uint64_t (*)(uint64_t *))a1[2];
  v24 = a1[3];
  if (v21)
  {
LABEL_9:
    sub_23C7F5610(a4);
    v25 = (uint64_t)a1[2];
    goto LABEL_10;
  }
  v25 = 0;
  v24 = 0;
LABEL_10:
  sub_23C7F5610(a2);
  sub_23C7F5610(v21);
  sub_23C7F1754(v25);
  a1[2] = (void (*)())v23;
  a1[3] = v24;
  v27 = a1[4];
  v26 = a1[5];
  if (v47)
  {
    v28 = (void (*)())v47;
    v29 = a7;
    v30 = a8;
    if (v27)
    {
      v29 = (void (*)())swift_allocObject();
      *((_QWORD *)v29 + 2) = v27;
      *((_QWORD *)v29 + 3) = v26;
      *((_QWORD *)v29 + 4) = v47;
      *((_QWORD *)v29 + 5) = a7;
      v28 = sub_23C842518;
    }
  }
  else
  {
    v28 = a1[4];
    v29 = a1[5];
    v30 = a8;
  }
  a1[4] = v28;
  a1[5] = v29;
  v31 = (uint64_t)a1[6];
  v32 = a1[7];
  if (v31)
  {
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v31;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = sub_23C842520;
    v35 = v33;
    if (!v30)
    {
LABEL_22:
      v37 = swift_allocObject();
      v38 = v30;
      v30 = v37;
      *(_QWORD *)(v37 + 16) = v34;
      *(_QWORD *)(v37 + 24) = v35;
      sub_23C7F5610(v38);
      v39 = (uint64_t)a1[6];
      v40 = sub_23C8423F8;
      goto LABEL_23;
    }
LABEL_18:
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v30;
    *(_QWORD *)(v35 + 24) = a9;
    if (v31)
    {
      v36 = (_QWORD *)swift_allocObject();
      v36[2] = v34;
      v36[3] = v33;
      v36[4] = sub_23C842428;
      v36[5] = v35;
      v34 = sub_23C842458;
      v35 = (uint64_t)v36;
    }
    else
    {
      v34 = sub_23C842428;
    }
    v30 = a8;
    goto LABEL_22;
  }
  v33 = 0;
  v34 = 0;
  if (v30)
    goto LABEL_18;
  v39 = 0;
  v40 = 0;
LABEL_23:
  sub_23C7F5610(v47);
  sub_23C7F5610(v31);
  sub_23C7F1754(v39);
  a1[6] = (void (*)())v40;
  a1[7] = (void (*)())v30;
  v42 = a1[8];
  v41 = a1[9];
  if (a10)
  {
    v43 = (void (*)())a10;
    v44 = a11;
    if (v42)
    {
      v44 = (void (*)())swift_allocObject();
      *((_QWORD *)v44 + 2) = v42;
      *((_QWORD *)v44 + 3) = v41;
      *((_QWORD *)v44 + 4) = a10;
      *((_QWORD *)v44 + 5) = a11;
      v43 = sub_23C842518;
    }
  }
  else
  {
    v43 = a1[8];
    v44 = a1[9];
  }
  a1[8] = v43;
  a1[9] = v44;
  return sub_23C7F5610(a10);
}

uint64_t sub_23C83C380(void (**a1)())
{
  uint64_t v1;

  return sub_23C83C07C(a1, *(_QWORD *)(v1 + 32), *(void (**)())(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)())(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)())(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(void (**)())(v1 + 104));
}

uint64_t type metadata accessor for ValueObservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueObservation);
}

void ValueObservation.print(_:to:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __int128 v48;

  v8 = *v4;
  v9 = v4[1];
  v10 = v4[2];
  v11 = v4[3];
  v32 = v4[5];
  v33 = v4[4];
  v30 = v4[7];
  v31 = v4[6];
  v28 = v4[9];
  v29 = v4[8];
  HIDWORD(v27) = *((unsigned __int8 *)v4 + 80);
  v26 = v4[11];
  v34 = *((_OWORD *)v4 + 6);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v13 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    *(_QWORD *)&v37 = a1;
    *((_QWORD *)&v37 + 1) = a2;
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    v15 = a1;
    v14 = a2;
  }
  else
  {
    v15 = 0;
    v14 = 0xE000000000000000;
  }
  v16 = sub_23C7DB388();
  sub_23C812C74(a3, (uint64_t)&v37, &qword_256BCC658);
  if (v39)
  {
    sub_23C7DB5CC(&v37, v16 + 16);
  }
  else
  {
    *(_QWORD *)(v16 + 40) = &type metadata for PrintOutputStream;
    *(_QWORD *)(v16 + 48) = sub_23C83C734();
    sub_23C7E7938((uint64_t)&v37, &qword_256BCC658);
  }
  *(_QWORD *)&v37 = v8;
  *((_QWORD *)&v37 + 1) = v9;
  v38 = v10;
  v39 = v11;
  v40 = v33;
  v41 = v32;
  v42 = v31;
  v43 = v30;
  v44 = v29;
  v45 = v28;
  v46 = BYTE4(v27);
  v47 = v26;
  v48 = v34;
  *(_QWORD *)&v34 = sub_23C7DB388();
  sub_23C7E95F4((_QWORD *)v34);
  v17 = (_QWORD *)sub_23C7DB388();
  sub_23C7E95F4(v17);
  v18 = (_QWORD *)sub_23C7DB388();
  sub_23C7E95F4(v18);
  v19 = (_QWORD *)sub_23C7DB388();
  sub_23C7E95F4(v19);
  v20 = sub_23C7DB388();
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(v20 + 32) = v12;
  *(_QWORD *)(v20 + 40) = v16;
  *(_QWORD *)(v20 + 48) = v15;
  *(_QWORD *)(v20 + 56) = v14;
  v21 = (_QWORD *)sub_23C7DB388();
  sub_23C7E95F4(v21);
  v22 = (_QWORD *)sub_23C7DB388();
  sub_23C7E95F4(v22);
  v23 = v12;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v24 = v23;
  ValueObservation.handleEvents(willStart:willFetch:willTrackRegion:databaseDidChange:didReceiveValue:didFail:didCancel:)((uint64_t)sub_23C83C774, v34, (uint64_t)sub_23C83C7A4, (uint64_t)v17, (uint64_t)sub_23C83C9CC, (uint64_t)v18, (uint64_t)sub_23C83CADC, (uint64_t)v19, (uint64_t)sub_23C83CC50, v20, (uint64_t)sub_23C83CD90, (uint64_t)v21, (uint64_t)sub_23C83CEA4, (uint64_t)v22, a4, v25, v26, v27, v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    *((uint64_t *)&v34 + 1),
    v35);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

}

uint64_t sub_23C83C710()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

unint64_t sub_23C83C734()
{
  unint64_t result;

  result = qword_256BCC660;
  if (!qword_256BCC660)
  {
    result = MEMORY[0x242626100](&unk_23C917714, &type metadata for PrintOutputStream);
    atomic_store(result, (unint64_t *)&qword_256BCC660);
  }
  return result;
}

id sub_23C83C774()
{
  uint64_t v0;

  return sub_23C83CD9C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_23C83C7A4()
{
  uint64_t v0;

  return sub_23C83CD9C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_23C83C7D0(uint64_t *a1, id a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[4];

  v5 = *a1;
  objc_msgSend(a2, sel_lock);
  v10[1] = 0;
  v10[2] = 0xE000000000000000;
  sub_23C911634();
  sub_23C910F5C();
  sub_23C910F5C();
  if (v5 && *(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    sub_23C7FCA8C();
    v7 = v6;
    swift_bridgeObjectRelease();
    v10[0] = v7;
    sub_23C869474(v10);
    v8 = sub_23C86561C(v10[0]);
    swift_release();
    v10[0] = v8;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
  }
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_23C800944(a3 + 16, *(_QWORD *)(a3 + 40));
  sub_23C91173C();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return objc_msgSend(a2, sel_unlock);
}

id sub_23C83C9CC(uint64_t *a1)
{
  uint64_t v1;

  return sub_23C83C7D0(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_23C83C9D8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2 + 16;
  objc_msgSend(a1, sel_lock);
  sub_23C911634();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_beginAccess();
  sub_23C800944(v4, *(_QWORD *)(a2 + 40));
  sub_23C91173C();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return objc_msgSend(a1, sel_unlock);
}

id sub_23C83CADC()
{
  uint64_t v0;

  return sub_23C83C9D8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_23C83CAE8(int a1, id a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a3 + 16;
  objc_msgSend(a2, sel_lock);
  sub_23C910F5C();
  sub_23C910F5C();
  swift_getAssociatedTypeWitness();
  sub_23C9119F4();
  swift_beginAccess();
  sub_23C800944(v5, *(_QWORD *)(a3 + 40));
  sub_23C91173C();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return objc_msgSend(a2, sel_unlock);
}

uint64_t sub_23C83CC20()
{
  uint64_t v0;

  sub_23C7DB484();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_23C83CC50(int a1)
{
  uint64_t v1;

  return sub_23C83CAE8(a1, *(id *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

id sub_23C83CC60(int a1, id a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a3 + 16;
  objc_msgSend(a2, sel_lock);
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C7E79A8(&qword_25430CCC8);
  sub_23C911730();
  swift_beginAccess();
  sub_23C800944(v5, *(_QWORD *)(a3 + 40));
  sub_23C91173C();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return objc_msgSend(a2, sel_unlock, 0, 0xE000000000000000);
}

id sub_23C83CD90(int a1)
{
  uint64_t v1;

  return sub_23C83CC60(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_23C83CD9C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2 + 16;
  objc_msgSend(a1, sel_lock);
  swift_bridgeObjectRetain();
  sub_23C7EBCB0();
  sub_23C910F5C();
  swift_beginAccess();
  sub_23C800944(v4, *(_QWORD *)(a2 + 40));
  sub_23C91173C();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return objc_msgSend(a1, sel_unlock);
}

uint64_t sub_23C83CE7C()
{
  uint64_t v0;

  sub_23C7E17F8();
  swift_bridgeObjectRelease();
  sub_23C7E5E14();
  return swift_deallocObject();
}

id sub_23C83CEA4()
{
  uint64_t v0;

  return sub_23C83CD9C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C83CED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v25 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v7 = sub_23C7E6724();
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - v9;
  v22 = sub_23C7E6724();
  v11 = sub_23C9114E4();
  v12 = *(_QWORD *)(v11 - 8);
  sub_23C7DEF74();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v26 = (char *)&v21 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(uint64_t))(v3 + 96))(v16);
  v17 = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
  if (v17)
    return sub_23C7EE444();
  v27 = v11;
  v19 = (uint64_t)v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  v20 = v22;
  if (sub_23C7DE718(v19, 1, v22) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v27);
    result = sub_23C9117B4();
    __break(1u);
  }
  else
  {
    sub_23C7EE444();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v25, v26, v20);
  }
  return result;
}

void ValueObservation.values(in:scheduling:bufferingPolicy:)()
{
  const void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21[14];

  sub_23C7DE8EC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v20[0] = v6;
  v20[1] = v7;
  v9 = v8;
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  swift_getAssociatedTypeWitness();
  sub_23C7DDB10(&qword_25430CCC8);
  v13 = sub_23C911208();
  v14 = *(_QWORD *)(v13 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v20 - v16;
  sub_23C7E1A44(v21, v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3, v13);
  v18 = (_QWORD *)sub_23C7DB388();
  v18[2] = v12;
  v18[3] = v11;
  sub_23C7E1A44(v18 + 4, v21);
  v19 = v20[0];
  v18[18] = v9;
  v18[19] = v19;
  v18[20] = v5;
  swift_checkMetadataState();
  sub_23C83D22C();
  sub_23C83D298(v21);
  swift_unknownObjectRetain();
  swift_retain();
  sub_23C7DBCB0();
}

void sub_23C83D22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_23C7E8E50();
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C7ECC28();
  v4 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v2, v4);
  v5 = sub_23C7ECC28();
  v9 = (_QWORD *)(v3 + *(int *)(type metadata accessor for AsyncValueObservation(v5, v6, v7, v8) + 28));
  *v9 = v1;
  v9[1] = v0;
  sub_23C7DF5B4();
}

uint64_t *sub_23C83D298(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[11];
  sub_23C7F5610(*a1);
  sub_23C7F5610(v2);
  sub_23C7F5610(v3);
  sub_23C7F5610(v4);
  sub_23C7F5610(v5);
  sub_23C7F5600(v6);
  swift_retain();
  return a1;
}

void AsyncValueObservation.makeAsyncIterator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  sub_23C7DE8EC();
  v2 = *(_QWORD *)(v1 + 16);
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C7E6268();
  sub_23C911250();
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v3);
  sub_23C7E6268();
  v4 = sub_23C911208();
  v5 = *(_QWORD *)(v4 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v15 - v7;
  sub_23C7E6268();
  v9 = sub_23C91125C();
  v10 = *(_QWORD *)(v9 - 8);
  sub_23C7DEF74();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - v12;
  v17 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v0, v4);
  v15[2] = v2;
  v15[3] = &v17;
  v16 = v0;
  sub_23C911268();
  sub_23C911238();
  if (v17)
  {
    v14 = *(void (**)(char *, uint64_t))(v10 + 8);
    sub_23C7DC47C();
    v14(v13, v9);
    sub_23C83DA24();
    swift_release();
    sub_23C7DBCB0();
  }
  else
  {
    sub_23C9117B4();
    __break(1u);
  }
}

uint64_t sub_23C83D4F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, uint64_t (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  sub_23C7DDB10(&qword_25430CCC8);
  v7 = sub_23C91122C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v36 - v12;
  v41 = type metadata accessor for AnyDatabaseCancellable();
  v16 = (_QWORD *)(a3 + *(int *)(type metadata accessor for AsyncValueObservation(0, a4, v14, v15) + 28));
  v17 = (void (*)(_QWORD *__return_ptr, uint64_t (*)(void *), uint64_t, uint64_t (*)(uint64_t), uint64_t))*v16;
  v38 = v16[1];
  v39 = v17;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v40 = a1;
  v37(v13, a1, v7);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 24) & ~v18;
  v36 = v18 | 7;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a4;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v21(v20 + v19, v13, v7);
  v22 = swift_allocObject();
  swift_weakInit();
  v23 = a1;
  v24 = v7;
  v37(v11, v23, v7);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a4;
  v21(v25 + v19, v11, v24);
  *(_QWORD *)(v25 + ((v19 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_retain();
  v39(v43, sub_23C842260, v20, sub_23C842328, v25);
  swift_release();
  swift_release();
  swift_release();
  v26 = v44;
  v27 = v45;
  v28 = sub_23C800944((uint64_t)v43, v44);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v30);
  v32 = sub_23C88FE74((uint64_t)v30, v41, v26, v27);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v43);
  *v42 = v32;
  swift_release();
  v33 = swift_allocObject();
  swift_weakInit();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = a4;
  *(_QWORD *)(v34 + 24) = v33;
  return sub_23C9111FC();
}

uint64_t sub_23C83D7D8(uint64_t a1)
{
  uint64_t v1;

  return sub_23C83D4F8(a1, *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23C83D7E4(void *a1)
{
  id v1;

  v1 = a1;
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C91122C();
  return sub_23C911220();
}

uint64_t sub_23C83D844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;

  v14 = a3;
  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7DDB10(&qword_25430CCC8);
  v9 = sub_23C9111F0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a4);
  sub_23C91122C();
  sub_23C911214();
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) != *MEMORY[0x24BEE6C68])
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C88FE14();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C83D9D0()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C88FE14();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C83DA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_23C7E3270();
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C84257C();
  v2 = sub_23C7EBCB0();
  v3(v2);
  v4 = sub_23C7ECC28();
  result = type metadata accessor for AsyncValueObservation.Iterator(v4, v5, v6, v7);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = v0;
  return result;
}

uint64_t AsyncValueObservation.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C84257C();
  *v1 = v0;
  v1[1] = sub_23C83DB0C;
  return sub_23C911244();
}

uint64_t sub_23C83DB0C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23C83DB54()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23C84251C;
  return AsyncValueObservation.Iterator.next()();
}

uint64_t sub_23C83DBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_23C83DC4C;
  return sub_23C9111E4();
}

uint64_t sub_23C83DC4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_23C83DCA8(uint64_t a1)
{
  uint64_t v1;

  AsyncValueObservation.makeAsyncIterator()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t ValueObservation.publisher(in:scheduling:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const void *v5;
  uint64_t v11;
  uint64_t v13[14];

  sub_23C7E1A44(v13, v5);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a4 + 16);
  sub_23C7E1A44((void *)(v11 + 32), v5);
  *(_QWORD *)(v11 + 144) = a1;
  *(_QWORD *)(v11 + 152) = a2;
  *(_QWORD *)(v11 + 160) = a3;
  *a5 = sub_23C83D228;
  a5[1] = v11;
  sub_23C83D298(v13);
  swift_unknownObjectRetain();
  return swift_retain();
}

void sub_23C83DD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  sub_23C7E1A44(&v11, a5);
  type metadata accessor for ValueObservation(0, a9, a10, v10);
  sub_23C7EBCB0();
  ValueObservation.start(in:scheduling:onError:onChange:)();
}

uint64_t sub_23C83DE30()
{
  _QWORD *v0;

  if (v0[4])
    sub_23C7DB484();
  if (v0[6])
    sub_23C7E6930();
  if (v0[8])
    swift_release();
  if (v0[10])
    swift_release();
  if (v0[12])
    swift_release();
  if (v0[15] >= 2uLL)
    swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23C83DEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_23C83DD84(a1, a2, a3, a4, v4 + 4, v4[18], v4[19], v4[20], v4[2], v4[3]);
}

uint64_t sub_23C83DEEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t DatabasePublishers.Value.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD v17[5];

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v9 = v3[1];
  v13 = _s17ValueSubscriptionCMa(0, v11, v12, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a3);
  sub_23C7DC47C();
  v14 = sub_23C83DFF0(v10, v9, (uint64_t)v8);
  v17[3] = v13;
  v17[4] = MEMORY[0x242626100](&unk_23C915568, v13);
  v17[0] = v14;
  sub_23C910C5C();
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
}

uint64_t _s17ValueSubscriptionCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s17ValueSubscriptionCMn);
}

uint64_t *sub_23C83DFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  return sub_23C83E118(a1, a2, a3, v6);
}

uint64_t sub_23C83E040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = _s17ValueSubscriptionC16WaitingForDemandVMa(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t sub_23C83E0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = _s17ValueSubscriptionC9ObservingVMa(0, a3, a4, v9);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t sub_23C83E10C(uint64_t a1, uint64_t a2)
{
  return DatabasePublishers.Value.receive<A>(subscriber:)(a1, a2, a2);
}

uint64_t *sub_23C83E118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 80);
  v10 = *(_QWORD *)(*v4 + 88);
  v11 = _s17ValueSubscriptionC5StateOMa(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v17 - v13;
  v4[6] = 0;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v15 = *(_QWORD *)(v8 + 112);
  *(uint64_t *)((char *)v4 + v15) = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  sub_23C83E040(a3, a1, a2, v9, v10, (uint64_t)v14);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))((uint64_t)v4 + *(_QWORD *)(*v4 + 104), v14, v11);
  return v4;
}

void sub_23C83E21C()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  sub_23C88850C((uint64_t)sub_23C825B94, 0, (void (*)(id))sub_23C8421B8);

}

uint64_t sub_23C83E280(uint64_t *a1, void (*a2)(_QWORD *__return_ptr, uint64_t (*)(), _QWORD *, uint64_t (*)(), _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t result;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  void (*v75)(_QWORD *__return_ptr, uint64_t (*)(), _QWORD *, uint64_t (*)(), _QWORD *);
  char **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[40];
  _BYTE v84[40];
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;

  v75 = a2;
  v5 = *a1;
  v7 = *(_QWORD *)(*a1 + 80);
  v6 = *(_QWORD *)(*a1 + 88);
  v73 = _s17ValueSubscriptionC9ObservingVMa(0, v7, v6, a4);
  v70 = *(_QWORD *)(v73 - 8);
  v8 = MEMORY[0x24BDAC7A8](v73);
  v72 = (char *)&v69 - v9;
  v71 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v69 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = _s17ValueSubscriptionC16WaitingForDemandVMa(0, v7, v6, v11);
  v78 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v13 = (char *)&v69 - v12;
  v15 = _s17ValueSubscriptionC5StateOMa(0, v7, v6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v77 = (char *)&v69 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v76 = (char **)((char *)&v69 - v23);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v69 - v24;
  v26 = *(_QWORD *)(v5 + 104);
  v74 = a1;
  v27 = (uint64_t)a1 + v26;
  swift_beginAccess();
  v80 = v16;
  v28 = *(char ***)(v16 + 16);
  v81 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v28)(v25, v27, v15);
  v79 = v15;
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v73 = (uint64_t)v19;
    v40 = v78;
    v41 = v25;
    v42 = v82;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v13, v41, v82);
    sub_23C910CA4();
    v43 = (uint64_t)v75;
    result = sub_23C910C8C();
    v44 = v40;
    v45 = v13;
    v46 = (uint64_t)v69;
    if ((result & 1) == 0)
    {
      if (v43 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      if (!v43)
        return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v13, v42);
    }
    v47 = v7;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v13, v7);
    v48 = (void (*)(_QWORD, _QWORD, _QWORD))v76;
    sub_23C83E0B0(v46, v43, v7, v6, (uint64_t)v76);
    v49 = v79;
    swift_storeEnumTagMultiPayload();
    v50 = v80;
    v51 = v77;
    (*(void (**)(char *, _QWORD, uint64_t))(v80 + 32))(v77, v48, v49);
    v76 = v28;
    v52 = v81;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 40))(v52, v51, v49);
    swift_endAccess();
    v75 = *(void (**)(_QWORD *__return_ptr, uint64_t (*)(), _QWORD *, uint64_t (*)(), _QWORD *))&v45[*(int *)(v82 + 36)];
    v53 = v6;
    v54 = swift_allocObject();
    v77 = v45;
    v55 = v54;
    swift_weakInit();
    v56 = (_QWORD *)swift_allocObject();
    v56[2] = v7;
    v56[3] = v53;
    v56[4] = v55;
    v57 = swift_allocObject();
    swift_weakInit();
    v58 = (_QWORD *)swift_allocObject();
    v58[2] = v47;
    v58[3] = v53;
    v58[4] = v57;
    swift_retain();
    swift_retain();
    swift_retain();
    v75(v85, sub_23C8421F4, v56, sub_23C842200, v58);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v59 = v73;
    ((void (*)(uint64_t, uint64_t, uint64_t))v76)(v73, v81, v49);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v82);
      sub_23C7EFC04((uint64_t)v85, (uint64_t)v84);
      sub_23C84213C((uint64_t)v84, (uint64_t)v83);
      v64 = (uint64_t)(v74 + 2);
      swift_beginAccess();
      sub_23C842000((uint64_t)v83, v64);
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v59, v79);
    }
    else
    {
      v60 = v77;
      v61 = v82;
      if ((_DWORD)result != 2)
      {
LABEL_26:
        __break(1u);
        return result;
      }
      v62 = v86;
      v63 = v87;
      sub_23C7E7E34(v85, v86);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v60, v61);
    }
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v85);
  }
  if ((_DWORD)result != 1)
    return result;
  v30 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v31 = v72;
  v32 = v73;
  v30(v72, v25, v73);
  v33 = *(int *)(v32 + 36);
  v34 = *(_QWORD *)&v31[v33];
  sub_23C910CA4();
  v35 = sub_23C910C8C();
  v36 = v80;
  if ((v35 & 1) == 0)
  {
    sub_23C910CA4();
    v37 = sub_23C910C8C();
    v38 = sub_23C910CA4();
    if ((v37 & 1) != 0)
    {
LABEL_20:
      *(_QWORD *)&v31[v33] = v38;
      goto LABEL_21;
    }
    v39 = (int64_t)v75;
    result = sub_23C910C8C();
    if ((result & 1) != 0)
    {
LABEL_9:
      v38 = sub_23C910CA4();
      goto LABEL_20;
    }
    if (((v34 | v39) & 0x8000000000000000) == 0)
    {
      v38 = v34 + v39;
      if (!__OFADD__(v34, v39))
      {
        if ((v38 & 0x8000000000000000) == 0)
          goto LABEL_20;
        goto LABEL_25;
      }
      goto LABEL_9;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_21:
  v65 = (void (*)(_QWORD, _QWORD, _QWORD))v76;
  v30((char *)v76, v31, v32);
  v66 = v79;
  swift_storeEnumTagMultiPayload();
  v67 = v77;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 32))(v77, v65, v66);
  v68 = v81;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 40))(v68, v67, v66);
  return swift_endAccess();
}

uint64_t sub_23C83E96C()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C83F0DC();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C83E9C8()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C83EC64();
    return swift_release();
  }
  return result;
}

void sub_23C83EA24()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  sub_23C8C411C((uint64_t)sub_23C826280, 0);

}

uint64_t sub_23C83EA80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];

  v6 = _s17ValueSubscriptionC5StateOMa(0, *(_QWORD *)(*(_QWORD *)a2 + 80), *(_QWORD *)(*(_QWORD *)a2 + 88), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v14 - v8 + 16;
  sub_23C7F1754(*a1);
  swift_beginAccess();
  sub_23C812C74(a2 + 16, (uint64_t)v16, &qword_256BCCA88);
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  swift_beginAccess();
  sub_23C842000((uint64_t)v14, a2 + 16);
  swift_endAccess();
  swift_storeEnumTagMultiPayload();
  v10 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  sub_23C84213C((uint64_t)v16, (uint64_t)v14);
  v11 = swift_allocObject();
  result = sub_23C84213C((uint64_t)v14, v11 + 16);
  *a1 = (uint64_t)sub_23C8421B0;
  a1[1] = v11;
  return result;
}

uint64_t sub_23C83EBE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_23C812C74(a1, (uint64_t)v4, &qword_256BCCA88);
  v1 = v5;
  if (!v5)
    return sub_23C7E7938((uint64_t)v4, &qword_256BCCA88);
  v2 = v6;
  sub_23C7E7E34(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v4);
}

void sub_23C83EC64()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  sub_23C88850C((uint64_t)sub_23C8263E0, 0, (void (*)(id))sub_23C84211C);

}

uint64_t sub_23C83ECC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v56 = a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 80);
  v7 = *(_QWORD *)(*a1 + 88);
  v8 = _s17ValueSubscriptionC5StateOMa(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v47 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)&v47 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v47 - v16;
  v54 = v6;
  v19 = _s17ValueSubscriptionC9ObservingVMa(0, v6, v7, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v53 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v47 - v23;
  v25 = (uint64_t)a1 + *(_QWORD *)(v5 + 104);
  swift_beginAccess();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v26(v17, v25, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  v48 = v9;
  v49 = v25;
  v50 = v20;
  v27 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v27(v24, v17, v19);
  v28 = *(_QWORD *)&v24[*(int *)(v19 + 36)];
  v29 = sub_23C910C98();
  sub_23C910CA4();
  v30 = v19;
  if ((sub_23C910C8C() & 1) != 0)
  {
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0)
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v19);
  }
  sub_23C910CA4();
  if ((sub_23C910C8C() & 1) == 0)
  {
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0 || v29 >= v28)
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v19);
  }
  v47 = v27;
  v31 = sub_23C910C68();
  v32 = v55;
  v33 = v8;
  v26(v55, v49, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v34 = v24;
    v35 = v53;
    v47(v53, v32, v30);
    v36 = *(int *)(v30 + 36);
    v37 = *(_QWORD *)&v35[v36];
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) == 0)
    {
      sub_23C910CA4();
      v38 = sub_23C910C8C();
      v39 = sub_23C910CA4();
      if ((v38 & 1) == 0)
      {
        result = sub_23C910C8C();
        if ((result & 1) != 0)
          goto LABEL_14;
        if ((v37 | v31) < 0)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v39 = v37 + v31;
        if (__OFADD__(v37, v31))
        {
LABEL_14:
          v39 = sub_23C910CA4();
        }
        else if (v39 < 0)
        {
LABEL_32:
          __break(1u);
          return result;
        }
      }
      *(_QWORD *)&v35[v36] = v39;
      v37 = v39;
    }
    v41 = v50;
    sub_23C910CA4();
    if ((sub_23C910C8C() & 1) != 0)
    {
LABEL_28:
      (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v30);
      v43 = v51;
      v47(v51, v35, v30);
      swift_storeEnumTagMultiPayload();
      v44 = v48;
      v45 = v52;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v52, v43, v33);
      v46 = v49;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 40))(v46, v45, v33);
      return swift_endAccess();
    }
    sub_23C910CA4();
    result = sub_23C910C8C();
    if ((result & 1) != 0)
    {
      v42 = sub_23C910CA4();
LABEL_27:
      *(_QWORD *)&v35[v36] = v42;
      goto LABEL_28;
    }
    if (v37 < 0)
    {
      __break(1u);
    }
    else if (v37)
    {
      v42 = v37 - 1;
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_31;
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v32, v8);
}

void sub_23C83F0DC()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  sub_23C8C411C((uint64_t)sub_23C83F134, 0);

}

unint64_t sub_23C83F134()
{
  return 0xD000000000000015;
}

id sub_23C83F150(uint64_t *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  _OWORD v38[2];
  uint64_t v39;

  v36 = a3;
  v37 = a1;
  v5 = *a2;
  v7 = *(_QWORD *)(*a2 + 80);
  v6 = *(_QWORD *)(*a2 + 88);
  v8 = _s17ValueSubscriptionC5StateOMa(0, v7, v6, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v31 - v12;
  v35 = v6;
  v15 = _s17ValueSubscriptionC9ObservingVMa(0, v7, v6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v34 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - v19;
  v21 = (uint64_t)a2 + *(_QWORD *)(v5 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v21, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v32 = v7;
  sub_23C7F1754(*v37);
  v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v22(v20, v13, v15);
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  swift_beginAccess();
  sub_23C842000((uint64_t)v38, (uint64_t)(a2 + 2));
  swift_endAccess();
  v23 = v33;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v21, v23, v8);
  swift_endAccess();
  v24 = v34;
  v22(v34, v20, v15);
  v25 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v26 = swift_allocObject();
  v27 = v35;
  *(_QWORD *)(v26 + 16) = v32;
  *(_QWORD *)(v26 + 24) = v27;
  v22((char *)(v26 + v25), v24, v15);
  v28 = v36;
  v29 = v37;
  *(_QWORD *)(v26 + ((v17 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v36;
  *v29 = (uint64_t)sub_23C8420CC;
  v29[1] = v26;
  return v28;
}

uint64_t sub_23C83F3D4()
{
  return sub_23C910C50();
}

uint64_t *sub_23C83F40C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  sub_23C7E7938((uint64_t)(v0 + 2), &qword_256BCCA88);
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = _s17ValueSubscriptionC5StateOMa(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);

  return v0;
}

uint64_t sub_23C83F480()
{
  sub_23C83F40C();
  return swift_deallocClassInstance();
}

void sub_23C83F4A0()
{
  sub_23C83E21C();
}

void sub_23C83F4C0()
{
  sub_23C83EA24();
}

uint64_t static ValueObservation<>.trackingConstantRegion<A>(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7E3270();
  v1 = (_QWORD *)sub_23C7DB388();
  v5 = sub_23C7E4210(v1, v2, v3, v4);
  MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Fetch<A>, v5);
  sub_23C7E17E0();
  v0[11] = 0;
  v0[12] = sub_23C83F588;
  v0[13] = v1;
  return sub_23C7E0928();
}

uint64_t sub_23C83F540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_23C83DEEC(a1, a2, a3);
  return swift_retain();
}

uint64_t sub_23C83F564()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C83F588@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23C83F540(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t static ValueObservation<>.tracking<A>(regions:fetch:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23C7E8E50();
  v2 = (_QWORD *)sub_23C7DB388();
  v6 = sub_23C7E4210(v2, v3, v4, v5);
  MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Fetch<A>, v6);
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_BYTE *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = v0;
  *(_QWORD *)(v1 + 96) = sub_23C84256C;
  *(_QWORD *)(v1 + 104) = v2;
  sub_23C7DC47C();
  return swift_bridgeObjectRetain();
}

uint64_t static ValueObservation<>.tracking<A>(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7E3270();
  v1 = (_QWORD *)sub_23C7DB388();
  v5 = sub_23C7E4210(v1, v2, v3, v4);
  MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Fetch<A>, v5);
  sub_23C7E17E0();
  v0[11] = 1;
  v0[12] = sub_23C84256C;
  v0[13] = v1;
  return sub_23C7E0928();
}

void sub_23C83F680()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C83F690(_QWORD *a1)
{
  if (*a1)
    swift_release();
  if (a1[2])
    swift_release();
  if (a1[4])
    swift_release();
  if (a1[6])
    swift_release();
  if (a1[8])
    swift_release();
  if (a1[11] >= 2uLL)
    swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23C83F710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  if (v13 >= 2)
    v13 = swift_bridgeObjectRetain();
  v15 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v14;
  swift_retain();
  return a1;
}

uint64_t sub_23C83F820(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v14 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (*(_QWORD *)(a1 + 64))
  {
    if (v16)
    {
      v17 = a2[9];
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v17;
      swift_retain();
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = a2[9];
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v18;
    swift_retain();
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_36:
  v19 = (unint64_t *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v21 = a2[11];
  if (v20 >= 2)
  {
    if (v21 >= 2)
    {
      *v19 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23C7E7938(a1 + 88, qword_256BCC680);
      *v19 = a2[11];
    }
  }
  else
  {
    *v19 = v21;
    if (v21 >= 2)
      swift_bridgeObjectRetain();
  }
  v22 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v22;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_23C83FA80(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_23C83FA88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v14 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (*(_QWORD *)(a1 + 64))
  {
    if (v16)
    {
      v17 = a2[9];
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v17;
      swift_release();
      goto LABEL_36;
    }
    swift_release();
  }
  else if (v16)
  {
    v18 = a2[9];
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v18;
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_36:
  v20 = (unint64_t *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v21 = a2[11];
  if (v19 >= 2)
  {
    if (v21 >= 2)
    {
      *v20 = v21;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    sub_23C7E7938(a1 + 88, qword_256BCC680);
  }
  *v20 = v21;
LABEL_41:
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  swift_release();
  return a1;
}

uint64_t sub_23C83FC7C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 96);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C83FCBC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23C83FD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8400C4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6CA8]);
}

uint64_t *sub_23C83FD30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_23C7DDB10(&qword_25430CCC8);
    v7 = sub_23C911208();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t sub_23C83FDE0(uint64_t a1)
{
  uint64_t v2;

  sub_23C7DDB10(&qword_25430CCC8);
  v2 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_23C83FE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t sub_23C83FED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C83FF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_23C83FFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911208();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t sub_23C840070()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C84007C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C840478(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6CA8]);
}

uint64_t sub_23C840088()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23C840094(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23C840538(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6CA8]);
}

uint64_t type metadata accessor for AsyncValueObservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncValueObservation);
}

uint64_t sub_23C8400AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8400C4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6D08]);
}

uint64_t sub_23C8400C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_23C7DDB10(&qword_25430CCC8);
  result = a4(319, v5, v6, MEMORY[0x24BEE3F20]);
  if (v8 <= 0x3F)
  {
    sub_23C7E8990();
    return 0;
  }
  return result;
}

uint64_t *sub_23C840140(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_23C7DDB10(&qword_25430CCC8);
    v7 = sub_23C911250();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t sub_23C8401E8(uint64_t a1)
{
  uint64_t v2;

  sub_23C7DDB10(&qword_25430CCC8);
  v2 = sub_23C911250();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_23C840254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_23C8402D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C840360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_23C8403DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v6 = sub_23C911250();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t sub_23C840460()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C84046C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C840478(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6D08]);
}

uint64_t sub_23C840478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = sub_23C7DDB10(&qword_25430CCC8);
  v10 = a4(0, v8, v9, MEMORY[0x24BEE3F20]);
  if (*(_DWORD *)(*(_QWORD *)(v10 - 8) + 84) == (_DWORD)a2)
    return sub_23C7DE718(a1, a2, v10);
  v12 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_23C840520()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23C84052C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23C840538(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6D08]);
}

void sub_23C840538(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *(_QWORD *)(a4 + 16);
  v11 = sub_23C7DDB10(&qword_25430CCC8);
  v12 = a5(0, v10, v11, MEMORY[0x24BEE3F20]);
  if (*(_DWORD *)(*(_QWORD *)(v12 - 8) + 84) == a3)
  {
    sub_23C7DE70C(a1, a2, a2, v12);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
    sub_23C7DF5B4();
  }
}

uint64_t type metadata accessor for AsyncValueObservation.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncValueObservation.Iterator);
}

uint64_t type metadata accessor for DatabasePublishers.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabasePublishers.Value);
}

