uint64_t sub_23C8405E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = _s17ValueSubscriptionC5StateOMa(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s17ValueSubscriptionC5StateOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s17ValueSubscriptionC5StateOMn);
}

uint64_t sub_23C84067C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = _s17ValueSubscriptionC16WaitingForDemandVMa(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = _s17ValueSubscriptionC9ObservingVMa(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_23C840718(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (v10 | 1) > 0x18)
  {
    v13 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
  }
  else
  {
    v14 = __src[v10];
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v4 + v10) = 1;
      return v4;
    }
    if (v14)
    {
      memcpy(__dst, __src, v10 | 1);
      return v4;
    }
    (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v16 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    v17 = v16[1];
    v18 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v16;
    v18[1] = v17;
    *((_BYTE *)v4 + v10) = 0;
  }
  swift_retain();
  return v4;
}

_DWORD *sub_23C840854(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 16;
  v5 = v3 + 8;
  if (v5 <= v4)
    v5 = v4;
  v6 = v5 & 0xFFFFFFF8;
  v7 = *((unsigned __int8 *)result + v5);
  if (v7 >= 2 && v6 != 0)
    v7 = *result + 2;
  if (v7 == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(v2 + 8))(result);
  if (!v7)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    return (_DWORD *)swift_release();
  }
  return result;
}

_BYTE *sub_23C8408F8(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v13 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    v14 = v13[1];
    v15 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v15[1] = v14;
    __dst[v10] = 0;
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_23C8409F8(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 16;
    v10 = v8 + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v16 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      v17 = v16[1];
      v18 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v18 = *v16;
      v18[1] = v17;
      __dst[v11] = 0;
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *sub_23C840B74(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;
  v9 = v7 + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_23C840C70(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 16;
    v10 = v8 + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 0;
    }
  }
  return __dst;
}

uint64_t sub_23C840DE8(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  v3 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 16;
  v5 = v3 + 8;
  if (v5 <= v4)
    v5 = v4;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v6 = v5 | 1;
  v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v8)
      goto LABEL_20;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    v13 = a1[v5];
    if (v13 >= 3)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 254;
}

void sub_23C840EC0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 16;
  v7 = v5 + 8;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 | 1;
  v9 = 8 * (v7 | 1);
  if (a3 < 0xFE)
  {
    v10 = 0;
  }
  else if (v8 <= 3)
  {
    v12 = (a3 + ~(-1 << v9) - 253) >> v9;
    if (v12 > 0xFFFE)
    {
      v10 = 4u;
    }
    else if (v12 >= 0xFF)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 != 0;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v8 < 4)
  {
    v11 &= ~(-1 << v9);
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
    {
      *a1 = v11;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
  }
  *(_DWORD *)a1 = v11;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t sub_23C841050(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v3 = v2 + 16;
  v4 = v2 + 8;
  if (v4 <= v3)
    v4 = v3;
  v5 = v4 & 0xFFFFFFF8;
  v6 = *((unsigned __int8 *)a1 + v4);
  if (v6 >= 2 && v5 != 0)
    return (*a1 + 2);
  return v6;
}

void sub_23C841098(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  size_t v6;
  char v7;
  unsigned int v8;

  v4 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 + 16;
  v6 = v4 + 8;
  if (v6 <= v5)
    v6 = v5;
  if (a2 > 1)
  {
    if ((_DWORD)v6)
      v7 = 2;
    else
      v7 = a2;
    if ((_DWORD)v6)
      v8 = a2 - 2;
    else
      v8 = 0;
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t _s17ValueSubscriptionC16WaitingForDemandVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s17ValueSubscriptionC16WaitingForDemandVMn);
}

uint64_t _s17ValueSubscriptionC9ObservingVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&_s17ValueSubscriptionC9ObservingVMn);
}

uint64_t sub_23C841128()
{
  return sub_23C841578();
}

uint64_t *sub_23C841138(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_23C8411E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23C8411F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C841254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C8412B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C84130C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C841368(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
      return sub_23C7DE718(a1, v6, v4);
    return 0;
  }
  if (((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v7 = 2;
  else
    v7 = a2 - v6 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23C8413D8 + 4 * byte_23C91525A[v9]))();
}

void sub_23C84142C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    v12 = 0;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (a2 > v7)
  {
    if ((_DWORD)v8)
    {
      v13 = ~v7 + a2;
      bzero(a1, v8);
      *a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t sub_23C84150C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *(_BYTE *)(v4 + v5) = 0;
  if ((_DWORD)a2)
    return sub_23C7DE70C(v4, a2, a3, a4);
  return result;
}

void sub_23C841548(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x23C841550);
  JUMPOUT(0x23C841530);
}

uint64_t sub_23C841568()
{
  return sub_23C841578();
}

uint64_t sub_23C841578()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    sub_23C7E8990();
    return 0;
  }
  return result;
}

uint64_t sub_23C8415CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C841648 + 4 * byte_23C915269[v11]))();
  }
}

void sub_23C8416C8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C8417B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueObservationTrackingMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for ValueObservationTrackingMode(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for ValueObservationTrackingMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for ValueObservationTrackingMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueObservationTrackingMode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ValueObservationTrackingMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueObservationTrackingMode()
{
  return &type metadata for ValueObservationTrackingMode;
}

_QWORD *destroy for ValueObservationEvents(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    result = (_QWORD *)swift_release();
  if (v1[4])
    result = (_QWORD *)swift_release();
  if (v1[6])
    result = (_QWORD *)swift_release();
  if (v1[8])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for ValueObservationEvents(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = a2[4];
  if (v7)
  {
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v9 = a2[6];
  if (v9)
  {
    v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  v11 = a2[8];
  if (v11)
  {
    v12 = a2[9];
    a1[8] = v11;
    a1[9] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

_QWORD *assignWithCopy for ValueObservationEvents(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (a1[6])
  {
    if (v13)
    {
      v14 = a2[7];
      a1[6] = v13;
      a1[7] = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    a1[6] = v13;
    a1[7] = v15;
    swift_retain();
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (!a1[8])
  {
    if (v16)
    {
      v18 = a2[9];
      a1[8] = v16;
      a1[9] = v18;
      swift_retain();
      return a1;
    }
LABEL_35:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_35;
  }
  v17 = a2[9];
  a1[8] = v16;
  a1[9] = v17;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ValueObservationEvents(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (a1[6])
  {
    if (v13)
    {
      v14 = a2[7];
      a1[6] = v13;
      a1[7] = v14;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    a1[6] = v13;
    a1[7] = v15;
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (!a1[8])
  {
    if (v16)
    {
      v18 = a2[9];
      a1[8] = v16;
      a1[9] = v18;
      return a1;
    }
LABEL_35:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_35;
  }
  v17 = a2[9];
  a1[8] = v16;
  a1[9] = v17;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueObservationEvents(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ValueObservationEvents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueObservationEvents()
{
  return &type metadata for ValueObservationEvents;
}

void sub_23C841FD8()
{
  JUMPOUT(0x242626100);
}

void sub_23C841FE8()
{
  JUMPOUT(0x242626100);
}

id sub_23C841FF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C83F150(a1, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24), a4);
}

uint64_t sub_23C842000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCCA88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C842048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_23C7ECC28();
  v6 = *(_QWORD *)(_s17ValueSubscriptionC9ObservingVMa(v2, v3, v4, v5) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v7, v1);

  return swift_deallocObject();
}

uint64_t sub_23C8420CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_23C7ECC28();
  _s17ValueSubscriptionC9ObservingVMa(v2, v3, v1, v4);
  sub_23C7DFC1C();
  return sub_23C83F3D4();
}

uint64_t sub_23C84211C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C83ECC8(*(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_23C842134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C83EA80(a1, v4, a3, a4);
}

uint64_t sub_23C84213C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCCA88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C842184()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C8421B0()
{
  uint64_t v0;

  return sub_23C83EBE4(v0 + 16);
}

uint64_t sub_23C8421B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C83E280(*(uint64_t **)(v4 + 16), *(void (**)(_QWORD *__return_ptr, uint64_t (*)(), _QWORD *, uint64_t (*)(), _QWORD *))(v4 + 24), a3, a4);
}

uint64_t sub_23C8421D0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23C8421F4()
{
  return sub_23C83E96C();
}

uint64_t sub_23C842200()
{
  return sub_23C83E9C8();
}

uint64_t sub_23C84220C()
{
  uint64_t v0;

  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C7E9B40();
  sub_23C7EC674();
  sub_23C7E6C8C(v0);
  return sub_23C7E988C();
}

uint64_t sub_23C842260(void *a1)
{
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C842570();
  return sub_23C83D7E4(a1);
}

uint64_t sub_23C8422C0()
{
  uint64_t v0;

  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C7E9B40();
  sub_23C7EC674();
  sub_23C7E6C8C(v0);
  swift_release();
  return sub_23C7E988C();
}

uint64_t sub_23C842328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C842570();
  sub_23C7DFC1C();
  return sub_23C83D844(a1, v1 + v4, *(_QWORD *)(v1 + v5), v3);
}

uint64_t sub_23C84238C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v6;

  v6 = a1;
  a2(&v6);
  return a4(&v6);
}

uint64_t sub_23C8423D8()
{
  return sub_23C83D9D0();
}

void sub_23C8423E4()
{
  uint64_t v0;

  sub_23C890848(*(uint64_t (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_23C8423F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_23C842428(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_23C84244C(uint64_t *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  return sub_23C84238C(*a1, a2, a3, a4);
}

uint64_t sub_23C842458(uint64_t *a1)
{
  uint64_t v1;

  return sub_23C84244C(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t *))(v1 + 32));
}

uint64_t sub_23C842468()
{
  sub_23C7E17F8();
  return swift_deallocObject();
}

uint64_t sub_23C842488()
{
  return swift_deallocObject();
}

uint64_t sub_23C842498()
{
  sub_23C7DB484();
  sub_23C7E5E14();
  return swift_deallocObject();
}

void sub_23C8424B0(uint64_t a1)
{
  uint64_t v1;

  sub_23C8B654C(a1, *(void (**)(void))(v1 + 32));
}

uint64_t sub_23C8424C0()
{
  sub_23C7E17F8();
  sub_23C7DB484();
  sub_23C7E5E14();
  return swift_deallocObject();
}

uint64_t sub_23C8424DC()
{
  sub_23C7E6930();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C842504()
{
  uint64_t v0;

  return sub_23C83B8F8(*(void (**)(char *))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 16));
}

uint64_t sub_23C842570()
{
  return sub_23C91122C();
}

uint64_t sub_23C84257C()
{
  return sub_23C911250();
}

void sub_23C842588(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1;
    v30 = MEMORY[0x24BEE4AF8];
    sub_23C7FD400();
    v6 = sub_23C8F74D0(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = v6;
      if (v6 < 1 << *(_BYTE *)(v5 + 32))
      {
        v9 = v5 + 64;
        v25 = v5 + 64;
        v26 = v5;
        while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
        {
          if (v7 != *(_DWORD *)(v5 + 36))
            goto LABEL_20;
          v29 = v7;
          v28 = v4;
          v10 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v8);
          v11 = *v10;
          v12 = v10[1];
          v13 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
          v14 = *v13;
          v15 = v13[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v16 = a2(v11, v12, v14, v15);
          if (v3)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          v19 = v16;
          v20 = v17;
          v21 = v18;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v22 = *(_QWORD *)(v30 + 16);
          if (v22 >= *(_QWORD *)(v30 + 24) >> 1)
            sub_23C7FD400();
          *(_QWORD *)(v30 + 16) = v22 + 1;
          v23 = (_QWORD *)(v30 + 24 * v22);
          v23[4] = v19;
          v23[5] = v20;
          v23[6] = v21;
          v5 = v26;
          if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v26 + 32)))
            goto LABEL_21;
          v9 = v25;
          if ((*(_QWORD *)(v25 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
            goto LABEL_22;
          if (v29 != *(_DWORD *)(v26 + 36))
            goto LABEL_23;
          v24 = sub_23C91158C();
          v4 = v28 - 1;
          if (v28 == 1)
            return;
          v8 = v24;
          v3 = 0;
          if ((v24 & 0x8000000000000000) == 0)
          {
            v7 = *(_DWORD *)(v26 + 36);
            if (v24 < 1 << *(_BYTE *)(v26 + 32))
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

uint64_t sub_23C8427CC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23C7FD400();
    v3 = v18;
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      swift_bridgeObjectRetain();
      v9 = a2(v7, v6, v8);
      v11 = v10;
      v13 = v12;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v18 + 16);
      if (v14 >= *(_QWORD *)(v18 + 24) >> 1)
        sub_23C7FD400();
      v5 += 3;
      *(_QWORD *)(v18 + 16) = v14 + 1;
      v15 = (_QWORD *)(v18 + 24 * v14);
      v15[4] = v9;
      v15[5] = v11;
      v15[6] = v13;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_23C8428E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = a1[3];
  v2 = a1[4] >> 1;
  if (__OFSUB__(v2, v1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v29 = a1[4] >> 1;
  v30 = a1[3];
  v28 = a1[2];
  v31 = *a1;
  v27 = *(_QWORD *)(*a1 + 16);
  if (v2 - v1 >= v27)
    v3 = *(_QWORD *)(*a1 + 16);
  else
    v3 = v2 - v1;
  v32 = MEMORY[0x24BEE4AF8];
  sub_23C7FDB3C(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      v4 = v31;
      v5 = (uint64_t *)(v31 + 32);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v6 = v3;
      v8 = v29;
      v7 = v30;
      v9 = v30;
      v10 = v28;
      v11 = v27;
      while (v11)
      {
        if (v8 == v9)
          goto LABEL_35;
        if (v9 >= v8)
          goto LABEL_36;
        v12 = *v5;
        v13 = *(_QWORD *)(v10 + 8 * v9);
        if (v13 < *v5)
          goto LABEL_37;
        if (v12 < 0)
          goto LABEL_43;
        v15 = *(_QWORD *)(v32 + 16);
        v14 = *(_QWORD *)(v32 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_23C7FDB3C(v14 > 1, v15 + 1, 1);
          v11 = v27;
          v10 = v28;
          v8 = v29;
          v7 = v30;
          v4 = v31;
        }
        *(_QWORD *)(v32 + 16) = v15 + 1;
        v16 = v32 + 16 * v15;
        *(_QWORD *)(v16 + 32) = v12;
        *(_QWORD *)(v16 + 40) = v13;
        ++v5;
        ++v9;
        if (!--v6)
          goto LABEL_18;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
    }
    else
    {
      v4 = v31;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v8 = v29;
      v7 = v30;
      v9 = v30;
      v10 = v28;
LABEL_18:
      v17 = *(_QWORD *)(v4 + 16);
      if (v3 == v17)
      {
LABEL_19:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return v32;
      }
      v19 = v4 + 32;
      v20 = v9;
      while (v3 < v17)
      {
        if (v8 == v20)
          goto LABEL_19;
        if (v9 < v7 || v20 >= v8)
          goto LABEL_39;
        v22 = *(_QWORD *)(v19 + 8 * v3);
        v23 = *(_QWORD *)(v10 + 8 * v20);
        if (v23 < v22)
          goto LABEL_40;
        if (v22 < 0)
          goto LABEL_43;
        v25 = *(_QWORD *)(v32 + 16);
        v24 = *(_QWORD *)(v32 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_23C7FDB3C(v24 > 1, v25 + 1, 1);
          v10 = v28;
          v8 = v29;
          v7 = v30;
          v4 = v31;
        }
        ++v3;
        *(_QWORD *)(v32 + 16) = v25 + 1;
        v26 = v32 + 16 * v25;
        *(_QWORD *)(v26 + 32) = v22;
        *(_QWORD *)(v26 + 40) = v23;
        v17 = *(_QWORD *)(v4 + 16);
        ++v20;
        if (v3 == v17)
          goto LABEL_19;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t sub_23C842B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24 * v1 + 8);
  sub_23C7DB3D4();
  return v2;
}

double sub_23C842BEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_23C8461F0(a1 + 40 * v2 - 8, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_23C842C2C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(a1 + 8 * v1 + 24);
  else
    return 0;
}

void sub_23C842C50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40 * v3);
    v6 = *(v4 - 1);
    v5 = *v4;
    v7 = *((unsigned __int8 *)v4 + 8);
    v9 = v4[2];
    v8 = v4[3];
    sub_23C7DB3D4();
    swift_retain();
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v7;
  a2[3] = v9;
  a2[4] = v8;
  sub_23C7DF5B4();
}

uint64_t sub_23C842CBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16 * v1 + 16);
  sub_23C7DB3D4();
  return v2;
}

_QWORD *sub_23C842CFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[5];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 8))(v11, a2, a3);
  if (v5)
    return (_QWORD *)v4;
  v7 = v11[3];
  v8 = v11[4];
  sub_23C7DEA44(v11);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v10 + 16) > a1)
  {
    v4 = *(_QWORD *)(v10 + 24 * a1 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
    return (_QWORD *)v4;
  }
  __break(1u);
  return result;
}

uint64_t splittingRowAdapters(columnCounts:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[20];

  v20[19] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23C7E79A8(&qword_25430CA48);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 32) = 0;
    sub_23C7DB3D4();
    v4 = 0;
    for (i = 0; i != v1; ++i)
    {
      v6 = *(_QWORD *)(a1 + 8 * i + 32);
      v7 = __OFADD__(v4, v6);
      v4 += v6;
      if (v7)
        __break(1u);
      v8 = *(_QWORD *)(inited + 24);
      if (i + 1 >= v8 >> 1)
      {
        sub_23C7F22AC(v8 > 1, i + 2, 1, inited);
        inited = v9;
      }
      *(_QWORD *)(inited + 16) = i + 2;
      *(_QWORD *)(inited + 8 * i + 40) = v4;
    }
    sub_23C7DE934();
    v20[0] = inited;
    v20[1] = sub_23C87638C(1, inited);
    v20[2] = v10;
    v20[3] = v11;
    v20[4] = v12;
    sub_23C7DF858();
    v13 = sub_23C8428E0(v20);
    swift_unknownObjectRelease();
    v14 = sub_23C842C2C(inited);
    v16 = v15;
    sub_23C7DB624();
    if ((v16 & 1) != 0)
    {
      __break(1u);
    }
    else if ((v14 & 0x8000000000000000) == 0)
    {
      v17 = sub_23C84332C(v13);
      sub_23C7E072C();
      sub_23C7E79A8(&qword_256BCBB08);
      v18 = swift_initStackObject();
      *(_OWORD *)(v18 + 16) = xmmword_23C912A20;
      *(_QWORD *)(v18 + 56) = &type metadata for SuffixRowAdapter;
      *(_QWORD *)(v18 + 64) = &protocol witness table for SuffixRowAdapter;
      *(_QWORD *)(v18 + 32) = v14;
      sub_23C7FB584();
      return v17;
    }
    sub_23C7DC484();
    result = sub_23C7E8278();
    __break(1u);
  }
  else
  {
    sub_23C7E79A8(&qword_256BCBB08);
    result = sub_23C7DB388();
    *(_OWORD *)(result + 16) = xmmword_23C912A20;
    *(_QWORD *)(result + 56) = &type metadata for SuffixRowAdapter;
    *(_QWORD *)(result + 64) = &protocol witness table for SuffixRowAdapter;
    *(_QWORD *)(result + 32) = 0;
  }
  return result;
}

GRDBInternal::SuffixRowAdapter __swiftcall SuffixRowAdapter.init(fromIndex:)(Swift::Int fromIndex)
{
  Swift::Int *v1;
  GRDBInternal::SuffixRowAdapter result;

  if (fromIndex < 0)
  {
    sub_23C7DC484();
    result.index = sub_23C7E8278();
    __break(1u);
  }
  else
  {
    *v1 = fromIndex;
    sub_23C7E1A0C();
  }
  return result;
}

void RangeRowAdapter.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (a1 < 0)
  {
    sub_23C7DC484();
    sub_23C7E8278();
    __break(1u);
  }
  else
  {
    *a3 = a1;
    a3[1] = a2;
    sub_23C7E1A0C();
  }
}

{
  uint64_t v3;

  if ((a1 & 0x8000000000000000) == 0)
  {
    v3 = a2 + 1;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else if (v3 >= a1)
    {
      *a3 = a1;
      a3[1] = v3;
      sub_23C7E1A0C();
      return;
    }
    __break(1u);
  }
  sub_23C7DC484();
  sub_23C7E8278();
  __break(1u);
}

uint64_t sub_23C84308C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7FD400();
    v2 = v11;
    v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_23C7E79A8(&qword_25430B3C0);
      sub_23C7E79A8(&qword_25430B3C8);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FD400();
        v2 = v11;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD400();
        v2 = v11;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      v6 = (_QWORD *)(v2 + 24 * v5);
      v6[4] = v8;
      v6[5] = v9;
      v6[6] = v10;
      v4 += 24;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C8431E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7FDAA0();
    v2 = v11;
    v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain();
      sub_23C7E79A8(&qword_256BCA5E8);
      sub_23C7E79A8(&qword_256BCA5E0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FDAA0();
        v2 = v11;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FDAA0();
        v2 = v11;
      }
      v4 += 24;
      *(_QWORD *)(v2 + 16) = v5 + 1;
      v6 = v2 + 24 * v5;
      *(_QWORD *)(v6 + 32) = v8;
      *(_QWORD *)(v6 + 40) = v9;
      *(_DWORD *)(v6 + 48) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C84332C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v4;
  __int128 v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FDB08();
    v2 = v12;
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = *v4;
      v12 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      if (v6 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        v8 = v5;
        sub_23C7FDB08();
        v5 = v8;
        v2 = v12;
      }
      v10 = &type metadata for RangeRowAdapter;
      v11 = &protocol witness table for RangeRowAdapter;
      v9 = v5;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_23C7DB5CC(&v9, v2 + 40 * v6 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _LayoutedColumnMapping._layoutColumns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C843424@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain_n();
  sub_23C7DAC44();
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v14 = a2;
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = a1 + 48;
    do
    {
      v7 = sub_23C910E18();
      v9 = v8;
      v10 = *(_QWORD *)(v15 + 16);
      if (v10 >= *(_QWORD *)(v15 + 24) >> 1)
        sub_23C7DAC44();
      *(_QWORD *)(v15 + 16) = v10 + 1;
      v11 = (_QWORD *)(v15 + 24 * v10);
      v11[5] = v9;
      v11[6] = v5;
      v11[4] = v7;
      v6 += 24;
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
    a2 = v14;
  }
  swift_bridgeObjectRelease();
  v12 = sub_23C7DAC78(v15);
  result = swift_bridgeObjectRelease();
  *a2 = a1;
  a2[1] = v12;
  return result;
}

void sub_23C843554(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v8 = swift_unknownObjectRetain();
  v9 = sub_23C876070(v8, a1, a2, a3);
  v21 = MEMORY[0x24BEE4AF8];
  swift_unknownObjectRetain();
  sub_23C7DAC44();
  v10 = (a3 >> 1) - a2;
  if (a3 >> 1 == a2)
  {
LABEL_9:
    swift_unknownObjectRelease();
    v18 = sub_23C7DAC78(v21);
    swift_unknownObjectRelease();
    *a4 = v9;
    a4[1] = v18;
  }
  else
  {
    if ((uint64_t)(a3 >> 1) > a2)
    {
      v19 = v9;
      v20 = a4;
      swift_unknownObjectRetain();
      v11 = 0;
      v12 = a1 + 24 * a2 + 16;
      while (!__OFADD__(v11, 1))
      {
        v13 = sub_23C910E18();
        v15 = v14;
        v16 = *(_QWORD *)(v21 + 16);
        if (v16 >= *(_QWORD *)(v21 + 24) >> 1)
          sub_23C7DAC44();
        *(_QWORD *)(v21 + 16) = v16 + 1;
        v17 = (_QWORD *)(v21 + 24 * v16);
        v17[4] = v13;
        v17[5] = v15;
        v17[6] = v11++;
        v12 += 24;
        if (v10 == v11)
        {
          swift_unknownObjectRelease();
          v9 = v19;
          a4 = v20;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t _LayoutedColumnMapping._mapping.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _LayoutedColumnMapping._scopes.getter()
{
  sub_23C7E79A8(&qword_25430D540);
  return sub_23C910DAC();
}

uint64_t sub_23C843724()
{
  return _LayoutedColumnMapping._scopes.getter();
}

Swift::Int_optional __swiftcall _LayoutedColumnMapping._layoutIndex(ofColumn:)(Swift::String ofColumn)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int_optional result;

  if (!*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
    goto LABEL_5;
  sub_23C7DF858();
  sub_23C7E94B8();
  if ((v2 & 1) == 0)
  {
    sub_23C7DB624();
LABEL_5:
    v3 = sub_23C910E18();
    sub_23C7E8E68(v3, v4);
    sub_23C7DB624();
    goto LABEL_6;
  }
  sub_23C7DB624();
LABEL_6:
  sub_23C7DB3A0();
  result.value = v5;
  result.is_nil = v6;
  return result;
}

unint64_t sub_23C8437BC(uint64_t a1, uint64_t a2)
{
  return (unint64_t)_LayoutedColumnMapping._layoutIndex(ofColumn:)(*(Swift::String *)&a1);
}

void Statement._layoutColumns.getter()
{
  uint64_t v0;
  uint64_t v1;

  Statement.columnNames.getter();
  v1 = sub_23C84587C(v0);
  sub_23C7DB624();
  sub_23C84308C(v1);
  swift_release();
  sub_23C7DB390();
}

Swift::Int_optional __swiftcall Statement._layoutIndex(ofColumn:)(Swift::String ofColumn)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v1 = sub_23C910E18();
  v3 = v2;
  sub_23C8E040C();
  sub_23C7E8E68(v1, v3);
  sub_23C7E072C();
  sub_23C7DE934();
  sub_23C7DB3A0();
  result.value = v4;
  result.is_nil = v5;
  return result;
}

void sub_23C843864()
{
  Statement._layoutColumns.getter();
}

unint64_t sub_23C843884(uint64_t a1, uint64_t a2)
{
  return (unint64_t)Statement._layoutIndex(ofColumn:)(*(Swift::String *)&a1);
}

uint64_t RowAdapter.addingScopes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v12;

  if (*(_QWORD *)(a1 + 16))
  {
    a4[3] = (uint64_t)&type metadata for ScopeAdapter;
    a4[4] = (uint64_t)&protocol witness table for ScopeAdapter;
    v9 = (uint64_t *)sub_23C7DB388();
    *a4 = (uint64_t)v9;
    v9[5] = a2;
    v9[6] = a3;
    v10 = sub_23C812004(v9 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v10, v4, a2);
    v9[7] = a1;
    return swift_bridgeObjectRetain();
  }
  else
  {
    a4[3] = a2;
    a4[4] = a3;
    v12 = sub_23C812004(a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v12, v4, a2);
  }
}

uint64_t ScopeAdapter.init(base:scopes:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_23C7DB5CC(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t EmptyRowAdapter._layoutedAdapter(from:)@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = &type metadata for _LayoutedColumnMapping;
  a1[4] = &protocol witness table for _LayoutedColumnMapping;
  return sub_23C843424(MEMORY[0x24BEE4AF8], a1);
}

uint64_t sub_23C8439DC@<X0>(_QWORD *a1@<X8>)
{
  return EmptyRowAdapter._layoutedAdapter(from:)(a1);
}

GRDBInternal::ColumnMapping __swiftcall ColumnMapping.init(_:)(GRDBInternal::ColumnMapping result)
{
  GRDBInternal::ColumnMapping *v1;

  v1->mapping._rawValue = result.mapping._rawValue;
  return result;
}

uint64_t ColumnMapping._layoutedAdapter(from:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = swift_bridgeObjectRetain();
  sub_23C842588(v3, sub_23C845A40);
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if (!v1)
  {
    v8 = v5;
    swift_bridgeObjectRetain();
    sub_23C844F70(&v8);
    sub_23C7DB62C();
    v7 = v8;
    a1[3] = &type metadata for _LayoutedColumnMapping;
    a1[4] = &protocol witness table for _LayoutedColumnMapping;
    return sub_23C843424(v7, a1);
  }
  return result;
}

uint64_t sub_23C843AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a5[3];
  v9 = a5[4];
  sub_23C7E7E34(a5, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(a3, a4, v8, v9);
  LOBYTE(v9) = v11;
  v12 = a5[3];
  v13 = a5[4];
  sub_23C7E7E34(a5, v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = result;
  if ((v9 & 1) != 0)
  {
    v17 = *(_QWORD *)(result + 16);
    if (v17)
    {
      v25 = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v18 = (uint64_t *)(v15 + 48);
      do
      {
        v19 = *(v18 - 1);
        v20 = *v18;
        v22 = *(_QWORD *)(v25 + 16);
        v21 = *(_QWORD *)(v25 + 24);
        swift_bridgeObjectRetain();
        if (v22 >= v21 >> 1)
          sub_23C7E649C();
        *(_QWORD *)(v25 + 16) = v22 + 1;
        v23 = v25 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v19;
        *(_QWORD *)(v23 + 40) = v20;
        v18 += 3;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    sub_23C911634();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v16 = 0;
    sub_23C7EF5D4();
    swift_allocError();
    *(_DWORD *)v24 = 21;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = 0xE000000000000000;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_BYTE *)(v24 + 56) = 0;
    swift_willThrow();
    return v16;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)(result + 16))
  {
    v16 = *(_QWORD *)(result + 24 * v10 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C843D74@<X0>(_QWORD *a1@<X8>)
{
  return ColumnMapping._layoutedAdapter(from:)(a1);
}

void SuffixRowAdapter._layoutedAdapter(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *v2;
  v5 = sub_23C7E90F0(a1);
  sub_23C87638C(v4, v5);
  a2[3] = (uint64_t)&type metadata for _LayoutedColumnMapping;
  a2[4] = (uint64_t)&protocol witness table for _LayoutedColumnMapping;
  sub_23C843554(v6, v7, v8, a2);
}

void sub_23C843DEC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  SuffixRowAdapter._layoutedAdapter(from:)(a1, a2);
}

void RangeRowAdapter._layoutedAdapter(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *v2;
  v5 = v2[1];
  v6 = sub_23C7E90F0(a1);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 < v4 || (uint64_t)v7 < v5)
    goto LABEL_9;
  if ((v5 & 0x8000000000000000) == 0)
  {
    a2[3] = (uint64_t)&type metadata for _LayoutedColumnMapping;
    a2[4] = (uint64_t)&protocol witness table for _LayoutedColumnMapping;
    sub_23C843554(v6 + 32, v4, (2 * v5) | 1, a2);
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_23C843EF8(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  RangeRowAdapter._layoutedAdapter(from:)(a1, a2);
}

uint64_t ScopeAdapter.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = &type metadata for SuffixRowAdapter;
  a2[4] = &protocol witness table for SuffixRowAdapter;
  *a2 = 0;
  a2[5] = result;
  return result;
}

uint64_t ScopeAdapter._layoutedAdapter(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  __int128 v44[2];
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50[3];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  sub_23C7E7E34(v2, v2[3]);
  result = sub_23C7EC690();
  if (v3)
    return result;
  v40 = a2;
  v7 = v52;
  v8 = v53;
  sub_23C7DEA44(v51);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  v10 = v2[5];
  v11 = *(_QWORD *)(v10 + 64);
  v41 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v43 = v2[5];
  swift_bridgeObjectRetain();
  v15 = 0;
  if (!v14)
    goto LABEL_7;
LABEL_5:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v17 = v16 | (v15 << 6);
LABEL_6:
  v18 = *(_QWORD *)(v43 + 56);
  v19 = (_QWORD *)(*(_QWORD *)(v43 + 48) + 16 * v17);
  v20 = v19[1];
  *(_QWORD *)&v46 = *v19;
  *((_QWORD *)&v46 + 1) = v20;
  sub_23C8461F0(v18 + 40 * v17, (uint64_t)v47);
  sub_23C7DB3D4();
  while (1)
  {
    sub_23C845A58((uint64_t)&v46, (uint64_t)&v49);
    v23 = *((_QWORD *)&v49 + 1);
    if (!*((_QWORD *)&v49 + 1))
    {
      swift_release();
      v38 = v52;
      v39 = v53;
      sub_23C7E7E34(v51, v52);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v39 + 8))(&v49, v38, v39);
      *(_OWORD *)v40 = v49;
      *(_QWORD *)(v40 + 24) = &unk_250D84558;
      *(_QWORD *)(v40 + 32) = &off_250D84530;
      *(_QWORD *)(v40 + 16) = v9;
      return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v51);
    }
    v24 = v49;
    sub_23C7DB5CC(v50, (uint64_t)&v46);
    sub_23C7E7E34(&v46, *((uint64_t *)&v47[0] + 1));
    sub_23C7EC690();
    v25 = a1;
    sub_23C7DB5CC(&v45, (uint64_t)v44);
    swift_isUniquelyReferenced_nonNull_native();
    v54 = v9;
    v26 = sub_23C7E94B8();
    if (__OFADD__(v9[2], (v27 & 1) == 0))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v28 = v26;
    v29 = v27;
    sub_23C7E79A8(&qword_25430B3F0);
    if ((sub_23C911778() & 1) != 0)
    {
      v30 = sub_23C7E94B8();
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_45;
      v28 = v30;
    }
    v9 = v54;
    if ((v29 & 1) != 0)
    {
      v32 = v54[7] + 40 * v28;
      _s12GRDBInternal13DatabaseEventVwxx_0(v32);
      sub_23C7DB5CC(v44, v32);
    }
    else
    {
      v54[(v28 >> 6) + 8] |= 1 << v28;
      v33 = (_QWORD *)(v9[6] + 16 * v28);
      *v33 = v24;
      v33[1] = v23;
      sub_23C7DB5CC(v44, v9[7] + 40 * v28);
      v34 = v9[2];
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
        goto LABEL_42;
      v9[2] = v36;
      swift_bridgeObjectRetain();
    }
    sub_23C7DB62C();
    swift_bridgeObjectRelease();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v46);
    a1 = v25;
    if (v14)
      goto LABEL_5;
LABEL_7:
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_43;
    if (v21 < v42)
    {
      v22 = *(_QWORD *)(v41 + 8 * v21);
      if (v22)
        goto LABEL_10;
      v15 += 2;
      if (v21 + 1 >= v42)
      {
        v15 = v21;
        goto LABEL_15;
      }
      v22 = *(_QWORD *)(v41 + 8 * v15);
      if (v22)
      {
        ++v21;
LABEL_10:
        v14 = (v22 - 1) & v22;
        v17 = __clz(__rbit64(v22)) + (v21 << 6);
        v15 = v21;
        goto LABEL_6;
      }
      if (v21 + 2 < v42)
        break;
    }
LABEL_15:
    v14 = 0;
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    v46 = 0u;
  }
  v22 = *(_QWORD *)(v41 + 8 * (v21 + 2));
  if (v22)
  {
    v21 += 2;
    goto LABEL_10;
  }
  v37 = v21 + 3;
  if (v21 + 3 >= v42)
  {
    v15 = v21 + 2;
    goto LABEL_15;
  }
  v22 = *(_QWORD *)(v41 + 8 * v37);
  if (v22)
  {
    v21 += 3;
    goto LABEL_10;
  }
  while (1)
  {
    v21 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v21 >= v42)
    {
      v15 = v42 - 1;
      goto LABEL_15;
    }
    v22 = *(_QWORD *)(v41 + 8 * v21);
    ++v37;
    if (v22)
      goto LABEL_10;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

uint64_t sub_23C8443A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ScopeAdapter._layoutedAdapter(from:)(a1, a2);
}

uint64_t sub_23C8443B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8443DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8443E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[5];

  sub_23C8461F0((uint64_t)(v1 + 5), (uint64_t)v16);
  v4 = v16[3];
  v5 = v16[4];
  sub_23C7DEA44(v16);
  v6 = v1[3];
  v7 = v1[4];
  sub_23C7E7E34(v1, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v12, a1, v6);
  if (!v2)
  {
    v8 = v13;
    v9 = v14;
    sub_23C7E7E34(v12, v13);
    v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 8);
    v15[3] = &type metadata for _LayoutedColumnMapping;
    v15[4] = &protocol witness table for _LayoutedColumnMapping;
    v10(v15, v8, v9);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v15, v4);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  }
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v16);
}

uint64_t sub_23C844500(uint64_t a1)
{
  return sub_23C8443E4(a1);
}

uint64_t RenameColumnAdapter.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t RenameColumnAdapter._layoutedAdapter(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_23C7E90F0(a1);
  v4 = sub_23C8427CC(v3, sub_23C845AA0);
  swift_bridgeObjectRelease();
  a2[3] = &type metadata for _LayoutedColumnMapping;
  a2[4] = &protocol witness table for _LayoutedColumnMapping;
  return sub_23C843424(v4, a2);
}

uint64_t sub_23C8445B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RenameColumnAdapter._layoutedAdapter(from:)(a1, a2);
}

uint64_t sub_23C8445C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  _OWORD v11[3];
  __int128 v12;

  *(_QWORD *)&v11[0] = a1;
  sub_23C8461F0((uint64_t)a2, (uint64_t)v11 + 8);
  v5 = a2[3];
  v6 = a2[4];
  sub_23C7E6734(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v10, v5, v6);
  v12 = v10;
  v7 = v11[1];
  *a3 = v11[0];
  a3[1] = v7;
  v8 = v12;
  a3[2] = v11[2];
  a3[3] = v8;
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a2);
}

uint64_t sub_23C844658()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
}

void sub_23C844664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_23C7E7E34((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  sub_23C7DB3A0();
}

uint64_t sub_23C8446A8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = *v2;
  v7 = v2[4];
  v8 = v2[5];
  sub_23C7E7E34(v2 + 1, v7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v10 = v9(v7, v8);
  *a2 = v6;
  a2[1] = v10;
  a2[2] = v4;
  a2[3] = v5;
  sub_23C7DC46C();
  return swift_bridgeObjectRetain();
}

void sub_23C844720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E0938();
    if (!v5 & v4)
    {
      v6 = *(_QWORD *)(v3 + 24 * v2 + 32);
      v7 = *(_QWORD *)(*(_QWORD *)v1 + 40);
      v8 = *(_QWORD *)(*(_QWORD *)v1 + 48);
      sub_23C7E7E34((_QWORD *)(*(_QWORD *)v1 + 16), v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v6, v7, v8);
      sub_23C7DB3A0();
      return;
    }
  }
  __break(1u);
}

void sub_23C844788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E0938();
    if (!v5 & v4)
    {
      v6 = *(_QWORD *)(v3 + 24 * v2 + 32);
      v7 = *(_QWORD *)(*(_QWORD *)v1 + 40);
      v8 = *(_QWORD *)(*(_QWORD *)v1 + 48);
      sub_23C7E6734((_QWORD *)(*(_QWORD *)v1 + 16));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, v7, v8);
      sub_23C7DF5B4();
      return;
    }
  }
  __break(1u);
}

#error "23C844970: call analysis failed (funcsize=119)"

#error "23C844B84: call analysis failed (funcsize=127)"

void sub_23C844BDC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E0938();
    if (!v3 & v2)
    {
      sub_23C7E4D2C();
      sub_23C7E1A4C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 72));
      sub_23C7DFA88();
      return;
    }
  }
  __break(1u);
}

void sub_23C844C18(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E0938();
    if (!v3 & v2)
    {
      sub_23C7E4D2C();
      sub_23C7E1A4C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 80));
      sub_23C7DFA88();
      return;
    }
  }
  __break(1u);
}

void sub_23C844C54(uint64_t a1)
{
  char v1;
  char v2;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E0938();
    if (!v2 & v1)
    {
      sub_23C7DB3D4();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_23C844C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  sub_23C7DF858();
  sub_23C7DB3D4();
  if (!v2)
    goto LABEL_5;
  sub_23C7DC46C();
  v3 = sub_23C7E94B8();
  if ((v4 & 1) == 0)
  {
    sub_23C7E072C();
LABEL_5:
    v6 = sub_23C910E18();
    v5 = sub_23C7E8E68(v6, v7);
    sub_23C7DE934();
    sub_23C7DB624();
    sub_23C7E072C();
    return v5;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v3);
  sub_23C7DE934();
  sub_23C7DB624();
  sub_23C7E072C();
  return v5;
}

uint64_t sub_23C844D40()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Row();
  v3 = *v0;
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  sub_23C7E6734((_QWORD *)(*v1 + 16));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 112))(v3, v4, v5);
  sub_23C8461F0((uint64_t)(v1 + 1), (uint64_t)v16);
  v7 = v17;
  v8 = v18;
  v9 = sub_23C800944((uint64_t)v16, v17);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *))(v12 + 16))(v11);
  v13 = sub_23C846130(v6, (uint64_t)v11, v2, v7, v8);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v16);
  return v13;
}

uint64_t sub_23C844E34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6[2];

  v1 = *v0;
  v2 = v0[4];
  v3 = v0[5];
  sub_23C7E7E34(v0 + 1, v2);
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 8);
  swift_retain();
  v4(v6, v2, v3);
  return sub_23C846084(v1, v6[0], v6[1]);
}

void sub_23C844EA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v3 = *(_QWORD *)(*v0 + 48);
  sub_23C7E7E34((_QWORD *)(*v0 + 16), v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v1, v2, v3);
  sub_23C7DB3A0();
}

uint64_t sub_23C844EFC()
{
  return sub_23C8447F4();
}

uint64_t sub_23C844F10()
{
  return sub_23C8449D8();
}

void sub_23C844F24(uint64_t a1)
{
  sub_23C844BDC(a1);
}

void sub_23C844F38(uint64_t a1)
{
  sub_23C844C18(a1);
}

uint64_t sub_23C844F4C()
{
  return sub_23C844C98();
}

uint64_t sub_23C844F70(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DE998();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C844FD8(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_23C844FD8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_127;
    if (v3)
      return sub_23C845648(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_126;
  v93 = result;
  v90 = a1;
  if (v3 > 1)
  {
    sub_23C7E79A8(&qword_25430B3C8);
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v92 = result;
    v96 = (char *)(result + 32);
LABEL_10:
    v6 = 0;
    v7 = *a1;
    v91 = *a1 + 48;
    v89 = *a1 - 24;
    v8 = MEMORY[0x24BEE4AF8];
    v94 = v3;
    v95 = v7;
    while (1)
    {
      v9 = v6++;
      if (v6 < v3)
      {
        v10 = *(_QWORD *)(v7 + 24 * v6);
        v11 = *(_QWORD *)(v7 + 24 * v9);
        v6 = v9 + 2;
        if (v9 + 2 < v3)
        {
          v12 = (uint64_t *)(v91 + 24 * v9);
          v13 = v10;
          while (1)
          {
            v15 = *v12;
            v12 += 3;
            v14 = v15;
            if (v10 < v11 == v15 >= v13)
              break;
            ++v6;
            v13 = v14;
            if (v6 >= v3)
            {
              v6 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v6 < v9)
            goto LABEL_128;
          if (v9 < v6)
          {
            v16 = 24 * v6;
            v17 = 24 * v9;
            v18 = v6;
            v19 = v9;
            do
            {
              if (v19 != --v18)
              {
                if (!v7)
                  goto LABEL_133;
                v20 = v7 + v17;
                v21 = v7 + v16;
                v22 = *(_QWORD *)(v7 + v17 + 16);
                v23 = *(_OWORD *)(v7 + v17);
                v24 = *(_QWORD *)(v7 + v16 - 8);
                *(_OWORD *)v20 = *(_OWORD *)(v7 + v16 - 24);
                *(_QWORD *)(v20 + 16) = v24;
                *(_OWORD *)(v21 - 24) = v23;
                *(_QWORD *)(v21 - 8) = v22;
              }
              ++v19;
              v16 -= 24;
              v17 += 24;
            }
            while (v19 < v18);
          }
        }
      }
      if (v6 < v3)
      {
        if (__OFSUB__(v6, v9))
          goto LABEL_125;
        if (v6 - v9 < v93)
        {
          v25 = v9 + v93;
          if (__OFADD__(v9, v93))
            goto LABEL_129;
          if (v25 >= v3)
            v25 = v3;
          if (v25 < v9)
          {
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v6 != v25)
          {
            v26 = v89 + 24 * v6;
            do
            {
              v27 = *(_QWORD *)(v7 + 24 * v6);
              v28 = v9;
              v29 = v26;
              do
              {
                if (v27 >= *(_QWORD *)v29)
                  break;
                if (!v7)
                  goto LABEL_131;
                v30 = *(_QWORD *)(v29 + 32);
                v31 = *(_QWORD *)(v29 + 40);
                *(_OWORD *)(v29 + 24) = *(_OWORD *)v29;
                *(_QWORD *)(v29 + 40) = *(_QWORD *)(v29 + 16);
                *(_QWORD *)v29 = v27;
                *(_QWORD *)(v29 + 8) = v30;
                *(_QWORD *)(v29 + 16) = v31;
                v29 -= 24;
                ++v28;
              }
              while (v6 != v28);
              ++v6;
              v26 += 24;
            }
            while (v6 != v25);
            v6 = v25;
          }
        }
      }
      if (v6 < v9)
        goto LABEL_120;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v33 = *(_QWORD *)(v8 + 16);
      v32 = *(_QWORD *)(v8 + 24);
      v34 = v33 + 1;
      v7 = v95;
      if (v33 >= v32 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v32 > 1), v33 + 1, 1, (char *)v8);
        v7 = v95;
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v34;
      v35 = v8 + 32;
      v36 = (uint64_t *)(v8 + 32 + 16 * v33);
      *v36 = v9;
      v36[1] = v6;
      if (v33)
      {
        while (1)
        {
          v37 = v34 - 1;
          if (v34 >= 4)
          {
            v42 = v35 + 16 * v34;
            v43 = *(_QWORD *)(v42 - 64);
            v44 = *(_QWORD *)(v42 - 56);
            v48 = __OFSUB__(v44, v43);
            v45 = v44 - v43;
            if (v48)
              goto LABEL_109;
            v47 = *(_QWORD *)(v42 - 48);
            v46 = *(_QWORD *)(v42 - 40);
            v48 = __OFSUB__(v46, v47);
            v40 = v46 - v47;
            v41 = v48;
            if (v48)
              goto LABEL_110;
            v49 = v34 - 2;
            v50 = (uint64_t *)(v35 + 16 * (v34 - 2));
            v52 = *v50;
            v51 = v50[1];
            v48 = __OFSUB__(v51, v52);
            v53 = v51 - v52;
            if (v48)
              goto LABEL_111;
            v48 = __OFADD__(v40, v53);
            v54 = v40 + v53;
            if (v48)
              goto LABEL_113;
            if (v54 >= v45)
            {
              v72 = (uint64_t *)(v35 + 16 * v37);
              v74 = *v72;
              v73 = v72[1];
              v48 = __OFSUB__(v73, v74);
              v75 = v73 - v74;
              if (v48)
                goto LABEL_119;
              v65 = v40 < v75;
              goto LABEL_77;
            }
          }
          else
          {
            if (v34 != 3)
            {
              v66 = *(_QWORD *)(v8 + 32);
              v67 = *(_QWORD *)(v8 + 40);
              v48 = __OFSUB__(v67, v66);
              v59 = v67 - v66;
              v60 = v48;
              goto LABEL_71;
            }
            v39 = *(_QWORD *)(v8 + 32);
            v38 = *(_QWORD *)(v8 + 40);
            v48 = __OFSUB__(v38, v39);
            v40 = v38 - v39;
            v41 = v48;
          }
          if ((v41 & 1) != 0)
            goto LABEL_112;
          v49 = v34 - 2;
          v55 = (uint64_t *)(v35 + 16 * (v34 - 2));
          v57 = *v55;
          v56 = v55[1];
          v58 = __OFSUB__(v56, v57);
          v59 = v56 - v57;
          v60 = v58;
          if (v58)
            goto LABEL_114;
          v61 = (uint64_t *)(v35 + 16 * v37);
          v63 = *v61;
          v62 = v61[1];
          v48 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          if (v48)
            goto LABEL_116;
          if (__OFADD__(v59, v64))
            goto LABEL_118;
          if (v59 + v64 >= v40)
          {
            v65 = v40 < v64;
LABEL_77:
            if (v65)
              v37 = v49;
            goto LABEL_79;
          }
LABEL_71:
          if ((v60 & 1) != 0)
            goto LABEL_115;
          v68 = (uint64_t *)(v35 + 16 * v37);
          v70 = *v68;
          v69 = v68[1];
          v48 = __OFSUB__(v69, v70);
          v71 = v69 - v70;
          if (v48)
            goto LABEL_117;
          if (v71 < v59)
            goto LABEL_88;
LABEL_79:
          v76 = v37 - 1;
          if (v37 - 1 >= v34)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (!v7)
            goto LABEL_132;
          v77 = (uint64_t *)(v35 + 16 * v76);
          v78 = *v77;
          v79 = (_QWORD *)(v35 + 16 * v37);
          v80 = v79[1];
          result = sub_23C8456C8((char *)(v7 + 24 * *v77), (char *)(v7 + 24 * *v79), v7 + 24 * v80, v96);
          if (v1)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v92 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v80 < v78)
            goto LABEL_106;
          if (v37 > *(_QWORD *)(v8 + 16))
            goto LABEL_107;
          *v77 = v78;
          *(_QWORD *)(v35 + 16 * v76 + 8) = v80;
          v81 = *(_QWORD *)(v8 + 16);
          if (v37 >= v81)
            goto LABEL_108;
          v34 = v81 - 1;
          result = (uint64_t)memmove((void *)(v35 + 16 * v37), v79 + 2, 16 * (v81 - 1 - v37));
          *(_QWORD *)(v8 + 16) = v81 - 1;
          v7 = v95;
          if (v81 <= 2)
            goto LABEL_88;
        }
      }
      v34 = 1;
LABEL_88:
      v3 = v94;
      if (v6 >= v94)
      {
        v5 = v92;
        goto LABEL_93;
      }
    }
  }
  v5 = MEMORY[0x24BEE4AF8];
  v96 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v92 = MEMORY[0x24BEE4AF8];
    goto LABEL_10;
  }
  v34 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v8 = MEMORY[0x24BEE4AF8];
LABEL_93:
  result = v8;
  v92 = v5;
  if (v34 >= 2)
  {
    v82 = *v90;
    do
    {
      v83 = v34 - 2;
      if (v34 < 2)
        goto LABEL_121;
      if (!v82)
        goto LABEL_134;
      v84 = result;
      v85 = *(_QWORD *)(result + 32 + 16 * v83);
      v86 = *(_QWORD *)(result + 32 + 16 * (v34 - 1) + 8);
      result = sub_23C8456C8((char *)(v82 + 24 * v85), (char *)(v82 + 24 * *(_QWORD *)(result + 32 + 16 * (v34 - 1))), v82 + 24 * v86, v96);
      if (v1)
        goto LABEL_90;
      if (v86 < v85)
        goto LABEL_122;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v84 = result;
      }
      if (v83 >= *(_QWORD *)(v84 + 16))
        goto LABEL_123;
      v87 = (_QWORD *)(v84 + 32 + 16 * v83);
      *v87 = v85;
      v87[1] = v86;
      v88 = *(_QWORD *)(v84 + 16);
      if (v34 > v88)
        goto LABEL_124;
      memmove((void *)(v84 + 32 + 16 * (v34 - 1)), (const void *)(v84 + 32 + 16 * v34), 16 * (v88 - v34));
      result = v84;
      *(_QWORD *)(v84 + 16) = v88 - 1;
      v34 = v88 - 1;
    }
    while (v88 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v92 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C845648(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 24 * a3 - 24;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 24 * a3);
      v7 = result;
      v8 = v5;
      do
      {
        if (v6 >= *(_QWORD *)v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = *(_QWORD *)(v8 + 32);
        v10 = *(_QWORD *)(v8 + 40);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 16);
        *(_QWORD *)v8 = v6;
        *(_QWORD *)(v8 + 8) = v9;
        *(_QWORD *)(v8 + 16) = v10;
        v8 -= 24;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 24;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C8456C8(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  __int128 v16;
  unint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;
  uint64_t v26;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  if (v9 >= v11)
  {
    sub_23C8F9080(a2, (uint64_t)(a3 - (_QWORD)a2) / 24, a4);
    v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v19 = a3 - 24;
    while (1)
    {
      v20 = (char *)(v19 + 24);
      v21 = v6 - 24;
      if (*((_QWORD *)v12 - 3) >= *((_QWORD *)v6 - 3))
      {
        v23 = v20 != v12 || v19 >= (unint64_t)v12;
        v21 = v12 - 24;
        v12 -= 24;
        if (!v23)
          goto LABEL_35;
      }
      else
      {
        v22 = v20 != v6 || v19 >= (unint64_t)v6;
        v6 -= 24;
        if (!v22)
          goto LABEL_35;
      }
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v19 = v24;
LABEL_35:
      v19 -= 24;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_23C8F9080(a1, (a2 - a1) / 24, a4);
  v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (*(_QWORD *)v6 >= *(_QWORD *)v4)
    {
      v14 = v4;
      v15 = v7 == v4;
      v4 += 24;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 24;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 24;
    if (v15)
      goto LABEL_12;
LABEL_11:
    v16 = *(_OWORD *)v14;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v7 = v16;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  v26 = (v12 - v4) / 24;
  if (v6 != v4 || v6 >= &v4[24 * v26])
    memmove(v6, v4, 24 * v26);
  return 1;
}

uint64_t sub_23C84587C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    result = swift_bridgeObjectRetain();
    v3 = 0;
    v4 = 0;
    v5 = v2 + 4;
    v6 = (uint64_t *)(result + 40);
    while (1)
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      if (v3)
      {
        result = swift_bridgeObjectRetain();
      }
      else
      {
        v9 = v2[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v11 = v10 <= 1 ? 1 : v10;
        sub_23C7E79A8(&qword_25430B3F8);
        v12 = (_QWORD *)swift_allocObject();
        v13 = (uint64_t)(j__malloc_size(v12) - 32) / 24;
        v12[2] = v11;
        v12[3] = 2 * v13;
        v14 = v12 + 4;
        v15 = v2[3] >> 1;
        v5 = &v12[3 * v15 + 4];
        v3 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        if (v2[2])
        {
          if (v12 != v2 || v14 >= &v2[3 * v15 + 4])
            memmove(v14, v2 + 4, 24 * v15);
          swift_bridgeObjectRetain();
          v2[2] = 0;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        result = swift_release();
        v2 = v12;
      }
      v17 = __OFSUB__(v3--, 1);
      if (v17)
        break;
      v6 += 2;
      *v5 = v4;
      v5[1] = v7;
      v5[2] = v8;
      v5 += 3;
      if (v1 == ++v4)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v3 = 0;
LABEL_23:
  v18 = v2[3];
  if (v18 < 2)
    return (uint64_t)v2;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v3);
  v20 = v19 - v3;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23C845A14()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C845A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23C843AAC(a1, a2, a3, a4, *(_QWORD **)(v4 + 16));
}

uint64_t sub_23C845A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430B3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C845AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(a2, a3);
  return a1;
}

void type metadata accessor for _LayoutedColumnMapping()
{
  sub_23C7DFB90();
}

uint64_t dispatch thunk of _LayoutedRowAdapter._mapping.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _LayoutedRowAdapter._scopes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _RowLayout._layoutColumns.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _RowLayout._layoutIndex(ofColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of _RowAdapter._layoutedAdapter(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void type metadata accessor for EmptyRowAdapter()
{
  sub_23C7DFB90();
}

void type metadata accessor for ColumnMapping()
{
  sub_23C7DFB90();
}

void type metadata accessor for SuffixRowAdapter()
{
  sub_23C7DFB90();
}

void type metadata accessor for RangeRowAdapter()
{
  sub_23C7DFB90();
}

uint64_t destroy for ScopeAdapter(uint64_t a1)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScopeAdapter(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ScopeAdapter(uint64_t *a1, uint64_t *a2)
{
  sub_23C8089A0(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ScopeAdapter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScopeAdapter(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScopeAdapter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScopeAdapter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ScopeAdapter()
{
  sub_23C7DFB90();
}

void type metadata accessor for RenameColumnAdapter()
{
  sub_23C7DFB90();
}

uint64_t destroy for Row.Prefetch()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23C845D50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DC46C();
  sub_23C7DB3A0();
}

_QWORD *assignWithCopy for Inflections(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Row.Prefetch(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Inflections(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Inflections(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LayoutedScopeAdapter()
{
  sub_23C7DFB90();
}

uint64_t sub_23C845ED8(uint64_t a1)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 40);
}

uint64_t sub_23C845EFC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *sub_23C845F58(uint64_t *a1, uint64_t *a2)
{
  sub_23C8089A0(a1, a2);
  sub_23C8089A0(a1 + 5, a2 + 5);
  return a1;
}

uint64_t sub_23C845F8C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_23C845FE4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C846024(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ChainedAdapter()
{
  sub_23C7DFB90();
}

uint64_t sub_23C846084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  _OWORD v8[4];
  _QWORD v9[5];

  v9[3] = &type metadata for _LayoutedColumnMapping;
  v9[4] = &protocol witness table for _LayoutedColumnMapping;
  v9[0] = a2;
  v9[1] = a3;
  sub_23C8461F0((uint64_t)v9, (uint64_t)v7);
  v3 = swift_retain();
  sub_23C8445C8(v3, v7, v8);
  type metadata accessor for Row();
  swift_allocObject();
  sub_23C846230((uint64_t)v8, (uint64_t)v7);
  sub_23C7F8F98();
  v5 = v4;
  sub_23C846264((uint64_t)v8);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return v5;
}

uint64_t sub_23C846130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];
  _OWORD v13[4];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  v7 = sub_23C812004(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v7, a2, a4);
  sub_23C8461F0((uint64_t)v14, (uint64_t)v12);
  v8 = swift_retain();
  sub_23C8445C8(v8, v12, v13);
  sub_23C7DB388();
  sub_23C846230((uint64_t)v13, (uint64_t)v12);
  sub_23C7F8F98();
  v10 = v9;
  sub_23C846264((uint64_t)v13);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  return v10;
}

void sub_23C8461F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_23C7DB390();
}

uint64_t sub_23C846230(uint64_t a1, uint64_t a2)
{
  sub_23C8462C8(a2, a1);
  return a2;
}

uint64_t sub_23C846264(uint64_t a1)
{
  sub_23C846290(a1);
  return a1;
}

uint64_t sub_23C846290(uint64_t a1)
{
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8462C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23C846348(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_23C8089A0(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C8463C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for AdaptedRowImpl()
{
  sub_23C7DFB90();
}

uint64_t sub_23C846440()
{
  uint64_t v0;

  return sub_23C831810(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C846448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];
  char v13;
  _QWORD __src[22];
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v2 = v15;
    v4 = (_BYTE *)(a1 + 40);
    do
    {
      v5 = *v4;
      __src[0] = *((_QWORD *)v4 - 1);
      LOBYTE(__src[1]) = v5;
      sub_23C846D18();
      v7 = v6;
      v9 = v8;
      v15 = v2;
      v10 = *(_QWORD *)(v2 + 16);
      if (v10 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD468();
        v2 = v15;
      }
      v4 += 16;
      v12[0] = v7;
      v12[1] = v9;
      v13 = 2;
      sub_23C8027EC((uint64_t)v12);
      sub_23C800B48(v12, __src);
      *(_QWORD *)(v2 + 16) = v10 + 1;
      memcpy((void *)(v2 + 168 * v10 + 32), __src, 0xA3uLL);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void abs(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 5456449;
  a11 = 0xE300000000000000;
  a12 = 0;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

void average(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 4675137;
  a11 = 0xE300000000000000;
  a12 = 1;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

uint64_t count(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[184];
  _QWORD __src[23];

  v1 = a1[3];
  v2 = a1[4];
  sub_23C7E7E34(a1, v1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 8))(__src, v1, v2);
  memcpy(v4, __src, sizeof(v4));
  sub_23C809AFC();
  return sub_23C8466B0((uint64_t)__src);
}

uint64_t sub_23C8466B0(uint64_t a1)
{
  sub_23C800D94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160));
  return a1;
}

void count(_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  __int16 v20;
  __n128 *v21;

  v1 = sub_23C7E7E34(a1, a1[3]);
  sub_23C7E3284((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v17);
  sub_23C7E79A8(&qword_25430CF70);
  v9 = (__n128 *)sub_23C7DE994();
  sub_23C7EC6A0(v9, (__n128)xmmword_23C912A20, v10, v11, v12, v13, v14, v15, v16, v18);
  sub_23C7E1800();
  v20 = 1;
  v21 = v9;
  sub_23C80A884((uint64_t)v19);
  sub_23C7E322C(v19);
  sub_23C7E6BBC();
}

void count(distinct:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  __int16 v20;
  __n128 *v21;

  v1 = sub_23C7E7E34(a1, a1[3]);
  sub_23C7E3284((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v17);
  sub_23C7E79A8(&qword_25430CF70);
  v9 = (__n128 *)sub_23C7DE994();
  sub_23C7EC6A0(v9, (__n128)xmmword_23C912A20, v10, v11, v12, v13, v14, v15, v16, v18);
  sub_23C7E1800();
  v20 = 257;
  v21 = v9;
  sub_23C80A884((uint64_t)v19);
  sub_23C7E322C(v19);
  sub_23C7E6BBC();
}

void *?? infix(_:_:)()
{
  _QWORD *v0;
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  __int16 v6;
  __n128 *v7;

  sub_23C7E9600();
  sub_23C7E79A8(&qword_25430CF70);
  v1 = (__n128 *)swift_allocObject();
  sub_23C7E4224(v1, (__n128)xmmword_23C9157F0);
  v2 = v0[3];
  v3 = v0[4];
  sub_23C7E7E34(v0, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5[0] = 0x4C4C554E4649;
  v5[1] = 0xE600000000000000;
  v6 = 0;
  v7 = v1;
  sub_23C80A884((uint64_t)v5);
  return sub_23C7E322C(v5);
}

void length(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 0x4854474E454CLL;
  a11 = 0xE600000000000000;
  a12 = 0;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

void max(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 5783885;
  a11 = 0xE300000000000000;
  a12 = 1;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

void min(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 5130573;
  a11 = 0xE300000000000000;
  a12 = 1;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

void sum(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 5068115;
  a11 = 0xE300000000000000;
  a12 = 1;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

void total(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, __int16 a12, __n128 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;

  sub_23C7EDE3C();
  a37 = v38;
  a38 = v39;
  sub_23C7E627C();
  sub_23C7E79A8(&qword_25430CF70);
  v40 = (__n128 *)sub_23C7DE994();
  sub_23C7E8294(v40, (__n128)xmmword_23C912A20);
  a10 = 0x4C41544F54;
  a11 = 0xE500000000000000;
  a12 = 1;
  a13 = v40;
  v41 = sub_23C80A884((uint64_t)&a10);
  sub_23C7E0948(v41);
  sub_23C7E9118();
}

uint64_t SQLSpecificExpressible.capitalized.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430DC20, a3);
}

uint64_t sub_23C846ADC()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t SQLSpecificExpressible.lowercased.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430D958, a3);
}

uint64_t SQLSpecificExpressible.uppercased.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430DA78, a3);
}

uint64_t SQLSpecificExpressible.localizedCapitalized.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430DA60, a3);
}

uint64_t SQLSpecificExpressible.localizedLowercased.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430DA40, a3);
}

uint64_t SQLSpecificExpressible.localizedUppercased.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_23C846BD0(a1, a2, &qword_25430DA50, a3);
}

uint64_t sub_23C846BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void *a4@<X8>)
{
  uint64_t inited;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  if (*a3 != -1)
    swift_once();
  sub_23C7E79A8(&qword_25430B0C8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(inited + 56) = &type metadata for SQLExpression;
  *(_QWORD *)(inited + 64) = &protocol witness table for SQLExpression;
  *(_QWORD *)(inited + 32) = swift_allocObject();
  v9(a1, v8);
  DatabaseFunction.callAsFunction(_:)(a4);
  swift_setDeallocating();
  return sub_23C8C931C();
}

void *SQLDateModifier.sqlExpression.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  sub_23C846D18();
  v3[0] = v0;
  v3[1] = v1;
  v4 = 2;
  sub_23C8027EC((uint64_t)v3);
  return sub_23C7E322C(v3);
}

void sub_23C846D18()
{
  __asm { BR              X11 }
}

uint64_t sub_23C846D48()
{
  sub_23C911280();
  sub_23C910F5C();
  return 0;
}

void sub_23C846E9C()
{
  sub_23C7E1A60();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C846E88);
}

uint64_t sub_23C846EE4@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)&loc_23C846E8C + 4 * byte_23C915809[a1]))(0x666F207472617473, 0xEE0068746E6F6D20);
}

void sub_23C846F1C()
{
  JUMPOUT(0x23C846E8CLL);
}

void sub_23C846F2C()
{
  JUMPOUT(0x23C846E8CLL);
}

void sub_23C846F40()
{
  JUMPOUT(0x23C846E8CLL);
}

void sub_23C846F60()
{
  JUMPOUT(0x23C846E8CLL);
}

void sub_23C846F7C()
{
  JUMPOUT(0x23C846E8CLL);
}

void julianDay(_:_:)()
{
  __n128 *v0;
  uint64_t v1;
  _QWORD v2[2];
  __int16 v3;
  uint64_t v4;

  sub_23C7E9600();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DE994();
  sub_23C7E4224(v0, (__n128)xmmword_23C912A20);
  sub_23C7EE454();
  sub_23C7DFC34();
  v1 = v2[0];
  v2[0] = 0x41444E41494C554ALL;
  v2[1] = 0xE900000000000059;
  v3 = 0;
  v4 = v1;
  sub_23C80A884((uint64_t)v2);
  sub_23C7E322C(v2);
  sub_23C7E4D60();
}

void dateTime(_:_:)()
{
  __n128 *v0;
  uint64_t v1;
  _QWORD v2[2];
  __int16 v3;
  uint64_t v4;

  sub_23C7E9600();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DE994();
  sub_23C7E4224(v0, (__n128)xmmword_23C912A20);
  sub_23C7EE454();
  sub_23C7DFC34();
  v1 = v2[0];
  v2[0] = 0x454D495445544144;
  v2[1] = 0xE800000000000000;
  v3 = 0;
  v4 = v1;
  sub_23C80A884((uint64_t)v2);
  sub_23C7E322C(v2);
  sub_23C7E4D60();
}

uint64_t initializeBufferWithCopyOfBuffer for SQLDateModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SQLDateModifier(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xF9 && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 248;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 7)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLDateModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C847134(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 6u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_23C84714C(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLDateModifier()
{
  return &type metadata for SQLDateModifier;
}

uint64_t sub_23C847174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_23C7E3084();
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = sub_23C910DAC();
  *(_QWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_WORD *)(v1 + 64) = 255;
  *(_QWORD *)(v1 + 16) = a1;
  swift_unownedRetain();
  swift_release();
  return v1;
}

void sub_23C8471E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;

  v6 = a3;
  v10 = (uint64_t *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v9 + 16);
  if (!v11)
  {
LABEL_12:
    sub_23C7E79A8(&qword_25430DA10);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 32) = v6;
    *(_QWORD *)(inited + 40) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = sub_23C874528(inited);
    sub_23C7F135C();
    v20 = *(_QWORD *)(*v10 + 16);
    sub_23C7F1588();
    v21 = *v10;
    *(_QWORD *)(v21 + 16) = v20 + 1;
    v22 = v21 + 32 * v20;
    *(_QWORD *)(v22 + 32) = a1;
    *(_QWORD *)(v22 + 40) = a2;
    *(_QWORD *)(v22 + 48) = v19;
    *(_BYTE *)(v22 + 56) = 2;
    return;
  }
  swift_bridgeObjectRetain();
  v12 = 0;
  v13 = 32;
  while (1)
  {
    v14 = (_QWORD *)(v9 + v13);
    if (*(_BYTE *)(v9 + v13 + 24) != 2)
      goto LABEL_10;
    v15 = v14[2];
    if (*v14 == a1 && v14[1] == a2)
      break;
    v17 = sub_23C911A18();
    swift_bridgeObjectRetain();
    if ((v17 & 1) != 0)
      goto LABEL_14;
    swift_bridgeObjectRelease();
LABEL_10:
    ++v12;
    v13 += 32;
    if (v11 == v12)
    {
      swift_bridgeObjectRelease();
      v6 = a3;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRetain();
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C8FA41C();
  swift_bridgeObjectRelease();
  v23 = *v10;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_23C890994();
    v23 = v30;
    *v10 = v30;
  }
  if (v12 >= *(_QWORD *)(v23 + 16))
  {
    __break(1u);
  }
  else
  {
    v25 = v23 + v13;
    v26 = *(_QWORD *)(v23 + v13);
    v27 = *(_QWORD *)(v23 + v13 + 8);
    v28 = *(_QWORD *)(v23 + v13 + 16);
    *(_QWORD *)v25 = a1;
    *(_QWORD *)(v25 + 8) = a2;
    *(_QWORD *)(v25 + 16) = v15;
    v29 = *(_BYTE *)(v23 + v13 + 24);
    *(_BYTE *)(v25 + 24) = 2;
    sub_23C808700(v26, v27, v28, v29);
  }
}

uint64_t sub_23C8473E4()
{
  uint64_t v0;

  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E2E54(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return v0;
}

uint64_t sub_23C84741C()
{
  sub_23C8473E4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StatementAuthorizer()
{
  return objc_opt_self();
}

void sub_23C84745C()
{
  sub_23C847468(&xmmword_25430B308);
}

void sub_23C847468(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t inited;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;

  sub_23C848180();
  v2 = MEMORY[0x24BEE4AF8];
  v3 = sub_23C910DAC();
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v3;
  v4._countAndFlagsBits = 36;
  v4._object = (void *)0xE100000000000000;
  v5._countAndFlagsBits = 115;
  v5._object = (void *)0xE100000000000000;
  Inflections.plural(_:options:_:)(v4, 1uLL, v5);
  v6._countAndFlagsBits = 9331;
  v6._object = (void *)0xE200000000000000;
  v7._countAndFlagsBits = 115;
  v7._object = (void *)0xE100000000000000;
  Inflections.plural(_:options:_:)(v6, 1uLL, v7);
  v8._countAndFlagsBits = 0x7365747C7861285ELL;
  v8._object = (void *)0xED00002473692974;
  v9._countAndFlagsBits = 1936011556;
  v9._object = (void *)0xE400000000000000;
  Inflections.plural(_:options:_:)(v8, 1uLL, v9);
  v10._countAndFlagsBits = 0x767C706F74636F28;
  v10._object = (void *)0xEE00247375297269;
  v11._countAndFlagsBits = 6893860;
  v11._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v10, 1uLL, v11);
  v12._countAndFlagsBits = 0x767C706F74636F28;
  v12._object = (void *)0xED00002469297269;
  v13._countAndFlagsBits = 6893860;
  v13._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v12, 1uLL, v13);
  v14._countAndFlagsBits = 0x737C7361696C6128;
  v14._object = (void *)0xEF24297375746174;
  v15._countAndFlagsBits = 1936011556;
  v15._object = (void *)0xE400000000000000;
  Inflections.plural(_:options:_:)(v14, 1uLL, v15);
  v16._countAndFlagsBits = 0x247329756228;
  v16._object = (void *)0xE600000000000000;
  v17._countAndFlagsBits = 0x7365733124;
  v17._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v16, 1uLL, v17);
  v18._countAndFlagsBits = 0x73656F3124;
  v19._object = (void *)0x800000023C91D8F0;
  v19._countAndFlagsBits = 0xD000000000000014;
  v18._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v19, 1uLL, v18);
  v20._countAndFlagsBits = 0x6D75295D69745B28;
  v20._object = (void *)0xE900000000000024;
  v21._countAndFlagsBits = 6369572;
  v21._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v20, 1uLL, v21);
  v22._countAndFlagsBits = 0x2461295D69745B28;
  v22._object = (void *)0xE800000000000000;
  v23._countAndFlagsBits = 6369572;
  v23._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v22, 1uLL, v23);
  v24._countAndFlagsBits = 611543411;
  v24._object = (void *)0xE400000000000000;
  v25._countAndFlagsBits = 7562611;
  v25._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v24, 1uLL, v25);
  v26._countAndFlagsBits = 0xD000000000000015;
  v26._object = (void *)0x800000023C91D910;
  v27._countAndFlagsBits = 0x73657632243124;
  v27._object = (void *)0xE700000000000000;
  Inflections.plural(_:options:_:)(v26, 1uLL, v27);
  v28._countAndFlagsBits = 0x24296576696828;
  v28._object = (void *)0xE700000000000000;
  v29._countAndFlagsBits = 7549220;
  v29._object = (void *)0xE300000000000000;
  Inflections.plural(_:options:_:)(v28, 1uLL, v29);
  v30._countAndFlagsBits = 0x7365693124;
  v31._countAndFlagsBits = 0xD000000000000010;
  v31._object = (void *)0x800000023C91D930;
  v30._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v31, 1uLL, v30);
  v32._countAndFlagsBits = 0x73737C68637C7828;
  v32._object = (void *)0xED0000242968737CLL;
  v33._countAndFlagsBits = 1936011556;
  v33._object = (void *)0xE400000000000000;
  Inflections.plural(_:options:_:)(v32, 1uLL, v33);
  v34._countAndFlagsBits = 0xD000000000000019;
  v34._object = (void *)0x800000023C91D950;
  v35._countAndFlagsBits = 0x736563693124;
  v35._object = (void *)0xE600000000000000;
  Inflections.plural(_:options:_:)(v34, 1uLL, v35);
  v36._countAndFlagsBits = 0x756F296C7C6D285ELL;
  v36._object = (void *)0xEB00000000246573;
  v37._countAndFlagsBits = 0x6563693124;
  v37._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v36, 1uLL, v37);
  v38._countAndFlagsBits = 0x6369296C7C6D285ELL;
  v38._object = (void *)0xEA00000000002465;
  v39._countAndFlagsBits = 0x6563693124;
  v39._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v38, 1uLL, v39);
  v40._countAndFlagsBits = 1852125476;
  v41._countAndFlagsBits = 0x2429786F285ELL;
  v41._object = (void *)0xE600000000000000;
  v40._object = (void *)0xE400000000000000;
  Inflections.plural(_:options:_:)(v41, 1uLL, v40);
  v42._countAndFlagsBits = 0x24296E65786F285ELL;
  v42._object = (void *)0xE800000000000000;
  v43._countAndFlagsBits = 12580;
  v43._object = (void *)0xE200000000000000;
  Inflections.plural(_:options:_:)(v42, 1uLL, v43);
  v44._countAndFlagsBits = 0x24297A69757128;
  v44._object = (void *)0xE700000000000000;
  v45._countAndFlagsBits = 0x73657A3124;
  v45._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v44, 1uLL, v45);
  v46._countAndFlagsBits = 0x732961766E616328;
  v46._object = (void *)0xE900000000000024;
  v47._countAndFlagsBits = 0x7365733124;
  v47._object = (void *)0xE500000000000000;
  Inflections.plural(_:options:_:)(v46, 1uLL, v47);
  v48._countAndFlagsBits = 9331;
  v48._object = (void *)0xE200000000000000;
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  Inflections.singular(_:options:_:)(v48, 1uLL, v49);
  v50._countAndFlagsBits = 0x2429737328;
  v50._object = (void *)0xE500000000000000;
  v51._countAndFlagsBits = 12580;
  v51._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v50, 1uLL, v51);
  v52._countAndFlagsBits = 0x24737765296E28;
  v52._object = (void *)0xE700000000000000;
  v53._countAndFlagsBits = 0x7377653124;
  v53._object = (void *)0xE500000000000000;
  Inflections.singular(_:options:_:)(v52, 1uLL, v53);
  v54._countAndFlagsBits = 0x2461295D69745B28;
  v54._object = (void *)0xE800000000000000;
  v55._countAndFlagsBits = 1836396836;
  v55._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v54, 1uLL, v55);
  v56._countAndFlagsBits = 0xD000000000000043;
  v56._object = (void *)0x800000023C91D970;
  v57._countAndFlagsBits = 0x7369733124;
  v57._object = (void *)0xE500000000000000;
  Inflections.singular(_:options:_:)(v56, 1uLL, v57);
  v58._object = (void *)0x800000023C91D9C0;
  v58._countAndFlagsBits = 0xD000000000000012;
  v59._countAndFlagsBits = 0x7369733124;
  v59._object = (void *)0xE500000000000000;
  Inflections.singular(_:options:_:)(v58, 1uLL, v59);
  v60._countAndFlagsBits = 0x6576295D665E5B28;
  v60._object = (void *)0xEA00000000002473;
  v61._countAndFlagsBits = 1701196068;
  v61._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v60, 1uLL, v61);
  v62._countAndFlagsBits = 0x2473296576696828;
  v62._object = (void *)0xE800000000000000;
  v63._countAndFlagsBits = 12580;
  v63._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v62, 1uLL, v63);
  v64._countAndFlagsBits = 0x2473296576697428;
  v64._object = (void *)0xE800000000000000;
  v65._countAndFlagsBits = 12580;
  v65._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v64, 1uLL, v65);
  v66._countAndFlagsBits = 6697252;
  v67._countAndFlagsBits = 0x6576295D726C5B28;
  v67._object = (void *)0xEA00000000002473;
  v66._object = (void *)0xE300000000000000;
  Inflections.singular(_:options:_:)(v67, 1uLL, v66);
  v68._object = (void *)0x800000023C91D9E0;
  v68._countAndFlagsBits = 0xD000000000000012;
  v69._countAndFlagsBits = 7942436;
  v69._object = (void *)0xE300000000000000;
  Inflections.singular(_:options:_:)(v68, 1uLL, v69);
  v70._countAndFlagsBits = 0x7365697265297328;
  v70._object = (void *)0xE900000000000024;
  v71._countAndFlagsBits = 0x73656972653124;
  v71._object = (void *)0xE700000000000000;
  Inflections.singular(_:options:_:)(v70, 1uLL, v71);
  v72._countAndFlagsBits = 0x736569766F296D28;
  v72._object = (void *)0xE900000000000024;
  v73._countAndFlagsBits = 0x6569766F3124;
  v73._object = (void *)0xE600000000000000;
  Inflections.singular(_:options:_:)(v72, 1uLL, v73);
  v74._countAndFlagsBits = 0x73737C68637C7828;
  v74._object = (void *)0xEF2473652968737CLL;
  v75._countAndFlagsBits = 12580;
  v75._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v74, 1uLL, v75);
  v76._countAndFlagsBits = 0x6369296C7C6D285ELL;
  v76._object = (void *)0xEA00000000002465;
  v77._countAndFlagsBits = 0x6573756F3124;
  v77._object = (void *)0xE600000000000000;
  Inflections.singular(_:options:_:)(v76, 1uLL, v77);
  v78._countAndFlagsBits = 0x7365282973756228;
  v78._object = (void *)0xEB00000000243F29;
  v79._countAndFlagsBits = 12580;
  v79._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v78, 1uLL, v79);
  v80._countAndFlagsBits = 0x247365296F28;
  v80._object = (void *)0xE600000000000000;
  v81._countAndFlagsBits = 12580;
  v81._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v80, 1uLL, v81);
  v82._countAndFlagsBits = 0x247329656F687328;
  v82._object = (void *)0xE800000000000000;
  v83._countAndFlagsBits = 12580;
  v83._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v82, 1uLL, v83);
  v84._countAndFlagsBits = 1936273700;
  v85._countAndFlagsBits = 0xD000000000000013;
  v85._object = (void *)0x800000023C91DA00;
  v84._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v85, 1uLL, v84);
  v86._countAndFlagsBits = 0x7369783124;
  v87._object = (void *)0xEB0000000024735DLL;
  v87._countAndFlagsBits = 0x65695B782961285ELL;
  v86._object = (void *)0xE500000000000000;
  Inflections.singular(_:options:_:)(v87, 1uLL, v86);
  v88._countAndFlagsBits = 1937060132;
  v89._object = (void *)0x800000023C91DA20;
  v89._countAndFlagsBits = 0xD000000000000012;
  v88._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v89, 1uLL, v88);
  v90._object = (void *)0x800000023C91DA40;
  v90._countAndFlagsBits = 0xD000000000000014;
  v91._countAndFlagsBits = 12580;
  v91._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v90, 1uLL, v91);
  v92._countAndFlagsBits = 0x246E6529786F285ELL;
  v92._object = (void *)0xE800000000000000;
  v93._countAndFlagsBits = 12580;
  v93._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v92, 1uLL, v93);
  v94._countAndFlagsBits = 0x6E697C7472657628;
  v94._object = (void *)0xEF24736563692964;
  v95._countAndFlagsBits = 2019897636;
  v95._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v94, 1uLL, v95);
  v96._countAndFlagsBits = 2020159780;
  v97._object = (void *)0xEB00000000247365;
  v97._countAndFlagsBits = 0x6369297274616D28;
  v96._object = (void *)0xE400000000000000;
  Inflections.singular(_:options:_:)(v97, 1uLL, v96);
  v98._countAndFlagsBits = 0x657A297A69757128;
  v98._object = (void *)0xEA00000000002473;
  v99._countAndFlagsBits = 12580;
  v99._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v98, 1uLL, v99);
  v100._countAndFlagsBits = 0x7361626174616428;
  v100._object = (void *)0xEC00000024732965;
  v101._countAndFlagsBits = 12580;
  v101._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v100, 1uLL, v101);
  v102._countAndFlagsBits = 0x297361766E616328;
  v102._object = (void *)0xEE00243F29736528;
  v103._countAndFlagsBits = 12580;
  v103._object = (void *)0xE200000000000000;
  Inflections.singular(_:options:_:)(v102, 1uLL, v103);
  sub_23C7E79A8(&qword_25430DA10);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C915920;
  *(_QWORD *)(inited + 32) = 0x656369766461;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = 0x7370726F63;
  *(_QWORD *)(inited + 56) = 0xE500000000000000;
  *(_QWORD *)(inited + 64) = 1701013860;
  *(_QWORD *)(inited + 72) = 0xE400000000000000;
  *(_QWORD *)(inited + 80) = 0x6E656D7069757165;
  *(_QWORD *)(inited + 88) = 0xE900000000000074;
  *(_QWORD *)(inited + 96) = 1752394086;
  *(_QWORD *)(inited + 104) = 0xE400000000000000;
  *(_QWORD *)(inited + 112) = 0x74616D726F666E69;
  *(_QWORD *)(inited + 120) = 0xEB000000006E6F69;
  *(_QWORD *)(inited + 128) = 0x736E61656ALL;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  *(_QWORD *)(inited + 144) = 0x736F64756BLL;
  *(_QWORD *)(inited + 152) = 0xE500000000000000;
  *(_QWORD *)(inited + 160) = 0x79656E6F6DLL;
  *(_QWORD *)(inited + 168) = 0xE500000000000000;
  *(_QWORD *)(inited + 176) = 0x6E6972707366666FLL;
  *(_QWORD *)(inited + 184) = 0xE900000000000067;
  *(_QWORD *)(inited + 192) = 0x6563696C6F70;
  *(_QWORD *)(inited + 200) = 0xE600000000000000;
  *(_QWORD *)(inited + 208) = 1701013874;
  *(_QWORD *)(inited + 216) = 0xE400000000000000;
  *(_QWORD *)(inited + 224) = 0x7065656873;
  *(_QWORD *)(inited + 232) = 0xE500000000000000;
  *(_QWORD *)(inited + 240) = 0x73656963657073;
  *(_QWORD *)(inited + 248) = 0xE700000000000000;
  Inflections.uncountableWords(_:)((Swift::OpaquePointer)inited);
  swift_setDeallocating();
  sub_23C8C92A4();
  v105._countAndFlagsBits = 0x646C696863;
  v105._object = (void *)0xE500000000000000;
  v106._countAndFlagsBits = 0x6E6572646C696863;
  v106._object = (void *)0xE800000000000000;
  Inflections.irregularSuffix(_:_:)(v105, v106);
  v107._countAndFlagsBits = 1953460070;
  v107._object = (void *)0xE400000000000000;
  v108._countAndFlagsBits = 1952802150;
  v108._object = (void *)0xE400000000000000;
  Inflections.irregularSuffix(_:_:)(v107, v108);
  v109._countAndFlagsBits = 1717658988;
  v109._object = (void *)0xE400000000000000;
  v110._countAndFlagsBits = 0x73657661656CLL;
  v110._object = (void *)0xE600000000000000;
  Inflections.irregularSuffix(_:_:)(v109, v110);
  v111._countAndFlagsBits = 7234925;
  v112._countAndFlagsBits = 7233901;
  v112._object = (void *)0xE300000000000000;
  v111._object = (void *)0xE300000000000000;
  Inflections.irregularSuffix(_:_:)(v112, v111);
  v113._countAndFlagsBits = 1702260589;
  v113._object = (void *)0xE400000000000000;
  v114._countAndFlagsBits = 0x7365766F6DLL;
  v114._object = (void *)0xE500000000000000;
  Inflections.irregularSuffix(_:_:)(v113, v114);
  v115._countAndFlagsBits = 0x6E6F73726570;
  v115._object = (void *)0xE600000000000000;
  v116._countAndFlagsBits = 0x656C706F6570;
  v116._object = (void *)0xE600000000000000;
  Inflections.irregularSuffix(_:_:)(v115, v116);
  v117._countAndFlagsBits = 7890291;
  v117._object = (void *)0xE300000000000000;
  v118._countAndFlagsBits = 0x7365786573;
  v118._object = (void *)0xE500000000000000;
  Inflections.irregularSuffix(_:_:)(v117, v118);
  v119._object = (void *)0xE900000000000073;
  v120._countAndFlagsBits = 0x6E656D6963657073;
  v120._object = (void *)0xE800000000000000;
  v119._countAndFlagsBits = 0x6E656D6963657073;
  Inflections.irregularSuffix(_:_:)(v120, v119);
  v121._countAndFlagsBits = 0x6569626D6F7ALL;
  v121._object = (void *)0xE600000000000000;
  v122._countAndFlagsBits = 0x736569626D6F7ALL;
  v122._object = (void *)0xE700000000000000;
  Inflections.irregularSuffix(_:_:)(v121, v122);
}

uint64_t static Inflections.default.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25430B2C8 != -1)
    swift_once();
  sub_23C7E6180();
  v2 = *((_QWORD *)&xmmword_25430B308 + 1);
  v3 = qword_25430B318;
  *a1 = xmmword_25430B308;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Inflections.default.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;

  v3 = *(_OWORD *)a1;
  v1 = *(_QWORD *)(a1 + 16);
  if (qword_25430B2C8 != -1)
    swift_once();
  sub_23C7E6180();
  xmmword_25430B308 = v3;
  qword_25430B318 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*static Inflections.default.modify())()
{
  if (qword_25430B2C8 != -1)
    swift_once();
  sub_23C7E6180();
  return j__swift_endAccess;
}

unint64_t sub_23C848180()
{
  unint64_t result;

  result = qword_25430B328;
  if (!qword_25430B328)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25430B328);
  }
  return result;
}

uint64_t sub_23C8481BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v13;
    v4 = (_QWORD *)(a1 + 32);
    do
    {
      v5 = v4[3];
      v6 = v4[4];
      sub_23C7E7E34(v4, v5);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23C7E649C();
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        sub_23C7E649C();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C8482D8(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    v7 = sub_23C7E16E8();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v8 = a2 + 7;
  v9 = a1 + 7;
  v10 = 1;
  while (v10 < v2)
  {
    result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      result = sub_23C7E16E8();
      if ((result & 1) == 0)
        return 0;
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C84839C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v17;

  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 == v7)
  {
    if (!v6)
      return 1;
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
    v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a1 < 0)
      v8 = a1;
    if (v5)
      v9 = v8;
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
    v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0)
      v10 = a2;
    if ((unint64_t)a2 >> 62)
      v11 = v10;
    if (v9 == v11)
      return 1;
    if (v6 < 0)
    {
LABEL_40:
      __break(1u);
    }
    else
    {
      sub_23C8E61E8(0);
      v17 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) == 0)
      {
        sub_23C7E62C0();
        goto LABEL_19;
      }
    }
    MEMORY[0x242625290](0, a1);
LABEL_19:
    v12 = a2 & 0xC000000000000001;
    sub_23C8E61E8(0);
    if ((a2 & 0xC000000000000001) != 0)
      MEMORY[0x242625290](0, a2);
    else
      swift_retain();
    type metadata accessor for Row();
    sub_23C7DC538();
    sub_23C8491CC();
    swift_release();
    if ((v2 & 1) != 0)
    {
      v13 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v13 + i == 5;
        if (v13 + i == 5)
          return v6;
        v15 = i - 4;
        if (v17)
        {
          MEMORY[0x242625290](i - 4, a1);
          if (v12)
            goto LABEL_26;
        }
        else
        {
          if (v15 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          sub_23C7E62C0();
          if (v12)
          {
LABEL_26:
            MEMORY[0x242625290](i - 4, a2);
            goto LABEL_31;
          }
        }
        if (v15 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        swift_retain();
LABEL_31:
        sub_23C7DC538();
        sub_23C8491CC();
        swift_release();
        if ((v2 & 1) == 0)
          return v6;
      }
    }
  }
  return 0;
}

uint64_t sub_23C8485FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t ForeignKey.init(_:to:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ForeignKey.init(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = sub_23C8481BC(a1);
  result = swift_bridgeObjectRelease();
  if (a2)
  {
    v7 = sub_23C8481BC(a2);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t static ForeignKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  if ((sub_23C8482D8(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0)
  {
    if (v2)
    {
      if (v3 && (sub_23C8482D8(v2, v3) & 1) != 0)
        return 1;
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

_QWORD *assignWithCopy for ForeignKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ForeignKey()
{
  return &type metadata for ForeignKey;
}

uint64_t sub_23C849130(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = sub_23C910950();
  v8 = (char *)result;
  if (result)
  {
    result = sub_23C910968();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = sub_23C91095C();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_23C8491CC()
{
  return swift_release();
}

uint64_t Configuration.foreignKeysEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Configuration.foreignKeysEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*Configuration.foreignKeysEnabled.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.readonly.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t Configuration.readonly.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*Configuration.readonly.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void Configuration.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  sub_23C7DB3A0();
}

uint64_t (*Configuration.label.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.acceptsDoubleQuotedStringLiterals.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Configuration.acceptsDoubleQuotedStringLiterals.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*Configuration.acceptsDoubleQuotedStringLiterals.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.observesSuspensionNotifications.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Configuration.observesSuspensionNotifications.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*Configuration.observesSuspensionNotifications.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.publicStatementArguments.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t Configuration.publicStatementArguments.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = result;
  return result;
}

uint64_t (*Configuration.publicStatementArguments.modify())()
{
  return nullsub_1;
}

void Configuration.prepareDatabase(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_retain();
  sub_23C7F1380();
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  sub_23C7F15AC();
  v7 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * v6;
  *(_QWORD *)(v8 + 32) = sub_23C849388;
  *(_QWORD *)(v8 + 40) = v5;
  *(_QWORD *)(v2 + 32) = v7;
  sub_23C7DF5B4();
}

uint64_t sub_23C849364()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C849388(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void Configuration.defaultTransactionKind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

_BYTE *Configuration.defaultTransactionKind.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *result;
  return result;
}

uint64_t (*Configuration.defaultTransactionKind.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.allowsUnsafeTransactions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t Configuration.allowsUnsafeTransactions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*Configuration.allowsUnsafeTransactions.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.busyMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_23C849D78(v2, v3, v4);
}

void Configuration.busyMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  sub_23C849D90(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  *(_BYTE *)(v1 + 64) = v4;
  sub_23C7DB3A0();
}

uint64_t (*Configuration.busyMode.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.maximumReaderCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t Configuration.maximumReaderCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = result;
  return result;
}

uint64_t (*Configuration.maximumReaderCount.modify())()
{
  return nullsub_1;
}

uint64_t Configuration.qos.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(sub_23C7E830C() + 64);
  v4 = sub_23C7E42D4();
  return sub_23C7E4DC0(a1, v3, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 16));
}

uint64_t Configuration.qos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(sub_23C7E830C() + 64);
  v4 = sub_23C7E42D4();
  return sub_23C7E4DC0(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*Configuration.qos.modify())(_QWORD)
{
  sub_23C7E830C();
  return nullsub_1;
}

void sub_23C849508(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  v5 = sub_23C7E830C();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE95C();
  v9 = v8 - v7;
  sub_23C7E79A8(&qword_25430D2B0);
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7DE96C();
  if (*(_QWORD *)(v1 + *(int *)(v5 + 68)))
  {
    sub_23C91143C();
    v11 = sub_23C7E42D4();
    v12 = v2;
    v13 = 0;
  }
  else
  {
    v11 = sub_23C7E42D4();
    v12 = v2;
    v13 = 1;
  }
  sub_23C7DE70C(v12, v13, 1, v11);
  sub_23C84AB34(v3, v9);
  sub_23C7E42D4();
  if (sub_23C7DE718(v2, 1, v11) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, v9 + *(int *)(v5 + 64), v11);
    sub_23C84AB78(v9);
    sub_23C84ABB4(v2);
  }
  else
  {
    sub_23C84AB78(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v2, v11);
  }
  sub_23C7DF5B4();
}

void *Configuration.targetQueue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(sub_23C7E830C() + 68));
  v2 = v1;
  return v1;
}

void Configuration.targetQueue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(sub_23C7E830C() + 68);

  *(_QWORD *)(v1 + v3) = a1;
  sub_23C7DB3A0();
}

uint64_t (*Configuration.targetQueue.modify())(_QWORD)
{
  sub_23C7E830C();
  return nullsub_1;
}

void *Configuration.writeTargetQueue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(sub_23C7E830C() + 72));
  v2 = v1;
  return v1;
}

void Configuration.writeTargetQueue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(sub_23C7E830C() + 72);

  *(_QWORD *)(v1 + v3) = a1;
  sub_23C7DB3A0();
}

uint64_t (*Configuration.writeTargetQueue.modify())(_QWORD)
{
  sub_23C7E830C();
  return nullsub_1;
}

uint64_t Configuration.automaticMemoryManagement.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_23C7E830C() + 76));
}

uint64_t Configuration.automaticMemoryManagement.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C7E830C();
  *(_BYTE *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*Configuration.automaticMemoryManagement.modify())(_QWORD)
{
  sub_23C7E830C();
  return nullsub_1;
}

void Configuration.init()(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 32) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 96) = 5;
  v2 = (int *)sub_23C7E830C();
  sub_23C910D4C();
  *(_QWORD *)(a1 + v2[17]) = 0;
  *(_QWORD *)(a1 + v2[18]) = 0;
  *(_BYTE *)(a1 + v2[19]) = 1;
  *(_BYTE *)(a1 + v2[20]) = 0;
  v3 = (_QWORD *)(a1 + v2[21]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + v2[22]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + v2[23]);
  *v5 = 0;
  v5[1] = 0;
  sub_23C7DB3A0();
}

uint64_t sub_23C84984C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void (*v7)(uint64_t *);
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = result;
    swift_bridgeObjectRetain();
    for (i = v3 + 40; ; i += 16)
    {
      v7 = *(void (**)(uint64_t *))(i - 8);
      v8 = v5;
      swift_retain();
      v7(&v8);
      if (v2)
        break;
      swift_release();
      if (!--v4)
        return swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C8498E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)(v4 + 16))
  {
    v6 = a1;
    swift_bridgeObjectRetain();
    if (!a4)
      goto LABEL_5;
    goto LABEL_3;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (a4)
LABEL_3:
    sub_23C7EE474();
LABEL_5:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7EE474();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_23C849994(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = sub_23C7E5ED0(a1, a2);
  v21 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE95C();
  v23 = v7 - v6;
  sub_23C9113F4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23C7E42D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23C7E830C();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7DE96C();
  v16 = *(void **)(v3 + *(int *)(v15 + 72));
  sub_23C84AB34(v3, v4);
  if (v16)
  {
    v17 = v16;
    sub_23C7ECC48();
  }
  else
  {
    v18 = *(void **)(v4 + *(int *)(v13 + 68));
    v19 = v18;
    sub_23C7ECC48();
    if (!v18)
    {
      sub_23C7E6748();
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v3 + *(int *)(v13 + 64), v9);
      sub_23C7DFC4C(MEMORY[0x24BEE4AF8]);
      sub_23C7E62C8();
      sub_23C7E79A8(qword_25430D970);
      sub_23C84AC34();
      sub_23C7E1818();
      sub_23C911574();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x24BEE5750], v22);
      sub_23C7E8E70();
      sub_23C911478();
      goto LABEL_5;
    }
  }
  sub_23C7E6748();
  sub_23C7E62C8();
  v20 = v2;
  sub_23C910D40();
  sub_23C7DFC4C(MEMORY[0x24BEE4AF8]);
  sub_23C7E79A8(qword_25430D970);
  sub_23C84AC34();
  sub_23C7E1818();
  sub_23C911574();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x24BEE5750], v22);
  sub_23C7E8E70();
  sub_23C911478();

LABEL_5:
  sub_23C7DBCB0();
}

void sub_23C849BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;

  v14 = sub_23C7E5ED0(a1, a2);
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7DE95C();
  sub_23C9113F4();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v3);
  v4 = (_QWORD *)sub_23C7E42D4();
  v5 = *(v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C7E830C();
  v9 = *(void **)(v2 + *(int *)(v8 + 68));
  v13[1] = sub_23C7E6748();
  if (v9)
  {
    v10 = v9;
    sub_23C7E98D4();
    sub_23C910D40();
    sub_23C7DFC4C(MEMORY[0x24BEE4AF8]);
    sub_23C7E79A8(qword_25430D970);
    sub_23C84AC34();
    sub_23C7E32BC();
    v11 = sub_23C911574();
    sub_23C7E1A78(v11, *MEMORY[0x24BEE5750]);
    sub_23C7EDBCC();
    sub_23C911478();

  }
  else
  {
    (*(void (**)(char *, uint64_t, _QWORD *))(v5 + 16))(v7, v2 + *(int *)(v8 + 64), v4);
    sub_23C7DFC4C(MEMORY[0x24BEE4AF8]);
    sub_23C7E98D4();
    sub_23C7E79A8(qword_25430D970);
    sub_23C84AC34();
    sub_23C7E32BC();
    v12 = sub_23C911574();
    sub_23C7E1A78(v12, *MEMORY[0x24BEE5750]);
    sub_23C7EDBCC();
    sub_23C911478();
  }
  sub_23C7DBCB0();
}

uint64_t sub_23C849D78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_retain();
  return result;
}

uint64_t sub_23C849D90(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for Configuration()
{
  uint64_t result;

  result = qword_25430DC28;
  if (!qword_25430DC28)
    return swift_getSingletonMetadata();
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for Configuration(_WORD *a1, uint64_t *a2, int *a3)
{
  _WORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_WORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    *((_BYTE *)v4 + 24) = *((_BYTE *)a2 + 24);
    *(_WORD *)((char *)v4 + 25) = *(_WORD *)((char *)a2 + 25);
    *((_QWORD *)v4 + 4) = a2[4];
    v4[20] = *((_WORD *)a2 + 20);
    v8 = a2[6];
    v9 = a2[7];
    v10 = *((_BYTE *)a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C849D78(v8, v9, v10);
    *((_QWORD *)v4 + 6) = v8;
    *((_QWORD *)v4 + 7) = v9;
    *((_BYTE *)v4 + 64) = v10;
    v11 = *((unsigned __int8 *)a2 + 88);
    if (v11 == 255)
    {
      *(_OWORD *)(v4 + 36) = *(_OWORD *)(a2 + 9);
      *((_BYTE *)v4 + 88) = *((_BYTE *)a2 + 88);
    }
    else
    {
      v12 = a2[9];
      v13 = a2[10];
      sub_23C849D78(v12, v13, *((_BYTE *)a2 + 88));
      *((_QWORD *)v4 + 9) = v12;
      *((_QWORD *)v4 + 10) = v13;
      *((_BYTE *)v4 + 88) = v11;
    }
    *((_QWORD *)v4 + 12) = a2[12];
    v15 = a3[16];
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = sub_23C910D58();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[17];
    v20 = a3[18];
    v21 = *(void **)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v21;
    v22 = *(void **)((char *)a2 + v20);
    *(_QWORD *)((char *)v4 + v20) = v22;
    v23 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    v24 = a3[21];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = (uint64_t)a2 + v24;
    v27 = *(uint64_t *)((char *)a2 + v24);
    v28 = v21;
    v29 = v22;
    if (v27)
    {
      v30 = *(_QWORD *)(v26 + 8);
      *v25 = v27;
      v25[1] = v30;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    v31 = a3[22];
    v32 = (_QWORD *)((char *)v4 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    if (*v33)
    {
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    v35 = a3[23];
    v36 = (char *)v4 + v35;
    v37 = (uint64_t)a2 + v35;
    if (!*(_QWORD *)v37)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
      return v4;
    }
    v38 = *(_QWORD *)(v37 + 8);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
  }
  swift_retain();
  return v4;
}

void destroy for Configuration(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C849D90(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 != 255)
    sub_23C849D90(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v4);
  v5 = a1 + a2[16];
  v6 = sub_23C910D58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  if (*(_QWORD *)(a1 + a2[21]))
    swift_release();
  if (*(_QWORD *)(a1 + a2[22]))
    swift_release();
  if (*(_QWORD *)(a1 + a2[23]))
    swift_release();
}

uint64_t initializeWithCopy for Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C849D78(v7, v8, v9);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  v10 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 72);
    v12 = *(_QWORD *)(a2 + 80);
    sub_23C849D78(v11, v12, *(_BYTE *)(a2 + 88));
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v12;
    *(_BYTE *)(a1 + 88) = v10;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v13 = a3[16];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_23C910D58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[17];
  v18 = a3[18];
  v19 = *(void **)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v19;
  v20 = *(void **)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[21];
  v23 = (_QWORD *)(a1 + v22);
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a2 + v22);
  v26 = v19;
  v27 = v20;
  if (v25)
  {
    v28 = *(_QWORD *)(v24 + 8);
    *v23 = v25;
    v23[1] = v28;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  v29 = a3[22];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  if (*v31)
  {
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  v33 = a3[23];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  if (*v35)
  {
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  return a1;
}

uint64_t assignWithCopy for Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  sub_23C849D78(v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  v11 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v8;
  sub_23C849D90(v9, v10, v11);
  v12 = (__int128 *)(a1 + 72);
  v13 = (__int128 *)(a2 + 72);
  v14 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v14 == 255)
    {
      v23 = *v13;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *v12 = v23;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 72);
      v21 = *(_QWORD *)(a2 + 80);
      sub_23C849D78(v20, v21, *(_BYTE *)(a2 + 88));
      *(_QWORD *)(a1 + 72) = v20;
      *(_QWORD *)(a1 + 80) = v21;
      *(_BYTE *)(a1 + 88) = v14;
    }
  }
  else if (v14 == 255)
  {
    sub_23C84A584(a1 + 72);
    v22 = *(_BYTE *)(a2 + 88);
    *v12 = *v13;
    *(_BYTE *)(a1 + 88) = v22;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    sub_23C849D78(v15, v16, *(_BYTE *)(a2 + 88));
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    v19 = *(_BYTE *)(a1 + 88);
    *(_BYTE *)(a1 + 88) = v14;
    sub_23C849D90(v17, v18, v19);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v24 = a3[16];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_23C910D58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[17];
  v29 = *(void **)(a1 + v28);
  v30 = *(void **)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  v31 = v30;

  v32 = a3[18];
  v33 = *(void **)(a1 + v32);
  v34 = *(void **)(a2 + v32);
  *(_QWORD *)(a1 + v32) = v34;
  v35 = v34;

  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v36 = a3[21];
  v37 = (_QWORD *)(a1 + v36);
  v38 = a2 + v36;
  v39 = *(_QWORD *)(a1 + v36);
  v40 = *(_QWORD *)(a2 + v36);
  if (v39)
  {
    if (v40)
    {
      v41 = *(_QWORD *)(v38 + 8);
      *v37 = v40;
      v37[1] = v41;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v40)
  {
    v42 = *(_QWORD *)(v38 + 8);
    *v37 = v40;
    v37[1] = v42;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)v37 = *(_OWORD *)v38;
LABEL_15:
  v43 = a3[22];
  v44 = (_QWORD *)(a1 + v43);
  v45 = a2 + v43;
  v46 = *(_QWORD *)(a1 + v43);
  v47 = *(_QWORD *)(a2 + v43);
  if (v46)
  {
    if (v47)
    {
      v48 = *(_QWORD *)(v45 + 8);
      *v44 = v47;
      v44[1] = v48;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v47)
  {
    v49 = *(_QWORD *)(v45 + 8);
    *v44 = v47;
    v44[1] = v49;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)v44 = *(_OWORD *)v45;
LABEL_22:
  v50 = a3[23];
  v51 = (_QWORD *)(a1 + v50);
  v52 = (uint64_t *)(a2 + v50);
  v53 = *(_QWORD *)(a1 + v50);
  v54 = *v52;
  if (!v53)
  {
    if (v54)
    {
      v56 = v52[1];
      *v51 = v54;
      v51[1] = v56;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)v51 = *(_OWORD *)v52;
    return a1;
  }
  if (!v54)
  {
    swift_release();
    goto LABEL_28;
  }
  v55 = v52[1];
  *v51 = v54;
  v51[1] = v55;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C84A584(uint64_t a1)
{
  destroy for Database.BusyMode(a1);
  return a1;
}

uint64_t initializeWithTake for Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = a3[16];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 72) = v6;
  v10 = sub_23C910D58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[21];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v18 = a3[22];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  if (*v20)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  v23 = a3[23];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  if (*v25)
  {
    v27 = v25[1];
    *v24 = v26;
    v24[1] = v27;
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  return a1;
}

uint64_t assignWithTake for Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v7;
  sub_23C849D90(v8, v9, v10);
  v11 = (_OWORD *)(a2 + 72);
  v12 = *(unsigned __int8 *)(a1 + 88);
  if (v12 != 255)
  {
    v13 = *(unsigned __int8 *)(a2 + 88);
    if (v13 != 255)
    {
      v14 = *(_QWORD *)(a1 + 72);
      v15 = *(_QWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 72) = *v11;
      *(_BYTE *)(a1 + 88) = v13;
      sub_23C849D90(v14, v15, v12);
      goto LABEL_6;
    }
    sub_23C84A584(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *v11;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
LABEL_6:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = a3[16];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_23C910D58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[17];
  v21 = *(void **)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);

  v22 = a3[18];
  v23 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  v24 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[21];
  v26 = (_QWORD *)(a1 + v25);
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a1 + v25);
  v29 = *(_QWORD *)(a2 + v25);
  if (v28)
  {
    if (v29)
    {
      v30 = *(_QWORD *)(v27 + 8);
      *v26 = v29;
      v26[1] = v30;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v29)
  {
    v31 = *(_QWORD *)(v27 + 8);
    *v26 = v29;
    v26[1] = v31;
    goto LABEL_13;
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_13:
  v32 = a3[22];
  v33 = (_QWORD *)(a1 + v32);
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a1 + v32);
  v36 = *(_QWORD *)(a2 + v32);
  if (v35)
  {
    if (v36)
    {
      v37 = *(_QWORD *)(v34 + 8);
      *v33 = v36;
      v33[1] = v37;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v36)
  {
    v38 = *(_QWORD *)(v34 + 8);
    *v33 = v36;
    v33[1] = v38;
    goto LABEL_20;
  }
  *(_OWORD *)v33 = *(_OWORD *)v34;
LABEL_20:
  v39 = a3[23];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v42 = *(_QWORD *)(a1 + v39);
  v43 = *v41;
  if (!v42)
  {
    if (v43)
    {
      v45 = v41[1];
      *v40 = v43;
      v40[1] = v45;
      return a1;
    }
LABEL_26:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    return a1;
  }
  if (!v43)
  {
    swift_release();
    goto LABEL_26;
  }
  v44 = v41[1];
  *v40 = v43;
  v40[1] = v44;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C84A97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23C7E42D4();
    return sub_23C7DE718(a1 + *(int *)(a3 + 64), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23C84A9F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 32) = (a2 - 1);
    sub_23C7DB3A0();
  }
  else
  {
    v7 = sub_23C7E42D4();
    sub_23C7DE70C(a1 + *(int *)(a4 + 64), a2, a2, v7);
  }
}

uint64_t sub_23C84AA58()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23C910D58();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23C84AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C84AB78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Configuration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C84ABB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430D2B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23C84ABF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430DBA8;
  if (!qword_25430DBA8)
  {
    v1 = sub_23C9113F4();
    result = MEMORY[0x242626100](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_25430DBA8);
  }
  return result;
}

unint64_t sub_23C84AC34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430DBA0;
  if (!qword_25430DBA0)
  {
    v1 = sub_23C7DDB10(qword_25430D970);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25430DBA0);
  }
  return result;
}

void PrimaryKeyInfo.rowIDColumn.getter()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 16))
    sub_23C7DF858();
  sub_23C7DB390();
}

void sub_23C84ACB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v3 = (uint64_t *)(a1 + 64);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      sub_23C7E0808();
      if (v7 >= v6 >> 1)
        sub_23C7E649C();
      *(_QWORD *)(v9 + 16) = v7 + 1;
      v8 = v9 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v5;
      *(_QWORD *)(v8 + 40) = v4;
      v3 += 11;
      --v1;
    }
    while (v1);
  }
  sub_23C7EE390();
}

uint64_t sub_23C84AD80(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_23C7FD4B8();
    v5 = v22;
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v10 = *(i - 3);
      v9 = *(i - 2);
      v11 = *(i - 1);
      v12 = *i;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v20, v10, v9, v11, v12);
      if (v3)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v20;
      v14 = v21;
      v22 = v5;
      v15 = *(_QWORD *)(v5 + 16);
      if (v15 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        v18 = v21;
        v19 = v20;
        sub_23C7FD4B8();
        v14 = v18;
        v13 = v19;
        v5 = v22;
      }
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v13;
      *(_OWORD *)(v16 + 48) = v14;
      if (!--v4)
        return v5;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

void sub_23C84AECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7FD4EC();
    v3 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v4 = *v3;
      if (!*v3)
        break;
      v5 = *(v3 - 3);
      v6 = *(v3 - 2);
      v7 = *(v3 - 1);
      v8 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
        sub_23C7FD4EC();
      v3 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v10 = (_QWORD *)(v11 + 32 * v8);
      v10[4] = v5;
      v10[5] = v6;
      v10[6] = v7;
      v10[7] = v4;
      if (!--v1)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_23C84AFCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = a1 + 40;
    do
    {
      v4 = sub_23C910E18();
      v6 = v5;
      v7 = *(_QWORD *)(v10 + 16);
      if (v7 >= *(_QWORD *)(v10 + 24) >> 1)
        sub_23C7E649C();
      v3 += 16;
      *(_QWORD *)(v10 + 16) = v7 + 1;
      v8 = v10 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v4;
      *(_QWORD *)(v8 + 40) = v6;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_23C84B0B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v34 = MEMORY[0x24BEE4AF8];
  sub_23C7FD4EC();
  v29 = v5;
  v30 = v4;
  v27 = a2;
  v28 = a1;
  v26 = v6;
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (uint64_t *)(a2 + 40);
    v8 = (uint64_t *)(a1 + 40);
    v9 = v4;
    while (v9)
    {
      if (!v5)
        goto LABEL_23;
      v10 = *v8;
      v11 = *v7;
      v31 = *(v7 - 1);
      v32 = *(v8 - 1);
      v13 = *(_QWORD *)(v34 + 16);
      v12 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
        sub_23C7FD4EC();
      *(_QWORD *)(v34 + 16) = v13 + 1;
      v14 = (_QWORD *)(v34 + 32 * v13);
      v14[4] = v31;
      v14[5] = v11;
      --v5;
      v14[6] = v32;
      v14[7] = v10;
      --v9;
      v7 += 4;
      v8 += 2;
      if (!--v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_13:
    v16 = v29;
    v15 = v30;
    if (v30 <= v29)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v17 = v26;
    v18 = (uint64_t *)(v28 + 16 * v26 + 40);
    v19 = (uint64_t *)(v27 + 32 * v26 + 40);
    while (v17 < v15)
    {
      if (v16 == v17)
        goto LABEL_21;
      if (v17 >= v16)
        goto LABEL_25;
      v20 = *v18;
      v33 = *(v18 - 1);
      v21 = *(v19 - 1);
      v22 = *v19;
      v24 = *(_QWORD *)(v34 + 16);
      v23 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
        sub_23C7FD4EC();
      ++v17;
      *(_QWORD *)(v34 + 16) = v24 + 1;
      v25 = (_QWORD *)(v34 + 32 * v24);
      v25[4] = v21;
      v25[5] = v22;
      v25[6] = v33;
      v25[7] = v20;
      v18 += 2;
      v19 += 4;
      v16 = v29;
      v15 = v30;
      if (v30 == v17)
        goto LABEL_21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_23C84B2F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  v3 = v29;
  sub_23C90175C(v28, a1);
  v4 = v28[1];
  v5 = v28[3];
  v6 = v28[4];
  v26 = v2;
  v27 = (unint64_t)(v28[2] + 64) >> 6;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    v25 = v4;
    while (1)
    {
      if (v6)
      {
        v6 &= v6 - 1;
      }
      else
      {
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_50;
        if (v8 >= v27)
          goto LABEL_51;
        v9 = *(_QWORD *)(v4 + 8 * v8);
        ++v5;
        if (!v9)
        {
          v5 = v8 + 1;
          if (v8 + 1 >= v27)
            goto LABEL_52;
          v9 = *(_QWORD *)(v4 + 8 * v5);
          if (!v9)
          {
            v5 = v8 + 2;
            if (v8 + 2 >= v27)
              goto LABEL_55;
            v9 = *(_QWORD *)(v4 + 8 * v5);
            if (!v9)
            {
              v5 = v8 + 3;
              if (v8 + 3 >= v27)
                goto LABEL_56;
              v9 = *(_QWORD *)(v4 + 8 * v5);
              if (!v9)
              {
                v10 = v8 + 4;
                if (v10 >= v27)
                  goto LABEL_57;
                v9 = *(_QWORD *)(v4 + 8 * v10);
                if (!v9)
                {
                  while (1)
                  {
                    v5 = v10 + 1;
                    if (__OFADD__(v10, 1))
                      goto LABEL_53;
                    if (v5 >= v27)
                      goto LABEL_54;
                    v9 = *(_QWORD *)(v4 + 8 * v5);
                    ++v10;
                    if (v9)
                      goto LABEL_20;
                  }
                }
                v5 = v10;
              }
            }
          }
        }
LABEL_20:
        v6 = (v9 - 1) & v9;
      }
      v11 = sub_23C910E18();
      v13 = v12;
      v29 = v3;
      v14 = *(_QWORD *)(v3 + 16);
      if (v14 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_23C7E649C();
        v3 = v29;
      }
      ++v7;
      *(_QWORD *)(v3 + 16) = v14 + 1;
      v15 = v3 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v13;
      v4 = v25;
      if (v7 == v26)
        goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain();
LABEL_26:
  if (!v6)
    goto LABEL_28;
LABEL_27:
  v6 &= v6 - 1;
  while (1)
  {
    v20 = sub_23C910E18();
    v22 = v21;
    v29 = v3;
    v23 = *(_QWORD *)(v3 + 16);
    if (v23 >= *(_QWORD *)(v3 + 24) >> 1)
    {
      sub_23C7E649C();
      v3 = v29;
    }
    *(_QWORD *)(v3 + 16) = v23 + 1;
    v24 = v3 + 16 * v23;
    *(_QWORD *)(v24 + 32) = v20;
    *(_QWORD *)(v24 + 40) = v22;
    if (v6)
      goto LABEL_27;
LABEL_28:
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v16 >= v27)
      goto LABEL_48;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    v18 = v5 + 1;
    if (!v17)
    {
      v18 = v5 + 2;
      if (v5 + 2 >= v27)
        goto LABEL_48;
      v17 = *(_QWORD *)(v4 + 8 * v18);
      if (!v17)
      {
        v18 = v5 + 3;
        if (v5 + 3 >= v27)
          goto LABEL_48;
        v17 = *(_QWORD *)(v4 + 8 * v18);
        if (!v17)
        {
          v18 = v5 + 4;
          if (v5 + 4 >= v27)
            goto LABEL_48;
          v17 = *(_QWORD *)(v4 + 8 * v18);
          if (!v17)
          {
            v18 = v5 + 5;
            if (v5 + 5 >= v27)
              goto LABEL_48;
            v17 = *(_QWORD *)(v4 + 8 * v18);
            if (!v17)
            {
              v19 = v5 + 6;
              while (v19 < v27)
              {
                v17 = *(_QWORD *)(v4 + 8 * v19++);
                if (v17)
                {
                  v18 = v19 - 1;
                  goto LABEL_43;
                }
              }
LABEL_48:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_43:
    v6 = (v17 - 1) & v17;
    v5 = v18;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
}

uint64_t sub_23C84B64C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v8[2];
  uint64_t v9;

  if ((a2 & 1) != 0)
  {
    swift_release();
    a3 = 0;
  }
  else
  {
    v8[1] = a1;
    sub_23C8538D8(v8, &v9);
    swift_release();
    if (!v4)
      a3 = v9;
  }
  sub_23C859A0C(a4);
  return a3;
}

uint64_t sub_23C84B6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  char v17;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_21;
    }
    v12 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      goto LABEL_29;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v11;
    if (!v13)
    {
      v11 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_29;
      v13 = *(_QWORD *)(v5 + 8 * v11);
      if (!v13)
      {
        v11 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_29;
        v13 = *(_QWORD *)(v5 + 8 * v11);
        if (!v13)
        {
          v11 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_29;
          v13 = *(_QWORD *)(v5 + 8 * v11);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v9)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              swift_release();
              return 0;
            }
            v13 = *(_QWORD *)(v5 + 8 * v14);
            v11 = v14;
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_20:
    v8 = (v13 - 1) & v13;
LABEL_21:
    if (sub_23C910E18() == a2 && v15 == a3)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v17 = sub_23C911A18();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
    }
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v9)
      goto LABEL_29;
    v13 = *(_QWORD *)(v5 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_23C84B8B4(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  if (a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_23C9117C0())
  {
    v7 = MEMORY[0x24BEE4AF8];
    v8 = 4;
    v19 = v6;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x242625290](v8 - 4, a1);
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 8 * v8);
        swift_retain();
      }
      v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v27 = v9;
      sub_23C84FBC0(&v27, a2, a3, a4, &v24);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_23C84E458(a3, a4);
        swift_bridgeObjectRelease();
        return v7;
      }
      swift_release();
      if ((_QWORD)v25)
      {
        v23 = v25;
        v11 = v24;
        v12 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23C7F1EA8();
          v7 = v16;
        }
        v13 = *(_QWORD *)(v7 + 16);
        v14 = v23;
        if (v13 >= *(_QWORD *)(v7 + 24) >> 1)
        {
          sub_23C7F1EA8();
          v14 = v23;
          v7 = v17;
        }
        *(_QWORD *)(v7 + 16) = v13 + 1;
        v15 = v7 + 32 * v13;
        *(_QWORD *)(v15 + 32) = v11;
        *(_OWORD *)(v15 + 40) = v14;
        *(_BYTE *)(v15 + 56) = v12 & 1;
        v6 = v19;
      }
      ++v8;
      if (v10 == v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  v7 = MEMORY[0x24BEE4AF8];
LABEL_21:
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C84E458(a3, a4);
  swift_bridgeObjectRelease();
  return v7;
}

void Database.primaryKey(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  _QWORD *v20;

  sub_23C84C90C();
  if (!v3)
  {
    v20 = a3;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = (unint64_t *)(v7 + 40);
      while (1)
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        sub_23C7EFADC();
        sub_23C7DBCC8();
        sub_23C84D78C(v10, v11, a1, a2, (uint64_t)v18);
        sub_23C84E458(v10, v11);
        sub_23C7DB62C();
        v12 = v19;
        if (v19 != 255)
          break;
        v9 += 2;
        if (!--v8)
          goto LABEL_6;
      }
      v16 = v18[0];
      v15 = v18[1];
      sub_23C7DC474();
      v17 = v20;
      *v20 = v16;
      v17[1] = v15;
      *((_BYTE *)v17 + 16) = v12;
    }
    else
    {
LABEL_6:
      sub_23C7DC474();
      sub_23C7EF5D4();
      v13 = sub_23C7DB694();
      sub_23C85A0A4(v13, v14);
      sub_23C7DFC54();
    }
  }
}

_OWORD *PrimaryKeyInfo.columns.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _OWORD *v4;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if (v3 == 1)
      v4 = *(_OWORD **)v0;
    else
      v4 = &unk_250D81DA0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v4 = (_OWORD *)swift_allocObject();
    v4[1] = xmmword_23C912A20;
    *((_QWORD *)v4 + 4) = v2;
    *((_QWORD *)v4 + 5) = v1;
  }
  sub_23C7F8E30(v2, v1, v3);
  return v4;
}

uint64_t sub_23C84BC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_23C7E913C();
  result = sub_23C7E4DC8(MEMORY[0x24BEE0D00], v1, v2, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for String);
  if (!v0)
    return v4;
  return result;
}

void sub_23C84BCD4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE1768], v0, v1, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol witness table for Int);
  sub_23C7DFA88();
}

void sub_23C84BD20()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE1328], v0, v1, (uint64_t)&protocol witness table for Bool, (uint64_t)&protocol witness table for Bool);
  sub_23C7DFA88();
}

void sub_23C84BD70()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE3E50], v0, v1, (uint64_t)&protocol witness table for Int8, (uint64_t)&protocol witness table for Int8);
  sub_23C7DFA88();
}

void sub_23C84BDBC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE3F30], v0, v1, (uint64_t)&protocol witness table for Int16, (uint64_t)&protocol witness table for Int16);
  sub_23C7DFA88();
}

void sub_23C84BE08()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE3F88], v0, v1, (uint64_t)&protocol witness table for Int32, (uint64_t)&protocol witness table for Int32);
  sub_23C7DFA88();
}

void sub_23C84BE54()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE4008], v0, v1, (uint64_t)&protocol witness table for Int64, (uint64_t)&protocol witness table for Int64);
  sub_23C7DFA88();
}

void sub_23C84BEA0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE1E88], v0, v1, (uint64_t)&protocol witness table for UInt, (uint64_t)&protocol witness table for UInt);
  sub_23C7DFA88();
}

void sub_23C84BEEC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE4260], v0, v1, (uint64_t)&protocol witness table for UInt8, (uint64_t)&protocol witness table for UInt8);
  sub_23C7DFA88();
}

void sub_23C84BF38()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE4478], v0, v1, (uint64_t)&protocol witness table for UInt16, (uint64_t)&protocol witness table for UInt16);
  sub_23C7DFA88();
}

void sub_23C84BF84()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE44F0], v0, v1, (uint64_t)&protocol witness table for UInt32, (uint64_t)&protocol witness table for UInt32);
  sub_23C7DFA88();
}

void sub_23C84BFD0()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE4568], v0, v1, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol witness table for UInt64);
  sub_23C7DFA88();
}

float sub_23C84C01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float result;
  float v4;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE14E8], v1, v2, (uint64_t)&protocol witness table for Float, (uint64_t)&protocol witness table for Float);
  if (!v0)
    return v4;
  return result;
}

double sub_23C84C074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;
  double v4;

  sub_23C7E913C();
  sub_23C7E4DC8(MEMORY[0x24BEE13C8], v1, v2, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol witness table for Double);
  if (!v0)
    return v4;
  return result;
}

_QWORD *sub_23C84C0CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v4 = v1[5];
  v5 = v1[6];
  sub_23C7E7E34(v1 + 2, v4);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v5 + 64))(&v7, MEMORY[0x24BEE0D00], a1, MEMORY[0x24BEE0D00], &protocol witness table for String, &protocol witness table for String, v4, v5);
  if (!v2)
    return (_QWORD *)v7;
  return result;
}

_QWORD *sub_23C84C15C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v4 = v1[5];
  v5 = v1[6];
  sub_23C7E7E34(v1 + 2, v4);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v5 + 64))(&v7, MEMORY[0x24BEE1768], a1, MEMORY[0x24BEE1768], &protocol witness table for Int, &protocol witness table for Int, v4, v5);
  if (!v2)
    return (_QWORD *)v7;
  return result;
}

_QWORD *sub_23C84C1F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v4 = v1[5];
  v5 = v1[6];
  sub_23C7E7E34(v1 + 2, v4);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v5 + 64))(&v7, MEMORY[0x24BEE4008], a1, MEMORY[0x24BEE4008], &protocol witness table for Int64, &protocol witness table for Int64, v4, v5);
  if (!v2)
    return (_QWORD *)v7;
  return result;
}

uint64_t sub_23C84C284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DF6B0(a1, a2, a3, a4);
}

uint64_t sub_23C84C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C7E6938(a1, a2, a3, a4, a5);
  sub_23C7E79A8(qword_25430D2D8);
  sub_23C7DB388();
  sub_23C7DA508();
  v6 = sub_23C85A0B8();
  result = sub_23C7E6570(v6);
  if (!v5)
  {
    v8 = sub_23C8EFD6C();
    v10 = v9;
    sub_23C7DFA18();
    if (v10 == 1)
      return 0;
    else
      return v8;
  }
  return result;
}

uint64_t sub_23C84C328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int16 v9;
  __int16 v10;

  sub_23C7E6938(a1, a2, a3, a4, a5);
  sub_23C7E79A8(&qword_25430B188);
  sub_23C7DB388();
  sub_23C7DA508();
  v6 = sub_23C85A0B8();
  result = sub_23C7E6570(v6);
  if (!v5)
  {
    v8 = sub_23C8EFE84();
    v10 = v9;
    sub_23C7DFA18();
    if ((v10 & 0x100) != 0)
      return 0;
    else
      return v8;
  }
  return result;
}

uint64_t sub_23C84C3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;

  sub_23C7E6938(a1, a2, a3, a4, a5);
  sub_23C7E79A8(&qword_25430B298);
  sub_23C7DB388();
  sub_23C7DA508();
  v6 = sub_23C85A0B8();
  result = sub_23C7E6570(v6);
  if (!v5)
  {
    v8 = sub_23C8EFF2C();
    sub_23C7DFA18();
    if (v8 == 3)
      return 2;
    else
      return v8;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkForeignKeys()()
{
  uint64_t v0;

  Database.foreignKeyViolations()();
  if (!v0)
  {
    sub_23C7EBCBC();
    sub_23C85A30C();
  }
}

uint64_t sub_23C84C480(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0x6D5F6574696C7173;
  if (a2 == 1)
  {
    sub_23C7EE11C();
    return 0xD000000000000012;
  }
  else
  {
    sub_23C911634();
    sub_23C7DF858();
    sub_23C7DE934();
    sub_23C910F5C();
    return a1;
  }
}

void sub_23C84C548(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 > 1)
  {
    sub_23C85A298();
    sub_23C910F14();
  }
  else
  {
    sub_23C911BC8();
    sub_23C7DB3A0();
  }
}

uint64_t sub_23C84C5A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
    return !a4;
  if (a2 == 1)
    return a4 == 1;
  if (a4 < 2)
    return 0;
  if (a1 != a3 || a2 != a4)
    return sub_23C911A18();
  return 1;
}

void sub_23C84C5F4(uint64_t a1, unint64_t a2)
{
  sub_23C911BBC();
  if (a2 > 1)
  {
    sub_23C85A298();
    sub_23C910F14();
  }
  else
  {
    sub_23C911BC8();
  }
  sub_23C7DA4F4();
  sub_23C85A1D4();
}

void sub_23C84C660()
{
  uint64_t v0;

  sub_23C84C5F4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_23C84C668(uint64_t a1)
{
  uint64_t v1;

  sub_23C84C548(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

void sub_23C84C670()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23C911BBC();
  if (v1 > 1)
  {
    sub_23C85A298();
    sub_23C7EFB20();
  }
  else
  {
    sub_23C911BC8();
  }
  sub_23C7DA4F4();
  sub_23C85A1D4();
}

uint64_t sub_23C84C6D0(uint64_t *a1, uint64_t a2)
{
  return sub_23C84C5A8(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

void sub_23C84C6E4(uint64_t a1, unint64_t a2)
{
  sub_23C83B474(a1, a2);
  sub_23C910F5C();
  sub_23C7DB398();
  sub_23C910F5C();
  sub_23C85A2E0();
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C7DB624();
  sub_23C85A0D0();
}

Swift::Void __swiftcall Database.clearSchemaCache()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(v0) & 1) != 0)
  {
    v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache);
    swift_beginAccess();
    swift_bridgeObjectRelease();
    *v1 = 0;
    sub_23C7E79A8(&qword_25430D7E8);
    sub_23C910DD0();
    swift_endAccess();
    v2 = sub_23C7E0408();
    type metadata accessor for Statement();
    v3 = sub_23C85A104();
    sub_23C7E072C();
    sub_23C7E03FC(v2, v3);
    sub_23C7E03F0();
    sub_23C85A104();
    sub_23C7E072C();
    v4 = sub_23C7E097C();
    sub_23C7E03E4(v4, v5);
  }
  else
  {
    sub_23C9117B4();
    __break(1u);
  }
}

void sub_23C84C90C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  sqlite3_stmt *v10;
  int v11;
  sqlite3_stmt *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;

  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache);
  sub_23C7E6180();
  if (*v2)
  {
    sub_23C7DEF00();
LABEL_52:
    sub_23C7DEF28();
    return;
  }
  type metadata accessor for Row();
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  v3 = MEMORY[0x24BEE4AF8];
  v35 = MEMORY[0x24BEE4AF8];
  v36 = MEMORY[0x24BEE4B00];
  static Row.fetchAll(_:sql:arguments:adapter:)();
  v5 = v4;
  sub_23C7DB3DC();
  sub_23C7DC474();
  sub_23C7E7900((uint64_t)v37, &qword_25430DBD0);
  if (v1)
    goto LABEL_52;
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_6;
LABEL_44:
    sub_23C7DBCD0();
    v17 = MEMORY[0x24BEE4AF8];
LABEL_45:
    v39 = v17;
    v22 = *(_QWORD *)(v17 + 16);
    if (v22)
    {
      v23 = 0;
      v24 = 40;
      while (*(_QWORD *)(v17 + v24) != 1)
      {
        ++v23;
        v24 += 16;
        if (v22 == v23)
          goto LABEL_51;
      }
      sub_23C84CD84(v23, 0);
      v17 = v39;
    }
LABEL_51:
    *v2 = v17;
    sub_23C7DEF00();
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
LABEL_43:
  sub_23C7DB3B8();
  v6 = sub_23C9117C0();
  sub_23C7DBCD0();
  if (!v6)
    goto LABEL_44;
LABEL_6:
  *(_QWORD *)&v37[0] = v3;
  sub_23C7FD520();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v31 = v2;
    v32 = v5 & 0xC000000000000001;
    if ((v5 & 0xC000000000000001) == 0)
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = swift_retain();
      goto LABEL_9;
    }
  }
  v8 = MEMORY[0x242625290](0, v5);
  v7 = v8;
LABEL_9:
  if (*(uint64_t *)(v7 + 72) >= 2)
  {
    v2 = 0;
    v33 = v6;
    v34 = (_QWORD *)(v6 - 1);
    v9 = v5;
    do
    {
      if (*(_QWORD *)(v7 + 64))
      {
        MEMORY[0x24BDAC7A8](v8);
        v5 = (unint64_t)&v28;
        v29 = v7;
        v30 = 1;
        v10 = (sqlite3_stmt *)sub_23C85A1F4();
        if (sqlite3_column_type(v10, v11) == 5)
          goto LABEL_57;
        v12 = (sqlite3_stmt *)sub_23C85A1F4();
        if (!sqlite3_column_text(v12, v13))
        {
          __break(1u);
          break;
        }
        v5 = sub_23C910F80();
        v3 = v14;
      }
      else
      {
        v5 = sub_23C84BC74();
        v3 = v15;
      }
      v16 = v5 == 1852399981 && v3 == 0xE400000000000000;
      if (v16 || (sub_23C7E7DB4() & 1) != 0)
      {
        sub_23C7DFA18();
        swift_bridgeObjectRelease();
        v5 = 0;
        v3 = 0;
        goto LABEL_22;
      }
      if (v5 == 1886217588 && v3 == 0xE400000000000000)
      {
        sub_23C7DFA18();
      }
      else
      {
        v21 = sub_23C7E7DB4();
        sub_23C7DFA18();
        if ((v21 & 1) == 0)
          goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      v5 = 0;
      v3 = 1;
LABEL_22:
      v17 = *(_QWORD *)&v37[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FD520();
        v17 = *(_QWORD *)&v37[0];
      }
      v18 = *(_QWORD *)(v17 + 16);
      if (v18 >= *(_QWORD *)(v17 + 24) >> 1)
      {
        sub_23C7FD520();
        v17 = *(_QWORD *)&v37[0];
      }
      *(_QWORD *)(v17 + 16) = v18 + 1;
      v19 = v17 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v5;
      *(_QWORD *)(v19 + 40) = v3;
      if (v34 == v2)
      {
        sub_23C7DB3DC();
        v2 = v31;
        goto LABEL_45;
      }
      if ((uint64_t)v2 + 1 >= v33)
      {
        __break(1u);
        goto LABEL_43;
      }
      if (v32)
      {
        v8 = MEMORY[0x242625290]();
        v7 = v8;
      }
      else
      {
        v7 = *(_QWORD *)(v9 + 8 * (_QWORD)v2 + 40);
        v8 = swift_retain();
      }
      v2 = (_QWORD *)((char *)v2 + 1);
    }
    while (*(uint64_t *)(v7 + 72) > 1);
  }
  LODWORD(v30) = 0;
  v29 = 825;
  sub_23C9117B4();
  __break(1u);
LABEL_57:
  v25 = sub_23C85A1F4();
  sub_23C830F5C(v25, v26, v27, v5);
  swift_unexpectedError();
  __break(1u);
}

unint64_t sub_23C84CD84(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (result != a2)
  {
    v8 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v9 = *v3;
      v10 = *(_QWORD *)(*v3 + 16);
      if (v10 > result)
      {
        v2 = a2;
        if (v10 > a2)
        {
          v11 = (uint64_t *)(v9 + 32 + 16 * result);
          v4 = *v11;
          v5 = v11[1];
          v12 = (uint64_t *)(v9 + 32 + 16 * a2);
          v6 = *v12;
          v7 = v12[1];
          sub_23C83B474(*v11, v5);
          sub_23C83B474(v6, v7);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            goto LABEL_6;
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        sub_23C890974();
        v9 = v19;
LABEL_6:
        v13 = (uint64_t *)(v9 + 32 + 16 * v8);
        v14 = *v13;
        v15 = v13[1];
        *v13 = v6;
        v13[1] = v7;
        result = sub_23C84E458(v14, v15);
        if (*(_QWORD *)(v9 + 16) <= v2)
        {
          __break(1u);
        }
        else
        {
          v16 = (uint64_t *)(v9 + 32 + 16 * v2);
          v17 = *v16;
          v18 = v16[1];
          *v16 = v4;
          v16[1] = v5;
          result = sub_23C84E458(v17, v18);
          *v3 = v9;
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.tableExists(_:)(Swift::String a1)
{
  return sub_23C84D174(a1._countAndFlagsBits, (uint64_t)a1._object, 1) & 1;
}

#error "23C84CED8: call analysis failed (funcsize=54)"

uint64_t static Database.isSQLiteInternalTable(_:)()
{
  sub_23C85A284(0x6574696C7173);
  if ((sub_23C84CFC0() & 1) != 0)
    return 1;
  sub_23C85A284(0x616D67617270);
  return sub_23C84CFC0();
}

uint64_t sub_23C84CFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_23C910F8C();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    while (1)
    {
      v4 = sub_23C910F8C();
      if (!v5)
        break;
      if (v2 == v4 && v3 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = sub_23C911A18();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v2 = sub_23C910F8C();
      v3 = v8;
      if (!v8)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_23C910F8C();
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = v10 == 0;
    swift_bridgeObjectRelease();
  }
  return v11;
}

Swift::Bool __swiftcall Database.isSQLiteInternalTable(_:)(Swift::String a1)
{
  return static Database.isSQLiteInternalTable(_:)() & 1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.viewExists(_:)(Swift::String a1)
{
  return sub_23C84D174(a1._countAndFlagsBits, (uint64_t)a1._object, 3) & 1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.triggerExists(_:)(Swift::String a1)
{
  return sub_23C84D174(a1._countAndFlagsBits, (uint64_t)a1._object, 2) & 1;
}

uint64_t sub_23C84D174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v7 = sub_23C84C90C();
  if (!v3)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v16 = a2;
      v10 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      while (1)
      {
        v11 = *(v10 - 1);
        v12 = *v10;
        sub_23C83B474(v11, *v10);
        v13 = a3;
        v14 = sub_23C84CE90(a3, a1, v16, v11, v12);
        sub_23C84E458(v11, v12);
        if ((v14 & 1) != 0)
          break;
        v10 += 2;
        --v9;
        a3 = v13;
        if (!v9)
        {
          sub_23C7DE9B0();
          goto LABEL_8;
        }
      }
      sub_23C7DE9B0();
      v8 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_8:
      v8 = 0;
    }
  }
  return v8 & 1;
}

void sub_23C84D274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_23C85A178();
  a29 = v32;
  a30 = v33;
  v34 = v31;
  v35 = v30;
  v37 = v36;
  v39 = v38;
  v40 = v30 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache;
  sub_23C7E6180();
  v41 = *(_QWORD *)(v40 + 8);
  if (*(_QWORD *)(v41 + 16))
  {
    sub_23C85A134();
    v42 = sub_23C85A340();
    if ((v43 & 1) != 0)
    {
      v44 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 40 * v42);
      sub_23C85A270();
      sub_23C7DBBB8();
      sub_23C7EE038();
      if (v44)
        goto LABEL_15;
      goto LABEL_7;
    }
    sub_23C7EE038();
  }
  sub_23C7E79A8(&qword_25430D528);
  a20 = v39;
  sub_23C7DB48C();
  sub_23C7E79A8(&qword_25430D5F0);
  sub_23C7DB48C();
  sub_23C7E79A8(&qword_25430D538);
  sub_23C7DB48C();
  sub_23C7E79A8(&qword_25430D530);
  sub_23C7DB48C();
  sub_23C85A270();
  v39 = a20;
  swift_bridgeObjectRelease();
  v34 = v31;
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  sub_23C7DD194();
LABEL_7:
  swift_retain();
  sub_23C84C480(v39, v37);
  v45 = sub_23C852714(v35);
  if (!v34)
  {
    v46 = v45;
    sub_23C7E6180();
    v47 = *(_QWORD *)(v40 + 8);
    v48 = *(_QWORD *)(v47 + 16);
    sub_23C85A134();
    if (v48)
    {
      sub_23C85A134();
      sub_23C7DBBB8();
      v49 = sub_23C85A340();
      if ((v50 & 1) != 0)
      {
        v51 = (_QWORD *)(*(_QWORD *)(v47 + 56) + 40 * v49);
        v52 = v51[1];
        v53 = v51[2];
        v54 = v51[3];
        v55 = v51[4];
        sub_23C7DB3D4();
        sub_23C7DB3B8();
        sub_23C7DEF00();
        sub_23C7E6260();
        sub_23C7EE038();
LABEL_14:
        a14 = v46;
        a15 = v52;
        a16 = v53;
        a17 = v54;
        a18 = v55;
        sub_23C858C48((uint64_t)&a14, v39);
        sub_23C85A270();
        sub_23C7EE038();
        goto LABEL_15;
      }
      a20 = v39;
      sub_23C7EE038();
    }
    else
    {
      a20 = v39;
      sub_23C7DBBB8();
    }
    sub_23C7E79A8(&qword_25430D528);
    v52 = sub_23C7E20D8();
    sub_23C7E79A8(&qword_25430D5F0);
    v53 = sub_23C7E20D8();
    sub_23C7E79A8(&qword_25430D538);
    v54 = sub_23C7E20D8();
    sub_23C7E79A8(&qword_25430D530);
    v55 = sub_23C7E20D8();
    v39 = a20;
    goto LABEL_14;
  }
LABEL_15:
  sub_23C7DF620();
}

uint64_t sub_23C84D51C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = MEMORY[0x24BEE4B08];
  v16 = a2 + 56;
  sub_23C859F84();
  v17 = v4;
  swift_bridgeObjectRetain_n();
  if (v2)
  {
    sub_23C85A244();
    goto LABEL_24;
  }
  if (v17 > 1)
  {
    if (*(_QWORD *)(v16 + 8))
      goto LABEL_23;
    sub_23C7DFE68();
    if (v5 == v6)
      goto LABEL_25;
    sub_23C85A22C();
    if (v7)
      goto LABEL_23;
    sub_23C7DFE68();
    if (v5 == v6)
      goto LABEL_25;
    sub_23C85A22C();
    if (v8)
      goto LABEL_23;
    sub_23C7DFE68();
    if (v5 == v6)
      goto LABEL_25;
    sub_23C85A22C();
    if (v9)
      goto LABEL_23;
    sub_23C7DFE68();
    if (v5 == v6)
      goto LABEL_25;
    sub_23C85A22C();
    if (v11)
      goto LABEL_23;
    v12 = v10 + 5;
    if (v12 >= v17)
      goto LABEL_25;
    if (*(_QWORD *)(v16 + 8 * v12))
    {
LABEL_23:
      sub_23C85A320();
LABEL_24:
      __asm { BR              X8 }
    }
    while (1)
    {
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        JUMPOUT(0x23C84D77CLL);
      }
      sub_23C7DFE68();
      if (v5 == v6)
        break;
      sub_23C85A22C();
      v12 = v13 + 1;
      if (v14)
        goto LABEL_23;
    }
  }
LABEL_25:
  swift_release();
  sub_23C7DB624();
  return v18;
}

uint64_t sub_23C84D78C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99[3];
  _QWORD v100[5];
  _QWORD v101[5];
  _QWORD v102[6];
  uint64_t v103;

  type metadata accessor for SchedulingWatchdog();
  if ((sub_23C7E2FA0(v5) & 1) == 0)
  {
    sub_23C9117B4();
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  v11 = v5 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache;
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 8);
  v96 = a1;
  v97 = a4;
  v94 = a5;
  v92 = v11;
  if (*(_QWORD *)(v12 + 16))
  {
    sub_23C83B474(a1, a2);
    v13 = sub_23C822514(a1, a2);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 40 * v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C84E458(a1, a2);
      goto LABEL_7;
    }
    sub_23C84E458(a1, a2);
  }
  sub_23C7E79A8(&qword_25430D528);
  v15 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D5F0);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D538);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D530);
  sub_23C910DAC();
LABEL_7:
  swift_endAccess();
  if (!*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRelease();
    v16 = a4;
    goto LABEL_13;
  }
  v16 = a4;
  swift_bridgeObjectRetain();
  v17 = sub_23C7E94B8();
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_23C84CE90(1, a3, v16, a1, a2);
    if (v6)
      return result;
    if ((result & 1) != 0)
    {
      v24 = sub_23C84E46C(a1, a2, a3, v16);
      if (v24)
      {
        v81 = a2;
        v25 = *(_QWORD *)(v24 + 16);
        v26 = a5;
        if (v25)
        {
          v27 = v24 + 56;
          v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
          do
          {
            if (*(uint64_t *)(v27 + 56) >= 1)
            {
              v88 = *(_OWORD *)(v27 - 24);
              v90 = *(_OWORD *)(v27 + 48);
              v86 = *(_BYTE *)(v27 - 8);
              v29 = *(_QWORD *)(v27 + 8);
              v30 = *(_QWORD *)(v27 + 24);
              v84 = *(_QWORD *)(v27 + 16);
              v85 = *(_QWORD *)v27;
              v83 = *(_BYTE *)(v27 + 32);
              v82 = *(_QWORD *)(v27 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v99[0] = (uint64_t)v28;
              v31 = v26;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_23C7FD49C(0, v28[2] + 1, 1);
                v28 = (_QWORD *)v99[0];
              }
              v33 = v28[2];
              v32 = v28[3];
              v34 = v90;
              if (v33 >= v32 >> 1)
              {
                sub_23C7FD49C(v32 > 1, v33 + 1, 1);
                v34 = v90;
                v28 = (_QWORD *)v99[0];
              }
              v28[2] = v33 + 1;
              v35 = &v28[11 * v33];
              *((_OWORD *)v35 + 2) = v88;
              *((_BYTE *)v35 + 48) = v86;
              v35[7] = v85;
              v35[8] = v29;
              v35[9] = v84;
              v35[10] = v30;
              *((_BYTE *)v35 + 88) = v83;
              v35[12] = v82;
              *(_OWORD *)(v35 + 13) = v34;
              v26 = v31;
            }
            v27 += 88;
            --v25;
          }
          while (v25);
        }
        else
        {
          v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        swift_bridgeObjectRelease();
        v99[0] = (uint64_t)v28;
        swift_retain();
        sub_23C855F54(v99, (uint64_t (*)(uint64_t))sub_23C8DE9A8, sub_23C8566EC);
        swift_release();
        v58 = *(_QWORD *)(v99[0] + 16);
        v59 = v81;
        if (v58)
        {
          if (v58 == 1)
          {
            v60 = *(_QWORD *)(v99[0] + 56);
            v61 = *(_QWORD *)(v99[0] + 64);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
            if (sub_23C910E24() == 0x52454745544E49 && v62 == 0xE700000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v64 = sub_23C911A18();
              swift_bridgeObjectRelease();
              if ((v64 & 1) == 0)
              {
                sub_23C7E79A8(&qword_25430DA10);
                v65 = swift_allocObject();
                *(_OWORD *)(v65 + 16) = xmmword_23C912A20;
                *(_QWORD *)(v65 + 32) = v60;
                *(_QWORD *)(v65 + 40) = v61;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v59 = v81;
                v61 = sub_23C84F078(v96, v81);
                v67 = 1;
                v60 = v65;
                goto LABEL_54;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v67 = 0;
            v59 = v81;
          }
          else
          {
            sub_23C84ACB4(v99[0]);
            v60 = v66;
            swift_release();
            v61 = sub_23C84F078(v96, v81);
            v67 = 1;
          }
        }
        else
        {
          swift_release();
          v60 = 0;
          v61 = 0;
          v67 = 2;
        }
LABEL_54:
        swift_beginAccess();
        v68 = *(_QWORD *)(v92 + 8);
        v69 = *(_QWORD *)(v68 + 16);
        sub_23C83B474(v96, v59);
        v89 = v61;
        v87 = v67;
        if (v69)
        {
          sub_23C83B474(v96, v59);
          sub_23C7F8E30(v60, v61, v67);
          v70 = sub_23C822514(v96, v59);
          v71 = v60;
          if ((v72 & 1) != 0)
          {
            v73 = (uint64_t *)(*(_QWORD *)(v68 + 56) + 40 * v70);
            v74 = v73[1];
            v75 = v73[2];
            v76 = v73[3];
            v77 = v73[4];
            v91 = *v73;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v95 = v75;
            swift_bridgeObjectRetain();
            v93 = v76;
            swift_bridgeObjectRetain();
            v78 = v77;
            swift_bridgeObjectRetain();
            sub_23C84E458(v96, v59);
LABEL_60:
            swift_bridgeObjectRetain();
            sub_23C7F8E30(v71, v89, v87);
            swift_isUniquelyReferenced_nonNull_native();
            v103 = v74;
            sub_23C83AC94(v71, v89, v87, a3, v97);
            v80 = v103;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v100[0] = v91;
            v100[1] = v80;
            v100[2] = v95;
            v100[3] = v93;
            v100[4] = v78;
            sub_23C858C48((uint64_t)v100, v96);
            swift_endAccess();
            sub_23C84E458(v96, v59);
            result = sub_23C7F9150(v71, v89, v87);
            *(_QWORD *)v26 = v71;
            *(_QWORD *)(v26 + 8) = v89;
            *(_BYTE *)(v26 + 16) = v87;
            return result;
          }
          sub_23C84E458(v96, v59);
        }
        else
        {
          v79 = v67;
          v71 = v60;
          sub_23C7F8E30(v60, v61, v79);
        }
        sub_23C7E79A8(&qword_25430D528);
        v74 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D5F0);
        v95 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D538);
        v93 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D530);
        v78 = sub_23C910DAC();
        v91 = 0;
        v59 = v81;
        goto LABEL_60;
      }
      swift_beginAccess();
      v48 = *(_QWORD *)(v92 + 8);
      v49 = *(_QWORD *)(v48 + 16);
      sub_23C83B474(a1, a2);
      if (v49)
      {
        sub_23C83B474(a1, a2);
        v50 = sub_23C822514(a1, a2);
        if ((v51 & 1) != 0)
        {
          v52 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 40 * v50);
          v54 = *v52;
          v53 = v52[1];
          v55 = v52[2];
          v56 = v52[3];
          v57 = v52[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v46 = a2;
          sub_23C84E458(a1, a2);
LABEL_51:
          swift_bridgeObjectRetain();
          swift_isUniquelyReferenced_nonNull_native();
          v103 = v53;
          sub_23C83AC94(0, 0, 255, a3, v97);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v101[0] = v54;
          v101[1] = v53;
          v101[2] = v55;
          v101[3] = v56;
          v101[4] = v57;
          v47 = v101;
          goto LABEL_33;
        }
        sub_23C84E458(a1, a2);
      }
      v46 = a2;
      sub_23C7E79A8(&qword_25430D528);
      v53 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D5F0);
      v55 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D538);
      v56 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D530);
      v57 = sub_23C910DAC();
      v54 = 0;
      goto LABEL_51;
    }
    swift_beginAccess();
    v36 = *(_QWORD *)(v92 + 8);
    v37 = *(_QWORD *)(v36 + 16);
    sub_23C83B474(a1, a2);
    if (v37)
    {
      sub_23C83B474(a1, a2);
      v38 = sub_23C822514(a1, a2);
      if ((v39 & 1) != 0)
      {
        v40 = (uint64_t *)(*(_QWORD *)(v36 + 56) + 40 * v38);
        v42 = *v40;
        v41 = v40[1];
        v43 = v40[2];
        v44 = v40[3];
        v45 = v40[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46 = a2;
        sub_23C84E458(a1, a2);
LABEL_32:
        swift_bridgeObjectRetain();
        swift_isUniquelyReferenced_nonNull_native();
        v103 = v41;
        sub_23C83AC94(0, 0, 255, a3, v97);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v102[0] = v42;
        v102[1] = v41;
        v102[2] = v43;
        v102[3] = v44;
        v102[4] = v45;
        v47 = v102;
LABEL_33:
        sub_23C858C48((uint64_t)v47, a1);
        swift_endAccess();
        result = sub_23C84E458(a1, v46);
        *(_QWORD *)v94 = 0;
        *(_QWORD *)(v94 + 8) = 0;
        *(_BYTE *)(v94 + 16) = -1;
        return result;
      }
      sub_23C84E458(a1, a2);
    }
    v46 = a2;
    sub_23C7E79A8(&qword_25430D528);
    v41 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D5F0);
    v43 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D538);
    v44 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D530);
    v45 = sub_23C910DAC();
    v42 = 0;
    goto LABEL_32;
  }
  v19 = *(_QWORD *)(v15 + 56) + 24 * v17;
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(unsigned __int8 *)(v19 + 16);
  sub_23C859AAC(*(_QWORD *)v19, v21, *(_BYTE *)(v19 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v22 == 255)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = -1;
  }
  else
  {
    *(_QWORD *)a5 = v20;
    *(_QWORD *)(a5 + 8) = v21;
    *(_BYTE *)(a5 + 16) = v22;
  }
  return result;
}

uint64_t sub_23C84E458(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C84E46C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD v84[5];
  _QWORD v85[5];
  _QWORD v86[6];
  uint64_t v87;

  v6 = v5;
  v7 = v4;
  v10 = v4 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache;
  swift_beginAccess();
  v73 = v10;
  v11 = *(_QWORD *)(v10 + 8);
  v74 = a1;
  if (*(_QWORD *)(v11 + 16))
  {
    sub_23C83B474(a1, a2);
    v12 = sub_23C822514(a1, a2);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 40 * v12 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C84E458(a1, a2);
      goto LABEL_6;
    }
    sub_23C84E458(a1, a2);
  }
  sub_23C7E79A8(&qword_25430D528);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D5F0);
  v14 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D538);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D530);
  sub_23C910DAC();
LABEL_6:
  swift_endAccess();
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain();
  v15 = sub_23C7E94B8();
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v6 = v5;
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (sqlite3_libversion_number() > 3025999 || sqlite3_libversion_number() > 3008004)
      goto LABEL_14;
    v17 = sub_23C84CE90(1, a3, a4, a1, a2);
    if (v6)
      return v7;
    if ((v17 & 1) != 0)
    {
LABEL_14:
      sub_23C911634();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v80[0] = 0x20414D47415250;
      *((_QWORD *)&v80[0] + 1) = 0xE700000000000000;
      sub_23C83B474(a1, a2);
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v82 = 34;
      v83 = 0xE100000000000000;
      sub_23C910F5C();
      sub_23C910F5C();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v18 = v80[0];
      v81 = 0;
      memset(v80, 0, sizeof(v80));
      v19 = MEMORY[0x24BEE4AF8];
      v20 = sub_23C852940(v7, v18, *((uint64_t *)&v18 + 1), MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v80, (uint64_t (*)(uint64_t, _OWORD *))sub_23C854A24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)v80, &qword_25430DBD0);
      if (v6)
        return v7;
      v72 = a2;
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        v22 = v20 + 56;
        do
        {
          v23 = *(_BYTE *)(v22 - 8);
          v25 = *(_QWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          v26 = *(_QWORD *)(v22 + 16);
          v27 = *(_QWORD *)(v22 + 24);
          v28 = *(_QWORD *)(v22 + 40);
          if ((v23 & 1) != 0 || *(_QWORD *)(v22 - 16) != 1)
          {
            v77 = *(_BYTE *)(v22 + 32);
            v78 = *(_OWORD *)(v22 + 48);
            v79 = *(_OWORD *)(v22 - 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v80[0] = v19;
            v87 = v26;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_23C7FD49C(0, *(_QWORD *)(v19 + 16) + 1, 1);
              v19 = *(_QWORD *)&v80[0];
            }
            v31 = *(_QWORD *)(v19 + 16);
            v30 = *(_QWORD *)(v19 + 24);
            v33 = v78;
            v32 = v79;
            if (v31 >= v30 >> 1)
            {
              sub_23C7FD49C(v30 > 1, v31 + 1, 1);
              v33 = v78;
              v32 = v79;
              v19 = *(_QWORD *)&v80[0];
            }
            *(_QWORD *)(v19 + 16) = v31 + 1;
            v34 = v19 + 88 * v31;
            *(_OWORD *)(v34 + 32) = v32;
            *(_BYTE *)(v34 + 48) = v23;
            *(_QWORD *)(v34 + 56) = v25;
            *(_QWORD *)(v34 + 64) = v24;
            *(_QWORD *)(v34 + 72) = v87;
            *(_QWORD *)(v34 + 80) = v27;
            *(_BYTE *)(v34 + 88) = v77;
            *(_QWORD *)(v34 + 96) = v28;
            *(_OWORD *)(v34 + 104) = v33;
          }
          v22 += 88;
          --v21;
        }
        while (v21);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v80[0] = v19;
      swift_retain();
      sub_23C855F54((uint64_t *)v80, (uint64_t (*)(uint64_t))sub_23C8DE9A8, sub_23C855FCC);
      swift_release();
      v7 = *(_QWORD *)&v80[0];
      a2 = v72;
      a1 = v74;
      if (*(_QWORD *)(*(_QWORD *)&v80[0] + 16))
      {
        swift_beginAccess();
        v35 = *(_QWORD *)(v73 + 8);
        v36 = *(_QWORD *)(v35 + 16);
        sub_23C83B474(v74, v72);
        if (v36)
        {
          sub_23C83B474(v74, v72);
          swift_retain();
          v37 = sub_23C822514(v74, v72);
          if ((v38 & 1) != 0)
          {
            v39 = (uint64_t *)(*(_QWORD *)(v35 + 56) + 40 * v37);
            v40 = *v39;
            v41 = v39[1];
            v43 = v39[2];
            v42 = v39[3];
            v44 = v39[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_23C84E458(v74, v72);
LABEL_36:
            swift_bridgeObjectRetain();
            swift_retain();
            v55 = swift_isUniquelyReferenced_nonNull_native();
            v82 = v43;
            sub_23C83AD98(v7, a3, a4, v55);
            v56 = v82;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v85[0] = v40;
            v85[1] = v41;
            v85[2] = v56;
            v85[3] = v42;
            v85[4] = v44;
            sub_23C858C48((uint64_t)v85, a1);
            swift_endAccess();
            sub_23C84E458(a1, v72);
            swift_release();
            return v7;
          }
          sub_23C84E458(v74, v72);
        }
        else
        {
          swift_retain();
        }
        sub_23C7E79A8(&qword_25430D528);
        v41 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D5F0);
        v43 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D538);
        v42 = sub_23C910DAC();
        sub_23C7E79A8(&qword_25430D530);
        v44 = sub_23C910DAC();
        v40 = 0;
        a1 = v74;
        goto LABEL_36;
      }
      swift_release();
      swift_beginAccess();
      v45 = *(_QWORD *)(v73 + 8);
      v46 = *(_QWORD *)(v45 + 16);
      sub_23C83B474(v74, v72);
      if (v46)
      {
        sub_23C83B474(v74, v72);
        v47 = sub_23C822514(v74, v72);
        if ((v48 & 1) != 0)
        {
          v49 = (uint64_t *)(*(_QWORD *)(v45 + 56) + 40 * v47);
          v50 = *v49;
          v51 = v49[1];
          v53 = v49[2];
          v52 = v49[3];
          v54 = v49[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_23C84E458(v74, v72);
LABEL_42:
          swift_bridgeObjectRetain();
          v67 = swift_isUniquelyReferenced_nonNull_native();
          v82 = v53;
          sub_23C83AD98(0, a3, a4, v67);
          v68 = v82;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v84[0] = v50;
          v84[1] = v51;
          v84[2] = v68;
          v84[3] = v52;
          v84[4] = v54;
          v69 = v84;
LABEL_46:
          sub_23C858C48((uint64_t)v69, a1);
          swift_endAccess();
          sub_23C84E458(a1, a2);
          return 0;
        }
        sub_23C84E458(v74, v72);
      }
      sub_23C7E79A8(&qword_25430D528);
      v51 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D5F0);
      v53 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D538);
      v52 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D530);
      a1 = v74;
      v54 = sub_23C910DAC();
      v50 = 0;
      goto LABEL_42;
    }
    swift_beginAccess();
    v57 = *(_QWORD *)(v10 + 8);
    v58 = *(_QWORD *)(v57 + 16);
    sub_23C83B474(a1, a2);
    if (v58)
    {
      sub_23C83B474(a1, a2);
      v59 = sub_23C822514(a1, a2);
      if ((v60 & 1) != 0)
      {
        v61 = (uint64_t *)(*(_QWORD *)(v57 + 56) + 40 * v59);
        v62 = *v61;
        v63 = v61[1];
        v65 = v61[2];
        v64 = v61[3];
        v66 = v61[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23C84E458(a1, a2);
LABEL_45:
        swift_bridgeObjectRetain();
        v70 = swift_isUniquelyReferenced_nonNull_native();
        v82 = v65;
        sub_23C83AD98(0, a3, a4, v70);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v86[0] = v62;
        v86[1] = v63;
        v86[2] = v65;
        v86[3] = v64;
        v86[4] = v66;
        v69 = v86;
        goto LABEL_46;
      }
      sub_23C84E458(a1, a2);
    }
    sub_23C7E79A8(&qword_25430D528);
    v63 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D5F0);
    v65 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D538);
    v64 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D530);
    v66 = sub_23C910DAC();
    v62 = 0;
    goto LABEL_45;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

BOOL sub_23C84F078(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  sqlite3 *v5;
  uint64_t v6;
  sqlite3_stmt *ppStmt[2];

  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x24BDAC8D0];
  sub_23C911634();
  sub_23C910F5C();
  sub_23C84C6E4(a1, a2);
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  ppStmt[0] = 0;
  swift_beginAccess();
  v5 = *(sqlite3 **)(v2 + 16);
  v6 = sub_23C910EFC();
  swift_bridgeObjectRelease();
  LODWORD(v5) = sqlite3_prepare_v2(v5, (const char *)(v6 + 32), -1, ppStmt, 0);
  swift_release();
  sqlite3_finalize(ppStmt[0]);
  return (_DWORD)v5 == 0;
}

uint64_t sub_23C84F1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  char v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  char v14;
  uint64_t v16;
  uint64_t v17;
  char v18;

  Database.primaryKey(_:)(a3, a4, &v16);
  if (v4)
    return v7 & 1;
  v9 = v16;
  v8 = v17;
  if (!v18)
  {
    if (v16 == a1 && v17 == a2)
    {
      sub_23C85A264(a1);
    }
    else
    {
      v11 = sub_23C911A18();
      sub_23C85A264(v9);
      if ((v11 & 1) == 0)
        goto LABEL_13;
    }
LABEL_20:
    v7 = 1;
    return v7 & 1;
  }
  if (v18 != 1)
  {
    sub_23C7F9150(v16, v17, 2u);
    goto LABEL_13;
  }
  sub_23C7F9150(v16, v17, 1u);
  if ((v8 & 1) != 0)
  {
LABEL_13:
    if (sub_23C910E24() != 0x4449574F52 || v12 != 0xE500000000000000)
    {
      v14 = sub_23C911A18();
      sub_23C7DE934();
      return v14 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v7 = 0;
  return v7 & 1;
}

void Database.indexes(on:)(uint64_t a1, uint64_t a2)
{
  sub_23C852828(a1, a2, sub_23C84F324);
}

uint64_t sub_23C84F324(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[5];
  _QWORD v62[6];
  unint64_t v63;

  v5 = v4;
  v63 = a2;
  v9 = v4 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache;
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 8);
  v54 = v9;
  v55 = v5;
  if (*(_QWORD *)(v10 + 16))
  {
    sub_23C83B474(a1, v63);
    v11 = sub_23C822514(a1, v63);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 40 * v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C84E458(a1, v63);
      goto LABEL_6;
    }
    sub_23C84E458(a1, v63);
  }
  sub_23C7E79A8(&qword_25430D528);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D5F0);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D538);
  v13 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D530);
  sub_23C910DAC();
LABEL_6:
  swift_endAccess();
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_11;
  swift_bridgeObjectRetain();
  v14 = sub_23C7E94B8();
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C911634();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v58[0] = 0x20414D47415250;
    *((_QWORD *)&v58[0] + 1) = 0xE700000000000000;
    v16 = v63;
    type metadata accessor for Row();
    sub_23C83B474(a1, v16);
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v17 = v58[0];
    v59 = 0;
    memset(v58, 0, sizeof(v58));
    v18 = a3;
    v60[0] = MEMORY[0x24BEE4AF8];
    v60[1] = MEMORY[0x24BEE4B00];
    v19 = static Row.fetchAll(_:sql:arguments:adapter:)(v5, v17, *((_QWORD *)&v17 + 1), v60, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7E7900((uint64_t)v58, &qword_25430DBD0);
    if (v57)
      return a1;
    v20 = a1;
    v21 = v63;
    sub_23C83B474(a1, v63);
    swift_bridgeObjectRetain();
    swift_retain();
    a1 = sub_23C84B8B4(v19, v55, a1, v21);
    swift_bridgeObjectRelease();
    v53 = v20;
    if (*(_QWORD *)(a1 + 16))
    {
      v56 = a3;
      goto LABEL_16;
    }
    v34 = sub_23C84CE90(1, a3, a4, v20, v63);
    if ((v34 & 1) != 0)
    {
      v56 = a3;
LABEL_16:
      swift_beginAccess();
      v23 = *(_QWORD *)(v54 + 8);
      v24 = *(_QWORD *)(v23 + 16);
      sub_23C83B474(v20, v63);
      if (v24)
      {
        v25 = v63;
        sub_23C83B474(v20, v63);
        swift_bridgeObjectRetain();
        v26 = sub_23C822514(v20, v25);
        if ((v27 & 1) != 0)
        {
          v28 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 40 * v26);
          v29 = *v28;
          v30 = v28[1];
          v31 = v28[2];
          v32 = v28[3];
          v33 = v28[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_23C84E458(v53, v63);
LABEL_23:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v60[0] = v32;
          sub_23C83ADAC(a1, v56, a4, isUniquelyReferenced_nonNull_native);
          v36 = v60[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v61[0] = v29;
          v61[1] = v30;
          v61[2] = v31;
          v61[3] = v36;
          v61[4] = v33;
          v37 = v63;
          sub_23C858C48((uint64_t)v61, v53);
          swift_endAccess();
          sub_23C84E458(v53, v37);
          goto LABEL_9;
        }
        sub_23C84E458(v20, v63);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_23C7E79A8(&qword_25430D528);
      v30 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D5F0);
      v31 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D538);
      v32 = sub_23C910DAC();
      sub_23C7E79A8(&qword_25430D530);
      v33 = sub_23C910DAC();
      v29 = 0;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v38 = *(_QWORD *)(v54 + 8);
    v39 = *(_QWORD *)(v38 + 16);
    v40 = v20;
    sub_23C83B474(v20, v63);
    if (v39)
    {
      v41 = v63;
      sub_23C83B474(v20, v63);
      v42 = sub_23C822514(v20, v41);
      if ((v43 & 1) != 0)
      {
        v44 = (uint64_t *)(*(_QWORD *)(v38 + 56) + 40 * v42);
        v45 = *v44;
        v46 = v44[1];
        v47 = v44[2];
        v48 = v44[3];
        v49 = v44[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23C84E458(v53, v63);
LABEL_31:
        swift_bridgeObjectRetain();
        v50 = swift_isUniquelyReferenced_nonNull_native();
        v60[0] = v48;
        sub_23C83ADAC(0, v18, a4, v50);
        v51 = v60[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v62[0] = v45;
        v62[1] = v46;
        v62[2] = v47;
        v62[3] = v51;
        v62[4] = v49;
        v52 = v63;
        sub_23C858C48((uint64_t)v62, v40);
        swift_endAccess();
        sub_23C84E458(v40, v52);
        return 0;
      }
      sub_23C84E458(v20, v63);
    }
    sub_23C7E79A8(&qword_25430D528);
    v46 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D5F0);
    v47 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D538);
    v48 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D530);
    v40 = v20;
    v49 = sub_23C910DAC();
    v45 = 0;
    goto LABEL_31;
  }
  a1 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23C84FBC0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  sqlite3_stmt *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  _BOOL4 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  sqlite3_stmt *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;

  v7 = *a1;
  if (*(uint64_t *)(*a1 + 72) <= 1)
    goto LABEL_56;
  v11 = *(sqlite3_stmt **)(v7 + 64);
  if (v11)
  {
    MEMORY[0x24BDAC7A8](a1);
    v44 = v7;
    v45 = 1;
    if (sqlite3_column_type(v11, 1) == 5)
    {
      sub_23C830F5C(v11, 1, sub_23C859F74, v43);
      goto LABEL_60;
    }
    if (!sqlite3_column_text(v11, 1))
      goto LABEL_54;
    v12 = sub_23C910F80();
    v14 = v13;
  }
  else
  {
    v12 = sub_23C84BC74();
    if (v5)
      goto LABEL_60;
    v14 = v15;
  }
  v48 = a5;
  if (*(uint64_t *)(v7 + 72) <= 2)
  {
LABEL_56:
    LODWORD(v45) = 0;
    v42 = 825;
    goto LABEL_57;
  }
  v49 = v12;
  v16 = *(sqlite3_stmt **)(v7 + 64);
  if (v16)
  {
    MEMORY[0x24BDAC7A8](v12);
    v44 = v7;
    v45 = 2;
    if (sqlite3_column_type(v16, 2) == 5)
    {
      sub_23C831014(v16, 2, sub_23C859F74, v43);
      goto LABEL_60;
    }
    v47 = sqlite3_column_int64(v16, 2) != 0;
  }
  else
  {
    sub_23C84BD20();
    if (v5)
      goto LABEL_60;
    v47 = v17;
  }
  sub_23C911634();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51[0] = 0x20414D47415250;
  *((_QWORD *)&v51[0] + 1) = 0xE700000000000000;
  type metadata accessor for Row();
  sub_23C83B474(a3, a4);
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v18 = v51[0];
  v52 = 0;
  memset(v51, 0, sizeof(v51));
  v53[0] = MEMORY[0x24BEE4AF8];
  v53[1] = MEMORY[0x24BEE4B00];
  v19 = static Row.fetchAll(_:sql:arguments:adapter:)(a2, v18, *((_QWORD *)&v18 + 1), v53, v51);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7E7900((uint64_t)v51, &qword_25430DBD0);
    return;
  }
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E7900((uint64_t)v51, &qword_25430DBD0);
  if (v20 < 0 || (v20 & 0x4000000000000000) != 0)
  {
LABEL_48:
    v38 = swift_bridgeObjectRetain();
    sub_23C7FCF04(v38);
    v21 = v39;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v51[0] = v21;
  sub_23C855EDC((uint64_t *)v51);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)&v51[0];
  if ((*(_QWORD *)&v51[0] & 0x8000000000000000) != 0 || (*(_QWORD *)&v51[0] & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v23 = sub_23C9117C0();
    swift_release();
    if (v23)
      goto LABEL_22;
LABEL_50:
    v25 = MEMORY[0x24BEE4AF8];
LABEL_51:
    swift_release();
    v40 = v47;
    v41 = v48;
    *v48 = v49;
    v41[1] = v14;
    v41[2] = v25;
    *((_BYTE *)v41 + 24) = v40;
    return;
  }
  v23 = *(_QWORD *)(*(_QWORD *)&v51[0] + 16);
  if (!v23)
    goto LABEL_50;
LABEL_22:
  sub_23C8E61E8(0);
  v50 = v22 & 0xC000000000000001;
  v46 = v14;
  if ((v22 & 0xC000000000000001) != 0)
  {
    v24 = MEMORY[0x242625290](0, v22);
  }
  else
  {
    v24 = *(_QWORD *)(v22 + 32);
    swift_retain();
  }
  if (*(uint64_t *)(v24 + 72) < 3)
    goto LABEL_55;
  v14 = 0;
  v54 = v23 - 1;
  v25 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v26 = *(sqlite3_stmt **)(v24 + 64);
    if (v26)
      break;
    v30 = sub_23C84C0CC(2);
    v29 = v31;
    if (!v31)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v37 = v48;
      *v48 = 0;
      v37[1] = 0;
      *((_BYTE *)v37 + 24) = 0;
      v37[2] = 0;
      return;
    }
    v27 = (uint64_t)v30;
LABEL_32:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7F16C0();
      v25 = v35;
    }
    v32 = *(_QWORD *)(v25 + 16);
    if (v32 >= *(_QWORD *)(v25 + 24) >> 1)
    {
      sub_23C7F16C0();
      v25 = v36;
    }
    *(_QWORD *)(v25 + 16) = v32 + 1;
    v33 = v25 + 16 * v32;
    *(_QWORD *)(v33 + 32) = v27;
    *(_QWORD *)(v33 + 40) = v29;
    swift_release();
    if (v54 == v14)
    {
      v14 = v46;
      goto LABEL_51;
    }
    v34 = v14 + 1;
    if (v50)
    {
      v24 = MEMORY[0x242625290](v14 + 1, v22);
    }
    else
    {
      if (v34 >= *(_QWORD *)(v22 + 16))
        goto LABEL_47;
      v24 = *(_QWORD *)(v22 + 8 * v14 + 40);
      swift_retain();
    }
    if (__OFADD__(v34, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    ++v14;
    if (*(uint64_t *)(v24 + 72) <= 2)
      goto LABEL_55;
  }
  if (sqlite3_column_type(*(sqlite3_stmt **)(v24 + 64), 2) == 5)
    goto LABEL_44;
  if (sqlite3_column_text(v26, 2))
  {
    v27 = sub_23C910F80();
    v29 = v28;
    goto LABEL_32;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  LODWORD(v45) = 0;
  v42 = 803;
LABEL_57:
  v44 = v42;
  sub_23C9117B4();
  __break(1u);
LABEL_60:
  swift_unexpectedError();
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t sub_23C85026C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  sqlite3_stmt *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_int64 v7;
  sqlite3_stmt *v8;
  sqlite3_int64 v9;
  uint64_t result;
  sqlite3_stmt *v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  if (*(uint64_t *)(*a1 + 72) <= 0)
    goto LABEL_13;
  v6 = *a2;
  v3 = *(sqlite3_stmt **)(v5 + 64);
  if (v3)
  {
    MEMORY[0x24BDAC7A8](a1);
    v4 = v12;
    v13 = v5;
    v14 = 0;
    if (sqlite3_column_type(v3, 0) == 5)
    {
LABEL_14:
      v11 = v3;
LABEL_16:
      sub_23C830FB8(v11, 0, sub_23C859F74, v4);
      goto LABEL_17;
    }
    v7 = sqlite3_column_int64(v3, 0);
    v3 = (sqlite3_stmt *)v7;
  }
  else
  {
    sub_23C84BCD4();
    if (v2)
      goto LABEL_17;
    v3 = (sqlite3_stmt *)v7;
  }
  if (*(uint64_t *)(v6 + 72) <= 0)
  {
LABEL_13:
    LODWORD(v14) = 0;
    v13 = 825;
    sub_23C9117B4();
    __break(1u);
    goto LABEL_14;
  }
  v8 = *(sqlite3_stmt **)(v6 + 64);
  if (v8)
  {
    MEMORY[0x24BDAC7A8](v7);
    v4 = v12;
    v13 = v6;
    v14 = 0;
    if (sqlite3_column_type(v8, 0) != 5)
    {
      v9 = sqlite3_column_int64(v8, 0);
      return (uint64_t)v3 < v9;
    }
    v11 = v8;
    goto LABEL_16;
  }
  sub_23C84BCD4();
  if (!v2)
    return (uint64_t)v3 < v9;
LABEL_17:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void Database.table<A>(_:hasUniqueKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_23C7EE2B0();
  a17 = v19;
  a18 = v20;
  v22 = v21;
  v24 = v23;
  MEMORY[0x24BDAC7A8](v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v28);
  v29 = sub_23C9111B4();
  sub_23C850514(v29, v24, v22);
  v31 = v30;
  sub_23C7DB62C();
  if (!v18 && v31)
    sub_23C7DE934();
  sub_23C7E8E84();
  sub_23C7E4BEC();
}

void sub_23C850514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *(__cdecl *v52)(sqlite3_stmt *, int);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v6 = sub_23C84AFCC(a1);
  sub_23C7F70A4(v6);
  v8 = v7;
  if (!*(_QWORD *)(v7 + 16)
    || (v9 = sub_23C874528((uint64_t)&unk_250D87858), sub_23C85A1E4(v9), v11 = v10, v12 = sub_23C7DB624(), (v11 & 1) != 0)
    || (sub_23C85A090(v12, v13, v14, v15, v16, v17, v18, v19, v51), v4))
  {
LABEL_41:
    sub_23C7E087C();
    goto LABEL_42;
  }
  if (v65)
  {
    if (v65 == 1)
      v20 = (_OWORD *)v62;
    else
      v20 = &unk_250D877F8;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v20 = (_OWORD *)sub_23C7DB388();
    v20[1] = xmmword_23C912A20;
    *((_QWORD *)v20 + 4) = v62;
    *((_QWORD *)v20 + 5) = v64;
  }
  v21 = *((_QWORD *)v20 + 2);
  sub_23C85A2AC();
  if (v21)
  {
    v53 = a3;
    v54 = v3;
    v57 = v8;
    v58 = 0;
    sub_23C7F8E30(v62, v64, v22);
    sub_23C7EF9FC();
    v23 = v62;
    v52 = sqlite3_column_name;
    do
    {
      sub_23C910E18();
      sub_23C85A030();
      if (v24)
      {
        sub_23C7DFA98();
        v23 = v62;
      }
      sub_23C85A1BC();
    }
    while (!v25);
    sub_23C85A060();
  }
  else
  {
    sub_23C7F8E30(v62, v64, v22);
    sub_23C7DB624();
    v23 = MEMORY[0x24BEE4AF8];
  }
  sub_23C7F70A4(v23);
  v26 = sub_23C859FAC();
  v27 = sub_23C7DB624();
  if ((v26 & 1) == 0)
  {
    sub_23C859FD4(v27, v28, v29, v30, v31, v32, v33, v34, (uint64_t)v52, v53, v54, v56, v57, v58, v59, v61);
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      sub_23C85A278();
      v37 = 0;
      v38 = MEMORY[0x24BEE4AF8];
      v55 = v36;
      while (1)
      {
        v39 = v4 + 32 * v37;
        if (*(_BYTE *)(v39 + 24) == 1)
        {
          v60 = v37;
          if (*(_QWORD *)(*(_QWORD *)(v39 + 16) + 16))
          {
            v63 = v38;
            swift_bridgeObjectRetain();
            sub_23C85A358();
            sub_23C85A07C();
            do
            {
              sub_23C910E18();
              sub_23C85A014();
              if (v24)
              {
                sub_23C859FFC();
                v38 = v63;
              }
              sub_23C85A194();
            }
            while (!v25);
            sub_23C7DB3DC();
            v36 = v55;
          }
          else
          {
            swift_bridgeObjectRetain();
            sub_23C7DBBB0();
          }
          sub_23C911298();
          v40 = *(_QWORD *)(v38 + 16);
          if (v40)
          {
            v41 = v38 + 40;
            do
            {
              sub_23C7DF858();
              sub_23C85A04C();
              swift_bridgeObjectRelease();
              v41 += 16;
              --v40;
            }
            while (v40);
          }
          sub_23C7DC514();
          v42 = sub_23C859FAC();
          sub_23C7DB624();
          if ((v42 & 1) != 0)
          {
            sub_23C7E087C();
            sub_23C7DE9B0();
            sub_23C85A150();
            goto LABEL_42;
          }
          sub_23C7DB3DC();
          sub_23C85A150();
          v38 = MEMORY[0x24BEE4AF8];
          v4 = 0;
          v37 = v60;
        }
        if (++v37 == v36)
        {
          sub_23C7E087C();
          sub_23C7DE9B0();
          goto LABEL_42;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  sub_23C7E087C();
  if (!v61)
  {
    sub_23C7E79A8(&qword_25430DA10);
    v43 = (__n128 *)sub_23C7DB388();
    sub_23C7DFE10(v43, (__n128)xmmword_23C912A20, v44, v45, v46, v47, v48, v49, v50, (uint64_t)v52, v53, v54, v56, v57, v58, v59);
  }
LABEL_42:
  sub_23C7E1170();
}

void sub_23C850848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *(__cdecl *v52)(sqlite3_stmt *, int);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  sub_23C84B2F4(a1);
  sub_23C7F70A4(v6);
  v8 = v7;
  if (!*(_QWORD *)(v7 + 16)
    || (v9 = sub_23C874528((uint64_t)&unk_250D87918), sub_23C85A1E4(v9), v11 = v10, v12 = sub_23C7DB624(), (v11 & 1) != 0)
    || (sub_23C85A090(v12, v13, v14, v15, v16, v17, v18, v19, v51), v4))
  {
LABEL_41:
    sub_23C7E087C();
    goto LABEL_42;
  }
  if (v65)
  {
    if (v65 == 1)
      v20 = (_OWORD *)v62;
    else
      v20 = &unk_250D878B8;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v20 = (_OWORD *)sub_23C7DB388();
    v20[1] = xmmword_23C912A20;
    *((_QWORD *)v20 + 4) = v62;
    *((_QWORD *)v20 + 5) = v64;
  }
  v21 = *((_QWORD *)v20 + 2);
  sub_23C85A2AC();
  if (v21)
  {
    v53 = a3;
    v54 = v3;
    v57 = v8;
    v58 = 0;
    sub_23C7F8E30(v62, v64, v22);
    sub_23C7EF9FC();
    v23 = v62;
    v52 = sqlite3_column_name;
    do
    {
      sub_23C910E18();
      sub_23C85A030();
      if (v24)
      {
        sub_23C7DFA98();
        v23 = v62;
      }
      sub_23C85A1BC();
    }
    while (!v25);
    sub_23C85A060();
  }
  else
  {
    sub_23C7F8E30(v62, v64, v22);
    sub_23C7DB624();
    v23 = MEMORY[0x24BEE4AF8];
  }
  sub_23C7F70A4(v23);
  v26 = sub_23C859FAC();
  v27 = sub_23C7DB624();
  if ((v26 & 1) == 0)
  {
    sub_23C859FD4(v27, v28, v29, v30, v31, v32, v33, v34, (uint64_t)v52, v53, v54, v56, v57, v58, v59, v61);
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      sub_23C85A278();
      v37 = 0;
      v38 = MEMORY[0x24BEE4AF8];
      v55 = v36;
      while (1)
      {
        v39 = v4 + 32 * v37;
        if (*(_BYTE *)(v39 + 24) == 1)
        {
          v60 = v37;
          if (*(_QWORD *)(*(_QWORD *)(v39 + 16) + 16))
          {
            v63 = v38;
            swift_bridgeObjectRetain();
            sub_23C85A358();
            sub_23C85A07C();
            do
            {
              sub_23C910E18();
              sub_23C85A014();
              if (v24)
              {
                sub_23C859FFC();
                v38 = v63;
              }
              sub_23C85A194();
            }
            while (!v25);
            sub_23C7DB3DC();
            v36 = v55;
          }
          else
          {
            swift_bridgeObjectRetain();
            sub_23C7DBBB0();
          }
          sub_23C911298();
          v40 = *(_QWORD *)(v38 + 16);
          if (v40)
          {
            v41 = v38 + 40;
            do
            {
              sub_23C7DF858();
              sub_23C85A04C();
              swift_bridgeObjectRelease();
              v41 += 16;
              --v40;
            }
            while (v40);
          }
          sub_23C7DC514();
          v42 = sub_23C859FAC();
          sub_23C7DB624();
          if ((v42 & 1) != 0)
          {
            sub_23C7E087C();
            sub_23C7DE9B0();
            sub_23C85A150();
            goto LABEL_42;
          }
          sub_23C7DB3DC();
          sub_23C85A150();
          v38 = MEMORY[0x24BEE4AF8];
          v4 = 0;
          v37 = v60;
        }
        if (++v37 == v36)
        {
          sub_23C7E087C();
          sub_23C7DE9B0();
          goto LABEL_42;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  sub_23C7E087C();
  if (!v61)
  {
    sub_23C7E79A8(&qword_25430DA10);
    v43 = (__n128 *)sub_23C7DB388();
    sub_23C7DFE10(v43, (__n128)xmmword_23C912A20, v44, v45, v46, v47, v48, v49, v50, (uint64_t)v52, v53, v54, v56, v57, v58, v59);
  }
LABEL_42:
  sub_23C7E1170();
}

void Database.foreignKeys(on:)(uint64_t a1, uint64_t a2)
{
  sub_23C852828(a1, a2, sub_23C850B98);
}

uint64_t sub_23C850B98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  sqlite3_stmt *v26;
  sqlite3_int64 v27;
  sqlite3_int64 v28;
  sqlite3_stmt *v29;
  sqlite3_int64 v30;
  sqlite3_stmt *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  sqlite3_stmt *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  sqlite3_stmt *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  sqlite3_stmt *v96;
  uint64_t v97;
  _BYTE v98[16];
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  sqlite3_int64 v114;
  uint64_t v115;
  sqlite3_int64 v116;
  _OWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD v121[5];
  _QWORD v122[5];
  uint64_t v123;

  v107 = a4;
  v9 = v4 + OBJC_IVAR____TtC12GRDBInternal8Database_schemaCache;
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  v106 = a1;
  v103 = v9 + 8;
  v102 = v9;
  if (v11)
  {
    sub_23C83B474(a1, a2);
    v12 = sub_23C822514(a1, a2);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 40 * v12 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C84E458(a1, a2);
      goto LABEL_6;
    }
    sub_23C84E458(a1, a2);
  }
  sub_23C7E79A8(&qword_25430D528);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D5F0);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D538);
  sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D530);
  v14 = sub_23C910DAC();
LABEL_6:
  v113 = a3;
  swift_endAccess();
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    v15 = sub_23C7E94B8();
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_79:
      swift_bridgeObjectRelease();
      return v17;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C911634();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v117[0] = 0x20414D47415250;
  *((_QWORD *)&v117[0] + 1) = 0xE700000000000000;
  type metadata accessor for Row();
  sub_23C83B474(v106, a2);
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v119 = 34;
  v120 = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v18 = v117[0];
  v118 = 0;
  memset(v117, 0, sizeof(v117));
  v17 = MEMORY[0x24BEE4B00];
  v119 = MEMORY[0x24BEE4AF8];
  v120 = MEMORY[0x24BEE4B00];
  v19 = static Row.fetchAll(_:sql:arguments:adapter:)(v104, v18, *((_QWORD *)&v18 + 1), &v119, v117);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E7900((uint64_t)v117, &qword_25430DBD0);
  if (v5)
    return v17;
  v111 = v19;
  if (v19 >> 62)
    goto LABEL_96;
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_14:
  v21 = v107;
  v22 = v113;
  if (!v20)
  {
    v67 = MEMORY[0x24BEE4AF8];
    goto LABEL_74;
  }
  sub_23C8E61E8(0);
  v109 = v111 & 0xC000000000000001;
  v101 = a2;
  if ((v111 & 0xC000000000000001) != 0)
  {
    v24 = MEMORY[0x242625290](0, v111);
    v23 = v24;
  }
  else
  {
    v23 = *(_QWORD *)(v111 + 32);
    v24 = swift_retain();
  }
  if (*(uint64_t *)(v23 + 72) < 1)
    goto LABEL_101;
  a2 = 0;
  v114 = 0;
  v25 = 0;
  v105 = v111 & 0xFFFFFFFFFFFFFF8;
  v110 = v20 - 1;
  v123 = MEMORY[0x24BEE4AF8];
  v108 = xmmword_23C912A20;
  while (1)
  {
    v26 = *(sqlite3_stmt **)(v23 + 64);
    if (v26)
    {
      MEMORY[0x24BDAC7A8](v24);
      v99 = v23;
      v100 = 0;
      if (sqlite3_column_type(v26, 0) == 5)
      {
        v96 = v26;
        v97 = 0;
        goto LABEL_106;
      }
      v27 = sqlite3_column_int64(v26, 0);
      v28 = v27;
    }
    else
    {
      sub_23C84BCD4();
      v28 = v27;
    }
    if (*(uint64_t *)(v23 + 72) <= 1)
      goto LABEL_101;
    v29 = *(sqlite3_stmt **)(v23 + 64);
    if (v29)
    {
      MEMORY[0x24BDAC7A8](v27);
      v99 = v23;
      v100 = 1;
      if (sqlite3_column_type(v29, 1) != 5)
      {
        v30 = sqlite3_column_int64(v29, 1);
        v116 = v30;
        goto LABEL_28;
      }
      v96 = v29;
      v97 = 1;
LABEL_106:
      sub_23C830FB8(v96, v97, sub_23C859F74, v98);
      goto LABEL_109;
    }
    sub_23C84BCD4();
    v116 = v30;
LABEL_28:
    if (*(uint64_t *)(v23 + 72) <= 2)
      goto LABEL_101;
    v31 = *(sqlite3_stmt **)(v23 + 64);
    if (v31)
    {
      MEMORY[0x24BDAC7A8](v30);
      v99 = v23;
      v100 = 2;
      if (sqlite3_column_type(v31, 2) == 5)
      {
        sub_23C830F5C(v31, 2, sub_23C859F74, v98);
        goto LABEL_109;
      }
      if (!sqlite3_column_text(v31, 2))
        goto LABEL_99;
      v32 = sub_23C910F80();
      v112 = v32;
      v34 = v33;
    }
    else
    {
      v32 = sub_23C84BC74();
      v34 = v35;
      v112 = v32;
    }
    if (*(uint64_t *)(v23 + 72) <= 3)
      goto LABEL_101;
    v36 = *(sqlite3_stmt **)(v23 + 64);
    if (v36)
    {
      MEMORY[0x24BDAC7A8](v32);
      v99 = v23;
      v100 = 3;
      if (sqlite3_column_type(v36, 3) == 5)
      {
        sub_23C830F5C(v36, 3, sub_23C859F74, v98);
        goto LABEL_109;
      }
      if (sqlite3_column_text(v36, 3))
      {
        v115 = sub_23C910F80();
        v38 = v37;
        goto LABEL_40;
      }
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      LODWORD(v100) = 0;
      v95 = 825;
LABEL_102:
      v99 = v95;
      sub_23C9117B4();
      __break(1u);
      while (1)
      {
LABEL_109:
        swift_unexpectedError();
        __break(1u);
      }
    }
    v39 = sub_23C84BC74();
    v38 = v40;
    v115 = v39;
LABEL_40:
    if (*(uint64_t *)(v23 + 72) <= 4)
    {
      LODWORD(v100) = 0;
      v95 = 803;
      goto LABEL_102;
    }
    v41 = *(sqlite3_stmt **)(v23 + 64);
    if (v41)
    {
      if (sqlite3_column_type(*(sqlite3_stmt **)(v23 + 64), 4) == 5)
      {
        v42 = 0;
        v43 = 0;
        goto LABEL_48;
      }
      if (!sqlite3_column_text(v41, 4))
        goto LABEL_100;
      v44 = sub_23C910F80();
    }
    else
    {
      v44 = (uint64_t)sub_23C84C0CC(4);
    }
    v42 = v44;
    v43 = v45;
LABEL_48:
    if ((v25 & (v114 == v28)) != 0)
    {
      v112 = v38;
      swift_bridgeObjectRelease();
      v46 = v123;
      v47 = *(_QWORD *)(v123 + 16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if (!v47)
          goto LABEL_93;
      }
      else
      {
        sub_23C890964();
        v46 = v62;
        if (!v47)
          goto LABEL_93;
      }
      if (v47 > *(_QWORD *)(v46 + 16))
        goto LABEL_94;
      v123 = v46;
      v48 = v46 + 32 * (v47 - 1);
      v51 = *(_QWORD *)(v48 + 56);
      v50 = (_QWORD *)(v48 + 56);
      v49 = v51;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v50 = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23C7F2020();
        v49 = v65;
        *v50 = v65;
      }
      v53 = *(_QWORD *)(v49 + 16);
      if (v53 >= *(_QWORD *)(v49 + 24) >> 1)
      {
        sub_23C7F2020();
        v49 = v66;
        *v50 = v66;
      }
      v22 = v113;
      *(_QWORD *)(v49 + 16) = v53 + 1;
      v54 = (_QWORD *)(v49 + 40 * v53);
      v55 = v112;
      v54[4] = v115;
      v54[5] = v55;
      v54[6] = v42;
      v54[7] = v43;
      v54[8] = v116;
    }
    else
    {
      sub_23C7E79A8(&qword_25430B5C8);
      v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = v108;
      *(_QWORD *)(v56 + 32) = v115;
      *(_QWORD *)(v56 + 40) = v38;
      *(_QWORD *)(v56 + 48) = v42;
      *(_QWORD *)(v56 + 56) = v43;
      *(_QWORD *)(v56 + 64) = v116;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F1F6C();
        v123 = v63;
      }
      v57 = *(_QWORD *)(v123 + 16);
      if (v57 >= *(_QWORD *)(v123 + 24) >> 1)
      {
        sub_23C7F1F6C();
        v123 = v64;
      }
      v58 = v123;
      *(_QWORD *)(v123 + 16) = v57 + 1;
      v59 = (_QWORD *)(v58 + 32 * v57);
      v60 = v112;
      v59[4] = v28;
      v59[5] = v60;
      v59[6] = v34;
      v59[7] = v56;
      v114 = v28;
      v22 = v113;
    }
    swift_release();
    if (v110 == a2)
      break;
    v61 = a2 + 1;
    if (v109)
    {
      v24 = MEMORY[0x242625290](a2 + 1, v111);
      v23 = v24;
    }
    else
    {
      if (v61 >= *(_QWORD *)(v105 + 16))
        goto LABEL_95;
      v23 = *(_QWORD *)(v111 + 8 * a2 + 40);
      v24 = swift_retain();
    }
    if (__OFADD__(v61, 1))
    {
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      swift_bridgeObjectRetain();
      v20 = sub_23C9117C0();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    ++a2;
    v25 = 1;
    if (*(uint64_t *)(v23 + 72) <= 0)
      goto LABEL_101;
  }
  a2 = v101;
  v21 = v107;
  v67 = v123;
LABEL_74:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v67 + 16) || (v78 = sub_23C84CE90(1, v22, v21, v106, a2), (v78 & 1) != 0))
  {
    v17 = sub_23C84AD80(v67, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C859A64);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v68 = *(_QWORD *)(v102 + 8);
    v69 = *(_QWORD *)(v68 + 16);
    sub_23C83B474(v106, a2);
    if (v69)
    {
      sub_23C83B474(v106, a2);
      swift_bridgeObjectRetain();
      v70 = sub_23C822514(v106, a2);
      if ((v71 & 1) != 0)
      {
        v72 = (uint64_t *)(*(_QWORD *)(v68 + 56) + 40 * v70);
        v74 = *v72;
        v73 = v72[1];
        v75 = v72[2];
        v76 = v72[3];
        v77 = v72[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23C84E458(v106, a2);
LABEL_88:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v91 = swift_isUniquelyReferenced_nonNull_native();
        v119 = v77;
        sub_23C83AC80(v17, v113, v107, v91);
        v92 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v121[0] = v74;
        v121[1] = v73;
        v121[2] = v75;
        v121[3] = v76;
        v121[4] = v92;
        sub_23C858C48((uint64_t)v121, v106);
        swift_endAccess();
        sub_23C84E458(v106, a2);
        goto LABEL_79;
      }
      v90 = a2;
      sub_23C84E458(v106, a2);
    }
    else
    {
      v90 = a2;
      swift_bridgeObjectRetain();
    }
    sub_23C7E79A8(&qword_25430D528);
    v73 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D5F0);
    v75 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D538);
    v76 = sub_23C910DAC();
    sub_23C7E79A8(&qword_25430D530);
    v77 = sub_23C910DAC();
    v74 = 0;
    a2 = v90;
    goto LABEL_88;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v80 = *(_QWORD *)(v102 + 8);
  v81 = *(_QWORD *)(v80 + 16);
  sub_23C83B474(v106, a2);
  if (v81)
  {
    sub_23C83B474(v106, a2);
    v82 = sub_23C822514(v106, a2);
    if ((v83 & 1) != 0)
    {
      v84 = (uint64_t *)(*(_QWORD *)(v80 + 56) + 40 * v82);
      v86 = *v84;
      v85 = v84[1];
      v87 = v84[2];
      v88 = v84[3];
      v89 = v84[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C84E458(v106, a2);
      goto LABEL_91;
    }
    sub_23C84E458(v106, a2);
  }
  sub_23C7E79A8(&qword_25430D528);
  v85 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D5F0);
  v87 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D538);
  v88 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430D530);
  v89 = sub_23C910DAC();
  v86 = 0;
LABEL_91:
  swift_bridgeObjectRetain();
  v93 = swift_isUniquelyReferenced_nonNull_native();
  v119 = v89;
  sub_23C83AC80(0, v22, v107, v93);
  v94 = v119;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v122[0] = v86;
  v122[1] = v85;
  v122[2] = v87;
  v122[3] = v88;
  v122[4] = v94;
  sub_23C858C48((uint64_t)v122, v106);
  swift_endAccess();
  sub_23C84E458(v106, a2);
  return 0;
}

uint64_t sub_23C851B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34[2];
  char v35;

  v34[0] = a4;
  swift_bridgeObjectRetain();
  sub_23C855F54(v34, (uint64_t (*)(uint64_t))sub_23C8DE9E8, sub_23C857818);
  if (v5)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    v10 = v34[0];
    v11 = *(_QWORD *)(v34[0] + 16);
    if (v11)
    {
      v30 = a1;
      v31 = a2;
      v32 = a5;
      v33 = a3;
      v34[0] = MEMORY[0x24BEE4AF8];
      sub_23C7FDB58();
      v12 = v34[0];
      v13 = (uint64_t *)(v10 + 56);
      do
      {
        v15 = *(v13 - 3);
        v14 = *(v13 - 2);
        v17 = *(v13 - 1);
        v16 = *v13;
        v34[0] = v12;
        v19 = *(_QWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19 >= v18 >> 1)
        {
          sub_23C7FDB58();
          v12 = v34[0];
        }
        v13 += 5;
        *(_QWORD *)(v12 + 16) = v19 + 1;
        v20 = (_QWORD *)(v12 + 32 * v19);
        v20[4] = v15;
        v20[5] = v14;
        v20[6] = v17;
        v20[7] = v16;
        --v11;
      }
      while (v11);
      swift_release();
      a5 = v32;
      a3 = v33;
      a1 = v30;
      a2 = v31;
    }
    else
    {
      swift_release();
      v12 = MEMORY[0x24BEE4AF8];
    }
    v21 = *(_QWORD *)(v12 + 16);
    if (v21)
    {
      v22 = 56;
      while (*(_QWORD *)(v12 + v22))
      {
        v22 += 32;
        if (!--v21)
          goto LABEL_13;
      }
      Database.primaryKey(_:)(v34, a2);
      v26 = v34[0];
      if (v35)
      {
        if (v35 == 1)
          v27 = (_OWORD *)v34[0];
        else
          v27 = &unk_250D87210;
      }
      else
      {
        v28 = v34[1];
        sub_23C7E79A8(&qword_25430DA10);
        v27 = (_OWORD *)swift_allocObject();
        v27[1] = xmmword_23C912A20;
        *((_QWORD *)v27 + 4) = v26;
        *((_QWORD *)v27 + 5) = v28;
      }
      sub_23C84B0B8((uint64_t)v27, v12);
      v24 = v29;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_13:
      sub_23C84AECC(v12);
      v24 = v23;
    }
    swift_bridgeObjectRelease();
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = v24;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void Database.foreignKeyViolations()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[6];

  sub_23C85A140();
  sub_23C852940(v0, 0xD000000000000018, 0x800000023C91DAB0, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v8, (uint64_t (*)(uint64_t, _OWORD *))sub_23C854914);
  sub_23C7DE934();
  v1 = sub_23C7DB624();
  sub_23C7ECC54(v1, &qword_25430DBD0, v2, v3, v4, v5, v6, v7, v8[0]);
  sub_23C7EE390();
}

void Database.foreignKeyViolations(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C84C90C();
  if (!v2)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = (unint64_t *)(v5 + 40);
      while (1)
      {
        v9 = *(v7 - 1);
        v8 = *v7;
        sub_23C83B474(v9, *v7);
        if ((sub_23C84CE90(1, a1, a2, v9, v8) & 1) != 0)
          break;
        v7 += 2;
        sub_23C85A0C4();
        if (!--v6)
          goto LABEL_6;
      }
      sub_23C7DB3DC();
      sub_23C7DBCC8();
      sub_23C851F84(v9, v8);
      sub_23C85A0C4();
      sub_23C7DB62C();
    }
    else
    {
LABEL_6:
      sub_23C7DB3DC();
      sub_23C7EF5D4();
      v10 = sub_23C7DB694();
      sub_23C85A0A4(v10, v11);
      sub_23C7DFC54();
    }
  }
  sub_23C7DEF28();
}

uint64_t sub_23C851F84(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  sub_23C911634();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[0] = 0x20414D47415250;
  *((_QWORD *)&v8[0] + 1) = 0xE700000000000000;
  sub_23C83B474(a1, a2);
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v10 = 34;
  v11 = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v5 = v8[0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v6 = sub_23C852940(v2, v5, *((uint64_t *)&v5 + 1), MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v8, (uint64_t (*)(uint64_t, _OWORD *))sub_23C854914);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E7900((uint64_t)v8, &qword_25430DBD0);
  return v6;
}

uint64_t sub_23C852154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_23C85A178();
  v18 = v2;
  v19 = v3;
  v4 = v0;
  result = sub_23C8EFFB8((uint64_t)&v14);
  if (!v1)
  {
    v6 = v15;
    if (v15)
    {
      v7 = v14;
      v8 = v16;
      sub_23C7EF5D4();
      sub_23C7DB694();
      v10 = v9;
      v17 = v7;
      v14 = v7;
      v15 = v6;
      v16 = v8;
      sub_23C85A214();
      v11 = ForeignKeyViolation.failureDescription(_:)(v4);
      v12 = v17;
      *(_DWORD *)v10 = 787;
      *(_QWORD *)(v10 + 8) = v11;
      *(_QWORD *)(v10 + 16) = v13;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_BYTE *)(v10 + 56) = 0;
      sub_23C859A7C(v12, v6);
      return swift_willThrow();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkForeignKeys(in:)(Swift::String in)
{
  uint64_t v1;

  Database.foreignKeyViolations(in:)(in._countAndFlagsBits, (uint64_t)in._object);
  if (!v1)
  {
    sub_23C7EBCBC();
    sub_23C85A30C();
  }
}

double ForeignKeyViolation.databaseError(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  sub_23C85A118();
  v3 = ForeignKeyViolation.failureDescription(_:)(v2);
  *(_DWORD *)a1 = 787;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

#error "23C8523A4: call analysis failed (funcsize=60)"

uint64_t sub_23C852434(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_23C910E18();
  sub_23C859F84();
  v19 = v7;
  swift_bridgeObjectRetain_n();
  if (v4)
  {
    sub_23C85A244();
    goto LABEL_24;
  }
  if (v19 > 1)
  {
    if (*(_QWORD *)(a4 + 64))
      goto LABEL_23;
    sub_23C85A208();
    if (v8 == v9)
      goto LABEL_25;
    sub_23C85A238();
    if (v10)
      goto LABEL_23;
    sub_23C85A208();
    if (v8 == v9)
      goto LABEL_25;
    sub_23C85A238();
    if (v11)
      goto LABEL_23;
    sub_23C85A208();
    if (v8 == v9)
      goto LABEL_25;
    sub_23C85A238();
    if (v12)
      goto LABEL_23;
    sub_23C85A208();
    if (v8 == v9)
      goto LABEL_25;
    sub_23C85A238();
    if (v14)
      goto LABEL_23;
    v15 = v13 + 5;
    if (v15 >= v19)
      goto LABEL_25;
    if (*(_QWORD *)(a4 + 56 + 8 * v15))
    {
LABEL_23:
      sub_23C85A320();
LABEL_24:
      __asm { BR              X8 }
    }
    while (1)
    {
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x23C852704);
      }
      sub_23C85A208();
      if (v8 == v9)
        break;
      sub_23C85A238();
      v15 = v16 + 1;
      if (v17)
        goto LABEL_23;
    }
  }
LABEL_25:
  sub_23C85A2A0();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23C852714(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[6];

  sub_23C911634();
  sub_23C7DD194();
  v12[0] = 0xD000000000000026;
  v12[1] = 0x800000023C91DB60;
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C85A140();
  v3 = sub_23C852940(a1, v2, 0x800000023C91DB60, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v12, (uint64_t (*)(uint64_t, _OWORD *))sub_23C854F0C);
  sub_23C7DB3DC();
  swift_bridgeObjectRelease();
  sub_23C7DE904();
  v4 = sub_23C7DE934();
  sub_23C7ECC54(v4, &qword_25430DBD0, v5, v6, v7, v8, v9, v10, v12[0]);
  return v3;
}

void Database.columns(in:)(uint64_t a1, uint64_t a2)
{
  sub_23C852828(a1, a2, sub_23C84E46C);
}

void sub_23C852828(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t, uint64_t, uint64_t);

  v7 = sub_23C84C90C();
  if (!v3)
  {
    v15 = a3;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = (unint64_t *)(v7 + 40);
      while (1)
      {
        v10 = *(v9 - 1);
        v11 = *v9;
        sub_23C7EFADC();
        sub_23C7DF858();
        v12 = a1;
        v13 = v15(v10, v11, a1, a2);
        sub_23C84E458(v10, v11);
        sub_23C7DB624();
        if (v13)
          break;
        v9 += 2;
        --v8;
        a1 = v12;
        if (!v8)
          goto LABEL_6;
      }
      sub_23C85A060();
    }
    else
    {
LABEL_6:
      sub_23C85A060();
      sub_23C7EF5D4();
      sub_23C7DB694();
      sub_23C839E44(v14);
      swift_willThrow();
    }
  }
  sub_23C7EE390();
}

uint64_t sub_23C852940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[40];
  _BYTE v20[40];
  _OWORD v21[3];
  char v22;
  _QWORD v23[24];

  sub_23C7DF56C(a6, (uint64_t)v20);
  sub_23C7E79A8(&qword_25430DA08);
  v13 = sub_23C7DB388();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  v23[3] = a5;
  sub_23C7F96B0(v23);
  sub_23C7F96E0(v23, (void *)(v13 + 32));
  sub_23C7DF56C((uint64_t)v20, (uint64_t)v19);
  v16 = 0u;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v13;
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  sub_23C7E0808();
  sub_23C811CFC((uint64_t)v19, (uint64_t)&v16);
  v22 = 2;
  v21[0] = v16;
  v21[1] = v17;
  v21[2] = v18;
  sub_23C7E7900((uint64_t)v20, &qword_25430DBD0);
  v14 = a7(a1, v21);
  sub_23C7E7900((uint64_t)v21, &qword_25430DA18);
  return v14;
}

void *sub_23C852A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Bool v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = Database.tableExists(_:)(*(Swift::String *)&a1);
  if (!v6)
  {
    if (v5)
    {
      Database.primaryKey(_:)(a1, a2, &v15);
      v2 = v15;
      v8 = v16;
      if (!v17)
      {
        sub_23C7E79A8(&qword_25430DA10);
        v14 = sub_23C7DB388();
        *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
        *(_QWORD *)(v14 + 32) = v2;
        *(_QWORD *)(v14 + 40) = v8;
        return (void *)v14;
      }
      if (v17 == 1)
      {
        if ((v16 & 1) == 0)
          return (void *)v2;
        v9 = sub_23C7E097C();
        v11 = 1;
      }
      else
      {
        v9 = sub_23C7E097C();
        v11 = 2;
      }
      sub_23C7F9150(v9, v10, v11);
      return &unk_250D879D8;
    }
    Database.columns(in:)(a1, a2);
    sub_23C84ACB4(v12);
    v2 = v13;
    sub_23C7DB62C();
  }
  return (void *)v2;
}

void ColumnInfo.name.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void ColumnInfo.type.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

uint64_t ColumnInfo.isNotNull.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

void ColumnInfo.defaultValueSQL.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

uint64_t ColumnInfo.primaryKeyIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t ColumnInfo.init(row:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  char v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;

  sub_23C7D8184();
  v3 = v2;
  sub_23C7D8F9C();
  v5 = v4;
  v7 = v6;
  sub_23C7D8F9C();
  v21 = v9;
  v22 = v8;
  sub_23C855540();
  v20 = v10;
  v11 = sub_23C852D4C(0x6C61765F746C6664, 0xEA00000000006575);
  v13 = v12;
  sub_23C7D8184();
  v15 = v14;
  v16 = sub_23C852E10(0x6E6564646968, 0xE600000000000000);
  v18 = v17;
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v18 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = v21;
  *(_BYTE *)(a1 + 56) = v20 & 1;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v15;
  return result;
}

const unsigned __int8 *sub_23C852D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const unsigned __int8 *result;
  char v5;
  sqlite3_stmt *v6;

  v3 = sub_23C7E6C98(a1, a2);
  result = 0;
  if ((v5 & 1) == 0)
  {
    v6 = *(sqlite3_stmt **)(v2 + 64);
    if (!v6)
      return (const unsigned __int8 *)sub_23C84C0CC(v3);
    if (v3 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v3 <= 0x7FFFFFFF)
    {
      if (sub_23C85A334() == 5)
        return 0;
      result = sqlite3_column_text(v6, v3);
      if (result)
        return (const unsigned __int8 *)sub_23C910F80();
LABEL_13:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

_QWORD *sub_23C852E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  sqlite3_stmt *v6;
  _QWORD *result;

  v3 = sub_23C7E6C98(a1, a2);
  v4 = v3;
  if ((v5 & 1) != 0)
    return (_QWORD *)v4;
  v6 = *(sqlite3_stmt **)(v2 + 64);
  if (!v6)
    return sub_23C84C15C(v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    if (sub_23C85A334() == 5)
      return 0;
    else
      return (_QWORD *)sqlite3_column_int64(v6, v4);
  }
  __break(1u);
  result = (_QWORD *)sub_23C85A0F0();
  __break(1u);
  return result;
}

void IndexInfo.name.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

uint64_t IndexInfo.columns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IndexInfo.isUnique.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

void ForeignKeyViolation.originTable.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void ForeignKeyViolation.originTable.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_23C7DB3A0();
}

uint64_t (*ForeignKeyViolation.originTable.modify())()
{
  return nullsub_1;
}

uint64_t ForeignKeyViolation.originRowID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ForeignKeyViolation.originRowID.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ForeignKeyViolation.originRowID.modify())()
{
  return nullsub_1;
}

void ForeignKeyViolation.destinationTable.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void ForeignKeyViolation.destinationTable.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_23C7DB3A0();
}

uint64_t (*ForeignKeyViolation.destinationTable.modify())()
{
  return nullsub_1;
}

uint64_t ForeignKeyViolation.foreignKeyId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t ForeignKeyViolation.foreignKeyId.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*ForeignKeyViolation.foreignKeyId.modify())()
{
  return nullsub_1;
}

uint64_t ForeignKeyViolation.init(row:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  int v12;
  sqlite3_int64 v13;
  char v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_stmt *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  sqlite3_stmt *v26;
  uint64_t result;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];

  if (*(uint64_t *)(a1 + 72) <= 0)
    goto LABEL_26;
  v4 = *(sqlite3_stmt **)(a1 + 64);
  if (v4)
  {
    MEMORY[0x24BDAC7A8](a1);
    v30 = a1;
    v31 = 0;
    if (sqlite3_column_type(v4, 0) == 5)
    {
      sub_23C830F5C(v4, 0, sub_23C859F74, v29);
      goto LABEL_33;
    }
    if (!sqlite3_column_text(v4, 0))
    {
      __break(1u);
      goto LABEL_25;
    }
    v5 = sub_23C910F80();
    v7 = v6;
  }
  else
  {
    v5 = sub_23C84BC74();
    v7 = v8;
  }
  v9 = *(_QWORD *)(a1 + 72);
  if (v9 <= 1)
  {
    LODWORD(v31) = 0;
    v28 = 803;
    goto LABEL_28;
  }
  v10 = *(sqlite3_stmt **)(a1 + 64);
  if (v10)
  {
    v11 = (sqlite3_stmt *)sub_23C85A1F4();
    v13 = sqlite3_column_type(v11, v12);
    v14 = (_DWORD)v13 == 5;
    if ((_DWORD)v13 == 5)
    {
      v24 = 0;
    }
    else
    {
      v22 = (sqlite3_stmt *)sub_23C85A1F4();
      v13 = sqlite3_column_int64(v22, v23);
      v24 = (_QWORD *)v13;
    }
    if ((unint64_t)v9 <= 2)
      goto LABEL_26;
    MEMORY[0x24BDAC7A8](v13);
    v30 = a1;
    v31 = 2;
    if (sqlite3_column_type(v10, 2) == 5)
    {
      sub_23C830F5C(v10, 2, sub_23C859F74, v29);
      goto LABEL_33;
    }
    if (sqlite3_column_text(v10, 2))
    {
      v18 = sub_23C910F80();
      v19 = v18;
      v21 = v25;
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v15 = sub_23C84C1F0(1);
  if ((unint64_t)v9 <= 2)
  {
LABEL_26:
    LODWORD(v31) = 0;
    v28 = 825;
LABEL_28:
    v30 = v28;
    sub_23C9117B4();
    __break(1u);
    while (1)
    {
LABEL_33:
      swift_unexpectedError();
      __break(1u);
    }
  }
  v24 = v15;
  v17 = v16;
  v18 = sub_23C84BC74();
  v19 = v18;
  v21 = v20;
  v14 = v17 & 1;
LABEL_18:
  if (*(uint64_t *)(a1 + 72) <= 3)
    goto LABEL_26;
  v26 = *(sqlite3_stmt **)(a1 + 64);
  if (!v26)
  {
    sub_23C84BCD4();
    result = sub_23C85A258();
    goto LABEL_23;
  }
  v32[1] = 0;
  v32[2] = v32;
  MEMORY[0x24BDAC7A8](v18);
  v30 = a1;
  v31 = 3;
  if (sqlite3_column_type(v26, 3) == 5)
  {
    sub_23C830FB8(v26, 3, sub_23C846440, v29);
    goto LABEL_33;
  }
  sqlite3_column_int64(v26, 3);
  result = sub_23C85A258();
LABEL_23:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v26;
  return result;
}

void ForeignKeyViolation.description.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C7DBCC8();
    sub_23C85A1AC();
    sub_23C7DB62C();
    sub_23C85A068();
    sub_23C7DF858();
  }
  else
  {
    sub_23C911634();
    sub_23C7EE11C();
    sub_23C910F5C();
    sub_23C7DBCC8();
    sub_23C85A1AC();
    sub_23C7DB62C();
    sub_23C85A068();
    sub_23C7DF858();
    sub_23C85A2E0();
    sub_23C7DB624();
    sub_23C910F5C();
    sub_23C911880();
  }
  sub_23C910F5C();
  sub_23C7DB624();
  sub_23C85A0D0();
}

uint64_t ForeignKeyViolation.failureDescription(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v4 = *(_OWORD *)(v1 + 16);
  v20[0] = *(_OWORD *)v1;
  v20[1] = v4;
  v20[2] = *(_OWORD *)(v1 + 32);
  v21 = *(_QWORD *)(v1 + 48);
  v5 = v4;
  v6 = BYTE8(v4);
  swift_retain();
  sub_23C858CC4((uint64_t)v20);
  result = sub_23C84B64C(v5, v6, a1, (uint64_t)v20);
  if (v2)
    return result;
  v8 = result;
  Database.foreignKeys(on:)(*(uint64_t *)&v20[0], *((uint64_t *)&v20[0] + 1));
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = v21;
    v12 = v9 + 56;
    while (*(_QWORD *)(v12 - 24) != v21)
    {
      v12 += 32;
      if (!--v10)
        goto LABEL_8;
    }
    v13 = *(_QWORD *)(v12 - 8);
    v18 = *(_QWORD *)(v12 - 16);
    sub_23C7E6260();
    sub_23C7DC46C();
    sub_23C7DE934();
    if (v13)
    {
      v19 = 0;
      sub_23C911634();
      sub_23C7EE11C();
      sub_23C910F5C();
      sub_23C7DB3B8();
      sub_23C85A168();
      sub_23C7DBCD0();
      sub_23C85A158();
      sub_23C858CF8(v11, v18, v13);
      v14 = sub_23C7E6260();
      v15 = sub_23C80B764(v14);
      sub_23C7DC514();
      sub_23C858D28(v11, v18, v13);
      v22 = v15;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
      sub_23C910E3C();
      sub_23C7DB3DC();
      sub_23C910F5C();
      sub_23C7E087C();
      sub_23C910F5C();
      sub_23C7DBBB0();
      sub_23C910F5C();
      sub_23C7DB3DC();
      sub_23C85A158();
      v16 = sub_23C7E6260();
      v17 = sub_23C80B690(v16);
      sub_23C7DC514();
      sub_23C858D28(v11, v18, v13);
      v22 = v17;
      sub_23C910E3C();
      sub_23C7DBCD0();
      sub_23C910F5C();
      sub_23C7E087C();
      sub_23C910F5C();
      goto LABEL_12;
    }
  }
  else
  {
LABEL_8:
    sub_23C7DE934();
  }
  sub_23C911634();
  swift_bridgeObjectRelease();
  v19 = 0xD000000000000028;
  sub_23C7DB3B8();
  sub_23C85A168();
  sub_23C7DBCD0();
  sub_23C910F5C();
  sub_23C7DBBB8();
  sub_23C910F5C();
  sub_23C7DC474();
LABEL_12:
  if (v8)
  {
    swift_retain();
    Row.description.getter();
    sub_23C910F5C();
    sub_23C7DB62C();
    sub_23C910F5C();
    sub_23C7DB62C();
    swift_release_n();
  }
  else if ((v6 & 1) == 0)
  {
    v22 = v5;
    sub_23C911880();
    sub_23C910F5C();
    sub_23C7DB624();
    sub_23C910F5C();
    sub_23C7DB624();
  }
  return v19;
}

void sub_23C8538D8(_QWORD *a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for Row();
  sub_23C911634();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "SELECT * FROM ");
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  sub_23C911880();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v9 = MEMORY[0x24BEE4AF8];
  v10 = MEMORY[0x24BEE4B00];
  static Row.fetchOne(_:sql:arguments:adapter:)();
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7E7900((uint64_t)v7, &qword_25430DBD0);
  if (v2)
    *a1 = v2;
  else
    *a2 = v6;
}

uint64_t ForeignKeyInfo.originColumns.getter()
{
  return sub_23C853AB4((uint64_t (*)(uint64_t, uint64_t *))sub_23C80B764);
}

uint64_t ForeignKeyInfo.destinationColumns.getter()
{
  return sub_23C853AB4((uint64_t (*)(uint64_t, uint64_t *))sub_23C80B690);
}

uint64_t sub_23C853AB4(uint64_t (*a1)(uint64_t, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = sub_23C7DB3D4();
  v3 = a1(v2, &v5);
  sub_23C7DE934();
  return v3;
}

BOOL PrimaryKeyInfo.isRowID.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) != 1;
}

void sub_23C853B18()
{
  uint64_t *v0;

  if (*((_BYTE *)v0 + 16))
  {
    if (*((_BYTE *)v0 + 16) == 1)
    {
      if ((v0[1] & 1) == 0 && *(_QWORD *)(*v0 + 16) == 1)
        sub_23C7DC46C();
    }
    else
    {
      sub_23C7F9150(*v0, v0[1], 2u);
    }
  }
  else
  {
    sub_23C7F8E30(*v0, v0[1], 0);
  }
  sub_23C7DB3A0();
}

uint64_t ForeignKeyInfo.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ForeignKeyInfo.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ForeignKeyInfo.id.modify())()
{
  return nullsub_1;
}

void ForeignKeyInfo.destinationTable.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

uint64_t ForeignKeyInfo.mapping.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_23C853C08()
{
  uint64_t v0;

  sub_23C7DBCC8();
  sub_23C8250D0();
  sub_23C7DB62C();
  sub_23C7DBCC8();
  sub_23C8250D0();
  sub_23C7DB62C();
  if (*(_QWORD *)(v0 + 40))
  {
    sub_23C911BD4();
    sub_23C7DC46C();
    sub_23C7E097C();
    sub_23C7EFB20();
    sub_23C7E072C();
  }
  else
  {
    sub_23C911BD4();
  }
  if (*(_QWORD *)(v0 + 56))
  {
    sub_23C911BD4();
    sub_23C7DC46C();
    sub_23C7EFB20();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C911BD4();
    sub_23C7DB3A0();
  }
}

uint64_t sub_23C853CB8(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_23C7E16E8(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_23C7E16E8(), result = 0, (v8 & 1) != 0))
    {
      v9 = a1[5];
      v10 = a2[5];
      if (v9)
      {
        if (!v10)
          return 0;
        if (a1[4] != a2[4] || v9 != v10)
        {
          v12 = sub_23C7E16E8();
          result = 0;
          if ((v12 & 1) == 0)
            return result;
        }
      }
      else if (v10)
      {
        return 0;
      }
      v13 = a1[7];
      v14 = a2[7];
      if (v13)
      {
        if (v14)
        {
          v15 = a1[6] == a2[6] && v13 == v14;
          if (v15 || (sub_23C7E16E8() & 1) != 0)
            return 1;
        }
      }
      else if (!v14)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_23C853D9C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_23C911A18() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (sub_23C911A18() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x656D616E5F6C6274 && a2 == 0xE800000000000000;
      if (v7 || (sub_23C911A18() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 7106931 && a2 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = sub_23C911A18();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_23C853F20()
{
  return 4;
}

uint64_t sub_23C853F28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C853F54 + 4 * byte_23C915A64[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_23C853F54()
{
  return 1701667182;
}

uint64_t sub_23C853F60()
{
  return 0x656D616E5F6C6274;
}

uint64_t sub_23C853F78()
{
  return 7106931;
}

uint64_t sub_23C853F88()
{
  unsigned __int8 *v0;

  return sub_23C853F28(*v0);
}

uint64_t sub_23C853F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C853D9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C853FB4()
{
  return sub_23C7EDB44();
}

uint64_t sub_23C853FD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C853F20();
  *a1 = result;
  return result;
}

uint64_t sub_23C853FF4()
{
  sub_23C8599D0();
  return sub_23C911C58();
}

uint64_t sub_23C85401C()
{
  sub_23C8599D0();
  return sub_23C911C64();
}

uint64_t sub_23C854044(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_23C7E79A8(&qword_256BCCAA8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23C7E7E34(a1, a1[3]);
  sub_23C8599D0();
  sub_23C911C34();
  v8[15] = 0;
  sub_23C911850();
  if (!v1)
  {
    v8[14] = 1;
    sub_23C911850();
    v8[13] = 2;
    sub_23C911844();
    v8[12] = 3;
    sub_23C911844();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23C8541A8()
{
  sub_23C911BBC();
  sub_23C853C08();
  return sub_23C911BF8();
}

uint64_t sub_23C8541E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v5 = sub_23C7E79A8(&qword_25430D618);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7E7E34(a1, a1[3]);
  sub_23C8599D0();
  sub_23C911C1C();
  if (v2)
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v35 = 0;
    v9 = sub_23C91182C();
    v11 = v10;
    v31 = v9;
    v34 = 1;
    swift_bridgeObjectRetain();
    v12 = sub_23C91182C();
    v14 = v13;
    v28 = v12;
    v29 = a2;
    v33 = 2;
    swift_bridgeObjectRetain();
    v30 = v14;
    v15 = sub_23C911820();
    v17 = v16;
    v27 = v15;
    v32 = 3;
    swift_bridgeObjectRetain();
    v18 = sub_23C911820();
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22 = v18;
    v21(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v30;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v25 = v29;
    *v29 = v31;
    v25[1] = v11;
    v25[2] = v28;
    v25[3] = v23;
    v25[4] = v27;
    v25[5] = v17;
    v25[6] = v22;
    v25[7] = v20;
  }
  return result;
}

double sub_23C8544B4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_23C8541E4(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_23C8544F4(_QWORD *a1)
{
  return sub_23C854044(a1);
}

uint64_t sub_23C85452C()
{
  return sub_23C8541A8();
}

void sub_23C854564()
{
  sub_23C853C08();
}

uint64_t sub_23C85459C()
{
  sub_23C911BBC();
  sub_23C853C08();
  return sub_23C7DA4F4();
}

double sub_23C8545E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  type metadata accessor for RowDecoder();
  swift_initStackObject();
  sub_23C85548C(a1, &v8);
  swift_release();
  v4 = v9;
  v5 = v10;
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  result = *(double *)&v11;
  v7 = v12;
  *(_OWORD *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_23C854680(__n128 *a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  _QWORD v5[8];
  _OWORD v6[4];

  sub_23C85A2CC(a1);
  v2 = v1[1];
  v6[0] = *v1;
  v6[1] = v2;
  v3 = v1[3];
  v6[2] = v1[2];
  v6[3] = v3;
  return sub_23C853CB8(v5, v6) & 1;
}

uint64_t sub_23C8546BC(_QWORD *a1, _QWORD *a2)
{
  return sub_23C85467C(*a1, *a2);
}

uint64_t sub_23C8546C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23C8546DC(a1, a2);
}

uint64_t sub_23C8546DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  GRDBInternal::StatementArguments v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[5];
  _QWORD v21[2];

  v4 = v2;
  type metadata accessor for StatementArgumentsSink();
  sub_23C7DB388();
  swift_retain();
  v7 = sub_23C7E0B8C(0);
  v8 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  sub_23C7DB388();
  sub_23C7E30C0(a1, v7, v8);
  swift_retain();
  v9 = sub_23C7DEF00();
  v10 = sub_23C8A9A6C(v9);
  if (v3)
  {
    sub_23C7DC4C4();
    return swift_bridgeObjectRelease();
  }
  v20[0] = v10;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
  v11 = sub_23C910E3C();
  v13 = v12;
  sub_23C7E087C();
  sub_23C7DC514();
  v14 = *(unsigned __int8 *)(v4 + 48);
  if (v14 == 2)
  {
    v15 = sub_23C8C8C84(v11, v13, 0);
  }
  else if ((v14 & 1) != 0)
  {
    v15 = sub_23C7DF68C(v11, v13);
  }
  else
  {
    v15 = Database.cachedStatement(sql:)(v11, v13);
  }
  v16 = v15;
  sub_23C7DBCD0();
  sub_23C7E0BF0(v20);
  v21[0] = v20[0];
  v21[1] = v20[1];
  v17.values._rawValue = v21;
  Statement.setArguments(_:)(v17);
  if (v18)
  {
    sub_23C7DC4C4();
    swift_release();
    sub_23C7E087C();
    return swift_bridgeObjectRelease();
  }
  sub_23C7E087C();
  sub_23C7DBCD0();
  sub_23C7DF56C(v4, (uint64_t)v20);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)a2 = v16;
  sub_23C811CFC((uint64_t)v20, a2 + 8);
  sub_23C7F1754(*(_QWORD *)(a2 + 48));
  result = sub_23C7DC4C4();
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_23C854914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C8546DC(a1, (uint64_t)&v10);
  if (v2)
    return a2;
  v4 = v12;
  if (!v12)
  {
    sub_23C7F5610(0);
    sub_23C7F1754(0);
    sub_23C7DF56C((uint64_t)&v11, (uint64_t)v9);
    sub_23C7E79A8(&qword_25430B290);
    swift_allocObject();
    v5 = swift_retain_n();
    a2 = sub_23C85532C(v5, 0, 0, (uint64_t)v9);
    sub_23C812C40((uint64_t)&v10);
    swift_release();
    return a2;
  }
  v7 = v13;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v7;
  sub_23C7F5610(v4);
  result = sub_23C7F1754((uint64_t)sub_23C82CA7C);
  __break(1u);
  return result;
}

uint64_t sub_23C854A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  const unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _BYTE v44[40];
  void (*v45)(uint64_t, unint64_t);
  uint64_t v46;

  sub_23C8546DC(a1, (uint64_t)&v43);
  if (v2)
    return a2;
  v5 = v45;
  if (!v45)
  {
    sub_23C7DF56C((uint64_t)v44, (uint64_t)v42);
    sub_23C7E79A8(&qword_25430D2C8);
    swift_allocObject();
    v7 = swift_retain_n();
    v11 = sub_23C85532C(v7, 0, 0, (uint64_t)v42);
    v46 = MEMORY[0x24BEE4AF8];
    swift_beginAccess();
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      swift_release();
      a2 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      swift_retain();
      v32 = swift_retain();
      sub_23C8E0F74(v32, v11, &v46);
      swift_release();
      *(_BYTE *)(v11 + 24) = 1;
      swift_release();
      a2 = v46;
    }
    sub_23C812C40((uint64_t)&v43);
    swift_release();
    return a2;
  }
  type metadata accessor for Row();
  v42[0] = 0uLL;
  sub_23C7F5610((uint64_t)v5);
  v6 = swift_retain();
  static Row.fetchAll(_:arguments:adapter:)(v6, v42, (uint64_t)v44);
  v9 = v8;
  swift_release();
  v5(a1, v9);
  if (!(v9 >> 62))
  {
    v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_10;
LABEL_22:
    sub_23C7F1754((uint64_t)v5);
    a2 = MEMORY[0x24BEE4AF8];
LABEL_23:
    sub_23C812C40((uint64_t)&v43);
    swift_bridgeObjectRelease();
    return a2;
  }
  swift_bridgeObjectRetain();
  v12 = sub_23C9117C0();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_22;
LABEL_10:
  v33 = (uint64_t)v5;
  *(_QWORD *)&v42[0] = MEMORY[0x24BEE4AF8];
  sub_23C7FD49C(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    a2 = *(_QWORD *)&v42[0];
    v34 = v9 & 0xC000000000000001;
    v35 = v12;
    v36 = v9;
    do
    {
      if (v34)
        MEMORY[0x242625290](v13, v9);
      else
        swift_retain();
      sub_23C7D8184();
      v15 = v14;
      sub_23C7D8F9C();
      v17 = v16;
      sub_23C7D8F9C();
      v39 = v19;
      v40 = v18;
      v41 = v17;
      sub_23C855540();
      v21 = v20;
      v22 = sub_23C852D4C(0x6C61765F746C6664, 0xEA00000000006575);
      v24 = v23;
      sub_23C7D8184();
      v26 = v25;
      v38 = sub_23C852E10(0x6E6564646968, 0xE600000000000000);
      v37 = v27;
      swift_release();
      *(_QWORD *)&v42[0] = a2;
      v28 = *(_QWORD *)(a2 + 16);
      v29 = *(_QWORD *)(a2 + 24);
      v30 = v28 + 1;
      if (v28 >= v29 >> 1)
      {
        sub_23C7FD49C(v29 > 1, v28 + 1, 1);
        v30 = v28 + 1;
        a2 = *(_QWORD *)&v42[0];
      }
      ++v13;
      *(_QWORD *)(a2 + 16) = v30;
      v31 = a2 + 88 * v28;
      *(_QWORD *)(v31 + 32) = v15;
      *(_QWORD *)(v31 + 40) = v38;
      *(_BYTE *)(v31 + 48) = v37 & 1;
      *(_QWORD *)(v31 + 56) = v41;
      *(_QWORD *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = v40;
      *(_QWORD *)(v31 + 80) = v39;
      *(_BYTE *)(v31 + 88) = v21 & 1;
      *(_QWORD *)(v31 + 96) = v22;
      *(_QWORD *)(v31 + 104) = v24;
      *(_QWORD *)(v31 + 112) = v26;
      v9 = v36;
    }
    while (v35 != v13);
    sub_23C7F1754(v33);
    goto LABEL_23;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_23C854F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[40];
  void (*v20)(uint64_t, unint64_t);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void (*v25)(uint64_t, unint64_t);

  sub_23C8546DC(&v18, a1, 0);
  if (v2)
    return a2;
  v5 = v20;
  if (!v20)
  {
    sub_23C7DF56C((uint64_t)v19, (uint64_t)v16);
    sub_23C7E79A8(&qword_25430D360);
    swift_allocObject();
    v7 = swift_retain_n();
    v11 = sub_23C85532C(v7, 0, 0, (uint64_t)v16);
    v17 = MEMORY[0x24BEE4B08];
    swift_beginAccess();
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      swift_release();
      a2 = MEMORY[0x24BEE4B08];
    }
    else
    {
      swift_retain();
      v13 = swift_retain();
      sub_23C8E06EC(v13);
      swift_release();
      *(_BYTE *)(v11 + 24) = 1;
      swift_release();
      a2 = v17;
    }
    sub_23C812C40((uint64_t)&v18);
    swift_release();
    return a2;
  }
  type metadata accessor for Row();
  v16[0] = 0uLL;
  sub_23C7F5610((uint64_t)v5);
  v6 = swift_retain();
  static Row.fetchAll(_:arguments:adapter:)(v6, v16, (uint64_t)v19);
  v9 = v8;
  swift_release();
  v5(a1, v9);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  sub_23C859954();
  a2 = sub_23C911298();
  v17 = a2;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    sub_23C7F1754((uint64_t)v5);
LABEL_23:
    sub_23C812C40((uint64_t)&v18);
    return a2;
  }
  v25 = v5;
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        MEMORY[0x242625290](v14, v9);
      else
        swift_retain();
      type metadata accessor for RowDecoder();
      swift_initStackObject();
      v15 = swift_retain();
      sub_23C85548C(v15, v16);
      swift_release();
      ++v14;
      swift_release();
      v21 = v16[0];
      v22 = v16[1];
      v23 = v16[2];
      v24 = v16[3];
      sub_23C8FA828();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v12 != v14);
    swift_bridgeObjectRelease();
    sub_23C7F1754((uint64_t)v25);
    a2 = v17;
    goto LABEL_23;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_23C85532C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[5];

  v6 = v4;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  type metadata accessor for Row();
  sub_23C7DB388();
  v11 = swift_retain_n();
  sub_23C7DA924(v11);
  v17[3] = type metadata accessor for Statement();
  v17[4] = (uint64_t)&protocol witness table for Statement;
  v17[0] = a1;
  swift_retain();
  v12 = sub_23C7D9DE4(a4, (uint64_t)v17);
  swift_release();
  if (v5)
  {
    sub_23C85A34C();
    v13 = swift_release();
    sub_23C85A200(v13, &qword_25430DBD0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
    *(_QWORD *)(v6 + 32) = v12;
    v17[0] = a2;
    v17[1] = a3;
    sub_23C7E1D24(v17, v14);
    v15 = swift_release();
    sub_23C85A200(v15, &qword_25430DBD0);
    sub_23C85A34C();
  }
  return v6;
}

double sub_23C85548C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  _QWORD v11[5];
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;

  v11[3] = sub_23C7E79A8(qword_25430D4A0);
  sub_23C7E1240(&qword_25430D498, qword_25430D4A0, (uint64_t)&unk_23C91A600);
  v11[4] = v5;
  v6 = (_QWORD *)sub_23C7DB388();
  v11[0] = v6;
  v7 = MEMORY[0x24BEE4AF8];
  v6[2] = a1;
  v6[3] = v7;
  v6[4] = 0;
  v6[5] = 0;
  swift_retain();
  sub_23C8541E4(v11, (uint64_t *)v12);
  if (!v2)
  {
    v9 = v12[1];
    *a2 = v12[0];
    a2[1] = v9;
    result = *(double *)&v13;
    v10 = v14;
    a2[2] = v13;
    a2[3] = v10;
  }
  return result;
}

void sub_23C855540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v12 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v12);
    sub_23C83256C();
    v13 = sub_23C7DB694();
    sub_23C7E0964(v13, v14);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BD20();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_13;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5)
    {
      v8 = sub_23C7E98E4();
      sub_23C831014(v8, v9, v10, v11);
      sub_23C7E6E94();
    }
    else
    {
      sub_23C7E6750();
    }
LABEL_9:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_23C85561C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  sqlite3_int64 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v10 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v10);
    sub_23C83256C();
    v11 = sub_23C7DB694();
    sub_23C7E0964(v11, v12);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BD70();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (v8 = sub_23C7E6750(), v8 != (char)v8))
    {
      v9 = sub_23C7E98E4();
      sub_23C83113C(v9);
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C8556F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  sqlite3_int64 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v10 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v10);
    sub_23C83256C();
    v11 = sub_23C7DB694();
    sub_23C7E0964(v11, v12);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BDBC();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (v8 = sub_23C7E6750(), v8 != (__int16)v8))
    {
      v9 = sub_23C7E98E4();
      sub_23C831198(v9);
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C8557CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  sqlite3_int64 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BE08();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (v8 = sub_23C7E6750(), v8 != (int)v8))
    {
      sub_23C7E98E4();
      sub_23C8310CC();
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C8558A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BE54();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_13;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5)
    {
      v8 = sub_23C7E98E4();
      sub_23C831070(v8);
      sub_23C7E6E94();
    }
    else
    {
      sub_23C7E6750();
    }
LABEL_9:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_23C855974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v8 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v8);
    sub_23C83256C();
    v9 = sub_23C7DB694();
    sub_23C7E0964(v9, v10);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_12;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BEA0();
    goto LABEL_12;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || sub_23C7E6750() < 0)
    {
      v11 = sub_23C7E98E4();
      sub_23C8311F4(v11);
      sub_23C7E6E94();
    }
LABEL_12:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C855A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BEEC();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (unint64_t)sub_23C7E6750() >= 0x100)
    {
      v8 = sub_23C7E98E4();
      sub_23C831250(v8);
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C855B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BF38();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (unint64_t)sub_23C7E6750() >= 0x10000)
    {
      v8 = sub_23C7E98E4();
      sub_23C8312AC(v8);
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C855BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_10;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BF84();
    goto LABEL_10;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || (unint64_t)sub_23C7E6750() >> 32)
    {
      v8 = sub_23C7E98E4();
      sub_23C831308(v8);
      sub_23C7E6E94();
    }
LABEL_10:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C855CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v8 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v8);
    sub_23C83256C();
    v9 = sub_23C7DB694();
    sub_23C7E0964(v9, v10);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_12;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84BFD0();
    goto LABEL_12;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_14;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5 || sub_23C7E6750() < 0)
    {
      v11 = sub_23C7E98E4();
      sub_23C831364(v11);
      sub_23C7E6E94();
    }
LABEL_12:
    sub_23C7E8E84();
    sub_23C7E4BEC();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_23C855DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C7EE2B0();
  sub_23C7E8314(v1, v2);
  if ((v3 & 1) != 0)
  {
    v9 = (_QWORD *)sub_23C7E62D8();
    sub_23C7E9624(v9);
    sub_23C83256C();
    v10 = sub_23C7DB694();
    sub_23C7E0964(v10, v11);
    sub_23C7E8A08();
    sub_23C7E1150();
    sub_23C7EDE5C();
    sub_23C7DFC54();
    goto LABEL_9;
  }
  sub_23C859F78();
  if (!v0)
  {
    sub_23C7EDBE4();
    sub_23C84C01C();
    goto LABEL_9;
  }
  sub_23C7DEA58();
  if (v4 == v5)
  {
    sub_23C7E5EDC();
    if (!(v4 ^ v5 | v6))
      goto LABEL_13;
    sub_23C7E9B58();
    MEMORY[0x24BDAC7A8](v7);
    if (sub_23C7E42DC() == 5)
    {
      v8 = sub_23C7E98E4();
      sub_23C8313C0(v8);
      sub_23C7E6E94();
    }
    else
    {
      sub_23C85A2EC();
    }
LABEL_9:
    sub_23C7E8E84();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_23C855E88(uint64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for Row();
      *(_QWORD *)((sub_23C911130() & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
    }
    sub_23C7DB390();
  }
}

uint64_t sub_23C855EDC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  _QWORD v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_23C8DE9D8();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_23C856E08((unint64_t)v6);
  return sub_23C9116B8();
}

uint64_t sub_23C855F54(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_23C855FCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  char v111;
  uint64_t v112;
  uint64_t v113;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_129;
    if (v3)
      return (uint64_t)sub_23C857E9C(0, (char *)v3, (char *)1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_128;
  v97 = result;
  v92 = a1;
  if (v3 > 1)
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v96 = result;
    v104 = (char *)(result + 32);
LABEL_9:
    v6 = 0;
    v7 = *a1;
    v95 = *a1 + 176;
    v91 = *a1 + 80;
    v5 = MEMORY[0x24BEE4AF8];
    v98 = (char *)v3;
    while (1)
    {
      v8 = v6;
      v9 = v6 + 1;
      v101 = v6;
      if (v6 + 1 < v3)
      {
        v10 = *(_QWORD *)(v7 + 88 * v9);
        v11 = *(_QWORD *)(v7 + 88 * v6);
        v9 = v8 + 2;
        if (v8 + 2 < v3)
        {
          v12 = (uint64_t *)(v95 + 88 * v8);
          v13 = v10;
          while (1)
          {
            v15 = *v12;
            v12 += 11;
            v14 = v15;
            if (v10 < v11 == v15 >= v13)
              break;
            ++v9;
            v13 = v14;
            if (v9 >= v3)
            {
              v9 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v9 < v8)
            goto LABEL_130;
          if (v8 < v9)
          {
            v93 = v5;
            v16 = 88 * v9;
            v17 = v9;
            v18 = 88 * v8;
            do
            {
              if (v8 != --v9)
              {
                if (!v7)
                  goto LABEL_135;
                v19 = v7 + v16;
                v20 = *(_BYTE *)(v7 + v18 + 16);
                v107 = *(_OWORD *)(v7 + v18 + 24);
                v21 = *(_QWORD *)(v7 + v18 + 40);
                v105 = *(_QWORD *)(v7 + v18 + 48);
                v111 = *(_BYTE *)(v7 + v18 + 56);
                v109 = *(_QWORD *)(v7 + v18 + 80);
                v99 = *(_OWORD *)(v7 + v18);
                v102 = *(_OWORD *)(v7 + v18 + 64);
                result = (uint64_t)memmove((void *)(v7 + v18), (const void *)(v7 + v16 - 88), 0x58uLL);
                *(_OWORD *)(v19 - 88) = v99;
                *(_BYTE *)(v19 - 72) = v20;
                *(_OWORD *)(v19 - 64) = v107;
                *(_QWORD *)(v19 - 48) = v21;
                *(_QWORD *)(v19 - 40) = v105;
                *(_BYTE *)(v19 - 32) = v111;
                *(_OWORD *)(v19 - 24) = v102;
                *(_QWORD *)(v19 - 8) = v109;
              }
              ++v8;
              v16 -= 88;
              v18 += 88;
            }
            while (v8 < v9);
            v5 = v93;
            v3 = (uint64_t)v98;
            v9 = v17;
            v8 = v101;
          }
        }
      }
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v8))
          goto LABEL_127;
        if (v9 - v8 < v97)
        {
          if (__OFADD__(v8, v97))
            goto LABEL_131;
          if (v8 + v97 >= v3)
            v22 = v3;
          else
            v22 = v8 + v97;
          if (v22 < v8)
          {
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
            return result;
          }
          if (v9 != v22)
          {
            v94 = v5;
            v23 = (_QWORD *)(v91 + 88 * v9);
            v100 = v22;
            do
            {
              v112 = v9;
              v24 = *(_QWORD *)(v7 + 88 * v9);
              v103 = v23;
              v25 = v23;
              do
              {
                if (v24 >= *(v25 - 21))
                  break;
                if (!v7)
                  goto LABEL_133;
                v26 = v7;
                v108 = *(v25 - 9);
                v27 = *((_BYTE *)v25 - 64);
                v106 = *(_OWORD *)(v25 - 7);
                v29 = *(v25 - 5);
                v28 = *(v25 - 4);
                v30 = *((_BYTE *)v25 - 24);
                v31 = *v25;
                v110 = *((_OWORD *)v25 - 1);
                result = (uint64_t)memcpy(v25 - 10, v25 - 21, 0x58uLL);
                *(v25 - 11) = v31;
                v25 -= 11;
                *(v25 - 10) = v24;
                *(v25 - 9) = v108;
                *((_BYTE *)v25 - 64) = v27;
                *(_OWORD *)(v25 - 7) = v106;
                *(v25 - 5) = v29;
                *(v25 - 4) = v28;
                *((_BYTE *)v25 - 24) = v30;
                ++v8;
                *((_OWORD *)v25 - 1) = v110;
                v7 = v26;
              }
              while (v112 != v8);
              v9 = v112 + 1;
              v8 = v101;
              v23 = v103 + 11;
            }
            while (v112 + 1 != v100);
            v9 = v100;
            v5 = v94;
          }
        }
      }
      if (v9 < v8)
        goto LABEL_122;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
        v5 = result;
      }
      v33 = *(_QWORD *)(v5 + 16);
      v32 = *(_QWORD *)(v5 + 24);
      v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v32 > 1), v33 + 1, 1, (char *)v5);
        v5 = result;
      }
      *(_QWORD *)(v5 + 16) = v34;
      v35 = v5 + 32;
      v36 = (uint64_t *)(v5 + 32 + 16 * v33);
      *v36 = v101;
      v36[1] = v9;
      v113 = v9;
      if (v33)
      {
        while (1)
        {
          v37 = v34 - 1;
          if (v34 >= 4)
          {
            v42 = v35 + 16 * v34;
            v43 = *(_QWORD *)(v42 - 64);
            v44 = *(_QWORD *)(v42 - 56);
            v48 = __OFSUB__(v44, v43);
            v45 = v44 - v43;
            if (v48)
              goto LABEL_111;
            v47 = *(_QWORD *)(v42 - 48);
            v46 = *(_QWORD *)(v42 - 40);
            v48 = __OFSUB__(v46, v47);
            v40 = v46 - v47;
            v41 = v48;
            if (v48)
              goto LABEL_112;
            v49 = v34 - 2;
            v50 = (uint64_t *)(v35 + 16 * (v34 - 2));
            v52 = *v50;
            v51 = v50[1];
            v48 = __OFSUB__(v51, v52);
            v53 = v51 - v52;
            if (v48)
              goto LABEL_113;
            v48 = __OFADD__(v40, v53);
            v54 = v40 + v53;
            if (v48)
              goto LABEL_115;
            if (v54 >= v45)
            {
              v72 = (uint64_t *)(v35 + 16 * v37);
              v74 = *v72;
              v73 = v72[1];
              v48 = __OFSUB__(v73, v74);
              v75 = v73 - v74;
              if (v48)
                goto LABEL_121;
              v65 = v40 < v75;
              goto LABEL_78;
            }
          }
          else
          {
            if (v34 != 3)
            {
              v66 = *(_QWORD *)(v5 + 32);
              v67 = *(_QWORD *)(v5 + 40);
              v48 = __OFSUB__(v67, v66);
              v59 = v67 - v66;
              v60 = v48;
              goto LABEL_72;
            }
            v39 = *(_QWORD *)(v5 + 32);
            v38 = *(_QWORD *)(v5 + 40);
            v48 = __OFSUB__(v38, v39);
            v40 = v38 - v39;
            v41 = v48;
          }
          if ((v41 & 1) != 0)
            goto LABEL_114;
          v49 = v34 - 2;
          v55 = (uint64_t *)(v35 + 16 * (v34 - 2));
          v57 = *v55;
          v56 = v55[1];
          v58 = __OFSUB__(v56, v57);
          v59 = v56 - v57;
          v60 = v58;
          if (v58)
            goto LABEL_116;
          v61 = (uint64_t *)(v35 + 16 * v37);
          v63 = *v61;
          v62 = v61[1];
          v48 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          if (v48)
            goto LABEL_118;
          if (__OFADD__(v59, v64))
            goto LABEL_120;
          if (v59 + v64 >= v40)
          {
            v65 = v40 < v64;
LABEL_78:
            if (v65)
              v37 = v49;
            goto LABEL_80;
          }
LABEL_72:
          if ((v60 & 1) != 0)
            goto LABEL_117;
          v68 = (uint64_t *)(v35 + 16 * v37);
          v70 = *v68;
          v69 = v68[1];
          v48 = __OFSUB__(v69, v70);
          v71 = v69 - v70;
          if (v48)
            goto LABEL_119;
          if (v71 < v59)
            goto LABEL_89;
LABEL_80:
          v76 = v5;
          v77 = v37 - 1;
          if (v37 - 1 >= v34)
          {
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
            goto LABEL_132;
          }
          if (!v7)
            goto LABEL_134;
          v78 = (uint64_t *)(v35 + 16 * v77);
          v79 = *v78;
          v80 = (_QWORD *)(v35 + 16 * v37);
          v81 = v80[1];
          result = sub_23C85841C((char *)(v7 + 88 * *v78), (char *)(v7 + 88 * *v80), v7 + 88 * v81, v104);
          if (v1)
          {
LABEL_104:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v96 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v81 < v79)
            goto LABEL_108;
          if (v37 > *(_QWORD *)(v76 + 16))
            goto LABEL_109;
          *v78 = v79;
          *(_QWORD *)(v35 + 16 * v77 + 8) = v81;
          v82 = *(_QWORD *)(v76 + 16);
          if (v37 >= v82)
            goto LABEL_110;
          v5 = v76;
          v34 = v82 - 1;
          result = (uint64_t)memmove((void *)(v35 + 16 * v37), v80 + 2, 16 * (v82 - 1 - v37));
          *(_QWORD *)(v76 + 16) = v82 - 1;
          if (v82 <= 2)
            goto LABEL_89;
        }
      }
      v34 = 1;
LABEL_89:
      v3 = (uint64_t)v98;
      v6 = v113;
      if (v113 >= (uint64_t)v98)
        goto LABEL_92;
    }
  }
  v5 = MEMORY[0x24BEE4AF8];
  v104 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  v96 = MEMORY[0x24BEE4AF8];
  if (v3 == 1)
    goto LABEL_9;
  v34 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_92:
  if (v34 >= 2)
  {
    v83 = *v92;
    do
    {
      v84 = v34 - 2;
      if (v34 < 2)
        goto LABEL_123;
      if (!v83)
        goto LABEL_136;
      v85 = v5;
      v86 = v5 + 32;
      v87 = *(_QWORD *)(v5 + 32 + 16 * v84);
      v88 = *(_QWORD *)(v86 + 16 * (v34 - 1) + 8);
      result = sub_23C85841C((char *)(v83 + 88 * v87), (char *)(v83 + 88 * *(_QWORD *)(v86 + 16 * (v34 - 1))), v83 + 88 * v88, v104);
      if (v1)
        goto LABEL_104;
      if (v88 < v87)
        goto LABEL_124;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v85 = result;
      }
      if (v84 >= *(_QWORD *)(v85 + 16))
        goto LABEL_125;
      v89 = (_QWORD *)(v85 + 32 + 16 * v84);
      *v89 = v87;
      v89[1] = v88;
      v90 = *(_QWORD *)(v85 + 16);
      if (v34 > v90)
        goto LABEL_126;
      v5 = v85;
      result = (uint64_t)memmove((void *)(v85 + 32 + 16 * (v34 - 1)), (const void *)(v85 + 32 + 16 * v34), 16 * (v90 - v34));
      *(_QWORD *)(v85 + 16) = v90 - 1;
      v34 = v90 - 1;
    }
    while (v90 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v96 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8566EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_130;
    if (v3)
      return (uint64_t)sub_23C857FBC(0, (char *)v3, (char *)1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_129;
  v97 = result;
  v94 = a1;
  if (v3 > 1)
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v96 = result;
    v105 = (char *)(result + 32);
LABEL_10:
    v6 = 0;
    v7 = *a1;
    v95 = *a1 + 256;
    v93 = *a1 + 64;
    v8 = MEMORY[0x24BEE4AF8];
    v98 = (char *)v3;
    v112 = *a1;
    while (1)
    {
      v9 = v6++;
      v104 = v9;
      if (v6 < v3)
      {
        v10 = *(_QWORD *)(v7 + 88 * v6 + 80);
        v11 = *(_QWORD *)(v7 + 88 * v9 + 80);
        v6 = v9 + 2;
        if (v9 + 2 < v3)
        {
          v12 = (uint64_t *)(v95 + 88 * v9);
          v13 = v10;
          while (1)
          {
            v15 = *v12;
            v12 += 11;
            v14 = v15;
            if (v10 < v11 == v15 >= v13)
              break;
            ++v6;
            v13 = v14;
            if (v6 >= v3)
            {
              v6 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v6 < v9)
            goto LABEL_131;
          if (v9 < v6)
          {
            v16 = v8;
            v17 = 88 * v6;
            v18 = v9;
            v19 = v6;
            v20 = v18;
            v21 = 88 * v18;
            do
            {
              if (v20 != --v19)
              {
                if (!v7)
                  goto LABEL_136;
                v22 = v7 + v17;
                v23 = *(_BYTE *)(v7 + v21 + 16);
                v108 = *(_OWORD *)(v7 + v21 + 24);
                v24 = *(_QWORD *)(v7 + v21 + 40);
                v106 = *(_QWORD *)(v7 + v21 + 48);
                v102 = *(_BYTE *)(v7 + v21 + 56);
                v110 = *(_QWORD *)(v7 + v21 + 80);
                v99 = *(_OWORD *)(v7 + v21);
                v100 = *(_OWORD *)(v7 + v21 + 64);
                result = (uint64_t)memmove((void *)(v7 + v21), (const void *)(v7 + v17 - 88), 0x58uLL);
                v7 = v112;
                *(_OWORD *)(v22 - 88) = v99;
                *(_BYTE *)(v22 - 72) = v23;
                *(_OWORD *)(v22 - 64) = v108;
                *(_QWORD *)(v22 - 48) = v24;
                *(_QWORD *)(v22 - 40) = v106;
                *(_BYTE *)(v22 - 32) = v102;
                *(_OWORD *)(v22 - 24) = v100;
                *(_QWORD *)(v22 - 8) = v110;
              }
              ++v20;
              v17 -= 88;
              v21 += 88;
            }
            while (v20 < v19);
            v8 = v16;
            v3 = (uint64_t)v98;
            v9 = v104;
          }
        }
      }
      if (v6 < v3)
      {
        if (__OFSUB__(v6, v9))
          goto LABEL_128;
        if (v6 - v9 < v97)
        {
          if (__OFADD__(v9, v97))
            goto LABEL_132;
          if (v9 + v97 >= v3)
            v25 = v3;
          else
            v25 = v9 + v97;
          if (v25 < v9)
          {
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
            return result;
          }
          if (v6 != v25)
          {
            v101 = v8;
            v26 = v93 + 88 * v6;
            v103 = v25;
            do
            {
              v27 = *(_QWORD *)(v7 + 88 * v6 + 80);
              v28 = v9;
              v29 = v26;
              do
              {
                if (v27 >= *(_QWORD *)(v29 - 72))
                  break;
                if (!v7)
                  goto LABEL_134;
                v30 = *(_BYTE *)(v29 - 48);
                v111 = *(_OWORD *)(v29 - 40);
                v32 = *(_QWORD *)(v29 - 24);
                v31 = *(_QWORD *)(v29 - 16);
                v33 = *(_BYTE *)(v29 - 8);
                v107 = *(_OWORD *)v29;
                v109 = *(_OWORD *)(v29 - 64);
                result = (uint64_t)memcpy((void *)(v29 - 64), (const void *)(v29 - 152), 0x58uLL);
                *(_OWORD *)(v29 - 88) = v107;
                v29 -= 88;
                *(_OWORD *)(v29 - 64) = v109;
                *(_BYTE *)(v29 - 48) = v30;
                *(_OWORD *)(v29 - 40) = v111;
                *(_QWORD *)(v29 - 24) = v32;
                *(_QWORD *)(v29 - 16) = v31;
                *(_BYTE *)(v29 - 8) = v33;
                ++v28;
                *(_QWORD *)(v29 + 16) = v27;
                v7 = v112;
              }
              while (v6 != v28);
              ++v6;
              v26 += 88;
              v9 = v104;
            }
            while (v6 != v103);
            v6 = v103;
            v8 = v101;
          }
        }
      }
      if (v6 < v9)
        goto LABEL_123;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v35 = *(_QWORD *)(v8 + 16);
      v34 = *(_QWORD *)(v8 + 24);
      v36 = v35 + 1;
      v7 = v112;
      if (v35 >= v34 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
        v7 = v112;
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v36;
      v37 = v8 + 32;
      v38 = (uint64_t *)(v8 + 32 + 16 * v35);
      *v38 = v9;
      v38[1] = v6;
      if (v35)
      {
        while (1)
        {
          v39 = v36 - 1;
          if (v36 >= 4)
          {
            v44 = v37 + 16 * v36;
            v45 = *(_QWORD *)(v44 - 64);
            v46 = *(_QWORD *)(v44 - 56);
            v50 = __OFSUB__(v46, v45);
            v47 = v46 - v45;
            if (v50)
              goto LABEL_112;
            v49 = *(_QWORD *)(v44 - 48);
            v48 = *(_QWORD *)(v44 - 40);
            v50 = __OFSUB__(v48, v49);
            v42 = v48 - v49;
            v43 = v50;
            if (v50)
              goto LABEL_113;
            v51 = v36 - 2;
            v52 = (uint64_t *)(v37 + 16 * (v36 - 2));
            v54 = *v52;
            v53 = v52[1];
            v50 = __OFSUB__(v53, v54);
            v55 = v53 - v54;
            if (v50)
              goto LABEL_114;
            v50 = __OFADD__(v42, v55);
            v56 = v42 + v55;
            if (v50)
              goto LABEL_116;
            if (v56 >= v47)
            {
              v74 = (uint64_t *)(v37 + 16 * v39);
              v76 = *v74;
              v75 = v74[1];
              v50 = __OFSUB__(v75, v76);
              v77 = v75 - v76;
              if (v50)
                goto LABEL_122;
              v67 = v42 < v77;
              goto LABEL_79;
            }
          }
          else
          {
            if (v36 != 3)
            {
              v68 = *(_QWORD *)(v8 + 32);
              v69 = *(_QWORD *)(v8 + 40);
              v50 = __OFSUB__(v69, v68);
              v61 = v69 - v68;
              v62 = v50;
              goto LABEL_73;
            }
            v41 = *(_QWORD *)(v8 + 32);
            v40 = *(_QWORD *)(v8 + 40);
            v50 = __OFSUB__(v40, v41);
            v42 = v40 - v41;
            v43 = v50;
          }
          if ((v43 & 1) != 0)
            goto LABEL_115;
          v51 = v36 - 2;
          v57 = (uint64_t *)(v37 + 16 * (v36 - 2));
          v59 = *v57;
          v58 = v57[1];
          v60 = __OFSUB__(v58, v59);
          v61 = v58 - v59;
          v62 = v60;
          if (v60)
            goto LABEL_117;
          v63 = (uint64_t *)(v37 + 16 * v39);
          v65 = *v63;
          v64 = v63[1];
          v50 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v50)
            goto LABEL_119;
          if (__OFADD__(v61, v66))
            goto LABEL_121;
          if (v61 + v66 >= v42)
          {
            v67 = v42 < v66;
LABEL_79:
            if (v67)
              v39 = v51;
            goto LABEL_81;
          }
LABEL_73:
          if ((v62 & 1) != 0)
            goto LABEL_118;
          v70 = (uint64_t *)(v37 + 16 * v39);
          v72 = *v70;
          v71 = v70[1];
          v50 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v50)
            goto LABEL_120;
          if (v73 < v61)
            goto LABEL_90;
LABEL_81:
          v78 = v8;
          v79 = v39 - 1;
          if (v39 - 1 >= v36)
          {
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
            goto LABEL_133;
          }
          if (!v7)
            goto LABEL_135;
          v80 = (uint64_t *)(v37 + 16 * v79);
          v81 = *v80;
          v82 = (_QWORD *)(v37 + 16 * v39);
          v83 = v82[1];
          result = sub_23C8585D0((char *)(v7 + 88 * *v80), (char *)(v7 + 88 * *v82), v7 + 88 * v83, v105);
          if (v1)
          {
LABEL_105:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v96 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v83 < v81)
            goto LABEL_109;
          if (v39 > *(_QWORD *)(v78 + 16))
            goto LABEL_110;
          *v80 = v81;
          *(_QWORD *)(v37 + 16 * v79 + 8) = v83;
          v84 = *(_QWORD *)(v78 + 16);
          if (v39 >= v84)
            goto LABEL_111;
          v8 = v78;
          v36 = v84 - 1;
          result = (uint64_t)memmove((void *)(v37 + 16 * v39), v82 + 2, 16 * (v84 - 1 - v39));
          *(_QWORD *)(v78 + 16) = v84 - 1;
          v7 = v112;
          if (v84 <= 2)
            goto LABEL_90;
        }
      }
      v36 = 1;
LABEL_90:
      v3 = (uint64_t)v98;
      if (v6 >= (uint64_t)v98)
      {
        v5 = v96;
        goto LABEL_93;
      }
    }
  }
  v5 = MEMORY[0x24BEE4AF8];
  v105 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v96 = MEMORY[0x24BEE4AF8];
    goto LABEL_10;
  }
  v36 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v8 = MEMORY[0x24BEE4AF8];
LABEL_93:
  v96 = v5;
  if (v36 >= 2)
  {
    v85 = *v94;
    do
    {
      v86 = v36 - 2;
      if (v36 < 2)
        goto LABEL_124;
      if (!v85)
        goto LABEL_137;
      v87 = v8;
      v88 = v8 + 32;
      v89 = *(_QWORD *)(v8 + 32 + 16 * v86);
      v90 = *(_QWORD *)(v88 + 16 * (v36 - 1) + 8);
      result = sub_23C8585D0((char *)(v85 + 88 * v89), (char *)(v85 + 88 * *(_QWORD *)(v88 + 16 * (v36 - 1))), v85 + 88 * v90, v105);
      if (v1)
        goto LABEL_105;
      if (v90 < v89)
        goto LABEL_125;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v87 = result;
      }
      if (v86 >= *(_QWORD *)(v87 + 16))
        goto LABEL_126;
      v91 = (_QWORD *)(v87 + 32 + 16 * v86);
      *v91 = v89;
      v91[1] = v90;
      v92 = *(_QWORD *)(v87 + 16);
      if (v36 > v92)
        goto LABEL_127;
      v8 = v87;
      result = (uint64_t)memmove((void *)(v87 + 32 + 16 * (v36 - 1)), (const void *)(v87 + 32 + 16 * v36), 16 * (v92 - v36));
      *(_QWORD *)(v87 + 16) = v92 - 1;
      v36 = v92 - 1;
    }
    while (v92 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v96 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C856E08(unint64_t a1)
{
  uint64_t v1;
  sqlite3_int64 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v8;
  sqlite3_int64 v9;
  char *v10;
  sqlite3_int64 v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  sqlite3_int64 v16;
  sqlite3_int64 v17;
  unint64_t v18;
  uint64_t v19;
  sqlite3_int64 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  sqlite3_int64 v24;
  sqlite3_int64 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  sqlite3_int64 v32;
  sqlite3_int64 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  sqlite3_int64 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  sqlite3_int64 v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  _BYTE v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  sqlite3_int64 v100;
  uint64_t v101;
  sqlite3_int64 v102;
  unint64_t *v103;
  char *v104;
  sqlite3_int64 v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 8);
  result = sub_23C911874();
  if (result < v4)
  {
    v6 = result;
    sub_23C855E88(v4 / 2);
    v104 = v8;
    v109 = isUniquelyReferenced_nonNull_native;
    v101 = v4;
    v97 = (uint64_t *)v3;
    if (v4 <= 0)
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v3 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_115:
      if (v3 >= 2)
      {
        v85 = *v97;
        do
        {
          v86 = v3 - 2;
          if (v3 < 2)
            goto LABEL_149;
          if (!v85)
            goto LABEL_163;
          v87 = *(_QWORD *)&v10[16 * v86 + 32];
          v2 = *(_QWORD *)&v10[16 * v3 + 24];
          sub_23C858780((char *)(v85 + 8 * v87), (char *)(v85 + 8 * *(_QWORD *)&v10[16 * v3 + 16]), v85 + 8 * v2, v104);
          if (v1)
            goto LABEL_127;
          if (v2 < v87)
            goto LABEL_150;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_23C8DE978();
          if (v86 >= *((_QWORD *)v10 + 2))
            goto LABEL_151;
          v88 = &v10[16 * v86 + 32];
          *(_QWORD *)v88 = v87;
          *((_QWORD *)v88 + 1) = v2;
          v89 = *((_QWORD *)v10 + 2);
          if (v3 > v89)
            goto LABEL_152;
          memmove(&v10[16 * v3 + 16], &v10[16 * v3 + 32], 16 * (v89 - v3));
          *((_QWORD *)v10 + 2) = v89 - 1;
          v3 = v89 - 1;
        }
        while (v89 > 2);
      }
    }
    else
    {
      v98 = v6;
      v2 = 0;
      v9 = *(_QWORD *)v3;
      v96 = *(_QWORD *)v3 - 8;
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v105 = v9;
      while (1)
      {
        v11 = v2++;
        v102 = v11;
        if (v2 >= v4)
          goto LABEL_32;
        v99 = v10;
        v12 = *(_QWORD *)(v9 + 8 * v2);
        v3 = *(_QWORD *)(v9 + 8 * v11);
        v107 = v3;
        v108 = v12;
        swift_retain();
        swift_retain();
        v13 = sub_23C85026C(&v108, (uint64_t *)&v107);
        if (v1)
          break;
        v14 = v13;
        swift_release();
        isUniquelyReferenced_nonNull_native = swift_release();
        v2 = v11 + 2;
        v15 = v4;
        v16 = v11;
        v9 = v105;
        if (v11 + 2 >= v15)
          goto LABEL_20;
        do
        {
          v17 = v9 + 8 * v16;
          v18 = *(_QWORD *)(v17 + 16);
          if (*(uint64_t *)(v18 + 72) < 1)
            goto LABEL_164;
          v19 = *(_QWORD *)(v17 + 8);
          v3 = *(_QWORD *)(v18 + 64);
          if (v3)
          {
            MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
            v2 = (sqlite3_int64)v92;
            v93 = v18;
            v94 = 0;
            swift_retain();
            swift_retain();
            if (sqlite3_column_type((sqlite3_stmt *)v3, 0) == 5)
              goto LABEL_170;
            v20 = sqlite3_column_int64((sqlite3_stmt *)v3, 0);
            v2 = v20;
          }
          else
          {
            swift_retain();
            swift_retain();
            v3 = v18;
            sub_23C84BCD4();
            v2 = v20;
          }
          if (*(uint64_t *)(v19 + 72) < 1)
            goto LABEL_164;
          v3 = *(_QWORD *)(v19 + 64);
          if (v3)
          {
            MEMORY[0x24BDAC7A8](v20);
            v93 = v19;
            v94 = 0;
            if (sqlite3_column_type((sqlite3_stmt *)v3, 0) == 5)
            {
LABEL_168:
              sub_23C830FB8(v3, 0, sub_23C859F74, v92);
              goto LABEL_169;
            }
            v3 = sqlite3_column_int64((sqlite3_stmt *)v3, 0);
            swift_release();
            isUniquelyReferenced_nonNull_native = swift_release();
            v11 = v102;
          }
          else
          {
            sub_23C84BCD4();
            v3 = v21;
            swift_release();
            isUniquelyReferenced_nonNull_native = swift_release();
          }
          v9 = v105;
          if (((v14 ^ (v2 >= (uint64_t)v3)) & 1) == 0)
          {
            v2 = v16 + 2;
            if ((v14 & 1) == 0)
              goto LABEL_31;
            goto LABEL_23;
          }
          v22 = v16 + 3;
          ++v16;
        }
        while (v22 < v101);
        v2 = v101;
LABEL_20:
        if ((v14 & 1) == 0)
        {
LABEL_31:
          v4 = v101;
          v10 = v99;
          goto LABEL_32;
        }
LABEL_23:
        if (v2 < v11)
          goto LABEL_158;
        if (v11 >= v2)
          goto LABEL_31;
        v23 = (uint64_t *)(v96 + 8 * v2);
        v24 = v2;
        v25 = v11;
        v26 = (uint64_t *)(v9 + 8 * v11);
        v4 = v101;
        v10 = v99;
        do
        {
          if (v25 != --v24)
          {
            if (!v9)
              goto LABEL_162;
            v27 = *v26;
            *v26 = *v23;
            *v23 = v27;
          }
          ++v25;
          --v23;
          ++v26;
        }
        while (v25 < v24);
LABEL_32:
        if (v2 < v4)
        {
          if (__OFSUB__(v2, v11))
            goto LABEL_155;
          if (v2 - v11 < v98)
          {
            if (__OFADD__(v11, v98))
              goto LABEL_156;
            if (v11 + v98 >= v4)
              v28 = v4;
            else
              v28 = v11 + v98;
            if (v28 >= v11)
            {
              if (v2 != v28)
              {
                v99 = v10;
                v100 = v28;
                v29 = (unint64_t *)(v96 + 8 * v2);
                do
                {
                  v30 = *(_QWORD *)(v9 + 8 * v2);
                  v103 = v29;
                  do
                  {
                    if (*(uint64_t *)(v30 + 72) < 1)
                      goto LABEL_164;
                    v31 = *v29;
                    v3 = *(_QWORD *)(v30 + 64);
                    if (v3)
                    {
                      MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
                      v93 = v30;
                      v94 = 0;
                      swift_retain();
                      swift_retain();
                      if (sqlite3_column_type((sqlite3_stmt *)v3, 0) == 5)
                      {
                        v90 = v3;
                        v91 = v92;
                        goto LABEL_167;
                      }
                      v32 = sqlite3_column_int64((sqlite3_stmt *)v3, 0);
                      v33 = v32;
                    }
                    else
                    {
                      swift_retain();
                      swift_retain();
                      v3 = v30;
                      sub_23C84BCD4();
                      if (v1)
                        goto LABEL_169;
                      v33 = v32;
                    }
                    if (*(uint64_t *)(v31 + 72) < 1)
                      goto LABEL_164;
                    v3 = *(_QWORD *)(v31 + 64);
                    if (v3)
                    {
                      v106 = &v95;
                      MEMORY[0x24BDAC7A8](v32);
                      v93 = v31;
                      v94 = 0;
                      if (sqlite3_column_type((sqlite3_stmt *)v3, 0) == 5)
                        goto LABEL_168;
                      v3 = sqlite3_column_int64((sqlite3_stmt *)v3, 0);
                      swift_release();
                      isUniquelyReferenced_nonNull_native = swift_release();
                    }
                    else
                    {
                      v3 = v31;
                      sub_23C84BCD4();
                      if (v1)
                        goto LABEL_169;
                      v3 = v34;
                      swift_release();
                      isUniquelyReferenced_nonNull_native = swift_release();
                    }
                    v9 = v105;
                    if (v33 >= (uint64_t)v3)
                      break;
                    if (!v105)
                      goto LABEL_160;
                    v35 = *v29;
                    v30 = v29[1];
                    *v29 = v30;
                    v29[1] = v35;
                    --v29;
                    ++v11;
                  }
                  while (v2 != v11);
                  ++v2;
                  v11 = v102;
                  v29 = v103 + 1;
                }
                while (v2 != v100);
                v2 = v100;
                v10 = v99;
              }
              goto LABEL_60;
            }
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            LODWORD(v94) = 0;
            v93 = 825;
            sub_23C9117B4();
            __break(1u);
            while (1)
            {
LABEL_169:
              swift_unexpectedError();
              __break(1u);
LABEL_170:
              v90 = v3;
              v91 = (_BYTE *)v2;
LABEL_167:
              sub_23C830FB8(v90, 0, sub_23C859F74, v91);
            }
          }
        }
LABEL_60:
        if (v2 < v11)
          goto LABEL_153;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_23C8DE884(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
          v10 = (char *)isUniquelyReferenced_nonNull_native;
        }
        v37 = *((_QWORD *)v10 + 2);
        v36 = *((_QWORD *)v10 + 3);
        v3 = v37 + 1;
        v9 = v105;
        if (v37 >= v36 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_23C8DE884((char *)(v36 > 1), v37 + 1, 1, v10);
          v9 = v105;
          v10 = (char *)isUniquelyReferenced_nonNull_native;
        }
        *((_QWORD *)v10 + 2) = v3;
        v38 = v10 + 32;
        v39 = &v10[16 * v37 + 32];
        *(_QWORD *)v39 = v11;
        *((_QWORD *)v39 + 1) = v2;
        if (v37)
        {
          v106 = (uint64_t *)v2;
          while (1)
          {
            v40 = v3 - 1;
            if (v3 >= 4)
            {
              v45 = &v38[16 * v3];
              v46 = *((_QWORD *)v45 - 8);
              v47 = *((_QWORD *)v45 - 7);
              v51 = __OFSUB__(v47, v46);
              v48 = v47 - v46;
              if (v51)
                goto LABEL_138;
              v50 = *((_QWORD *)v45 - 6);
              v49 = *((_QWORD *)v45 - 5);
              v51 = __OFSUB__(v49, v50);
              v43 = v49 - v50;
              v44 = v51;
              if (v51)
                goto LABEL_139;
              v52 = v3 - 2;
              v53 = &v38[16 * v3 - 32];
              v55 = *(_QWORD *)v53;
              v54 = *((_QWORD *)v53 + 1);
              v51 = __OFSUB__(v54, v55);
              v56 = v54 - v55;
              if (v51)
                goto LABEL_141;
              v51 = __OFADD__(v43, v56);
              v57 = v43 + v56;
              if (v51)
                goto LABEL_144;
              if (v57 >= v48)
              {
                v75 = &v38[16 * v40];
                v77 = *(_QWORD *)v75;
                v76 = *((_QWORD *)v75 + 1);
                v51 = __OFSUB__(v76, v77);
                v78 = v76 - v77;
                if (v51)
                  goto LABEL_148;
                v68 = v43 < v78;
                goto LABEL_98;
              }
            }
            else
            {
              if (v3 != 3)
              {
                v69 = *((_QWORD *)v10 + 4);
                v70 = *((_QWORD *)v10 + 5);
                v51 = __OFSUB__(v70, v69);
                v62 = v70 - v69;
                v63 = v51;
                goto LABEL_92;
              }
              v42 = *((_QWORD *)v10 + 4);
              v41 = *((_QWORD *)v10 + 5);
              v51 = __OFSUB__(v41, v42);
              v43 = v41 - v42;
              v44 = v51;
            }
            if ((v44 & 1) != 0)
              goto LABEL_140;
            v52 = v3 - 2;
            v58 = &v38[16 * v3 - 32];
            v60 = *(_QWORD *)v58;
            v59 = *((_QWORD *)v58 + 1);
            v61 = __OFSUB__(v59, v60);
            v62 = v59 - v60;
            v63 = v61;
            if (v61)
              goto LABEL_143;
            v64 = &v38[16 * v40];
            v66 = *(_QWORD *)v64;
            v65 = *((_QWORD *)v64 + 1);
            v51 = __OFSUB__(v65, v66);
            v67 = v65 - v66;
            if (v51)
              goto LABEL_146;
            if (__OFADD__(v62, v67))
              goto LABEL_147;
            if (v62 + v67 >= v43)
            {
              v68 = v43 < v67;
LABEL_98:
              if (v68)
                v40 = v52;
              goto LABEL_100;
            }
LABEL_92:
            if ((v63 & 1) != 0)
              goto LABEL_142;
            v71 = &v38[16 * v40];
            v73 = *(_QWORD *)v71;
            v72 = *((_QWORD *)v71 + 1);
            v51 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v51)
              goto LABEL_145;
            if (v74 < v62)
              goto LABEL_109;
LABEL_100:
            v79 = v40 - 1;
            if (v40 - 1 >= v3)
            {
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
              goto LABEL_157;
            }
            if (!v9)
              goto LABEL_161;
            v3 = (unint64_t)&v38[16 * v79];
            v2 = *(_QWORD *)v3;
            v80 = v38;
            v81 = v40;
            v82 = &v38[16 * v40];
            v83 = *((_QWORD *)v82 + 1);
            sub_23C858780((char *)(v9 + 8 * *(_QWORD *)v3), (char *)(v9 + 8 * *(_QWORD *)v82), v9 + 8 * v83, v104);
            if (v1)
            {
LABEL_127:
              swift_bridgeObjectRelease();
              v4 = v101;
              goto LABEL_128;
            }
            if (v83 < v2)
              goto LABEL_135;
            if (v81 > *((_QWORD *)v10 + 2))
              goto LABEL_136;
            *(_QWORD *)v3 = v2;
            *(_QWORD *)&v80[16 * v79 + 8] = v83;
            v84 = *((_QWORD *)v10 + 2);
            if (v81 >= v84)
              goto LABEL_137;
            v3 = v84 - 1;
            isUniquelyReferenced_nonNull_native = (uint64_t)memmove(v82, v82 + 16, 16 * (v84 - 1 - v81));
            v38 = v80;
            *((_QWORD *)v10 + 2) = v84 - 1;
            v9 = v105;
            v2 = (sqlite3_int64)v106;
            if (v84 <= 2)
              goto LABEL_109;
          }
        }
        v3 = 1;
LABEL_109:
        v4 = v101;
        if (v2 >= v101)
          goto LABEL_115;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
LABEL_128:
      if (v4 >= -1)
        goto LABEL_131;
      __break(1u);
    }
    swift_bridgeObjectRelease();
    if (v101 < -1)
      goto LABEL_159;
LABEL_131:
    *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    sub_23C9110DC();
    return swift_bridgeObjectRelease();
  }
  if (v4 < 0)
    goto LABEL_154;
  if (v4)
    return sub_23C8580C8(0, v4, 1, (uint64_t *)v3);
  return result;
}

uint64_t sub_23C857818(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_127;
    if (v3)
      return sub_23C858394(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_126;
  v101 = result;
  v105 = v1;
  v98 = a1;
  if (v3 > 1)
  {
    sub_23C7E79A8(&qword_25430B640);
    v5 = sub_23C911130();
    *(_QWORD *)(v5 + 16) = v3 / 2;
    v100 = v5;
    v104 = (char *)(v5 + 32);
LABEL_10:
    v7 = 0;
    v8 = *a1;
    v99 = *a1 + 112;
    v97 = *a1 + 16;
    v9 = MEMORY[0x24BEE4AF8];
    result = 40;
    v102 = v3;
    v103 = v8;
    while (1)
    {
      v10 = v7++;
      if (v7 < v3)
      {
        v11 = *(_QWORD *)(v8 + 40 * v7 + 32);
        v12 = *(_QWORD *)(v8 + 40 * v10 + 32);
        v7 = v10 + 2;
        if (v10 + 2 < v3)
        {
          v13 = (uint64_t *)(v99 + 40 * v10);
          v14 = v11;
          while (1)
          {
            v16 = *v13;
            v13 += 5;
            v15 = v16;
            if (v11 < v12 == v16 >= v14)
              break;
            ++v7;
            v14 = v15;
            if (v7 >= v3)
            {
              v7 = v3;
              break;
            }
          }
        }
        if (v11 < v12)
        {
          if (v7 < v10)
            goto LABEL_128;
          if (v10 < v7)
          {
            v17 = 40 * v7;
            v18 = 40 * v10;
            v19 = v7;
            v20 = v10;
            do
            {
              if (v20 != --v19)
              {
                if (!v8)
                  goto LABEL_133;
                v21 = v8 + v18;
                v22 = v8 + v17;
                v23 = *(_QWORD *)(v8 + v18);
                v24 = *(_QWORD *)(v8 + v18 + 8);
                v25 = *(_QWORD *)(v8 + v18 + 32);
                v26 = *(_OWORD *)(v8 + v18 + 16);
                v27 = *(_QWORD *)(v8 + v17 - 8);
                v28 = *(_OWORD *)(v8 + v17 - 24);
                *(_OWORD *)v21 = *(_OWORD *)(v8 + v17 - 40);
                *(_OWORD *)(v21 + 16) = v28;
                *(_QWORD *)(v21 + 32) = v27;
                *(_QWORD *)(v22 - 40) = v23;
                *(_QWORD *)(v22 - 32) = v24;
                *(_OWORD *)(v22 - 24) = v26;
                *(_QWORD *)(v22 - 8) = v25;
              }
              ++v20;
              v17 -= 40;
              v18 += 40;
            }
            while (v20 < v19);
          }
        }
      }
      if (v7 < v3)
      {
        if (__OFSUB__(v7, v10))
          goto LABEL_125;
        if (v7 - v10 < v101)
        {
          v29 = v10 + v101;
          if (__OFADD__(v10, v101))
            goto LABEL_129;
          if (v29 >= v3)
            v29 = v3;
          if (v29 < v10)
          {
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v7 != v29)
          {
            v30 = v97 + 40 * v7;
            do
            {
              v31 = *(_QWORD *)(v8 + 40 * v7 + 32);
              v32 = v10;
              v33 = v30;
              do
              {
                if (v31 >= *(_QWORD *)(v33 - 24))
                  break;
                if (!v8)
                  goto LABEL_131;
                v34 = v33 - 16;
                v35 = *(_QWORD *)(v33 - 24);
                v37 = *(_OWORD *)(v33 - 56);
                v36 = *(_OWORD *)(v33 - 40);
                *(_OWORD *)(v33 - 40) = *(_OWORD *)v33;
                v33 -= 40;
                v38 = *(_QWORD *)(v33 + 24);
                v39 = *(_QWORD *)(v33 + 32);
                *(_OWORD *)v34 = v37;
                *(_OWORD *)(v34 + 16) = v36;
                *(_QWORD *)(v34 + 32) = v35;
                *(_QWORD *)(v33 - 16) = v38;
                *(_QWORD *)(v33 - 8) = v39;
                *(_QWORD *)(v33 + 16) = v31;
                ++v32;
              }
              while (v7 != v32);
              ++v7;
              v30 += 40;
            }
            while (v7 != v29);
            v7 = v29;
          }
        }
      }
      if (v7 < v10)
        goto LABEL_120;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
        v9 = result;
      }
      v41 = *(_QWORD *)(v9 + 16);
      v40 = *(_QWORD *)(v9 + 24);
      v42 = v41 + 1;
      v8 = v103;
      if (v41 >= v40 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v40 > 1), v41 + 1, 1, (char *)v9);
        v8 = v103;
        v9 = result;
      }
      *(_QWORD *)(v9 + 16) = v42;
      v43 = v9 + 32;
      v44 = (uint64_t *)(v9 + 32 + 16 * v41);
      *v44 = v10;
      v44[1] = v7;
      if (v41)
      {
        while (1)
        {
          v45 = v42 - 1;
          if (v42 >= 4)
          {
            v50 = v43 + 16 * v42;
            v51 = *(_QWORD *)(v50 - 64);
            v52 = *(_QWORD *)(v50 - 56);
            v56 = __OFSUB__(v52, v51);
            v53 = v52 - v51;
            if (v56)
              goto LABEL_109;
            v55 = *(_QWORD *)(v50 - 48);
            v54 = *(_QWORD *)(v50 - 40);
            v56 = __OFSUB__(v54, v55);
            v48 = v54 - v55;
            v49 = v56;
            if (v56)
              goto LABEL_110;
            v57 = v42 - 2;
            v58 = (uint64_t *)(v43 + 16 * (v42 - 2));
            v60 = *v58;
            v59 = v58[1];
            v56 = __OFSUB__(v59, v60);
            v61 = v59 - v60;
            if (v56)
              goto LABEL_111;
            v56 = __OFADD__(v48, v61);
            v62 = v48 + v61;
            if (v56)
              goto LABEL_113;
            if (v62 >= v53)
            {
              v80 = (uint64_t *)(v43 + 16 * v45);
              v82 = *v80;
              v81 = v80[1];
              v56 = __OFSUB__(v81, v82);
              v83 = v81 - v82;
              if (v56)
                goto LABEL_119;
              v73 = v48 < v83;
              goto LABEL_77;
            }
          }
          else
          {
            if (v42 != 3)
            {
              v74 = *(_QWORD *)(v9 + 32);
              v75 = *(_QWORD *)(v9 + 40);
              v56 = __OFSUB__(v75, v74);
              v67 = v75 - v74;
              v68 = v56;
              goto LABEL_71;
            }
            v47 = *(_QWORD *)(v9 + 32);
            v46 = *(_QWORD *)(v9 + 40);
            v56 = __OFSUB__(v46, v47);
            v48 = v46 - v47;
            v49 = v56;
          }
          if ((v49 & 1) != 0)
            goto LABEL_112;
          v57 = v42 - 2;
          v63 = (uint64_t *)(v43 + 16 * (v42 - 2));
          v65 = *v63;
          v64 = v63[1];
          v66 = __OFSUB__(v64, v65);
          v67 = v64 - v65;
          v68 = v66;
          if (v66)
            goto LABEL_114;
          v69 = (uint64_t *)(v43 + 16 * v45);
          v71 = *v69;
          v70 = v69[1];
          v56 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v56)
            goto LABEL_116;
          if (__OFADD__(v67, v72))
            goto LABEL_118;
          if (v67 + v72 >= v48)
          {
            v73 = v48 < v72;
LABEL_77:
            if (v73)
              v45 = v57;
            goto LABEL_79;
          }
LABEL_71:
          if ((v68 & 1) != 0)
            goto LABEL_115;
          v76 = (uint64_t *)(v43 + 16 * v45);
          v78 = *v76;
          v77 = v76[1];
          v56 = __OFSUB__(v77, v78);
          v79 = v77 - v78;
          if (v56)
            goto LABEL_117;
          if (v79 < v67)
            goto LABEL_88;
LABEL_79:
          v84 = v45 - 1;
          if (v45 - 1 >= v42)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (!v8)
            goto LABEL_132;
          v85 = (uint64_t *)(v43 + 16 * v84);
          v86 = *v85;
          v87 = (_QWORD *)(v43 + 16 * v45);
          v88 = v87[1];
          result = sub_23C858A90((char *)(v8 + 40 * *v85), (char *)(v8 + 40 * *v87), v8 + 40 * v88, v104);
          if (v105)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v100 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v88 < v86)
            goto LABEL_106;
          if (v45 > *(_QWORD *)(v9 + 16))
            goto LABEL_107;
          *v85 = v86;
          *(_QWORD *)(v43 + 16 * v84 + 8) = v88;
          v89 = *(_QWORD *)(v9 + 16);
          if (v45 >= v89)
            goto LABEL_108;
          v42 = v89 - 1;
          result = (uint64_t)memmove((void *)(v43 + 16 * v45), v87 + 2, 16 * (v89 - 1 - v45));
          *(_QWORD *)(v9 + 16) = v89 - 1;
          v8 = v103;
          if (v89 <= 2)
            goto LABEL_88;
        }
      }
      v42 = 1;
LABEL_88:
      v3 = v102;
      result = 40;
      if (v7 >= v102)
      {
        v6 = v100;
        goto LABEL_93;
      }
    }
  }
  v6 = MEMORY[0x24BEE4AF8];
  v104 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v100 = MEMORY[0x24BEE4AF8];
    goto LABEL_10;
  }
  v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v9 = MEMORY[0x24BEE4AF8];
LABEL_93:
  result = v9;
  v100 = v6;
  if (v42 >= 2)
  {
    v90 = *v98;
    do
    {
      v91 = v42 - 2;
      if (v42 < 2)
        goto LABEL_121;
      if (!v90)
        goto LABEL_134;
      v92 = result;
      v93 = *(_QWORD *)(result + 32 + 16 * v91);
      v94 = *(_QWORD *)(result + 32 + 16 * (v42 - 1) + 8);
      result = sub_23C858A90((char *)(v90 + 40 * v93), (char *)(v90 + 40 * *(_QWORD *)(result + 32 + 16 * (v42 - 1))), v90 + 40 * v94, v104);
      if (v105)
        goto LABEL_90;
      if (v94 < v93)
        goto LABEL_122;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v92 = result;
      }
      if (v91 >= *(_QWORD *)(v92 + 16))
        goto LABEL_123;
      v95 = (_QWORD *)(v92 + 32 + 16 * v91);
      *v95 = v93;
      v95[1] = v94;
      v96 = *(_QWORD *)(v92 + 16);
      if (v42 > v96)
        goto LABEL_124;
      memmove((void *)(v92 + 32 + 16 * (v42 - 1)), (const void *)(v92 + 32 + 16 * v42), 16 * (v96 - v42));
      result = v92;
      *(_QWORD *)(v92 + 16) = v96 - 1;
      v42 = v96 - 1;
    }
    while (v96 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v100 + 16) = 0;
  return swift_bridgeObjectRelease();
}

char *sub_23C857E9C(char *result, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v14 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v16 = *a4;
    v5 = (_QWORD *)(*a4 + 88 * (_QWORD)a3 + 80);
    while (2)
    {
      v6 = *(_QWORD *)(v16 + 88 * (_QWORD)v4);
      v7 = v14;
      v15 = v5;
      do
      {
        if (v6 >= *(v5 - 21))
          break;
        if (!v16)
        {
          __break(1u);
          return result;
        }
        v8 = *(v5 - 9);
        v9 = *((_BYTE *)v5 - 64);
        v17 = *(_OWORD *)(v5 - 7);
        v10 = *(v5 - 5);
        v19 = *(v5 - 4);
        v11 = *((_BYTE *)v5 - 24);
        v12 = *v5;
        v18 = *((_OWORD *)v5 - 1);
        result = (char *)memcpy(v5 - 10, v5 - 21, 0x58uLL);
        *(v5 - 11) = v12;
        v5 -= 11;
        *(v5 - 10) = v6;
        *(v5 - 9) = v8;
        *((_BYTE *)v5 - 64) = v9;
        *(_OWORD *)(v5 - 7) = v17;
        *(v5 - 5) = v10;
        *(v5 - 4) = v19;
        *((_BYTE *)v5 - 24) = v11;
        ++v7;
        *((_OWORD *)v5 - 1) = v18;
      }
      while (v4 != v7);
      ++v4;
      v5 = v15 + 11;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

char *sub_23C857FBC(char *result, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v14 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 88 * (_QWORD)a3 + 64;
    while (2)
    {
      v7 = *(_QWORD *)(v5 + 88 * (_QWORD)v4 + 80);
      v8 = v14;
      v18 = v6;
      do
      {
        if (v7 >= *(_QWORD *)(v6 - 72))
          break;
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v9 = *(_BYTE *)(v6 - 48);
        v11 = *(_QWORD *)(v6 - 24);
        v10 = *(_QWORD *)(v6 - 16);
        v12 = *(_BYTE *)(v6 - 8);
        v16 = *(_OWORD *)(v6 - 64);
        v17 = *(_OWORD *)(v6 - 40);
        v15 = *(_OWORD *)v6;
        result = (char *)memcpy((void *)(v6 - 64), (const void *)(v6 - 152), 0x58uLL);
        *(_OWORD *)(v6 - 88) = v15;
        v6 -= 88;
        *(_OWORD *)(v6 - 64) = v16;
        *(_BYTE *)(v6 - 48) = v9;
        *(_OWORD *)(v6 - 40) = v17;
        *(_QWORD *)(v6 - 24) = v11;
        *(_QWORD *)(v6 - 16) = v10;
        *(_BYTE *)(v6 - 8) = v12;
        ++v8;
        *(_QWORD *)(v6 + 16) = v7;
      }
      while (v4 != v8);
      ++v4;
      v6 = v18 + 88;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C8580C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  sqlite3_int64 v11;
  sqlite3_int64 v12;
  sqlite3_int64 v13;
  sqlite3_int64 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;

  v19 = a2;
  v20 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v22 = *a4;
    v6 = (uint64_t *)(v22 + 8 * a3 - 8);
    while (2)
    {
      v7 = *(_QWORD *)(v22 + 8 * v5);
      v8 = v20;
      v21 = v6;
      do
      {
        if (*(uint64_t *)(v7 + 72) < 1)
          goto LABEL_22;
        v9 = *v6;
        v10 = *(sqlite3_stmt **)(v7 + 64);
        if (v10)
        {
          MEMORY[0x24BDAC7A8](result);
          v17 = v7;
          v18 = 0;
          swift_retain();
          swift_retain();
          if (sqlite3_column_type(v10, 0) == 5)
            goto LABEL_24;
          v11 = sqlite3_column_int64(v10, 0);
          v12 = v11;
        }
        else
        {
          swift_retain();
          swift_retain();
          sub_23C84BCD4();
          if (v4)
            goto LABEL_25;
          v12 = v11;
        }
        if (*(uint64_t *)(v9 + 72) < 1)
          goto LABEL_22;
        v10 = *(sqlite3_stmt **)(v9 + 64);
        if (v10)
        {
          v23 = &v19;
          MEMORY[0x24BDAC7A8](v11);
          v17 = v9;
          v18 = 0;
          if (sqlite3_column_type(v10, 0) == 5)
          {
LABEL_24:
            sub_23C830FB8(v10, 0, sub_23C859F74, &v16);
            goto LABEL_25;
          }
          v13 = sqlite3_column_int64(v10, 0);
          swift_release();
          result = swift_release();
        }
        else
        {
          sub_23C84BCD4();
          if (v4)
            goto LABEL_25;
          v13 = v14;
          swift_release();
          result = swift_release();
        }
        if (v12 >= v13)
          break;
        if (!v22)
        {
          __break(1u);
LABEL_22:
          LODWORD(v18) = 0;
          v17 = 825;
          sub_23C9117B4();
          __break(1u);
LABEL_25:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        v15 = *v6;
        v7 = v6[1];
        *v6 = v7;
        v6[1] = v15;
        --v6;
        ++v8;
      }
      while (v5 != v8);
      ++v5;
      v6 = v21 + 1;
      if (v5 != v19)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C858394(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 40 * a3 + 16;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 40 * a3 + 32);
      v7 = result;
      v8 = v5;
      do
      {
        if (v6 >= *(_QWORD *)(v8 - 24))
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = v8 - 16;
        v10 = *(_QWORD *)(v8 - 24);
        v12 = *(_OWORD *)(v8 - 56);
        v11 = *(_OWORD *)(v8 - 40);
        *(_OWORD *)(v8 - 40) = *(_OWORD *)v8;
        v8 -= 40;
        v13 = *(_QWORD *)(v8 + 24);
        v14 = *(_QWORD *)(v8 + 32);
        *(_OWORD *)v9 = v12;
        *(_OWORD *)(v9 + 16) = v11;
        *(_QWORD *)(v9 + 32) = v10;
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        *(_QWORD *)(v8 + 16) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 40;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C85841C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  BOOL v20;
  uint64_t v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 88;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 88;
  if (v9 >= v11)
  {
    sub_23C8F9108(a2, (uint64_t)(a3 - (_QWORD)a2) / 88, a4);
    v12 = &v4[88 * v11];
    if (v7 >= v6 || v10 < 88)
      goto LABEL_35;
    v16 = (char *)(a3 - 88);
    while (1)
    {
      v17 = v16 + 88;
      v18 = v6 - 88;
      if (*((_QWORD *)v12 - 11) >= *((_QWORD *)v6 - 11))
      {
        v20 = v17 != v12 || v16 >= v12;
        v18 = v12 - 88;
        v12 -= 88;
        if (!v20)
          goto LABEL_31;
      }
      else
      {
        v19 = v17 != v6 || v16 >= v6;
        v6 -= 88;
        if (!v19)
          goto LABEL_31;
      }
      memmove(v16, v18, 0x58uLL);
LABEL_31:
      v16 -= 88;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_35;
    }
  }
  sub_23C8F9108(a1, (a2 - a1) / 88, a4);
  v12 = &v4[88 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 88)
  {
    while (*(_QWORD *)v6 >= *(_QWORD *)v4)
    {
      v13 = v4;
      v14 = v7 == v4;
      v4 += 88;
      if (!v14)
        goto LABEL_9;
LABEL_10:
      v7 += 88;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v6;
    v14 = v7 == v6;
    v6 += 88;
    if (v14)
      goto LABEL_10;
LABEL_9:
    memmove(v7, v13, 0x58uLL);
    goto LABEL_10;
  }
LABEL_15:
  v6 = v7;
LABEL_35:
  v22 = (v12 - v4) / 88;
  if (v6 != v4 || v6 >= &v4[88 * v22])
    memmove(v6, v4, 88 * v22);
  return 1;
}

uint64_t sub_23C8585D0(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 88;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 88;
  if (v9 >= v11)
  {
    sub_23C8F9108(a2, (uint64_t)(a3 - (_QWORD)a2) / 88, a4);
    v12 = &v4[88 * v11];
    if (v7 >= v6 || v10 < 88)
      goto LABEL_41;
    v18 = (char *)(a3 - 88);
    while (1)
    {
      v19 = v18 + 88;
      if (*((_QWORD *)v12 - 1) >= *((_QWORD *)v6 - 1))
      {
        v20 = v12 - 88;
        v22 = v19 != v12 || v18 >= v12;
        v12 -= 88;
        if (!v22)
          goto LABEL_37;
      }
      else
      {
        v20 = v6 - 88;
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 88;
        if (!v21)
          goto LABEL_37;
      }
      memmove(v18, v20, 0x58uLL);
LABEL_37:
      v18 -= 88;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_41;
    }
  }
  sub_23C8F9108(a1, (a2 - a1) / 88, a4);
  v12 = &v4[88 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 88)
  {
    do
    {
      if (*((_QWORD *)v6 + 10) >= *((_QWORD *)v4 + 10))
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 88;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 88;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      memmove(v7, v14, 0x58uLL);
LABEL_16:
      v7 += 88;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  v24 = (v12 - v4) / 88;
  if (v6 != v4 || v6 >= &v4[88 * v24])
    memmove(v6, v4, 88 * v24);
  return 1;
}

uint64_t sub_23C858780(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v19;
  uint64_t *v20;
  char v21;
  char v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  char v30;
  uint64_t *v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  size_t v36;
  uint64_t v38;
  BOOL v39;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v7 = (uint64_t *)a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_23C902418(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v16 = (uint64_t *)a2;
    v42 = (uint64_t *)a4;
    v19 = &a4[8 * v11];
    if (v7 >= (uint64_t *)a2 || v10 < 8)
    {
      v15 = (uint64_t *)a4;
      goto LABEL_38;
    }
    v25 = (uint64_t *)(a3 - 8);
    v15 = v42;
    v41 = v7;
    while (1)
    {
      v26 = (unint64_t)v19;
      v27 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      v44 = v27;
      v7 = v16;
      v28 = v16 - 1;
      v43 = *(v16 - 1);
      swift_retain();
      swift_retain();
      v29 = sub_23C85026C(&v44, &v43);
      if (v4)
      {
        swift_release();
        swift_release();
        v38 = (uint64_t)(v26 - (_QWORD)v15) / 8;
        if (v7 < v15 || v7 >= &v15[v38])
        {
          memmove(v7, v15, 8 * v38);
          return 1;
        }
        if (v7 == v15)
          return 1;
LABEL_59:
        v36 = 8 * v38;
        v16 = v7;
LABEL_44:
        memmove(v16, v15, v36);
        return 1;
      }
      v30 = v29;
      v31 = v25 + 1;
      swift_release();
      swift_release();
      if ((v30 & 1) != 0)
      {
        v32 = v31 != v7 || v25 >= v7;
        v16 = v28;
        v19 = (char *)v26;
        if (!v32)
          goto LABEL_36;
      }
      else
      {
        v33 = v31 != (uint64_t *)v26 || (unint64_t)v25 >= v26;
        v28 = (uint64_t *)v19;
        v16 = v7;
        if (!v33)
          goto LABEL_36;
      }
      *v25 = *v28;
LABEL_36:
      v15 = v42;
      if (v16 > v41)
      {
        --v25;
        if (v19 > (char *)v42)
          continue;
      }
      goto LABEL_38;
    }
  }
  sub_23C902418(a1, (a2 - a1) / 8, a4);
  v13 = (uint64_t *)a2;
  v14 = (unint64_t)a2 >= a3 || v8 < 8;
  v15 = (uint64_t *)a4;
  if (v14)
  {
    v16 = v7;
    v19 = &a4[8 * v9];
LABEL_38:
    v34 = (v19 - (char *)v15) / 8;
    v35 = v16 < v15 || v16 >= &v15[v34];
    if (!v35 && v16 == v15)
      return 1;
    v36 = 8 * v34;
    goto LABEL_44;
  }
  v19 = &a4[8 * v9];
  while (1)
  {
    v20 = v13;
    v44 = *v13;
    v43 = *v15;
    swift_retain();
    swift_retain();
    v21 = sub_23C85026C(&v44, &v43);
    if (v4)
      break;
    v22 = v21;
    swift_release();
    swift_release();
    if ((v22 & 1) == 0)
    {
      v23 = v15;
      v24 = v7 == v15++;
      v13 = v20;
      if (v24)
        goto LABEL_20;
LABEL_19:
      *v7 = *v23;
      goto LABEL_20;
    }
    v23 = v20;
    v13 = v20 + 1;
    if (v7 != v20)
      goto LABEL_19;
LABEL_20:
    ++v7;
    if (v15 >= (uint64_t *)v19 || (unint64_t)v13 >= a3)
    {
      v16 = v7;
      goto LABEL_38;
    }
  }
  swift_release();
  swift_release();
  v38 = (v19 - (char *)v15) / 8;
  v39 = v7 < v15 || v7 >= &v15[v38];
  if (v39 || v7 != v15)
    goto LABEL_59;
  return 1;
}

uint64_t sub_23C858A90(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  __int128 v18;
  unint64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  if (v9 >= v11)
  {
    sub_23C8F9150(a2, (uint64_t)(a3 - (_QWORD)a2) / 40, a4);
    v12 = &v4[40 * v11];
    if (v7 >= v6 || v10 < 40)
      goto LABEL_41;
    v20 = a3 - 40;
    while (1)
    {
      v21 = (char *)(v20 + 40);
      if (*((_QWORD *)v12 - 1) >= *((_QWORD *)v6 - 1))
      {
        v22 = v12 - 40;
        v24 = v21 != v12 || v20 >= (unint64_t)v12;
        v12 -= 40;
        if (!v24)
          goto LABEL_37;
      }
      else
      {
        v22 = v6 - 40;
        v23 = v21 != v6 || v20 >= (unint64_t)v6;
        v6 -= 40;
        if (!v23)
          goto LABEL_37;
      }
      v25 = *(_OWORD *)v22;
      v26 = *((_OWORD *)v22 + 1);
      *(_QWORD *)(v20 + 32) = *((_QWORD *)v22 + 4);
      *(_OWORD *)v20 = v25;
      *(_OWORD *)(v20 + 16) = v26;
LABEL_37:
      v20 -= 40;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_41;
    }
  }
  sub_23C8F9150(a1, (a2 - a1) / 40, a4);
  v12 = &v4[40 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    do
    {
      if (*((_QWORD *)v6 + 4) >= *((_QWORD *)v4 + 4))
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 40;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 40;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      v17 = *(_OWORD *)v14;
      v18 = *((_OWORD *)v14 + 1);
      *((_QWORD *)v7 + 4) = *((_QWORD *)v14 + 4);
      *(_OWORD *)v7 = v17;
      *((_OWORD *)v7 + 1) = v18;
LABEL_16:
      v7 += 40;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  v28 = (v12 - v4) / 40;
  if (v6 != v4 || v6 >= &v4[40 * v28])
    memmove(v6, v4, 40 * v28);
  return 1;
}

uint64_t sub_23C858C48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  swift_isUniquelyReferenced_nonNull_native();
  v6 = *v2;
  *v2 = 0x8000000000000000;
  sub_23C83AB94(a1, a2);
  *v2 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C858CC4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C858CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C858D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for ColumnInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ColumnInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColumnInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

void *initializeWithTake for ColumnInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for ColumnInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ColumnInfo()
{
  sub_23C7DFB90();
}

uint64_t destroy for IndexInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IndexInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IndexInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for IndexInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for IndexInfo()
{
  sub_23C7DFB90();
}

uint64_t destroy for ForeignKeyViolation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForeignKeyViolation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForeignKeyViolation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ForeignKeyViolation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForeignKeyViolation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForeignKeyViolation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ForeignKeyViolation()
{
  sub_23C7DFB90();
}

void type metadata accessor for PrimaryKeyInfo()
{
  sub_23C7DFB90();
}

uint64_t destroy for ForeignKeyInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForeignKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ForeignKeyInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ForeignKeyInfo(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForeignKeyInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForeignKeyInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ForeignKeyInfo()
{
  sub_23C7DFB90();
}

uint64_t destroy for PrimaryKeyInfo.Impl(uint64_t a1)
{
  return sub_23C7F9150(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void _s12GRDBInternal14PrimaryKeyInfoV4ImplOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_23C859FB8(a1, a2);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  *(_BYTE *)(v2 + 16) = v5;
  sub_23C7DB3A0();
}

void _s12GRDBInternal14PrimaryKeyInfoV4ImplOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  sub_23C859FB8(a1, a2);
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)v2 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  v8 = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v2 + 16) = v5;
  sub_23C7F9150(v6, v7, v8);
  sub_23C7DB3A0();
}

void _s12GRDBInternal14PrimaryKeyInfoV4ImplOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C7F9150(v4, v5, v6);
  sub_23C7DB390();
}

ValueMetadata *type metadata accessor for PrimaryKeyInfo.Impl()
{
  return &type metadata for PrimaryKeyInfo.Impl;
}

unint64_t sub_23C8595F4(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_23C85960C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  sub_23C7DB390();
}

_QWORD *sub_23C859650(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C8596F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C859750(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t sub_23C8597A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

_QWORD *sub_23C859800(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void _s16SchemaIdentifierOMa()
{
  sub_23C7DFB90();
}

unint64_t sub_23C859830()
{
  unint64_t result;

  result = qword_25430DAD0;
  if (!qword_25430DAD0)
  {
    result = MEMORY[0x242626100](&unk_23C915B74, &unk_250D87620);
    atomic_store(result, (unint64_t *)&qword_25430DAD0);
  }
  return result;
}

void sub_23C85986C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_23C7DEFE8();
  v2 = sub_23C7DD180((uint64_t)v1);
  sub_23C8598CC(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  sub_23C7DB3A0();
}

void sub_23C85989C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_23C7DEFE8();
  v2 = sub_23C7DD180((uint64_t)v1);
  sub_23C85990C(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  sub_23C7DB3A0();
}

void sub_23C8598CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_23C7EE13C(a1, a2);
  sub_23C8E61E8(v4);
  if (v3)
    sub_23C85A0E4();
  *v2 = sub_23C7EBC3C();
  sub_23C7DB3A0();
}

void sub_23C85990C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = sub_23C7EE13C(a1, a2);
  sub_23C8E61E8(v4);
  if (v3)
    sub_23C85A0E4();
  *v2 = sub_23C7EBC3C();
  sub_23C7DB3A0();
}

uint64_t sub_23C85994C()
{
  return swift_release();
}

unint64_t sub_23C859954()
{
  unint64_t result;

  result = qword_256BCCA98;
  if (!qword_256BCCA98)
  {
    result = MEMORY[0x242626100](&unk_23C915DB8, &type metadata for SchemaInfo.SchemaObject);
    atomic_store(result, (unint64_t *)&qword_256BCCA98);
  }
  return result;
}

uint64_t sub_23C859990()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32) >= 2uLL)
    swift_release();
  return swift_deallocObject();
}

unint64_t sub_23C8599D0()
{
  unint64_t result;

  result = qword_25430D478;
  if (!qword_25430D478)
  {
    result = MEMORY[0x242626100](&unk_23C915D68, &type metadata for SchemaInfo.SchemaObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25430D478);
  }
  return result;
}

uint64_t sub_23C859A0C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C859A40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C859A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_23C851B94(a1, a2, a3, a4, a5);
}

uint64_t sub_23C859A7C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C859AAC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_23C7F8E30(a1, a2, a3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaInfo.SchemaObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaInfo.SchemaObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C859B94 + 4 * byte_23C915A6D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C859BC8 + 4 * byte_23C915A68[v4]))();
}

uint64_t sub_23C859BC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C859BD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C859BD8);
  return result;
}

uint64_t sub_23C859BE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C859BECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C859BF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C859BF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SchemaInfo.SchemaObject.CodingKeys()
{
  return &type metadata for SchemaInfo.SchemaObject.CodingKeys;
}

uint64_t destroy for SchemaInfo.SchemaObject()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SchemaInfo.SchemaObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SchemaInfo.SchemaObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SchemaInfo.SchemaObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaInfo.SchemaObject(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaInfo.SchemaObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaInfo.SchemaObject()
{
  return &type metadata for SchemaInfo.SchemaObject;
}

void type metadata accessor for SchemaInfo()
{
  sub_23C7DFB90();
}

unint64_t sub_23C859E70()
{
  unint64_t result;

  result = qword_256BCCAA0;
  if (!qword_256BCCAA0)
  {
    result = MEMORY[0x242626100](&unk_23C915D40, &type metadata for SchemaInfo.SchemaObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256BCCAA0);
  }
  return result;
}

unint64_t sub_23C859EB0()
{
  unint64_t result;

  result = qword_25430D488;
  if (!qword_25430D488)
  {
    result = MEMORY[0x242626100](&unk_23C915CB0, &type metadata for SchemaInfo.SchemaObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25430D488);
  }
  return result;
}

unint64_t sub_23C859EF0()
{
  unint64_t result;

  result = qword_25430D480;
  if (!qword_25430D480)
  {
    result = MEMORY[0x242626100](&unk_23C915CD8, &type metadata for SchemaInfo.SchemaObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25430D480);
  }
  return result;
}

unint64_t sub_23C859F30()
{
  unint64_t result;

  result = qword_25430D490;
  if (!qword_25430D490)
  {
    result = MEMORY[0x242626100](&unk_23C915C28, &type metadata for SchemaInfo.SchemaObject);
    atomic_store(result, (unint64_t *)&qword_25430D490);
  }
  return result;
}

uint64_t sub_23C859FAC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C8ADDE0(v1, v0);
}

uint64_t sub_23C859FB8(uint64_t a1, uint64_t a2)
{
  return sub_23C7F8E30(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

void sub_23C859FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v16;
  uint64_t v17;

  sub_23C7F9150(a15, a12, a16);
  Database.indexes(on:)(v16, v17);
}

void sub_23C859FFC()
{
  sub_23C7E649C();
}

void sub_23C85A04C()
{
  sub_23C8FA41C();
}

uint64_t sub_23C85A060()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C85A068()
{
  return sub_23C910F5C();
}

void sub_23C85A07C()
{
  sub_23C7E649C();
}

_QWORD *sub_23C85A090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  return Database.primaryKey(_:)((uint64_t *)va, v9);
}

double sub_23C85A0A4(uint64_t a1, uint64_t a2)
{
  return sub_23C839E44(a2);
}

uint64_t sub_23C85A0B8()
{
  uint64_t v0;

  return sub_23C7E76BC(v0);
}

uint64_t sub_23C85A0C4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C84E458(v1, v0);
}

void sub_23C85A0E4()
{
  JUMPOUT(0x242625290);
}

uint64_t sub_23C85A0F0()
{
  return swift_unexpectedError();
}

uint64_t sub_23C85A104()
{
  return sub_23C910DAC();
}

uint64_t sub_23C85A134()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C83B474(v1, v0);
}

double sub_23C85A140()
{
  return 0.0;
}

uint64_t sub_23C85A150()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C85A158()
{
  return sub_23C910F5C();
}

uint64_t sub_23C85A168()
{
  return sub_23C910F5C();
}

void sub_23C85A194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = v3;
  v5 = v4 + 16 * v0;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
}

uint64_t sub_23C85A1AC()
{
  return sub_23C910F5C();
}

void sub_23C85A1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v0;
  v5 = v2 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v3;
}

void sub_23C85A1E4(uint64_t a1)
{
  uint64_t v1;

  sub_23C866918(v1, a1);
}

uint64_t sub_23C85A1F4()
{
  uint64_t v0;

  return v0;
}

void sub_23C85A200(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23C7E7900(v2, a2);
}

uint64_t sub_23C85A258()
{
  return swift_release();
}

uint64_t sub_23C85A264(uint64_t a1)
{
  uint64_t v1;

  return sub_23C7F9150(a1, v1, 0);
}

uint64_t sub_23C85A270()
{
  return swift_endAccess();
}

uint64_t sub_23C85A278()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C85A284(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x5F000000000000;
}

uint64_t sub_23C85A298()
{
  return sub_23C911BC8();
}

uint64_t sub_23C85A2A0()
{
  return swift_release();
}

uint64_t sub_23C85A2C0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C84E458(v0, v1);
}

__n128 sub_23C85A2CC(__n128 *a1)
{
  return a1[2];
}

uint64_t sub_23C85A2E0()
{
  return sub_23C910F5C();
}

double sub_23C85A2EC()
{
  int v0;
  sqlite3_stmt *v1;

  return sqlite3_column_double(v1, v0);
}

uint64_t sub_23C85A30C()
{
  return swift_release();
}

void sub_23C85A318(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_23C85A334()
{
  int v0;
  sqlite3_stmt *v1;

  return sqlite3_column_type(v1, v0);
}

unint64_t sub_23C85A340()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C822514(v1, v0);
}

uint64_t sub_23C85A34C()
{
  uint64_t v0;

  return sub_23C7E13C4(v0);
}

uint64_t sub_23C85A358()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_23C85A364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7900(a1 + 40, &qword_256BCBDD0);
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 112);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v9;
      *(_QWORD *)(a1 + 120) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7900(a1 + 112, &qword_256BCBDD8);
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_15:
  v12 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v12;
      *(_QWORD *)(a1 + 136) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_22;
  }
  if (!v12)
  {
    sub_23C7E7900(a1 + 128, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  v15 = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v15;
  return a1;
}

uint64_t sub_23C85A598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7900(a1 + 40, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a1 + 112);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  if (v8)
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v7;
      *(_QWORD *)(a1 + 120) = v9;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7900(a1 + 112, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_11:
  v10 = *(_QWORD *)(a2 + 128);
  if (!*(_QWORD *)(a1 + 128))
  {
LABEL_15:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_16;
  }
  if (!v10)
  {
    sub_23C7E7900(a1 + 128, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v11;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

void type metadata accessor for SQLRelation()
{
  sub_23C7DFB90();
}

void sub_23C85A73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE __dst[224];
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FD3B0();
    if (*(_QWORD *)(a3 + 16))
    {
      v6 = v12;
      v7 = a1 + 40;
      while (1)
      {
        swift_bridgeObjectRetain();
        v8 = sub_23C7E94B8();
        if ((v9 & 1) == 0)
          break;
        memcpy(__dst, (const void *)(*(_QWORD *)(a3 + 56) + 216 * v8), 0xD2uLL);
        sub_23C813864((uint64_t)__dst);
        swift_bridgeObjectRelease();
        v12 = v6;
        v10 = *(_QWORD *)(v6 + 16);
        if (v10 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_23C7FD3B0();
          v6 = v12;
        }
        *(_QWORD *)(v6 + 16) = v10 + 1;
        memcpy((void *)(v6 + 216 * v10 + 32), __dst, 0xD2uLL);
        if (!--v4)
          goto LABEL_10;
        v7 += 16;
        if (!*(_QWORD *)(a3 + 16))
          goto LABEL_12;
      }
      __break(1u);
    }
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23C85A898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v15[168];
  _BYTE __dst[168];
  _QWORD v17[21];
  _BYTE __src[168];
  _QWORD v19[21];
  _BYTE v20[168];
  _BYTE v21[168];
  uint64_t v22;
  _BYTE v23[176];
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v24 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v7 = v24;
    v8 = (uint64_t *)(a1 + 56);
    for (i = v5 - 1; ; --i)
    {
      v10 = *(v8 - 3);
      v11 = *(v8 - 2);
      v12 = *v8;
      v17[0] = *(v8 - 1);
      v17[1] = v12;
      v17[2] = a2;
      sub_23C813794((uint64_t)v17);
      sub_23C800B48(v17, __src);
      v19[0] = v10;
      v19[1] = v11;
      v19[2] = a3;
      sub_23C813794((uint64_t)v19);
      sub_23C800B48(v19, v20);
      sub_23C800B48(v17, v21);
      sub_23C800B48(v19, &v22);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      sub_23C838EE8((uint64_t)v21);
      memcpy(__dst, __src, 0xA3uLL);
      memcpy(v15, v20, 0xA3uLL);
      sub_23C86F20C(0, __dst, v15, v23);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      v24 = v7;
      v13 = *(_QWORD *)(v7 + 16);
      if (v13 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7FD468();
        v7 = v24;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      memcpy((void *)(v7 + 168 * v13 + 32), v23, 0xA3uLL);
      if (!i)
        break;
      v8 += 4;
    }
    swift_release();
  }
  else
  {
    swift_release();
    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_release();
  return v7;
}

uint64_t sub_23C85AAC4(uint64_t a1)
{
  char *v2;
  _BYTE __dst[168];
  _BYTE v5[176];
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = MEMORY[0x24BEE4AF8];
    sub_23C7FDA0C();
    memcpy(__dst, (const void *)(a1 + 32), 0xA3uLL);
    sub_23C8634F8(__dst, v5);
    v2 = (char *)&loc_23C85AB6C + 4 * byte_23C915E00[sub_23C863534((uint64_t)v5)];
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

void sub_23C85ACD4()
{
  uint64_t v0;

  sub_23C86361C(v0 - 256);
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C85AD28(uint64_t a1)
{
  char *v2;
  _BYTE __dst[168];
  _BYTE v5[176];
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = MEMORY[0x24BEE4AF8];
    sub_23C7FDA0C();
    memcpy(__dst, (const void *)(a1 + 32), 0xA3uLL);
    sub_23C8634F8(__dst, v5);
    v2 = (char *)&loc_23C85ADDC + 4 * byte_23C915E06[sub_23C863534((uint64_t)v5)];
    __asm { BR              X9 }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

void sub_23C85B0E4()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void *v15;
  uint64_t v16;
  void (*v17)(uint64_t *@<X8>);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[8];
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  char v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t *@<X8>);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  char v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t *@<X8>);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char v137;
  char v138;
  _QWORD v139[8];
  char v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  char v151;
  char v152;
  char v153[168];
  _BYTE v154[168];
  _BYTE __src[168];
  _BYTE v156[216];
  _OWORD __dst[14];
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  char v162[168];
  uint64_t v163;
  char v164;
  char v165;
  char v166;

  sub_23C7DEF5C();
  v3 = v0;
  v4 = v2;
  if (*((_QWORD *)v0 + 14))
    goto LABEL_4;
  if (*((_BYTE *)v0 + 161) != 1)
    goto LABEL_4;
  v5 = *((_QWORD *)v0 + 9);
  if (*(_QWORD *)(v5 + 16))
    goto LABEL_4;
  v80 = *((_QWORD *)v0 + 15);
  v81 = v0[9];
  v7 = *((_BYTE *)v0 + 160);
  v8 = *((_QWORD *)v0 + 11);
  v82 = *((_QWORD *)v3 + 10);
  v83 = v5;
  v9 = *((_QWORD *)v3 + 12);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v164 = v7;
    v84 = v2;
    sub_23C8652D4();
    sub_23C8652D4();
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_14:
      __break(1u);
LABEL_15:
      sub_23C7DE9B0();
      sub_23C7DE9B0();
      v6 = v84;
      goto LABEL_5;
    }
    v11 = (uint64_t *)(v8 + 40);
    while (1)
    {
      v13 = *(v11 - 1);
      v12 = *v11;
      sub_23C8652D4();
      sub_23C7E94B8();
      if ((v14 & 1) == 0)
        break;
      sub_23C86559C();
      sub_23C7E58D4(v156, v15);
      sub_23C813864((uint64_t)v156);
      sub_23C7E087C();
      *(_QWORD *)&__dst[0] = v13;
      *((_QWORD *)&__dst[0] + 1) = v12;
      sub_23C7E58D4(&__dst[1], v156);
      swift_bridgeObjectRetain();
      sub_23C813864((uint64_t)v156);
      sub_23C81394C((uint64_t)__dst);
      sub_23C82CABC((uint64_t)__dst);
      sub_23C7E087C();
      sub_23C813A5C((uint64_t)v156);
      sub_23C81394C((uint64_t)__dst);
      if (v156[0] < 2u)
        goto LABEL_15;
      if (!--v10)
      {
        sub_23C7DE9B0();
        sub_23C7DE9B0();
        v4 = v84;
        v7 = v164;
        goto LABEL_17;
      }
      v11 += 2;
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_14;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_17:
  v17 = (void (*)(uint64_t *@<X8>))*((_QWORD *)v3 + 3);
  v16 = *((_QWORD *)v3 + 4);
  ((void (*)(_OWORD *__return_ptr, uint64_t))v17)(__dst, v4);
  if (v1)
    goto LABEL_6;
  v18 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 16);
  if (v18 == 1)
  {
    memcpy(__dst, (const void *)(*(_QWORD *)&__dst[0] + 32), 0xB8uLL);
    sub_23C8010AC(__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C7FD6D4);
    sub_23C7DE934();
    memcpy(v156, __dst, 0xB8uLL);
    sub_23C809D20();
    sub_23C8010AC(__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C800D94);
    sub_23C86539C((uint64_t)v153, (uint64_t)v154);
    sub_23C86539C((uint64_t)v154, (uint64_t)__src);
    if (sub_23C800FF8((uint64_t)__src) != 1)
    {
      v158 = *((_QWORD *)v3 + 7);
      v159 = *((_BYTE *)v3 + 64);
      v70 = *((_QWORD *)v3 + 16);
      v67 = *((_QWORD *)v3 + 17);
      v19 = *((_QWORD *)v3 + 5);
      v85 = *((_QWORD *)v3 + 6);
      v76 = *((_QWORD *)v3 + 1);
      v78 = *(_QWORD *)v3;
      v74 = *((_QWORD *)v3 + 2);
      sub_23C837C80(v3);
      sub_23C863D04((uint64_t)&v158);
      v20 = MEMORY[0x24BEE4AF8];
      sub_23C910DAC();
      v21 = sub_23C7DD19C();
      v72 = v22;
      v73 = v21;
      v68 = 0;
      sub_23C7DB3DC();
      sub_23C7DB398();
      sub_23C80A99C(__src, v156);
      v71 = v19;
      if (sub_23C800F80((uint64_t)v156) == 1)
      {
        v101 = v78;
        v102 = v76;
        v103 = v74;
        v104 = v17;
        v105 = v16;
        v106 = v19;
        v107 = v85;
        v108 = v20;
        v109 = 0;
        v110 = v83;
        v111 = v82;
        v112 = v73;
        v113 = v72;
        v114 = 0;
        v115 = 0;
        v116 = v80;
        v23 = v67;
        v117 = v70;
        v118 = v67;
        v119 = v81;
        v120 = v7;
        v121 = 1;
        v24 = sub_23C7DB388();
        *(_QWORD *)(v24 + 16) = &unk_250D7FF20;
        v25 = sub_23C7DB388();
        *(_QWORD *)(v25 + 16) = sub_23C865180;
        *(_QWORD *)(v25 + 24) = v24;
        sub_23C837C80(&v101);
        v26 = sub_23C7DFE08();
        v122 = v78;
        v123 = v76;
        v124 = v74;
        v125 = v17;
        v27 = v70;
        v28 = v80;
        v126 = v16;
        v29 = v81;
        v127 = v19;
        v128 = v85;
        v129 = MEMORY[0x24BEE4AF8];
        v130 = 0;
        v131 = v83;
        v30 = v82;
        v132 = v82;
        sub_23C86532C(v26, v31, v32, v33, v34, v35, v36, v37, v62, v63, v64, v66, v67, v1, v70, v19, v72, v73);
        v133 = v80;
        v134 = v27;
        v135 = v23;
        v38 = *((_QWORD *)&v81 + 1);
        v136 = v81;
        v137 = v7;
        v138 = 1;
        v39 = sub_23C8654F8();
      }
      else
      {
        v87[0] = v78;
        v87[1] = v76;
        v87[2] = v74;
        v87[3] = v17;
        v87[4] = v16;
        v87[5] = v19;
        v87[6] = v85;
        v87[7] = v20;
        v88 = 0;
        v89 = v83;
        v90 = v82;
        v91 = v73;
        v92 = v72;
        v93 = 0;
        v94 = 0;
        v95 = v80;
        v23 = v67;
        v96 = v70;
        v97 = v67;
        v98 = v81;
        v99 = v7;
        v100 = 1;
        sub_23C7E79A8(&qword_25430CF70);
        v56 = sub_23C7DB388();
        v65 = xmmword_23C912A20;
        *(_OWORD *)(v56 + 16) = xmmword_23C912A20;
        v166 = v7;
        v57 = sub_23C7DB388();
        *(_OWORD *)(v57 + 16) = xmmword_23C912A20;
        sub_23C7E3190((void *)(v57 + 32), v156);
        v101 = 0x544E554F43;
        v102 = 0xE500000000000000;
        LOWORD(v103) = 257;
        v104 = (void (*)(uint64_t *@<X8>))v57;
        sub_23C80A884((uint64_t)&v101);
        sub_23C800B48(&v101, &v122);
        sub_23C7E3190((void *)(v56 + 32), &v122);
        v58 = sub_23C7DB388();
        *(_QWORD *)(v58 + 16) = v56;
        v25 = sub_23C7DB388();
        *(_QWORD *)(v25 + 16) = sub_23C865180;
        *(_QWORD *)(v25 + 24) = v58;
        v7 = v166;
        sub_23C865574();
        sub_23C837C80(v87);
        sub_23C7DFE08();
        v28 = v80;
        v139[0] = v78;
        v139[1] = v76;
        v139[2] = v74;
        v139[3] = v17;
        v27 = v70;
        v139[4] = v16;
        v29 = v81;
        v139[5] = v19;
        v139[6] = v85;
        v139[7] = MEMORY[0x24BEE4AF8];
        v140 = 0;
        v141 = v83;
        v30 = v82;
        v142 = v82;
        v143 = v73;
        v144 = v72;
        v145 = 0;
        v146 = 0;
        v147 = v80;
        v148 = v70;
        v149 = v67;
        v38 = *((_QWORD *)&v81 + 1);
        v150 = v81;
        v151 = v166;
        v152 = 1;
        v39 = sub_23C7FA5C4(v139);
      }
      v122 = v78;
      v123 = v76;
      v124 = v74;
      v125 = sub_23C863754;
      v126 = v25;
      v127 = v71;
      v128 = v85;
      v129 = MEMORY[0x24BEE4AF8];
      v130 = 0;
      v131 = v83;
      v132 = v30;
      sub_23C86532C((uint64_t)v39, v40, v41, v42, v43, v44, v45, v46, v62, v63, v65, *((uint64_t *)&v65 + 1), v67, v68, v70, v71, v72, v73);
      v133 = v28;
      v134 = v27;
      v135 = v23;
      *(_QWORD *)&v136 = v29;
      *((_QWORD *)&v136 + 1) = v38;
      v137 = v7;
      v138 = 1;
      sub_23C7E0718(v162, &v122);
      sub_23C837C80(&v122);
      sub_23C811780();
      if (v69)
      {
        sub_23C865574();
        sub_23C8654F8();
        sub_23C7FA5C4(&v122);
        goto LABEL_6;
      }
      v60 = v59;
      sub_23C8654F8();
      if ((v60 & 1) == 0)
      {
        sub_23C8654F8();
        sub_23C865574();
        goto LABEL_6;
      }
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_4:
    v6 = v4;
LABEL_5:
    sub_23C85DFA4(v6);
LABEL_6:
    sub_23C7DEF28();
    return;
  }
  if (v18)
  {
    sub_23C7DE934();
    if ((*((_BYTE *)v3 + 104) & 1) == 0)
    {
      v160 = *((_QWORD *)v3 + 7);
      v161 = *((_BYTE *)v3 + 64);
      v86 = *((_QWORD *)v3 + 16);
      v77 = *((_QWORD *)v3 + 5);
      v79 = *((_QWORD *)v3 + 17);
      v165 = v7;
      v47 = *((_QWORD *)v3 + 6);
      v75 = *v3;
      v48 = *((_QWORD *)v3 + 2);
      sub_23C837C80(v3);
      sub_23C863D04((uint64_t)&v160);
      v49 = MEMORY[0x24BEE4AF8];
      sub_23C910DAC();
      v50 = sub_23C7DD19C();
      v52 = v51;
      sub_23C7DB3DC();
      sub_23C7DB398();
      v53 = sub_23C7DB388();
      *(_QWORD *)(v53 + 16) = &unk_250D7FE58;
      v54 = sub_23C7DB388();
      *(_QWORD *)(v54 + 16) = sub_23C863DF0;
      *(_QWORD *)(v54 + 24) = v53;
      sub_23C7DFE08();
      __dst[0] = v75;
      *(_QWORD *)&__dst[1] = v48;
      *((_QWORD *)&__dst[1] + 1) = sub_23C863754;
      *(_QWORD *)&__dst[2] = v54;
      *((_QWORD *)&__dst[2] + 1) = v77;
      *(_QWORD *)&__dst[3] = v47;
      *((_QWORD *)&__dst[3] + 1) = v49;
      LOBYTE(__dst[4]) = 0;
      *((_QWORD *)&__dst[4] + 1) = v83;
      *(_QWORD *)&__dst[5] = v82;
      *((_QWORD *)&__dst[5] + 1) = v50;
      *(_QWORD *)&__dst[6] = v52;
      BYTE8(__dst[6]) = 0;
      *(_QWORD *)&__dst[7] = 0;
      *((_QWORD *)&__dst[7] + 1) = v80;
      *(_QWORD *)&__dst[8] = v86;
      *((_QWORD *)&__dst[8] + 1) = v79;
      __dst[9] = v81;
      LOBYTE(__dst[10]) = v165;
      BYTE1(__dst[10]) = 1;
      sub_23C7E0718(&v163, __dst);
      sub_23C837C80(__dst);
      sub_23C811780();
      v61 = v55;
      sub_23C865594();
      if ((v61 & 1) == 0)
      {
        sub_23C865594();
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    goto LABEL_4;
  }
LABEL_35:
  sub_23C7DC484();
  sub_23C86544C();
  sub_23C9117B4();
  __break(1u);
}

__n128 sub_23C85BA2C@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *((_QWORD *)v1 + 6);
  v21 = *((_QWORD *)v1 + 7);
  v22 = *((_BYTE *)v1 + 64);
  v19 = *((_QWORD *)v1 + 19);
  v20 = *((_QWORD *)v1 + 18);
  v18 = *((_BYTE *)v1 + 160);
  v4 = *((_BYTE *)v1 + 161);
  v16 = v1[7];
  v17 = (__n128)v1[8];
  v15 = *((_BYTE *)v1 + 104);
  v5 = *((_QWORD *)v1 + 5);
  v6 = *((_QWORD *)v1 + 2);
  v12 = *(__int128 *)((char *)v1 + 24);
  v13 = *v1;
  v14 = *(__int128 *)((char *)v1 + 72);
  sub_23C837C80(v1);
  sub_23C863D04((uint64_t)&v21);
  v7 = MEMORY[0x24BEE4AF8];
  sub_23C910DAC();
  v8 = sub_23C865554();
  v10 = v9;
  sub_23C7DB62C();
  sub_23C7DE934();
  *(_OWORD *)a1 = v13;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 104) = v15;
  result = v17;
  *(_OWORD *)(a1 + 112) = v16;
  *(__n128 *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v19;
  *(_BYTE *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 161) = v4;
  return result;
}

uint64_t sub_23C85BB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v5 = *(_BYTE *)(v0 + 32);
  if (*(_QWORD *)(v0 + 16))
  {
    sub_23C7DBBB0();
    sub_23C7DBCC8();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C87FA54();
  v2 = v1;
  sub_23C7DBCD0();
  sub_23C7DB398();
  sub_23C7DB62C();
  result = sub_23C7DB3DC();
  if (!v6)
  {
    v4 = sub_23C87FD90(v5, v2);
    sub_23C7DC474();
    return v4;
  }
  return result;
}

_QWORD *sub_23C85BC78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[8];
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v3 = v2;
  v6 = sub_23C7DB388();
  *(_QWORD *)(v6 + 16) = a1;
  v7 = sub_23C7DB388();
  *(_QWORD *)(v7 + 16) = sub_23C865194;
  *(_QWORD *)(v7 + 24) = v6;
  v32 = *(_OWORD *)(v3 + 24);
  sub_23C7DBCC8();
  sub_23C837C80((_QWORD *)v3);
  sub_23C863CDC((uint64_t)&v32);
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v23 = *(_QWORD *)(v3 + 48);
  v24 = *(_QWORD *)(v3 + 40);
  v22 = *(_QWORD *)(v3 + 56);
  v21 = *(_BYTE *)(v3 + 64);
  v19 = *(_QWORD *)(v3 + 80);
  v20 = *(_QWORD *)(v3 + 72);
  v11 = *(_QWORD *)(v3 + 88);
  v12 = *(_QWORD *)(v3 + 96);
  v13 = *(_BYTE *)(v3 + 104);
  v30 = *(_QWORD *)(v3 + 120);
  v31 = *(_QWORD *)(v3 + 112);
  v28 = *(_QWORD *)(v3 + 136);
  v29 = *(_QWORD *)(v3 + 128);
  v26 = *(_QWORD *)(v3 + 152);
  v27 = *(_QWORD *)(v3 + 144);
  v25 = *(_BYTE *)(v3 + 160);
  v14 = *(_BYTE *)(v3 + 161);
  v33[0] = *(_QWORD *)v3;
  v8 = v33[0];
  v33[1] = v9;
  v33[2] = v10;
  v33[3] = sub_23C863754;
  v33[4] = v7;
  v33[5] = v24;
  v33[6] = v23;
  v33[7] = v22;
  v34 = v21;
  v35 = v20;
  v36 = v19;
  v37 = v11;
  v38 = v12;
  v39 = v13;
  v40 = v31;
  v41 = v30;
  v42 = v29;
  v43 = v28;
  v44 = v27;
  v45 = v26;
  v46 = v25;
  v47 = v14;
  sub_23C837C80(v33);
  sub_23C910DAC();
  v15 = sub_23C865554();
  v17 = v16;
  sub_23C7DB398();
  sub_23C7DB62C();
  result = sub_23C7FA5C4(v33);
  v48 = v14;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = sub_23C863754;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v22;
  *(_BYTE *)(a2 + 64) = v21;
  *(_QWORD *)(a2 + 72) = v20;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v15;
  *(_QWORD *)(a2 + 96) = v17;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v31;
  *(_QWORD *)(a2 + 120) = v30;
  *(_QWORD *)(a2 + 128) = v29;
  *(_QWORD *)(a2 + 136) = v28;
  *(_QWORD *)(a2 + 144) = v27;
  *(_QWORD *)(a2 + 152) = v26;
  *(_BYTE *)(a2 + 160) = v25;
  *(_BYTE *)(a2 + 161) = v48;
  return result;
}

uint64_t sub_23C85BE98()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *__return_ptr, _BYTE *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  const void *v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  void (*v34)(_QWORD *__return_ptr, _BYTE *);
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[96];
  _QWORD v39[12];
  _BYTE v40[232];
  _BYTE v41[96];
  _QWORD v42[31];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_23C7DEF5C();
  v44 = v2;
  v45 = v5;
  v6 = v0;
  v34 = v7;
  v9 = v8;
  v11 = v10;
  v12 = *(_QWORD *)(v3 + 16);
  if (!v12)
    return v11;
  v13 = v4;
  v33 = v3;
  swift_bridgeObjectRetain();
  sub_23C7DF858();
  if (*(_QWORD *)(v13 + 16))
  {
    v1 = v33 + 40;
    while (1)
    {
      v14 = *(_QWORD *)(v1 - 8);
      v15 = *(_QWORD *)v1;
      sub_23C8652D4();
      sub_23C7E94B8();
      if ((v16 & 1) == 0)
        break;
      sub_23C86559C();
      sub_23C7E58D4(v41, v17);
      sub_23C813864((uint64_t)v41);
      sub_23C7DBCD0();
      v42[0] = v14;
      v42[1] = v15;
      sub_23C7E58D4(&v42[2], v41);
      sub_23C7DB3B8();
      sub_23C813864((uint64_t)v41);
      sub_23C86556C();
      memcpy(v40, v42, 0xE2uLL);
      v34(v39, &v40[16]);
      if (v6)
      {
        sub_23C7DB3DC();
        sub_23C7E087C();
        sub_23C86556C();
        sub_23C7DB624();
        swift_bridgeObjectRelease();
        return v11;
      }
      v35 = v1;
      v36 = v12;
      sub_23C7E58D4(v38, v39);
      sub_23C813864((uint64_t)v38);
      swift_isUniquelyReferenced_nonNull_native();
      v43 = v9;
      sub_23C7E94B8();
      sub_23C7EE044();
      if (v20)
        goto LABEL_24;
      v1 = v18;
      v21 = v19;
      sub_23C7E79A8(&qword_25430B330);
      if ((sub_23C911778() & 1) != 0)
      {
        v22 = sub_23C7E94B8();
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_27;
        v1 = v22;
      }
      if ((v21 & 1) != 0)
        goto LABEL_26;
      v9 = v43;
      sub_23C865540(v43 + 8 * (v1 >> 6));
      v25 = (_QWORD *)(v24 + 16 * v1);
      *v25 = v14;
      v25[1] = v15;
      sub_23C7E58D4((void *)(*(_QWORD *)(v9 + 56) + 216 * v1), v38);
      sub_23C865560();
      if (v20)
        goto LABEL_25;
      *(_QWORD *)(v9 + 16) = v26;
      sub_23C7DB3B8();
      swift_bridgeObjectRelease();
      sub_23C7DB3B8();
      if ((sub_23C7DFC88() & 1) == 0)
      {
        sub_23C7F16C0();
        v11 = v29;
      }
      v27 = *(_QWORD *)(v11 + 16);
      if (v27 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_23C7E5EE8();
        sub_23C7F16C0();
        v11 = v30;
      }
      *(_QWORD *)(v11 + 16) = v27 + 1;
      v28 = v11 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v14;
      *(_QWORD *)(v28 + 40) = v15;
      sub_23C813A5C((uint64_t)v38);
      sub_23C86556C();
      --v12;
      if (v36 == 1)
      {
        sub_23C7DB624();
        swift_bridgeObjectRelease();
        return v11;
      }
      v1 = v35 + 16;
      v6 = 0;
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    __break(1u);
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  v32 = (void *)(*(_QWORD *)(v43 + 56) + 216 * v1);
  sub_23C7E58D4(&v37, v32);
  sub_23C7E58D4(v32, v38);
  swift_bridgeObjectRelease();
  sub_23C813A5C((uint64_t)&v37);
  sub_23C7DC484();
  sub_23C865364();
  sub_23C9117B4();
  __break(1u);
LABEL_27:
  result = sub_23C911B50();
  __break(1u);
  return result;
}

_QWORD *sub_23C85C1F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr))
{
  return sub_23C85C288(a1, a2, a3, a4);
}

void sub_23C85C208(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[21];

  a4(v6);
  if (!v4)
  {
    sub_23C865500();
    sub_23C7E3190(&v5, v6);
    sub_23C863D2C();
  }
}

_QWORD *sub_23C85C288(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr))
{
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[2];

  result = a4(v6);
  if (!v4)
  {
    sub_23C865500();
    swift_bridgeObjectRelease();
    return (_QWORD *)v6[1];
  }
  return result;
}

uint64_t sub_23C85C2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C85C30C(a1, a2, a3, a4) & 1;
}

uint64_t sub_23C85C30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_23C911A18() & 1;
}

uint64_t sub_23C85C34C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  char v9;
  _QWORD v11[2];

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return 0;
  v6 = 0;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    v8 = *i;
    v11[0] = *(i - 1);
    v11[1] = v8;
    swift_bridgeObjectRetain();
    v9 = a1(v11);
    sub_23C7DC474();
    if (v3 || (v9 & 1) != 0)
      break;
    if (v4 == ++v6)
      return 0;
  }
  return v6;
}

void *sub_23C85C404()
{
  return &unk_250D7FFE8;
}

void sub_23C85C410(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1();
  if (!v2)
    *a2 = v4;
  sub_23C7DB390();
}

uint64_t sub_23C85C438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  unint64_t v6;
  _QWORD v8[23];
  _BYTE __src[184];
  _BYTE __dst[163];
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v3 = v11;
    v5 = (char *)(a2 + 32);
    do
    {
      memcpy(__dst, v5, sizeof(__dst));
      sub_23C863D2C();
      v11 = v3;
      v6 = *(_QWORD *)(v3 + 16);
      if (v6 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_23C7FD588();
        v3 = v11;
      }
      memcpy(v8, __dst, 0xA3uLL);
      sub_23C801200(v8);
      sub_23C801054(v8, __src);
      *(_QWORD *)(v3 + 16) = v6 + 1;
      memcpy((void *)(v3 + 184 * v6 + 32), __src, 0xB8uLL);
      v5 += 168;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void *sub_23C85C560@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __int128 v8;
  _BYTE v9[162];
  _QWORD __dst[27];
  _QWORD __srca[21];
  _BYTE v12[169];

  memcpy(__dst, __src, 0xD2uLL);
  v8 = *(_OWORD *)&__dst[1];
  v3 = __dst[3];
  v4 = __dst[4];
  v5 = __dst[5];
  v6 = __dst[0];
  memcpy(v9, &__dst[6], sizeof(v9));
  sub_23C813864((uint64_t)__dst);
  sub_23C85BC78(__srca, MEMORY[0x24BEE4AF8]);
  sub_23C7FA5C4(&__dst[6]);
  memcpy(&v12[7], __srca, 0xA2uLL);
  *(_BYTE *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = v5;
  return memcpy((void *)(a2 + 41), v12, 0xA9uLL);
}

void sub_23C85C644(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, void (*a3)(uint64_t)@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  a2(&v9);
  if (!v4)
  {
    v8 = v9;
    a3(a1);
    sub_23C7FB598();
    *a4 = v8;
  }
}

uint64_t sub_23C85C6DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C85C6F4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t))
{
  return sub_23C8628C0(a1, a2, a3, a4);
}

void sub_23C85C708(const void *a1@<X1>, void *a2@<X8>)
{
  sub_23C7E3190(a2, a1);
  sub_23C863D2C();
  sub_23C7DB390();
}

void sub_23C85C740()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  sub_23C7DEF5C();
  v1 = v0;
  sub_23C7E58D4(v24, v2);
  v18 = v25;
  v16 = v27;
  v17 = v26;
  v14 = v24[0];
  v15 = v28;
  v22 = v39;
  v23 = v38;
  v42 = v40;
  v3 = v41;
  v20 = v36;
  v21 = v37;
  v19 = v35;
  v12 = v33;
  v13 = v32;
  v9 = v30;
  v8 = v31;
  v10 = v29;
  v11 = v34;
  sub_23C813864((uint64_t)v24);
  sub_23C837C80(&v29);
  sub_23C7DB398();
  v4 = MEMORY[0x24BEE4AF8];
  sub_23C910DAC();
  v5 = sub_23C85BE98();
  v7 = v6;
  sub_23C7DC474();
  sub_23C7DB3DC();
  sub_23C7FA5C4(&v29);
  *(_BYTE *)v1 = v14;
  *(_OWORD *)(v1 + 8) = v18;
  *(_QWORD *)(v1 + 24) = v17;
  *(_QWORD *)(v1 + 32) = v16;
  *(_BYTE *)(v1 + 40) = v15;
  *(_OWORD *)(v1 + 48) = v10;
  *(_QWORD *)(v1 + 64) = v9;
  *(_OWORD *)(v1 + 72) = v8;
  *(_QWORD *)(v1 + 88) = v13;
  *(_QWORD *)(v1 + 96) = v12;
  *(_QWORD *)(v1 + 104) = v4;
  *(_BYTE *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 120) = v11;
  *(_QWORD *)(v1 + 136) = v5;
  *(_QWORD *)(v1 + 144) = v7;
  *(_BYTE *)(v1 + 152) = v19;
  *(_OWORD *)(v1 + 160) = v20;
  *(_OWORD *)(v1 + 176) = v21;
  *(_QWORD *)(v1 + 192) = v23;
  *(_QWORD *)(v1 + 200) = v22;
  *(_BYTE *)(v1 + 208) = v42;
  *(_BYTE *)(v1 + 209) = v3;
  sub_23C7DEF28();
}

uint64_t sub_23C85C90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a4)
  {
    v5 = swift_retain();
    sub_23C880AE4(v5);
    sub_23C7DF858();
  }
  else
  {
    sub_23C880F04(a2, a3);
    sub_23C7DF858();
    swift_retain();
  }
  return a2;
}

void sub_23C85C97C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _BYTE v40[176];
  _QWORD v41[21];
  char v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD v49[2];
  _BYTE v50[88];
  uint64_t v51;
  _QWORD v52[21];
  _QWORD v53[29];
  uint64_t v54[27];
  _BYTE v55[224];

  sub_23C7DEF5C();
  v10 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = v0;
  v4 = v5;
  v2 = v6;
  v37 = v7;
  v38 = v10;
  v39 = v8;
  memcpy(v53, (const void *)(v10 + 32), 0xE3uLL);
  v11 = BYTE2(v53[28]);
  v12 = v53[0];
  v13 = v53[1];
  v14 = v53[2];
  sub_23C800974((uint64_t)v53);
  sub_23C8B5A40((v11 & 1) == 0, v12, v13, v14);
  v16 = v15;
  v18 = v17;
  sub_23C812FA8((uint64_t)v53);
  sub_23C7E0718(v52, (const void *)(v4 + 48));
  sub_23C7E0718(v50, (const void *)(v4 + 48));
  v49[0] = v16;
  v49[1] = v18;
  sub_23C813864(v4);
  sub_23C837C80(v52);
  sub_23C863338(v42);
  sub_23C86539C((uint64_t)v42, (uint64_t)v54);
  sub_23C86539C((uint64_t)v54, (uint64_t)v55);
  v19 = sub_23C863768((uint64_t)v55);
  if ((_DWORD)v19 == 1)
  {
    v36 = v0;
    sub_23C7FA5C4(v52);
    sub_23C7DC514();
LABEL_8:
    sub_23C7E0718(v41, v50);
    v27 = *(_QWORD *)(v4 + 8);
    v28 = *(_QWORD *)(v4 + 16);
    v29 = *(_QWORD *)(v4 + 24);
    v30 = *(_QWORD *)(v4 + 32);
    v42[0] = *(_BYTE *)v4;
    v26 = v42[0];
    v43 = v27;
    v44 = v28;
    v45 = v29;
    v46 = v30;
    v31 = *(_BYTE *)(v4 + 40);
    v47 = v31;
    sub_23C7E0718(&v48, v50);
    v32 = v26 > 1;
    sub_23C7E0718(&v40[7], v50);
    sub_23C7E79A8(&qword_25430B4A0);
    v33 = sub_23C7DB388();
    *(_OWORD *)(v33 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v33 + 32) = v2;
    *(_QWORD *)(v33 + 40) = v37;
    *(_BYTE *)(v33 + 48) = 3;
    *(_QWORD *)(v33 + 56) = v27;
    *(_QWORD *)(v33 + 64) = v28;
    *(_QWORD *)(v33 + 72) = v29;
    *(_QWORD *)(v33 + 80) = v30;
    *(_BYTE *)(v33 + 88) = v31;
    memcpy((void *)(v33 + 89), v40, 0xA9uLL);
    *(_BYTE *)(v33 + 258) = v32;
    swift_bridgeObjectRetain();
    sub_23C7DBBB0();
    sub_23C800AA4(v27, v28, v29, v30, v31);
    sub_23C837C80(v41);
    sub_23C7DBCC8();
    sub_23C7FB4E8();
    sub_23C813A5C((uint64_t)v42);
    sub_23C7DB62C();
    *v39 = v33;
    sub_23C7DEF28();
    return;
  }
  v20 = v52[11];
  MEMORY[0x24BDAC7A8](v19);
  v35[2] = v49;
  swift_bridgeObjectRetain();
  v1 = sub_23C85C34C(sub_23C865168, (uint64_t)v35, v20);
  v22 = v21;
  sub_23C7DE934();
  if ((v22 & 1) == 0)
  {
    v23 = v51;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_6:
      v24 = *(_QWORD *)(v23 + 16);
      if (v1 < v24)
      {
        v36 = v3;
        v25 = v24 - 1;
        sub_23C8F9018((char *)(v23 + 16 * v1 + 48), v24 - 1 - v1, (char *)(v23 + 16 * v1 + 32));
        *(_QWORD *)(v23 + 16) = v25;
        sub_23C7DB62C();
        sub_23C863780(v54);
        sub_23C7FA5C4(v52);
        sub_23C7DC514();
        v51 = v23;
        goto LABEL_8;
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_10:
    sub_23C8908DC();
    v23 = v34;
    goto LABEL_6;
  }
LABEL_12:
  __break(1u);
}

void sub_23C85CC8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (char *)(swift_bridgeObjectRetain() + 48);
    v7 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v8 = *((_QWORD *)v6 - 2);
      v9 = *((_QWORD *)v6 - 1);
      v10 = *v6;
      v19[0] = v8;
      v19[1] = v9;
      v20 = v10;
      sub_23C8634D8(v8, v9, v10);
      a3(&v21, v19, a2);
      if (v3)
      {
        sub_23C8634E8(v8, v9, v10);
        sub_23C7DFB3C();
        sub_23C7DB62C();
        swift_bridgeObjectRelease();
        return;
      }
      sub_23C8634E8(v8, v9, v10);
      v11 = v21;
      v12 = *(_QWORD *)(v21 + 16);
      v13 = *(_QWORD *)(v7 + 16);
      if (__OFADD__(v13, v12))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v13 + v12 > *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7F1DE8();
        v7 = v14;
      }
      if (*(_QWORD *)(v11 + 16))
      {
        if ((*(_QWORD *)(v7 + 24) >> 1) - *(_QWORD *)(v7 + 16) < v12)
          goto LABEL_20;
        swift_arrayInitWithCopy();
        if (v12)
        {
          v15 = *(_QWORD *)(v7 + 16);
          v16 = __OFADD__(v15, v12);
          v17 = v15 + v12;
          if (v16)
            goto LABEL_21;
          *(_QWORD *)(v7 + 16) = v17;
        }
      }
      else if (v12)
      {
        goto LABEL_19;
      }
      v6 += 24;
      sub_23C7DBCD0();
      if (!--v5)
      {
        sub_23C7DFB3C();
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    sub_23C7DFB3C();
  }
}

uint64_t sub_23C85CE3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[168];

  v2 = v0[11];
  v1 = v0[12];
  sub_23C8652D4();
  sub_23C7DF858();
  sub_23C85A73C(v2, v2, v1);
  v4 = v3;
  sub_23C7DB62C();
  v6 = v0[9];
  v5 = v0[10];
  v18 = v6;
  v17 = v5;
  v16[0] = v6;
  v16[1] = v5;
  v7 = *(_QWORD *)(v4 + 16);
  if (v7)
  {
    sub_23C863AB4((uint64_t)&v18);
    sub_23C863AB4((uint64_t)&v17);
    sub_23C7DF858();
    v8 = v7 - 1;
    for (i = 32; ; i += 216)
    {
      sub_23C7E58D4(v14, (const void *)(v4 + i));
      if ((v14[0] & 0xFE) != 2)
      {
        sub_23C7E0718(v19, &v15);
        v10 = sub_23C813864((uint64_t)v14);
        v11 = sub_23C85CE3C(v10);
        sub_23C833C90(v11, v12, v16);
        sub_23C7DB398();
        sub_23C7DE934();
        sub_23C813A5C((uint64_t)v14);
      }
      if (!v8)
        break;
      --v8;
    }
    swift_bridgeObjectRelease_n();
    return v16[0];
  }
  else
  {
    sub_23C863AB4((uint64_t)&v18);
    sub_23C863AB4((uint64_t)&v17);
    sub_23C7DB624();
  }
  return v6;
}

void sub_23C85CF78()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE v55[227];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  void (*v71)(uint64_t *@<X8>);
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  _BYTE v84[168];
  _QWORD __dst[29];
  _BYTE __src[169];
  _BYTE v87[7];
  char v88[8];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _QWORD v95[3];
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _QWORD v100[3];
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  __int128 v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111;
  char v112;
  _BYTE v113[176];

  sub_23C7DE8EC();
  v11 = *v10;
  v53 = v8;
  if (v8 >= 2u)
  {
    if (v8 == 2)
    {
      v12 = 0;
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 16);
      if (!v13)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v12 = *(_BYTE *)(v11 + 232 * v13 + 26) ^ 1;
    }
  }
  else
  {
    v12 = 1;
  }
  v14 = *(_QWORD *)(v11 + 16);
  if (!v14)
  {
    __break(1u);
    goto LABEL_25;
  }
  v50 = v9;
  v15 = v11 + 232 * v14;
  v16 = *(_QWORD *)(v15 - 200);
  v17 = *(_QWORD *)(v15 - 192);
  v18 = *(_BYTE *)(v15 - 184);
  sub_23C800A8C(v16, v17, v18);
  sub_23C8B5A40(v12 & 1, v16, v17, v18);
  v51 = v19;
  v21 = v20;
  sub_23C812F90(v16, v17, v18);
  v5 = *(_QWORD *)(v15 - 176);
  v1 = *(_QWORD *)(v15 - 168);
  v7 = *(_QWORD *)(v15 - 160);
  v22 = *(_QWORD *)(v15 - 152);
  v6 = *(unsigned __int8 *)(v15 - 144);
  sub_23C7E0718(v95, (const void *)(v15 - 136));
  if (v53 == 2)
  {
LABEL_12:
    v52 = v21;
    v88[0] = v53;
    v89 = v5;
    v90 = v1;
    v91 = v7;
    v92 = v22;
    v93 = v6;
    sub_23C7E0718(&v94, v95);
    v0 = sub_23C8D6CA0(1, v11);
    if (v24 == (__int128 *)(v25 >> 1))
    {
      sub_23C7E58D4(__dst, v88);
      sub_23C837C80(v95);
      sub_23C7E658C(v5, v1, v7);
      sub_23C7DF858();
      sub_23C85D54C(__dst, v51, v52, (uint64_t)v55);
      sub_23C7E072C();
      swift_unknownObjectRelease();
      sub_23C813A5C((uint64_t)v88);
      v26 = v55[160];
      v27 = v55[161];
      v29 = *(_OWORD *)&v55[128];
      v28 = *(_OWORD *)&v55[144];
      v30 = *(_OWORD *)&v55[112];
      v31 = v55[104];
      v32 = *(_OWORD *)&v55[88];
      v33 = *(_OWORD *)&v55[72];
      v34 = *(_QWORD *)&v55[56];
      v35 = v55[64];
      v36 = *(_OWORD *)&v55[40];
      v37 = *(_OWORD *)&v55[24];
      v38 = *(_QWORD *)v55;
      v39 = *(_QWORD *)&v55[8];
      v40 = *(_QWORD *)&v55[16];
LABEL_23:
      LOBYTE(__dst[0]) = v27;
      *(_QWORD *)v50 = v38;
      *(_QWORD *)(v50 + 8) = v39;
      *(_QWORD *)(v50 + 16) = v40;
      *(_OWORD *)(v50 + 24) = v37;
      *(_OWORD *)(v50 + 40) = v36;
      *(_QWORD *)(v50 + 56) = v34;
      *(_BYTE *)(v50 + 64) = v35;
      *(_OWORD *)(v50 + 72) = v33;
      *(_OWORD *)(v50 + 88) = v32;
      *(_BYTE *)(v50 + 104) = v31;
      *(_OWORD *)(v50 + 112) = v30;
      *(_OWORD *)(v50 + 128) = v29;
      *(_OWORD *)(v50 + 144) = v28;
      *(_BYTE *)(v50 + 160) = v26;
      *(_BYTE *)(v50 + 161) = v27;
      sub_23C7DBCB0();
      return;
    }
    v3 = v23;
    v4 = v24;
    v2 = v25;
    sub_23C837C80(v95);
    sub_23C7E658C(v5, v1, v7);
    sub_23C7DF858();
    v41 = swift_unknownObjectRetain();
    v42 = sub_23C87607C(v41, (uint64_t)v3, (uint64_t)v4, v2);
    v43 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      v44 = v42;
      v3 = &v69;
      v4 = &v56;
      v2 = v42 + 32;
      sub_23C7E0718(&v56, (const void *)(v42 + 32 + 232 * v43 - 168));
      v45 = sub_23C7DB388();
      *(_QWORD *)(v45 + 16) = MEMORY[0x24BEE4AF8];
      v1 = sub_23C7DB388();
      *(_QWORD *)(v1 + 16) = sub_23C863718;
      *(_QWORD *)(v1 + 24) = v45;
      sub_23C837C80(&v56);
      swift_release();
      v69 = v56;
      v70 = v57;
      v71 = sub_23C863754;
      v73 = v58;
      v72 = v1;
      v74 = v59;
      v75 = v60;
      v76 = v61;
      v77 = v62;
      v78 = v63;
      v79 = v64;
      v80 = v65;
      v81 = v66;
      v82 = v67;
      v83 = v68;
      sub_23C7E0718(v113, &v69);
      sub_23C7E58D4(v55, v88);
      v0 = (unint64_t)v113;
      LOBYTE(v11) = v52;
      sub_23C85D54C(v55, v51, v52, (uint64_t)v84);
      sub_23C7FA5C4(&v69);
      sub_23C7DB624();
      v46 = *(_QWORD *)(v44 + 16);
      if (v46)
      {
        memcpy(__dst, (const void *)(v2 + 232 * v46 - 232), 0xE3uLL);
        LOBYTE(v52) = BYTE2(__dst[28]);
        v5 = __dst[3];
        v1 = __dst[4];
        v2 = __dst[5];
        v3 = (__int128 *)__dst[6];
        LOBYTE(v4) = __dst[7];
        v6 = __dst[0];
        v7 = __dst[1];
        LOBYTE(v11) = __dst[2];
        sub_23C800974((uint64_t)__dst);
        sub_23C7FA5C4(&__dst[8]);
        sub_23C7E0718(&__src[7], v84);
        v0 = *(_QWORD *)(v44 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (v0)
            goto LABEL_18;
          goto LABEL_28;
        }
LABEL_27:
        sub_23C890984();
        v44 = v49;
        if (v0)
        {
LABEL_18:
          if (v0 <= *(_QWORD *)(v44 + 16))
          {
            v47 = v44 + 232 * v0;
            memcpy(v55, (const void *)(v47 - 200), sizeof(v55));
            *(_QWORD *)(v47 - 200) = v6;
            *(_QWORD *)(v47 - 192) = v7;
            *(_BYTE *)(v47 - 184) = v11;
            *(_DWORD *)(v47 - 183) = *(_DWORD *)v87;
            *(_DWORD *)(v47 - 180) = *(_DWORD *)&v87[3];
            *(_QWORD *)(v47 - 176) = v5;
            *(_QWORD *)(v47 - 168) = v1;
            *(_QWORD *)(v47 - 160) = v2;
            *(_QWORD *)(v47 - 152) = v3;
            *(_BYTE *)(v47 - 144) = (_BYTE)v4;
            memcpy((void *)(v47 - 143), __src, 0xA9uLL);
            *(_BYTE *)(v47 + 26) = v52;
            sub_23C812FA8((uint64_t)v55);
            v54 = v44;
            sub_23C7DBBB0();
            if (v53 == 2)
              v48 = 3;
            else
              v48 = v53;
            sub_23C85CF78(v100, &v54, v48);
            sub_23C813A5C((uint64_t)v88);
            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
            v28 = v110;
            v26 = v111;
            v27 = v112;
            v29 = v109;
            v30 = v108;
            v31 = v107;
            v32 = v106;
            v33 = v105;
            v35 = v104;
            v36 = v102;
            v37 = v101;
            v38 = v100[0];
            v39 = v100[1];
            v34 = v103;
            v40 = v100[2];
            goto LABEL_23;
          }
          goto LABEL_29;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v96 != 1)
  {
    if (v97 | v98)
    {
      sub_23C8653B0();
      goto LABEL_33;
    }
    if ((v99 & 1) == 0)
    {
      sub_23C7DC484();
      sub_23C7DFE74();
      goto LABEL_35;
    }
    goto LABEL_12;
  }
LABEL_31:
  sub_23C8653CC();
LABEL_33:
  sub_23C7DC484();
  sub_23C86544C();
LABEL_35:
  sub_23C8653A4();
  __break(1u);
}

void sub_23C85D54C(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE v38[216];
  _BYTE v39[216];
  _QWORD v40[27];
  uint64_t v41;
  _BYTE v42[216];
  uint64_t v43[27];
  _QWORD v44[27];
  _QWORD v45[2];
  _BYTE v46[162];
  _QWORD v47[27];
  _BYTE v48[216];
  uint64_t v49[27];
  _BYTE v50[216];

  memcpy(v48, __src, 0xD2uLL);
  memcpy(v46, v4, sizeof(v46));
  v45[0] = a2;
  v45[1] = a3;
  sub_23C837C80(v4);
  sub_23C863338(v47);
  sub_23C863E08((uint64_t)v47, (uint64_t)v49, &qword_25430B2D8);
  sub_23C863E08((uint64_t)v49, (uint64_t)v50, &qword_25430B2D8);
  v8 = sub_23C863768((uint64_t)v50);
  if ((_DWORD)v8 == 1)
  {
    sub_23C813864((uint64_t)v48);
    v9 = *(_QWORD *)&v46[96];
    swift_isUniquelyReferenced_nonNull_native();
    v44[0] = v9;
    sub_23C862E74(v48, a2, a3, v42);
    *(_QWORD *)&v46[96] = v44[0];
    swift_bridgeObjectRelease();
    sub_23C863E08((uint64_t)v42, (uint64_t)v43, &qword_25430B2D8);
    sub_23C863E08((uint64_t)v43, (uint64_t)v44, &qword_25430B2D8);
    if (sub_23C863768((uint64_t)v44) == 1)
    {
      v10 = *(_QWORD *)&v46[88];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7F16C0();
        v10 = v29;
      }
      v11 = *(_QWORD *)(v10 + 16);
      if (v11 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_23C7F16C0();
        v10 = v30;
      }
      *(_QWORD *)(v10 + 16) = v11 + 1;
      v12 = v10 + 16 * v11;
      *(_QWORD *)(v12 + 32) = a2;
      *(_QWORD *)(v12 + 40) = a3;
LABEL_18:
      v22 = *(_QWORD *)&v46[16];
      v23 = *(_QWORD *)&v46[56];
      v24 = v46[64];
      v25 = *(_QWORD *)&v46[96];
      v26 = v46[104];
      v27 = v46[160];
      LOBYTE(v44[0]) = v46[161];
      *(_OWORD *)a4 = *(_OWORD *)v46;
      *(_QWORD *)(a4 + 16) = v22;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)&v46[24];
      *(_OWORD *)(a4 + 40) = *(_OWORD *)&v46[40];
      *(_QWORD *)(a4 + 56) = v23;
      *(_BYTE *)(a4 + 64) = v24;
      *(_OWORD *)(a4 + 72) = *(_OWORD *)&v46[72];
      *(_QWORD *)(a4 + 88) = v10;
      *(_QWORD *)(a4 + 96) = v25;
      *(_BYTE *)(a4 + 104) = v26;
      v28 = *(_OWORD *)&v46[128];
      *(_OWORD *)(a4 + 112) = *(_OWORD *)&v46[112];
      *(_OWORD *)(a4 + 128) = v28;
      *(_OWORD *)(a4 + 144) = *(_OWORD *)&v46[144];
      *(_BYTE *)(a4 + 160) = v27;
      *(_BYTE *)(a4 + 161) = v44[0];
      return;
    }
    goto LABEL_22;
  }
  v13 = v4[11];
  MEMORY[0x24BDAC7A8](v8);
  v36 = (uint64_t)v45;
  swift_bridgeObjectRetain();
  v14 = sub_23C85C34C(sub_23C8638E0, (uint64_t)&v35, v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    __break(1u);
LABEL_22:
    v34 = v43;
LABEL_25:
    sub_23C863780(v34);
    v37 = 0;
    v36 = 59;
    goto LABEL_26;
  }
  v10 = *(_QWORD *)&v46[88];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8908DC();
    v10 = v31;
  }
  v17 = *(_QWORD *)(v10 + 16);
  if (v14 >= v17)
  {
    __break(1u);
    goto LABEL_20;
  }
  v18 = v17 - 1;
  sub_23C8F9018((char *)(v10 + 16 * v14 + 48), v17 - 1 - v14, (char *)(v10 + 16 * v14 + 32));
  *(_QWORD *)(v10 + 16) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v46[88] = v10;
  sub_23C863E08((uint64_t)v49, (uint64_t)v42, &qword_25430B2D8);
  memcpy(v47, v42, 0xD2uLL);
  memcpy(v44, v48, 0xD2uLL);
  sub_23C85DAF4();
  sub_23C863E08((uint64_t)&v41, (uint64_t)v43, &qword_25430B2D8);
  sub_23C863E08((uint64_t)v43, (uint64_t)v44, &qword_25430B2D8);
  if (sub_23C863768((uint64_t)v44) != 1)
  {
    memcpy(v47, v44, 0xD2uLL);
    sub_23C813864((uint64_t)v44);
    v19 = *(_QWORD *)&v46[96];
    swift_isUniquelyReferenced_nonNull_native();
    v40[0] = v19;
    sub_23C862E74(v47, a2, a3, v38);
    *(_QWORD *)&v46[96] = v40[0];
    swift_bridgeObjectRelease();
    sub_23C863E08((uint64_t)v38, (uint64_t)v39, &qword_25430B2D8);
    sub_23C863E08((uint64_t)v39, (uint64_t)v40, &qword_25430B2D8);
    if (sub_23C863768((uint64_t)v40) != 1)
    {
      v34 = (uint64_t *)v39;
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_15:
      v20 = *(_QWORD *)(v10 + 16);
      if (v20 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_23C7F16C0();
        v10 = v33;
      }
      *(_QWORD *)(v10 + 16) = v20 + 1;
      v21 = v10 + 16 * v20;
      *(_QWORD *)(v21 + 32) = a2;
      *(_QWORD *)(v21 + 40) = a3;
      sub_23C863780(v49);
      sub_23C863780(v43);
      goto LABEL_18;
    }
LABEL_20:
    sub_23C7F16C0();
    v10 = v32;
    goto LABEL_15;
  }
  v47[0] = 0;
  v47[1] = 0xE000000000000000;
  sub_23C911634();
  sub_23C910F5C();
  sub_23C910F5C();
  sub_23C910F5C();
  v37 = 0;
  v36 = 501;
LABEL_26:
  sub_23C9117B4();
  __break(1u);
}

void sub_23C85DAF4()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE __dst[104];
  _OWORD v15[2];
  char v16;
  _OWORD v17[2];
  unsigned __int8 v18;
  _QWORD __src[13];
  char v20[168];
  uint64_t v21;

  sub_23C7DE8EC();
  v2 = v1;
  v3 = *v1;
  v4 = v1[40];
  sub_23C7E0718(v20, v1 + 48);
  v5 = *(_BYTE *)v0;
  v6 = *(_BYTE *)(v0 + 40);
  sub_23C7E0718(&v21, (const void *)(v0 + 48));
  v7 = *(_OWORD *)(v0 + 24);
  v15[0] = *(_OWORD *)(v0 + 8);
  v15[1] = v7;
  v16 = v6;
  v8 = *(_OWORD *)(v2 + 24);
  v17[0] = *(_OWORD *)(v2 + 8);
  v17[1] = v8;
  v18 = v4;
  sub_23C8629CC((uint64_t *)v17, (uint64_t)__src);
  if (LOBYTE(__src[4]) <= 0xFDu)
  {
    v9 = __src[0];
    v10 = __src[1];
    v11 = __src[2];
    sub_23C861D50();
    sub_23C863E08((uint64_t)v17, (uint64_t)__src, &qword_256BCCAB0);
    if (sub_23C82CC10((uint64_t)__src) != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      v13 = (char *)sub_23C85DC80 + 4 * byte_23C915E0C[sub_23C862B4C(v3, v5)];
      __asm { BR              X10 }
    }
    sub_23C865514(v9, v10, v11);
  }
  sub_23C8638FC(v15);
  sub_23C86550C((uint64_t)v15, v12, &qword_25430B2D8);
  sub_23C7DBCB0();
}

void sub_23C85DC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t __src,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t a73;
  uint64_t a74;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;

  if ((v77 & 1) != 0)
  {
    sub_23C8653CC();
  }
  else
  {
    if (!(v78 | v79))
    {
      if ((v76 & 1) != 0)
      {
        memcpy((char *)&a20 + 7, &__src, 0x68uLL);
        a48 = v74;
        a50 = a17;
        a51 = a18;
        a53 = v75;
        memcpy(&a54, &a20, 0x6FuLL);
        LOBYTE(a68) = v77;
        *(_DWORD *)((char *)&a68 + 1) = a34;
        HIDWORD(a68) = *(_DWORD *)((char *)&a34 + 3);
        a69 = v78;
        a70 = a16;
        a71 = v79;
        a72 = a15;
        a73 = a14;
        a74 = a13;
        LOBYTE(STACK[0x200]) = a12;
        LOBYTE(STACK[0x201]) = v76;
        nullsub_1(&a48);
        goto LABEL_10;
      }
      sub_23C7DC484();
      sub_23C7DFE74();
LABEL_9:
      sub_23C8653A4();
      __break(1u);
LABEL_10:
      JUMPOUT(0x23C85DBD4);
    }
    sub_23C8653B0();
  }
  sub_23C7DC484();
  sub_23C86544C();
  goto LABEL_9;
}

BOOL sub_23C85DDA0(_BYTE *a1)
{
  return (*a1 & 0xFE) != 2;
}

void sub_23C85DDB4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[51];

  sub_23C7DEF5C();
  v2 = *(_QWORD *)(*v1 + 16);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v0 = v1;
  sub_23C7E0718(v107, (const void *)(*v1 + 232 * v2 - 136));
  v3 = sub_23C7DB388();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v4 = sub_23C7DB388();
  sub_23C8654E8(v4, (uint64_t)sub_23C865194, v22, v25, v28, v31, v36, v39, v42, v45, v49, v53, v55, v57, v58, v60, v61, v63, v64,
    v66,
    v67,
    v69,
    v70,
    v72,
    v73,
    v75,
    v77,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101,
    v102,
    v103,
    v104,
    v105,
    v106,
    v107[0]);
  sub_23C7DFB3C();
  sub_23C7E675C();
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_23C7E98F8(v5);
  sub_23C7ECC5C();
  sub_23C7FA5C4(v0);
  LODWORD(v6) = sub_23C7E7DC8();
  if ((v6 & 1) != 0)
  {
    if (v0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  sub_23C890984();
  v3 = v6;
  if (!v0)
    goto LABEL_10;
LABEL_5:
  if ((unint64_t)v0 <= *(_QWORD *)(v3 + 16))
  {
    v14 = sub_23C86530C(v6, v7, v8, v9, v10, v11, v12, v13, v22, v25, v28, v31, v36, v39, v42, v45, v49, v53, v55,
            v57,
            v58,
            v60,
            v61,
            v63,
            v64,
            v66,
            v67,
            v69,
            v70,
            v72,
            v73,
            v75,
            v77);
    sub_23C7DB6BC((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v23, v26, v29, v32, v37, v40, v43);
    sub_23C7E8358((uint64_t)sub_23C863754, v24, v27, v30, v33, v34, v35, v38, v41, v44, v46, v47, v48, v50, v51, v52, v54, v56, v59,
      v62,
      v65,
      v68,
      v71,
      v74,
      v76,
      v78);
    sub_23C8655B0();
    sub_23C7DEF28();
    return;
  }
LABEL_11:
  __break(1u);
}

void sub_23C85DEAC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[51];

  sub_23C7DEF5C();
  v2 = *(_QWORD *)(*v1 + 16);
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v0 = v1;
  sub_23C7E0718(v107, (const void *)(*v1 + 232 * v2 - 136));
  v3 = sub_23C7DB388();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v4 = sub_23C7DB388();
  sub_23C8654E8(v4, (uint64_t)sub_23C865194, v22, v25, v28, v31, v36, v39, v42, v45, v49, v53, v55, v57, v58, v60, v61, v63, v64,
    v66,
    v67,
    v69,
    v70,
    v72,
    v73,
    v75,
    v77,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101,
    v102,
    v103,
    v104,
    v105,
    v106,
    v107[0]);
  sub_23C7DFB3C();
  sub_23C7E675C();
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_23C7E98F8(v5);
  sub_23C7ECC5C();
  sub_23C7FA5C4(v0);
  LODWORD(v6) = sub_23C7E7DC8();
  if ((v6 & 1) != 0)
  {
    if (v0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  sub_23C890984();
  v3 = v6;
  if (!v0)
    goto LABEL_10;
LABEL_5:
  if ((unint64_t)v0 <= *(_QWORD *)(v3 + 16))
  {
    v14 = sub_23C86530C(v6, v7, v8, v9, v10, v11, v12, v13, v22, v25, v28, v31, v36, v39, v42, v45, v49, v53, v55,
            v57,
            v58,
            v60,
            v61,
            v63,
            v64,
            v66,
            v67,
            v69,
            v70,
            v72,
            v73,
            v75,
            v77);
    sub_23C7DB6BC((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, v23, v26, v29, v32, v37, v40, v43);
    sub_23C7E8358((uint64_t)sub_23C863754, v24, v27, v30, v33, v34, v35, v38, v41, v44, v46, v47, v48, v50, v51, v52, v54, v56, v59,
      v62,
      v65,
      v68,
      v71,
      v74,
      v76,
      v78);
    sub_23C8655B0();
    sub_23C7DEF28();
    return;
  }
LABEL_11:
  __break(1u);
}

void sub_23C85DFA4(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[23];
  _BYTE __src[162];
  _BYTE __dst[168];
  _BYTE v36[168];
  _QWORD v37[23];
  _QWORD v38[7];
  uint64_t v39;
  char v40;
  uint64_t v41;

  v3 = v1;
  v5 = MEMORY[0x24BEE4AF8];
  sub_23C7EE664();
  v7 = v6;
  v8 = MEMORY[0x24BEE4B00];
  v41 = a1;
  if (((unint64_t)"QL with empty selection" & 0x2000000000000000) == 0
    || (((unint64_t)"QL with empty selection" >> 56) & 0xF) != 0)
  {
    v9 = *(_QWORD *)(v6 + 16);
    if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
    {
      sub_23C7EE664();
      v7 = v22;
    }
    v37[0] = 0xD000000000000016;
    v37[1] = 0x800000023C91DFB0;
    v37[2] = v5;
    v37[3] = v8;
    sub_23C7F96B0(v37);
    *(_QWORD *)(v7 + 16) = v9 + 1;
    sub_23C7F96E0(v37, (void *)(v7 + 184 * v9 + 32));
  }
  v10 = *((_QWORD *)v3 + 6);
  v39 = *((_QWORD *)v3 + 7);
  v40 = *((_BYTE *)v3 + 64);
  v31 = *((_QWORD *)v3 + 19);
  v32 = *((_QWORD *)v3 + 18);
  v29 = *((_BYTE *)v3 + 161);
  v30 = *((_BYTE *)v3 + 160);
  v27 = v3[7];
  v28 = v3[8];
  v26 = *((_BYTE *)v3 + 104);
  v11 = *((_QWORD *)v3 + 5);
  v12 = *((_QWORD *)v3 + 2);
  v23 = *(__int128 *)((char *)v3 + 24);
  v24 = *v3;
  v25 = *(__int128 *)((char *)v3 + 72);
  sub_23C837C80(v3);
  sub_23C863D04((uint64_t)&v39);
  sub_23C910DAC();
  v13 = sub_23C85BE98();
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)__src = v24;
  *(_OWORD *)&__src[24] = v23;
  *(_QWORD *)&__src[16] = v12;
  *(_QWORD *)&__src[40] = v11;
  *(_QWORD *)&__src[48] = v10;
  *(_QWORD *)&__src[56] = v5;
  __src[64] = 0;
  *(_OWORD *)&__src[72] = v25;
  *(_QWORD *)&__src[88] = v13;
  *(_QWORD *)&__src[96] = v15;
  __src[104] = v26;
  *(_OWORD *)&__src[112] = v27;
  *(_OWORD *)&__src[128] = v28;
  *(_QWORD *)&__src[144] = v32;
  *(_QWORD *)&__src[152] = v31;
  __src[160] = v30;
  __src[161] = v29;
  memcpy(__dst, __src, 0xA2uLL);
  sub_23C81048C((uint64_t)__dst);
  sub_23C8104B8(__dst, v36);
  sub_23C837C80(__src);
  v16 = *(_QWORD *)(v7 + 16);
  if (v16 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    sub_23C7EE664();
    v7 = v20;
  }
  memcpy(v37, v36, 0xA2uLL);
  sub_23C7FCC50(v37);
  *(_QWORD *)(v7 + 16) = v16 + 1;
  sub_23C7F96E0(v37, (void *)(v7 + 184 * v16 + 32));
  sub_23C7FA5C4(__src);
  v17 = *(_QWORD *)(v7 + 16);
  v18 = MEMORY[0x24BEE4B00];
  if (v17 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    sub_23C7EE664();
    v7 = v21;
  }
  v33[0] = 41;
  v33[1] = 0xE100000000000000;
  v33[2] = v5;
  v33[3] = v18;
  sub_23C7F96B0(v33);
  *(_QWORD *)(v7 + 16) = v17 + 1;
  sub_23C7F96E0(v33, (void *)(v7 + 184 * v17 + 32));
  sub_23C8106CC(v38, v7);
  sub_23C81171C();
  if (!v2 && (v19 & 1) != 0)
    __break(1u);
  else
    sub_23C7E7900((uint64_t)v38, &qword_256BCA5F8);
}

uint64_t sub_23C85E31C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  if ((a3 & 1) != 0)
    return sub_23C911880();
  v4 = sub_23C8654B8();
  sub_23C910F5C();
  sub_23C8654B8();
  sub_23C910F5C();
  sub_23C7DB624();
  return v4;
}

uint64_t sub_23C85E3C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  result = sub_23C85AD28(v3);
  *a2 = result;
  return result;
}

void sub_23C85E408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  void (*v127)(uint64_t *__return_ptr, uint64_t);
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t i;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>);
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD v363[43];
  uint64_t v364;
  uint64_t v365;
  uint64_t v366[21];
  uint64_t v367[23];

  sub_23C7DEF5C();
  v4 = v1;
  v6 = v5;
  v7 = MEMORY[0x24BEE4AF8];
  if ((v8 & 1) == 0)
  {
    v363[21] = MEMORY[0x24BEE4AF8];
    v334 = *(_QWORD *)(v3 + 16);
    if (!v334)
      goto LABEL_293;
    v344 = v3 + 32;
    v336 = v3;
    sub_23C8652D4();
    v113 = 0;
    v356 = v6;
    while (1)
    {
      v358 = v113;
      v114 = v344 + 24 * v113;
      v115 = *(_QWORD *)v114;
      v116 = *(_QWORD *)(v114 + 8);
      if ((*(_BYTE *)(v114 + 16) & 1) == 0)
      {
        swift_retain_n();
        v1 = v4;
        ((void (*)(uint64_t *__return_ptr, uint64_t))v115)(v367, v6);
        v171 = sub_23C8654A8();
        if (v4)
        {
          sub_23C8634E8(v171, v172, v173);
          v263 = sub_23C8654A8();
          goto LABEL_284;
        }
        sub_23C8634E8(v171, v172, v173);
        v174 = sub_23C8654A8();
        sub_23C8634E8(v174, v175, v176);
        goto LABEL_251;
      }
      v117 = *(_QWORD *)(v115 + 16);
      v349 = v115;
      if ((v116 & 1) != 0)
        break;
      if (v117)
      {
        v352 = *(_QWORD *)(v115 + 16);
        v346 = v115 + 32;
        sub_23C7DF8BC();
        v118 = v7;
        v119 = 0;
        while (1)
        {
          v120 = v346 + 24 * v119;
          v122 = *(_QWORD *)v120;
          v121 = *(_QWORD *)(v120 + 8);
          if ((*(_BYTE *)(v120 + 16) & 1) != 0)
          {
            v338 = *(_QWORD *)(v120 + 8);
            if ((v121 & 1) != 0)
            {
              v123 = MEMORY[0x24BEE4AF8];
              v367[0] = MEMORY[0x24BEE4AF8];
              v146 = *(_QWORD *)(v122 + 16);
              if (v146)
              {
                v361 = v118;
                sub_23C8634D8(v122, v338, 1);
                sub_23C7DC544(v122);
                do
                {
                  v147 = *(_QWORD *)(v122 + 32);
                  v123 = *(_QWORD *)(v122 + 40);
                  if ((*(_BYTE *)(v122 + 48) & 1) != 0)
                  {
                    sub_23C7E42F8(*(_QWORD *)(v122 + 32));
                    v148 = sub_23C865480();
                    if ((v123 & 1) != 0)
                      v150 = sub_23C86177C;
                    else
                      v150 = sub_23C85FB70;
                    sub_23C85CC8C(v148, v149, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v150);
                    v4 = v1;
                    if (v1)
                    {
                      v264 = sub_23C7EC6B4();
LABEL_259:
                      sub_23C865420(v264, v265, v266, v267, v268, v269, v270, v271, v320, v321, v322, v116, v122, v334, v336, v338);
LABEL_266:
                      swift_bridgeObjectRelease();
                      sub_23C8634E8(v123, v119, 1);
                      v275 = v123;
LABEL_267:
                      sub_23C7DEA64(v275, v119);
                      sub_23C8634E8(v349, v324, 1);
                      swift_bridgeObjectRelease();
                      v263 = sub_23C8655C4();
                      goto LABEL_283;
                    }
                    v151 = sub_23C7EC6B4();
                  }
                  else
                  {
                    sub_23C7E0988(*(_QWORD *)(v122 + 32));
                    sub_23C8654D8();
                    if (v1)
                    {
                      sub_23C8634E8(v147, v123, 0);
                      sub_23C7E32D8();
                      goto LABEL_259;
                    }
                    sub_23C865394(v366[0]);
                    v4 = 0;
                    sub_23C7DBCD0();
                    sub_23C8634E8(v147, v123, 0);
                    sub_23C7E32D8();
                  }
                  sub_23C8634E8(v151, v152, v153);
                  sub_23C865458();
                  --v146;
                }
                while (v146);
                sub_23C7ED064(v154, v155, v156, v157, v158, v159, v160, v161, v320, v321, v322, v116, v122, v334, v336, v338);
                v116 = v324;
                goto LABEL_173;
              }
            }
            else
            {
              v123 = MEMORY[0x24BEE4AF8];
              v367[0] = MEMORY[0x24BEE4AF8];
              v124 = *(_QWORD *)(v122 + 16);
              if (v124)
              {
                v361 = v118;
                sub_23C8634D8(v122, v338, 1);
                sub_23C7DC544(v122);
                v328 = v122;
                v125 = (_BYTE *)(v122 + 48);
                do
                {
                  v127 = (void (*)(uint64_t *__return_ptr, uint64_t))*((_QWORD *)v125 - 2);
                  v126 = *((_QWORD *)v125 - 1);
                  if ((*v125 & 1) != 0)
                  {
                    sub_23C7E42F8(*((_QWORD *)v125 - 2));
                    sub_23C8634D8((uint64_t)v127, v126, 1);
                    v128 = sub_23C7E20E8();
                    if ((v126 & 1) != 0)
                      v130 = sub_23C85FB70;
                    else
                      v130 = sub_23C86177C;
                    sub_23C85CC8C(v128, v129, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v130);
                    v4 = v1;
                    if (v1)
                    {
                      v255 = sub_23C7E9168();
LABEL_256:
                      sub_23C865420(v255, v256, v257, v258, v259, v260, v261, v262, v320, v321, v322, v324, v328, v334, v336, v338);
                      swift_bridgeObjectRelease();
                      sub_23C8634E8(v126, v119, 1);
                      sub_23C7DEA64(v126, v119);
                      sub_23C8654C8();
                      swift_bridgeObjectRelease();
                      sub_23C8654C8();
                      v263 = v349;
LABEL_282:
                      v286 = v116;
LABEL_283:
                      v313 = 1;
LABEL_284:
                      sub_23C8634E8(v263, v286, v313);
                      sub_23C7DE934();
                      goto LABEL_292;
                    }
                    sub_23C7E8A20();
                  }
                  else
                  {
                    sub_23C7E25B0();
                    v1 = v4;
                    v127(v366, v6);
                    v131 = sub_23C7E4DE0();
                    if (v4)
                    {
                      sub_23C8634E8(v131, v132, v133);
                      v255 = sub_23C7E4DE0();
                      goto LABEL_256;
                    }
                    sub_23C8634E8(v131, v132, v133);
                    sub_23C7E9B64((uint64_t)v127);
                  }
                  v125 += 24;
                  v123 = (uint64_t)v367;
                  sub_23C7FAF1C();
                  --v124;
                }
                while (v124);
                sub_23C7ED064(v134, v135, v136, v137, v138, v139, v140, v141, v320, v321, v322, v324, v328, v334, v336, v338);
LABEL_173:
                v115 = v349;
                v118 = v361;
              }
            }
          }
          else
          {
            v142 = v118;
            sub_23C7E25B0();
            sub_23C7E1A88();
            v4 = v1;
            v143 = sub_23C7E4DE0();
            if (v1)
            {
              sub_23C8634E8(v143, v144, v145);
              sub_23C865244(v122, v121, 0);
LABEL_281:
              swift_bridgeObjectRelease();
              sub_23C8634E8(v115, v116, 1);
              v263 = v115;
              goto LABEL_282;
            }
            sub_23C8634E8(v143, v144, v145);
            sub_23C7E9B64(v122);
            v123 = v367[0];
            v118 = v142;
          }
          v162 = *(_QWORD *)(v123 + 16);
          v163 = *(_QWORD *)(v118 + 16);
          v2 = v163 + v162;
          if (__OFADD__(v163, v162))
            goto LABEL_314;
          v164 = v118;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v166 = v164;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v2 > *(_QWORD *)(v164 + 24) >> 1)
          {
            sub_23C7F1DE8();
            v166 = v167;
          }
          if (*(_QWORD *)(v123 + 16))
          {
            v168 = *(_QWORD *)(v166 + 16);
            if ((*(_QWORD *)(v166 + 24) >> 1) - v168 < v162)
              goto LABEL_322;
            sub_23C8655E8(v166, v168);
            swift_arrayInitWithCopy();
            if (v162)
            {
              v169 = *(_QWORD *)(v164 + 16);
              v32 = __OFADD__(v169, v162);
              v170 = v169 + v162;
              if (v32)
                goto LABEL_326;
              *(_QWORD *)(v164 + 16) = v170;
            }
          }
          else
          {
            v164 = v166;
            if (v162)
              goto LABEL_315;
          }
          ++v119;
          sub_23C7DE934();
          v118 = v164;
          v6 = v356;
          if (v119 == v352)
          {
            sub_23C8634E8(v115, v116, 1);
            sub_23C865244(v115, v116, 1);
            v7 = MEMORY[0x24BEE4AF8];
            break;
          }
        }
      }
LABEL_251:
      v113 = v358 + 1;
      sub_23C7FAF1C();
      if (v358 + 1 == v334)
      {
        sub_23C7DE9B0();
        goto LABEL_293;
      }
    }
    if (!v117)
      goto LABEL_251;
    v353 = *(_QWORD *)(v115 + 16);
    v329 = v115 + 32;
    sub_23C7DF8BC();
    v177 = 0;
    v178 = v7;
    v324 = v116;
    while (1)
    {
      v347 = v177;
      sub_23C865588();
      if ((v179 & 1) == 0)
        break;
      if ((v177 & 1) == 0)
      {
        v367[0] = v7;
        v180 = v7;
        v181 = *(_QWORD *)(v113 + 16);
        if (!v181)
          goto LABEL_238;
        v362 = v178;
        sub_23C8634D8(v113, v177, 1);
        v339 = v177;
        sub_23C865228(v113);
        do
        {
          v183 = *(_QWORD *)(v113 + 32);
          v182 = *(_QWORD *)(v113 + 40);
          if ((*(_BYTE *)(v113 + 48) & 1) != 0)
          {
            sub_23C7E42F8(*(_QWORD *)(v113 + 32));
            v184 = sub_23C865480();
            if ((v182 & 1) != 0)
              v186 = sub_23C86177C;
            else
              v186 = sub_23C85FB70;
            sub_23C85CC8C(v184, v185, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v186);
            v4 = v1;
            if (v1)
            {
              v272 = sub_23C7EC6B4();
              goto LABEL_262;
            }
            v187 = sub_23C7EC6B4();
          }
          else
          {
            sub_23C7E0988(*(_QWORD *)(v113 + 32));
            sub_23C8654D8();
            if (v1)
            {
              sub_23C8634E8(v183, v182, 0);
              sub_23C7E32D8();
LABEL_262:
              sub_23C8634E8(v272, v273, v274);
              v119 = v339;
              sub_23C8634E8(v113, v339, 1);
              swift_bridgeObjectRelease();
              sub_23C8634E8(v113, v339, 1);
              v275 = v113;
              goto LABEL_267;
            }
            v2 = v366[0];
            sub_23C865394(v366[0]);
            v4 = 0;
            sub_23C7DBCD0();
            sub_23C8634E8(v183, v182, 0);
            sub_23C7E32D8();
          }
          sub_23C8634E8(v187, v188, v189);
          sub_23C865458();
          --v181;
        }
        while (v181);
        sub_23C8652AC(v113, v190, v191, v192, v193, v194, v195, v196, v320, v321, v322, v324, v329, v334, v336, v339);
        sub_23C8634E8(v113, 0, 1);
        sub_23C7DEA64(v113, 0);
        v180 = v367[0];
LABEL_213:
        v116 = v324;
        goto LABEL_237;
      }
      v119 = *(_QWORD *)(v113 + 16);
      if (v119)
      {
        v362 = v178;
        sub_23C8634D8(v113, v177, 1);
        v340 = v177;
        sub_23C865228(v113);
        v323 = v113;
        v220 = (_BYTE *)(v113 + 48);
        v180 = MEMORY[0x24BEE4AF8];
        while (1)
        {
          v222 = *((_QWORD *)v220 - 2);
          v221 = *((_QWORD *)v220 - 1);
          if ((*v220 & 1) != 0)
          {
            sub_23C7E42F8(*((_QWORD *)v220 - 2));
            sub_23C8634D8(v222, v221, 1);
            v223 = sub_23C7E20E8();
            if ((v221 & 1) != 0)
              v225 = sub_23C85FB70;
            else
              v225 = sub_23C86177C;
            sub_23C85CC8C(v223, v224, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v225);
            v4 = v1;
            if (v1)
            {
              v276 = sub_23C7E9168();
              goto LABEL_265;
            }
            v2 = v229;
            sub_23C7E8A20();
          }
          else
          {
            sub_23C7E25B0();
            sub_23C7E1A88();
            v4 = v1;
            v226 = sub_23C7E4DE0();
            if (v1)
            {
              sub_23C8634E8(v226, v227, v228);
              v276 = sub_23C7E4DE0();
LABEL_265:
              sub_23C8634E8(v276, v277, v278);
              v123 = v323;
              sub_23C8652AC(v323, v279, v280, v281, v282, v283, v284, v285, v320, v321, v323, v324, v329, v334, v336, v340);
              goto LABEL_266;
            }
            sub_23C865288(v226, v227, v228);
          }
          v230 = *(_QWORD *)(v2 + 16);
          v231 = *(_QWORD *)(v180 + 16);
          if (__OFADD__(v231, v230))
            break;
          if (!swift_isUniquelyReferenced_nonNull_native() || v231 + v230 > *(_QWORD *)(v180 + 24) >> 1)
          {
            sub_23C7F1DE8();
            v180 = v232;
          }
          if (*(_QWORD *)(v2 + 16))
          {
            sub_23C7E6CDC();
            if (v31 != v32)
              goto LABEL_304;
            sub_23C865278(v180 + 168 * v233);
            swift_arrayInitWithCopy();
            if (v230)
            {
              v234 = *(_QWORD *)(v180 + 16);
              v32 = __OFADD__(v234, v230);
              v235 = v234 + v230;
              if (v32)
                goto LABEL_309;
              *(_QWORD *)(v180 + 16) = v235;
            }
          }
          else if (v230)
          {
            goto LABEL_295;
          }
          v220 += 24;
          sub_23C7DBCD0();
          if (!--v119)
          {
            sub_23C8652AC(v323, v236, v237, v238, v239, v240, v241, v242, v320, v321, v323, v324, v329, v334, v336, v340);
            v217 = sub_23C7DB49C();
            goto LABEL_212;
          }
        }
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
LABEL_307:
        __break(1u);
LABEL_308:
        __break(1u);
LABEL_309:
        __break(1u);
LABEL_310:
        __break(1u);
LABEL_311:
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
LABEL_318:
        __break(1u);
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
LABEL_322:
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
LABEL_328:
        __break(1u);
LABEL_329:
        __break(1u);
        return;
      }
      v180 = MEMORY[0x24BEE4AF8];
LABEL_238:
      v243 = *(_QWORD *)(v180 + 16);
      v244 = *(_QWORD *)(v178 + 16);
      v113 = v244 + v243;
      if (__OFADD__(v244, v243))
        goto LABEL_316;
      v245 = swift_isUniquelyReferenced_nonNull_native();
      v246 = v178;
      if ((v245 & 1) == 0 || v113 > *(_QWORD *)(v178 + 24) >> 1)
      {
        sub_23C7F1DE8();
        v246 = v247;
      }
      v7 = MEMORY[0x24BEE4AF8];
      if (*(_QWORD *)(v180 + 16))
      {
        sub_23C7E6CDC();
        if (v31 != v32)
          goto LABEL_323;
        sub_23C8655E8(v248, v249);
        swift_arrayInitWithCopy();
        if (v243)
        {
          v250 = *(_QWORD *)(v178 + 16);
          v32 = __OFADD__(v250, v243);
          v251 = v250 + v243;
          if (v32)
            goto LABEL_327;
          *(_QWORD *)(v178 + 16) = v251;
        }
      }
      else
      {
        v178 = v246;
        if (v243)
          goto LABEL_317;
      }
      v177 = v347 + 1;
      sub_23C7E087C();
      v115 = v349;
      if (v347 + 1 == v353)
      {
        sub_23C8634E8(v349, v116, 1);
        sub_23C8634E8(v349, v116, 1);
        sub_23C7DEA64(v349, v116);
        v6 = v356;
        goto LABEL_251;
      }
    }
    v362 = v178;
    sub_23C7E0988(v113);
    v1 = v4;
    v197 = ((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))v113)(v363, v356);
    if (v4)
    {
      v317 = sub_23C8653F4((uint64_t)v197, v198, v199, v200, v201, v202, v203, v204, v320, v321, v322, v324, v329, v334, v336, v177);
      sub_23C865244(v317, v318, v319);
      goto LABEL_281;
    }
    v205 = v363[0];
    v2 = *(_QWORD *)(v363[0] + 16);
    if (v2)
    {
      sub_23C7EBC48();
      v180 = v7;
      v206 = v2 - 1;
      for (i = 32; ; i += 168)
      {
        sub_23C7E3190(v366, (const void *)(v205 + i));
        sub_23C8C9D08();
        v208 = *(_QWORD *)(v180 + 16);
        v2 = v208 + 1;
        if (v208 >= *(_QWORD *)(v180 + 24) >> 1)
          sub_23C86557C();
        *(_QWORD *)(v180 + 16) = v2;
        sub_23C7E3190((void *)(v180 + 168 * v208 + 32), v367);
        if (!v206)
          break;
        --v206;
      }
      v209 = sub_23C7DC474();
      v217 = sub_23C8653F4(v209, v210, v211, v212, v213, v214, v215, v216, v320, v321, v322, v324, v329, v334, v336, v177);
LABEL_212:
      sub_23C8634E8(v217, v218, v219);
      goto LABEL_213;
    }
    sub_23C7DC474();
    sub_23C7E9B64(v113);
    sub_23C7E9B64(v113);
    v180 = v7;
LABEL_237:
    v178 = v362;
    goto LABEL_238;
  }
  v365 = MEMORY[0x24BEE4AF8];
  v337 = *(_QWORD *)(v3 + 16);
  if (!v337)
    goto LABEL_293;
  v345 = v3 + 32;
  v335 = v3;
  sub_23C8652D4();
  v9 = 0;
  while (1)
  {
    v357 = v9;
    sub_23C865588();
    if ((v10 & 1) == 0)
    {
      sub_23C7E0988(v9);
      sub_23C865470();
      if (v1)
      {
        sub_23C8634E8(v9, v0, 0);
        sub_23C7E32D8();
        goto LABEL_291;
      }
      sub_23C865394(v367[0]);
      v4 = 0;
      v7 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      sub_23C8634E8(v9, v0, 0);
      sub_23C7E32D8();
LABEL_73:
      sub_23C8634E8(v65, v66, v67);
      goto LABEL_137;
    }
    v11 = *(_QWORD *)(v9 + 16);
    if ((v0 & 1) != 0)
    {
      if (!v11)
        goto LABEL_137;
      v355 = *(_QWORD *)(v9 + 16);
      sub_23C8634D8(v9, v0, 1);
      v327 = v0;
      sub_23C8634D8(v9, v0, 1);
      v325 = v9;
      sub_23C7E0808();
      v68 = 0;
      v69 = v7;
      do
      {
        v351 = v68;
        sub_23C865588();
        if ((v70 & 1) != 0)
        {
          v71 = *(_QWORD *)(v9 + 16);
          v360 = v69;
          if ((v68 & 1) != 0)
          {
            if (v71)
            {
              sub_23C8634D8(v9, v68, 1);
              v343 = v68;
              sub_23C865228(v9);
              v333 = v9;
              v92 = (_BYTE *)(v9 + 48);
              v73 = MEMORY[0x24BEE4AF8];
              while (1)
              {
                v94 = *((_QWORD *)v92 - 2);
                v93 = *((_QWORD *)v92 - 1);
                if ((*v92 & 1) != 0)
                {
                  sub_23C8634D8(*((_QWORD *)v92 - 2), *((_QWORD *)v92 - 1), 1);
                  sub_23C7E42F8(v94);
                  v95 = sub_23C7E20E8();
                  if ((v93 & 1) != 0)
                    v97 = sub_23C86177C;
                  else
                    v97 = sub_23C85FB70;
                  sub_23C85CC8C(v95, v96, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v97);
                  v4 = v1;
                  if (v1)
                  {
                    v295 = sub_23C7E9168();
                    goto LABEL_272;
                  }
                  v69 = v101;
                  v98 = sub_23C7E9168();
                }
                else
                {
                  sub_23C7E0988(*((_QWORD *)v92 - 2));
                  sub_23C7E1A88();
                  if (v1)
                  {
                    sub_23C8634E8(v94, v93, 0);
                    v295 = sub_23C7E4DE0();
LABEL_272:
                    sub_23C7DFC5C(v295, v296, v297, v298, v299, v300, v301, v302, v320, v321, v322, v325, v327, v333, v335, v337, v343);
                    v303 = sub_23C8655C4();
                    goto LABEL_276;
                  }
                  v69 = sub_23C865394(v367[0]);
                  v4 = 0;
                  sub_23C7E087C();
                  sub_23C8634E8(v94, v93, 0);
                  v98 = sub_23C7E4DE0();
                }
                sub_23C8634E8(v98, v99, v100);
                v102 = *(_QWORD *)(v69 + 16);
                v103 = *(_QWORD *)(v73 + 16);
                if (__OFADD__(v103, v102))
                  goto LABEL_299;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v103 + v102 > *(_QWORD *)(v73 + 24) >> 1)
                {
                  sub_23C865380();
                  v73 = v104;
                }
                if (*(_QWORD *)(v69 + 16))
                {
                  sub_23C7E6CDC();
                  if (v31 != v32)
                    goto LABEL_308;
                  sub_23C865278(v73 + 168 * v105);
                  swift_arrayInitWithCopy();
                  if (v102)
                  {
                    v106 = *(_QWORD *)(v73 + 16);
                    v32 = __OFADD__(v106, v102);
                    v107 = v106 + v102;
                    if (v32)
                      goto LABEL_313;
                    *(_QWORD *)(v73 + 16) = v107;
                  }
                }
                else if (v102)
                {
                  goto LABEL_303;
                }
                v92 += 24;
                sub_23C7DBCD0();
                if (!--v71)
                {
                  sub_23C8634E8(v333, v343, 1);
                  sub_23C8652DC();
                  goto LABEL_125;
                }
              }
            }
          }
          else if (v71)
          {
            sub_23C8634D8(v9, v68, 1);
            v342 = v68;
            sub_23C865228(v9);
            v332 = v9;
            v72 = (_BYTE *)(v9 + 48);
            v73 = MEMORY[0x24BEE4AF8];
            while (1)
            {
              v75 = *((_QWORD *)v72 - 2);
              v74 = *((_QWORD *)v72 - 1);
              if ((*v72 & 1) != 0)
              {
                sub_23C7E42F8(*((_QWORD *)v72 - 2));
                sub_23C8634D8(v75, v74, 1);
                v76 = sub_23C7E20E8();
                if ((v74 & 1) != 0)
                  v78 = sub_23C85FB70;
                else
                  v78 = sub_23C86177C;
                sub_23C85CC8C(v76, v77, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v78);
                v4 = v1;
                if (v1)
                {
                  sub_23C7E8A20();
                  sub_23C8634E8(v332, v342, 1);
                  sub_23C7DC514();
                  sub_23C8652DC();
LABEL_289:
                  sub_23C7DEA64(v325, v327);
                  goto LABEL_290;
                }
                v69 = v82;
                sub_23C7E8A20();
              }
              else
              {
                sub_23C7E25B0();
                sub_23C7E1A88();
                v4 = v1;
                v79 = sub_23C7E4DE0();
                if (v1)
                {
                  sub_23C8634E8(v79, v80, v81);
                  sub_23C7DFC5C(v75, v74, 0, v287, v288, v289, v290, v291, v320, v321, v322, v325, v327, v332, v335, v337, v342);
                  v292 = sub_23C7DB49C();
LABEL_288:
                  sub_23C8634E8(v292, v293, v294);
                  goto LABEL_289;
                }
                sub_23C865288(v79, v80, v81);
              }
              v83 = *(_QWORD *)(v69 + 16);
              v84 = *(_QWORD *)(v73 + 16);
              if (__OFADD__(v84, v83))
                goto LABEL_298;
              if (!swift_isUniquelyReferenced_nonNull_native() || v84 + v83 > *(_QWORD *)(v73 + 24) >> 1)
              {
                sub_23C865380();
                v73 = v85;
              }
              if (*(_QWORD *)(v69 + 16))
              {
                sub_23C7E6CDC();
                if (v31 != v32)
                  goto LABEL_307;
                sub_23C865278(v73 + 168 * v86);
                swift_arrayInitWithCopy();
                if (v83)
                {
                  v87 = *(_QWORD *)(v73 + 16);
                  v32 = __OFADD__(v87, v83);
                  v88 = v87 + v83;
                  if (v32)
                    goto LABEL_312;
                  *(_QWORD *)(v73 + 16) = v88;
                }
              }
              else if (v83)
              {
                goto LABEL_302;
              }
              v72 += 24;
              sub_23C7DBCD0();
              --v71;
              v69 = v360;
              if (!v71)
              {
                sub_23C8634E8(v332, v342, 1);
                sub_23C8634E8(v332, v342, 1);
                sub_23C7DEA64(v332, v342);
                goto LABEL_125;
              }
            }
          }
          v73 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          sub_23C7E25B0();
          sub_23C865470();
          v4 = v1;
          sub_23C7E32D8();
          if (v1)
          {
            sub_23C8634E8(v89, v90, v91);
            v292 = v9;
            v293 = v68;
LABEL_287:
            v294 = 0;
            goto LABEL_288;
          }
          sub_23C8634E8(v89, v90, v91);
          sub_23C7E9B64(v9);
          v73 = v367[0];
        }
LABEL_125:
        v108 = *(_QWORD *)(v73 + 16);
        v109 = *(_QWORD *)(v69 + 16);
        v9 = v109 + v108;
        if (__OFADD__(v109, v108))
          goto LABEL_319;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v9 > *(_QWORD *)(v69 + 24) >> 1)
        {
          sub_23C865528();
          v69 = v110;
        }
        if (*(_QWORD *)(v73 + 16))
        {
          if ((*(_QWORD *)(v69 + 24) >> 1) - *(_QWORD *)(v69 + 16) < v108)
            goto LABEL_325;
          swift_arrayInitWithCopy();
          if (v108)
          {
            v111 = *(_QWORD *)(v69 + 16);
            v32 = __OFADD__(v111, v108);
            v112 = v111 + v108;
            if (v32)
              goto LABEL_329;
            *(_QWORD *)(v69 + 16) = v112;
          }
        }
        else if (v108)
        {
          goto LABEL_321;
        }
        v68 = v351 + 1;
        sub_23C7DC514();
        v7 = MEMORY[0x24BEE4AF8];
      }
      while (v351 + 1 != v355);
LABEL_136:
      sub_23C8634E8(v325, v327, 1);
      sub_23C8634E8(v325, v327, 1);
      sub_23C7E5EE8();
      goto LABEL_73;
    }
    if (v11)
      break;
LABEL_137:
    v9 = v357 + 1;
    v0 = (uint64_t)&v365;
    sub_23C7FAF1C();
    if (v357 + 1 == v337)
    {
      sub_23C7DE9B0();
      goto LABEL_293;
    }
  }
  v354 = *(_QWORD *)(v9 + 16);
  v331 = v9 + 32;
  sub_23C8634D8(v9, v0, 1);
  v327 = v0;
  sub_23C8634D8(v9, v0, 1);
  v325 = v9;
  sub_23C7E0808();
  v12 = 0;
  v13 = v7;
  while (1)
  {
    sub_23C865588();
    v350 = v12;
    if ((v14 & 1) == 0)
    {
      sub_23C7E0988(v9);
      v1 = v4;
      ((void (*)(uint64_t *__return_ptr, uint64_t))v9)(&v364, v6);
      if (v4)
      {
        sub_23C8634E8(v9, v0, 0);
        v292 = v9;
        v293 = v0;
        goto LABEL_287;
      }
      v359 = v13;
      v43 = v364;
      if (*(_QWORD *)(v364 + 16))
      {
        v363[42] = v7;
        sub_23C7EBC48();
        sub_23C7E3190(v366, (const void *)(v43 + 32));
        sub_23C8634F8(v366, v367);
        v44 = (char *)&loc_23C85E6C0 + *((int *)qword_23C85FB58 + sub_23C863534((uint64_t)v367));
        __asm { BR              X9 }
      }
      sub_23C7DC474();
      sub_23C8634E8(v9, v0, 0);
      sub_23C7E32D8();
      goto LABEL_58;
    }
    v348 = v9;
    v15 = *(_QWORD *)(v9 + 16);
    if ((v0 & 1) == 0)
      break;
    if (v15)
    {
      v359 = v13;
      sub_23C8634D8(v348, v0, 1);
      v341 = v0;
      sub_23C7DC544(v348);
      v45 = (_BYTE *)(v348 + 48);
      do
      {
        v46 = *((_QWORD *)v45 - 2);
        v17 = *((_QWORD *)v45 - 1);
        if ((*v45 & 1) != 0)
        {
          sub_23C7E42F8(*((_QWORD *)v45 - 2));
          sub_23C8634D8(v46, v17, 1);
          v47 = sub_23C7E20E8();
          if ((v17 & 1) != 0)
            v49 = sub_23C85FB70;
          else
            v49 = sub_23C86177C;
          sub_23C85CC8C(v47, v48, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v49);
          v4 = v1;
          if (v1)
          {
LABEL_253:
            v252 = sub_23C7E9168();
            goto LABEL_275;
          }
          v13 = v53;
          sub_23C7E8A20();
        }
        else
        {
          sub_23C7E25B0();
          sub_23C7E1A88();
          v4 = v1;
          v50 = sub_23C7E4DE0();
          if (v1)
            goto LABEL_274;
          sub_23C865288(v50, v51, v52);
        }
        v27 = *(_QWORD *)(v13 + 16);
        v54 = *(_QWORD *)(v7 + 16);
        if (__OFADD__(v54, v27))
          goto LABEL_297;
        if (!sub_23C7DFC88() || v54 + v27 > *(_QWORD *)(v7 + 24) >> 1)
        {
          sub_23C7EF7C4();
          v7 = v55;
        }
        if (*(_QWORD *)(v13 + 16))
        {
          sub_23C7E6CDC();
          if (v31 != v32)
            goto LABEL_306;
          sub_23C865278(v7 + 168 * v56);
          swift_arrayInitWithCopy();
          if (v27)
          {
            v57 = *(_QWORD *)(v7 + 16);
            v32 = __OFADD__(v57, v27);
            v58 = v57 + v27;
            if (v32)
              goto LABEL_311;
            *(_QWORD *)(v7 + 16) = v58;
          }
        }
        else if (v27)
        {
          goto LABEL_301;
        }
        v45 += 24;
        v35 = sub_23C7DBCD0();
        --v15;
      }
      while (v15);
LABEL_56:
      sub_23C8652BC(v35, v36, v37, v38, v39, v40, v41, v42, v320, v321, v322, v325, v327, v331, v335, v337, v341, v345, v348);
      sub_23C8634E8(0, v27, 1);
      sub_23C7E5EE8();
LABEL_58:
      sub_23C8634E8(v59, v60, v61);
      v13 = v359;
    }
LABEL_59:
    v0 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v13 + 16);
    if (__OFADD__(v9, v0))
      goto LABEL_318;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v9 + v0 > *(_QWORD *)(v13 + 24) >> 1)
    {
      sub_23C865528();
      v13 = v62;
    }
    if (*(_QWORD *)(v7 + 16))
    {
      sub_23C7E6CDC();
      if (v31 != v32)
        goto LABEL_324;
      swift_arrayInitWithCopy();
      if (v0)
      {
        v63 = *(_QWORD *)(v13 + 16);
        v32 = __OFADD__(v63, v0);
        v64 = v63 + v0;
        if (v32)
          goto LABEL_328;
        *(_QWORD *)(v13 + 16) = v64;
      }
    }
    else if (v0)
    {
      goto LABEL_320;
    }
    v12 = v350 + 1;
    sub_23C7DB624();
    v7 = MEMORY[0x24BEE4AF8];
    if (v350 + 1 == v354)
      goto LABEL_136;
  }
  if (!v15)
    goto LABEL_59;
  v359 = v13;
  sub_23C8634D8(v348, v0, 1);
  v341 = v0;
  sub_23C7DC544(v348);
  v16 = (_BYTE *)(v348 + 48);
  while (1)
  {
    v18 = *((_QWORD *)v16 - 2);
    v17 = *((_QWORD *)v16 - 1);
    if ((*v16 & 1) != 0)
    {
      sub_23C7E42F8(*((_QWORD *)v16 - 2));
      sub_23C8634D8(v18, v17, 1);
      v19 = sub_23C7E20E8();
      if ((v17 & 1) != 0)
        v21 = sub_23C86177C;
      else
        v21 = sub_23C85FB70;
      sub_23C85CC8C(v19, v20, (void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t))v21);
      v4 = v1;
      if (v1)
        goto LABEL_253;
      v22 = v26;
      v23 = sub_23C7E9168();
      goto LABEL_20;
    }
    sub_23C7E0988(*((_QWORD *)v16 - 2));
    sub_23C7E1A88();
    if (v1)
      break;
    v22 = sub_23C865394(v367[0]);
    v4 = 0;
    sub_23C7E087C();
    sub_23C8634E8(v18, v17, 0);
    v23 = sub_23C7E4DE0();
LABEL_20:
    sub_23C8634E8(v23, v24, v25);
    v27 = *(_QWORD *)(v22 + 16);
    v28 = *(_QWORD *)(v7 + 16);
    if (__OFADD__(v28, v27))
      goto LABEL_296;
    if (!sub_23C7DFC88() || v28 + v27 > *(_QWORD *)(v7 + 24) >> 1)
    {
      sub_23C7EF7C4();
      v7 = v29;
    }
    if (*(_QWORD *)(v22 + 16))
    {
      sub_23C7E6CDC();
      if (v31 != v32)
        goto LABEL_305;
      sub_23C865278(v7 + 168 * v30);
      swift_arrayInitWithCopy();
      if (v27)
      {
        v33 = *(_QWORD *)(v7 + 16);
        v32 = __OFADD__(v33, v27);
        v34 = v33 + v27;
        if (v32)
          goto LABEL_310;
        *(_QWORD *)(v7 + 16) = v34;
      }
    }
    else if (v27)
    {
      goto LABEL_300;
    }
    v16 += 24;
    v35 = sub_23C7DBCD0();
    if (!--v15)
      goto LABEL_56;
  }
  v50 = sub_23C7E4DE0();
LABEL_274:
  sub_23C8634E8(v50, v51, v52);
  v252 = sub_23C7E4DE0();
LABEL_275:
  v305 = sub_23C8634E8(v252, v253, v254);
  sub_23C8652BC(v305, v306, v307, v308, v309, v310, v311, v312, v320, v321, v322, v325, v327, v331, v335, v337, v341, v345, v348);
  sub_23C7DB624();
  sub_23C8634E8(v15, v17, 1);
  v303 = v15;
  v304 = v17;
LABEL_276:
  sub_23C7DEA64(v303, v304);
  sub_23C8634E8(v326, v330, 1);
LABEL_290:
  swift_bridgeObjectRelease();
  v314 = sub_23C7DB49C();
LABEL_291:
  sub_23C8634E8(v314, v315, v316);
  sub_23C7DE934();
LABEL_292:
  sub_23C7DE934();
  sub_23C7DB624();
LABEL_293:
  sub_23C7DEF28();
}

void sub_23C85FB0C()
{
  sub_23C86361C((uint64_t)&STACK[0x348]);
  sub_23C7DC484();
  sub_23C86544C();
  sub_23C9117B4();
  __break(1u);
  JUMPOUT(0x23C85FB58);
}

void sub_23C85FB70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;

  v4 = a2;
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    swift_retain();
    ((void (*)(uint64_t *__return_ptr, uint64_t))v7)(&v237, v4);
    if (v3)
    {
      v16 = v7;
      v17 = v6;
      v18 = 0;
      goto LABEL_222;
    }
    v8 = sub_23C85AAC4(v237);
    swift_bridgeObjectRelease();
    sub_23C8634E8(v7, v6, 0);
    goto LABEL_204;
  }
  v8 = MEMORY[0x24BEE4AF8];
  if ((v6 & 1) == 0)
  {
    v240 = MEMORY[0x24BEE4AF8];
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v10 = v6;
      swift_bridgeObjectRetain_n();
      v11 = v7;
      v12 = (char *)(v7 + 48);
      while (1)
      {
        v13 = *((_QWORD *)v12 - 2);
        v14 = *((_QWORD *)v12 - 1);
        v15 = *v12;
        v237 = v13;
        v238 = v14;
        v239 = v15;
        sub_23C8634D8(v13, v14, v15);
        sub_23C85FB70(&v236, &v237, a2);
        if (v3)
          break;
        v12 += 24;
        sub_23C8634E8(v13, v14, v15);
        sub_23C7FAF1C();
        if (!--v9)
        {
          sub_23C8634E8(v11, v10, 1);
          sub_23C8634E8(v11, v10, 1);
          v8 = v240;
          goto LABEL_204;
        }
      }
      sub_23C8634E8(v13, v14, v15);
      sub_23C8634E8(v11, v10, 1);
      swift_bridgeObjectRelease();
      v16 = v11;
      v17 = v10;
      goto LABEL_221;
    }
    goto LABEL_204;
  }
  v240 = MEMORY[0x24BEE4AF8];
  v19 = *(_QWORD *)(v7 + 16);
  if (!v19)
  {
LABEL_204:
    *a3 = v8;
    return;
  }
  v231 = v7 + 32;
  sub_23C8634D8(v7, v6, 1);
  swift_bridgeObjectRetain();
  v20 = 0;
  v212 = a3;
  v228 = v6;
  v230 = v7;
  v222 = v19;
  while (1)
  {
    v232 = v20;
    v21 = v231 + 24 * v20;
    v23 = *(_QWORD *)v21;
    v22 = *(_QWORD *)(v21 + 8);
    if ((*(_BYTE *)(v21 + 16) & 1) != 0)
      break;
    swift_retain_n();
    ((void (*)(uint64_t *__return_ptr, uint64_t))v23)(&v237, v4);
    if (v3)
    {
      sub_23C8634E8(v23, v22, 0);
      v181 = v23;
      v182 = v22;
      v183 = 0;
      goto LABEL_218;
    }
    sub_23C8634E8(v23, v22, 0);
    sub_23C8634E8(v23, v22, 0);
LABEL_201:
    v20 = v232 + 1;
    sub_23C7FAF1C();
    if (v232 + 1 == v19)
    {
      sub_23C8634E8(v7, v6, 1);
      sub_23C8634E8(v7, v6, 1);
      v8 = v240;
      a3 = v212;
      goto LABEL_204;
    }
  }
  v24 = *(_QWORD *)(v23 + 16);
  if ((v22 & 1) != 0)
  {
    if (v24)
    {
      v224 = *(_QWORD *)(v21 + 8);
      sub_23C8634D8(v23, v22, 1);
      swift_bridgeObjectRetain_n();
      v168 = v23;
      v169 = (char *)(v23 + 48);
      v170 = MEMORY[0x24BEE4AF8];
      do
      {
        v171 = *((_QWORD *)v169 - 2);
        v172 = *((_QWORD *)v169 - 1);
        v173 = *v169;
        v237 = v171;
        v238 = v172;
        v239 = v173;
        sub_23C8634D8(v171, v172, v173);
        sub_23C85FB70(&v236, &v237, v4);
        if (v3)
        {
          sub_23C8634E8(v171, v172, v173);
          sub_23C8634E8(v168, v224, 1);
          swift_bridgeObjectRelease();
          sub_23C8634E8(v168, v224, 1);
          sub_23C8634E8(v168, v224, 1);
          v7 = v230;
          v180 = v230;
          v6 = v228;
          goto LABEL_220;
        }
        sub_23C8634E8(v171, v172, v173);
        v174 = v236;
        v175 = *(_QWORD *)(v236 + 16);
        v176 = *(_QWORD *)(v170 + 16);
        if (__OFADD__(v176, v175))
        {
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
          return;
        }
        if (!swift_isUniquelyReferenced_nonNull_native() || v176 + v175 > *(_QWORD *)(v170 + 24) >> 1)
        {
          sub_23C7F1DE8();
          v170 = v177;
        }
        v4 = a2;
        if (*(_QWORD *)(v174 + 16))
        {
          if ((*(_QWORD *)(v170 + 24) >> 1) - *(_QWORD *)(v170 + 16) < v175)
            goto LABEL_230;
          swift_arrayInitWithCopy();
          if (v175)
          {
            v178 = *(_QWORD *)(v170 + 16);
            v68 = __OFADD__(v178, v175);
            v179 = v178 + v175;
            if (v68)
              goto LABEL_233;
            *(_QWORD *)(v170 + 16) = v179;
          }
        }
        else if (v175)
        {
          goto LABEL_229;
        }
        v169 += 24;
        swift_bridgeObjectRelease();
        --v24;
      }
      while (v24);
      sub_23C8634E8(v168, v224, 1);
      sub_23C8634E8(v168, v224, 1);
      sub_23C8634E8(v168, v224, 1);
      v6 = v228;
      v7 = v230;
      v19 = v222;
    }
    else
    {
LABEL_200:
      v6 = v228;
      v19 = v222;
    }
    goto LABEL_201;
  }
  if (!v24)
    goto LABEL_200;
  v227 = v23 + 32;
  sub_23C8634D8(v23, v22, 1);
  v223 = v22;
  sub_23C8634D8(v23, v22, 1);
  v214 = v23;
  swift_bridgeObjectRetain();
  v25 = 0;
  v26 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v27 = v227 + 24 * v25;
    v29 = *(_QWORD *)v27;
    v28 = *(_QWORD *)(v27 + 8);
    v229 = v25;
    if ((*(_BYTE *)(v27 + 16) & 1) == 0)
    {
      swift_retain_n();
      ((void (*)(uint64_t *__return_ptr, uint64_t))v29)(&v237, v4);
      if (v3)
      {
        sub_23C8634E8(v29, v28, 0);
        sub_23C8634E8(v29, v28, 0);
        sub_23C8634E8(v214, v223, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v214, v223, 1);
        sub_23C8634E8(v214, v223, 1);
        v6 = v228;
        goto LABEL_219;
      }
      sub_23C8634E8(v29, v28, 0);
      sub_23C8634E8(v29, v28, 0);
      v148 = v237;
      goto LABEL_171;
    }
    v30 = *(_QWORD *)(v29 + 16);
    v226 = v28;
    v233 = v30;
    if ((v28 & 1) != 0)
    {
      if (v30)
      {
        sub_23C8634D8(v29, v28, 1);
        swift_bridgeObjectRetain_n();
        v216 = v29;
        v151 = (char *)(v29 + 48);
        v148 = MEMORY[0x24BEE4AF8];
        do
        {
          v152 = *((_QWORD *)v151 - 2);
          v153 = *((_QWORD *)v151 - 1);
          v154 = *v151;
          v237 = v152;
          v238 = v153;
          v239 = v154;
          sub_23C8634D8(v152, v153, v154);
          sub_23C85FB70(&v236, &v237, v4);
          if (v3)
          {
            sub_23C8634E8(v152, v153, v154);
            sub_23C8634E8(v216, v226, 1);
            swift_bridgeObjectRelease();
            sub_23C8634E8(v216, v226, 1);
            sub_23C8634E8(v216, v226, 1);
            sub_23C8634E8(v214, v223, 1);
            swift_bridgeObjectRelease();
            sub_23C8634E8(v214, v223, 1);
            sub_23C8634E8(v214, v223, 1);
            v6 = v228;
            v7 = v230;
            goto LABEL_219;
          }
          sub_23C8634E8(v152, v153, v154);
          v155 = v236;
          v156 = *(_QWORD *)(v236 + 16);
          v157 = *(_QWORD *)(v148 + 16);
          if (__OFADD__(v157, v156))
            goto LABEL_231;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v159 = v148;
          if (!isUniquelyReferenced_nonNull_native || v157 + v156 > *(_QWORD *)(v148 + 24) >> 1)
          {
            sub_23C7F1DE8();
            v159 = v160;
          }
          v4 = a2;
          if (*(_QWORD *)(v155 + 16))
          {
            if ((*(_QWORD *)(v159 + 24) >> 1) - *(_QWORD *)(v159 + 16) < v156)
              goto LABEL_234;
            v148 = v159;
            swift_arrayInitWithCopy();
            if (v156)
            {
              v161 = *(_QWORD *)(v148 + 16);
              v68 = __OFADD__(v161, v156);
              v162 = v161 + v156;
              if (v68)
                goto LABEL_237;
              *(_QWORD *)(v148 + 16) = v162;
            }
          }
          else
          {
            v148 = v159;
            if (v156)
              goto LABEL_232;
          }
          v151 += 24;
          swift_bridgeObjectRelease();
          --v233;
        }
        while (v233);
        sub_23C8634E8(v216, v226, 1);
        sub_23C8634E8(v216, v226, 1);
        v149 = v216;
        v150 = v226;
LABEL_169:
        sub_23C8634E8(v149, v150, 1);
        v7 = v230;
        goto LABEL_171;
      }
      goto LABEL_170;
    }
    if (v30)
      break;
LABEL_170:
    v148 = MEMORY[0x24BEE4AF8];
LABEL_171:
    v163 = *(_QWORD *)(v148 + 16);
    v164 = *(_QWORD *)(v26 + 16);
    if (__OFADD__(v164, v163))
      goto LABEL_241;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v164 + v163 > *(_QWORD *)(v26 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v26 = v165;
    }
    if (*(_QWORD *)(v148 + 16))
    {
      if ((*(_QWORD *)(v26 + 24) >> 1) - *(_QWORD *)(v26 + 16) < v163)
        goto LABEL_247;
      swift_arrayInitWithCopy();
      if (v163)
      {
        v166 = *(_QWORD *)(v26 + 16);
        v68 = __OFADD__(v166, v163);
        v167 = v166 + v163;
        if (v68)
          goto LABEL_252;
        *(_QWORD *)(v26 + 16) = v167;
      }
    }
    else if (v163)
    {
      goto LABEL_242;
    }
    v25 = v229 + 1;
    swift_bridgeObjectRelease();
    if (v229 + 1 == v24)
    {
      sub_23C8634E8(v214, v223, 1);
      sub_23C8634E8(v214, v223, 1);
      sub_23C8634E8(v214, v223, 1);
      goto LABEL_200;
    }
  }
  v221 = v29 + 32;
  sub_23C8634D8(v29, v28, 1);
  sub_23C8634D8(v29, v28, 1);
  v215 = v29;
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = MEMORY[0x24BEE4AF8];
  v213 = v26;
  while (1)
  {
    v225 = v31;
    v33 = v221 + 24 * v31;
    v35 = *(_QWORD *)v33;
    v34 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 1) == 0)
    {
      v123 = v32;
      swift_retain_n();
      ((void (*)(uint64_t *__return_ptr, uint64_t))v35)(&v237, v4);
      if (v3)
      {
        sub_23C8634E8(v35, v34, 0);
        sub_23C8634E8(v35, v34, 0);
        sub_23C8634E8(v215, v28, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v215, v28, 1);
        sub_23C8634E8(v215, v28, 1);
        v6 = v228;
        v7 = v230;
        goto LABEL_217;
      }
      sub_23C8634E8(v35, v34, 0);
      sub_23C8634E8(v35, v34, 0);
      v122 = v237;
      v32 = v123;
      goto LABEL_140;
    }
    v36 = *(_QWORD *)(v35 + 16);
    if ((v34 & 1) == 0)
      break;
    if (v36)
    {
      v205 = *(_QWORD *)(v33 + 8);
      v207 = v32;
      sub_23C8634D8(v35, v34, 1);
      swift_bridgeObjectRetain_n();
      v203 = v35;
      v124 = (char *)(v35 + 48);
      v125 = MEMORY[0x24BEE4AF8];
      do
      {
        v126 = *((_QWORD *)v124 - 2);
        v127 = *((_QWORD *)v124 - 1);
        v128 = *v124;
        v237 = v126;
        v238 = v127;
        v239 = v128;
        sub_23C8634D8(v126, v127, v128);
        sub_23C85FB70(&v236, &v237, v4);
        if (v3)
        {
          sub_23C8634E8(v126, v127, v128);
          sub_23C8634E8(v203, v205, 1);
          swift_bridgeObjectRelease();
          sub_23C8634E8(v203, v205, 1);
          sub_23C8634E8(v203, v205, 1);
          sub_23C8634E8(v215, v226, 1);
          swift_bridgeObjectRelease();
          sub_23C8634E8(v215, v226, 1);
          sub_23C8634E8(v215, v226, 1);
          v6 = v228;
          v7 = v230;
          goto LABEL_217;
        }
        sub_23C8634E8(v126, v127, v128);
        v129 = v236;
        v130 = *(_QWORD *)(v236 + 16);
        v131 = *(_QWORD *)(v125 + 16);
        if (__OFADD__(v131, v130))
          goto LABEL_235;
        v132 = swift_isUniquelyReferenced_nonNull_native();
        v133 = v125;
        if (!v132 || v131 + v130 > *(_QWORD *)(v125 + 24) >> 1)
        {
          sub_23C7F1DE8();
          v133 = v134;
        }
        v4 = a2;
        if (*(_QWORD *)(v129 + 16))
        {
          if ((*(_QWORD *)(v133 + 24) >> 1) - *(_QWORD *)(v133 + 16) < v130)
            goto LABEL_238;
          v125 = v133;
          swift_arrayInitWithCopy();
          if (v130)
          {
            v135 = *(_QWORD *)(v125 + 16);
            v68 = __OFADD__(v135, v130);
            v136 = v135 + v130;
            if (v68)
              goto LABEL_243;
            *(_QWORD *)(v125 + 16) = v136;
          }
        }
        else
        {
          v125 = v133;
          if (v130)
            goto LABEL_236;
        }
        v124 += 24;
        swift_bridgeObjectRelease();
        --v36;
      }
      while (v36);
      sub_23C8634E8(v203, v205, 1);
      sub_23C8634E8(v203, v205, 1);
      sub_23C8634E8(v203, v205, 1);
      v32 = v207;
      v122 = v125;
      goto LABEL_139;
    }
LABEL_138:
    v122 = MEMORY[0x24BEE4AF8];
LABEL_139:
    v26 = v213;
LABEL_140:
    v137 = *(_QWORD *)(v122 + 16);
    v138 = *(_QWORD *)(v32 + 16);
    if (__OFADD__(v138, v137))
      goto LABEL_248;
    v139 = v122;
    v140 = v32;
    v141 = swift_isUniquelyReferenced_nonNull_native();
    v142 = v140;
    if ((v141 & 1) == 0 || v138 + v137 > *(_QWORD *)(v140 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v142 = v143;
    }
    v28 = v226;
    if (*(_QWORD *)(v139 + 16))
    {
      if ((*(_QWORD *)(v142 + 24) >> 1) - *(_QWORD *)(v142 + 16) < v137)
        goto LABEL_253;
      v144 = v142;
      swift_arrayInitWithCopy();
      v145 = v233;
      if (v137)
      {
        v146 = *(_QWORD *)(v144 + 16);
        v68 = __OFADD__(v146, v137);
        v147 = v146 + v137;
        if (v68)
          goto LABEL_257;
        *(_QWORD *)(v144 + 16) = v147;
      }
    }
    else
    {
      v144 = v142;
      v145 = v233;
      if (v137)
        goto LABEL_249;
    }
    v31 = v225 + 1;
    swift_bridgeObjectRelease();
    v32 = v144;
    if (v225 + 1 == v145)
    {
      v148 = v144;
      sub_23C8634E8(v215, v226, 1);
      sub_23C8634E8(v215, v226, 1);
      v149 = v215;
      v150 = v226;
      goto LABEL_169;
    }
  }
  if (!v36)
    goto LABEL_138;
  v201 = *(_QWORD *)(v35 + 16);
  v206 = v32;
  v211 = v35 + 32;
  sub_23C8634D8(v35, v34, 1);
  v204 = v34;
  sub_23C8634D8(v35, v34, 1);
  v202 = v35;
  swift_bridgeObjectRetain();
  v37 = 0;
  v38 = MEMORY[0x24BEE4AF8];
  v26 = v213;
  while (1)
  {
    v39 = v211 + 24 * v37;
    v41 = *(_QWORD *)v39;
    v40 = *(_QWORD *)(v39 + 8);
    v217 = v37;
    if ((*(_BYTE *)(v39 + 16) & 1) == 0)
    {
      v94 = v38;
      swift_retain_n();
      ((void (*)(uint64_t *__return_ptr, uint64_t))v41)(&v237, v4);
      v95 = v41;
      v7 = v230;
      if (v3)
      {
        sub_23C8634E8(v95, v40, 0);
        sub_23C8634E8(v95, v40, 0);
        sub_23C8634E8(v202, v204, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v202, v204, 1);
        sub_23C8634E8(v202, v204, 1);
        v6 = v228;
        goto LABEL_216;
      }
      sub_23C8634E8(v95, v40, 0);
      sub_23C8634E8(v95, v40, 0);
      v93 = v237;
      v38 = v94;
      goto LABEL_109;
    }
    v209 = *(_QWORD *)v39;
    v42 = *(_QWORD *)(v41 + 16);
    v7 = v230;
    v210 = *(_QWORD *)(v39 + 8);
    if ((v40 & 1) != 0)
    {
      if (v42)
      {
        v196 = v38;
        sub_23C8634D8(v209, v40, 1);
        swift_bridgeObjectRetain_n();
        v96 = (char *)(v209 + 48);
        v97 = MEMORY[0x24BEE4AF8];
        do
        {
          v98 = v24;
          v99 = v42;
          v100 = *((_QWORD *)v96 - 2);
          v101 = *((_QWORD *)v96 - 1);
          v102 = *v96;
          v237 = v100;
          v238 = v101;
          v239 = v102;
          sub_23C8634D8(v100, v101, v102);
          sub_23C85FB70(&v236, &v237, v4);
          if (v3)
          {
            sub_23C8634E8(v100, v101, v102);
            sub_23C8634E8(v209, v210, 1);
            swift_bridgeObjectRelease();
            sub_23C8634E8(v209, v210, 1);
            sub_23C8634E8(v209, v210, 1);
            sub_23C8634E8(v202, v204, 1);
            swift_bridgeObjectRelease();
            sub_23C8634E8(v202, v204, 1);
            sub_23C8634E8(v202, v204, 1);
            v6 = v228;
            v7 = v230;
            goto LABEL_216;
          }
          sub_23C8634E8(v100, v101, v102);
          v103 = v236;
          v104 = *(_QWORD *)(v236 + 16);
          v105 = *(_QWORD *)(v97 + 16);
          if (__OFADD__(v105, v104))
            goto LABEL_239;
          v106 = swift_isUniquelyReferenced_nonNull_native();
          v107 = v97;
          if (!v106 || v105 + v104 > *(_QWORD *)(v97 + 24) >> 1)
          {
            sub_23C7F1DE8();
            v107 = v108;
          }
          v4 = a2;
          v109 = v99;
          v24 = v98;
          if (*(_QWORD *)(v103 + 16))
          {
            if ((*(_QWORD *)(v107 + 24) >> 1) - *(_QWORD *)(v107 + 16) < v104)
              goto LABEL_244;
            v97 = v107;
            swift_arrayInitWithCopy();
            if (v104)
            {
              v110 = *(_QWORD *)(v97 + 16);
              v68 = __OFADD__(v110, v104);
              v111 = v110 + v104;
              if (v68)
                goto LABEL_250;
              *(_QWORD *)(v97 + 16) = v111;
            }
          }
          else
          {
            v97 = v107;
            if (v104)
              goto LABEL_240;
          }
          v96 += 24;
          swift_bridgeObjectRelease();
          v42 = v109 - 1;
        }
        while (v42);
        sub_23C8634E8(v209, v210, 1);
        sub_23C8634E8(v209, v210, 1);
        sub_23C8634E8(v209, v210, 1);
        v38 = v196;
        v93 = v97;
        v26 = v213;
        goto LABEL_109;
      }
      goto LABEL_108;
    }
    if (v42)
      break;
LABEL_108:
    v93 = MEMORY[0x24BEE4AF8];
LABEL_109:
    v112 = *(_QWORD *)(v93 + 16);
    v113 = *(_QWORD *)(v38 + 16);
    if (__OFADD__(v113, v112))
      goto LABEL_254;
    v114 = v93;
    v115 = v38;
    v116 = swift_isUniquelyReferenced_nonNull_native();
    v117 = v115;
    if ((v116 & 1) == 0 || v113 + v112 > *(_QWORD *)(v115 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v117 = v118;
    }
    if (*(_QWORD *)(v114 + 16))
    {
      if ((*(_QWORD *)(v117 + 24) >> 1) - *(_QWORD *)(v117 + 16) < v112)
        goto LABEL_258;
      v119 = v117;
      swift_arrayInitWithCopy();
      if (v112)
      {
        v120 = *(_QWORD *)(v119 + 16);
        v68 = __OFADD__(v120, v112);
        v121 = v120 + v112;
        if (v68)
          goto LABEL_264;
        *(_QWORD *)(v119 + 16) = v121;
      }
    }
    else
    {
      v119 = v117;
      if (v112)
        goto LABEL_255;
    }
    v37 = v217 + 1;
    swift_bridgeObjectRelease();
    v38 = v119;
    if (v217 + 1 == v201)
    {
      sub_23C8634E8(v202, v204, 1);
      sub_23C8634E8(v202, v204, 1);
      sub_23C8634E8(v202, v204, 1);
      v122 = v119;
      v32 = v206;
      goto LABEL_140;
    }
  }
  v195 = v38;
  v197 = v42;
  sub_23C8634D8(v209, v40, 1);
  sub_23C8634D8(v209, v40, 1);
  swift_bridgeObjectRetain();
  v43 = 0;
  v44 = MEMORY[0x24BEE4AF8];
  v191 = v24;
  while (1)
  {
    v208 = v43;
    v45 = v209 + 32 + 24 * v43;
    v47 = *(_QWORD *)v45;
    v46 = *(_QWORD *)(v45 + 8);
    if ((*(_BYTE *)(v45 + 16) & 1) == 0)
    {
      v199 = v44;
      swift_retain_n();
      ((void (*)(uint64_t *__return_ptr, uint64_t))v47)(&v237, v4);
      if (v3)
      {
        sub_23C8634E8(v47, v46, 0);
        sub_23C8634E8(v47, v46, 0);
        sub_23C8634E8(v209, v40, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v209, v40, 1);
        v184 = v209;
        v185 = v40;
        goto LABEL_213;
      }
      sub_23C8634E8(v47, v46, 0);
      sub_23C8634E8(v47, v46, 0);
      v70 = v237;
LABEL_61:
      v44 = v199;
      goto LABEL_79;
    }
    v48 = *(_QWORD *)(v47 + 16);
    if ((v46 & 1) == 0)
      break;
    if (v48)
    {
      v200 = v44;
      v190 = *(_QWORD *)(v45 + 8);
      sub_23C8634D8(v47, v46, 1);
      swift_bridgeObjectRetain_n();
      v188 = v47;
      v71 = (char *)(v47 + 48);
      v72 = MEMORY[0x24BEE4AF8];
      do
      {
        v73 = *((_QWORD *)v71 - 2);
        v74 = *((_QWORD *)v71 - 1);
        v75 = *v71;
        v237 = v73;
        v238 = v74;
        v239 = v75;
        sub_23C8634D8(v73, v74, v75);
        sub_23C85FB70(&v236, &v237, v4);
        if (v3)
        {
          sub_23C8634E8(v73, v74, v75);
          sub_23C8634E8(v188, v190, 1);
          swift_bridgeObjectRelease();
          sub_23C8634E8(v188, v190, 1);
          sub_23C8634E8(v188, v190, 1);
          sub_23C8634E8(v209, v210, 1);
          swift_bridgeObjectRelease();
          sub_23C8634E8(v209, v210, 1);
          sub_23C8634E8(v209, v210, 1);
          v6 = v228;
          v7 = v230;
          goto LABEL_215;
        }
        sub_23C8634E8(v73, v74, v75);
        v76 = v236;
        v77 = *(_QWORD *)(v236 + 16);
        v78 = *(_QWORD *)(v72 + 16);
        if (__OFADD__(v78, v77))
          goto LABEL_245;
        v79 = swift_isUniquelyReferenced_nonNull_native();
        v80 = v72;
        if (!v79 || v78 + v77 > *(_QWORD *)(v72 + 24) >> 1)
        {
          sub_23C7F1DE8();
          v80 = v81;
        }
        v7 = v230;
        v4 = a2;
        if (*(_QWORD *)(v76 + 16))
        {
          if ((*(_QWORD *)(v80 + 24) >> 1) - *(_QWORD *)(v80 + 16) < v77)
            goto LABEL_251;
          v72 = v80;
          swift_arrayInitWithCopy();
          if (v77)
          {
            v82 = *(_QWORD *)(v72 + 16);
            v68 = __OFADD__(v82, v77);
            v83 = v82 + v77;
            if (v68)
              goto LABEL_256;
            *(_QWORD *)(v72 + 16) = v83;
          }
        }
        else
        {
          v72 = v80;
          if (v77)
            goto LABEL_246;
        }
        v71 += 24;
        swift_bridgeObjectRelease();
        --v48;
      }
      while (v48);
      sub_23C8634E8(v188, v190, 1);
      sub_23C8634E8(v188, v190, 1);
      sub_23C8634E8(v188, v190, 1);
      v44 = v200;
      v70 = v72;
      goto LABEL_78;
    }
LABEL_77:
    v70 = MEMORY[0x24BEE4AF8];
LABEL_78:
    v24 = v191;
LABEL_79:
    v220 = v70;
    v84 = *(_QWORD *)(v70 + 16);
    v85 = *(_QWORD *)(v44 + 16);
    if (__OFADD__(v85, v84))
      goto LABEL_259;
    v86 = v44;
    v87 = swift_isUniquelyReferenced_nonNull_native();
    v88 = v86;
    if ((v87 & 1) == 0 || v85 + v84 > *(_QWORD *)(v86 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v88 = v89;
    }
    v40 = v210;
    if (*(_QWORD *)(v220 + 16))
    {
      if ((*(_QWORD *)(v88 + 24) >> 1) - *(_QWORD *)(v88 + 16) < v84)
        goto LABEL_263;
      v90 = v88;
      swift_arrayInitWithCopy();
      if (v84)
      {
        v91 = *(_QWORD *)(v90 + 16);
        v68 = __OFADD__(v91, v84);
        v92 = v91 + v84;
        if (v68)
          goto LABEL_266;
        *(_QWORD *)(v90 + 16) = v92;
      }
    }
    else
    {
      v90 = v88;
      if (v84)
        goto LABEL_260;
    }
    v43 = v208 + 1;
    swift_bridgeObjectRelease();
    v44 = v90;
    if (v208 + 1 == v197)
    {
      sub_23C8634E8(v209, v210, 1);
      sub_23C8634E8(v209, v210, 1);
      sub_23C8634E8(v209, v210, 1);
      v93 = v90;
      v38 = v195;
      goto LABEL_109;
    }
  }
  if (!v48)
    goto LABEL_77;
  v192 = *(_QWORD *)(v47 + 16);
  v199 = v44;
  v194 = v47 + 32;
  sub_23C8634D8(v47, v46, 1);
  v189 = v46;
  sub_23C8634D8(v47, v46, 1);
  v187 = v47;
  swift_bridgeObjectRetain();
  v49 = 0;
  v50 = MEMORY[0x24BEE4AF8];
  v24 = v191;
  while (1)
  {
    v51 = v194 + 24 * v49;
    v53 = *(_QWORD *)v51;
    v52 = *(_QWORD *)(v51 + 8);
    v198 = v49;
    if ((*(_BYTE *)(v51 + 16) & 1) == 0)
      break;
    v193 = *(_QWORD *)(v51 + 8);
    v54 = MEMORY[0x24BEE4AF8];
    if ((v52 & 1) != 0)
    {
      v236 = MEMORY[0x24BEE4AF8];
      v60 = *(_QWORD *)(v53 + 16);
      if (v60)
      {
        v218 = v50;
        sub_23C8634D8(v53, v193, 1);
        swift_bridgeObjectRetain_n();
        v186 = v53;
        v61 = (char *)(v53 + 48);
        while (1)
        {
          v57 = *((_QWORD *)v61 - 2);
          v58 = *((_QWORD *)v61 - 1);
          v59 = *v61;
          v237 = v57;
          v238 = v58;
          v239 = v59;
          sub_23C8634D8(v57, v58, v59);
          sub_23C85FB70(&v235, &v237, a2);
          if (v3)
            goto LABEL_211;
          v61 += 24;
          sub_23C8634E8(v57, v58, v59);
          sub_23C7FAF1C();
          if (!--v60)
          {
LABEL_45:
            sub_23C8634E8(v186, v193, 1);
            sub_23C8634E8(v186, v193, 1);
            sub_23C8634E8(v186, v193, 1);
            v54 = v236;
            v4 = a2;
            goto LABEL_46;
          }
        }
      }
    }
    else
    {
      v236 = MEMORY[0x24BEE4AF8];
      v55 = *(_QWORD *)(v53 + 16);
      if (v55)
      {
        v218 = v50;
        sub_23C8634D8(v53, v193, 1);
        swift_bridgeObjectRetain_n();
        v186 = v53;
        v56 = (char *)(v53 + 48);
        while (1)
        {
          v57 = *((_QWORD *)v56 - 2);
          v58 = *((_QWORD *)v56 - 1);
          v59 = *v56;
          v237 = v57;
          v238 = v58;
          v239 = v59;
          sub_23C8634D8(v57, v58, v59);
          sub_23C86177C((uint64_t)&v237, a2, &v235);
          if (v3)
            break;
          v56 += 24;
          sub_23C8634E8(v57, v58, v59);
          sub_23C7FAF1C();
          if (!--v55)
            goto LABEL_45;
        }
LABEL_211:
        sub_23C8634E8(v57, v58, v59);
        sub_23C8634E8(v186, v193, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v186, v193, 1);
        sub_23C8634E8(v186, v193, 1);
        sub_23C8634E8(v187, v189, 1);
        swift_bridgeObjectRelease();
        sub_23C8634E8(v187, v189, 1);
        sub_23C8634E8(v187, v189, 1);
        v7 = v230;
        goto LABEL_212;
      }
    }
LABEL_47:
    v219 = v54;
    v62 = *(_QWORD *)(v54 + 16);
    v63 = *(_QWORD *)(v50 + 16);
    if (__OFADD__(v63, v62))
      goto LABEL_261;
    v64 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v63 + v62 > *(_QWORD *)(v64 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v64 = v65;
    }
    v7 = v230;
    if (*(_QWORD *)(v219 + 16))
    {
      if ((*(_QWORD *)(v64 + 24) >> 1) - *(_QWORD *)(v64 + 16) < v62)
        goto LABEL_265;
      v66 = v64;
      swift_arrayInitWithCopy();
      if (v62)
      {
        v67 = *(_QWORD *)(v64 + 16);
        v68 = __OFADD__(v67, v62);
        v69 = v67 + v62;
        if (v68)
          goto LABEL_267;
        *(_QWORD *)(v64 + 16) = v69;
      }
    }
    else
    {
      v66 = v64;
      if (v62)
        goto LABEL_262;
    }
    v49 = v198 + 1;
    swift_bridgeObjectRelease();
    v50 = v66;
    if (v198 + 1 == v192)
    {
      sub_23C8634E8(v187, v189, 1);
      sub_23C8634E8(v187, v189, 1);
      sub_23C8634E8(v187, v189, 1);
      v70 = v66;
      goto LABEL_61;
    }
  }
  v218 = v50;
  swift_retain_n();
  ((void (*)(uint64_t *__return_ptr, uint64_t))v53)(&v237, v4);
  if (!v3)
  {
    sub_23C8634E8(v53, v52, 0);
    sub_23C8634E8(v53, v52, 0);
    v54 = v237;
LABEL_46:
    v50 = v218;
    goto LABEL_47;
  }
  sub_23C8634E8(v53, v52, 0);
  sub_23C8634E8(v53, v52, 0);
  sub_23C8634E8(v187, v189, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v187, v189, 1);
  sub_23C8634E8(v187, v189, 1);
LABEL_212:
  sub_23C8634E8(v209, v210, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v209, v210, 1);
  v184 = v209;
  v185 = v210;
LABEL_213:
  sub_23C8634E8(v184, v185, 1);
  v6 = v228;
LABEL_215:
  sub_23C8634E8(v202, v204, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v202, v204, 1);
  sub_23C8634E8(v202, v204, 1);
LABEL_216:
  sub_23C8634E8(v215, v226, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v215, v226, 1);
  sub_23C8634E8(v215, v226, 1);
LABEL_217:
  sub_23C8634E8(v214, v223, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v214, v223, 1);
  v181 = v214;
  v182 = v223;
  v183 = 1;
LABEL_218:
  sub_23C8634E8(v181, v182, v183);
LABEL_219:
  v180 = v7;
LABEL_220:
  sub_23C8634E8(v180, v6, 1);
  swift_bridgeObjectRelease();
  v16 = v7;
  v17 = v6;
LABEL_221:
  v18 = 1;
LABEL_222:
  sub_23C8634E8(v16, v17, v18);
}

void sub_23C86177C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    swift_retain();
    ((void (*)(uint64_t *__return_ptr, uint64_t))v7)(&v37, a2);
    sub_23C8634E8(v7, v6, 0);
    if (v3)
      return;
    v10 = v37;
LABEL_36:
    *v5 = v10;
    return;
  }
  v8 = *(_QWORD *)(v7 + 16);
  if ((v6 & 1) != 0)
  {
    if (v8)
    {
      v36 = *(_QWORD *)(a1 + 8);
      v34 = a3;
      swift_bridgeObjectRetain_n();
      v35 = v7;
      v24 = (char *)(v7 + 48);
      v10 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v25 = *((_QWORD *)v24 - 2);
        v26 = *((_QWORD *)v24 - 1);
        v27 = *v24;
        v37 = v25;
        v38 = v26;
        v39 = v27;
        sub_23C8634D8(v25, v26, v27);
        sub_23C85FB70(&v40, &v37, a2);
        v14 = v25;
        v15 = v26;
        v16 = v27;
        if (v3)
          goto LABEL_37;
        sub_23C8634E8(v25, v26, v27);
        v28 = v40;
        v29 = *(_QWORD *)(v40 + 16);
        v30 = *(_QWORD *)(v10 + 16);
        if (__OFADD__(v30, v29))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (!swift_isUniquelyReferenced_nonNull_native() || v30 + v29 > *(_QWORD *)(v10 + 24) >> 1)
        {
          sub_23C7F1DE8();
          v10 = v31;
        }
        if (*(_QWORD *)(v28 + 16))
        {
          if ((*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16) < v29)
            goto LABEL_44;
          swift_arrayInitWithCopy();
          if (v29)
          {
            v32 = *(_QWORD *)(v10 + 16);
            v22 = __OFADD__(v32, v29);
            v33 = v32 + v29;
            if (v22)
              goto LABEL_45;
            *(_QWORD *)(v10 + 16) = v33;
          }
        }
        else if (v29)
        {
          goto LABEL_42;
        }
        v24 += 24;
        swift_bridgeObjectRelease();
        if (!--v8)
        {
LABEL_34:
          sub_23C8634E8(v35, v36, 1);
          sub_23C8634E8(v35, v36, 1);
          v5 = v34;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_35;
  }
  if (!v8)
  {
LABEL_35:
    v10 = MEMORY[0x24BEE4AF8];
    goto LABEL_36;
  }
  v36 = *(_QWORD *)(a1 + 8);
  v34 = a3;
  swift_bridgeObjectRetain_n();
  v35 = v7;
  v9 = (char *)(v7 + 48);
  v10 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v11 = *((_QWORD *)v9 - 2);
    v12 = *((_QWORD *)v9 - 1);
    v13 = *v9;
    v37 = v11;
    v38 = v12;
    v39 = v13;
    sub_23C8634D8(v11, v12, v13);
    sub_23C86177C(&v40, &v37, a2);
    v14 = v11;
    v15 = v12;
    v16 = v13;
    if (v3)
      break;
    sub_23C8634E8(v11, v12, v13);
    v17 = v40;
    v18 = *(_QWORD *)(v40 + 16);
    v19 = *(_QWORD *)(v10 + 16);
    if (__OFADD__(v19, v18))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v19 + v18 > *(_QWORD *)(v10 + 24) >> 1)
    {
      sub_23C7F1DE8();
      v10 = v20;
    }
    if (*(_QWORD *)(v17 + 16))
    {
      if ((*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16) < v18)
        goto LABEL_43;
      swift_arrayInitWithCopy();
      if (v18)
      {
        v21 = *(_QWORD *)(v10 + 16);
        v22 = __OFADD__(v21, v18);
        v23 = v21 + v18;
        if (v22)
          goto LABEL_46;
        *(_QWORD *)(v10 + 16) = v23;
      }
    }
    else if (v18)
    {
      goto LABEL_41;
    }
    v9 += 24;
    swift_bridgeObjectRelease();
    if (!--v8)
      goto LABEL_34;
  }
LABEL_37:
  sub_23C8634E8(v14, v15, v16);
  sub_23C8634E8(v35, v36, 1);
  swift_bridgeObjectRelease();
  sub_23C8634E8(v35, v36, 1);
}

void sub_23C861AF0()
{
  uint64_t v0;
  _BYTE v1[168];

  sub_23C80A96C((uint64_t)v1);
  sub_23C86550C((uint64_t)v1, v0, &qword_25430CF58);
}

uint64_t sub_23C861B2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return a3(a2, a1);
}

uint64_t sub_23C861B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11[2];
  __int128 v12;
  __int16 v13;
  char v14;

  swift_retain();
  swift_retain();
  sub_23C85A898(a3, a2, a1);
  v11[0] = 4476481;
  v11[1] = 0xE300000000000000;
  v12 = xmmword_23C914530;
  v13 = 256;
  v14 = 0;
  sub_23C7E79A8(&qword_25430B3B0);
  sub_23C8636B0();
  swift_getKeyPath();
  swift_retain();
  sub_23C907A54();
  v9 = v8;
  swift_release();
  sub_23C87019C(v11, v9, a4);
  sub_23C7DE934();
  return sub_23C7E072C();
}

uint64_t sub_23C861C50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v6 = *(_QWORD **)(a2 + 16);
  v5 = *(_QWORD **)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v8 || (v9 = sub_23C911A18(), result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (v6)
      {
        if ((sub_23C8482D8(v2, v6) & 1) != 0)
        {
          if (v3)
          {
            if (v5 && (sub_23C8482D8(v3, v5) & 1) != 0)
              goto LABEL_12;
          }
          else if (!v5)
          {
LABEL_12:
            sub_23C865520((uint64_t)v2);
            sub_23C7E072C();
            sub_23C7DB624();
            return v4 ^ v7 ^ 1u;
          }
        }
        sub_23C865520((uint64_t)v2);
        sub_23C7DB624();
        sub_23C7DE934();
        return 0;
      }
      sub_23C865520((uint64_t)v2);
    }
    else if (!v6)
    {
      return v4 ^ v7 ^ 1u;
    }
    v11 = sub_23C7EBCB0();
    sub_23C800ADC(v11);
    v12 = sub_23C7DF8B0();
    sub_23C7E13C4(v12);
    v13 = sub_23C7EBCB0();
    sub_23C7E13C4(v13);
    return 0;
  }
  return result;
}

void sub_23C861D50()
{
  _QWORD *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  const void *v31;
  char v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  _QWORD *v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  _BYTE *i;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t (*v106)(uint64_t);
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  _BYTE v124[216];
  _BYTE v125[216];
  _QWORD v126[27];
  _QWORD v127[27];
  uint64_t v128[27];
  _BYTE v129[224];
  _BYTE v130[216];
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[6];
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t);
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  sub_23C7DE8EC();
  v2 = v1;
  v4 = v3;
  v150 = *(_OWORD *)v0;
  v117 = v0;
  v151 = v0[2];
  v5 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)&v150 + 1);
  v7 = (_QWORD)v150 == *(_QWORD *)v1 && *((_QWORD *)&v150 + 1) == *((_QWORD *)v1 + 1);
  if (!v7 && (sub_23C911A18() & 1) == 0)
    goto LABEL_9;
  sub_23C86539C((uint64_t)&v151, (uint64_t)&v152);
  sub_23C86539C((uint64_t)&v152, (uint64_t)&v153);
  v8 = v153;
  if (!v153)
  {
    v8 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    sub_23C863A64((uint64_t)&v152);
    swift_retain();
    goto LABEL_12;
  }
  sub_23C863A64((uint64_t)&v152);
  v9 = swift_retain();
  v8 = sub_23C880BD0(v9);
  sub_23C863A8C((uint64_t)&v152);
  swift_release();
  if (!v8)
  {
LABEL_9:
    sub_23C863A5C(&v131);
    sub_23C863E08((uint64_t)&v131, (uint64_t)v125, &qword_256BCCAB0);
    goto LABEL_97;
  }
LABEL_12:
  v11 = v0[5];
  v10 = v0[6];
  v12 = *((_QWORD *)v2 + 5);
  v13 = *((_QWORD *)v2 + 6);
  v115 = v4;
  v116 = v2;
  v110 = v150;
  v113 = v8;
  if (!v11)
  {
    v14 = (uint64_t (*)(uint64_t))*((_QWORD *)v2 + 5);
    v15 = (_QWORD *)*((_QWORD *)v2 + 6);
    if (!v12)
    {
      v111 = 0;
      v112 = (_QWORD *)*((_QWORD *)v2 + 6);
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  v14 = (uint64_t (*)(uint64_t))v117[5];
  v15 = (_QWORD *)v117[6];
  if (!v12)
  {
LABEL_16:
    v111 = v14;
    v112 = v15;
    v17 = sub_23C7EBCB0();
    sub_23C7F5610(v17);
    goto LABEL_18;
  }
  v16 = (_QWORD *)sub_23C7DB388();
  v16[2] = v11;
  v16[3] = v10;
  v16[4] = v12;
  v16[5] = v13;
  v112 = v16;
  swift_retain();
  v111 = sub_23C8651A8;
LABEL_18:
  v114 = v6;
  sub_23C7DBBB0();
  v18 = sub_23C7DF8B0();
  sub_23C7F5610(v18);
  sub_23C82B8B0();
  v20 = v19;
  v22 = v21;
  v23 = v117[11];
  v24 = v117[12];
  v148 = v24;
  v149 = v23;
  v25 = *(_QWORD *)(v23 + 16);
  if (!v25)
    goto LABEL_54;
  v26 = *((_QWORD *)v116 + 12);
  sub_23C863AB4((uint64_t)&v149);
  sub_23C863AB4((uint64_t)&v148);
  if (!*(_QWORD *)(v24 + 16))
    goto LABEL_100;
  v27 = (uint64_t *)(v23 + 40);
  while (1)
  {
    v29 = *(v27 - 1);
    v28 = *v27;
    sub_23C8652D4();
    sub_23C8653E8();
    if ((v30 & 1) == 0)
      goto LABEL_101;
    sub_23C86559C();
    sub_23C7E58D4(v130, v31);
    sub_23C7DF63C();
    sub_23C7E072C();
    v131 = v29;
    v132 = v28;
    sub_23C7E58D4(v133, v130);
    sub_23C7DC46C();
    sub_23C7DF63C();
    sub_23C81394C((uint64_t)&v131);
    if (!*(_QWORD *)(v26 + 16))
      goto LABEL_38;
    sub_23C7DC46C();
    sub_23C7EBCB0();
    sub_23C7E94B8();
    if ((v32 & 1) == 0)
    {
      sub_23C7E072C();
LABEL_38:
      v26 = v20;
      sub_23C7DF63C();
      v44 = sub_23C8655A8();
      v128[0] = v22;
      sub_23C865468();
      sub_23C7EE044();
      if (v37)
        goto LABEL_104;
      v6 = v45;
      v20 = v46;
      sub_23C7E79A8(&qword_25430B330);
      v38 = v128;
      if ((sub_23C865534() & 1) != 0)
      {
        v38 = (uint64_t *)v128[0];
        sub_23C8653E8();
        sub_23C7EDBAC();
        if (!v7)
          goto LABEL_108;
        v6 = v47;
      }
      if ((v20 & 1) != 0)
      {
        v99 = (void *)(*(_QWORD *)(v128[0] + 56) + 216 * v6);
        goto LABEL_111;
      }
      v22 = v128[0];
      v48 = (void *)sub_23C8651F0();
      sub_23C7E58D4(v48, v130);
      sub_23C865560();
      if (v37)
        goto LABEL_105;
      *(_QWORD *)(v22 + 16) = v49;
      sub_23C7DC46C();
      sub_23C865348();
      sub_23C7DC46C();
      if ((sub_23C865610() & 1) == 0)
      {
        sub_23C7E6954();
        v20 = v51;
      }
      sub_23C8655FC();
      if (v42)
      {
        sub_23C7E6954();
        v20 = v52;
      }
      *(_QWORD *)(v20 + 16) = v6;
      v50 = v20 + 16 * v44;
      *(_QWORD *)(v50 + 32) = v29;
      *(_QWORD *)(v50 + 40) = v28;
      sub_23C7E072C();
      sub_23C865324();
      goto LABEL_50;
    }
    sub_23C86559C();
    sub_23C7E58D4(v127, v33);
    sub_23C813864((uint64_t)v127);
    sub_23C7E072C();
    sub_23C7E58D4(v125, v130);
    sub_23C7E58D4(v124, v127);
    sub_23C85DAF4(v126, v124);
    sub_23C86539C((uint64_t)v126, (uint64_t)v128);
    sub_23C86539C((uint64_t)v128, (uint64_t)v129);
    if (sub_23C863768((uint64_t)v129) == 1)
    {
      sub_23C863D04((uint64_t)&v149);
      sub_23C863D04((uint64_t)&v148);
      sub_23C7F1754((uint64_t)v111);
      sub_23C813A5C((uint64_t)v127);
      sub_23C865324();
      sub_23C7E072C();
      swift_bridgeObjectRelease();
      swift_release();
      sub_23C863A5C(v124);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v90 = (uint64_t *)v124;
      goto LABEL_96;
    }
    v26 = v20;
    sub_23C86539C((uint64_t)v128, (uint64_t)v125);
    sub_23C813864((uint64_t)v125);
    v34 = sub_23C8655A8();
    v123 = (uint64_t *)v22;
    sub_23C865468();
    sub_23C7EE044();
    if (v37)
      goto LABEL_106;
    v6 = v35;
    v20 = v36;
    sub_23C7E79A8(&qword_25430B330);
    v38 = (uint64_t *)&v123;
    if ((sub_23C865534() & 1) != 0)
    {
      v38 = v123;
      sub_23C8653E8();
      sub_23C7EDBAC();
      if (!v7)
        goto LABEL_108;
      v6 = v39;
    }
    if ((v20 & 1) != 0)
      goto LABEL_113;
    v22 = (uint64_t)v123;
    v40 = (void *)sub_23C8651F0();
    sub_23C7E58D4(v40, v129);
    sub_23C865560();
    if (v37)
      goto LABEL_107;
    *(_QWORD *)(v22 + 16) = v41;
    sub_23C7DC46C();
    sub_23C865348();
    sub_23C7DC46C();
    if ((sub_23C865610() & 1) == 0)
    {
      sub_23C7E6954();
      v20 = v53;
    }
    sub_23C8655FC();
    if (v42)
    {
      sub_23C7E6954();
      v20 = v54;
    }
    *(_QWORD *)(v20 + 16) = v6;
    v43 = v20 + 16 * v34;
    *(_QWORD *)(v43 + 32) = v29;
    *(_QWORD *)(v43 + 40) = v28;
    sub_23C813A5C((uint64_t)v127);
    sub_23C865324();
    sub_23C7E072C();
    sub_23C863780(v128);
LABEL_50:
    if (!--v25)
      break;
    v27 += 2;
    if (!v38[2])
      goto LABEL_100;
  }
  sub_23C863D04((uint64_t)&v149);
  sub_23C863D04((uint64_t)&v148);
LABEL_54:
  v55 = v117;
  v57 = *((_QWORD *)v116 + 11);
  v56 = *((_QWORD *)v116 + 12);
  v128[0] = v57;
  v127[0] = v56;
  v58 = *(_QWORD *)(v57 + 16);
  if (v58)
  {
    sub_23C863AB4((uint64_t)v128);
    sub_23C863AB4((uint64_t)v127);
    if (*(_QWORD *)(v56 + 16))
    {
      v59 = (uint64_t *)(v57 + 40);
      v25 = 216;
      while (1)
      {
        v6 = *(v59 - 1);
        v60 = *v59;
        sub_23C8652D4();
        v61 = sub_23C7E94B8();
        if ((v62 & 1) == 0)
          goto LABEL_99;
        sub_23C7E58D4(v130, (const void *)(*(_QWORD *)(v56 + 56) + 216 * v61));
        sub_23C7DF63C();
        sub_23C7DB398();
        v131 = v6;
        v132 = v60;
        sub_23C7E58D4(v133, v130);
        sub_23C7E0808();
        sub_23C7DF63C();
        sub_23C81394C((uint64_t)&v131);
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_61;
        sub_23C7E0808();
        sub_23C865468();
        v64 = v63;
        sub_23C7DB398();
        if ((v64 & 1) != 0)
        {
          sub_23C865324();
          sub_23C7DB398();
        }
        else
        {
LABEL_61:
          v121 = v58;
          v65 = v56;
          v66 = v20;
          sub_23C7DF63C();
          sub_23C8655A8();
          v126[0] = v22;
          sub_23C865468();
          sub_23C7EE044();
          if (v37)
            goto LABEL_102;
          v25 = v67;
          v69 = v68;
          sub_23C7E79A8(&qword_25430B330);
          if ((sub_23C911778() & 1) != 0)
          {
            sub_23C7E94B8();
            sub_23C7EDBAC();
            if (!v7)
              goto LABEL_108;
            v25 = v70;
          }
          if ((v69 & 1) != 0)
            goto LABEL_109;
          v22 = v126[0];
          sub_23C865540(v126[0] + 8 * (v25 >> 6));
          v72 = (_QWORD *)(v71 + 16 * v25);
          *v72 = v6;
          v72[1] = v60;
          v73 = (void *)(*(_QWORD *)(v22 + 56) + 216 * v25);
          v25 = 216;
          sub_23C7E58D4(v73, v130);
          sub_23C865560();
          if (v37)
            goto LABEL_103;
          *(_QWORD *)(v22 + 16) = v74;
          sub_23C7E0808();
          sub_23C865348();
          sub_23C7E0808();
          v20 = v66;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23C7E6954();
            v20 = v77;
          }
          v56 = v65;
          v58 = v121;
          v75 = *(_QWORD *)(v20 + 16);
          if (v75 >= *(_QWORD *)(v20 + 24) >> 1)
          {
            sub_23C7E5EE8();
            sub_23C7F16C0();
            v20 = v78;
          }
          *(_QWORD *)(v20 + 16) = v75 + 1;
          v76 = v20 + 16 * v75;
          *(_QWORD *)(v76 + 32) = v6;
          *(_QWORD *)(v76 + 40) = v60;
          sub_23C7DB398();
          sub_23C865324();
        }
        if (!--v58)
          break;
        v59 += 2;
        if (!*(_QWORD *)(v56 + 16))
          goto LABEL_98;
      }
      sub_23C863D04((uint64_t)v128);
      sub_23C863D04((uint64_t)v127);
      v55 = v117;
      goto LABEL_77;
    }
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    sub_23C911B50();
    __break(1u);
LABEL_109:
    v99 = (void *)(*(_QWORD *)(v126[0] + 56) + 216 * v25);
LABEL_111:
    sub_23C7E58D4(v129, v99);
    sub_23C7E58D4(v99, v130);
    sub_23C865348();
    for (i = v129; ; i = v124)
    {
      sub_23C813A5C((uint64_t)i);
      sub_23C7DC484();
      sub_23C865364();
      sub_23C9117B4();
      __break(1u);
LABEL_113:
      v101 = (void *)(v123[7] + 216 * v6);
      sub_23C7E58D4(v124, v101);
      sub_23C7E58D4(v101, v129);
      sub_23C865348();
    }
  }
LABEL_77:
  v79 = sub_23C7DB388();
  sub_23C7E0718((void *)(v79 + 16), v116);
  v119 = v79;
  sub_23C7E0718((void *)(v79 + 184), v55);
  v122 = *((_QWORD *)v116 + 7);
  if (*(_QWORD *)(v122 + 16))
  {
    v118 = v116[64];
  }
  else
  {
    v118 = *((_BYTE *)v55 + 64);
    v122 = v55[7];
  }
  swift_bridgeObjectRetain();
  if ((v55[13] & 1) != 0)
  {
    v109 = 1;
    v80 = v116;
  }
  else
  {
    v80 = v116;
    v109 = v116[104];
  }
  v120 = v20;
  v81 = *((_QWORD *)v80 + 14);
  v82 = *((_QWORD *)v80 + 15);
  v83 = v81;
  if (!v81)
  {
    v83 = v55[14];
    v82 = v55[15];
    sub_23C7F5610(v83);
  }
  v107 = v82;
  v108 = v83;
  v84 = v55[16];
  v85 = v55[17];
  v86 = *((_QWORD *)v80 + 16);
  v87 = *((_QWORD *)v80 + 17);
  if (!v84)
  {
    v88 = (uint64_t (*)(uint64_t))*((_QWORD *)v80 + 16);
    v89 = (_QWORD *)*((_QWORD *)v80 + 17);
    if (!v86)
    {
      v106 = 0;
      v89 = (_QWORD *)*((_QWORD *)v80 + 17);
      goto LABEL_92;
    }
    goto LABEL_89;
  }
  v88 = (uint64_t (*)(uint64_t))v55[16];
  v89 = (_QWORD *)v55[17];
  if (!v86)
  {
LABEL_89:
    v106 = v88;
    sub_23C7F5610(v84);
    goto LABEL_92;
  }
  v89 = (_QWORD *)sub_23C7DB388();
  v89[2] = v84;
  v89[3] = v85;
  v89[4] = v86;
  v89[5] = v87;
  swift_retain();
  v106 = sub_23C863BF8;
LABEL_92:
  if (v116[161])
    v91 = (char *)v55;
  else
    v91 = v116;
  v102 = v116[161] & *((_BYTE *)v55 + 161);
  v105 = v91[160];
  v103 = *((_QWORD *)v91 + 18);
  v104 = *((_QWORD *)v91 + 19);
  v92 = v55[9];
  v93 = v55[10];
  v94 = *((_QWORD *)v116 + 9);
  v95 = *((_QWORD *)v116 + 10);
  sub_23C837C80(v116);
  sub_23C837C80(v55);
  sub_23C7F5610(v81);
  sub_23C7F5610(v86);
  swift_bridgeObjectRetain();
  sub_23C7DB3B8();
  v96 = sub_23C8340D4(v94, v95, v92, v93);
  v98 = v97;
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  v130[0] = v102;
  v131 = v110;
  v132 = v114;
  v133[0] = v113;
  v133[1] = sub_23C863BD8;
  v133[2] = v119;
  v133[3] = v111;
  v133[4] = v112;
  v133[5] = v122;
  v134 = v118;
  v135 = v96;
  v136 = v98;
  v137 = v120;
  v138 = v22;
  v139 = v109;
  v140 = v108;
  v141 = v107;
  v142 = v106;
  v143 = v89;
  v144 = v103;
  v145 = v104;
  v146 = v105;
  v147 = v102;
  nullsub_1(&v131);
  v90 = &v131;
LABEL_96:
  sub_23C863E08((uint64_t)v90, (uint64_t)v125, &qword_256BCCAB0);
  v4 = v115;
LABEL_97:
  sub_23C863E08((uint64_t)v125, v4, &qword_256BCCAB0);
  sub_23C7DBCB0();
}

_QWORD *sub_23C862844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v9;

  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(a2 + 24))(&v9);
  if (!v4)
  {
    result = v9;
    if (v9[2])
    {
      *a4 = v9;
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(a3 + 24))(a1);
    }
  }
  return result;
}

uint64_t sub_23C8628C0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD v9[5];
  _QWORD v10[5];

  v10[3] = &type metadata for SQLExpression;
  v10[4] = &protocol witness table for SQLExpression;
  v10[0] = sub_23C7DB388();
  a2(a1);
  if (v4)
    return sub_23C863C80((uint64_t)v10);
  v9[3] = &type metadata for SQLExpression;
  v9[4] = &protocol witness table for SQLExpression;
  v9[0] = sub_23C7DB388();
  a4(a1);
  && infix(_:_:)();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
}

uint64_t sub_23C8629CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  char v14;
  _QWORD v16[4];
  char v17;
  _QWORD v18[4];
  char v19;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = *((char *)a1 + 32);
  v8 = *(_QWORD *)v2;
  v9 = *(_QWORD *)(v2 + 8);
  v11 = *(_QWORD *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  v12 = *(char *)(v2 + 32);
  if (v12 < 0)
  {
    if (v7 < 0)
    {
      sub_23C7DBD10();
      sub_23C7E658C(v8, v9, v11);
      sub_23C865260();
      sub_23C7EDBF4();
      result = sub_23C7EE484();
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v3;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v2;
      *(_BYTE *)(a2 + 32) = v7;
      return result;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    v18[0] = *(_QWORD *)v2;
    v18[1] = v9;
    v18[2] = v11;
    v18[3] = v10;
    v19 = v12 & 1;
    v16[0] = v4;
    v16[1] = v3;
    v16[2] = v6;
    v16[3] = v5;
    v17 = v7 & 1;
    sub_23C7DBD10();
    sub_23C7E658C(v8, v9, v11);
    sub_23C7E658C(v8, v9, v11);
    sub_23C865260();
    v14 = sub_23C861C50((uint64_t)v18, (uint64_t)v16);
    sub_23C7EDBF4();
    sub_23C7EE484();
    sub_23C7EE484();
    result = sub_23C7EDBF4();
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = v12;
      swift_bridgeObjectRetain();
      return sub_23C800ADC(v11);
    }
    goto LABEL_7;
  }
  sub_23C7E658C(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  sub_23C865260();
  sub_23C7EDBF4();
  result = sub_23C7EE484();
LABEL_7:
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = -2;
  return result;
}

uint64_t sub_23C862B4C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_23C862B68 + 4 * byte_23C915E11[a2]))();
}

uint64_t sub_23C862B68(char a1)
{
  if (a1 == 1)
    return 1;
  else
    return 4 * (a1 != 0);
}

uint64_t sub_23C862C08(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  void *v15;
  void *v16;
  const void *v17;
  uint64_t result;
  uint64_t v19;
  _BYTE v20[176];

  sub_23C865350();
  sub_23C7E90DC();
  if (v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v11 = v8;
  v12 = v9;
  sub_23C7E79A8(&qword_256BCC5A0);
  if ((sub_23C911778() & 1) == 0)
    goto LABEL_5;
  v13 = sub_23C7E94B8();
  if ((v12 & 1) != (v14 & 1))
  {
LABEL_9:
    result = sub_23C911B50();
    __break(1u);
    return result;
  }
  v11 = v13;
LABEL_5:
  if ((v12 & 1) != 0)
  {
    v15 = (void *)(*(_QWORD *)(*v4 + 56) + 176 * v11);
    v16 = (void *)sub_23C7DF8B0();
    memmove(v16, v17, 0xABuLL);
    memcpy(v15, a1, 0xABuLL);
    return nullsub_1(v3);
  }
  else
  {
    sub_23C86A4C0(v11, a2, a3, (uint64_t)a1, *v4);
    sub_23C863CB4((uint64_t)v20);
    sub_23C86550C((uint64_t)v20, v19, qword_256BCBDE0);
    return sub_23C7DC46C();
  }
}

void sub_23C862D54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;

  sub_23C7DE8EC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_23C865350();
  sub_23C7E90DC();
  if (v11)
  {
    __break(1u);
LABEL_10:
    sub_23C911B50();
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  sub_23C7E79A8(&qword_25430CEF8);
  if ((sub_23C911778() & 1) != 0)
  {
    sub_23C7E94B8();
    sub_23C7EDBAC();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  v16 = *v1;
  if ((v13 & 1) != 0)
  {
    sub_23C863E08(*(_QWORD *)(v16 + 56) + 40 * v12, v0, (uint64_t *)&unk_25430D6B8);
    sub_23C863E08(v8, *(_QWORD *)(v16 + 56) + 40 * v12, (uint64_t *)&unk_25430D6B8);
    sub_23C7DBCB0();
  }
  else
  {
    sub_23C86A5C0(v12, v6, v4, v8, *v2);
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
    *(_QWORD *)(v0 + 16) = 0;
    *(_OWORD *)(v0 + 24) = xmmword_23C914530;
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_23C862E74@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t result;
  _BYTE v19[216];

  v5 = v4;
  v10 = *v4;
  v11 = sub_23C7E94B8();
  if (__OFADD__(*(_QWORD *)(v10 + 16), (v12 & 1) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v11;
  v14 = v12;
  sub_23C7E79A8(&qword_25430B330);
  if ((sub_23C911778() & 1) == 0)
    goto LABEL_5;
  v15 = sub_23C7E94B8();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    result = sub_23C911B50();
    __break(1u);
    return result;
  }
  v13 = v15;
LABEL_5:
  if ((v14 & 1) != 0)
  {
    v17 = (void *)(*(_QWORD *)(*v5 + 56) + 216 * v13);
    memmove(a4, v17, 0xD2uLL);
    memcpy(v17, a1, 0xD2uLL);
    return nullsub_1(a4);
  }
  else
  {
    sub_23C86A648(v13, a2, a3, (uint64_t)a1, *v5);
    sub_23C8638FC(v19);
    sub_23C863E08((uint64_t)v19, (uint64_t)a4, &qword_25430B2D8);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_23C862FE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;

  sub_23C7DE8EC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_23C7E94B8();
  sub_23C7E90DC();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v11;
  v15 = v12;
  sub_23C7E79A8(&qword_256BCA6D8);
  if ((sub_23C911778() & 1) == 0)
    goto LABEL_5;
  v16 = sub_23C7E94B8();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = sub_23C911B50();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v0;
  if ((v15 & 1) != 0)
  {
    v19 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 24 * v14);
    result = *v19;
    *v19 = v10;
    v19[1] = v8;
    v19[2] = v6;
  }
  else
  {
    sub_23C86A688(v14, v4, v2, v10, v8, v6, v18);
    sub_23C7DBCC8();
    return 0;
  }
  return result;
}

uint64_t sub_23C863104()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  sub_23C7DBBB0();
  v2 = sub_23C822464();
  v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return 1;
  swift_isUniquelyReferenced_nonNull_native();
  sub_23C7EFB28();
  sub_23C7E79A8(&qword_25430DBC0);
  sub_23C911778();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  v5 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v2);
  sub_23C7E3084();
  sub_23C911790();
  *v1 = v7;
  swift_bridgeObjectRelease();
  return v5;
}

double sub_23C86321C@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  char v5;
  char v6;
  double result;
  uint64_t v8;

  v2 = v1;
  sub_23C7E0808();
  v4 = sub_23C7E94B8();
  v6 = v5;
  sub_23C7DB398();
  if ((v6 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native();
    sub_23C7EFB28();
    sub_23C7E79A8(&qword_25430CEF8);
    sub_23C911778();
    swift_bridgeObjectRelease();
    sub_23C863E08(*(_QWORD *)(v8 + 56) + 40 * v4, a1, (uint64_t *)&unk_25430D6B8);
    sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
    sub_23C911790();
    *v2 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)&result = 1;
    *(_OWORD *)(a1 + 24) = xmmword_23C914530;
  }
  return result;
}

void sub_23C863338(void *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  char v5;
  char v6;
  _QWORD v7[27];

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_23C7E94B8();
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native();
    v7[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_23C7E79A8(&qword_25430B330);
    sub_23C911778();
    swift_bridgeObjectRelease();
    memmove(a1, (const void *)(*(_QWORD *)(v7[0] + 56) + 216 * v4), 0xD2uLL);
    sub_23C911790();
    *v2 = v7[0];
    swift_bridgeObjectRelease();
    nullsub_1(a1);
  }
  else
  {
    sub_23C8638FC(v7);
    sub_23C863E08((uint64_t)v7, (uint64_t)a1, &qword_25430B2D8);
  }
}

uint64_t sub_23C863488(uint64_t *a1, uint64_t *a2)
{
  return sub_23C85C30C(*a1, a1[1], *a2, a2[1]) & 1;
}

_QWORD *sub_23C8634B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *(*a4)(_QWORD *__return_ptr)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  result = sub_23C85C288(a1, a2, a3, a4);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_23C8634D8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t sub_23C8634E8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_release();
}

void *sub_23C8634F8(const void *a1, void *a2)
{
  initializeWithTake for SQLOrdering.Impl(a2, a1);
  return a2;
}

uint64_t sub_23C863534(uint64_t a1)
{
  return *(_BYTE *)(a1 + 162) & 6 | (*(unsigned __int16 *)(a1 + 160) >> 14) & 1u;
}

uint64_t sub_23C863548(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF | 0x24000;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_23C863594(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4;
  *(_BYTE *)(result + 2) = (v4 | 0x40000u) >> 16;
  return result;
}

uint64_t sub_23C8635D8(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4 | 0x4000;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_23C86361C(uint64_t result)
{
  int v1;

  v1 = (*(unsigned __int16 *)(result + 160) | (*(unsigned __int8 *)(result + 162) << 16)) & 0xF9BFFF;
  *(_WORD *)(result + 160) &= ~0x4000u;
  *(_BYTE *)(result + 162) = BYTE2(v1);
  return result;
}

uint64_t sub_23C863648(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4;
  *(_BYTE *)(result + 2) = (v4 | 0x20000u) >> 16;
  return result;
}

uint64_t sub_23C863690()
{
  return 24;
}

__n128 sub_23C86369C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

unint64_t sub_23C8636B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430B3B8;
  if (!qword_25430B3B8)
  {
    v1 = sub_23C7DDB10(&qword_25430B3B0);
    result = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25430B3B8);
  }
  return result;
}

uint64_t sub_23C8636F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C863718()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C863730()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C863754(uint64_t *a1@<X8>)
{
  sub_23C863FA0(a1);
}

uint64_t sub_23C863768(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t *sub_23C863780(uint64_t *a1)
{
  sub_23C8637F0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22]);
  return a1;
}

uint64_t sub_23C8637F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t result;

  if (a8)
  {
    sub_23C812DD0(a2, a3, a4, a5, a6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_23C7F1754(a12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7F1754(a21);
    return sub_23C7F1754(a23);
  }
  return result;
}

uint64_t sub_23C8638E0(uint64_t *a1)
{
  uint64_t v1;

  return sub_23C863488(a1, *(uint64_t **)(v1 + 16)) & 1;
}

void sub_23C8638FC(void *a1)
{
  bzero(a1, 0xD2uLL);
}

uint64_t sub_23C863904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 <= 0xFDu)
    return sub_23C812DD0(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t *sub_23C863918(uint64_t *a1)
{
  sub_23C863980(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_23C863980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_23C7F1754(a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C7F1754(a15);
    return sub_23C7F1754(a17);
  }
  return result;
}

void sub_23C863A5C(void *a1)
{
  bzero(a1, 0xA2uLL);
}

uint64_t sub_23C863A64(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_23C863A8C(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_23C863AB4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C863ADC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[7])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[16])
    swift_release();
  if (v0[18])
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[28])
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[37])
    swift_release();
  if (v0[39])
    swift_release();
  return swift_deallocObject();
}

_QWORD *sub_23C863BD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23C862844(a1, v2 + 16, v2 + 184, a2);
}

uint64_t sub_23C863BF8(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8628C0(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_23C863C18()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_23C863C80(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x2426261F0);
  return result;
}

double sub_23C863CB4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 155) = 0u;
  return result;
}

uint64_t sub_23C863CDC(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_23C863D04(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23C863D2C()
{
  void (*v0)(void);

  sub_23C7DF394();
  sub_23C7DA514();
  v0();
  sub_23C7E4C90();
}

uint64_t sub_23C863D64(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF | 0x44000;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_23C863DB0(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = *(_QWORD *)(result - 56) & 1;
  v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0xF981FF;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v3;
  *(_WORD *)result = v4;
  *(_BYTE *)(result + 2) = BYTE2(v4);
  return result;
}

uint64_t sub_23C863DF0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C85C438(a1, *(_QWORD *)(v1 + 16));
}

void sub_23C863E08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_23C7E79A8(a3);
  v3 = sub_23C7DF8B0();
  v4(v3);
  sub_23C7DB390();
}

void sub_23C863E44()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);

  sub_23C7DF394();
  v22 = v0;
  sub_23C7DA514();
  sub_23C863E80(v1, v8, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  sub_23C7E4C90();
}

uint64_t sub_23C863E80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22;

  v22 = a9 >> 1 != 4294967294 || a14 > 1;
  if (v22 || (a21 & 0xFE7E00) != 0)
    return sub_23C863F18(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22);
  return result;
}

uint64_t sub_23C863F18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22;

  v22 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v22 || (a21 & 0xFE7E00) != 0)
    return a22(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

void sub_23C863FA0(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = v4;
  sub_23C7DB390();
}

void type metadata accessor for DummyRow()
{
  sub_23C7DFB90();
}

void type metadata accessor for DummyRow.DummyIndex()
{
  sub_23C7DFB90();
}

uint64_t destroy for SQLRelation.Ordering.Element(uint64_t a1)
{
  return sub_23C8634E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12GRDBInternal11SQLRelationV8OrderingV7ElementOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C8634D8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLRelation.Ordering.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C8634D8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C8634E8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SQLRelation.Ordering.Element(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C8634E8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseFunction.Kind(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseFunction.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C864158(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SQLRelation.Ordering.Element()
{
  return &type metadata for SQLRelation.Ordering.Element;
}

uint64_t sub_23C864174(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23C864194(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

void type metadata accessor for SQLLimit()
{
  sub_23C7DFB90();
}

uint64_t sub_23C8641CC(uint64_t a1)
{
  uint64_t result;

  sub_23C812DD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 88))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 160))
    result = swift_release();
  if (*(_QWORD *)(a1 + 176))
    return swift_release();
  return result;
}

uint64_t sub_23C864274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_23C800AA4(v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v9)
  {
    v12 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13)
  {
    v16 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v13;
    *(_QWORD *)(a1 + 168) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  v17 = *(_QWORD *)(a2 + 176);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v17;
    *(_QWORD *)(a1 + 184) = v18;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  return a1;
}

uint64_t sub_23C8643F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_23C800AA4(v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v13 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_23C812DD0(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_retain();
  swift_release();
  v15 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v15;
      *(_QWORD *)(a1 + 96) = v16;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_23C7E7900(a1 + 88, &qword_256BCBDD0);
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v17;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_8:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v19 = *(_QWORD *)(a2 + 160);
  if (v18)
  {
    if (v19)
    {
      v20 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v19;
      *(_QWORD *)(a1 + 168) = v20;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_23C7E7900(a1 + 160, &qword_256BCBDD8);
  }
  else if (v19)
  {
    v21 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v19;
    *(_QWORD *)(a1 + 168) = v21;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_15:
  v22 = *(_QWORD *)(a2 + 176);
  if (!*(_QWORD *)(a1 + 176))
  {
    if (v22)
    {
      v24 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v22;
      *(_QWORD *)(a1 + 184) = v24;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    goto LABEL_22;
  }
  if (!v22)
  {
    sub_23C7E7900(a1 + 176, &qword_256BCBDD0);
    goto LABEL_21;
  }
  v23 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v22;
  *(_QWORD *)(a1 + 184) = v23;
  swift_retain();
  swift_release();
LABEL_22:
  v25 = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v25;
  return a1;
}

void *sub_23C864684(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD2uLL);
}

uint64_t sub_23C86468C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_23C812DD0(v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  v11 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v11;
      *(_QWORD *)(a1 + 96) = v12;
      swift_release();
      goto LABEL_6;
    }
    sub_23C7E7900(a1 + 88, &qword_256BCBDD0);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_6:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 160);
  v14 = *(_QWORD *)(a1 + 160);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  if (v14)
  {
    if (v13)
    {
      v15 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v13;
      *(_QWORD *)(a1 + 168) = v15;
      swift_release();
      goto LABEL_11;
    }
    sub_23C7E7900(a1 + 160, &qword_256BCBDD8);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_11:
  v16 = *(_QWORD *)(a2 + 176);
  if (!*(_QWORD *)(a1 + 176))
  {
LABEL_15:
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    goto LABEL_16;
  }
  if (!v16)
  {
    sub_23C7E7900(a1 + 176, &qword_256BCBDD0);
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v16;
  *(_QWORD *)(a1 + 184) = v17;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  return a1;
}

uint64_t sub_23C864858(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 210))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C864898(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 208) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 210) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 210) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLRelation.Child()
{
  sub_23C7DFB90();
}

uint64_t sub_23C86491C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DatabaseRegion()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C864958(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_23C8649A4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_23C8649E0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C864A20(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLRelation.Ordering()
{
  sub_23C7DFB90();
}

uint64_t destroy for SQLQualifiedSource()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void _s12GRDBInternal18SQLQualifiedSourceVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C7DB390();
}

_QWORD *sub_23C864AD0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SQLQualifiedSource(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for SQLSource()
{
  sub_23C7DFB90();
}

uint64_t sub_23C864B84(uint64_t a1)
{
  return sub_23C812DD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_23C864B98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C800AA4(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_23C864BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C800AA4(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_23C812DD0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t sub_23C864C68(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_23C812DD0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_23C864CB0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7F && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 126;
    }
    else
    {
      v2 = (*(_BYTE *)(a1 + 32) & 0x7E | (*(unsigned __int8 *)(a1 + 32) >> 7)) ^ 0x7F;
      if (v2 >= 0x7E)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_23C864CF8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_23C864D54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 7;
}

uint64_t sub_23C864D60(uint64_t result)
{
  *(_BYTE *)(result + 32) &= ~0x80u;
  return result;
}

uint64_t sub_23C864D70(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (a2 << 7);
  return result;
}

void type metadata accessor for SQLAssociationCondition()
{
  sub_23C7DFB90();
}

uint64_t sub_23C864D90(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C864DDC + 4 * byte_23C915E28[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C864E10 + 4 * byte_23C915E23[v4]))();
}

uint64_t sub_23C864E10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C864E18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C864E20);
  return result;
}

uint64_t sub_23C864E2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C864E34);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C864E38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C864E40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SQLRelation.Child.Kind()
{
  sub_23C7DFB90();
}

uint64_t sub_23C864E58(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C864E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_23C864F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_23C864FDC(a1 + 16);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_23C864FDC(uint64_t a1)
{
  destroy for TableRegion();
  return a1;
}

uint64_t sub_23C865010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  if (!v5)
  {
    sub_23C864FDC(a1 + 16);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_23C865098(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C8650D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLForeignKeyCondition()
{
  sub_23C7DFB90();
}

unint64_t sub_23C86512C()
{
  unint64_t result;

  result = qword_256BCCAC0;
  if (!qword_256BCCAC0)
  {
    result = MEMORY[0x242626100](&unk_23C915FC8, &unk_250D800D0);
    atomic_store(result, (unint64_t *)&qword_256BCCAC0);
  }
  return result;
}

uint64_t sub_23C865168(uint64_t *a1)
{
  return sub_23C8638E0(a1) & 1;
}

uint64_t sub_23C865180(uint64_t a1)
{
  return sub_23C863DF0(a1);
}

uint64_t sub_23C865194()
{
  return sub_23C863718();
}

uint64_t sub_23C8651A8(uint64_t a1)
{
  return sub_23C863BF8(a1);
}

uint64_t sub_23C8651F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 8 * (v2 >> 6) + 64) |= 1 << v2;
  v4 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v2);
  *v4 = v1;
  v4[1] = v0;
  return *(_QWORD *)(v3 + 56) + 216 * v2;
}

uint64_t sub_23C865228(uint64_t a1)
{
  uint64_t v1;

  sub_23C8634D8(a1, v1, 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C865244(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_23C8634E8(a1, a2, a3);
  return sub_23C8634E8(v3, v4, 1);
}

uint64_t sub_23C865260()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_23C800AA4(v4, v3, v2, v0, v1);
}

uint64_t sub_23C865278@<X0>(uint64_t a1@<X8>)
{
  return a1 + 32;
}

uint64_t sub_23C865288(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_23C8634E8(a1, a2, a3);
  return sub_23C8634E8(v4, v3, 0);
}

uint64_t sub_23C8652AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return sub_23C8634E8(a1, a16, 1);
}

uint64_t sub_23C8652BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return sub_23C8634E8(a19, a17, 1);
}

uint64_t sub_23C8652D4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_23C8652DC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return sub_23C8634E8(v1, v0, 1);
}

void *sub_23C86530C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char __dst)
{
  uint64_t v33;
  uint64_t v34;

  return memcpy(&__dst, (const void *)(v33 + 232 * v34 - 200), 0xE3uLL);
}

uint64_t sub_23C865324()
{
  return sub_23C813A5C((uint64_t)&STACK[0x5D0]);
}

void sub_23C86532C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, unint64_t a18)
{
  STACK[0x258] = a18;
  STACK[0x260] = a17;
  LOBYTE(STACK[0x268]) = 0;
  STACK[0x270] = 0;
}

uint64_t sub_23C865348()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_23C865350()
{
  return sub_23C7E94B8();
}

void sub_23C865380()
{
  sub_23C7F1DE8();
}

uint64_t sub_23C865394(uint64_t a1)
{
  return sub_23C85AAC4(a1);
}

void sub_23C86539C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_23C863E08(a1, a2, v2);
}

uint64_t sub_23C8653A4()
{
  return sub_23C9117B4();
}

unint64_t sub_23C8653E8()
{
  return sub_23C7E94B8();
}

uint64_t sub_23C8653F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  sub_23C8634E8(v16, a16, 0);
  return v16;
}

unint64_t sub_23C865420(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_23C8634E8(a1, a2, a3);
  sub_23C8634E8(a13, a16, 1);
  return STACK[0x358];
}

void sub_23C865458()
{
  sub_23C7FAF1C();
}

unint64_t sub_23C865468()
{
  return sub_23C7E94B8();
}

_QWORD *sub_23C865470()
{
  _QWORD *(*v0)(unint64_t *__return_ptr, uint64_t);
  uint64_t v1;

  return v0(&STACK[0x348], v1);
}

uint64_t sub_23C865480()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634D8(v1, v0, 1);
  return v1;
}

uint64_t sub_23C8654A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8654B8()
{
  return sub_23C911880();
}

uint64_t sub_23C8654C8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C8634E8(v0, v1, 1);
}

_QWORD *sub_23C8654D8()
{
  uint64_t v0;
  _QWORD *(*v1)(unint64_t *__return_ptr, uint64_t);

  return v1(&STACK[0x2A0], v0);
}

_QWORD *sub_23C8654E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = v56;
  return sub_23C837C80(&a56);
}

_QWORD *sub_23C8654F8()
{
  return sub_23C7FA5C4(&STACK[0x200]);
}

uint64_t sub_23C865500()
{
  uint64_t (*v0)(void);

  return v0();
}

void sub_23C86550C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_23C863E08(a1, v3, a3);
}

uint64_t sub_23C865514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;

  return sub_23C863904(a1, a2, a3, v4, v3);
}

uint64_t sub_23C865520(uint64_t result)
{
  return sub_23C800ADC(result);
}

void sub_23C865528()
{
  sub_23C7F1DE8();
}

uint64_t sub_23C865534()
{
  return sub_23C911778();
}

void sub_23C865540(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t sub_23C865554()
{
  return sub_23C85BE98();
}

uint64_t sub_23C86556C()
{
  return sub_23C81394C((uint64_t)&STACK[0x4A0]);
}

void sub_23C865574()
{
  sub_23C863E44();
}

void sub_23C86557C()
{
  sub_23C7FDA0C();
}

_QWORD *sub_23C865594()
{
  return sub_23C7FA5C4(&STACK[0x620]);
}

uint64_t sub_23C8655A8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_23C8655B0()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
}

uint64_t sub_23C8655C4()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8634E8(v1, v0, 1);
  return v1;
}

uint64_t sub_23C8655E8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return a1 + 168 * a2 + 32;
}

uint64_t sub_23C865610()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_23C86561C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v17;
    v4 = (uint64_t *)(a1 + 72);
    do
    {
      v5 = *(v4 - 5);
      v6 = *(v4 - 4);
      v7 = *(v4 - 3);
      v8 = *(v4 - 2);
      v9 = *(v4 - 1);
      v10 = *v4;
      sub_23C7E6260();
      swift_bridgeObjectRetain();
      sub_23C7DB3B8();
      sub_23C7DEF00();
      v11 = sub_23C868120(v5, v6, v7, v8, v9, v10);
      v13 = v12;
      sub_23C7DC514();
      sub_23C7E087C();
      swift_bridgeObjectRelease();
      sub_23C7DC474();
      v14 = *(_QWORD *)(v17 + 16);
      if (v14 >= *(_QWORD *)(v17 + 24) >> 1)
        sub_23C7E649C();
      v4 += 6;
      *(_QWORD *)(v17 + 16) = v14 + 1;
      v15 = v17 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23C865744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v19 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  v2 = v19;
  result = sub_23C87DAD4(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7)
      goto LABEL_14;
    v18 = v9;
    v10 = *(_QWORD *)(a1 + 48) + 32 * v5;
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    v14 = *(_QWORD *)(v19 + 16);
    v13 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1)
      sub_23C7E649C();
    *(_QWORD *)(v19 + 16) = v14 + 1;
    v15 = v19 + 16 * v14;
    *(_QWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 40) = v12;
    result = sub_23C87D9EC(v5, v7, v18 & 1, a1);
    v5 = result;
    v7 = v16;
    v9 = v17 & 1;
    if (!--v1)
    {
      sub_23C7F91AC(result, v16, v9);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_23C8658B8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int64_t v22;
  _QWORD v24[5];
  int64_t v25;

  sub_23C90175C(v24, a1);
  v3 = v24[0];
  v21 = v24[1];
  v25 = v24[3];
  v4 = v24[4];
  v22 = (unint64_t)(v24[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_3;
LABEL_2:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v7 = v6 | (v25 << 6);
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v7);
    v14 = *v12;
    v13 = v12[1];
    v16 = v12[2];
    v15 = v12[3];
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v7);
    v18 = *v17;
    v19 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((a2(v14, v13, v16, v15, v18, v19) & 1) != 0)
    {
      result = swift_release();
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_2;
LABEL_3:
    v8 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v8 >= v22)
      goto LABEL_23;
    v9 = *(_QWORD *)(v21 + 8 * v8);
    v10 = v25 + 1;
    if (!v9)
    {
      v10 = v25 + 2;
      if (v25 + 2 >= v22)
        goto LABEL_23;
      v9 = *(_QWORD *)(v21 + 8 * v10);
      if (!v9)
      {
        v10 = v25 + 3;
        if (v25 + 3 >= v22)
          goto LABEL_23;
        v9 = *(_QWORD *)(v21 + 8 * v10);
        if (!v9)
        {
          v10 = v25 + 4;
          if (v25 + 4 >= v22)
            goto LABEL_23;
          v9 = *(_QWORD *)(v21 + 8 * v10);
          if (!v9)
          {
            v10 = v25 + 5;
            if (v25 + 5 >= v22)
              goto LABEL_23;
            v9 = *(_QWORD *)(v21 + 8 * v10);
            if (!v9)
            {
              v11 = v25 + 6;
              while (v11 < v22)
              {
                v9 = *(_QWORD *)(v21 + 8 * v11++);
                if (v9)
                {
                  v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              result = swift_release();
              v14 = 0;
              v13 = 0;
              v16 = 0;
              v15 = 0;
              v18 = 0;
              v19 = 0;
LABEL_24:
              *a3 = v14;
              a3[1] = v13;
              a3[2] = v16;
              a3[3] = v15;
              a3[4] = v18;
              a3[5] = v19;
              return result;
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    v25 = v10;
  }
  __break(1u);
  return result;
}

void sub_23C865AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_23C7E20F8();
  v5 = v4;
  sub_23C7E79A8(&qword_25430DBF0);
  v6 = sub_23C86ABB8();
  *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v1;
  *(_QWORD *)(v6 + 56) = v0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  sub_23C7E3084();
  sub_23C7DF858();
  *v2 = sub_23C910DAC();
  sub_23C7DC560();
}

uint64_t sub_23C865B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v8 = sub_23C910E18();
  v10 = v8;
  v11 = v9;
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v32 = v9;
    v33 = v8;
    v34 = a1;
    v35 = a2;
    v36 = a4;
    v41 = MEMORY[0x24BEE4AF8];
    sub_23C7FD928();
    result = sub_23C87DAD4(a3);
    v14 = result;
    v16 = v15;
    v18 = v17 & 1;
    v37 = a3 + 56;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a3 + 32))
    {
      if (((*(_QWORD *)(v37 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v16)
        goto LABEL_15;
      v40 = v18;
      v19 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v14);
      v20 = *v19;
      v21 = v19[1];
      v22 = sub_23C910E18();
      v38 = v23;
      v39 = v22;
      v24 = a3;
      v25 = *(_QWORD *)(v41 + 16);
      v26 = *(_QWORD *)(v41 + 24);
      sub_23C7DBBB0();
      if (v25 >= v26 >> 1)
        sub_23C7FD928();
      *(_QWORD *)(v41 + 16) = v25 + 1;
      v27 = (_QWORD *)(v41 + 32 * v25);
      v27[4] = v39;
      v27[5] = v38;
      v27[6] = v20;
      v27[7] = v21;
      result = sub_23C87D9EC(v14, v16, v40 & 1, v24);
      v14 = result;
      v16 = v28;
      v18 = v29 & 1;
      --v12;
      a3 = v24;
      if (!v12)
      {
        sub_23C7F91AC(result, v28, v18);
        sub_23C7DB624();
        a2 = v35;
        a4 = v36;
        v10 = v33;
        a1 = v34;
        v11 = v32;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    sub_23C7DB624();
LABEL_12:
    v30 = sub_23C7F713C();
    sub_23C7E79A8(&qword_25430DBF0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 32) = v10;
    *(_QWORD *)(inited + 40) = v11;
    *(_QWORD *)(inited + 48) = a1;
    *(_QWORD *)(inited + 56) = a2;
    *(_QWORD *)(inited + 64) = v30;
    *(_QWORD *)(inited + 72) = 0;
    sub_23C7E3084();
    result = sub_23C910DAC();
    *a4 = result;
  }
  return result;
}

void DatabaseRegion.init()(uint64_t *a1@<X8>)
{
  sub_23C7E3084();
  *a1 = sub_23C910DAC();
  sub_23C7DB390();
}

uint64_t DatabaseRegion.formUnion(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4[2];
  uint64_t v5;

  v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  DatabaseRegion.union(_:)(v4, &v5);
  result = sub_23C7E072C();
  *v1 = v5;
  return result;
}

BOOL DatabaseRegion.isModified(byEventsOfKind:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t v17;

  v16[1] = *v4;
  if (a4 > 1u)
  {
    sub_23C7DF858();
    sub_23C7DC46C();
    sub_23C865B78(a1, a2, a3, v16);
    v11 = v16[0];
  }
  else
  {
    v7 = sub_23C7E118C();
    v9 = v8;
    sub_23C7E79A8(&qword_25430DBF0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 32) = v7;
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 48) = a1;
    *(_QWORD *)(inited + 56) = a2;
    *(_QWORD *)(inited + 64) = 0;
    *(_QWORD *)(inited + 72) = 0;
    sub_23C7E3084();
    sub_23C7DF858();
    v11 = sub_23C910DAC();
  }
  v15 = v11;
  sub_23C866CB0(&v15, &v17);
  sub_23C7DB624();
  if (v17)
  {
    v13 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRelease();
    return v13 != 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 1;
  }
}

uint64_t DatabaseRegion.isModified(by:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v2 = *v1;
  if (!*v1)
    goto LABEL_3;
  v4 = a1[3];
  v5 = a1[4];
  sub_23C7E7E34(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v8 = v7;
  v9 = sub_23C910E18();
  sub_23C866094(v9, v10, v6, v8, v2);
  v12 = v11;
  v14 = v13;
  sub_23C7DB62C();
  sub_23C7DB398();
  if (v12 != 1)
  {
    if (v14)
    {
      sub_23C868540(a1[6], v14);
      v15 = v16;
    }
    else
    {
      v15 = 1;
    }
    sub_23C7E072C();
    sub_23C7DE934();
  }
  else
  {
LABEL_3:
    v15 = 1;
  }
  return v15 & 1;
}

uint64_t sub_23C866030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (sub_23C7DD1B4(), (v3 & 1) != 0))
  {
    sub_23C7DF858();
    sub_23C7DB3D4();
    sub_23C7DC46C();
  }
  else
  {
    sub_23C7EFA90();
  }
  return sub_23C7DF8B0();
}

void sub_23C866094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;

  if (*(_QWORD *)(a5 + 16))
  {
    sub_23C822464();
    if ((v5 & 1) != 0)
    {
      sub_23C7DF858();
      sub_23C7DB3D4();
    }
  }
  sub_23C7DB390();
}

void sub_23C8660E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;

  if (*(_QWORD *)(a5 + 16) && (sub_23C822588(a1, a2, a3, a4), (v5 & 1) != 0))
    sub_23C7DB3D4();
  else
    sub_23C7EFA90();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void sub_23C866128(char *a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (sub_23C822620(a1), (v2 & 1) != 0))
    sub_23C7DB3D4();
  else
    sub_23C7EFA90();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

void sub_23C86616C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16) && (sub_23C7DD1B4(), (v3 & 1) != 0))
    sub_23C7DB3D4();
  else
    sub_23C7EFA90();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

uint64_t sub_23C8661AC(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t j;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 56);
  v29 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v30 = (unint64_t)(v5 + 63) >> 6;
  v32 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v31 = v3;
  for (i = v8 | (v3 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 32 * i);
    v17 = *v15;
    v16 = v15[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    swift_bridgeObjectRelease();
    v18 = sub_23C911BF8();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v32 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 32 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_23C911A18() & 1) == 0)
    {
      v24 = ~v19;
      for (j = v20 + 1; ; j = v26 + 1)
      {
        v26 = j & v24;
        if (((*(_QWORD *)(v32 + (((j & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 32 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_23C911A18() & 1) != 0)
          goto LABEL_28;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v7 = (v11 - 1) & v11;
    v31 = v12;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23C866468(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_32;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    result = sub_23C911BB0();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(_QWORD *)(v19 + 8 * v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(_QWORD *)(v19 + 8 * v18) == v16)
      goto LABEL_7;
  }
}

void sub_23C86662C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (a1 != a2)
  {
    sub_23C7DBD2C();
    if (v33)
    {
      v4 = 0;
      v5 = v3 + 56;
      v6 = 1 << *(_BYTE *)(v3 + 32);
      if (v6 < 64)
        v7 = ~(-1 << v6);
      else
        v7 = -1;
      v8 = v7 & *(_QWORD *)(v3 + 56);
      v9 = (unint64_t)(v6 + 63) >> 6;
      v44 = v2 + 56;
      v42 = v2;
      v38 = v3 + 56;
      v39 = v3;
      v37 = v9;
      if (v8)
        goto LABEL_8;
LABEL_9:
      v11 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_61:
        __break(1u);
        return;
      }
      if (v11 >= v9)
        return;
      if (!*(_QWORD *)(v5 + 8 * v11))
      {
        if (v4 + 2 >= v9)
          return;
        if (!*(_QWORD *)(v5 + 8 * (v4 + 2)))
        {
          if (v4 + 3 >= v9)
            return;
          if (!*(_QWORD *)(v5 + 8 * (v4 + 3)))
          {
            if (v4 + 4 >= v9)
              return;
            if (!*(_QWORD *)(v5 + 8 * (v4 + 4)))
            {
              v12 = v4 + 5;
              if (v4 + 5 >= v9)
                return;
              if (!*(_QWORD *)(v5 + 8 * v12))
              {
                do
                {
                  v13 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_61;
                  if (v13 >= v9)
                    return;
                  ++v12;
                }
                while (!*(_QWORD *)(v5 + 8 * v13));
              }
            }
          }
        }
      }
      sub_23C7DB6E8();
      v40 = v14;
      v41 = v15;
      v10 = v16 + (v15 << 6);
LABEL_24:
      v17 = (__int128 *)(*(_QWORD *)(v3 + 48) + (v10 << 6));
      v18 = v17[3];
      v20 = *v17;
      v19 = v17[1];
      v47 = v17[2];
      v48 = v18;
      v45 = v20;
      v46 = v19;
      sub_23C911BBC();
      sub_23C86A9EC((uint64_t)&v45);
      sub_23C853C08();
      v21 = sub_23C911BF8();
      v22 = -1 << *(_BYTE *)(v2 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v44 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      {
LABEL_59:
        sub_23C86AA40((uint64_t)&v45);
        return;
      }
      v43 = ~v22;
      v24 = *(_QWORD *)(v42 + 48);
      v25 = v45;
      while (1)
      {
        v26 = (_QWORD *)(v24 + (v23 << 6));
        v27 = v26[2];
        v28 = v26[3];
        v30 = v26[4];
        v29 = v26[5];
        v32 = v26[6];
        v31 = v26[7];
        v33 = *v26 == (_QWORD)v25 && v26[1] == *((_QWORD *)&v25 + 1);
        if (!v33 && (sub_23C7E16E8() & 1) == 0)
          goto LABEL_54;
        v34 = v27 == (_QWORD)v46 && v28 == *((_QWORD *)&v46 + 1);
        if (!v34 && (sub_23C7E16E8() & 1) == 0)
          goto LABEL_54;
        if (v29)
        {
          if (!*((_QWORD *)&v47 + 1))
            goto LABEL_54;
          v35 = v30 == (_QWORD)v47 && v29 == *((_QWORD *)&v47 + 1);
          if (!v35 && (sub_23C7E16E8() & 1) == 0)
            goto LABEL_54;
        }
        else if (*((_QWORD *)&v47 + 1))
        {
          goto LABEL_54;
        }
        if (v31)
        {
          if (*((_QWORD *)&v48 + 1))
          {
            v36 = v32 == (_QWORD)v48 && v31 == *((_QWORD *)&v48 + 1);
            if (v36 || (sub_23C7E16E8() & 1) != 0)
            {
LABEL_56:
              sub_23C86AA40((uint64_t)&v45);
              v4 = v41;
              v2 = v42;
              v5 = v38;
              v3 = v39;
              v9 = v37;
              v8 = v40;
              if (!v40)
                goto LABEL_9;
LABEL_8:
              v40 = (v8 - 1) & v8;
              v41 = v4;
              v10 = __clz(__rbit64(v8)) | (v4 << 6);
              goto LABEL_24;
            }
          }
        }
        else if (!*((_QWORD *)&v48 + 1))
        {
          goto LABEL_56;
        }
LABEL_54:
        v23 = (v23 + 1) & v43;
        if (((*(_QWORD *)(v44 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          goto LABEL_59;
      }
    }
  }
}

void sub_23C866918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t j;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;

  if (a1 == a2)
    return;
  sub_23C7DBD2C();
  if (!v27)
    return;
  sub_23C7E62EC();
  v7 = v6 & v5;
  v8 = v2 + 56;
  if ((v6 & v5) == 0)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v33 = v4;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v15 << 6))
  {
    v18 = v3;
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v21 = *v19;
    v20 = v19[1];
    sub_23C911BBC();
    sub_23C7DBCC8();
    sub_23C910F14();
    v22 = sub_23C911BF8();
    v23 = -1 << *(_BYTE *)(v2 + 32);
    v24 = v22 & ~v23;
    if (((*(_QWORD *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      goto LABEL_45;
    v25 = *(_QWORD *)(v2 + 48);
    v26 = (_QWORD *)(v25 + 16 * v24);
    v27 = *v26 == v21 && v26[1] == v20;
    if (!v27 && (sub_23C7E16E8() & 1) == 0)
    {
      v28 = ~v23;
      for (j = v24 + 1; ; j = v30 + 1)
      {
        v30 = j & v28;
        if (((*(_QWORD *)(v8 + (((j & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v28)) & 1) == 0)
          break;
        v31 = (_QWORD *)(v25 + 16 * v30);
        v32 = *v31 == v21 && v31[1] == v20;
        if (v32 || (sub_23C7E16E8() & 1) != 0)
          goto LABEL_34;
      }
LABEL_45:
      sub_23C7DB62C();
      return;
    }
LABEL_34:
    sub_23C7DB62C();
    v3 = v18;
    v4 = v33;
    if (v7)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    sub_23C86AB98();
    if (v11 == v12)
      return;
    sub_23C7DF8EC();
    v15 = v14;
    if (!v13)
    {
      sub_23C86AB8C();
      if (v11 == v12)
        return;
      sub_23C86AB80();
      if (!v13)
      {
        sub_23C86AB8C();
        if (v11 == v12)
          return;
        sub_23C86AB80();
        if (!v13)
        {
          sub_23C86AB8C();
          if (v11 == v12)
            return;
          sub_23C86AB80();
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v7 = (v13 - 1) & v13;
    v33 = v15;
  }
  sub_23C86AB98();
  if (v11 == v12)
    return;
  sub_23C7DF8EC();
  if (v13)
  {
    v15 = v16;
    goto LABEL_27;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_23C86AB8C();
    if (v11 == v12)
      return;
    sub_23C86AB80();
    v16 = v17 + 1;
    if (v13)
      goto LABEL_27;
  }
LABEL_47:
  __break(1u);
}

BOOL DatabaseRegion.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0 && *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

BOOL DatabaseRegion.isFullDatabase.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

void static DatabaseRegion.fullDatabase.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void DatabaseRegion.init(table:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_23C7E20F8();
  v5 = v4;
  sub_23C7E79A8(&qword_25430DBF0);
  v6 = sub_23C86ABB8();
  *(_OWORD *)(v6 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v1;
  *(_QWORD *)(v6 + 56) = v0;
  sub_23C7E3084();
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *v2 = sub_23C910DAC();
  sub_23C7DC560();
}

uint64_t sub_23C866C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_23C910E18();
  v10 = v9;
  sub_23C7E79A8(&qword_25430DBF0);
  v11 = sub_23C86ABB8();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v11 + 32) = v8;
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = a1;
  *(_QWORD *)(v11 + 56) = a2;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = a3;
  sub_23C7E3084();
  result = sub_23C910DAC();
  *a4 = result;
  return result;
}

void sub_23C866CB0(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[6];
  char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v36 = *a1;
  v37 = *v2;
  if (!*v2)
  {
    v30 = *a1;
LABEL_30:
    *a2 = v30;
    swift_bridgeObjectRetain();
    return;
  }
  if (!v36)
  {
    v30 = *v2;
    goto LABEL_30;
  }
  sub_23C7E3084();
  sub_23C7DB3D4();
  v32 = sub_23C910DAC();
  v3 = 0;
  v4 = 0;
  sub_23C7EDC0C();
  v33 = v37 + 64;
  v34 = v6;
  while (v5)
  {
    sub_23C86ABC0();
    v39 = v8;
    v10 = v9 | (v3 << 6);
LABEL_17:
    v16 = (uint64_t *)(*(_QWORD *)(v37 + 48) + 32 * v10);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[3];
    v20 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 16 * v10);
    v21 = *v20;
    v22 = v20[1];
    MEMORY[0x24BDAC7A8](v7);
    v35 = v23;
    sub_23C7DBBB0();
    sub_23C7DB3B8();
    sub_23C7DEF00();
    sub_23C7DB3D4();
    sub_23C8658B8(v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C86AA94, v40);
    sub_23C86AAB4((uint64_t)v40, (uint64_t)v41, &qword_256BCCAC8);
    if (v42)
    {
      v24 = v17;
      v38 = v4;
      v25 = v43;
      v26 = v44;
      swift_bridgeObjectRelease();
      sub_23C7DB398();
      v27 = sub_23C866FF0(v25, v26, v21, v22);
      v29 = v28;
      sub_23C7DB3DC();
      sub_23C7DE934();
      sub_23C7DB62C();
      sub_23C7DB624();
      if (sub_23C8670D0(v27, v29))
      {
        sub_23C7E087C();
        sub_23C7DBCD0();
        sub_23C7DB398();
        v4 = v38;
        goto LABEL_21;
      }
      swift_isUniquelyReferenced_nonNull_native();
      sub_23C83A9C4(v27, v29, v24, v18, v35, v19);
      sub_23C7E087C();
      sub_23C7DBCD0();
      swift_bridgeObjectRelease();
      v4 = v38;
      v5 = v39;
    }
    else
    {
      sub_23C7E087C();
      sub_23C7DBCD0();
      sub_23C7DB3DC();
LABEL_21:
      sub_23C7DC474();
      v5 = v39;
    }
  }
  if (__OFADD__(v3++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v3 >= v34)
    goto LABEL_27;
  if (*(_QWORD *)(v33 + 8 * v3))
  {
LABEL_16:
    sub_23C7ECC94();
    v39 = v14 & v13;
    v10 = v15 + (v3 << 6);
    goto LABEL_17;
  }
  v12 = v3 + 1;
  if (v3 + 1 >= v34)
    goto LABEL_27;
  if (*(_QWORD *)(v33 + 8 * v12))
    goto LABEL_15;
  v12 = v3 + 2;
  if (v3 + 2 >= v34)
    goto LABEL_27;
  if (*(_QWORD *)(v33 + 8 * v12))
    goto LABEL_15;
  v12 = v3 + 3;
  if (v3 + 3 >= v34)
  {
LABEL_27:
    swift_release();
    *a2 = v32;
    return;
  }
  if (*(_QWORD *)(v33 + 8 * v12))
  {
LABEL_15:
    v3 = v12;
    goto LABEL_16;
  }
  while (1)
  {
    v3 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v3 >= v34)
      goto LABEL_27;
    ++v12;
    if (*(_QWORD *)(v33 + 8 * v3))
      goto LABEL_16;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_23C866FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a1;
  if (a3 && (v7 = a3, a1))
  {
    swift_bridgeObjectRetain();
    v8 = swift_bridgeObjectRetain();
    v7 = sub_23C868A24(v8, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if (a4 && a2)
  {
    swift_bridgeObjectRetain();
    v9 = swift_bridgeObjectRetain();
    sub_23C868A24(v9, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

BOOL sub_23C8670D0(uint64_t a1, uint64_t a2)
{
  return a1 && !*(_QWORD *)(a1 + 16) || a2 && !*(_QWORD *)(a2 + 16);
}

void sub_23C8670F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *v4;
  if (v9)
  {
    v10 = sub_23C910E18();
    v12 = v11;
    sub_23C7DC46C();
    sub_23C7DB3D4();
    v13 = sub_23C86ABD4();
    sub_23C866094(v13, v14, v15, v16, v9);
    if (v17 == 1)
    {
      sub_23C7E072C();
      sub_23C7DB62C();
      sub_23C7DE934();
      *a4 = v9;
      sub_23C7E1768();
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = v17;
      v24 = v18;
      if (v18)
      {
        sub_23C7DB3B8();
        sub_23C7DEF00();
        v25 = sub_23C7DBBB0();
        v26 = sub_23C868A24(v25, v24);
        sub_23C7DB3DC();
        sub_23C7E087C();
        sub_23C7DBCD0();
        a3 = v26;
      }
      else
      {
        sub_23C7DBBB0();
      }
      if (sub_23C8670D0(v23, a3))
      {
        sub_23C7DB3DC();
        sub_23C7DBCD0();
        sub_23C86ABD4();
        v27 = sub_23C863104();
        sub_23C86AAF4(v27);
        sub_23C7E072C();
        sub_23C7DB62C();
        v28 = v9;
      }
      else
      {
        swift_isUniquelyReferenced_nonNull_native();
        sub_23C83A9C4(v23, a3, v10, v12, a1, a2);
        v28 = v9;
        sub_23C7E072C();
        sub_23C7DB62C();
        sub_23C7DE934();
      }
      *a4 = v28;
      sub_23C7E1768();
    }
  }
  else
  {
    sub_23C7DC46C();
    sub_23C7DBBB0();
    sub_23C7E1768();
    sub_23C866C0C(v19, v20, v21, v22);
  }
}

uint64_t *DatabaseRegion.union(_:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = *v2;
  if (v4 && (v5 = *result) != 0)
  {
    v50 = a2;
    sub_23C7E3084();
    v6 = (_QWORD *)sub_23C910DAC();
    sub_23C7DB3D4();
    v7 = sub_23C7F6EA8();
    sub_23C7DBCC8();
    v8 = sub_23C7F6EA8();
    v9 = sub_23C8676E0((uint64_t)v8, (uint64_t)v7);
    v51 = v9 + 56;
    v54 = v4;
    v55 = v9;
    sub_23C7EDC0C();
    v52 = v11;
    v53 = v5;
    if (!v12)
      goto LABEL_5;
LABEL_4:
    sub_23C86ABC0();
    v56 = v13;
    v57 = v14;
    for (i = v15 | (v14 << 6); ; i = v22 + (v21 << 6))
    {
      v23 = (uint64_t *)(*(_QWORD *)(v55 + 48) + 32 * i);
      v25 = *v23;
      v24 = v23[1];
      v26 = v23[2];
      v27 = v23[3];
      v28 = *(_QWORD *)(v4 + 16);
      sub_23C7DB3B8();
      sub_23C7DEF00();
      if (v28)
      {
        sub_23C7DB3B8();
        sub_23C7DEF00();
        sub_23C7DFAB0();
        v29 = sub_23C822464();
        if ((v30 & 1) != 0)
        {
          v31 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v29);
          v32 = *v31;
          v28 = v31[1];
          sub_23C7DC46C();
          sub_23C7E0808();
        }
        else
        {
          v28 = 0;
          v32 = 1;
        }
        sub_23C7E087C();
        sub_23C7DBCD0();
      }
      else
      {
        v32 = 1;
      }
      if (*(_QWORD *)(v5 + 16))
      {
        sub_23C7DB3B8();
        sub_23C7DEF00();
        sub_23C7DFAB0();
        v33 = v5;
        sub_23C822464();
        if ((v34 & 1) != 0)
        {
          sub_23C7DEFFC();
          sub_23C7DB3D4();
        }
        else
        {
          v3 = 0;
          v33 = 1;
        }
        sub_23C7E087C();
        sub_23C7DBCD0();
      }
      else
      {
        v3 = 0;
        v33 = 1;
      }
      if (v32 == 1)
      {
        v35 = v26;
        v36 = v25;
        v58 = v33;
        if (v33 == 1)
          goto LABEL_62;
      }
      else if (v33 == 1)
      {
        v35 = v26;
        v36 = v25;
        v58 = v32;
        v3 = v28;
      }
      else
      {
        v37 = 0;
        if (v32 && v33)
        {
          sub_23C7DB3D4();
          sub_23C7E0808();
          v37 = sub_23C8676E0(v33, v32);
        }
        v35 = v26;
        v58 = v37;
        v36 = v25;
        if (v28)
        {
          if (v3)
          {
            sub_23C7E6260();
            sub_23C7DC46C();
            v3 = sub_23C867884(v3, v28);
            sub_23C7E072C();
          }
          else
          {
            sub_23C7DB398();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_23C7DB398();
          v3 = 0;
        }
        sub_23C7DE934();
        swift_bridgeObjectRelease();
      }
      swift_isUniquelyReferenced_nonNull_native();
      sub_23C86ABA4();
      v38 = sub_23C822464();
      if (__OFADD__(v6[2], (v39 & 1) == 0))
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      v40 = v38;
      v41 = v39;
      sub_23C7E79A8(&qword_25430DBC0);
      if ((sub_23C911778() & 1) != 0)
      {
        sub_23C86ABA4();
        v42 = sub_23C822464();
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_63;
        v40 = v42;
      }
      if ((v41 & 1) != 0)
      {
        v44 = (uint64_t *)(v6[7] + 16 * v40);
        swift_bridgeObjectRelease();
        sub_23C7DB624();
        *v44 = v58;
        v44[1] = v3;
      }
      else
      {
        v6[(v40 >> 6) + 8] |= 1 << v40;
        v45 = (_QWORD *)(v6[6] + 32 * v40);
        *v45 = v36;
        v45[1] = v24;
        v45[2] = v35;
        v45[3] = v27;
        v46 = (uint64_t *)(v6[7] + 16 * v40);
        *v46 = v58;
        v46[1] = v3;
        v47 = v6[2];
        v48 = __OFADD__(v47, 1);
        v49 = v47 + 1;
        if (v48)
          goto LABEL_59;
        v6[2] = v49;
        sub_23C7DB3B8();
        sub_23C7DEF00();
      }
      sub_23C7E087C();
      sub_23C7DBCD0();
      swift_bridgeObjectRelease();
      v5 = v53;
      v4 = v54;
      v10 = v57;
      if (v56)
        goto LABEL_4;
LABEL_5:
      v17 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_60;
      if (v17 >= v52)
        goto LABEL_56;
      if (!*(_QWORD *)(v51 + 8 * v17))
      {
        if (v10 + 2 >= v52)
          goto LABEL_56;
        if (!*(_QWORD *)(v51 + 8 * (v10 + 2)))
        {
          if (v10 + 3 >= v52)
            goto LABEL_56;
          if (!*(_QWORD *)(v51 + 8 * (v10 + 3)))
          {
            v18 = v10 + 4;
            if (v10 + 4 >= v52)
            {
LABEL_56:
              result = (uint64_t *)swift_release();
              a2 = v50;
              goto LABEL_57;
            }
            if (!*(_QWORD *)(v51 + 8 * v18))
              break;
          }
        }
      }
LABEL_17:
      sub_23C7DB6E8();
      v56 = v20;
      v57 = v21;
    }
    while (1)
    {
      v19 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      if (v19 >= v52)
        goto LABEL_56;
      ++v18;
      if (*(_QWORD *)(v51 + 8 * v19))
        goto LABEL_17;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    result = (uint64_t *)sub_23C911B50();
    __break(1u);
  }
  else
  {
    v6 = 0;
LABEL_57:
    *a2 = v6;
  }
  return result;
}

uint64_t sub_23C8676E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = result;
  v3 = 0;
  v24 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C8FA2B4((uint64_t)&v23, v15, v16, v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v24;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23C867884(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    result = sub_23C8FA748(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i));
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_23C8679E0(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  BOOL v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41;

  v3 = v2;
  v4 = *v1;
  if (*v1)
  {
    sub_23C7E3084();
    sub_23C7DBCC8();
    v36 = sub_23C910DAC();
    v37 = v4 + 64;
    sub_23C7DF3C0();
    v8 = v7 & v6;
    v38 = (unint64_t)(v9 + 63) >> 6;
    if ((v7 & v6) == 0)
      goto LABEL_4;
LABEL_3:
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v39 = v5;
    for (i = v10 | (v5 << 6); ; i = v18 + (v17 << 6))
    {
      v19 = v4;
      v20 = *(_QWORD *)(v4 + 48) + 32 * i;
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      v23 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * i);
      v24 = *v23;
      v25 = v23[1];
      sub_23C7E6260();
      sub_23C7DBCC8();
      sub_23C7DBBB0();
      sub_23C7DEF00();
      v26 = sub_23C852344(v21, v22);
      if (v3)
      {
        swift_release();
        sub_23C7DB3DC();
        sub_23C7DB62C();
        sub_23C7DC514();
        sub_23C7E087C();
        swift_bridgeObjectRelease();
        return;
      }
      v28 = v26;
      v29 = v27;
      sub_23C7DB3DC();
      sub_23C7DB62C();
      if (v29)
      {
        v31 = sub_23C910E18();
        v33 = v32;
        sub_23C7E79A8(&qword_25430DBF0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_23C912A20;
        *(_QWORD *)(inited + 32) = v31;
        *(_QWORD *)(inited + 40) = v33;
        *(_QWORD *)(inited + 48) = v28;
        *(_QWORD *)(inited + 56) = v29;
        *(_QWORD *)(inited + 64) = v24;
        *(_QWORD *)(inited + 72) = v25;
        v40[0] = sub_23C910DAC();
        v40[1] = v36;
        DatabaseRegion.union(_:)(v40, &v41);
        sub_23C7DB62C();
        sub_23C7DB3DC();
        v36 = v41;
      }
      else
      {
        sub_23C7DC514();
        sub_23C7E087C();
      }
      v4 = v19;
      v5 = v39;
      if (v8)
        goto LABEL_3;
LABEL_4:
      v12 = __OFADD__(v5, 1);
      v13 = v5 + 1;
      if (v12)
      {
        __break(1u);
        goto LABEL_28;
      }
      if (v13 >= v38)
        goto LABEL_26;
      if (!*(_QWORD *)(v37 + 8 * v13))
      {
        if (v13 + 1 >= v38)
          goto LABEL_26;
        if (!*(_QWORD *)(v37 + 8 * (v13 + 1)))
        {
          if (v13 + 2 >= v38)
            goto LABEL_26;
          if (!*(_QWORD *)(v37 + 8 * (v13 + 2)))
          {
            v14 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_26:
              swift_release();
              *a1 = v36;
              return;
            }
            if (!*(_QWORD *)(v37 + 8 * v14))
              break;
          }
        }
      }
LABEL_13:
      sub_23C7ECC94();
      v8 = v16 & v15;
      v39 = v17;
    }
    while (1)
    {
      v30 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      if (v30 >= v38)
        goto LABEL_26;
      ++v14;
      if (*(_QWORD *)(v37 + 8 * v30))
        goto LABEL_13;
    }
LABEL_28:
    __break(1u);
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t DatabaseRegion.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)v0)
    return 0x746164206C6C7566;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0x7974706D65;
  sub_23C7DF858();
  sub_23C7FCA8C();
  v2 = v1;
  sub_23C7DB624();
  v6 = v2;
  sub_23C855F54(&v6, (uint64_t (*)(uint64_t))sub_23C8DE988, sub_23C869498);
  v3 = sub_23C86561C(v6);
  sub_23C7DE904();
  v6 = v3;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v4 = sub_23C910E3C();
  sub_23C7E072C();
  return v4;
}

uint64_t static DatabaseRegion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return v3 == 0;
  if (!v3)
    return 0;
  swift_bridgeObjectRetain_n();
  sub_23C7DF858();
  v4 = sub_23C7F6EA8();
  sub_23C7DF858();
  v5 = sub_23C7F6EA8();
  v6 = sub_23C8661AC((uint64_t)v4, (uint64_t)v5);
  sub_23C7DE934();
  if ((v6 & 1) == 0)
  {
    sub_23C7DB624();
    sub_23C7E072C();
    sub_23C7DB3DC();
    return 0;
  }
  v33 = v2;
  v34 = v3;
  v7 = 0;
  v31 = v4 + 7;
  sub_23C7DF3C0();
  v10 = v9 & v8;
  v32 = (unint64_t)(v11 + 63) >> 6;
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v7 << 6);
LABEL_23:
    v19 = *(_QWORD *)(v4[6] + 32 * v13);
    v20 = *(_QWORD *)(v33 + 16);
    sub_23C7DB3B8();
    result = sub_23C7DEF00();
    if (!v20)
      goto LABEL_50;
    v22 = v4;
    sub_23C7DB3B8();
    sub_23C7DEF00();
    v23 = sub_23C7E6598();
    if ((v24 & 1) == 0)
      goto LABEL_49;
    v25 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v23);
    v26 = *v25;
    v27 = v25[1];
    sub_23C7DBBB0();
    sub_23C7E0808();
    sub_23C7E087C();
    sub_23C7DBCD0();
    if (!*(_QWORD *)(v34 + 16))
      goto LABEL_48;
    sub_23C7E6598();
    if ((v28 & 1) == 0)
      goto LABEL_48;
    sub_23C7DEFFC();
    sub_23C7DB3D4();
    sub_23C7E087C();
    sub_23C7DBCD0();
    if (!v26)
      goto LABEL_43;
    sub_23C7E0808();
    sub_23C7DB3D4();
    v29 = sub_23C8661AC(v26, v34);
    sub_23C7DB398();
    sub_23C7DE934();
    if ((v29 & 1) == 0)
    {
      sub_23C7E5DE0();
      sub_23C7DB3DC();
      sub_23C7DB398();
      goto LABEL_41;
    }
    if (v27)
    {
      if (!v19)
      {
        sub_23C7E5DE0();
        sub_23C7DB3DC();
LABEL_41:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      v30 = sub_23C866468(v27, v19);
      sub_23C7DB3DC();
      sub_23C7DB398();
      sub_23C7DC474();
      sub_23C7DE934();
      v4 = v22;
      if ((v30 & 1) == 0)
      {
        sub_23C7E5DE0();
LABEL_42:
        sub_23C7E592C();
LABEL_44:
        swift_release();
        return 0;
      }
    }
    else
    {
      if (v19)
      {
LABEL_43:
        sub_23C7E592C();
        sub_23C7E5DE0();
        swift_bridgeObjectRelease();
        sub_23C7DC474();
        sub_23C7DE934();
        goto LABEL_44;
      }
      sub_23C7DB398();
      sub_23C7DE934();
      v4 = v22;
    }
  }
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  sub_23C86AB98();
  if (v14 == v15)
    goto LABEL_39;
  sub_23C7DF8EC();
  v7 = v16;
  if (v17)
    goto LABEL_22;
  v7 = v16 + 1;
  if (v16 + 1 >= v32)
    goto LABEL_39;
  v17 = v31[v7];
  if (v17)
    goto LABEL_22;
  v7 = v16 + 2;
  if (v16 + 2 >= v32)
    goto LABEL_39;
  v17 = v31[v7];
  if (v17)
  {
LABEL_22:
    v10 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_23;
  }
  sub_23C86AB98();
  if (v14 == v15)
  {
LABEL_39:
    sub_23C7E592C();
    sub_23C7DE934();
    swift_release();
    return 1;
  }
  sub_23C7DF8EC();
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v32)
      goto LABEL_39;
    v17 = v31[v7];
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  sub_23C7E087C();
  sub_23C7DBCD0();
  sub_23C7DB3DC();
  sub_23C7DB398();
  __break(1u);
LABEL_49:
  sub_23C7E087C();
  result = sub_23C7DBCD0();
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_23C868120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v24 = a4;
  if (a5)
  {
    swift_bridgeObjectRetain();
    v20 = sub_23C865744(a5);
    swift_bridgeObjectRetain();
    sub_23C8DDF34(&v20);
    swift_bridgeObjectRelease();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    swift_release();
    v20 = 40;
    v21 = 0xE100000000000000;
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    if (!a6)
      return v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    if (!a6)
      return v23;
  }
  swift_bridgeObjectRetain();
  sub_23C7FCFFC();
  v9 = v8;
  swift_bridgeObjectRelease();
  v20 = v9;
  sub_23C855F54(&v20, (uint64_t (*)(uint64_t))sub_23C8DE9F8, sub_23C869B84);
  v10 = v20;
  v11 = *(_QWORD *)(v20 + 16);
  if (v11)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v12 = 0;
    v13 = v20;
    do
    {
      v22 = *(_QWORD *)(v10 + 8 * v12 + 32);
      v14 = sub_23C911880();
      v16 = v15;
      v20 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      if (v17 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        sub_23C7E649C();
        v13 = v20;
      }
      ++v12;
      *(_QWORD *)(v13 + 16) = v17 + 1;
      v18 = v13 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v14;
      *(_QWORD *)(v18 + 40) = v16;
    }
    while (v11 != v12);
    swift_release();
  }
  else
  {
    swift_release();
    v13 = MEMORY[0x24BEE4AF8];
  }
  v20 = v13;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  v20 = 91;
  v21 = 0xE100000000000000;
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  return v23;
}

void sub_23C868438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v18;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23C911BBC();
    sub_23C910F14();
    v6 = sub_23C911BF8();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_23C86AB2C();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (sub_23C7E16E8() & 1) == 0)
      {
        v13 = ~v7;
        v14 = (v8 + 1) & v13;
        sub_23C86AB2C();
        if ((v15 & 1) != 0)
        {
          do
          {
            v16 = (_QWORD *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2)
              break;
            if ((sub_23C7E16E8() & 1) != 0)
              break;
            v14 = (v14 + 1) & v13;
            sub_23C86AB2C();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void sub_23C868540(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = sub_23C911BB0() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_23C7E9B70();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_QWORD *)(v5 + 8 * v6) == a1)
            break;
          sub_23C7E9B70();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
}

BOOL sub_23C8685E0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    v3 = sub_23C9115D4();
    sub_23C7DE904();
    return v3 & 1;
  }
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_23C911BBC();
  sub_23C88129C();
  v5 = sub_23C911BF8();
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = v5 & ~v6;
  sub_23C7ED0AC();
  if ((v8 & 1) == 0)
    return 0;
  type metadata accessor for TableAlias();
  swift_retain();
  v9 = static TableAlias.== infix(_:_:)();
  swift_release();
  if (!v9)
  {
    v11 = ~v6;
    v12 = (v7 + 1) & v11;
    sub_23C7ED0AC();
    if ((v13 & 1) != 0)
    {
      do
      {
        swift_retain();
        v10 = static TableAlias.== infix(_:_:)();
        swift_release();
        if (v10)
          break;
        v12 = (v12 + 1) & v11;
        sub_23C7ED0AC();
      }
      while ((v14 & 1) != 0);
      return v10;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_23C86872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (a1)
  {
    if (!a3)
      return 0;
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_23C8661AC(v7, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      return 0;
  }
  else if (a3)
  {
    return 0;
  }
  if (a2)
  {
    if (a4 && (sub_23C866468(a2, a4) & 1) != 0)
      return 1;
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_23C8687CC(uint64_t *a1, uint64_t *a2)
{
  return sub_23C86872C(*a1, a1[1], *a2, a2[1]);
}

uint64_t DatabaseRegion.databaseRegion(_:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8687FC@<X0>(_QWORD *a1@<X8>)
{
  return DatabaseRegion.databaseRegion(_:)(a1);
}

uint64_t AnyDatabaseRegionConvertible.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AnyDatabaseRegionConvertible.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = swift_allocObject();
  result = sub_23C7DB5CC(a1, v4 + 16);
  *a2 = sub_23C86A720;
  a2[1] = (uint64_t (*)(uint64_t))v4;
  return result;
}

uint64_t sub_23C868870(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  sub_23C7E7E34(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

uint64_t AnyDatabaseRegionConvertible.databaseRegion(_:)()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t sub_23C8688F8()
{
  return AnyDatabaseRegionConvertible.databaseRegion(_:)();
}

uint64_t sub_23C86890C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;

  sub_23C7E3084();
  result = sub_23C910DAC();
  v8 = result;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = (_QWORD *)(a2 + 32);
    sub_23C7E0808();
    while (1)
    {
      v11 = v10[3];
      v12 = v10[4];
      sub_23C7E7E34(v10, v11);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v12 + 8))(&v15, a1, v11, v12);
      if (v3)
        break;
      v13[0] = v15;
      v13[1] = v8;
      DatabaseRegion.union(_:)(v13, &v14);
      sub_23C7DC474();
      sub_23C7E087C();
      v8 = v14;
      v10 += 5;
      if (!--v9)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    return sub_23C7DC474();
  }
  else
  {
LABEL_6:
    *a3 = v8;
  }
  return result;
}

uint64_t sub_23C868A24(uint64_t isStackAllocationSafe, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)isStackAllocationSafe;
  if ((*(_BYTE *)(a2 + 32) & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
      goto LABEL_5;
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  sub_23C7DF2F4();
  v3 = sub_23C7E6CEC();
  sub_23C7DE904();
  if (v2)
  {
    swift_willThrow();

    __break(1u);
LABEL_5:
    swift_slowAlloc();
    sub_23C7DF2F4();
    sub_23C7E6CEC();
    sub_23C7DE904();
    if (!v2)
      sub_23C86AB70();

    sub_23C86AB70();
  }
  return v3;
}

void sub_23C868B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v54;

  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    sub_23C7E62EC();
    v11 = v10 & v9;
    v13 = (unint64_t)(v12 + 63) >> 6;
    v14 = a3 + 56;
    while (1)
    {
LABEL_3:
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        if (v17 >= v13)
          goto LABEL_54;
        ++v7;
        if (!*(_QWORD *)(v8 + 8 * v17))
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v13)
            goto LABEL_54;
          if (!*(_QWORD *)(v8 + 8 * v7))
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v13)
              goto LABEL_54;
            if (!*(_QWORD *)(v8 + 8 * v7))
            {
              v18 = v17 + 3;
              if (v18 >= v13)
              {
LABEL_54:
                swift_retain();
                sub_23C87CCA8(a1, a2, v6, a3);
                return;
              }
              if (!*(_QWORD *)(v8 + 8 * v18))
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v7 >= v13)
                    goto LABEL_54;
                  ++v18;
                  if (*(_QWORD *)(v8 + 8 * v7))
                    goto LABEL_18;
                }
LABEL_57:
                __break(1u);
                goto LABEL_58;
              }
              v7 = v18;
            }
          }
        }
LABEL_18:
        sub_23C7ECC94();
        v11 = v20 & v19;
        v16 = v21 + (v7 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
      v23 = sub_23C911BB0();
      v24 = -1 << *(_BYTE *)(a3 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      v27 = 1 << v25;
      if (((1 << v25) & *(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v28 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v28 + 8 * v25) != v22)
        {
          for (i = v25 + 1; ; i = v30 + 1)
          {
            v30 = i & ~v24;
            if (((*(_QWORD *)(v14 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
              goto LABEL_3;
            if (*(_QWORD *)(v28 + 8 * v30) == v22)
              break;
          }
          v26 = v30 >> 6;
          v27 = 1 << v30;
        }
        *(_QWORD *)(a1 + 8 * v26) |= v27;
        v31 = __OFADD__(v6++, 1);
        if (v31)
          break;
      }
    }
    __break(1u);
  }
  v32 = 0;
  v33 = a3 + 56;
  sub_23C7E62EC();
  v36 = v35 & v34;
  v54 = (unint64_t)(v37 + 63) >> 6;
  v38 = a4 + 56;
  while (v36)
  {
    v39 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    v40 = v39 | (v32 << 6);
LABEL_46:
    v46 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v40);
    v47 = sub_23C911BB0();
    v48 = -1 << *(_BYTE *)(a4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
    {
      v50 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v50 + 8 * v49) == v46)
      {
LABEL_51:
        *(_QWORD *)(a1 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
        v31 = __OFADD__(v6++, 1);
        if (v31)
        {
          __break(1u);
          goto LABEL_54;
        }
      }
      else
      {
        v51 = ~v48;
        while (1)
        {
          v49 = (v49 + 1) & v51;
          if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
            break;
          if (*(_QWORD *)(v50 + 8 * v49) == v46)
            goto LABEL_51;
        }
      }
    }
  }
  v41 = v32 + 1;
  if (__OFADD__(v32, 1))
    goto LABEL_56;
  if (v41 >= v54)
    goto LABEL_54;
  ++v32;
  if (*(_QWORD *)(v33 + 8 * v41))
    goto LABEL_45;
  v32 = v41 + 1;
  if (v41 + 1 >= v54)
    goto LABEL_54;
  if (*(_QWORD *)(v33 + 8 * v32))
    goto LABEL_45;
  v32 = v41 + 2;
  if (v41 + 2 >= v54)
    goto LABEL_54;
  if (*(_QWORD *)(v33 + 8 * v32))
  {
LABEL_45:
    sub_23C7ECC94();
    v36 = v44 & v43;
    v40 = v45 + (v32 << 6);
    goto LABEL_46;
  }
  v42 = v41 + 3;
  if (v42 >= v54)
    goto LABEL_54;
  if (*(_QWORD *)(v33 + 8 * v42))
  {
    v32 = v42;
    goto LABEL_45;
  }
  while (1)
  {
    v32 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v32 >= v54)
      goto LABEL_54;
    ++v42;
    if (*(_QWORD *)(v33 + 8 * v32))
      goto LABEL_45;
  }
LABEL_58:
  __break(1u);
}

void sub_23C868ED8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  _QWORD *v30;
  BOOL v31;
  BOOL v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  unint64_t j;
  uint64_t v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;

  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v60 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v62 = (unint64_t)(v7 + 63) >> 6;
    v64 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v65 = (v9 - 1) & v9;
          v67 = v6;
          v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_82;
          }
          if (v12 >= v62)
            goto LABEL_80;
          v13 = *(_QWORD *)(v60 + 8 * v12);
          v14 = v6 + 1;
          if (!v13)
          {
            v14 = v6 + 2;
            if (v6 + 2 >= v62)
              goto LABEL_80;
            v13 = *(_QWORD *)(v60 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 3;
              if (v6 + 3 >= v62)
                goto LABEL_80;
              v13 = *(_QWORD *)(v60 + 8 * v14);
              if (!v13)
              {
                v15 = v6 + 4;
                if (v6 + 4 >= v62)
                  goto LABEL_80;
                v13 = *(_QWORD *)(v60 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_84;
                    if (v14 >= v62)
                      goto LABEL_80;
                    v13 = *(_QWORD *)(v60 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_21;
                  }
                }
                v14 = v6 + 4;
              }
            }
          }
LABEL_21:
          v65 = (v13 - 1) & v13;
          v67 = v14;
          v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v11);
        v17 = *v16;
        v18 = v16[1];
        sub_23C911BBC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23C910F14();
        v19 = sub_23C911BF8();
        v20 = -1 << *(_BYTE *)(v5 + 32);
        v21 = v19 & ~v20;
        v22 = v21 >> 6;
        v23 = 1 << v21;
        if (((1 << v21) & *(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
          break;
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v67;
        v5 = a3;
        v4 = a4;
        v9 = v65;
      }
      v24 = *(_QWORD *)(a3 + 48);
      v25 = (_QWORD *)(v24 + 32 * v21);
      v26 = *v25 == v17 && v25[1] == v18;
      if (!v26 && (sub_23C911A18() & 1) == 0)
      {
        v27 = ~v20;
        for (i = v21 + 1; ; i = v29 + 1)
        {
          v29 = i & v27;
          if (((*(_QWORD *)(v10 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
            break;
          v30 = (_QWORD *)(v24 + 32 * v29);
          v31 = *v30 == v17 && v30[1] == v18;
          if (v31 || (sub_23C911A18() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v22 = v29 >> 6;
            v23 = 1 << v29;
            goto LABEL_38;
          }
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      v6 = v67;
      v5 = a3;
      a1[v22] |= v23;
      v9 = v65;
      v32 = __OFADD__(v64++, 1);
      v4 = a4;
      if (v32)
        goto LABEL_83;
    }
  }
  v33 = 0;
  v61 = a3 + 56;
  v34 = 1 << *(_BYTE *)(a3 + 32);
  if (v34 < 64)
    v35 = ~(-1 << v34);
  else
    v35 = -1;
  v36 = v35 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v34 + 63) >> 6;
  v64 = 0;
  v37 = a4 + 56;
  while (1)
  {
    if (v36)
    {
      v38 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v68 = v33;
      v39 = v38 | (v33 << 6);
      goto LABEL_62;
    }
    v40 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v40 >= v63)
      goto LABEL_80;
    v41 = *(_QWORD *)(v61 + 8 * v40);
    v42 = v33 + 1;
    if (!v41)
    {
      v42 = v33 + 2;
      if (v33 + 2 >= v63)
        goto LABEL_80;
      v41 = *(_QWORD *)(v61 + 8 * v42);
      if (!v41)
      {
        v42 = v33 + 3;
        if (v33 + 3 >= v63)
          goto LABEL_80;
        v41 = *(_QWORD *)(v61 + 8 * v42);
        if (!v41)
          break;
      }
    }
LABEL_61:
    v36 = (v41 - 1) & v41;
    v68 = v42;
    v39 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_62:
    v66 = v39;
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v39);
    v46 = *v44;
    v45 = v44[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    v47 = sub_23C911BF8();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v37 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_76;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 32 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_23C911A18() & 1) != 0)
    {
LABEL_77:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = v68;
      *(unint64_t *)((char *)a1 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
      v32 = __OFADD__(v64++, 1);
      v5 = a3;
      v4 = a4;
      if (v32)
      {
        __break(1u);
LABEL_80:
        swift_retain();
        sub_23C87CE80(a1, a2, v64, v5);
        return;
      }
    }
    else
    {
      v53 = ~v48;
      for (j = v49 + 1; ; j = v55 + 1)
      {
        v55 = j & v53;
        if (((*(_QWORD *)(v37 + (((j & v53) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v53)) & 1) == 0)
          break;
        v56 = (_QWORD *)(v50 + 32 * v55);
        v57 = *v56 == v46 && v56[1] == v45;
        if (v57 || (sub_23C911A18() & 1) != 0)
          goto LABEL_77;
      }
LABEL_76:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = v68;
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v33 + 4;
  if (v33 + 4 >= v63)
    goto LABEL_80;
  v41 = *(_QWORD *)(v61 + 8 * v43);
  if (v41)
  {
    v42 = v33 + 4;
    goto LABEL_61;
  }
  while (1)
  {
    v42 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v42 >= v63)
      goto LABEL_80;
    v41 = *(_QWORD *)(v61 + 8 * v42);
    ++v43;
    if (v41)
      goto LABEL_61;
  }
LABEL_85:
  __break(1u);
}

uint64_t sub_23C869474(uint64_t *a1)
{
  return sub_23C855F54(a1, (uint64_t (*)(uint64_t))sub_23C8DE988, sub_23C869498);
}

uint64_t sub_23C869498(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      return sub_23C86A184(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_146;
  v107 = result;
  v104 = a1;
  if (v3 <= 1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v110 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v47 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v8 = MEMORY[0x24BEE4AF8];
      goto LABEL_113;
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_23C7E79A8(&qword_256BCBCC8);
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v106 = result;
    v110 = (char *)(result + 32);
  }
  v6 = 0;
  v7 = *a1;
  v105 = *a1 + 24;
  v103 = *a1 + 32;
  v8 = MEMORY[0x24BEE4AF8];
  v108 = v3;
  v109 = v7;
  while (1)
  {
    v9 = v6++;
    if (v6 >= v3)
      goto LABEL_39;
    v10 = v7 + 48 * v6;
    result = *(_QWORD *)(v10 + 16);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = v7 + 48 * v9;
    if (result == *(_QWORD *)(v12 + 16) && v11 == *(_QWORD *)(v12 + 24))
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_38;
      v14 = 0;
    }
    else
    {
      result = sub_23C911A18();
      v14 = result;
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_30;
    }
    v16 = (_QWORD *)(v105 + 48 * v15);
    do
    {
      result = *(v16 - 1);
      v17 = v7 + 48 * v6;
      if (result == *(_QWORD *)(v17 + 16) && *v16 == *(_QWORD *)(v17 + 24))
      {
        if ((v14 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = sub_23C911A18();
        if (((v14 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v19 = v15 + 1;
      v16 += 6;
      v6 = v15;
      v15 = v19;
    }
    while (v19 < v3);
    v15 = v19;
LABEL_30:
    v6 = v15;
    if ((v14 & 1) != 0)
    {
LABEL_31:
      if (v15 < v9)
        goto LABEL_150;
      if (v9 < v15)
      {
        v20 = 48 * v15;
        v21 = 48 * v9;
        v22 = v15;
        v23 = v9;
        do
        {
          if (v23 != --v22)
          {
            if (!v7)
              goto LABEL_153;
            v24 = (_OWORD *)(v7 + v21);
            v25 = *(_OWORD *)(v7 + v21);
            v26 = v7 + v20;
            v27 = *(_QWORD *)(v7 + v21 + 16);
            v28 = *(_QWORD *)(v7 + v21 + 24);
            v29 = *(_OWORD *)(v7 + v21 + 32);
            v31 = *(_OWORD *)(v7 + v20 - 32);
            v30 = *(_OWORD *)(v7 + v20 - 16);
            *v24 = *(_OWORD *)(v7 + v20 - 48);
            v24[1] = v31;
            v24[2] = v30;
            *(_OWORD *)(v26 - 48) = v25;
            *(_QWORD *)(v26 - 32) = v27;
            *(_QWORD *)(v26 - 24) = v28;
            *(_OWORD *)(v26 - 16) = v29;
          }
          ++v23;
          v20 -= 48;
          v21 += 48;
        }
        while (v23 < v22);
      }
LABEL_38:
      v6 = v15;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9))
        goto LABEL_145;
      if (v6 - v9 < v107)
        break;
    }
LABEL_59:
    if (v6 < v9)
      goto LABEL_140;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
    }
    v46 = *(_QWORD *)(v8 + 16);
    v45 = *(_QWORD *)(v8 + 24);
    v47 = v46 + 1;
    if (v46 >= v45 >> 1)
    {
      result = (uint64_t)sub_23C8DE884((char *)(v45 > 1), v46 + 1, 1, (char *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v47;
    v48 = v8 + 32;
    v49 = (uint64_t *)(v8 + 32 + 16 * v46);
    *v49 = v9;
    v49[1] = v6;
    if (v46)
    {
      v7 = v109;
      while (1)
      {
        v50 = v47 - 1;
        if (v47 >= 4)
        {
          v55 = v48 + 16 * v47;
          v56 = *(_QWORD *)(v55 - 64);
          v57 = *(_QWORD *)(v55 - 56);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_129;
          v60 = *(_QWORD *)(v55 - 48);
          v59 = *(_QWORD *)(v55 - 40);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_130;
          v62 = v47 - 2;
          v63 = (uint64_t *)(v48 + 16 * (v47 - 2));
          v65 = *v63;
          v64 = v63[1];
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_131;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_133;
          if (v67 >= v58)
          {
            v85 = (uint64_t *)(v48 + 16 * v50);
            v87 = *v85;
            v86 = v85[1];
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_139;
            v78 = v53 < v88;
            goto LABEL_97;
          }
        }
        else
        {
          if (v47 != 3)
          {
            v79 = *(_QWORD *)(v8 + 32);
            v80 = *(_QWORD *)(v8 + 40);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_91;
          }
          v52 = *(_QWORD *)(v8 + 32);
          v51 = *(_QWORD *)(v8 + 40);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_132;
        v62 = v47 - 2;
        v68 = (uint64_t *)(v48 + 16 * (v47 - 2));
        v70 = *v68;
        v69 = v68[1];
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_134;
        v74 = (uint64_t *)(v48 + 16 * v50);
        v76 = *v74;
        v75 = v74[1];
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_136;
        if (__OFADD__(v72, v77))
          goto LABEL_138;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_97:
          if (v78)
            v50 = v62;
          goto LABEL_99;
        }
LABEL_91:
        if ((v73 & 1) != 0)
          goto LABEL_135;
        v81 = (uint64_t *)(v48 + 16 * v50);
        v83 = *v81;
        v82 = v81[1];
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_137;
        if (v84 < v72)
          goto LABEL_108;
LABEL_99:
        v89 = v50 - 1;
        if (v50 - 1 >= v47)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!v7)
          goto LABEL_152;
        v90 = v7;
        v91 = (uint64_t *)(v48 + 16 * v89);
        v92 = *v91;
        v93 = (_QWORD *)(v48 + 16 * v50);
        v94 = v93[1];
        result = sub_23C86A268((char *)(v90 + 48 * *v91), (char *)(v90 + 48 * *v93), v90 + 48 * v94, v110);
        if (v1)
        {
LABEL_110:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v106 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v94 < v92)
          goto LABEL_126;
        if (v50 > *(_QWORD *)(v8 + 16))
          goto LABEL_127;
        *v91 = v92;
        *(_QWORD *)(v48 + 16 * v89 + 8) = v94;
        v95 = *(_QWORD *)(v8 + 16);
        if (v50 >= v95)
          goto LABEL_128;
        v47 = v95 - 1;
        result = (uint64_t)memmove((void *)(v48 + 16 * v50), v93 + 2, 16 * (v95 - 1 - v50));
        *(_QWORD *)(v8 + 16) = v95 - 1;
        v78 = v95 > 2;
        v7 = v109;
        if (!v78)
          goto LABEL_108;
      }
    }
    v47 = 1;
    v7 = v109;
LABEL_108:
    v3 = v108;
    if (v6 >= v108)
    {
      v5 = v106;
LABEL_113:
      result = v8;
      v106 = v5;
      if (v47 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v47 - 2;
          if (v47 < 2)
            goto LABEL_141;
          if (!v96)
            goto LABEL_154;
          v98 = result;
          v99 = *(_QWORD *)(result + 32 + 16 * v97);
          v100 = *(_QWORD *)(result + 32 + 16 * (v47 - 1) + 8);
          result = sub_23C86A268((char *)(v96 + 48 * v99), (char *)(v96 + 48 * *(_QWORD *)(result + 32 + 16 * (v47 - 1))), v96 + 48 * v100, v110);
          if (v1)
            goto LABEL_110;
          if (v100 < v99)
            goto LABEL_142;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v98 = result;
          }
          if (v97 >= *(_QWORD *)(v98 + 16))
            goto LABEL_143;
          v101 = (_QWORD *)(v98 + 32 + 16 * v97);
          *v101 = v99;
          v101[1] = v100;
          v102 = *(_QWORD *)(v98 + 16);
          if (v47 > v102)
            goto LABEL_144;
          memmove((void *)(v98 + 32 + 16 * (v47 - 1)), (const void *)(v98 + 32 + 16 * v47), 16 * (v102 - v47));
          result = v98;
          *(_QWORD *)(v98 + 16) = v102 - 1;
          v47 = v102 - 1;
        }
        while (v102 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v9, v107))
    goto LABEL_148;
  if (v9 + v107 >= v3)
    v32 = v3;
  else
    v32 = v9 + v107;
  if (v32 >= v9)
  {
    if (v6 != v32)
    {
      v33 = v103 + 48 * v6;
      do
      {
        v34 = v7 + 48 * v6;
        result = *(_QWORD *)(v34 + 16);
        v35 = *(_QWORD *)(v34 + 24);
        v36 = v9;
        v37 = v33;
        do
        {
          if (result == *(_QWORD *)(v37 - 64) && v35 == *(_QWORD *)(v37 - 56))
            break;
          result = sub_23C911A18();
          if ((result & 1) == 0)
            break;
          if (!v7)
            goto LABEL_151;
          v39 = (_OWORD *)(v37 - 32);
          v40 = (_OWORD *)(v37 - 80);
          v42 = *(_OWORD *)(v37 - 64);
          v41 = *(_OWORD *)(v37 - 48);
          *(_OWORD *)(v37 - 48) = *(_OWORD *)v37;
          v37 -= 48;
          v43 = *(_QWORD *)(v37 + 16);
          v44 = *(_QWORD *)(v37 + 24);
          result = *(_QWORD *)(v37 + 32);
          v35 = *(_QWORD *)(v37 + 40);
          *v39 = *v40;
          v39[1] = v42;
          v39[2] = v41;
          *(_QWORD *)(v37 - 32) = v43;
          *(_QWORD *)(v37 - 24) = v44;
          *(_QWORD *)(v37 - 16) = result;
          *(_QWORD *)(v37 - 8) = v35;
          ++v36;
        }
        while (v6 != v36);
        ++v6;
        v33 += 48;
      }
      while (v6 != v32);
      v6 = v32;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}

uint64_t sub_23C869B84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v2 = a1;
  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_127;
    if (v3)
      return sub_23C8308C8(0, v3, 1, v2);
    return result;
  }
  if (v3 < -1)
    goto LABEL_126;
  v85 = result;
  v86 = v3;
  if (v3 > 1)
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v84 = result;
    v88 = (char *)(result + 32);
LABEL_10:
    v6 = 0;
    v7 = *v2;
    v82 = v2;
    v83 = *v2 - 8;
    v8 = MEMORY[0x24BEE4AF8];
    v87 = *v2;
    while (1)
    {
      v9 = v6++;
      if (v6 < v3)
      {
        v10 = *(_QWORD *)(v7 + 8 * v6);
        v11 = *(_QWORD *)(v7 + 8 * v9);
        v6 = v9 + 2;
        if (v9 + 2 < v3)
        {
          v12 = v10;
          while (1)
          {
            v13 = *(_QWORD *)(v7 + 8 * v6);
            if (v10 < v11 == v13 >= v12)
              break;
            ++v6;
            v12 = v13;
            if (v6 >= v3)
            {
              v6 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v6 < v9)
            goto LABEL_128;
          if (v9 < v6)
          {
            v14 = v6 - 1;
            v15 = v9;
            do
            {
              if (v15 != v14)
              {
                if (!v7)
                  goto LABEL_133;
                v16 = *(_QWORD *)(v7 + 8 * v15);
                *(_QWORD *)(v7 + 8 * v15) = *(_QWORD *)(v7 + 8 * v14);
                *(_QWORD *)(v7 + 8 * v14) = v16;
              }
              v56 = ++v15 < v14--;
            }
            while (v56);
          }
        }
      }
      if (v6 < v3)
      {
        if (__OFSUB__(v6, v9))
          goto LABEL_125;
        if (v6 - v9 < v85)
        {
          v17 = v9 + v85;
          if (__OFADD__(v9, v85))
            goto LABEL_129;
          if (v17 >= v3)
            v17 = v3;
          if (v17 < v9)
          {
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v6 != v17)
          {
            v18 = (uint64_t *)(v83 + 8 * v6);
            do
            {
              v19 = *(_QWORD *)(v7 + 8 * v6);
              v20 = v9;
              v21 = v18;
              do
              {
                v22 = *v21;
                if (v19 >= *v21)
                  break;
                if (!v7)
                  goto LABEL_131;
                *v21 = v19;
                v21[1] = v22;
                --v21;
                ++v20;
              }
              while (v6 != v20);
              ++v6;
              ++v18;
            }
            while (v6 != v17);
            v6 = v17;
          }
        }
      }
      if (v6 < v9)
        goto LABEL_120;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v24 = *(_QWORD *)(v8 + 16);
      v23 = *(_QWORD *)(v8 + 24);
      v25 = v24 + 1;
      v7 = v87;
      if (v24 >= v23 >> 1)
      {
        result = (uint64_t)sub_23C8DE884((char *)(v23 > 1), v24 + 1, 1, (char *)v8);
        v7 = v87;
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v25;
      v26 = v8 + 32;
      v27 = (uint64_t *)(v8 + 32 + 16 * v24);
      *v27 = v9;
      v27[1] = v6;
      if (v24)
      {
        while (1)
        {
          v28 = v25 - 1;
          if (v25 >= 4)
          {
            v33 = v26 + 16 * v25;
            v34 = *(_QWORD *)(v33 - 64);
            v35 = *(_QWORD *)(v33 - 56);
            v39 = __OFSUB__(v35, v34);
            v36 = v35 - v34;
            if (v39)
              goto LABEL_109;
            v38 = *(_QWORD *)(v33 - 48);
            v37 = *(_QWORD *)(v33 - 40);
            v39 = __OFSUB__(v37, v38);
            v31 = v37 - v38;
            v32 = v39;
            if (v39)
              goto LABEL_110;
            v40 = v25 - 2;
            v41 = (uint64_t *)(v26 + 16 * (v25 - 2));
            v43 = *v41;
            v42 = v41[1];
            v39 = __OFSUB__(v42, v43);
            v44 = v42 - v43;
            if (v39)
              goto LABEL_111;
            v39 = __OFADD__(v31, v44);
            v45 = v31 + v44;
            if (v39)
              goto LABEL_113;
            if (v45 >= v36)
            {
              v63 = (uint64_t *)(v26 + 16 * v28);
              v65 = *v63;
              v64 = v63[1];
              v39 = __OFSUB__(v64, v65);
              v66 = v64 - v65;
              if (v39)
                goto LABEL_119;
              v56 = v31 < v66;
              goto LABEL_77;
            }
          }
          else
          {
            if (v25 != 3)
            {
              v57 = *(_QWORD *)(v8 + 32);
              v58 = *(_QWORD *)(v8 + 40);
              v39 = __OFSUB__(v58, v57);
              v50 = v58 - v57;
              v51 = v39;
              goto LABEL_71;
            }
            v30 = *(_QWORD *)(v8 + 32);
            v29 = *(_QWORD *)(v8 + 40);
            v39 = __OFSUB__(v29, v30);
            v31 = v29 - v30;
            v32 = v39;
          }
          if ((v32 & 1) != 0)
            goto LABEL_112;
          v40 = v25 - 2;
          v46 = (uint64_t *)(v26 + 16 * (v25 - 2));
          v48 = *v46;
          v47 = v46[1];
          v49 = __OFSUB__(v47, v48);
          v50 = v47 - v48;
          v51 = v49;
          if (v49)
            goto LABEL_114;
          v52 = (uint64_t *)(v26 + 16 * v28);
          v54 = *v52;
          v53 = v52[1];
          v39 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v39)
            goto LABEL_116;
          if (__OFADD__(v50, v55))
            goto LABEL_118;
          if (v50 + v55 >= v31)
          {
            v56 = v31 < v55;
LABEL_77:
            if (v56)
              v28 = v40;
            goto LABEL_79;
          }
LABEL_71:
          if ((v51 & 1) != 0)
            goto LABEL_115;
          v59 = (uint64_t *)(v26 + 16 * v28);
          v61 = *v59;
          v60 = v59[1];
          v39 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v39)
            goto LABEL_117;
          if (v62 < v50)
            goto LABEL_88;
LABEL_79:
          v67 = v28 - 1;
          if (v28 - 1 >= v25)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (!v7)
            goto LABEL_132;
          v68 = (uint64_t *)(v26 + 16 * v67);
          v69 = *v68;
          v70 = v26;
          v71 = (_QWORD *)(v26 + 16 * v28);
          v72 = v71[1];
          result = sub_23C830920((char *)(v7 + 8 * *v68), (char *)(v7 + 8 * *v71), v7 + 8 * v72, v88);
          if (v1)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v84 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v72 < v69)
            goto LABEL_106;
          if (v28 > *(_QWORD *)(v8 + 16))
            goto LABEL_107;
          *v68 = v69;
          *(_QWORD *)(v70 + 16 * v67 + 8) = v72;
          v73 = *(_QWORD *)(v8 + 16);
          if (v28 >= v73)
            goto LABEL_108;
          v25 = v73 - 1;
          result = (uint64_t)memmove(v71, v71 + 2, 16 * (v73 - 1 - v28));
          v26 = v70;
          *(_QWORD *)(v8 + 16) = v73 - 1;
          v7 = v87;
          if (v73 <= 2)
            goto LABEL_88;
        }
      }
      v25 = 1;
LABEL_88:
      v3 = v86;
      if (v6 >= v86)
      {
        v5 = v84;
        v2 = v82;
        goto LABEL_93;
      }
    }
  }
  v5 = MEMORY[0x24BEE4AF8];
  v88 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v84 = MEMORY[0x24BEE4AF8];
    goto LABEL_10;
  }
  v25 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v8 = MEMORY[0x24BEE4AF8];
LABEL_93:
  v84 = v5;
  if (v25 >= 2)
  {
    v74 = *v2;
    do
    {
      v75 = v25 - 2;
      if (v25 < 2)
        goto LABEL_121;
      if (!v74)
        goto LABEL_134;
      v76 = v8;
      v77 = v8 + 32;
      v78 = *(_QWORD *)(v8 + 32 + 16 * v75);
      v79 = *(_QWORD *)(v8 + 32 + 16 * (v25 - 1) + 8);
      result = sub_23C830920((char *)(v74 + 8 * v78), (char *)(v74 + 8 * *(_QWORD *)(v77 + 16 * (v25 - 1))), v74 + 8 * v79, v88);
      if (v1)
        goto LABEL_90;
      if (v79 < v78)
        goto LABEL_122;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C8DE978();
        v76 = result;
      }
      if (v75 >= *(_QWORD *)(v76 + 16))
        goto LABEL_123;
      v80 = (_QWORD *)(v76 + 32 + 16 * v75);
      *v80 = v78;
      v80[1] = v79;
      v81 = *(_QWORD *)(v76 + 16);
      if (v25 > v81)
        goto LABEL_124;
      result = (uint64_t)memmove((void *)(v76 + 32 + 16 * (v25 - 1)), (const void *)(v76 + 32 + 16 * v25), 16 * (v81 - v25));
      v8 = v76;
      *(_QWORD *)(v76 + 16) = v81 - 1;
      v25 = v81 - 1;
    }
    while (v81 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v84 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C86A184(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * a3 + 32;
    while (2)
    {
      v9 = v7 + 48 * v4;
      result = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      v11 = v6;
      v12 = v8;
      do
      {
        if (result == *(_QWORD *)(v12 - 64) && v10 == *(_QWORD *)(v12 - 56))
          break;
        result = sub_23C911A18();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v14 = (_OWORD *)(v12 - 32);
        v15 = (_OWORD *)(v12 - 80);
        v17 = *(_OWORD *)(v12 - 64);
        v16 = *(_OWORD *)(v12 - 48);
        *(_OWORD *)(v12 - 48) = *(_OWORD *)v12;
        v12 -= 48;
        v18 = *(_QWORD *)(v12 + 16);
        v19 = *(_QWORD *)(v12 + 24);
        result = *(_QWORD *)(v12 + 32);
        v10 = *(_QWORD *)(v12 + 40);
        *v14 = *v15;
        v14[1] = v17;
        v14[2] = v16;
        *(_QWORD *)(v12 - 32) = v18;
        *(_QWORD *)(v12 - 24) = v19;
        *(_QWORD *)(v12 - 16) = result;
        *(_QWORD *)(v12 - 8) = v10;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 48;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23C86A268(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  __int128 v18;
  char *v20;
  char *v21;
  BOOL v22;
  char *v23;
  BOOL v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  if (v9 >= v11)
  {
    sub_23C8F9038(a2, (uint64_t)(a3 - (_QWORD)a2) / 48, a4);
    v12 = &v4[48 * v11];
    if (v7 >= v6 || v10 < 48)
      goto LABEL_49;
    v20 = (char *)(a3 - 48);
    while (1)
    {
      v21 = v20 + 48;
      v22 = *((_QWORD *)v12 - 4) == *((_QWORD *)v6 - 4) && *((_QWORD *)v12 - 3) == *((_QWORD *)v6 - 3);
      if (v22 || (sub_23C911A18() & 1) == 0)
      {
        v23 = v12 - 48;
        v25 = v21 != v12 || v20 >= v12;
        v12 -= 48;
        if (!v25)
          goto LABEL_45;
      }
      else
      {
        v23 = v6 - 48;
        v24 = v21 != v6 || v20 >= v6;
        v6 -= 48;
        if (!v24)
          goto LABEL_45;
      }
      v26 = *(_OWORD *)v23;
      v27 = *((_OWORD *)v23 + 2);
      *((_OWORD *)v20 + 1) = *((_OWORD *)v23 + 1);
      *((_OWORD *)v20 + 2) = v27;
      *(_OWORD *)v20 = v26;
LABEL_45:
      v20 -= 48;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_49;
    }
  }
  sub_23C8F9038(a1, (a2 - a1) / 48, a4);
  v12 = &v4[48 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 48)
  {
    do
    {
      v13 = *((_QWORD *)v6 + 2) == *((_QWORD *)v4 + 2) && *((_QWORD *)v6 + 3) == *((_QWORD *)v4 + 3);
      if (v13 || (sub_23C911A18() & 1) == 0)
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 48;
        if (v13 && v7 < v4)
          goto LABEL_20;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 48;
        if (v13 && v7 < v6)
          goto LABEL_20;
      }
      v17 = *(_OWORD *)v14;
      v18 = *((_OWORD *)v14 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v14 + 1);
      *((_OWORD *)v7 + 2) = v18;
      *(_OWORD *)v7 = v17;
LABEL_20:
      v7 += 48;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_49:
  v29 = (v12 - v4) / 48;
  if (v6 != v4 || v6 >= &v4[48 * v29])
    memmove(v6, v4, 48 * v29);
  return 1;
}

void sub_23C86A440(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = sub_23C7E57D0(a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * v5) = v7;
  v9 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v5);
  *v9 = v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(v6 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    sub_23C86AB40(v6, v14);
}

unint64_t sub_23C86A470(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  result = sub_23C86AB48(a1, a2, a3, a4, a5, a6, a7, a8);
  *v12 = v10;
  v12[1] = v11;
  v12[2] = v13;
  v12[3] = v14;
  v15 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * result);
  *v15 = v16;
  v15[1] = v17;
  v18 = *(_QWORD *)(v9 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v9 + 16) = v20;
  return result;
}

void sub_23C86A4A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_23C7E1A98(a1, a2, a3, a4, a5);
  if (v7)
    __break(1u);
  else
    sub_23C86AB40(v5, v6);
}

void sub_23C86A4C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = sub_23C7E83C8(a1, a2, a3, a4, a5);
  memcpy((void *)(v7 + 176 * v6), v8, 0xABuLL);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v11;
    sub_23C7DB390();
  }
}

void sub_23C86A500(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_QWORD *)(a5[6] + 16 * a1);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 40 * a1;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a4 + 32);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    sub_23C86AB40((uint64_t)a5, v10);
}

unint64_t sub_23C86A55C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  result = sub_23C7EC6DC(a1, a2, a3, a4, a5, a6, a7);
  *(_BYTE *)(v10 + 16) = v9;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    *(_QWORD *)(v8 + 16) = v13;
  return result;
}

unint64_t sub_23C86A584(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  result = sub_23C86AB48(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)v11 = v10;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 24) = v14;
  v15 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * result);
  *v15 = v16;
  v15[1] = v17;
  v18 = *(_QWORD *)(v9 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v9 + 16) = v20;
  return result;
}

void sub_23C86A5C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = sub_23C7E83C8(a1, a2, a3, a4, a5);
  sub_23C86AAB4(v8, v7 + 40 * v6, (uint64_t *)&unk_25430D6B8);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v11;
    sub_23C7DB390();
  }
}

void sub_23C86A604(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = sub_23C7E57D0(a1, a2, a3, a4, a5);
  v8 = v7 + 40 * v5;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v5);
  *v11 = v12;
  v11[1] = v13;
  v14 = *(_QWORD *)(v6 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    sub_23C86AB40(v6, v16);
}

void sub_23C86A648(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v6 = sub_23C7E83C8(a1, a2, a3, a4, a5);
  memcpy((void *)(v7 + 216 * v6), v8, 0xD2uLL);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v11;
    sub_23C7DB390();
  }
}

unint64_t sub_23C86A688(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  result = sub_23C7EC6DC(a1, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)(v10 + 16) = v9;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    *(_QWORD *)(v8 + 16) = v13;
  return result;
}

unint64_t sub_23C86A6B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t sub_23C86A6FC()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C86A720(uint64_t a1)
{
  uint64_t v1;

  return sub_23C868870(a1, (_QWORD *)(v1 + 16));
}

_QWORD *initializeBufferWithCopyOfBuffer for DatabaseRegion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DatabaseRegion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DatabaseRegion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseRegion(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseRegion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseRegion()
{
  return &type metadata for DatabaseRegion;
}

uint64_t dispatch thunk of DatabaseRegionConvertible.databaseRegion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for AnyDatabaseRegionConvertible()
{
  return &type metadata for AnyDatabaseRegionConvertible;
}

_QWORD *sub_23C86A8AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  return a1;
}

_QWORD *assignWithCopy for TableRegion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRegion(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableRegion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableRegion()
{
  return &type metadata for TableRegion;
}

uint64_t sub_23C86A9EC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C86AA40(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C86AA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(v2 + 16) == a1 && *(_QWORD *)(v2 + 24) == a2)
    return 1;
  else
    return sub_23C911A18();
}

uint64_t sub_23C86AAB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_23C7E79A8(a3);
  v4 = sub_23C7DF8B0();
  v5(v4);
  return a2;
}

uint64_t sub_23C86AAF4(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23C86AB40(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
}

unint64_t sub_23C86AB48(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)(a8 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

void sub_23C86AB70()
{
  JUMPOUT(0x2426261F0);
}

uint64_t sub_23C86ABA4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C86ABB8()
{
  return swift_initStackObject();
}

uint64_t sub_23C86ABD4()
{
  uint64_t v0;

  return v0;
}

uint64_t UUID.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v12 = sub_23C910B9C();
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  result = MEMORY[0x242624738](&v12, 16);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = 3;
  return result;
}

uint64_t NSUUID.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)sub_23C911130();
  v3[2] = 16;
  v3[5] = 0;
  v3[4] = 0;
  v4 = v3 + 4;
  objc_msgSend(v1, sel_getUUIDBytes_, v3 + 4);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE50]), sel_initWithBytes_length_, v4, 16);
  v6 = sub_23C910AF4();
  v8 = v7;

  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = 3;
  return swift_release();
}

id static NSUUID.fromDatabaseValue(_:)(uint64_t a1)
{
  int v1;
  id result;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 3)
    __asm { BR              X10 }
  result = 0;
  if (v1 == 2)
  {
    swift_bridgeObjectRetain();
    return sub_23C86AF08();
  }
  return result;
}

id sub_23C86AEB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithUUIDBytes_, a1);
  *a2 = result;
  return result;
}

id sub_23C86AF08()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (void *)sub_23C910E6C();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithUUIDString_, v1);

  return v2;
}

uint64_t sub_23C86AF78@<X0>(uint64_t a1@<X8>)
{
  return NSUUID.databaseValue.getter(a1);
}

id sub_23C86AF98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = static NSUUID.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

id sub_23C86AFBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C86AEB8(a1, a2);
}

uint64_t static UUID.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 3)
    __asm { BR              X9 }
  if (v3 == 2)
    return sub_23C910B78();
  v5 = sub_23C7E8A48();
  return sub_23C7DE70C(a2, 1, 1, v5);
}

uint64_t sub_23C86B188(uint64_t result, uint64_t a2)
{
  if (result && (unint64_t)(a2 - result + 15) >= 0x1F)
    return sub_23C910B90();
  __break(1u);
  return result;
}

const unsigned __int8 *UUID.init(sqliteStatement:index:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  sqlite3_stmt *v12;
  int v13;
  int v14;
  sqlite3_stmt *v15;
  int v16;
  const unsigned __int8 *result;
  sqlite3_stmt *v18;
  int v19;
  sqlite3_stmt *v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;

  v2 = sub_23C7E79A8(&qword_25430CCD0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23C7E8A48();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - v10;
  v12 = (sqlite3_stmt *)sub_23C7E4314();
  v14 = sqlite3_column_type(v12, v13);
  if (v14 == 4)
  {
    v18 = (sqlite3_stmt *)sub_23C7E4314();
    if (sqlite3_column_bytes(v18, v19) != 16)
      goto LABEL_9;
    v20 = (sqlite3_stmt *)sub_23C7E4314();
    if (!sqlite3_column_blob(v20, v21))
      goto LABEL_9;
    sub_23C910B90();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v11, v5);
    goto LABEL_11;
  }
  if (v14 != 3)
  {
LABEL_9:
    v22 = 1;
    return (const unsigned __int8 *)sub_23C7DE70C(a1, v22, 1, v5);
  }
  v15 = (sqlite3_stmt *)sub_23C7E4314();
  result = sqlite3_column_text(v15, v16);
  if (result)
  {
    sub_23C910F80();
    sub_23C910B78();
    swift_bridgeObjectRelease();
    if (sub_23C7DE718((uint64_t)v4, 1, v5) == 1)
    {
      sub_23C86B7E0((uint64_t)v4);
      goto LABEL_9;
    }
    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v9, v4, v5);
    sub_23C910B9C();
    sub_23C910B90();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v23((char *)a1, v11, v5);
LABEL_11:
    v22 = 0;
    return (const unsigned __int8 *)sub_23C7DE70C(a1, v22, 1, v5);
  }
  __break(1u);
  return result;
}

const unsigned __int8 *sub_23C86B440@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  const unsigned __int8 *result;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;

  v8 = sub_23C7E79A8(&qword_25430CCD0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  v18 = sqlite3_column_type(a1, a2);
  if (v18 == 4)
  {
    if (sqlite3_column_bytes(a1, a2) != 16 || !sqlite3_column_blob(a1, a2))
      goto LABEL_9;
    sub_23C910B90();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v17, a3);
    goto LABEL_11;
  }
  if (v18 != 3)
  {
LABEL_9:
    v20 = 1;
    return (const unsigned __int8 *)sub_23C7DE70C(a4, v20, 1, a3);
  }
  result = sqlite3_column_text(a1, a2);
  if (result)
  {
    sub_23C910F80();
    sub_23C910B78();
    swift_bridgeObjectRelease();
    if (sub_23C7DE718((uint64_t)v11, 1, a3) == 1)
    {
      sub_23C86B7E0((uint64_t)v11);
      goto LABEL_9;
    }
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v15, v11, a3);
    sub_23C910B9C();
    sub_23C910B90();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a3);
    v21((char *)a4, v17, a3);
LABEL_11:
    v20 = 0;
    return (const unsigned __int8 *)sub_23C7DE70C(a4, v20, 1, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_23C86B690(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  v5 = BYTE2(a2);
  v6 = BYTE3(a2);
  v7 = BYTE4(a2);
  v8 = BYTE5(a2);
  return sub_23C86B188((uint64_t)&v3, (uint64_t)&v3 + BYTE6(a2));
}

uint64_t sub_23C86B750(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_23C910950();
  v5 = result;
  if (result)
  {
    result = sub_23C910968();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = sub_23C91095C();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return sub_23C86B188(v5, v11);
}

uint64_t sub_23C86B7E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430CCD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_23C86B820()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) == 4 && *(_OWORD *)v0 == 0;
}

uint64_t sub_23C86B83C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if (v2 != 1)
    {
      v5 = *(_QWORD *)(v0 + 24);
      v6 = *(_QWORD *)(v0 + 8);
      v9[3] = &type metadata for DatabaseValueDecodingContainer;
      v9[4] = sub_23C86CE20();
      v7 = swift_allocObject();
      v9[0] = v7;
      *(_QWORD *)(v7 + 16) = v1;
      *(_QWORD *)(v7 + 24) = v6;
      *(_BYTE *)(v7 + 32) = v2;
      *(_QWORD *)(v7 + 40) = v5;
      sub_23C911694();
      swift_allocError();
      sub_23C7E56A4(v1, v6, v2);
      swift_bridgeObjectRetain();
      sub_23C91167C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
      swift_willThrow();
      return v4 & 1;
    }
    v3 = (v1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  }
  else
  {
    v3 = v1 == 0;
  }
  v4 = !v3;
  return v4 & 1;
}

uint64_t sub_23C86B958()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (result == (char)result)
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

uint64_t sub_23C86BAA8()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (result == (__int16)result)
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

uint64_t sub_23C86BBF8()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (result == (int)result)
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

void sub_23C86BD48()
{
  uint64_t v0;
  double v1;
  int v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = *(double *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if (!*(_BYTE *)(v0 + 16))
    goto LABEL_12;
  if (v2 != 1 || v1 < -9.22337204e18 || v1 >= 9.22337204e18)
  {
    v5 = *(_QWORD *)(v0 + 8);
    v6 = *(_QWORD *)(v0 + 24);
    v8[3] = &type metadata for DatabaseValueDecodingContainer;
    v8[4] = sub_23C86CE20();
    v7 = sub_23C7DF3DC();
    v8[0] = v7;
    *(double *)(v7 + 16) = v1;
    *(_QWORD *)(v7 + 24) = v5;
    *(_BYTE *)(v7 + 32) = v2;
    *(_QWORD *)(v7 + 40) = v6;
    sub_23C911694();
    sub_23C7DB694();
    sub_23C7E56A4(*(uint64_t *)&v1, v5, v2);
    swift_bridgeObjectRetain();
    sub_23C7E840C();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
    swift_willThrow();
LABEL_12:
    sub_23C7E09A4();
    return;
  }
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18)
      goto LABEL_12;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_23C86BE58()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (result <= 0xFF)
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

unint64_t sub_23C86BFA8()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (!(result >> 16))
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

unint64_t sub_23C86C0F8()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  result = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if (!HIDWORD(result))
      return result;
    goto LABEL_14;
  }
  if (v3 == 1 && v2 >= -9.22337204e18 && v2 < 9.22337204e18)
  {
    if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
    {
      if (v2 > -9.22337204e18)
      {
        result = (uint64_t)v2;
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v9[3] = &type metadata for DatabaseValueDecodingContainer;
  v9[4] = sub_23C86CE20();
  v8 = swift_allocObject();
  v9[0] = v8;
  *(double *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  sub_23C911694();
  swift_allocError();
  sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23C91167C();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return swift_willThrow();
}

void sub_23C86C248()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v8;
  _QWORD v9[5];

  v2 = *(double *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(double *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
LABEL_13:
    if ((*(_QWORD *)&v5 & 0x8000000000000000) == 0)
    {
LABEL_15:
      sub_23C7E09A4();
      return;
    }
LABEL_14:
    v9[3] = &type metadata for DatabaseValueDecodingContainer;
    v9[4] = sub_23C86CE20();
    v8 = sub_23C7DF3DC();
    v9[0] = v8;
    *(double *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = v1;
    *(_BYTE *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    sub_23C911694();
    sub_23C7DB694();
    sub_23C7E56A4(*(uint64_t *)&v2, v1, v3);
    swift_bridgeObjectRetain();
    sub_23C7E840C();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
    swift_willThrow();
    goto LABEL_15;
  }
  if (v3 != 1 || v2 < -9.22337204e18 || v2 >= 9.22337204e18)
    goto LABEL_14;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
      *(_QWORD *)&v5 = (uint64_t)v2;
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_23C86C354()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if (v2 != 1)
    {
      v3 = *(_QWORD *)(v0 + 24);
      v4 = *(_QWORD *)(v0 + 8);
      v6[3] = &type metadata for DatabaseValueDecodingContainer;
      v6[4] = sub_23C86CE20();
      v5 = swift_allocObject();
      v6[0] = v5;
      *(_QWORD *)(v5 + 16) = v1;
      *(_QWORD *)(v5 + 24) = v4;
      *(_BYTE *)(v5 + 32) = v2;
      *(_QWORD *)(v5 + 40) = v3;
      sub_23C911694();
      swift_allocError();
      sub_23C7E56A4(v1, v4, v2);
      swift_bridgeObjectRetain();
      sub_23C91167C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
      swift_willThrow();
    }
  }
}

void sub_23C86C46C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if (v2 != 1)
    {
      v3 = *(_QWORD *)(v0 + 24);
      v4 = *(_QWORD *)(v0 + 8);
      v6[3] = &type metadata for DatabaseValueDecodingContainer;
      v6[4] = sub_23C86CE20();
      v5 = swift_allocObject();
      v6[0] = v5;
      *(_QWORD *)(v5 + 16) = v1;
      *(_QWORD *)(v5 + 24) = v4;
      *(_BYTE *)(v5 + 32) = v2;
      *(_QWORD *)(v5 + 40) = v3;
      sub_23C911694();
      swift_allocError();
      sub_23C7E56A4(v1, v4, v2);
      swift_bridgeObjectRetain();
      sub_23C91167C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
      swift_willThrow();
    }
  }
}

uint64_t sub_23C86C580()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v1 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v1);
  v3 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(unsigned __int8 *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  if (v4 == 3)
  {
    sub_23C7E56A4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), 3);
    sub_23C910EA8();
    v6 = sub_23C910E90();
    v8 = v7;
    sub_23C7E5640(v3, v2, 3);
    if (v8)
      return v6;
LABEL_6:
    v11[3] = &type metadata for DatabaseValueDecodingContainer;
    v11[4] = sub_23C86CE20();
    v9 = swift_allocObject();
    v11[0] = v9;
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v2;
    *(_BYTE *)(v9 + 32) = v4;
    *(_QWORD *)(v9 + 40) = v5;
    sub_23C911694();
    swift_allocError();
    sub_23C7E56A4(v3, v2, v4);
    swift_bridgeObjectRetain();
    sub_23C91167C();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
    swift_willThrow();
    return v3;
  }
  if (v4 != 2)
    goto LABEL_6;
  sub_23C7E56A4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), 2);
  return v3;
}

uint64_t sub_23C86C72C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  unint64_t v35;
  _QWORD *v36;

  v36 = a2;
  v7 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  v8 = *(unsigned __int8 *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v10 = sub_23C7EF87C(a1);
  if (v10)
  {
    v12 = v10;
    v13 = v11;
    v24[1] = a3;
    v26 = v9;
    v27 = v4;
    v28[0] = v7;
    v28[1] = v6;
    v25 = v8;
    v29 = v8;
    v14 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 32);
    v15 = sub_23C9114E4();
    v36 = v24;
    v16 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v15);
    v18 = (char *)v24 - v17;
    v14(v28, v12, v13);
    if (sub_23C7DE718((uint64_t)v18, 1, v12) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v34 = &type metadata for DatabaseValueDecodingContainer;
      v35 = sub_23C86CE20();
      v19 = swift_allocObject();
      *(_QWORD *)&v33 = v19;
      *(_QWORD *)(v19 + 16) = v7;
      *(_QWORD *)(v19 + 24) = v6;
      v20 = v25;
      *(_BYTE *)(v19 + 32) = v25;
      *(_QWORD *)(v19 + 40) = v26;
      sub_23C911694();
      swift_allocError();
      sub_23C7E56A4(v7, v6, v20);
      swift_bridgeObjectRetain();
      sub_23C91167C();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v33);
      return swift_willThrow();
    }
    else
    {
      v31 = v12;
      v32 = v13;
      v23 = sub_23C812004((uint64_t *)&v30);
      (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v23, v18, v12);
      sub_23C7DB5CC(&v30, (uint64_t)&v33);
      sub_23C7DB5CC(&v33, (uint64_t)&v30);
      sub_23C7E79A8(&qword_25430CEB8);
      return swift_dynamicCast();
    }
  }
  else
  {
    v34 = &type metadata for DatabaseValueDecoder;
    v35 = sub_23C7EEE9C();
    v22 = swift_allocObject();
    *(_QWORD *)&v33 = v22;
    *(_QWORD *)(v22 + 16) = v7;
    *(_QWORD *)(v22 + 24) = v6;
    *(_BYTE *)(v22 + 32) = v8;
    *(_QWORD *)(v22 + 40) = v9;
    sub_23C7E56A4(v7, v6, v8);
    swift_bridgeObjectRetain();
    return sub_23C91128C();
  }
}

uint64_t sub_23C86C9E0()
{
  return sub_23C86B83C() & 1;
}

uint64_t sub_23C86C9F8()
{
  return sub_23C86C580();
}

void sub_23C86CA0C()
{
  sub_23C86C46C();
}

void sub_23C86CA20()
{
  sub_23C86C354();
}

void sub_23C86CA34()
{
  sub_23C86BD48();
}

uint64_t sub_23C86CA48()
{
  return sub_23C86B958();
}

uint64_t sub_23C86CA5C()
{
  return sub_23C86BAA8();
}

uint64_t sub_23C86CA70()
{
  return sub_23C86BBF8();
}

uint64_t sub_23C86CA84()
{
  return sub_23C911A30();
}

void sub_23C86CA98()
{
  sub_23C86C248();
}

unint64_t sub_23C86CAAC()
{
  return sub_23C86BE58();
}

unint64_t sub_23C86CAC0()
{
  return sub_23C86BFA8();
}

unint64_t sub_23C86CAD4()
{
  return sub_23C86C0F8();
}

uint64_t sub_23C86CAE8()
{
  return sub_23C911A3C();
}

uint64_t sub_23C86CAFC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_23C86C72C(a1, a2, a3);
}

uint64_t sub_23C86CB10()
{
  sub_23C91176C();
  return sub_23C910DAC();
}

uint64_t sub_23C86CB48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 24);
  a1[3] = (uint64_t)&type metadata for DatabaseValueDecodingContainer;
  v6 = *(_BYTE *)(v1 + 16);
  a1[4] = sub_23C86CE20();
  v7 = swift_allocObject();
  *a1 = v7;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  *(_BYTE *)(v7 + 32) = v6;
  *(_QWORD *)(v7 + 40) = v5;
  sub_23C7E56A4(v3, v4, v6);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C86CBDC@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C86CB48(a1);
}

void static DatabaseValueConvertible<>.fromDatabaseValue(_:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  v20 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_23C9114E4();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v19 - v16;
  LOBYTE(v16) = *((_BYTE *)a1 + 16);
  v28 = *a1;
  v29 = v16;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a6 + 32))(&v28, AssociatedTypeWitness, a6);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = v19;
  sub_23C8017C0((void (*)(char *, char *))sub_23C86CDD4, (uint64_t)v21, MEMORY[0x24BEE4078], a2, v18, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_23C7DBCB0();
}

uint64_t sub_23C86CD18(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  return sub_23C9110AC();
}

uint64_t sub_23C86CDD4(uint64_t a1)
{
  return sub_23C86CD18(a1);
}

ValueMetadata *type metadata accessor for DatabaseValueDecoder()
{
  return &type metadata for DatabaseValueDecoder;
}

unint64_t sub_23C86CE20()
{
  unint64_t result;

  result = qword_256BCCAD0;
  if (!qword_256BCCAD0)
  {
    result = MEMORY[0x242626100](&unk_23C9161F0, &type metadata for DatabaseValueDecodingContainer);
    atomic_store(result, (unint64_t *)&qword_256BCCAD0);
  }
  return result;
}

uint64_t _s12GRDBInternal20DatabaseValueDecoderVwxx_0(uint64_t a1)
{
  sub_23C7E5640(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

void _s12GRDBInternal20DatabaseValueDecoderVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_23C7E91A0(a1, a2);
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v5;
  *(_BYTE *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  sub_23C7DF5B4();
}

void _s12GRDBInternal20DatabaseValueDecoderVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  sub_23C7E91A0(a1, a2);
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v5;
  v9 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(v3 + 16) = v6;
  sub_23C7E5640(v7, v8, v9);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23C7DF5B4();
}

uint64_t _s12GRDBInternal20DatabaseValueDecoderVwta_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_23C7E5640(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12GRDBInternal20DatabaseValueDecoderVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C86CFAC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValueDecodingContainer()
{
  return &type metadata for DatabaseValueDecodingContainer;
}

uint64_t sub_23C86D000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t i;
  unint64_t v10;
  _QWORD v12[2];
  _BYTE __dst[168];
  _QWORD __src[22];
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v7 = v15;
    v8 = (char *)(a1 + 32);
    for (i = v4 - 1; ; --i)
    {
      memcpy(__dst, v8, 0xA3uLL);
      v12[0] = a2;
      v12[1] = a3;
      sub_23C86FDC0(__src, __dst, v12);
      v15 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7FD468();
        v7 = v15;
      }
      *(_QWORD *)(v7 + 16) = v10 + 1;
      memcpy((void *)(v7 + 168 * v10 + 32), __src, 0xA3uLL);
      if (!i)
        break;
      v8 += 168;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v7;
}

void sub_23C86D12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  unint64_t v15;
  _BYTE v16[168];
  __n128 v17[10];
  uint64_t v18;

  sub_23C7DEF5C();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10;
    sub_23C875754(MEMORY[0x24BEE4AF8]);
    sub_23C7FD468();
    v13 = (char *)(v12 + 32);
    for (i = v11 - 1; ; --i)
    {
      sub_23C7E3190(v17, v13);
      sub_23C7E3190(v16, v13);
      sub_23C8738C4(v17);
      sub_23C86E598();
      sub_23C8738C4(v17);
      v15 = *(_QWORD *)(a10 + 16);
      if (v15 >= *(_QWORD *)(a10 + 24) >> 1)
        sub_23C7E7E2C();
      *(_QWORD *)(a10 + 16) = v15 + 1;
      sub_23C7E3190((void *)(a10 + 168 * v15 + 32), &v18);
      if (!i)
        break;
      v13 += 168;
    }
    sub_23C7DFE08();
  }
  else
  {
    sub_23C7DFE08();
  }
  sub_23C7DEF28();
}

uint64_t sub_23C86D248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v18[168];
  __n128 v19[11];
  uint64_t v20;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    sub_23C875754(MEMORY[0x24BEE4AF8]);
    sub_23C7E649C();
    v7 = v20;
    v8 = (char *)(a1 + 32);
    for (i = v5 - 1; ; --i)
    {
      sub_23C7E3190(v19, v8);
      sub_23C7E3190(v18, v8);
      sub_23C8738C4(v19);
      v10 = a2;
      sub_23C7EA244();
      if (v3)
      {
        sub_23C8738C4(v19);
        sub_23C7DFE08();
        sub_23C7DFB3C();
        return v7;
      }
      v13 = v11;
      v14 = v12;
      sub_23C8738C4(v19);
      v20 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      if (v15 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7E649C();
        v7 = v20;
      }
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v14;
      if (!i)
        break;
      v8 += 168;
      a2 = v10;
      v3 = 0;
    }
    sub_23C7DFE08();
  }
  else
  {
    sub_23C7DA9AC();
    return MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t sub_23C86D3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  _BYTE v20[168];
  _BYTE v21[168];
  _QWORD v22[21];
  _BYTE v23[168];
  _QWORD __src[21];
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _BYTE v33[168];
  __n128 __dst[10];
  _QWORD v35[21];
  _BYTE v36[176];
  uint64_t v37;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v37 = MEMORY[0x24BEE4AF8];
  sub_23C7FD468();
  v5 = v37;
  v6 = (uint64_t *)(a1 + 40);
  v19 = v3 - 1;
  v7 = &qword_25430CF68;
  while (1)
  {
    v8 = *v6;
    v35[0] = *(v6 - 1);
    v35[1] = v8;
    v35[2] = a2;
    sub_23C813794((uint64_t)v35);
    sub_23C800B48(v35, v36);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_23C874DBC((uint64_t)v31, (uint64_t)v28);
    v9 = v29;
    if (v29)
    {
      v10 = v30;
      sub_23C7E7E34(v28, v29);
      v11 = v7;
      v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v12(__src, v9, v10);
      v7 = v11;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      sub_23C7E7900((uint64_t)v28, v7);
      v26[1] = 0;
      v26[0] = 0;
      v27 = 4;
      sub_23C8027EC((uint64_t)v26);
      sub_23C800B48(v26, __src);
    }
    memcpy(__dst, __src, 0xA3uLL);
    sub_23C800B48(v35, __src);
    sub_23C800B48(__dst, &v25);
    sub_23C800B48(__dst, v26);
    if (sub_23C874270((uint64_t)v26) == 2)
    {
      v13 = sub_23C8746E0((uint64_t)v26);
      v15 = *(_QWORD *)v13;
      v14 = *(_QWORD *)(v13 + 8);
      v16 = *(unsigned __int8 *)(v13 + 16);
      if (v16 == 4 && !(v14 | v15))
      {
        sub_23C8738C4(__dst);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23C8738C4(__dst);
        sub_23C7E5640(0, 0, 4);
        sub_23C7E5640(0, 0, 4);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23C838EE8((uint64_t)__src);
        memcpy(v21, v36, 0xA3uLL);
        v22[0] = 0;
        v22[1] = 0;
        LOBYTE(v22[2]) = 4;
        sub_23C8027EC((uint64_t)v22);
        sub_23C800B48(v22, v23);
        memcpy(v20, v23, 0xA3uLL);
        sub_23C86F20C(2, v21, v20, v33);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      sub_23C8738C4(__dst);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23C8738C4(__dst);
      sub_23C7E5640(0, 0, 4);
      sub_23C7E5640(v15, v14, v16);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23C8738C4(__dst);
    }
    sub_23C838EE8((uint64_t)__src);
    memcpy(v23, v36, 0xA3uLL);
    memcpy(v22, __dst, 0xA3uLL);
    sub_23C86F20C(0, v23, v22, v33);
LABEL_13:
    sub_23C8738C4(__dst);
    swift_release();
    swift_bridgeObjectRelease();
    sub_23C7E7900((uint64_t)v31, v7);
    swift_release();
    swift_bridgeObjectRelease_n();
    memcpy(v23, v33, 0xA3uLL);
    v37 = v5;
    v17 = *(_QWORD *)(v5 + 16);
    if (v17 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7FD468();
      v5 = v37;
    }
    *(_QWORD *)(v5 + 16) = v17 + 1;
    memcpy((void *)(v5 + 168 * v17 + 32), v23, 0xA3uLL);
    if (!v19)
      break;
    v6 += 2;
    --v19;
  }
  swift_release();
  return v5;
}

uint64_t sub_23C86D804(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _BYTE v19[168];
  _BYTE v20[168];
  _BYTE v21[163];
  _BYTE v22[168];
  _QWORD __src[21];
  uint64_t v24;
  _QWORD v25[2];
  char v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[168];
  _BYTE v31[32];
  uint64_t v32;
  __n128 __dst[10];
  _QWORD v34[21];
  _BYTE v35[168];
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v36 = MEMORY[0x24BEE4AF8];
  sub_23C7FD468();
  v5 = v36;
  v6 = (uint64_t *)(a1 + 40);
  v37 = v3 - 1;
  v7 = &qword_25430CF68;
  while (1)
  {
    v8 = *v6;
    v34[0] = *(v6 - 1);
    v34[1] = v8;
    v34[2] = a2;
    sub_23C813794((uint64_t)v34);
    sub_23C800B48(v34, v35);
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_23C874DBC((uint64_t)v31, (uint64_t)v27);
    v9 = v28;
    if (v28)
    {
      v10 = v29;
      sub_23C7E7E34(v27, v28);
      v11 = v7;
      v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v12(__src, v9, v10);
      v7 = v11;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v27);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      sub_23C7E7900((uint64_t)v27, v7);
      v25[1] = 0;
      v25[0] = 0;
      v26 = 4;
      sub_23C8027EC((uint64_t)v25);
      sub_23C800B48(v25, __src);
    }
    memcpy(__dst, __src, 0xA3uLL);
    sub_23C800B48(v34, __src);
    sub_23C800B48(__dst, &v24);
    sub_23C800B48(__dst, v25);
    if (sub_23C874270((uint64_t)v25) == 2)
    {
      v13 = sub_23C8746E0((uint64_t)v25);
      v15 = *(_QWORD *)v13;
      v14 = *(_QWORD *)(v13 + 8);
      v16 = *(unsigned __int8 *)(v13 + 16);
      if (v16 == 4 && !(v14 | v15))
      {
        sub_23C8738C4(__dst);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23C8738C4(__dst);
        sub_23C7E5640(0, 0, 4);
        sub_23C7E5640(0, 0, 4);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_23C838EE8((uint64_t)__src);
        memcpy(v20, v35, 0xA3uLL);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)&v21[8] = 0;
        v21[16] = 4;
        sub_23C8027EC((uint64_t)v21);
        sub_23C800B48(v21, v22);
        memcpy(v19, v22, 0xA3uLL);
        sub_23C86F20C(2, v20, v19, v30);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      sub_23C8738C4(__dst);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23C8738C4(__dst);
      sub_23C7E5640(0, 0, 4);
      sub_23C7E5640(v15, v14, v16);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23C8738C4(__dst);
    }
    sub_23C838EE8((uint64_t)__src);
    memcpy(v22, v35, 0xA3uLL);
    memcpy(v21, __dst, sizeof(v21));
    sub_23C86F20C(0, v22, v21, v30);
LABEL_13:
    sub_23C8738C4(__dst);
    swift_release();
    swift_bridgeObjectRelease();
    memcpy(v21, v30, sizeof(v21));
    sub_23C873110((void *)2, v22);
    sub_23C8738C4((__n128 *)v21);
    sub_23C7E7900((uint64_t)v31, v7);
    swift_release();
    swift_bridgeObjectRelease_n();
    v36 = v5;
    v17 = *(_QWORD *)(v5 + 16);
    if (v17 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7FD468();
      v5 = v36;
    }
    *(_QWORD *)(v5 + 16) = v17 + 1;
    memcpy((void *)(v5 + 168 * v17 + 32), v22, 0xA3uLL);
    if (!v37)
      break;
    v6 += 2;
    --v37;
  }
  swift_release();
  return v5;
}

uint64_t sub_23C86DC78@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C86DD10(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

void sub_23C86DC84(void *a1@<X8>)
{
  __n128 *v1;
  _BYTE __dst[168];
  _BYTE __src[168];
  _QWORD v5[23];
  _BYTE v6[192];

  memcpy(__dst, v1, 0xA2uLL);
  sub_23C8743FC((uint64_t)__dst);
  sub_23C800B48(__dst, __src);
  memcpy(v5, __src, 0xA3uLL);
  sub_23C801200(v5);
  sub_23C801054(v5, v6);
  memcpy(a1, v6, 0xB8uLL);
  sub_23C874D7C(v1);
}

uint64_t sub_23C86DD10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  _QWORD v9[2];
  char v10;
  _BYTE __src[168];
  _QWORD __dst[23];
  _BYTE v13[184];

  v9[0] = a1;
  v9[1] = a2;
  v10 = a3;
  sub_23C8027EC((uint64_t)v9);
  sub_23C800B48(v9, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C801200(__dst);
  sub_23C801054(__dst, v13);
  memcpy(a4, v13, 0xB8uLL);
  return sub_23C7E56A4(a1, a2, a3);
}

void sub_23C86DDB0(void *a1@<X8>)
{
  __n128 *v1;
  _QWORD v3[23];
  _BYTE __src[192];

  sub_23C7E3190(v3, v1);
  sub_23C801200(v3);
  sub_23C801054(v3, __src);
  memcpy(a1, __src, 0xB8uLL);
  sub_23C8738C4(v1);
}

void *sub_23C86DE14@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;
  _BYTE __src[168];
  _QWORD __dst[23];

  __dst[0] = a1;
  LOBYTE(__dst[1]) = a2;
  sub_23C846D18();
  v7[0] = v4;
  v7[1] = v5;
  v8 = 2;
  sub_23C8027EC((uint64_t)v7);
  sub_23C800B48(v7, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C801200(__dst);
  return sub_23C801054(__dst, a3);
}

uint64_t sub_23C86DE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v5[21];
  _BYTE __src[168];
  _QWORD __dst[23];

  v5[0] = a1;
  v5[1] = a2;
  sub_23C800B0C((uint64_t)v5);
  sub_23C800B48(v5, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C801200(__dst);
  sub_23C801054(__dst, a3);
  return swift_bridgeObjectRetain();
}

void *SQLSpecificExpressible.sqlSelection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  _QWORD v6[23];

  sub_23C7DFE24(a1, a2, a3);
  sub_23C801200(v6);
  return sub_23C801054(v6, a4);
}

uint64_t sub_23C86DF44@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C86DFDC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

void sub_23C86DF50(void *a1@<X8>)
{
  __n128 *v1;
  _BYTE __dst[168];
  _BYTE __src[168];
  _BYTE v5[168];
  _BYTE v6[176];

  memcpy(__dst, v1, 0xA2uLL);
  sub_23C8743FC((uint64_t)__dst);
  sub_23C800B48(__dst, __src);
  memcpy(v5, __src, 0xA3uLL);
  sub_23C863DB0((uint64_t)v5);
  sub_23C8634F8(v5, v6);
  memcpy(a1, v6, 0xA3uLL);
  sub_23C874D7C(v1);
}

uint64_t sub_23C86DFDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  _QWORD v9[2];
  char v10;
  _BYTE __src[168];
  _BYTE __dst[168];
  _BYTE v13[168];

  v9[0] = a1;
  v9[1] = a2;
  v10 = a3;
  sub_23C8027EC((uint64_t)v9);
  sub_23C800B48(v9, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C863DB0((uint64_t)__dst);
  sub_23C8634F8(__dst, v13);
  memcpy(a4, v13, 0xA3uLL);
  return sub_23C7E56A4(a1, a2, a3);
}

void sub_23C86E07C(void *a1@<X8>)
{
  __n128 *v1;
  _BYTE __dst[168];
  _BYTE __src[176];

  memcpy(__dst, v1, 0xA3uLL);
  sub_23C863DB0((uint64_t)__dst);
  sub_23C8634F8(__dst, __src);
  memcpy(a1, __src, 0xA3uLL);
  sub_23C8738C4(v1);
}

void *sub_23C86E0E4@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;
  _BYTE __src[168];
  _QWORD __dst[21];

  __dst[0] = a1;
  LOBYTE(__dst[1]) = a2;
  sub_23C846D18();
  v7[0] = v4;
  v7[1] = v5;
  v8 = 2;
  sub_23C8027EC((uint64_t)v7);
  sub_23C800B48(v7, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C863DB0((uint64_t)__dst);
  return sub_23C8634F8(__dst, a3);
}

uint64_t sub_23C86E164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v5[21];
  _BYTE __src[168];
  _BYTE __dst[168];

  v5[0] = a1;
  v5[1] = a2;
  sub_23C800B0C((uint64_t)v5);
  sub_23C800B48(v5, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C863DB0((uint64_t)__dst);
  sub_23C8634F8(__dst, a3);
  return swift_bridgeObjectRetain();
}

void SQLSpecificExpressible.sqlOrdering.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C873A14(a1, a2, (void (*)(_BYTE *))sub_23C863DB0, a3);
}

uint64_t sub_23C86E250()
{
  const void *v0;
  char v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[168];
  _BYTE v124[168];
  _BYTE v125[168];
  _BYTE v126[168];
  _BYTE v127[168];

  sub_23C800B48(v0, v126);
  v1 = 1;
  switch(sub_23C87552C(v126))
  {
    case 3u:
      v3 = sub_23C8754A0();
      goto LABEL_6;
    case 6u:
    case 0xFu:
    case 0x10u:
    case 0x12u:
      v2 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v127) + 16);
      goto LABEL_15;
    case 7u:
      v4 = *(_QWORD *)sub_23C8746E0((uint64_t)v127);
      sub_23C7E3190(v124, (const void *)(v4 + 32));
      v5 = (const void *)(v4 + 200);
      goto LABEL_17;
    case 9u:
      v3 = sub_23C8746E0((uint64_t)v127) + 40;
LABEL_6:
      v6 = *(_QWORD *)v3;
      v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (!v7)
        goto LABEL_35;
      sub_23C7DF858();
      sub_23C7E3190(v125, (const void *)(v6 + 32));
      sub_23C7E3190(v124, v125);
      if ((sub_23C87570C() & 1) != 0)
        goto LABEL_11;
      v8 = 200;
      while (--v7)
      {
        v9 = v8 + 168;
        sub_23C7E3190(v125, (const void *)(v6 + v8));
        sub_23C7E3190(v124, v125);
        v10 = sub_23C87570C();
        v8 = v9;
        if ((v10 & 1) != 0)
        {
LABEL_11:
          sub_23C7DB624();
          goto LABEL_19;
        }
      }
      sub_23C7DB624();
      goto LABEL_35;
    case 0xBu:
      v11 = *(_QWORD *)sub_23C8746E0((uint64_t)v127);
      sub_23C7E3190(v125, (const void *)(v11 + 16));
      sub_23C7E0718(v123, (const void *)(v11 + 184));
      sub_23C7E3190(v124, v125);
      sub_23C7E6D04();
      sub_23C7E1198(v12, (uint64_t)sub_23C832948, v13, v14, v15, v16, v17, v18, v77, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119,
        v120,
        v121,
        v122,
        v19);
      v20 = sub_23C87570C();
      if ((v20 & 1) != 0)
      {
        sub_23C7E1198(v20, (uint64_t)sub_23C8131FC, v21, v22, v23, v24, v25, v26, v78, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112,
          v113,
          v114,
          v115,
          v116,
          v117,
          v118,
          v119,
          v120,
          v121,
          v122,
          v27);
LABEL_18:
        sub_23C7E6D04();
LABEL_19:
        v1 = 1;
      }
      else
      {
        sub_23C813130(v123, &v102);
        if (sub_23C8329E4((uint64_t)&v102))
        {
          sub_23C8329F0((uint64_t)&v102);
          sub_23C7E6D04();
        }
        else
        {
          v37 = sub_23C8329F0((uint64_t)&v102);
          v45 = *(_QWORD *)v37;
          v46 = *(_QWORD *)(*(_QWORD *)v37 + 16);
          if (v46)
          {
            sub_23C7E1198(v37, (uint64_t)sub_23C832948, v38, v39, v40, v41, v42, v43, v78, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
              v91,
              v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              v98,
              v99,
              v100,
              v101,
              v102,
              v103,
              v104,
              v105,
              v106,
              v107,
              v108,
              v109,
              v110,
              v111,
              v112,
              v113,
              v114,
              v115,
              v116,
              v117,
              v118,
              v119,
              v120,
              v121,
              v122,
              v44);
            sub_23C7E3190(v124, (const void *)(v45 + 32));
            sub_23C7E3190(&v81, v124);
            if ((sub_23C8756F4() & 1) != 0)
            {
LABEL_31:
              sub_23C7E6D04();
              sub_23C7EFA14(v50, v51, v52, v53, v54, v55, v56, v57, v79, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
                v91,
                v92,
                v93,
                v94,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v106,
                v107,
                v108,
                v109,
                v110,
                v111,
                v112,
                v113,
                v114,
                v115,
                v116,
                v117,
                v118,
                v119,
                v120,
                v121,
                v122,
                v58);
              sub_23C7EFA14(v59, v60, v61, v62, v63, v64, v65, v66, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
                v91,
                v92,
                v93,
                v94,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v106,
                v107,
                v108,
                v109,
                v110,
                v111,
                v112,
                v113,
                v114,
                v115,
                v116,
                v117,
                v118,
                v119,
                v120,
                v121,
                v122,
                v67);
              goto LABEL_19;
            }
            v47 = (char *)(v45 + 200);
            while (--v46)
            {
              v48 = v47 + 168;
              sub_23C7E3190(v124, v47);
              sub_23C7E3190(&v81, v124);
              v49 = sub_23C8756F4();
              v47 = v48;
              if ((v49 & 1) != 0)
                goto LABEL_31;
            }
          }
          else
          {
            sub_23C7E1198(v37, (uint64_t)sub_23C832948, v38, v39, v40, v41, v42, v43, v78, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
              v91,
              v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              v98,
              v99,
              v100,
              v101,
              v102,
              v103,
              v104,
              v105,
              v106,
              v107,
              v108,
              v109,
              v110,
              v111,
              v112,
              v113,
              v114,
              v115,
              v116,
              v117,
              v118,
              v119,
              v120,
              v121,
              v122,
              v44);
          }
          sub_23C7E6D04();
          sub_23C7E1198(v68, (uint64_t)sub_23C8131FC, v69, v70, v71, v72, v73, v74, v79, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
            v91,
            v92,
            v93,
            v94,
            v95,
            v96,
            v97,
            v98,
            v99,
            v100,
            v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112,
            v113,
            v114,
            v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v75);
        }
        sub_23C7E1198(v29, (uint64_t)sub_23C8131FC, v30, v31, v32, v33, v34, v35, v78, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112,
          v113,
          v114,
          v115,
          v116,
          v117,
          v118,
          v119,
          v120,
          v121,
          v122,
          v36);
LABEL_35:
        v1 = 0;
      }
      return v1 & 1;
    case 0xCu:
      v2 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v127) + 40);
LABEL_15:
      sub_23C7E3190(v125, v2);
      sub_23C7E3190(v124, v125);
      v1 = sub_23C87570C();
      return v1 & 1;
    case 0xDu:
      v28 = *(_QWORD *)sub_23C8746E0((uint64_t)v127);
      sub_23C7E3190(v124, (const void *)(v28 + 24));
      v5 = (const void *)(v28 + 192);
LABEL_17:
      sub_23C7E3190(v125, v5);
      sub_23C7E3190(&v81, v124);
      sub_23C7E6D04();
      if ((sub_23C8756F4() & 1) != 0)
        goto LABEL_18;
      sub_23C7E3190(&v81, v125);
      v1 = sub_23C8756F4();
      sub_23C7E6D04();
      return v1 & 1;
    case 0x11u:
      if ((*(_BYTE *)(sub_23C8754A0() + 16) & 1) != 0)
        return v1 & 1;
      goto LABEL_35;
    case 0x15u:
      return v1 & 1;
    default:
      goto LABEL_35;
  }
}

void sub_23C86E598()
{
  const void *v0;
  char *v1;
  _BYTE v2[336];

  sub_23C7E3190(v2, v0);
  v1 = (char *)&loc_23C86E5DC + dword_23C86F08C[sub_23C7EBC58(v2)];
  __asm { BR              X10 }
}

void sub_23C86E5EC()
{
  void *v0;
  __n128 v1[21];

  sub_23C87540C();
  sub_23C7E3190(v0, v1);
  sub_23C8738C4(v1);
  sub_23C7DEEA8();
}

void sub_23C86F0E8(void *a1@<X8>)
{
  __n128 *v1;
  _BYTE v3[168];
  _BYTE v4[176];

  sub_23C7E0718(v3, v1);
  sub_23C8743FC((uint64_t)v3);
  sub_23C800B48(v3, v4);
  sub_23C7E3190(a1, v4);
  sub_23C874D7C(v1);
}

void *sub_23C86F148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return SQLSpecificExpressible.sqlSelection.getter(a1, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, a2, a3);
}

void sub_23C86F154(uint64_t a1@<X0>, void *a2@<X8>)
{
  SQLSpecificExpressible.sqlOrdering.getter(a1, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, a2);
}

uint64_t SQLSpecificExpressible.forKey(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  _QWORD v9[23];

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(a4 + 8) + 8))(v9, a3);
  v9[21] = a1;
  v9[22] = a2;
  sub_23C8011BC(v9);
  sub_23C801054(v9, a5);
  return sub_23C7DF858();
}

void *sub_23C86F1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return SQLSpecificExpressible.sqlSelection.getter(a1, (uint64_t)&protocol witness table for AdaptedFetchRequest<A>, a2, a3);
}

void sub_23C86F1D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  SQLSpecificExpressible.sqlOrdering.getter(a1, (uint64_t)&protocol witness table for AdaptedFetchRequest<A>, a2);
}

void *sub_23C86F1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return SQLSpecificExpressible.sqlSelection.getter(a1, (uint64_t)&protocol witness table for AnyFetchRequest<A>, a2, a3);
}

void sub_23C86F1E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  SQLSpecificExpressible.sqlOrdering.getter(a1, (uint64_t)&protocol witness table for AnyFetchRequest<A>, a2);
}

void *sub_23C86F1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return SQLSpecificExpressible.sqlSelection.getter(a1, (uint64_t)&off_250D83AD0, a2, a3);
}

void sub_23C86F200(uint64_t a1@<X0>, void *a2@<X8>)
{
  SQLSpecificExpressible.sqlOrdering.getter(a1, (uint64_t)&off_250D83AD0, a2);
}

void sub_23C86F20C(uint64_t a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87[10];
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[21];
  _QWORD v91[21];
  __n128 v92[10];
  __n128 v93[10];
  _BYTE v94[168];

  sub_23C7E3190(v92, a2);
  sub_23C7E3190(v93, a3);
  sub_23C800B48(v92, v94);
  if (sub_23C874270((uint64_t)v94) == 16)
  {
    v7 = sub_23C8746E0((uint64_t)v94);
    sub_23C875450(v7, v8, v9, v10, v11, v12, v13, v14, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87[0].n128_i8[0]);
    v16 = v88;
    v15 = v89;
    sub_23C7E3190(v90, a3);
    v17 = sub_23C7E3190(&v66, v93);
    sub_23C7EFAE8((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87[0].n128_i8[0]);
    sub_23C86F20C(v91, a1, v90, &v66);
    sub_23C7E3190(v90, v91);
    v66 = v16;
    v67 = v15;
    sub_23C875370(v90, (uint64_t)&v66);
    sub_23C7E6310(v87);
    v25 = (__n128 *)v91;
  }
  else
  {
    sub_23C800B48(v93, v91);
    if (sub_23C874270((uint64_t)v91) != 16)
    {
      v44 = (_BYTE *)sub_23C7DB388();
      v44[16] = a1;
      sub_23C7E3190(v44 + 24, v92);
      sub_23C7E3190(v44 + 192, v93);
      v90[0] = v44;
      sub_23C874790((uint64_t)v90);
      sub_23C800B48(v90, v87);
      sub_23C7E3190(a4, v87);
      sub_23C7E6310(v92);
      sub_23C7E6310(v93);
      goto LABEL_7;
    }
    v26 = sub_23C8746E0((uint64_t)v91);
    sub_23C875450(v26, v27, v28, v29, v30, v31, v32, v33, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87[0].n128_i8[0]);
    v35 = v88;
    v34 = v89;
    sub_23C7E3190(&v66, v92);
    v36 = sub_23C7E3190(&v45, a3);
    sub_23C7EFAE8((uint64_t)v36, v37, v38, v39, v40, v41, v42, v43, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87[0].n128_i8[0]);
    sub_23C86F20C(v90, a1, &v66, &v45);
    sub_23C7E3190(&v66, v90);
    v45 = v35;
    v46 = v34;
    sub_23C875370(&v66, (uint64_t)&v45);
    sub_23C7E6310(v87);
    v25 = (__n128 *)v90;
  }
  sub_23C7E6310(v25);
  sub_23C7DB62C();
LABEL_7:
  sub_23C7DF5B4();
}

void *sub_23C86F3E8@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C86DE14(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

void *sub_23C86F3F4@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_23C86E0E4(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t Sequence<>.joined(operator:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[11];
  uint64_t v22[2];
  __int128 v23;
  char v24;
  char v25;
  char v26;

  sub_23C8757C4();
  v22[0] = v8;
  v22[1] = v9;
  v23 = *(_OWORD *)(v10 + 16);
  v24 = v11;
  v25 = v12;
  v26 = v13;
  v21[6] = v14;
  v21[7] = v15;
  v21[8] = v16;
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = a3;
  v21[5] = swift_getKeyPath();
  sub_23C891CA0((uint64_t)sub_23C87389C, (uint64_t)v21, a1, (uint64_t)&type metadata for SQLExpression, MEMORY[0x24BEE4078], a2, MEMORY[0x24BEE40A8], v17);
  v19 = v18;
  swift_release();
  sub_23C87019C(v22, v19, a4);
  return sub_23C7DB624();
}

void static SQLExpression.AssociativeBinaryOperator.add.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 43;
  *(_QWORD *)(a1 + 8) = 0xE100000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
}

void static SQLExpression.AssociativeBinaryOperator.multiply.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 42;
  *(_QWORD *)(a1 + 8) = 0xE100000000000000;
  *(_QWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
}

double static SQLExpression.AssociativeBinaryOperator.and.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 4476481;
  *(_QWORD *)(a1 + 8) = 0xE300000000000000;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_23C914530;
  *(_WORD *)(a1 + 32) = 256;
  *(_BYTE *)(a1 + 34) = 0;
  return result;
}

void static SQLExpression.AssociativeBinaryOperator.or.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 21071;
  *(_QWORD *)(a1 + 8) = 0xE200000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 33) = 1;
}

double static SQLExpression.AssociativeBinaryOperator.concat.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 31868;
  *(_QWORD *)(a1 + 8) = 0xE200000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_23C9162B0;
  *(_WORD *)(a1 + 32) = 258;
  *(_BYTE *)(a1 + 34) = 1;
  return result;
}

uint64_t SQLExpression.AssociativeBinaryOperator.hash(into:)()
{
  sub_23C7DBCC8();
  sub_23C910F14();
  sub_23C7DB62C();
  DatabaseValue.hash(into:)();
  sub_23C911BD4();
  return sub_23C911BD4();
}

uint64_t static SQLExpression.AssociativeBinaryOperator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  char v3;
  unsigned __int8 v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t result;
  char v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  char v16;

  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 33);
  v5 = *(unsigned __int8 *)(a1 + 34);
  v6 = *(_BYTE *)(a2 + 33);
  v7 = *(unsigned __int8 *)(a2 + 34);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v8 || (v14 = *(_OWORD *)(a1 + 16), v9 = sub_23C911A18(), v2 = v14, v10 = v9, result = 0, (v10 & 1) != 0))
  {
    v15 = v2;
    v16 = v3;
    static DatabaseValue.== infix(_:_:)((uint64_t)&v15);
    if (((v4 ^ v6) & 1) != 0)
      v13 = 0;
    else
      v13 = v5 ^ v7 ^ 1;
    if ((v12 & 1) != 0)
      return v13;
    else
      return 0;
  }
  return result;
}

uint64_t SQLExpression.AssociativeBinaryOperator.hashValue.getter()
{
  sub_23C8757BC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  sub_23C7E072C();
  DatabaseValue.hash(into:)();
  sub_23C911BD4();
  sub_23C911BD4();
  return sub_23C911BF8();
}

uint64_t sub_23C86F788()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  DatabaseValue.hash(into:)();
  sub_23C911BD4();
  sub_23C911BD4();
  return sub_23C911BF8();
}

uint64_t sub_23C86F834()
{
  swift_bridgeObjectRetain();
  sub_23C7E076C();
  sub_23C910F14();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C86F878()
{
  sub_23C8757BC();
  sub_23C7DF858();
  sub_23C910F14();
  sub_23C7DB624();
  return sub_23C911BF8();
}

uint64_t sub_23C86F8C8()
{
  return sub_23C86F878();
}

uint64_t sub_23C86F8D0()
{
  return sub_23C86F834();
}

uint64_t sub_23C86F8D8()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  return sub_23C911BF8();
}

uint64_t sub_23C86F92C(uint64_t *a1, uint64_t *a2)
{
  return sub_23C839458(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_23C86F940()
{
  unint64_t v0;

  v0 = sub_23C911814();
  sub_23C7DB624();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_23C86F984(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C86F9AC + 4 * byte_23C9162D3[a1]))(61, 0xE100000000000000);
}

uint64_t sub_23C86F9AC()
{
  return 15932;
}

uint64_t sub_23C86F9B8()
{
  return 21321;
}

uint64_t sub_23C86F9C4()
{
  return 0x544F4E205349;
}

void sub_23C86F9D8(char *a1)
{
  sub_23C839694(*a1);
}

void sub_23C86F9E4()
{
  sub_23C8E7DF4();
}

void sub_23C86F9EC(uint64_t a1)
{
  char *v1;

  sub_23C8E8228(a1, *v1);
}

void sub_23C86F9F4()
{
  sub_23C8E8450();
}

uint64_t sub_23C86F9FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C86F940();
  *a1 = result;
  return result;
}

uint64_t sub_23C86FA28@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23C86F984(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23C86FA50()
{
  swift_bridgeObjectRetain();
  sub_23C8757A4();
  sub_23C7DE934();
  return sub_23C911BD4();
}

uint64_t sub_23C86FAA0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v8;
  char v9;
  char v10;

  v8 = a1 == a4 && a2 == a5;
  if (v8 || (v9 = sub_23C7E16E8(), v10 = 0, (v9 & 1) != 0))
    v10 = a3 ^ a6 ^ 1;
  return v10 & 1;
}

uint64_t sub_23C86FAEC()
{
  sub_23C8757BC();
  sub_23C7DB3D4();
  sub_23C8757A4();
  sub_23C7DE934();
  sub_23C911BD4();
  return sub_23C911BF8();
}

uint64_t sub_23C86FB4C()
{
  return sub_23C86FAEC();
}

uint64_t sub_23C86FB58()
{
  return sub_23C86FA50();
}

uint64_t sub_23C86FB64()
{
  sub_23C911BBC();
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  sub_23C911BD4();
  return sub_23C911BF8();
}

uint64_t sub_23C86FBD0(uint64_t a1, uint64_t a2)
{
  return sub_23C86FAA0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_23C86FBEC()
{
  uint64_t result;

  result = sqlite3_libversion_number();
  byte_256BD4C70 = (int)result > 3014999;
  return result;
}

void sub_23C86FC18(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v13[168];
  _QWORD v14[21];
  _BYTE v15[168];
  _BYTE __dst[184];
  __n128 v17[10];
  __n128 v18[10];
  __n128 v19[10];
  __n128 v20[10];
  _BYTE v21[168];

  sub_23C7E3190(v18, a1);
  sub_23C7E3190(v19, a2);
  sub_23C7E3190(v20, a3);
  sub_23C800B48(v18, v21);
  if (sub_23C874270((uint64_t)v21) == 16)
  {
    v9 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v21) + 16);
    memcpy(__dst, v9, sizeof(__dst));
    v10 = *(_QWORD *)&__dst[168];
    v11 = *(_QWORD *)&__dst[176];
    sub_23C7E3190(v15, v9);
    sub_23C7E3190(v14, v19);
    sub_23C7E3190(v13, v20);
    sub_23C80A738((uint64_t)__dst);
    sub_23C86FC18(v17, v15, v14, v13, a4 & 1);
    sub_23C7E3190(v15, v17);
    v14[0] = v10;
    v14[1] = v11;
    sub_23C875370(v15, (uint64_t)v14);
    sub_23C7E6310((__n128 *)__dst);
    sub_23C7E6310(v17);
    sub_23C7E072C();
  }
  else
  {
    v12 = (_BYTE *)sub_23C7DB388();
    sub_23C7E3190(v12 + 16, v18);
    sub_23C7E3190(v12 + 184, v19);
    sub_23C7E3190(v12 + 352, v20);
    v12[515] = a4 & 1;
    v17[0].n128_u64[0] = (unint64_t)v12;
    sub_23C8744E4((uint64_t)v17);
    sub_23C800B48(v17, __dst);
    sub_23C7E3190(a5, __dst);
    sub_23C7E6310(v18);
    sub_23C7E6310(v19);
    sub_23C7E6310(v20);
  }
  sub_23C7DF5B4();
}

void sub_23C86FDC0(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD v20[2];
  __n128 v21[10];
  _QWORD v22[21];
  uint64_t v23[4];
  char v24;
  char v25;
  char v26;
  __n128 v27[10];
  _BYTE v28[168];

  sub_23C7E3190(v27, a1);
  v6 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_23C800B48(v27, v28);
  v7 = sub_23C874270((uint64_t)v28);
  if (v7 == 9)
  {
    v11 = sub_23C8746E0((uint64_t)v28);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    v15 = *(_BYTE *)(v11 + 33);
    v16 = *(_BYTE *)(v11 + 34);
    v17 = *(_QWORD *)(v11 + 40);
    v18 = *(_BYTE *)(v11 + 32);
    v23[0] = *(_QWORD *)v11;
    v23[1] = v12;
    v23[2] = v13;
    v23[3] = v14;
    v24 = v18;
    v25 = v15;
    v26 = v16;
    sub_23C7DB3D4();
    sub_23C7DBCC8();
    sub_23C7E56A4(v13, v14, v18);
    sub_23C86D000(v17, (uint64_t)v6, v5);
    sub_23C8757F8(v23);
    sub_23C7DB62C();
    sub_23C7DE934();
    sub_23C7E5640(v13, v14, v18);
  }
  else if (v7 == 11)
  {
    v8 = *(_BYTE **)sub_23C8746E0((uint64_t)v28);
    sub_23C7E3190(v23, v8 + 16);
    sub_23C7E0718(v21, v8 + 184);
    LOBYTE(v8) = v8[346];
    v20[0] = v6;
    v20[1] = v5;
    sub_23C874D7C(v21);
    sub_23C86FDC0(v22, v23, v20);
    v9 = sub_23C7DB388();
    v10 = (void *)sub_23C875744(v9);
    sub_23C7E3190(v10, v22);
    sub_23C7E0718(v6, v21);
    *(_BYTE *)(v5 + 346) = (_BYTE)v8;
    v23[0] = v5;
    sub_23C813280((uint64_t)v23);
    sub_23C7E322C(v23);
  }
  else
  {
    v19 = (_QWORD *)sub_23C7DB388();
    sub_23C7E3190(v19 + 2, v27);
    v19[23] = v6;
    v19[24] = v5;
    v22[0] = v19;
    sub_23C874D38((uint64_t)v22);
    sub_23C800B48(v22, v23);
    sub_23C7E3190(a3, v23);
    sub_23C7DB3D4();
    sub_23C8738C4(v27);
  }
}

void sub_23C86FFB4(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, void *a5@<X8>)
{
  const void *v5;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90[10];
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[21];
  _BYTE v94[168];
  __n128 v95[10];
  __n128 v96[10];
  _BYTE v97[168];

  sub_23C7E3190(v95, a3);
  sub_23C7E3190(v96, a4);
  if (sub_23C7EBC58(v95) == 16)
  {
    v10 = sub_23C8746E0((uint64_t)v97);
    sub_23C875438(v10, v11, v12, v13, v14, v15, v16, v17, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90[0].n128_i8[0]);
    v19 = v91;
    v18 = v92;
    sub_23C7E3190(v93, v5);
    v20 = sub_23C7E3190(&v69, v96);
    sub_23C7EFAE8((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90[0].n128_i8[0]);
    sub_23C7DA9B4();
    sub_23C7E3190(v93, v94);
    v69 = v19;
    v70 = v18;
    sub_23C875370(v93, (uint64_t)&v69);
    sub_23C7E6310(v90);
    v28 = (__n128 *)v94;
LABEL_5:
    sub_23C7E6310(v28);
    sub_23C7DB62C();
    return;
  }
  sub_23C800B48(v96, v94);
  if (sub_23C874270((uint64_t)v94) == 16)
  {
    v29 = sub_23C8746E0((uint64_t)v94);
    sub_23C875438(v29, v30, v31, v32, v33, v34, v35, v36, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90[0].n128_i8[0]);
    v38 = v91;
    v37 = v92;
    sub_23C7E3190(&v69, v95);
    v39 = sub_23C7E3190(&v48, v5);
    sub_23C7EFAE8((uint64_t)v39, v40, v41, v42, v43, v44, v45, v46, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90[0].n128_i8[0]);
    sub_23C7DA9B4();
    sub_23C7E3190(&v69, v93);
    v48 = v38;
    v49 = v37;
    sub_23C875370(&v69, (uint64_t)&v48);
    sub_23C7E6310(v90);
    v28 = (__n128 *)v93;
    goto LABEL_5;
  }
  v47 = (_QWORD *)sub_23C7DB388();
  v47[2] = a1;
  v47[3] = a2;
  sub_23C7E3190(v47 + 4, v95);
  sub_23C7E3190(v47 + 25, v96);
  v93[0] = v47;
  sub_23C874E94((uint64_t)v93);
  sub_23C800B48(v93, v90);
  sub_23C7E3190(a5, v90);
  sub_23C7DB3D4();
  sub_23C7E6310(v95);
  sub_23C7E6310(v96);
}

void *sub_23C87019C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD __s1[4];
  char v32;
  char v33;
  char v34;
  _QWORD *v35;
  __n128 v36;
  char v37;
  __n128 v38[10];
  uint64_t v39;

  v3 = a2;
  v4 = a3;
  v39 = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v29 = *a1;
  v30 = a1[1];
  v27 = *((unsigned __int8 *)a1 + 32);
  v28 = a1[3];
  v6 = *((unsigned __int8 *)a1 + 33);
  v25 = *((_BYTE *)a1 + 34);
  if (v6 == 1)
  {
    v7 = a2[2];
    if (v7)
    {
      swift_bridgeObjectRetain_n();
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v9 = v7 - 1;
      v10 = 4;
      v26 = v3;
      while (1)
      {
        sub_23C7E3190(&v36, &v3[v10]);
        sub_23C875900();
        if (sub_23C874270((uint64_t)v38) == 9)
        {
          v11 = (_QWORD *)sub_23C8746E0((uint64_t)v38);
          v12 = v29 == *v11 && v30 == v11[1];
          if (v12 || (sub_23C7E16E8() & 1) != 0)
            __asm { BR              X8 }
          sub_23C875354(&v36);
          sub_23C875354(&v36);
          swift_bridgeObjectRelease();
          sub_23C875600();
          sub_23C7DB3DC();
          v3 = v26;
        }
        else
        {
          sub_23C8738C4(&v36);
        }
        sub_23C7E79A8(&qword_25430CF70);
        v13 = sub_23C7DB388();
        *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
        sub_23C7E3190((void *)(v13 + 32), &v36);
        v14 = v8[2];
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          JUMPOUT(0x23C8711D0);
        }
        if (!swift_isUniquelyReferenced_nonNull_native() || v14 + 1 > v8[3] >> 1)
        {
          sub_23C7F1D20();
          v8 = v15;
        }
        if (!*(_QWORD *)(v13 + 16))
          goto LABEL_34;
        if ((uint64_t)((v8[3] >> 1) - v8[2]) < 1)
          goto LABEL_35;
        swift_arrayInitWithCopy();
        v16 = v8[2];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_36;
        v8[2] = v18;
        sub_23C7DB3DC();
        if (!v9)
          break;
        --v9;
        v10 += 21;
      }
      swift_bridgeObjectRelease_n();
      v4 = a3;
      LOBYTE(v6) = 1;
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = v3;
  }
  v19 = v8[2];
  if (v19)
  {
    sub_23C7E3190(v38, v8 + 4);
    if (v19 == 1)
    {
      sub_23C8738C4(v38);
      swift_bridgeObjectRelease();
      return sub_23C7E3190(v4, v38);
    }
    __s1[0] = v29;
    __s1[1] = v30;
    v21 = v27;
    __s1[2] = v5;
    __s1[3] = v28;
    v32 = v27;
    v33 = v6;
    v34 = v25;
    v35 = v8;
    sub_23C874ED8((uint64_t)__s1);
    sub_23C800B48(__s1, &v36);
    sub_23C7E3190(v4, &v36);
    sub_23C7DBCC8();
    v22 = v5;
    v23 = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
    v36.n128_u64[0] = v5;
    v36.n128_u64[1] = v28;
    v21 = v27;
    v37 = v27;
    sub_23C8027EC((uint64_t)&v36);
    sub_23C875900();
    sub_23C7E3190(v4, v38);
    v22 = v5;
    v23 = v28;
  }
  return (void *)sub_23C7E56A4(v22, v23, v21);
}

void sub_23C871278(const void *a1@<X0>, const void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[168];
  _BYTE v15[168];
  _BYTE v16[168];
  _QWORD v17[2];
  char v18;
  _BYTE v19[168];
  _BYTE v20[168];
  __n128 v21[10];
  __n128 v22[10];
  _BYTE v23[168];
  uint64_t v24;

  sub_23C7E3190(v21, a1);
  sub_23C7E3190(v22, a2);
  sub_23C800B48(v21, v23);
  sub_23C800B48(v22, &v24);
  if (sub_23C87552C(v22) != 2)
  {
    sub_23C7E09B8(v22);
    sub_23C7E09B8(v21);
    goto LABEL_7;
  }
  v5 = sub_23C8754A0();
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(unsigned __int8 *)(v5 + 16);
  sub_23C875774(v22);
  sub_23C875774(v22);
  sub_23C875774(v21);
  sub_23C7E5640(0, 0, 4);
  if (v8 != 4 || v7 | v6)
  {
    sub_23C7EBCC8();
LABEL_7:
    sub_23C800B48(v21, v19);
    if (sub_23C874270((uint64_t)v19) == 2)
    {
      v10 = sub_23C8746E0((uint64_t)v19);
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(unsigned __int8 *)(v10 + 16);
      sub_23C8738C4(v21);
      sub_23C7E5640(0, 0, 4);
      if (v13 == 4 && !(v12 | v11))
      {
        sub_23C7EE2C4();
        v9 = v22;
        goto LABEL_11;
      }
      sub_23C7EBCC8();
    }
    sub_23C838EE8((uint64_t)v23);
    sub_23C7E3190(v20, v21);
    sub_23C7E3190(v17, v22);
    sub_23C86F20C(0, v20, v17, a3);
    goto LABEL_14;
  }
  sub_23C7EE2C4();
  v9 = v21;
LABEL_11:
  sub_23C800B48(v9, v20);
  sub_23C875868();
  sub_23C838EE8((uint64_t)v23);
  sub_23C800B48(v20, v16);
  sub_23C7E3190(v15, v16);
  v17[1] = 0;
  v17[0] = 0;
  v18 = 4;
  sub_23C8027EC((uint64_t)v17);
  sub_23C800B48(v17, v19);
  sub_23C7E3190(v14, v19);
  sub_23C86F20C(2, v15, v14, a3);
  sub_23C875868();
LABEL_14:
  sub_23C7DF5B4();
}

void SQLSpecificExpressible.collating(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _BYTE v6[168];
  __n128 v7[11];

  v3 = *a1;
  v4 = a1[1];
  (*(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v7, a2);
  sub_23C7E3190(v6, v7);
  v5[0] = v3;
  v5[1] = v4;
  sub_23C875370(v6, (uint64_t)v5);
  sub_23C8738C4(v7);
}

void sub_23C8714F8()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t i;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  const void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  char v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  __n128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE v195[168];
  _BYTE v196[176];

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  sub_23C8756DC(v5, v195);
  v7 = sub_23C875580(v195);
  switch(v7)
  {
    case 9:
      v8 = sub_23C8746E0((uint64_t)v196);
      if ((v2 & 1) == 0 || !*(_BYTE *)(v8 + 34))
        goto LABEL_63;
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      v11 = *(unsigned __int8 *)(v8 + 32);
      v12 = *(_QWORD *)(v8 + 40);
      v13 = *(_QWORD *)(v12 + 16);
      v142 = *(_QWORD *)(v8 + 8);
      v147 = v9;
      if (v13)
      {
        v133 = v6;
        v137 = v4;
        sub_23C87576C();
        HIDWORD(v129) = v11;
        sub_23C7E56A4(v9, v10, v11);
        swift_bridgeObjectRetain();
        v14 = v13 - 1;
        v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
        for (i = 32; ; i += 168)
        {
          sub_23C7E3190(&v175, (const void *)(v12 + i));
          sub_23C7E3190(&v151, (const void *)(v12 + i));
          sub_23C8738C4(&v175);
          if ((sub_23C875870() & 1) != 0)
          {
            sub_23C8738C4(&v175);
            if (!v14)
              goto LABEL_48;
          }
          else
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v172 = v15;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_23C7E7E2C();
              v15 = v172;
            }
            v18 = v15[2];
            if (v18 >= v15[3] >> 1)
            {
              sub_23C7E7E2C();
              v15 = v172;
            }
            v15[2] = v18 + 1;
            sub_23C7E3190(&v15[21 * v18 + 4], &v175);
            if (!v14)
            {
LABEL_48:
              sub_23C7DC474();
              goto LABEL_52;
            }
          }
          --v14;
        }
      }
      sub_23C87576C();
      sub_23C7E56A4(v9, v10, v11);
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_52:
      if (v15[2] == 1)
      {
        v81 = sub_23C7E3190(&v175, v15 + 4);
        sub_23C7DFAC4((uint64_t)v81, (uint64_t)sub_23C7E7E58, v82, v83, v84, v85, v86, v87, v125, v129, v133, v137, v142, v147, (uint64_t)v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170,
          v171,
          (uint64_t)v172,
          v173,
          v174,
          v88);
        swift_release();
        v89 = sub_23C7E3190(&v151, &v175);
        v90 = sub_23C7E6EA0(v89);
        if (!v10)
          sub_23C87542C();
        sub_23C7DFAC4(v90, (uint64_t)sub_23C7E6F90, v91, v92, v93, v94, v95, v96, v127, v131, v135, v139, v144, v149, (uint64_t)v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170,
          v171,
          (uint64_t)v172,
          v173,
          v174,
          v97);
        v98 = sub_23C875818();
        sub_23C7EFA9C(v98, v99, v100, v101, v102, v103, v104, v105, v128, v132, v136, v140, v145, v150);
      }
      else
      {
        sub_23C875818();
        v106 = swift_release();
        sub_23C7EFA9C(v106, v107, v108, v109, v110, v111, v112, v113, v125, v129, v133, v137, v142, v147);
      }
      goto LABEL_63;
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 18:
      goto LABEL_63;
    case 12:
      v20 = v6;
      v21 = v4;
      sub_23C87569C();
      v23 = *(_QWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      v25 = *(_BYTE *)(v22 + 32);
      sub_23C7E3190(&v175, (const void *)(v22 + 40));
      if ((v2 & 1) == 0)
        goto LABEL_63;
      if (v23 != 45 || v24 != 0xE100000000000000)
      {
        if (v25 & 1 | ((sub_23C911A18() & 1) == 0))
          goto LABEL_63;
LABEL_50:
        v73 = sub_23C7E3190(&v151, &v175);
        sub_23C7DFAC4((uint64_t)v73, (uint64_t)sub_23C7E7E58, v74, v75, v76, v77, v78, v79, v125, v129, v133, v137, v141, v146, (uint64_t)v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170,
          v171,
          (uint64_t)v172,
          v173,
          v174,
          v80);
        v37 = v20;
        v38 = v21;
        v36 = 1;
        goto LABEL_27;
      }
      if ((v25 & 1) == 0)
        goto LABEL_50;
      goto LABEL_63;
    case 16:
      v27 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v196) + 16);
      goto LABEL_26;
    case 17:
      v47 = sub_23C8746E0((uint64_t)v196);
      if ((*(_BYTE *)(v47 + 16) & 1) != 0 || (*(_BYTE *)(v47 + 17) & 1) != 0 || (v2 & 1) == 0)
        goto LABEL_63;
      v48 = *(_QWORD **)(v47 + 24);
      v49 = sub_23C910E24();
      v51 = v50;
      sub_23C7E79A8(&qword_25430DA10);
      v52 = sub_23C7DB388();
      *(_OWORD *)(v52 + 16) = xmmword_23C9157F0;
      *(_QWORD *)(v52 + 32) = 5784904;
      *(_QWORD *)(v52 + 40) = 0xE300000000000000;
      *(_QWORD *)(v52 + 48) = 0x45544F5551;
      *(_QWORD *)(v52 + 56) = 0xE500000000000000;
      v53 = sub_23C8ADD34(v49, v51, (_QWORD *)v52);
      swift_setDeallocating();
      sub_23C8C92A4();
      if ((v53 & 1) != 0 && v48[2] == 1)
      {
        sub_23C7DC474();
        if (!v48[2])
        {
          __break(1u);
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      if (v49 == 0x4C4C554E4649 && v51 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v72 = sub_23C911A18();
        sub_23C7DC474();
        if ((v72 & 1) == 0)
          goto LABEL_63;
      }
      if (v48[2] == 2)
      {
        sub_23C7E3190(&v175, v48 + 25);
        if ((sub_23C871AF4() & 1) != 0)
        {
          if (!v48[2])
          {
            __break(1u);
            JUMPOUT(0x23C871AC8);
          }
LABEL_62:
          v27 = v48 + 4;
LABEL_26:
          sub_23C7E3190(&v175, v27);
          v28 = sub_23C7E3190(&v151, v27);
          sub_23C7DFAC4((uint64_t)v28, (uint64_t)sub_23C7E7E58, v29, v30, v31, v32, v33, v34, v125, v129, v133, v137, v141, v146, (uint64_t)v151, v152, v153, v154, v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            (uint64_t)v172,
            v173,
            v174,
            v35);
          v36 = v2 & 1;
          v37 = v6;
          v38 = v4;
LABEL_27:
          v39 = sub_23C8714F8(v37, v38, v36);
          if (!v0)
            sub_23C87542C();
          sub_23C7DFAC4(v39, (uint64_t)sub_23C7E6F90, v40, v41, v42, v43, v44, v45, v126, v130, v134, v138, v143, v148, (uint64_t)v151, v152, v153, v154, v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            (uint64_t)v172,
            v173,
            v174,
            v46);
        }
      }
LABEL_63:
      sub_23C7DEF28();
      return;
    case 19:
      sub_23C8756B4();
      type metadata accessor for TableAlias();
      sub_23C800B48(v195, &v175);
      sub_23C8746E0((uint64_t)&v175);
      swift_retain();
      v54 = static TableAlias.== infix(_:_:)();
      if (v54)
      {
        v62 = sub_23C880978();
        v63 = Database.primaryKey(_:)(&v151, v62);
        if (v0)
        {
          sub_23C7DA634((uint64_t)v63, (uint64_t)sub_23C7E6F90, v64, v65, v66, v67, v68, v69, v125, v129, v133, v137, v141, v146, (uint64_t)v151, v152, v153, v154, v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            (uint64_t)v172,
            v173,
            v174,
            v175.n128_i64[0],
            v175.n128_i64[1],
            v176,
            v177,
            v178,
            v179,
            v180,
            v181,
            v182,
            v183,
            v184,
            v185,
            v186,
            v187,
            v188,
            v189,
            v190,
            v191,
            v192,
            v193,
            v194,
            v70);
          sub_23C7DB62C();
        }
        else
        {
          sub_23C7DB62C();
          v114 = v153;
          v172 = v151;
          v173 = v152;
          LOBYTE(v174) = v153;
          sub_23C853B18();
          sub_23C87542C();
          sub_23C7DA634(v115, (uint64_t)sub_23C7E6F90, v116, v117, v118, v119, v120, v121, v125, v129, v133, v137, v141, v146, (uint64_t)v151, v152, v153, v154, v155,
            v156,
            v157,
            v158,
            v159,
            v160,
            v161,
            v162,
            v163,
            v164,
            v165,
            v166,
            v167,
            v168,
            v169,
            v170,
            v171,
            (uint64_t)v172,
            v173,
            v174,
            v175.n128_i64[0],
            v175.n128_i64[1],
            v176,
            v177,
            v178,
            v179,
            v180,
            v181,
            v182,
            v183,
            v184,
            v185,
            v186,
            v187,
            v188,
            v189,
            v190,
            v191,
            v192,
            v193,
            v194,
            v122);
          v123 = sub_23C82CFC8();
          sub_23C7F9150(v123, v124, v114);
        }
      }
      else
      {
        sub_23C7DA634(v54, (uint64_t)sub_23C7E6F90, v55, v56, v57, v58, v59, v60, v125, v129, v133, v137, v141, v146, (uint64_t)v151, v152, v153, v154, v155,
          v156,
          v157,
          v158,
          v159,
          v160,
          v161,
          v162,
          v163,
          v164,
          v165,
          v166,
          v167,
          v168,
          v169,
          v170,
          v171,
          (uint64_t)v172,
          v173,
          v174,
          v175.n128_i64[0],
          v175.n128_i64[1],
          v176,
          v177,
          v178,
          v179,
          v180,
          v181,
          v182,
          v183,
          v184,
          v185,
          v186,
          v187,
          v188,
          v189,
          v190,
          v191,
          v192,
          v193,
          v194,
          v61);
      }
      goto LABEL_63;
    default:
      if (v7 == 1)
      {
        sub_23C7E25BC();
        type metadata accessor for TableAlias();
        swift_bridgeObjectRetain();
        sub_23C7E62C0();
        sub_23C82CFC8();
        v19 = static TableAlias.== infix(_:_:)();
        sub_23C7DFB3C();
        if (!v19)
          sub_23C7DBCD0();
      }
      goto LABEL_63;
  }
}

uint64_t sub_23C871AF4()
{
  const void *v0;
  char v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  char v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105[10];
  __n128 v106[10];
  __n128 v107[10];
  _BYTE v108[168];
  _BYTE v109[168];

  sub_23C800B48(v0, v108);
  v1 = 0;
  switch(sub_23C87552C(v108))
  {
    case 2u:
      sub_23C8754A0();
      goto LABEL_66;
    case 3u:
      v3 = sub_23C8754A0();
      goto LABEL_10;
    case 6u:
      v4 = *(_QWORD *)sub_23C8746E0((uint64_t)v109);
      sub_23C7E3190(&v85, (const void *)(v4 + 16));
      sub_23C7E3190(v106, (const void *)(v4 + 184));
      sub_23C7E3190(v107, (const void *)(v4 + 352));
      sub_23C7E3190(&v64, &v85);
      sub_23C7E6310(&v85);
      sub_23C7E6310(v106);
      sub_23C7E6310(v107);
      if ((sub_23C87582C() & 1) == 0 || (sub_23C7E3190(&v64, v106), (sub_23C87582C() & 1) == 0))
      {
        sub_23C7E6310(&v85);
        sub_23C7E6310(v106);
LABEL_49:
        sub_23C8738C4(v107);
        goto LABEL_62;
      }
      sub_23C7E3190(&v64, v107);
      sub_23C7E6D04();
      v1 = sub_23C87582C();
      sub_23C7E09B8(v106);
      sub_23C7E09B8(v107);
      sub_23C7E09B8(&v85);
LABEL_29:
      sub_23C8738C4(v107);
      return v1 & 1;
    case 7u:
      v5 = *(_QWORD *)sub_23C8746E0((uint64_t)v109);
      sub_23C7E3190(v106, (const void *)(v5 + 32));
      v6 = (const void *)(v5 + 200);
      goto LABEL_27;
    case 9u:
      v3 = sub_23C8746E0((uint64_t)v109) + 40;
LABEL_10:
      v7 = *(_QWORD *)v3;
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (!v8)
        goto LABEL_66;
      sub_23C7DF858();
      sub_23C7E3190(v107, (const void *)(v7 + 32));
      sub_23C7E3190(v106, v107);
      if ((sub_23C875498() & 1) == 0)
        goto LABEL_58;
      v9 = 200;
      do
      {
        if (!--v8)
        {
LABEL_59:
          sub_23C7DB624();
          goto LABEL_66;
        }
        v10 = v9 + 168;
        sub_23C7E3190(v107, (const void *)(v7 + v9));
        sub_23C7E3190(v106, v107);
        v11 = sub_23C875498();
        v9 = v10;
      }
      while ((v11 & 1) != 0);
LABEL_58:
      sub_23C7DB624();
LABEL_62:
      v1 = 0;
      return v1 & 1;
    case 0xBu:
      v12 = *(_QWORD *)sub_23C8746E0((uint64_t)v109);
      sub_23C7E3190(v107, (const void *)(v12 + 16));
      sub_23C7E0718(v105, (const void *)(v12 + 184));
      sub_23C813130(v105, &v64);
      LODWORD(v12) = sub_23C8329E4((uint64_t)&v64);
      v13 = (_QWORD *)sub_23C8329F0((uint64_t)&v64);
      if ((_DWORD)v12)
        goto LABEL_62;
      v14 = (_QWORD *)*v13;
      sub_23C7E3190(v106, v107);
      sub_23C7E6D04();
      sub_23C7E1198(v15, (uint64_t)sub_23C832948, v16, v17, v18, v19, v20, v21, v61, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85.n128_i64[0],
        v85.n128_i64[1],
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v22);
      v23 = sub_23C875498();
      if ((v23 & 1) == 0)
      {
        sub_23C7E6D04();
        goto LABEL_61;
      }
      v31 = v14[2];
      if (!v31)
      {
        sub_23C7E6D04();
        goto LABEL_65;
      }
      sub_23C7E1198(v23, (uint64_t)sub_23C832948, v24, v25, v26, v27, v28, v29, v62, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85.n128_i64[0],
        v85.n128_i64[1],
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v30);
      sub_23C7E3190(v106, v14 + 4);
      sub_23C7E3190(&v85, v106);
      v32 = sub_23C875660();
      if ((v32 & 1) == 0)
      {
LABEL_23:
        sub_23C7EFA14(v32, (uint64_t)v33, v34, v35, v36, v37, v38, v39, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85.n128_i64[0],
          v85.n128_i64[1],
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v40);
        sub_23C7E6D04();
LABEL_61:
        sub_23C874D7C(v105);
        goto LABEL_62;
      }
      v33 = (char *)(v14 + 25);
      while (--v31)
      {
        v41 = v33 + 168;
        sub_23C7E3190(v106, v33);
        sub_23C7E3190(&v85, v106);
        v32 = sub_23C875660();
        v33 = v41;
        if ((v32 & 1) == 0)
          goto LABEL_23;
      }
      sub_23C7EFA14(v32, (uint64_t)v33, v34, v35, v36, v37, v38, v39, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85.n128_i64[0],
        v85.n128_i64[1],
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v40);
      sub_23C7E6D04();
LABEL_65:
      sub_23C874D7C(v105);
LABEL_66:
      v1 = 1;
      return v1 & 1;
    case 0xCu:
      v2 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v109) + 40);
      goto LABEL_25;
    case 0xDu:
      v42 = *(_QWORD *)sub_23C8746E0((uint64_t)v109);
      sub_23C7E3190(v106, (const void *)(v42 + 24));
      v6 = (const void *)(v42 + 192);
LABEL_27:
      sub_23C7E3190(v107, v6);
      sub_23C7E3190(&v85, v106);
      sub_23C7E6D04();
      if ((sub_23C875660() & 1) == 0)
        goto LABEL_49;
      sub_23C7E3190(&v85, v107);
      v1 = sub_23C875660();
      goto LABEL_29;
    case 0xFu:
    case 0x10u:
    case 0x12u:
      v2 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v109) + 16);
LABEL_25:
      sub_23C7E3190(v107, v2);
      sub_23C7E3190(v106, v107);
      v1 = sub_23C875498();
      return v1 & 1;
    case 0x11u:
      v43 = sub_23C8754A0();
      v1 = 0;
      if ((*(_BYTE *)(v43 + 16) & 1) != 0 || (*(_BYTE *)(v43 + 17) & 1) != 0)
        return v1 & 1;
      v44 = *(_QWORD *)(v43 + 24);
      v46 = sub_23C910E24();
      v47 = v45;
      v48 = v46 == 5783885 && v45 == 0xE300000000000000;
      if ((v48
         || ((sub_23C7E076C(), v49 = sub_23C7E16E8(), v46 == 5130573) ? (v50 = v47 == 0xE300000000000000) : (v50 = 0),
             !v50 ? (v51 = 0) : (v51 = 1),
             (v49 & 1) != 0 || (v51 & 1) != 0 || (sub_23C7E076C(), (sub_23C7E16E8() & 1) != 0)))
        && *(_QWORD *)(v44 + 16) >= 2uLL)
      {
        sub_23C7DE934();
      }
      else
      {
        if (qword_256BCBA50 != -1)
          swift_once();
        v52 = sub_23C7E076C();
        v55 = sub_23C8ADD34(v52, v53, v54);
        sub_23C7DE934();
        if ((v55 & 1) == 0)
          goto LABEL_62;
      }
      v56 = *(_QWORD *)(v44 + 16);
      if (!v56)
        goto LABEL_66;
      sub_23C7DF858();
      sub_23C7E3190(v107, (const void *)(v44 + 32));
      sub_23C7E3190(v106, v107);
      if ((sub_23C875498() & 1) != 0)
      {
        v57 = 200;
        do
        {
          if (!--v56)
            goto LABEL_59;
          v58 = v57 + 168;
          sub_23C7E3190(v107, (const void *)(v44 + v57));
          sub_23C7E3190(v106, v107);
          v59 = sub_23C875498();
          v57 = v58;
        }
        while ((v59 & 1) != 0);
      }
      goto LABEL_58;
    default:
      return v1 & 1;
  }
}

void sub_23C87207C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *j;
  __n128 *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  char v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132[10];
  __n128 v133[10];
  _BYTE v134[176];

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  sub_23C8756DC(v3, v133);
  v5 = sub_23C875580(v133);
  if (v5 == 16)
  {
    v12 = (const void *)(*(_QWORD *)sub_23C8746E0((uint64_t)v134) + 16);
    sub_23C7E3190(v132, v12);
    v13 = sub_23C7E3190(&v112, v12);
    sub_23C8757F0((uint64_t)v13, (uint64_t)sub_23C7E7E58, v14, v15, v16, v17, v18, v19, v70, v73, v76, v79, v83, v87, v91, v92, v93, v94, v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112.n128_i64[0],
      v112.n128_i64[1],
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124,
      v125,
      v126,
      v127,
      v128,
      v129,
      v130,
      v131,
      v20);
    sub_23C7DB4C4();
    if (!v0)
    {
      sub_23C8738C4(v132);
      goto LABEL_28;
    }
    v11 = v132;
    goto LABEL_27;
  }
  v6 = MEMORY[0x24BEE4B08];
  if (v5 == 9)
  {
    v80 = v4;
    v84 = v2;
    v21 = sub_23C7E25BC();
    v22 = *(_QWORD *)(v21 + 8);
    v23 = *(_QWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 24);
    v25 = *(unsigned __int8 *)(v21 + 32);
    v88 = *(_QWORD *)(v21 + 40);
    sub_23C8755B8();
    sub_23C7DFE88();
    v112.n128_u8[0] = v26;
    v112.n128_u64[1] = v27;
    LOWORD(v115) = 256;
    BYTE2(v115) = 0;
    sub_23C7E0808();
    v28 = sub_23C7E56A4(v23, v24, v25);
    if ((sub_23C8757E4(v28, v29, v30, v31, v32, v33, v34, v35, v70, v73, v76, v80, v84, v88, v91, v92, v93, v94, v95,
            v96,
            v97,
            v98,
            v99,
            v100,
            v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112.n128_i8[0],
            v112.n128_i64[1],
            1,
            0,
            v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v132[0].n128_i8[0]) & 1) != 0)
    {
      HIDWORD(v77) = v25;
      v91 = v6;
      v36 = v89;
      v37 = *(_QWORD *)(v89 + 16);
      if (v37)
      {
        swift_bridgeObjectRetain();
        sub_23C7E3190(v132, (const void *)(v89 + 32));
        v38 = sub_23C7E3190(&v112, v132);
        sub_23C8757F0((uint64_t)v38, (uint64_t)sub_23C7E7E58, v39, v40, v41, v42, v43, v44, v71, v22, v77, v81, v85, v89, v91, v92, v93, v94, v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112.n128_i64[0],
          v112.n128_i64[1],
          v113,
          v114,
          v115,
          v116,
          v117,
          v118,
          v119,
          v120,
          v121,
          v122,
          v123,
          v124,
          v125,
          v126,
          v127,
          v128,
          v129,
          v130,
          v131,
          v45);
        sub_23C87207C(v82, v86);
        v46 = BYTE4(v78);
        if (v0)
        {
          v48 = swift_bridgeObjectRelease();
          sub_23C8757F0(v48, (uint64_t)sub_23C7E6F90, v49, v50, v51, v52, v53, v54, v72, v75, v78, v82, v86, v90, v91, v92, v93, v94, v95,
            v96,
            v97,
            v98,
            v99,
            v100,
            v101,
            v102,
            v103,
            v104,
            v105,
            v106,
            v107,
            v108,
            v109,
            v110,
            v111,
            v112.n128_i64[0],
            v112.n128_i64[1],
            v113,
            v114,
            v115,
            v116,
            v117,
            v118,
            v119,
            v120,
            v121,
            v122,
            v123,
            v124,
            v125,
            v126,
            v127,
            v128,
            v129,
            v130,
            v131,
            v55);
          sub_23C7DB62C();
          sub_23C7E087C();
          sub_23C7E5640(v23, v24, v46);
        }
        else
        {
          for (i = 200; ; i += 168)
          {
            sub_23C8F15E4();
            sub_23C8738C4(v132);
            if (!--v37)
              break;
            sub_23C7E3190(v132, (const void *)(v36 + i));
            sub_23C7E3190(&v112, v132);
            sub_23C8738C4(v132);
            sub_23C7DB4C4();
          }
          swift_bridgeObjectRelease();
          sub_23C7E087C();
          sub_23C7E5640(v23, v24, SBYTE4(v78));
        }
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      v67 = v23;
      v68 = v24;
      v69 = BYTE4(v77);
    }
    else
    {
      sub_23C8755B8();
      LOBYTE(v115) = 0;
      *(_WORD *)((char *)&v115 + 1) = 1;
      sub_23C8757E4(v59, v60, v61, v62, v63, v64, v65, v66, v71, v74, v77, v81, v85, v89, v91, v92, v93, v94, v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        79,
        0xE200000000000000,
        0,
        0,
        v115,
        v116,
        v117,
        v118,
        v119,
        v120,
        v121,
        v122,
        v123,
        v124,
        v125,
        v126,
        v127,
        v128,
        v129,
        v130,
        v131,
        v132[0].n128_i8[0]);
      sub_23C7DB398();
      v67 = v23;
      v68 = v24;
      v69 = v25;
    }
    sub_23C7E5640(v67, v68, v69);
    goto LABEL_28;
  }
  if (v5 == 13)
  {
    v56 = sub_23C8746E0((uint64_t)v134);
    v57 = *(_QWORD *)v56;
    v58 = *(unsigned __int8 *)(*(_QWORD *)v56 + 16);
    sub_23C7E3190(&v112, (const void *)(*(_QWORD *)v56 + 24));
    sub_23C7E3190(v132, (const void *)(v57 + 192));
    __asm { BR              X9 }
  }
  if (v5 == 3)
  {
    v7 = sub_23C8746E0((uint64_t)v134);
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(*(_QWORD *)v7 + 16);
    if (v9)
    {
      sub_23C800B48(v133, v132);
      sub_23C8746E0((uint64_t)v132);
      swift_bridgeObjectRetain();
      sub_23C7E3190(&v112, (const void *)(v8 + 32));
      sub_23C7E3190(&v91, &v112);
      sub_23C8738C4(&v112);
      sub_23C7DB4C4();
      if (!v0)
      {
        for (j = (char *)(v8 + 200); ; j += 168)
        {
          sub_23C8F15E4();
          sub_23C8738C4(&v112);
          if (!--v9)
            break;
          sub_23C7E3190(&v112, j);
          sub_23C7E3190(&v91, &v112);
          sub_23C8738C4(&v112);
          sub_23C7DB4C4();
        }
        sub_23C8738C4(v133);
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      sub_23C7E09B8(&v112);
      v11 = v133;
LABEL_27:
      sub_23C8738C4(v11);
    }
  }
LABEL_28:
  sub_23C7DEF28();
}

uint64_t sub_23C872600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  uint64_t isStackAllocationSafe;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t j;
  uint64_t v54;
  double v55;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[168];
  _BYTE v73[176];
  _QWORD v74[2];
  char v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  _WORD v79[68];
  __n128 v80[10];
  __n128 v81[10];
  _QWORD v82[24];

  v82[21] = *MEMORY[0x24BDAC8D0];
  sub_23C8756DC(a1, v81);
  sub_23C800B48(v81, v82);
  v6 = sub_23C874270((uint64_t)v82);
  v7 = 0;
  switch(v6)
  {
    case 9:
      v69 = v3;
      v70 = a2;
      v67 = a1;
      v8 = sub_23C875598();
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      v7 = *(unsigned __int8 *)(v8 + 32);
      v12 = *(_QWORD *)(v8 + 40);
      sub_23C8754C0();
      sub_23C7DFE88();
      v76 = v13;
      v77 = v14;
      v78 = xmmword_23C914530;
      v79[0] = 256;
      LOBYTE(v79[1]) = 0;
      swift_bridgeObjectRetain();
      sub_23C7E56A4(v10, v11, v7);
      sub_23C7DBCC8();
      v71 = v12;
      if ((sub_23C875898() & 1) != 0)
      {
        v66 = v9;
        v68 = v10;
        v64 = v11;
        v65 = v7;
        v15 = *(_QWORD *)(v12 + 16);
        if (v15)
        {
          sub_23C7E3190(v80, (const void *)(v12 + 32));
          sub_23C7E3190(&v76, v80);
          sub_23C7EF94C();
          v16 = sub_23C8754A8();
          if (v3)
          {
            v7 = 0;
            sub_23C7DBBFC();
            sub_23C875558();
            sub_23C7DBCD0();
            sub_23C7E5640(v68, v64, v65);
            goto LABEL_25;
          }
          v38 = v16;
          v7 = 0;
          for (i = 200; ; i += 168)
          {
            if (v38)
            {
              if (v7)
              {
                v40 = (void *)(*(_BYTE *)(v7 + 32) & 0x3F);
                isStackAllocationSafe = sub_23C7DB3D4();
                if (v40 > 0xD)
                {
                  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
                  if ((isStackAllocationSafe & 1) == 0)
                  {
                    swift_slowAlloc();
                    sub_23C875630();
                    sub_23C875414();
                    v44 = v40;
LABEL_88:
                    sub_23C7DBCD0();

                    sub_23C875620();
                  }
                }
                v69 = &v63;
                MEMORY[0x24BDAC7A8](isStackAllocationSafe);
                sub_23C875630();
                sub_23C875414();
                v43 = v42;
                v44 = v40;
                sub_23C7DBCD0();
                if (v40)
                {
                  swift_willThrow();

                  __break(1u);
                  goto LABEL_88;
                }
                sub_23C7DE934();
                sub_23C8738C4(v80);
                sub_23C7DE934();
                if (!*(_QWORD *)(v43 + 16))
                {
                  sub_23C7DBBFC();
                  sub_23C875558();
                  sub_23C7E5964();
                  return v43;
                }
                v7 = v43;
              }
              else
              {
                sub_23C8738C4(v80);
                v7 = v38;
              }
            }
            else
            {
              sub_23C8738C4(v80);
            }
            if (!--v15)
            {
              sub_23C7DBBFC();
              sub_23C7DE934();
              sub_23C7E5964();
              return v7;
            }
            sub_23C7E3190(v80, (const void *)(v71 + i));
            sub_23C7E3190(&v76, v80);
            sub_23C8738C4(v80);
            v38 = sub_23C87556C();
          }
        }
        sub_23C7DBBFC();
        sub_23C7DB62C();
        v32 = v68;
        v33 = v64;
        v34 = v65;
LABEL_30:
        sub_23C7E5640(v32, v33, v34);
        return 0;
      }
      sub_23C8754C0();
      v76 = 21071;
      v77 = 0xE200000000000000;
      v78 = 0uLL;
      LOBYTE(v79[0]) = 0;
      *(_WORD *)((char *)v79 + 1) = 1;
      if ((sub_23C875898() & 1) == 0)
      {
        sub_23C7E087C();
        sub_23C875558();
        v32 = v10;
        v33 = v11;
        v34 = v7;
        goto LABEL_30;
      }
      v68 = v10;
      v74[0] = MEMORY[0x24BEE4B08];
      v30 = *(_QWORD *)(v71 + 16);
      if (!v30)
      {
        sub_23C7E087C();
        sub_23C7DB62C();
        sub_23C8756FC();
        return MEMORY[0x24BEE4B08];
      }
      v66 = v9;
      sub_23C7E3190(v80, (const void *)(v71 + 32));
      sub_23C7E3190(&v76, v80);
      sub_23C7EF94C();
      v31 = sub_23C8754A8();
      if (v3)
      {
        sub_23C7DBBFC();
        sub_23C8756FC();
        sub_23C7DB62C();
        swift_bridgeObjectRelease();
        sub_23C7EF94C();
        return v7;
      }
      v64 = v11;
      v65 = v7;
      v48 = 200;
      while (v31)
      {
        sub_23C8F14B4(v31);
        sub_23C8738C4(v80);
        if (!--v30)
        {
          sub_23C7DBBFC();
          sub_23C875558();
          sub_23C7E5964();
          return v74[0];
        }
        sub_23C7E3190(v80, (const void *)(v71 + v48));
        sub_23C7E3190(&v76, v80);
        sub_23C8738C4(v80);
        v31 = sub_23C872600(v10, v9);
        v48 += 168;
      }
      sub_23C7DBBFC();
      sub_23C7E5964();
      sub_23C7EF94C();
      sub_23C875558();
      swift_bridgeObjectRelease();
      return 0;
    case 10:
    case 12:
    case 14:
    case 15:
      return v7;
    case 11:
      sub_23C875598();
      sub_23C7EF7D0();
      sub_23C7E3190(v80, v29);
      sub_23C7E0718(v73, (const void *)(v2 + 184));
      if ((*(_BYTE *)(v2 + 346) & 1) != 0)
        return 0;
      sub_23C813130(v73, v72);
      if (sub_23C8329E4((uint64_t)v72))
      {
        sub_23C8329F0((uint64_t)v72);
        return 0;
      }
      v36 = *(_QWORD *)sub_23C8329F0((uint64_t)v72);
      sub_23C7E3190(&v76, v80);
      sub_23C7E6960();
      sub_23C7E6960();
      sub_23C7EF94C();
      sub_23C875518();
      if (v3)
      {
        sub_23C7E6960();
        sub_23C7E6960();
        goto LABEL_25;
      }
      if (v37)
      {
        v45 = sub_23C880978();
        v47 = sub_23C875378(v45, v46);
        v49 = v47;
        sub_23C7DB3DC();
        sub_23C7DC474();
        if ((v49 & 1) != 0)
        {
          v50 = *(_QWORD *)(v36 + 16);
          if (!v50)
          {
            sub_23C875848();
            v52 = MEMORY[0x24BEE4AF8];
LABEL_85:
            sub_23C7F7024(v52);
            v7 = v62;
            sub_23C875848();
LABEL_25:
            sub_23C8738C4(v80);
            return v7;
          }
          v51 = (char *)(v36 + 32);
          sub_23C875848();
          v52 = MEMORY[0x24BEE4AF8];
          for (j = v50 - 1; ; --j)
          {
            sub_23C800B48(v51, v74);
            sub_23C800B48(v74, &v76);
            if (sub_23C874270((uint64_t)&v76) != 2)
              goto LABEL_80;
            v54 = sub_23C8746E0((uint64_t)&v76);
            v55 = *(double *)v54;
            if (*(_BYTE *)(v54 + 16))
            {
              if (*(_BYTE *)(v54 + 16) != 1 || v55 < -9.22337204e18 || v55 >= 9.22337204e18)
                goto LABEL_80;
              if ((~*(_QWORD *)&v55 & 0x7FF0000000000000) == 0)
              {
                __break(1u);
LABEL_87:
                __break(1u);
              }
              if (v55 <= -9.22337204e18)
                goto LABEL_87;
              *(_QWORD *)&v55 = (uint64_t)v55;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23C8758A4(0, *(_QWORD *)(v52 + 16) + 1);
              v52 = v60;
            }
            v59 = *(_QWORD *)(v52 + 16);
            v58 = *(_QWORD *)(v52 + 24);
            if (v59 >= v58 >> 1)
            {
              sub_23C8758A4(v58 > 1, v59 + 1);
              v52 = v61;
            }
            *(_QWORD *)(v52 + 16) = v59 + 1;
            *(double *)(v52 + 8 * v59 + 32) = v55;
LABEL_80:
            if (!j)
            {
              sub_23C875850();
              sub_23C875850();
              goto LABEL_85;
            }
            v51 += 168;
          }
        }
      }
      sub_23C7E6960();
      sub_23C7EF94C();
      sub_23C7E6960();
      return 0;
    case 13:
      v22 = sub_23C875598();
      v23 = *(_QWORD *)v22;
      v24 = *(unsigned __int8 *)(*(_QWORD *)v22 + 16);
      sub_23C7E3190(&v76, (const void *)(*(_QWORD *)v22 + 24));
      sub_23C7E3190(v80, (const void *)(v23 + 192));
      __asm { BR              X9 }
      return result;
    case 16:
      v25 = sub_23C875598();
      sub_23C7E3190(v80, (const void *)(*(_QWORD *)v25 + 16));
      v26 = (void *)sub_23C87588C();
      sub_23C7E3190(v26, v27);
      sub_23C7EF94C();
      v28 = sub_23C87556C();
      if (!v3)
        v7 = v28;
      goto LABEL_25;
    default:
      if (v6 != 2)
        return v7;
      v17 = sub_23C875598();
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(unsigned __int8 *)(v17 + 16);
      if (v19 == 4 && *(_OWORD *)v17 == 0)
      {
        sub_23C800B48(v81, v80);
        sub_23C7DC574((uint64_t)v80);
      }
      else
      {
        v76 = *(_QWORD *)v17;
        v77 = v18;
        LOBYTE(v78) = v19;
        v74[0] = 0;
        v74[1] = 0;
        v75 = 0;
        sub_23C800B48(v81, v80);
        sub_23C7DC574((uint64_t)v80);
        static DatabaseValue.== infix(_:_:)((uint64_t)&v76);
        if ((v21 & 1) == 0)
        {
          sub_23C8738C4(v81);
          return 0;
        }
      }
      sub_23C8738C4(v81);
      return MEMORY[0x24BEE4B08];
  }
}

void sub_23C873110(void *a1@<X0>, void *a2@<X8>)
{
  const void *v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  uint64_t v17;
  __n128 *v18;
  __int128 *p_dst;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void *v24;
  const void *v25;
  char v26;
  _BYTE *v27;
  int v28;
  BOOL v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __n128 *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[21];
  __int128 v118;
  char v119;
  __int128 __dst;
  char v121;
  BOOL v122;
  __n128 v123;
  char v124;
  _BYTE v125[168];
  _BYTE v126[168];

  sub_23C7E3190(v125, v2);
  switch(sub_23C7EBC58(v125))
  {
    case 2u:
      v6 = sub_23C875468();
      if (*(_BYTE *)(v6 + 16))
      {
        if (*(_BYTE *)(v6 + 16) != 4 || *(_QWORD *)(v6 + 8) | v7)
          goto LABEL_22;
        v123 = 0uLL;
        v124 = 4;
      }
      else
      {
        if (v7 > 1)
          goto LABEL_22;
        if ((_BYTE)a1)
          v41 = v7 == 0;
        else
          v41 = v7 == 1;
        v63 = v41;
        v123 = (__n128)(unint64_t)v63;
        v124 = 0;
      }
      sub_23C8027EC((uint64_t)&v123);
      sub_23C7E322C(&v123);
      goto LABEL_49;
    case 6u:
      v22 = sub_23C875684();
      if (v41)
        goto LABEL_31;
      if (v23 == 1)
        goto LABEL_30;
      v24 = (const void *)(*(_QWORD *)v22 + 352);
      v25 = (const void *)(*(_QWORD *)v22 + 184);
      v26 = *(_BYTE *)(*(_QWORD *)v22 + 515);
      sub_23C7E3190(&v123, (const void *)(*(_QWORD *)v22 + 16));
      sub_23C7E3190(&__dst, v25);
      sub_23C7E3190(&v118, v24);
      sub_23C86FC18(&v123, &__dst, &v118, (v26 & 1) == 0, a2);
      goto LABEL_49;
    case 8u:
      v8 = sub_23C87540C();
      v9 = *(_QWORD *)v8;
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 24);
      v13 = *(_QWORD *)(*(_QWORD *)v8 + 32);
      v12 = *(_QWORD *)(*(_QWORD *)v8 + 40);
      sub_23C7E3190(&v118, (const void *)(*(_QWORD *)v8 + 48));
      sub_23C7E3190(&__dst, (const void *)(v9 + 216));
      sub_23C838EA0(v9 + 384, (uint64_t)&v123);
      if (!(_BYTE)a1)
      {
        sub_23C7E3190(&v85, v125);
        v105 = xmmword_23C914530;
        goto LABEL_40;
      }
      if (a1 == 1)
      {
        sub_23C7E3190(&v85, v125);
        v105 = 0uLL;
LABEL_40:
        LOBYTE(v106) = 0;
        v42 = sub_23C8027EC((uint64_t)&v105);
        sub_23C87583C(v42, v43, v44, v45, v46, v47, v48, v49, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85.n128_i64[0],
          v85.n128_i64[1],
          v86,
          v87,
          v88,
          v89,
          v90,
          v91,
          v92,
          v93,
          v94,
          v95,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          *((uint64_t *)&v105 + 1),
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112,
          v113,
          v114,
          v115,
          v116);
        sub_23C7E3190(&v64, v117);
        v18 = &v85;
        p_dst = (__int128 *)&v64;
        goto LABEL_33;
      }
      v50 = (_QWORD *)sub_23C7DB388();
      v50[2] = v13;
      v50[3] = v12;
      v50[4] = v11;
      v50[5] = v10;
      sub_23C7E3190(v50 + 6, &v118);
      sub_23C7E3190(v50 + 27, &__dst);
      sub_23C838EA0((uint64_t)&v123, (uint64_t)(v50 + 48));
      *(_QWORD *)&v105 = v50;
      v51 = sub_23C874ADC((uint64_t)&v105);
      sub_23C87583C(v51, v52, v53, v54, v55, v56, v57, v58, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85.n128_i64[0],
        v85.n128_i64[1],
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        *((uint64_t *)&v105 + 1),
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116);
      sub_23C7E3190(a2, v117);
      sub_23C7E6310((__n128 *)&v118);
      sub_23C7E6310((__n128 *)&__dst);
      sub_23C874B20();
      sub_23C7DBCC8();
      sub_23C7DB3D4();
      goto LABEL_49;
    case 0xAu:
      v27 = (_BYTE *)sub_23C875684();
      if (v41)
        goto LABEL_31;
      if (v28 == 1)
        goto LABEL_30;
      v29 = (v27[162] & 1) == 0;
      memmove(&__dst, v27, 0xA2uLL);
      v122 = v29;
      sub_23C874988((uint64_t)&__dst);
      goto LABEL_46;
    case 0xBu:
      v30 = *(_BYTE **)sub_23C8746E0((uint64_t)v126);
      sub_23C7E3190(&v123, v30 + 16);
      sub_23C7E0718(&v85, v30 + 184);
      if (!(_BYTE)a1)
      {
        sub_23C7E3190(v117, v125);
        v118 = xmmword_23C914530;
        goto LABEL_43;
      }
      if (a1 == 1)
      {
        sub_23C7E3190(v117, v125);
        v118 = 0uLL;
LABEL_43:
        v119 = 0;
        sub_23C8027EC((uint64_t)&v118);
        sub_23C800B48(&v118, &__dst);
        sub_23C7E3190(&v105, &__dst);
        v18 = (__n128 *)v117;
        p_dst = &v105;
        goto LABEL_33;
      }
      v59 = v30[346];
      v60 = sub_23C7DB388();
      v61 = (void *)sub_23C875744(v60);
      sub_23C7E3190(v61, &v123);
      sub_23C7E0718(a1, &v85);
      v30[346] = (v59 & 1) == 0;
      *(_QWORD *)&v118 = v30;
      sub_23C813280((uint64_t)&v118);
      sub_23C800B48(&v118, &__dst);
      sub_23C7E3190(a2, &__dst);
      sub_23C8738C4(&v123);
      sub_23C874D7C(&v85);
      goto LABEL_49;
    case 0xDu:
      v14 = sub_23C875684();
      if (v41)
        goto LABEL_31;
      if (v15 == 1)
        goto LABEL_30;
      v16 = (const void *)(*(_QWORD *)v14 + 192);
      v17 = 0x2030001u >> (8 * *(_BYTE *)(*(_QWORD *)v14 + 16));
      sub_23C7E3190(&v123, (const void *)(*(_QWORD *)v14 + 24));
      sub_23C7E3190(&__dst, v16);
      v18 = &v123;
      p_dst = &__dst;
      v20 = a2;
      v21 = v17;
      goto LABEL_34;
    case 0xFu:
      sub_23C87540C();
      goto LABEL_22;
    case 0x10u:
      sub_23C875668();
      sub_23C7E3190(&__dst, v2);
      v33 = *(_QWORD *)(v3 + 184);
      v32 = *(_QWORD *)(v3 + 192);
      sub_23C7E3190(&v118, v2);
      sub_23C875868();
      sub_23C873110(&v123, a1);
      sub_23C7E3190(&v118, &v123);
      v117[0] = v33;
      v117[1] = v32;
      sub_23C875370(&v118, (uint64_t)v117);
      sub_23C7E6310((__n128 *)&__dst);
      v34 = &v123;
      goto LABEL_48;
    case 0x12u:
      v35 = *(_QWORD *)sub_23C8746E0((uint64_t)v126);
      sub_23C7E3190(&v123, (const void *)(v35 + 16));
      if ((_BYTE)a1)
      {
        v36 = *(_BYTE *)(v35 + 179);
        v37 = sub_23C7DB388();
        sub_23C7E3190((void *)(v37 + 16), &v123);
        *(_BYTE *)(v37 + 179) = (v36 & 1) == 0;
        *(_QWORD *)&v118 = v37;
        sub_23C8748C4((uint64_t)&v118);
        sub_23C800B48(&v118, &__dst);
        sub_23C7E3190(a2, &__dst);
        v34 = &v123;
        goto LABEL_48;
      }
      v40 = (__n128 *)v125;
      goto LABEL_47;
    case 0x14u:
      v38 = sub_23C875684();
      if (v41)
        goto LABEL_31;
      if (v39 == 1)
        goto LABEL_30;
      v62 = *(_BYTE *)(v38 + 8);
      *(_QWORD *)&__dst = *(_QWORD *)v38;
      BYTE8(__dst) = (v62 & 1) == 0;
      sub_23C874820((uint64_t)&__dst);
      goto LABEL_46;
    default:
LABEL_22:
      if (!(_BYTE)a1)
      {
LABEL_31:
        sub_23C7E3190(&v118, v125);
        __dst = xmmword_23C914530;
LABEL_32:
        v121 = 0;
        sub_23C8027EC((uint64_t)&__dst);
        sub_23C87585C();
        sub_23C7E3190(v117, &v123);
        v18 = (__n128 *)&v118;
        p_dst = (__int128 *)v117;
LABEL_33:
        v20 = a2;
        v21 = 0;
LABEL_34:
        sub_23C86F20C(v21, v18, p_dst, v20);
        goto LABEL_49;
      }
      if (a1 == 1)
      {
LABEL_30:
        sub_23C7E3190(&v118, v125);
        __dst = 0uLL;
        goto LABEL_32;
      }
      v31 = sub_23C7DB388();
      sub_23C7E3190((void *)(v31 + 16), v125);
      *(_QWORD *)&__dst = v31;
      sub_23C8747DC((uint64_t)&__dst);
LABEL_46:
      sub_23C87585C();
      v40 = &v123;
LABEL_47:
      sub_23C7E3190(a2, v40);
      v34 = (__n128 *)v125;
LABEL_48:
      sub_23C8738C4(v34);
LABEL_49:
      sub_23C7DEEA8();
      return;
  }
}

void sub_23C87371C()
{
  qword_256BCCAD8 = (uint64_t)&unk_250D81330;
}

void static SQLExpressible<>.rowID.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6469776F72;
  a1[1] = 0xE500000000000000;
}

void SQLExpression.sqlExpression.getter(void *a1@<X8>)
{
  const void *v1;
  __n128 v3[10];

  sub_23C7E3190(v3, v1);
  sub_23C7E3190(a1, v1);
  sub_23C8738C4(v3);
  sub_23C7E4198();
}

void sub_23C873790(void *a1@<X8>)
{
  const void *v1;
  _BYTE __dst[163];

  memcpy(__dst, v1, sizeof(__dst));
  sub_23C86DDB0(a1);
}

void sub_23C8737D0(void *a1@<X8>)
{
  const void *v1;
  _BYTE __dst[163];

  memcpy(__dst, v1, sizeof(__dst));
  sub_23C86E07C(a1);
}

void sub_23C873810(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _QWORD v7[21];

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(v7, AssociatedTypeWitness, v4);
  sub_23C7E3190(a3, v7);
  sub_23C8756CC();
}

uint64_t sub_23C87387C()
{
  return 24;
}

__n128 sub_23C873888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C87389C()
{
  return swift_getAtKeyPath();
}

void sub_23C8738C4(__n128 *a1)
{
  void (*v1)(void);

  sub_23C7E2108(a1);
  sub_23C875878();
  sub_23C7DA514();
  v1();
  sub_23C7E4C90();
}

uint64_t Sequence<>.joined(operator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[2];
  __int128 v11;
  char v12;
  char v13;
  char v14;

  sub_23C8757C4();
  v10[0] = v0;
  v10[1] = v1;
  v11 = *(_OWORD *)(v2 + 16);
  v12 = v3;
  v13 = v4;
  v14 = v5;
  sub_23C891CA0((uint64_t)sub_23C87397C, 0, v6, (uint64_t)&type metadata for SQLExpression, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  sub_23C8757F8(v10);
  return swift_bridgeObjectRelease();
}

void *sub_23C87397C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD __src[21];

  v4 = a1[3];
  v3 = a1[4];
  sub_23C7E7E34(a1, v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 8) + 8))(__src, v4);
  return memcpy(a2, __src, 0xA3uLL);
}

void SQLSpecificExpressible.asc.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C873A14(a1, a2, (void (*)(_BYTE *))sub_23C8635D8, a3);
}

void SQLSpecificExpressible.desc.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C873A14(a1, a2, (void (*)(_BYTE *))sub_23C863648, a3);
}

void SQLSpecificExpressible.ascNullsLast.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C873A14(a1, a2, (void (*)(_BYTE *))sub_23C863548, a3);
}

void SQLSpecificExpressible.descNullsFirst.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_23C873A14(a1, a2, (void (*)(_BYTE *))sub_23C863594, a3);
}

void sub_23C873A14(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_BYTE *)@<X2>, void *a4@<X8>)
{
  _BYTE v6[168];

  sub_23C7DFE24(a1, a2, (uint64_t)a3);
  a3(v6);
  sub_23C8634F8(v6, a4);
  sub_23C8756CC();
}

uint64_t SQLSpecificExpressible.forKey(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  sub_23C7E7E34(a1, a1[3]);
  v7 = sub_23C911C40();
  SQLSpecificExpressible.forKey(_:)(v7, v8, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

void SQLSpecificExpressible.collating(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6;
  _QWORD v7[2];
  _BYTE v8[168];
  __n128 v9[10];

  (*(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v9, a2);
  sub_23C7E3190(v8, v9);
  v6 = *(_QWORD *)(a1 + 24);
  v7[0] = *(_QWORD *)(a1 + 16);
  v7[1] = v6;
  sub_23C86FDC0(v8, (uint64_t)v7, a4);
  sub_23C8738C4(v9);
}

unint64_t sub_23C873B48()
{
  unint64_t result;

  result = qword_256BCCAE0;
  if (!qword_256BCCAE0)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQLExpression.AssociativeBinaryOperator, &type metadata for SQLExpression.AssociativeBinaryOperator);
    atomic_store(result, (unint64_t *)&qword_256BCCAE0);
  }
  return result;
}

void type metadata accessor for SQLExpression()
{
  sub_23C7DFB90();
}

uint64_t destroy for SQLExpression.AssociativeBinaryOperator(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_23C7E5640(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for SQLExpression.AssociativeBinaryOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_23C7E56A4(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for SQLExpression.AssociativeBinaryOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_23C7E56A4(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  sub_23C7E5640(v7, v8, v9);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 initializeWithTake for SQLExpression.AssociativeBinaryOperator(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SQLExpression.AssociativeBinaryOperator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v5;
  sub_23C7E5640(v6, v7, v8);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLExpression.AssociativeBinaryOperator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 35))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLExpression.AssociativeBinaryOperator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLExpression.AssociativeBinaryOperator()
{
  sub_23C7DFB90();
}

uint64_t dispatch thunk of SQLExpressible.sqlExpression.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _s12GRDBInternal13SQLExpressionV4ImplOwxx_0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  sub_23C7DA514();
  return sub_23C7E6F90(v7, v0, v1, v2, v3, v4, v5, v6, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t _s12GRDBInternal13SQLExpressionV4ImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v24 = *(unsigned __int8 *)(a2 + 162);
  v25 = *(unsigned __int16 *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23C7E7E58(*(_QWORD *)a2, v10, v3, v4, v5, v6, v7, v11, v8, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v25 | (v24 << 16));
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_BYTE *)(a1 + 162) = v24;
  *(_WORD *)(a1 + 160) = v25;
  return a1;
}

uint64_t _s12GRDBInternal13SQLExpressionV4ImplOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v35 = *(_QWORD *)(a2 + 112);
  v36 = *(_QWORD *)(a2 + 120);
  v37 = *(_QWORD *)(a2 + 128);
  v38 = *(_QWORD *)(a2 + 136);
  v41 = *(unsigned __int8 *)(a2 + 162);
  v11 = *(unsigned __int16 *)(a2 + 160);
  v39 = *(_QWORD *)(a2 + 144);
  v40 = *(_QWORD *)(a2 + 152);
  sub_23C7E7E58(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v11 | (v41 << 16));
  v12 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v23 = *(_OWORD *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v25 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_WORD *)(a1 + 160) = v11;
  *(_BYTE *)(a1 + 162) = v41;
  v26 = *(_QWORD *)(a1 + 144);
  v27 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  sub_23C7E6F90(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    v27,
    v12);
  return a1;
}

void _s12GRDBInternal13SQLExpressionV4ImplOwta_0(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_23C7DD1BC();
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  v7 = v6[1];
  *(_OWORD *)a1 = *v6;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v6[5];
  *(_OWORD *)(a1 + 64) = v6[4];
  *(_OWORD *)(a1 + 80) = v9;
  v10 = v6[7];
  *(_OWORD *)(a1 + 96) = v6[6];
  *(_OWORD *)(a1 + 112) = v10;
  v11 = v6[9];
  *(_OWORD *)(a1 + 128) = v6[8];
  *(_OWORD *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 162) = v12;
  *(_WORD *)(a1 + 160) = v13;
  sub_23C7E6F90(v14, v21, v15, v16, v17, v18, v19, v20, v2.n128_i64[0], v2.n128_i64[1], v22, v23, v24, v25, v26, v27, v28, v29, v3,
    v4,
    v5);
  sub_23C7E4C90();
}

uint64_t _s12GRDBInternal11SQLOrderingV4ImplOwet_0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 163))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 64) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double sub_23C8741D8(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 162) = 0;
    *(_WORD *)(a1 + 160) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 163) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 147) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 163) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23C874270(uint64_t a1)
{
  if ((unsigned __int16)(*(unsigned __int8 *)(a1 + 162) >> 3) <= 0x14u)
    return *(unsigned __int8 *)(a1 + 162) >> 3;
  else
    return (*(_DWORD *)a1 + 21);
}

uint64_t sub_23C87428C(uint64_t a1)
{
  uint64_t result;
  int v2;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  *(_BYTE *)(result + 2) = ((v2 | (*(unsigned __int8 *)(result + 2) << 16)) >> 16) & 7;
  *(_WORD *)result = v2;
  return result;
}

void sub_23C8742A8(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;

  if (a2 < 0x15)
  {
    v4 = *(_QWORD *)(a1 + 104) & 1;
    v3 = (*(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16)) & 0x181FF | (a2 << 19);
    *(_QWORD *)(a1 + 64) &= 1uLL;
    *(_QWORD *)(a1 + 104) = v4;
  }
  else
  {
    *(_QWORD *)a1 = a2 - 21;
    bzero((void *)(a1 + 8), 0x98uLL);
    v3 = 11010048;
  }
  *(_WORD *)(a1 + 160) = v3;
  *(_BYTE *)(a1 + 162) = BYTE2(v3);
}

ValueMetadata *type metadata accessor for SQLExpression.Impl()
{
  return &type metadata for SQLExpression.Impl;
}

void sub_23C874330(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C86DC84(a1);
  sub_23C7E4198();
}

void sub_23C874364(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C86DF50(a1);
  sub_23C7E4198();
}

void *sub_23C874398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return SQLSpecificExpressible.sqlSelection.getter(a1, (uint64_t)&protocol witness table for SQLRequest<A>, a2, a3);
}

void sub_23C8743A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  SQLSpecificExpressible.sqlOrdering.getter(a1, (uint64_t)&protocol witness table for SQLRequest<A>, a2);
}

void sub_23C8743B0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v4[21];

  v4[0] = a1;
  v4[1] = a2;
  sub_23C800B0C((uint64_t)v4);
  sub_23C800B48(v4, a3);
  sub_23C7DF858();
  sub_23C7E4198();
}

uint64_t sub_23C8743EC@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_23C86DE94(*v1, v1[1], a1);
}

uint64_t sub_23C8743F4@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_23C86E164(*v1, v1[1], a1);
}

uint64_t sub_23C8743FC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x200000u) >> 16;
  return result;
}

uint64_t sub_23C874440()
{
  __n128 *v0;
  __n128 v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  v1 = sub_23C7DF3E8();
  sub_23C7E8430(v2, v3, v4, v5, v6, v7, v8, v9, v0[21].n128_u16[4] | (v0[21].n128_u8[10] << 16), v1, v10, v11, v12, v13);
  sub_23C7E8430(v0[22].n128_i64[0], v0[22].n128_u64[1], v0[23].n128_i64[0], v0[23].n128_u64[1], v0[24].n128_i64[0], v0[24].n128_i64[1], v0[25].n128_i64[0], v0[25].n128_i64[1], v0[32].n128_u16[0] | (v0[32].n128_u8[2] << 16), v0[26], v0[27], v0[28], v0[29], v0[30]);
  return sub_23C7E679C();
}

uint64_t sub_23C8744E4(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x300000u) >> 16;
  return result;
}

uint64_t sub_23C874528(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_25;
  }
  sub_23C7E79A8(&qword_25430DBE0);
  result = sub_23C911610();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    sub_23C7DB624();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    sub_23C911BBC();
    sub_23C7DBCC8();
    sub_23C910F14();
    result = sub_23C911BF8();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (result = sub_23C7E16E8(), (result & 1) != 0))
      {
LABEL_11:
        result = sub_23C7DB62C();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          result = sub_23C7E16E8();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23C8746E0(uint64_t result)
{
  __int16 v1;

  v1 = *(_WORD *)(result + 160);
  *(_BYTE *)(result + 162) &= 7u;
  *(_WORD *)(result + 160) = v1;
  return result;
}

uint64_t sub_23C874700()
{
  uint64_t v0;

  sub_23C7E8430(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 184) | (*(unsigned __int8 *)(v0 + 186) << 16), *(__n128 *)(v0 + 88), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152));
  sub_23C7E8430(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(unsigned __int16 *)(v0 + 352) | (*(unsigned __int8 *)(v0 + 354) << 16), *(__n128 *)(v0 + 256), *(__n128 *)(v0 + 272), *(__n128 *)(v0 + 288), *(__n128 *)(v0 + 304), *(__n128 *)(v0 + 320));
  return sub_23C7DF00C();
}

uint64_t sub_23C874790(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x680000u) >> 16;
  return result;
}

uint64_t sub_23C8747D4()
{
  return sub_23C87486C();
}

uint64_t sub_23C8747DC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x780000u) >> 16;
  return result;
}

uint64_t sub_23C874820(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0xA00000u) >> 16;
  return result;
}

uint64_t sub_23C874864()
{
  return sub_23C87486C();
}

uint64_t sub_23C87486C()
{
  __n128 *v0;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  return sub_23C7E679C();
}

uint64_t sub_23C8748C4(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x900000u) >> 16;
  return result;
}

uint64_t sub_23C874908()
{
  __n128 *v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  v1 = sub_23C7DF3E8();
  sub_23C8131FC(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, v11, v12, v13, v14, v15, v16, v17, v0[20].n128_i64[1],
    v0[21].n128_i64[0],
    v0[21].n128_u16[4]);
  return sub_23C7E679C();
}

uint64_t sub_23C874988(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x500000u) >> 16;
  return result;
}

uint64_t sub_23C8749CC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;

  sub_23C7EE024();
  swift_bridgeObjectRelease();
  sub_23C7E8430(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(unsigned __int16 *)(v0 + 208) | (*(unsigned __int8 *)(v0 + 210) << 16), *(__n128 *)(v0 + 112), *(__n128 *)(v0 + 128), *(__n128 *)(v0 + 144), *(__n128 *)(v0 + 160), *(__n128 *)(v0 + 176));
  sub_23C7E8430(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(unsigned __int16 *)(v0 + 376) | (*(unsigned __int8 *)(v0 + 378) << 16), *(__n128 *)(v0 + 280), *(__n128 *)(v0 + 296), *(__n128 *)(v0 + 312), *(__n128 *)(v0 + 328), *(__n128 *)(v0 + 344));
  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(unsigned __int16 *)(v0 + 544) | (*(unsigned __int8 *)(v0 + 546) << 16);
  if (v1 >> 1 == 0xFFFFFFFF)
  {
    v4 = v2 != 0;
    v5 = v2 == 1;
  }
  else
  {
    v4 = 1;
    v5 = 0;
  }
  if (!v5 && v4 || (v3 & 0xFE7E00) != 0)
    sub_23C7E6F90(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), v1, *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), v2, *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528),
      *(_QWORD *)(v0 + 536),
      v3);
  return sub_23C7E679C();
}

uint64_t sub_23C874ADC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x400000u) >> 16;
  return result;
}

void sub_23C874B20()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);

  sub_23C7DD1BC();
  sub_23C875878();
  v22 = v0;
  sub_23C7DA514();
  sub_23C863F18(v1, v8, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  sub_23C7E4C90();
}

uint64_t sub_23C874B58(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x980000u) >> 16;
  return result;
}

uint64_t sub_23C874B9C()
{
  uint64_t v0;

  swift_release();
  sub_23C7E8430(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 184) | (*(unsigned __int8 *)(v0 + 186) << 16), *(__n128 *)(v0 + 88), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152));
  return sub_23C7DF00C();
}

uint64_t sub_23C874BFC(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x700000u) >> 16;
  return result;
}

uint64_t sub_23C874C40()
{
  uint64_t v0;

  sub_23C7EE024();
  sub_23C7E8430(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(unsigned __int16 *)(v0 + 200) | (*(unsigned __int8 *)(v0 + 202) << 16), *(__n128 *)(v0 + 104), *(__n128 *)(v0 + 120), *(__n128 *)(v0 + 136), *(__n128 *)(v0 + 152), *(__n128 *)(v0 + 168));
  return sub_23C7DF00C();
}

uint64_t sub_23C874C9C(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x600000u) >> 16;
  return result;
}

uint64_t sub_23C874CE0()
{
  __n128 *v0;

  sub_23C7E8430(v0[1].n128_i64[0], v0[1].n128_u64[1], v0[2].n128_i64[0], v0[2].n128_u64[1], v0[3].n128_i64[0], v0[3].n128_i64[1], v0[4].n128_i64[0], v0[4].n128_i64[1], v0[11].n128_u16[0] | (v0[11].n128_u8[2] << 16), v0[5], v0[6], v0[7], v0[8], v0[9]);
  swift_bridgeObjectRelease();
  return sub_23C7DF00C();
}

uint64_t sub_23C874D38(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x800000u) >> 16;
  return result;
}

void sub_23C874D7C(__n128 *a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_23C7E2108(a1);
  v10(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_u64[0], v1.n128_u64[1], v11, v12, v13);
  sub_23C7E4C90();
}

uint64_t sub_23C874DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430CF68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C874E04()
{
  uint64_t v0;

  sub_23C7EE024();
  sub_23C7E8430(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(unsigned __int16 *)(v0 + 192) | (*(unsigned __int8 *)(v0 + 194) << 16), *(__n128 *)(v0 + 96), *(__n128 *)(v0 + 112), *(__n128 *)(v0 + 128), *(__n128 *)(v0 + 144), *(__n128 *)(v0 + 160));
  sub_23C7E8430(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(unsigned __int16 *)(v0 + 360) | (*(unsigned __int8 *)(v0 + 362) << 16), *(__n128 *)(v0 + 264), *(__n128 *)(v0 + 280), *(__n128 *)(v0 + 296), *(__n128 *)(v0 + 312), *(__n128 *)(v0 + 328));
  return sub_23C7DF00C();
}

uint64_t sub_23C874E94(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x380000u) >> 16;
  return result;
}

uint64_t sub_23C874ED8(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 160);
  result = a1 + 160;
  v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  v4 = *(_QWORD *)(result - 56) & 1;
  *(_QWORD *)(result - 96) &= 1uLL;
  *(_QWORD *)(result - 56) = v4;
  *(_WORD *)result = v3 & 0x81FF;
  *(_BYTE *)(result + 2) = (v3 & 0x1FFFF | 0x480000u) >> 16;
  return result;
}

uint64_t sub_23C874F1C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_13;
  }
  sub_23C7E79A8(&qword_256BCA610);
  result = sub_23C911610();
  v3 = result;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v3;
  }
  v5 = 0;
  v6 = result + 56;
  v7 = ~(-1 << *(_BYTE *)(result + 32));
  while (v5 < *(_QWORD *)(a1 + 16))
  {
    v8 = *(_QWORD *)(a1 + 32 + 8 * v5);
    result = sub_23C911BB0();
    v9 = result & v7;
    v10 = (result & (unint64_t)v7) >> 6;
    v11 = *(_QWORD *)(v6 + 8 * v10);
    v12 = 1 << (result & v7);
    v13 = *(_QWORD *)(v3 + 48);
    if ((v12 & v11) != 0)
    {
      while (*(_QWORD *)(v13 + 8 * v9) != v8)
      {
        v9 = (v9 + 1) & v7;
        v10 = v9 >> 6;
        v11 = *(_QWORD *)(v6 + 8 * (v9 >> 6));
        v12 = 1 << v9;
        if ((v11 & (1 << v9)) == 0)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      *(_QWORD *)(v6 + 8 * v10) = v12 | v11;
      *(_QWORD *)(v13 + 8 * v9) = v8;
      v14 = *(_QWORD *)(v3 + 16);
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_15;
      *(_QWORD *)(v3 + 16) = v16;
    }
    if (++v5 == v4)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_23C875054(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C8750A0 + 4 * byte_23C916320[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C8750D4 + 4 * byte_23C91631B[v4]))();
}

uint64_t sub_23C8750D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8750DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8750E4);
  return result;
}

uint64_t sub_23C8750F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8750F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C8750FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C875104(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SQLExpression.EqualityOperator()
{
  sub_23C7DFB90();
}

void sub_23C875120(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_23C7DB390();
}

uint64_t sub_23C875150(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_23C8751A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_23C8751E0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C875220(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SQLExpression.UnaryOperator()
{
  sub_23C7DFB90();
}

void type metadata accessor for SQLExpression.EscapableBinaryOperator()
{
  sub_23C7DFB90();
}

void type metadata accessor for SQLExpression.BinaryOperator()
{
  sub_23C7DFB90();
}

unint64_t sub_23C875288()
{
  unint64_t result;

  result = qword_256BCCAE8;
  if (!qword_256BCCAE8)
  {
    result = MEMORY[0x242626100](&unk_23C9164C0, &unk_250D811B0);
    atomic_store(result, (unint64_t *)&qword_256BCCAE8);
  }
  return result;
}

unint64_t sub_23C8752C8()
{
  unint64_t result;

  result = qword_256BCCAF0;
  if (!qword_256BCCAF0)
  {
    result = MEMORY[0x242626100](&unk_23C916528, &unk_250D81130);
    atomic_store(result, (unint64_t *)&qword_256BCCAF0);
  }
  return result;
}

unint64_t sub_23C875308()
{
  unint64_t result;

  result = qword_256BCCAF8;
  if (!qword_256BCCAF8)
  {
    result = MEMORY[0x242626100](&unk_23C916608, &unk_250D812B0);
    atomic_store(result, (unint64_t *)&qword_256BCCAF8);
  }
  return result;
}

void sub_23C875348()
{
  sub_23C874B20();
}

void sub_23C875354(__n128 *a1)
{
  sub_23C8738C4(a1);
}

void sub_23C87535C()
{
  uint64_t v0;

  sub_23C8738C4((__n128 *)(v0 + 1128));
}

uint64_t sub_23C875364(uint64_t a1)
{
  unint64_t v1;

  return sub_23C7E56A4(a1, v1, 3);
}

void sub_23C875370(const void *a1, uint64_t a2)
{
  void *v2;

  sub_23C86FDC0(a1, a2, v2);
}

uint64_t sub_23C875378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C84F1CC(v3, v2, a1, a2);
}

uint64_t sub_23C875398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unint64_t a44)
{
  uint64_t v44;

  sub_23C7E5640(a40, a44, 3);
  sub_23C7E5640(a40, a44, 3);
  return v44;
}

uint64_t sub_23C8753D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  sub_23C7E56A4(a1, a2, 2);
  sub_23C7E56A4(v3, v2, 2);
  return sub_23C7E5640(v3, v2, 2);
}

void sub_23C875400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_23C86D12C(a1, v10, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_23C87540C()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 232);
}

void sub_23C875414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C868B54(v1, v3, v2, v0);
}

void *sub_23C875438(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char __dst)
{
  return memcpy(&__dst, (const void *)(*(_QWORD *)a1 + 16), 0xB8uLL);
}

void *sub_23C875450(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char __dst)
{
  return memcpy(&__dst, (const void *)(*(_QWORD *)a1 + 16), 0xB8uLL);
}

uint64_t sub_23C875468()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 232);
}

uint64_t sub_23C875480()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 232);
}

uint64_t sub_23C875498()
{
  return sub_23C871AF4();
}

uint64_t sub_23C8754A0()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 216);
}

uint64_t sub_23C8754A8()
{
  uint64_t v0;

  return sub_23C872600(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
}

void sub_23C8754C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v0 + 752) = v1;
  *(_QWORD *)(v0 + 760) = v6;
  *(_QWORD *)(v0 + 768) = v3;
  *(_QWORD *)(v0 + 776) = v7;
  *(_BYTE *)(v0 + 784) = v5;
  *(_BYTE *)(v0 + 785) = v2;
  *(_BYTE *)(v0 + 786) = v4;
}

uint64_t sub_23C8754E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  const void *v32;
  uint64_t v33;

  return sub_23C849130(v31, a31, v33, v32);
}

uint64_t sub_23C8754F8()
{
  return sub_23C910F5C();
}

uint64_t sub_23C875504()
{
  return sub_23C910F5C();
}

void sub_23C875510()
{
  __n128 *v0;

  sub_23C874D7C(v0 + 39);
}

void sub_23C875518()
{
  sub_23C8714F8();
}

uint64_t sub_23C87552C(const void *a1)
{
  uint64_t v1;

  sub_23C800B48(a1, (void *)(v1 - 216));
  return sub_23C874270(v1 - 216);
}

uint64_t sub_23C875544()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 3);
}

uint64_t sub_23C875558()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C87556C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C872600(v0, v1);
}

uint64_t sub_23C875580(const void *a1)
{
  uint64_t v1;

  sub_23C800B48(a1, (void *)(v1 - 256));
  return sub_23C874270(v1 - 256);
}

uint64_t sub_23C875598()
{
  uint64_t v0;

  return sub_23C8746E0(v0 + 1088);
}

void sub_23C8755A0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 960) = 40;
  *(_QWORD *)(v0 + 968) = 0xE100000000000000;
}

uint64_t sub_23C8755D0()
{
  unint64_t v0;
  uint64_t v1;

  sub_23C7E56A4(v1, v0, 3);
  return swift_retain();
}

uint64_t sub_23C8755F0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 1);
}

uint64_t sub_23C875600()
{
  unint64_t v0;
  char v1;
  uint64_t v2;

  return sub_23C7E5640(v2, v0, v1);
}

uint64_t sub_23C875610()
{
  unint64_t v0;
  uint64_t v1;

  return sub_23C7E5640(v1, v0, 0);
}

void sub_23C875620()
{
  JUMPOUT(0x2426261F0);
}

uint64_t sub_23C875630()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_23C88CFE0(0, v1, v0);
}

uint64_t sub_23C875640()
{
  return swift_retain();
}

uint64_t sub_23C875650()
{
  uint64_t v0;

  return sub_23C88F1DC(v0);
}

uint64_t sub_23C875660()
{
  return sub_23C871AF4();
}

uint64_t sub_23C875668()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 232);
}

uint64_t sub_23C875684()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 232);
}

uint64_t sub_23C87569C()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 256);
}

uint64_t sub_23C8756B4()
{
  uint64_t v0;

  return sub_23C8746E0(v0 - 256);
}

void *sub_23C8756DC(uint64_t a1, void *a2)
{
  const void *v2;

  return sub_23C800B48(v2, a2);
}

uint64_t sub_23C8756E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8756F4()
{
  return sub_23C86E250();
}

uint64_t sub_23C8756FC()
{
  uint64_t v0;
  char v1;
  unint64_t v2;

  return sub_23C7E5640(*(_QWORD *)(v0 + 40), v2, v1);
}

uint64_t sub_23C87570C()
{
  return sub_23C86E250();
}

uint64_t sub_23C87572C()
{
  return swift_retain();
}

uint64_t sub_23C875734()
{
  return swift_release();
}

uint64_t sub_23C875744(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_23C875754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return 0;
}

uint64_t sub_23C87576C()
{
  return swift_bridgeObjectRetain();
}

void sub_23C875774(__n128 *a1)
{
  sub_23C8738C4(a1);
}

uint64_t sub_23C87577C()
{
  unint64_t v0;
  uint64_t v1;

  sub_23C7E56A4(v1, v0, 3);
  return sub_23C910950();
}

uint64_t sub_23C875798()
{
  uint64_t v0;

  return sub_23C7E5640(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 36));
}

uint64_t sub_23C8757A4()
{
  return sub_23C910F14();
}

uint64_t sub_23C8757B0()
{
  return swift_retain();
}

uint64_t sub_23C8757BC()
{
  return sub_23C911BBC();
}

void sub_23C8757D8()
{
  unint64_t v0;

  STACK[0x618] = v0;
}

uint64_t sub_23C8757E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  return static SQLExpression.AssociativeBinaryOperator.== infix(_:_:)((uint64_t)&a57, (uint64_t)&a36);
}

void sub_23C8757F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,__n128 a57)
{
  sub_23C8738C4(&a57);
}

void *sub_23C8757F8(uint64_t *a1)
{
  void *v1;
  _QWORD *v2;

  return sub_23C87019C(a1, v2, v1);
}

uint64_t sub_23C875804()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C875818()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C875820(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return sub_23C849130(a1, a2, a3, a4);
}

uint64_t sub_23C87582C()
{
  return sub_23C871AF4();
}

uint64_t sub_23C875834()
{
  return sub_23C880978();
}

void *sub_23C87583C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  return sub_23C800B48(&a51, &a72);
}

void sub_23C875848()
{
  __n128 *v0;

  sub_23C874D7C(v0 + 15);
}

void sub_23C875850()
{
  __n128 *v0;

  sub_23C874D7C(v0 + 15);
}

void *sub_23C87585C()
{
  return sub_23C800B48(&STACK[0x350], &STACK[0x3F8]);
}

void sub_23C875868()
{
  sub_23C8738C4((__n128 *)&STACK[0x350]);
}

uint64_t sub_23C875870()
{
  return sub_23C871AF4();
}

uint64_t sub_23C87588C()
{
  uint64_t v0;

  return v0 + 584;
}

uint64_t sub_23C875898()
{
  uint64_t v0;

  return static SQLExpression.AssociativeBinaryOperator.== infix(_:_:)(v0 + 752, v0 + 584);
}

void sub_23C8758A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7F1E94(a1, a2, 1, v2);
}

void sub_23C8758B0(__n128 *a1)
{
  sub_23C8738C4(a1);
}

uint64_t sub_23C8758B8()
{
  return swift_release();
}

uint64_t sub_23C8758C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 800) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8758D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  return a40;
}

uint64_t sub_23C8758DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unint64_t a44)
{
  uint64_t v44;

  sub_23C7E5640(a40, a44, 1);
  return v44;
}

void *sub_23C875900()
{
  return sub_23C800B48(&STACK[0x210], &STACK[0x2B8]);
}

void NSDecimal.databaseValue.getter(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  __int16 v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  int v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  v25 = a4;
  v7 = HIDWORD(a1);
  v8 = HIWORD(a1);
  v9 = a2 >> 16;
  v10 = HIDWORD(a2);
  v23 = HIWORD(a2);
  v24 = HIWORD(a3);
  v11 = sub_23C7E91C0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(MEMORY[0x24BDD1518]);
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v5;
  v30 = v9;
  v31 = v10;
  v32 = v23;
  v33 = v4;
  v34 = v24;
  v16 = objc_msgSend(v15, sel_initWithDecimal_, &v26);
  sub_23C910BB4();
  v17 = (void *)sub_23C910BC0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v18 = objc_msgSend(v16, sel_descriptionWithLocale_, v17);

  v19 = sub_23C910E78();
  v21 = v20;

  v22 = v25;
  *v25 = v19;
  v22[1] = v21;
  *((_BYTE *)v22 + 16) = 2;
}

void static NSDecimal.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_23C7E79A8(&qword_25430B218);
  MEMORY[0x24BDAC7A8](v3);
  sub_23C7E8448();
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    sub_23C9114D8();
    goto LABEL_6;
  }
  if (v4 == 2)
  {
    if (qword_256BCBA58 != -1)
      swift_once();
    v5 = sub_23C7E91C0();
    v6 = sub_23C805EE8(v5, (uint64_t)qword_256BCCB00);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v6, v5);
    sub_23C7DE70C(v1, 0, 1, v5);
    sub_23C9114C0();
    sub_23C7E8A50();
    sub_23C876030(v1);
  }
  else if (v4 == 1)
  {
    MEMORY[0x2426250F8](*(double *)a1);
LABEL_6:
    sub_23C7E8A50();
  }
  sub_23C7DF5B4();
}

void sub_23C875BD8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  NSDecimal.databaseValue.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16), a1);
}

void sub_23C875BE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  static NSDecimal.fromDatabaseValue(_:)(a1);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 20) = v6 & 1;
}

void __swiftcall NSDecimal.init(sqliteStatement:index:)(NSDecimal_optional *__return_ptr retstr, Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  uint64_t v3;
  uint64_t v4;
  sqlite3_stmt *v5;
  int v6;
  int v7;
  sqlite3_stmt *v8;
  int v9;
  sqlite3_stmt *v10;
  int v11;
  double v12;
  sqlite3_stmt *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_23C7E79A8(&qword_25430B218);
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7E8448();
  v5 = (sqlite3_stmt *)sub_23C7E076C();
  v7 = sqlite3_column_type(v5, v6);
  if (v7 != 3)
  {
    if (v7 == 2)
    {
      v10 = (sqlite3_stmt *)sub_23C7E076C();
      v12 = sqlite3_column_double(v10, v11);
      MEMORY[0x2426250F8](v12);
    }
    else
    {
      if (v7 != 1)
      {
LABEL_11:
        sub_23C7DF5B4();
        return;
      }
      v8 = (sqlite3_stmt *)sub_23C7E076C();
      sqlite3_column_int64(v8, v9);
      sub_23C9114D8();
    }
    sub_23C7E8A50();
    goto LABEL_11;
  }
  v13 = (sqlite3_stmt *)sub_23C7E076C();
  if (sqlite3_column_text(v13, v14))
  {
    sub_23C910F80();
    if (qword_256BCBA58 != -1)
      swift_once();
    v15 = sub_23C7E91C0();
    v16 = sub_23C805EE8(v15, (uint64_t)qword_256BCCB00);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v3, v16, v15);
    sub_23C7DE70C(v3, 0, 1, v15);
    sub_23C9114C0();
    sub_23C7E8A50();
    swift_bridgeObjectRelease();
    sub_23C876030(v3);
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t _posixLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_256BCBA58 != -1)
    swift_once();
  v2 = sub_23C7E91C0();
  v3 = sub_23C805EE8(v2, (uint64_t)qword_256BCCB00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_23C875E0C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_23C7E79A8(&qword_25430B218);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sqlite3_column_type(a1, a2);
  if ((_DWORD)result != 3)
  {
    if ((_DWORD)result == 2)
    {
      v12 = sqlite3_column_double(a1, a2);
      result = MEMORY[0x2426250F8](v12);
    }
    else
    {
      if ((_DWORD)result != 1)
      {
        v13 = 0;
        v14 = 0;
        LODWORD(v15) = 0;
        v16 = 1;
        goto LABEL_14;
      }
      sqlite3_column_int64(a1, a2);
      result = sub_23C9114D8();
    }
    v13 = result;
    v14 = v10;
    LODWORD(v15) = v11;
    goto LABEL_7;
  }
  result = (uint64_t)sqlite3_column_text(a1, a2);
  if (result)
  {
    sub_23C910F80();
    if (qword_256BCBA58 != -1)
      swift_once();
    v17 = sub_23C910BCC();
    v18 = sub_23C805EE8(v17, (uint64_t)qword_256BCCB00);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, v18, v17);
    v16 = 1;
    sub_23C7DE70C((uint64_t)v8, 0, 1, v17);
    v13 = sub_23C9114C0();
    v14 = v19;
    v15 = v20;
    swift_bridgeObjectRelease();
    result = sub_23C876030((uint64_t)v8);
    if ((v15 & 0x100000000) != 0)
    {
      v13 = 0;
      v14 = 0;
      LODWORD(v15) = 0;
      goto LABEL_14;
    }
LABEL_7:
    v16 = 0;
LABEL_14:
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 20) = v16;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C875FCC()
{
  uint64_t v0;

  v0 = sub_23C910BCC();
  sub_23C805F48(v0, qword_256BCCB00);
  sub_23C805EE8(v0, (uint64_t)qword_256BCCB00);
  return sub_23C910BB4();
}

uint64_t sub_23C876030(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_25430B218);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C876070(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_23C876094(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_23C7FCAFC);
}

uint64_t sub_23C87607C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_23C876094(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_23C7FCCA4);
}

uint64_t sub_23C876088(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_23C876094(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_23C7FD27C);
}

uint64_t sub_23C876094(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  sub_23C911A84();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    sub_23C7E4320();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v10 = a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    sub_23C7E4320();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  sub_23C7E4320();
  return v10;
}

void Database.makeTokenizer(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, unint64_t, _QWORD *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = *a1;
  v4 = sub_23C82F3EC(v2);
  v5 = swift_slowAlloc();
  v6 = swift_slowAlloc();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v4 + 16);
  if (!v7)
    goto LABEL_8;
  if (!*(_QWORD *)(v3 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = (uint64_t *)v6;
  v9 = sub_23C910EFC();
  v10 = v7(v4, v9 + 32, v8, v5);
  swift_release();
  if (!v10)
  {
    v26 = *v8;
    v15 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD *))v5;
    v16 = *(_QWORD *)(v5 + 8);
    v17 = *(_QWORD *)(v5 + 16);
    v18 = sub_23C876450(1, v3);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRetain();
    v25 = sub_23C876094(v18, v20, v22, v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_23C7FCE5C);
    _s23FTS5RegisteredTokenizerCMa();
    swift_allocObject();
    sub_23C876A70(v15, v16, v17, v26, v25);
    sub_23C7E8460();
  }
  sub_23C7EF5D4();
  swift_allocError();
  v12 = v11;
  if (sqlite3_errstr(v10))
  {
    v13 = sub_23C910F74();
    *(_DWORD *)v12 = v10;
    *(_QWORD *)(v12 + 8) = v13;
    *(_QWORD *)(v12 + 16) = v14;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_BYTE *)(v12 + 56) = 0;
    swift_willThrow();
    sub_23C7E8460();
  }
LABEL_9:
  __break(1u);
}

uint64_t FTS5Tokenizer.tokenize(query:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7E8A5C(a1, a2, a3, a4, 1);
}

unint64_t sub_23C876390(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v4 = sub_23C911010();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t _s23FTS5RegisteredTokenizerCMa()
{
  return objc_opt_self();
}

uint64_t sub_23C876450(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t FTS5Tokenization.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t FTS5Tokenization.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static FTS5Tokenization.query.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static FTS5Tokenization.prefix.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static FTS5Tokenization.document.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

void static FTS5Tokenization.aux.getter(_DWORD *a1@<X8>)
{
  sub_23C7E8270(a1);
}

uint64_t sub_23C8764B4@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return FTS5Tokenization.init(rawValue:)(*a1, a2);
}

uint64_t sub_23C8764C0(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF188(*a1, *v1);
}

uint64_t sub_23C8764CC(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF1A4(*a1, *v1);
}

uint64_t sub_23C8764D8(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8A7BD4(*a1, *v1);
}

uint64_t sub_23C8764E4(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF1AC(*a1, *v1);
}

uint64_t sub_23C8764F0(uint64_t a1, unsigned int *a2)
{
  return sub_23C8A7BB4(a1, *a2);
}

uint64_t sub_23C8764F8(unsigned int *a1)
{
  return sub_23C8E8584(*a1);
}

uint64_t sub_23C876500(unsigned int *a1)
{
  return sub_23C8E85CC(*a1);
}

uint64_t sub_23C876508(unsigned int *a1)
{
  return sub_23C8A7BC4(*a1);
}

uint64_t sub_23C876510(unsigned int *a1)
{
  return sub_23C8A7BBC(*a1);
}

uint64_t sub_23C876518(unsigned int *a1)
{
  return sub_23C8EF184(*a1);
}

uint64_t sub_23C876520(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF1C4(*a1, *v1);
}

uint64_t sub_23C87652C(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF194(*a1, *v1);
}

uint64_t sub_23C876538(unsigned int *a1)
{
  unsigned int *v1;

  return sub_23C8EF19C(*a1, *v1);
}

BOOL sub_23C876544()
{
  int *v0;

  return sub_23C8E8688(*v0);
}

uint64_t sub_23C87654C()
{
  return sub_23C911568();
}

uint64_t sub_23C876564(unsigned int *a1)
{
  return sub_23C8EF160(*a1);
}

uint64_t sub_23C87656C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = FTS5Tokenization.init(rawValue:)(*a1, (_DWORD *)a2);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_23C876594@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = FTS5Tokenization.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23C8765BC()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FTS5Tokenizer.tokenize(document:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7E8A5C(a1, a2, a3, a4, 4);
}

uint64_t sub_23C876608(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v16[4];
  uint64_t v17;
  int v18;

  v7 = v6;
  v12 = *a3;
  swift_bridgeObjectRetain();
  v13 = sub_23C8C6BBC(a1, a2);
  swift_bridgeObjectRelease();
  v16[2] = a4;
  v16[3] = a5;
  v17 = v5;
  v18 = v12;
  v14 = sub_23C876A34((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, _QWORD))sub_23C877278, (uint64_t)v16, v13);
  swift_release();
  if (!v7)
  {
    a5 = sub_23C8431E4((uint64_t)v14);
    swift_bridgeObjectRelease();
  }
  return a5;
}

uint64_t sub_23C8766CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    *a7 = MEMORY[0x24BEE4AF8];
    return result;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (a2 > 0x7FFFFFFF)
    goto LABEL_9;
  v14 = result;
  type metadata accessor for TokenizeContext();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = MEMORY[0x24BEE4AF8];
  v18[0] = v15;
  sub_23C876804((uint64_t)v18, a3, a4, v14, a2, a5, a6, &v17);
  if (v7)
    return swift_release();
  v16 = *(_QWORD *)(v18[0] + 16);
  swift_bridgeObjectRetain();
  result = swift_release();
  *a7 = v16;
  return result;
}

uint64_t sub_23C876804(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v16 = a3;
  result = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t (*)()))(a7 + 8))(a1, &v16, a4, a5, sub_23C876A30);
  if ((_DWORD)result)
  {
    v10 = result;
    sub_23C7EF5D4();
    v11 = swift_allocError();
    v13 = v12;
    result = (uint64_t)sqlite3_errstr(v10);
    if (result)
    {
      v14 = sub_23C910F74();
      *(_DWORD *)v13 = v10;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(v13 + 16) = v15;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_BYTE *)(v13 + 56) = 0;
      result = swift_willThrow();
      *a8 = v11;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_23C8768C8(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v8 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_23C910AA0();
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 1;
  if (a3)
  {
    (*(void (**)(char *, _QWORD))(v10 + 104))(v12, *MEMORY[0x24BDCDB98]);
    v13 = MEMORY[0x2426246D8](a3, a4, v12);
    v15 = v14;
    sub_23C910EA8();
    v16 = sub_23C910E90();
    v18 = v17;
    sub_23C7EEE1C(v13, v15);
    if (v18)
    {
      v19 = *a1;
      swift_retain();
      sub_23C7F138C();
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 16);
      sub_23C7F15B8();
      v21 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)(v21 + 16) = v20 + 1;
      v22 = v21 + 24 * v20;
      *(_QWORD *)(v22 + 32) = v16;
      *(_QWORD *)(v22 + 40) = v18;
      *(_DWORD *)(v22 + 48) = a2;
      swift_release();
    }
  }
  return 0;
}

_QWORD *sub_23C876A34(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5, a3 + 32, *(_QWORD *)(a3 + 16));
  if (!v3)
    return (_QWORD *)v5;
  return result;
}

_QWORD *sub_23C876A70(uint64_t (*a1)(uint64_t, uint64_t, unint64_t, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[13];
  uint64_t v26;
  _QWORD v27[2];

  v6 = v5;
  v27[1] = *MEMORY[0x24BDAC8D0];
  v8 = *v5;
  if (!a1)
  {
    swift_bridgeObjectRelease();
    sub_23C7EF5D4();
    swift_allocError();
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0xD00000000000001ALL;
    *(_QWORD *)(v16 + 16) = 0x800000023C91E160;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_BYTE *)(v16 + 56) = 0;
LABEL_15:
    swift_willThrow();
    swift_deallocPartialClassInstance();
    return v6;
  }
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v27[0] = 0;
  v11 = *(_QWORD *)(a5 + 16);
  if (v11)
  {
    v25[12] = v8;
    v26 = MEMORY[0x24BEE4AF8];
    sub_23C7FDA74(0, v11, 0);
    v13 = MEMORY[0x24BDAC7A8](v12);
    v25[8] = a1;
    v25[9] = a4;
    v25[10] = v27;
    v14 = *(_QWORD *)(v26 + 16);
    if (v14 == v11)
    {
      if (!(v11 >> 31))
      {
        swift_retain();
        v15 = a1(a4, v26 + 32, v11, v27);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_12;
      }
      __break(1u);
    }
    else if (v14 < *(_QWORD *)(a5 + 16))
    {
      v17 = a5 + 16 * v14;
      v18 = *(_QWORD *)(v17 + 32);
      v19 = *(_QWORD *)(v17 + 40);
      MEMORY[0x24BDAC7A8](v13);
      v25[2] = &v26;
      v25[3] = a5;
      v25[4] = sub_23C877298;
      v25[5] = v20;
      swift_bridgeObjectRetain();
      v15 = sub_23C877088((uint64_t)sub_23C8772CC, (uint64_t)v25, v18, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_12:
      swift_release();
      if (v15)
        goto LABEL_13;
      goto LABEL_8;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  v15 = a1(a4, 0, 0, v27);
  if (v15)
  {
LABEL_13:
    sub_23C7EF5D4();
    swift_allocError();
    *(_DWORD *)v21 = v15;
    v22 = 0xD00000000000001DLL;
    v23 = 0x800000023C91E180;
LABEL_14:
    *(_QWORD *)(v21 + 8) = v22;
    *(_QWORD *)(v21 + 16) = v23;
    *(_OWORD *)(v21 + 24) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_BYTE *)(v21 + 56) = 0;
    goto LABEL_15;
  }
LABEL_8:
  if (!v27[0])
  {
    sub_23C7EF5D4();
    swift_allocError();
    *(_DWORD *)v21 = 0;
    v23 = 0xED000072657A696ELL;
    v22 = 0x656B6F74206C696ELL;
    goto LABEL_14;
  }
  v6[5] = v27[0];
  return v6;
}

unint64_t sub_23C876DA8()
{
  unint64_t result;

  result = qword_256BCCB18;
  if (!qword_256BCCB18)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5Tokenization, &type metadata for FTS5Tokenization);
    atomic_store(result, (unint64_t *)&qword_256BCCB18);
  }
  return result;
}

unint64_t sub_23C876DE8()
{
  unint64_t result;

  result = qword_256BCCB20;
  if (!qword_256BCCB20)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5Tokenization, &type metadata for FTS5Tokenization);
    atomic_store(result, (unint64_t *)&qword_256BCCB20);
  }
  return result;
}

unint64_t sub_23C876E28()
{
  unint64_t result;

  result = qword_256BCCB28;
  if (!qword_256BCCB28)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5Tokenization, &type metadata for FTS5Tokenization);
    atomic_store(result, (unint64_t *)&qword_256BCCB28);
  }
  return result;
}

unint64_t sub_23C876E68()
{
  unint64_t result;

  result = qword_256BCCB30;
  if (!qword_256BCCB30)
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS5Tokenization, &type metadata for FTS5Tokenization);
    atomic_store(result, (unint64_t *)&qword_256BCCB30);
  }
  return result;
}

ValueMetadata *type metadata accessor for FTS5Tokenization()
{
  return &type metadata for FTS5Tokenization;
}

uint64_t dispatch thunk of FTS5Tokenizer.tokenize(context:tokenization:pText:nText:tokenCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t type metadata accessor for TokenizeContext()
{
  return objc_opt_self();
}

_QWORD *sub_23C876EDC(_QWORD *result, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[7];
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = result[2];
  if (v6 == v7)
  {
    v8 = swift_retain();
    a3(&v16, v8);
    swift_release();
    return (_QWORD *)v16;
  }
  if (v6 < v7)
  {
    v10 = &result[2 * v6];
    v11 = v10[4];
    v12 = v10[5];
    v13 = MEMORY[0x24BDAC7A8](result);
    v15[2] = v14;
    v15[3] = v13;
    v15[4] = a3;
    v15[5] = a4;
    swift_bridgeObjectRetain();
    v9 = sub_23C877088((uint64_t)sub_23C877324, (uint64_t)v15, v11, v12);
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23C876FB8(uint64_t a1, uint64_t *a2, _QWORD *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;

  v10 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_23C7FDA74(0, *(_QWORD *)(v10 + 16) + 1, 1);
    v10 = *a2;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    sub_23C7FDA74(v12 > 1, v13 + 1, 1);
    v10 = *a2;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  *(_QWORD *)(v10 + 8 * v13 + 32) = a1;
  *a2 = v10;
  return sub_23C876EDC(a3, (uint64_t)a2, a4, a5);
}

_QWORD *sub_23C877088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v7)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[2];
  uint64_t v12;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = (_QWORD *)sub_23C911628();
    if (!v4)
      return (_QWORD *)HIDWORD(v12);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v11[0] = v5;
      v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      result = v7(&v12, v11);
      if (!v4)
        return (_QWORD *)v12;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v8 = sub_23C9116A0();
      }
      return sub_23C877228(v8, v9, (_QWORD *(*)(uint64_t *__return_ptr))sub_23C8772E8);
    }
  }
  return result;
}

uint64_t sub_23C877184@<X0>(uint64_t result@<X0>, uint64_t (*a2)(uint64_t, uint64_t, unint64_t)@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  unint64_t v5;

  v5 = *(_QWORD *)(result + 16);
  if (v5 >> 31)
  {
    __break(1u);
  }
  else
  {
    result = a2(a3, result + 32, v5);
    *a4 = result;
  }
  return result;
}

uint64_t sub_23C8771C8()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 24);
  if (v1)
    v1(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t sub_23C8771F4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v5 + 32);
  if (v6)
    return v6(*(_QWORD *)(v5 + 40), a1, *a2, a3, a4, a5);
  else
    return 1;
}

_QWORD *sub_23C877228(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  if (a1)
  {
    result = a3(&v5);
    if (!v3)
      return (_QWORD *)v5;
  }
  else
  {
    result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&v5 + 4), 0, 0);
    if (!v3)
      return (_QWORD *)HIDWORD(v5);
  }
  return result;
}

uint64_t sub_23C877278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_23C8766CC(a1, a2, *(_QWORD *)(v3 + 32), *(_DWORD *)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_23C877298@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23C877184(a1, *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

_QWORD *sub_23C8772A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, void (*a4)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  result = sub_23C876FB8(a1, a2, a3, a4, a5);
  if (!v6)
    *a6 = (_DWORD)result;
  return result;
}

_QWORD *sub_23C8772CC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23C8772A4(a1, *(uint64_t **)(v2 + 16), *(_QWORD **)(v2 + 24), *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

_QWORD *sub_23C8772E8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t sub_23C877324()
{
  return sub_23C8772CC();
}

GRDBInternal::PersistenceConflictPolicy __swiftcall PersistenceConflictPolicy.init(insert:update:)(GRDBInternal::Database::ConflictResolution insert, GRDBInternal::Database::ConflictResolution update)
{
  _BYTE *v2;
  char v3;
  GRDBInternal::PersistenceConflictPolicy result;

  v3 = *(_BYTE *)update;
  *v2 = *(_BYTE *)insert;
  v2[1] = v3;
  result.conflictResolutionForInsert = insert;
  return result;
}

uint64_t sub_23C87734C()
{
  uint64_t v0;

  sub_23C87E0F0();
  swift_allocObject();
  sub_23C87E318();
  sub_23C87B32C();
  return v0;
}

#error "23C877444: call analysis failed (funcsize=67)"

uint64_t sub_23C8774A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(unsigned __int8 *)(v0 + 72);
  if (*(_BYTE *)(v0 + 72))
  {
    if (v3 == 1)
      v4 = *(_OWORD **)(v0 + 56);
    else
      v4 = &unk_250D865D0;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v4 = (_OWORD *)swift_allocObject();
    v4[1] = xmmword_23C912A20;
    *((_QWORD *)v4 + 4) = v1;
    *((_QWORD *)v4 + 5) = v2;
  }
  v5 = sub_23C7DFDFC();
  sub_23C7F8E30(v5, v6, v3);
  v7 = sub_23C878224((void (*)(uint64_t *__return_ptr, _QWORD *))sub_23C87D9D0, v0, (uint64_t)v4);
  sub_23C7DB398();
  v8 = sub_23C828EB8(v7);
  v10 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  sub_23C7F9170();
  v11 = swift_allocError();
  *v12 = v10;
  v12[1] = v9;
  v12[2] = v8;
  sub_23C7DB3D4();
  return v11;
}

void sub_23C877590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  GRDBInternal::StatementArguments v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;

  sub_23C7DEF5C();
  v2 = v0;
  v4 = v3;
  v6 = *v5;
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(unsigned __int8 *)(v0 + 72);
  if (v9)
  {
    if (v9 == 1)
      v10 = (_OWORD *)v7;
    else
      v10 = &unk_250D86570;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v10 = (_OWORD *)sub_23C7DF3DC();
    v10[1] = xmmword_23C912A20;
    *((_QWORD *)v10 + 4) = v7;
    *((_QWORD *)v10 + 5) = v8;
  }
  sub_23C7F8E30(v7, v8, v9);
  v11 = v1;
  if (!*(_QWORD *)(sub_23C877F48((void (*)(__int128 *__return_ptr, _QWORD *))sub_23C87D938, v2, (uint64_t)v10)+ 16))
  {
LABEL_13:
    sub_23C7DB398();
    sub_23C7DB624();
LABEL_41:
    sub_23C7DEF28();
    return;
  }
  while (1)
  {
    sub_23C7E6AE4();
    v14 = v14 && v13 == 0;
    if (!v14)
      break;
    if (v12 == 1)
      goto LABEL_13;
  }
  v15 = *(_QWORD *)(v4 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  v66 = v2;
  v67 = v10;
  if (!v15)
  {
LABEL_24:
    sub_23C87E330();
    v32 = *(_QWORD *)(v2 + 24);
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      v69 = MEMORY[0x24BEE4AF8];
      sub_23C7DF858();
      sub_23C87E07C();
      v34 = v69;
      v35 = v32 + 40;
      do
      {
        v36 = sub_23C910E18();
        v38 = v37;
        sub_23C87E254();
        if (v39)
        {
          sub_23C7DBBE4();
          v34 = v69;
        }
        v35 += 16;
        *(_QWORD *)(v34 + 16) = v7;
        v40 = v34 + 16 * v6;
        *(_QWORD *)(v40 + 32) = v36;
        *(_QWORD *)(v40 + 40) = v38;
        --v33;
      }
      while (v33);
      sub_23C7DB624();
      v11 = v1;
      v10 = v67;
    }
    v41 = sub_23C87C704();
    sub_23C7DE934();
    v42 = *((_QWORD *)v10 + 2);
    v43 = MEMORY[0x24BEE4AF8];
    if (v42)
    {
      v69 = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v43 = v69;
      v44 = (char *)v10 + 40;
      do
      {
        v45 = sub_23C910E18();
        v47 = v46;
        sub_23C87E254();
        if (v39)
        {
          sub_23C7DBBE4();
          v43 = v69;
        }
        v44 += 16;
        *(_QWORD *)(v43 + 16) = v7;
        v48 = v43 + 16 * v6;
        *(_QWORD *)(v48 + 32) = v45;
        *(_QWORD *)(v48 + 40) = v47;
        --v42;
      }
      while (v42);
    }
    sub_23C87C82C(v43, v41);
    v50 = v49;
    sub_23C7DE934();
    v51 = *(_QWORD *)(v66 + 40);
    v52 = *(_QWORD *)(v66 + 48);
    Database.columns(in:)(v51, v52);
    if (v11)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = sub_23C877D80(v53);
      sub_23C7DE934();
      sub_23C878998(v54, v50);
      v56 = v55;
      if (*(_QWORD *)(v55 + 16))
      {
        v57 = v67;
      }
      else
      {
        sub_23C7E087C();
        v57 = v67;
        sub_23C7E0808();
        v56 = (uint64_t)v67;
      }
      sub_23C7DEF00();
      v58 = sub_23C877F48((void (*)(__int128 *__return_ptr, _QWORD *))sub_23C87D938, v66, v56);
      sub_23C7E087C();
      v70 = v51;
      v71 = v52;
      v72 = v56;
      v73 = v57;
      sub_23C7DB3B8();
      v59 = sub_23C87BA30();
      v61 = v60;
      sub_23C7DB398();
      sub_23C7E087C();
      sub_23C7DBCD0();
      sub_23C7DF68C(v59, v61);
      sub_23C7DB624();
      v69 = v58;
      sub_23C7EDA4C();
      MEMORY[0x24BDAC7A8](v62);
      sub_23C7E79A8(&qword_25430CF60);
      sub_23C7E1240((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
      swift_getKeyPath();
      swift_retain();
      sub_23C8C8974(v58);
      v64 = v63;
      sub_23C7DB624();
      sub_23C7DFA18();
      v69 = v64;
      v70 = MEMORY[0x24BEE4B00];
      v65.values._rawValue = &v69;
      Statement.setUncheckedArguments(_:)(v65);
      sub_23C7DB624();
      sub_23C7DB62C();
    }
    goto LABEL_41;
  }
  v69 = MEMORY[0x24BEE4AF8];
  sub_23C87E07C();
  v17 = sub_23C87DAD8(v4);
  v19 = v18;
  v68 = v4 + 56;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(_BYTE *)(v4 + 32))
  {
    if (((*(_QWORD *)(v68 + (((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_43;
    if (*(_DWORD *)(v4 + 36) != v19)
      goto LABEL_44;
    v7 = sub_23C910E18();
    v21 = v20;
    v69 = v16;
    v22 = v4;
    v23 = *(_QWORD *)(v16 + 16);
    v6 = v23 + 1;
    if (v23 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      sub_23C7DBBE4();
      v16 = v69;
    }
    *(_QWORD *)(v16 + 16) = v6;
    v24 = v16 + 16 * v23;
    *(_QWORD *)(v24 + 32) = v7;
    *(_QWORD *)(v24 + 40) = v21;
    v25 = sub_23C87E0FC();
    v17 = sub_23C87D9F0(v25, v26, v27, v22);
    v19 = v28;
    --v15;
    v4 = v22;
    if (!v15)
    {
      v29 = sub_23C87E0FC();
      sub_23C7F91AC(v29, v30, v31);
      v11 = v1;
      v2 = v66;
      v10 = v67;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void PersistableRecord.performSave(_:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_23C87E180();
  sub_23C87E2BC();
  v31 = *(_QWORD *)(v30 + 8);
  sub_23C87AA38();
  if (!v26)
  {
    if (v32)
    {
      sub_23C7EBCD8(v29, v28, v31);
      sub_23C7DBCD0();
    }
    else
    {
      sub_23C87E008(v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 24));
    }
  }
}

void MutablePersistableRecord.performDelete(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];

  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for DAO(0, v2, v3, v4);
  v5 = sub_23C87E27C();
  sub_23C87E178(v5, v6, v7);
  swift_retain();
  sub_23C87734C();
  if (!v1)
  {
    sub_23C87AD08();
    v9 = v8;
    sub_23C7DFA18();
    if (v9)
    {
      v13[0] = 0;
      v13[1] = 0;
      v11 = v13;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v10 - 1));
      if (!v12)
        Database.changesCount.getter();
      sub_23C7DFB3C();
    }
  }
  sub_23C7E4BEC();
}

uint64_t sub_23C877D3C()
{
  return MutablePersistableRecord.exists(_:)() & 1;
}

uint64_t MutablePersistableRecord.exists(_:)()
{
  char v0;

  MutablePersistableRecord.performExists(_:)();
  return v0 & 1;
}

uint64_t sub_23C877D6C(uint64_t a1)
{
  return sub_23C877D80(a1);
}

uint64_t sub_23C877D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      sub_23C7E0808();
      if (v8 >= v7 >> 1)
        sub_23C7DBBE4();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_23C877E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;

  sub_23C87E180();
  a25 = v26;
  a26 = v28;
  v30 = v29;
  v31 = *(_QWORD *)(v27 + 16);
  if (v31)
  {
    v32 = v27;
    sub_23C87E118();
    sub_23C7FD554();
    v33 = a16;
    v34 = v32 + 40;
    while (*(_QWORD *)(v30 + 16))
    {
      sub_23C7DB3B8();
      v35 = sub_23C7E94B8();
      if ((v36 & 1) == 0)
        goto LABEL_10;
      sub_23C7F91B8(*(_QWORD *)(v30 + 56) + 40 * v35, (uint64_t)&a10);
      sub_23C7DBCD0();
      a16 = v33;
      v37 = *(_QWORD *)(v33 + 16);
      if (v37 >= *(_QWORD *)(v33 + 24) >> 1)
      {
        sub_23C7FD554();
        v33 = a16;
      }
      *(_QWORD *)(v33 + 16) = v37 + 1;
      sub_23C7F926C((uint64_t)&a10, v33 + 40 * v37 + 32);
      v34 += 16;
      if (!--v31)
        goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    sub_23C7DB398();
    sub_23C7DB62C();
    sub_23C87E05C();
    sub_23C7E1B4C();
  }
}

uint64_t sub_23C877F48(void (*a1)(__int128 *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_23C7E56C8();
    v6 = v20;
    v9 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v10 = *v9;
      v17[0] = *(v9 - 1);
      v17[1] = v10;
      swift_bridgeObjectRetain();
      a1(&v18, v17);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v11 = v18;
      v12 = v19;
      v20 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      if (v13 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        v16 = v18;
        sub_23C7E56C8();
        v11 = v16;
        v6 = v20;
      }
      v9 += 2;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v11;
      *(_BYTE *)(v14 + 48) = v12;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_23C878080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_23C7DEA6C();
    sub_23C7FD314();
    v7 = v26;
    v8 = (uint64_t *)(a1 + 40);
    v18 = a3;
    v19 = a2;
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      *(_QWORD *)&v21 = a2;
      *((_QWORD *)&v21 + 1) = a3;
      sub_23C8652D4();
      sub_23C7E0808();
      sub_23C7DB3B8();
      sub_23C87E0FC();
      sub_23C821964(v11);
      sub_23C7DBCD0();
      sub_23C7DB398();
      v12 = v24;
      if (v24)
      {
        v13 = v25;
        sub_23C7E7E34(v23, v24);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v13 + 24))(&v21, v12, v13);
        v20 = v21;
        v14 = v22;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v23);
        sub_23C7DC514();
      }
      else
      {
        sub_23C7E7900((uint64_t)v23, (uint64_t *)&unk_25430D6B8);
        sub_23C7DC514();
        v20 = 0u;
        v14 = 4;
      }
      v26 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      if (v15 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_23C7FD314();
        v7 = v26;
      }
      v8 += 2;
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 40 * v15;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = v10;
      *(_OWORD *)(v16 + 48) = v20;
      *(_BYTE *)(v16 + 64) = v14;
      --v5;
      a3 = v18;
      a2 = v19;
    }
    while (v5);
    sub_23C7DBCD0();
    sub_23C7DB398();
  }
  else
  {
    sub_23C7DBCD0();
    sub_23C7DB398();
    return MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t sub_23C878224(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v25 = MEMORY[0x24BEE4AF8];
    sub_23C7FD314();
    v6 = v25;
    v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v9 = *v8;
      v20[0] = *(v8 - 1);
      v20[1] = v9;
      swift_bridgeObjectRetain();
      a1(&v21, v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v11 = v21;
      v10 = v22;
      v12 = v23;
      v13 = v24;
      v25 = v6;
      v14 = *(_QWORD *)(v6 + 16);
      if (v14 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        v18 = v23;
        v16 = v22;
        sub_23C7FD314();
        v10 = v16;
        v12 = v18;
        v6 = v25;
      }
      v8 += 2;
      *(_QWORD *)(v6 + 16) = v14 + 1;
      v15 = v6 + 40 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      *(_OWORD *)(v15 + 48) = v12;
      *(_BYTE *)(v15 + 64) = v13;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_23C878368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    sub_23C7DEA6C();
    sub_23C7FD9D8();
    v6 = a3 + 56;
    while (1)
    {
      sub_23C7DB3B8();
      v7 = sub_23C7DEF00();
      sub_23C87E1BC(v7, v8, v9, v10);
      if (v3)
        break;
      sub_23C7E087C();
      sub_23C7DBCD0();
      sub_23C87E394();
      if (v12)
      {
        v14 = v11;
        sub_23C7FD9D8();
        v11 = v14;
      }
      v6 += 32;
      sub_23C87E234(v11);
      *(_QWORD *)(v13 + 48) = v15;
      if (!--v4)
        goto LABEL_9;
    }
    sub_23C7DF8F8();
    sub_23C7E087C();
    sub_23C7DBCD0();
  }
LABEL_9:
  sub_23C87E05C();
  sub_23C7E1170();
}

void sub_23C878458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v5)
    {
LABEL_16:
      sub_23C7DF620();
      return;
    }
    v13 = MEMORY[0x24BEE4AF8];
    sub_23C7E56C8();
    if (v5 < 0)
      break;
    v6 = 0;
    while (v5 != v6)
    {
      if ((a3 & 0xC000000000000001) != 0)
        MEMORY[0x242625290](v6, a3);
      else
        swift_retain();
      sub_23C87E310();
      if (v3)
      {
        sub_23C7E6BFC();
        swift_release();
        goto LABEL_16;
      }
      swift_release();
      v7 = v11;
      v8 = *(_QWORD *)(v13 + 16);
      if (v8 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        sub_23C7DBC04();
        v7 = v10;
      }
      ++v6;
      *(_QWORD *)(v13 + 16) = v8 + 1;
      v9 = v13 + 24 * v8;
      *(_OWORD *)(v9 + 32) = v7;
      *(_BYTE *)(v9 + 48) = v12;
      if (v5 == v6)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v3 = a3;
    else
      v3 = a3 & 0xFFFFFFFFFFFFFF8;
    sub_23C7E0808();
    v5 = sub_23C9117C0();
    sub_23C7DB398();
  }
  __break(1u);
}

uint64_t sub_23C8785D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_23C7FDA40();
    v6 = a3 + 56;
    while (1)
    {
      sub_23C7DB3B8();
      sub_23C7DEF00();
      sub_23C87E310();
      if (v3)
        break;
      sub_23C7E087C();
      sub_23C7DBCD0();
      v7 = *(_QWORD *)(v12 + 16);
      if (v7 >= *(_QWORD *)(v12 + 24) >> 1)
        sub_23C7FDA40();
      v6 += 32;
      *(_QWORD *)(v12 + 16) = v7 + 1;
      v8 = v12 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v10;
      *(_QWORD *)(v8 + 40) = v11;
      if (!--v4)
        return sub_23C87E05C();
    }
    sub_23C7DF8F8();
    sub_23C7E087C();
    sub_23C7DBCD0();
  }
  return sub_23C87E05C();
}

void sub_23C8786EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void (*v25)(__int128 *__return_ptr);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  unint64_t v34;
  uint64_t v35;

  sub_23C87E180();
  a23 = v26;
  a24 = v27;
  v28 = v24;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    sub_23C87E0F0();
    sub_23C87E118();
    sub_23C7E56C8();
    v31 = a14;
    while (1)
    {
      v25(&a10);
      if (v28)
        break;
      v28 = 0;
      v32 = a10;
      v33 = a11;
      a14 = v31;
      v34 = *(_QWORD *)(v31 + 16);
      if (v34 >= *(_QWORD *)(v31 + 24) >> 1)
      {
        sub_23C7DBC04();
        v32 = a9;
        v31 = a14;
      }
      *(_QWORD *)(v31 + 16) = v34 + 1;
      v35 = v31 + 24 * v34;
      *(_OWORD *)(v35 + 32) = v32;
      *(_BYTE *)(v35 + 48) = v33;
      if (!--v30)
        goto LABEL_9;
    }
    sub_23C7DF8F8();
  }
LABEL_9:
  sub_23C87E05C();
  sub_23C7E1B4C();
}

void sub_23C8787AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_23C7DEA6C();
    sub_23C7FDAD4();
    v6 = a3 + 56;
    while (1)
    {
      sub_23C7DB3B8();
      sub_23C7DEF00();
      sub_23C87E310();
      if (v3)
        break;
      sub_23C7E087C();
      sub_23C7DBCD0();
      v7 = v13;
      v8 = *(_QWORD *)(v14 + 16);
      if (v8 >= *(_QWORD *)(v14 + 24) >> 1)
      {
        sub_23C7FDAD4();
        v7 = v13;
      }
      v6 += 32;
      *(_QWORD *)(v14 + 16) = v8 + 1;
      v9 = (_QWORD *)(v14 + 32 * v8);
      v9[4] = v10;
      v9[5] = v11;
      v9[6] = v12;
      v9[7] = v7;
      if (!--v4)
        goto LABEL_9;
    }
    sub_23C7DF8F8();
    sub_23C7E087C();
    sub_23C7DBCD0();
  }
LABEL_9:
  sub_23C87E05C();
  sub_23C7E1170();
}

void sub_23C8788B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  char v15;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    sub_23C7DEA6C();
    sub_23C7E56C8();
    v6 = a3 + 40;
    while (1)
    {
      sub_23C7DB3B8();
      v7 = sub_23C7DEF00();
      sub_23C87E1BC(v7, v8, v9, v10);
      if (v3)
        break;
      sub_23C7E087C();
      sub_23C7DBCD0();
      sub_23C87E394();
      if (v12)
      {
        sub_23C7DBC04();
        v11 = v14;
      }
      sub_23C87E234(v11);
      *(_BYTE *)(v13 + 48) = v15;
      v6 += 16;
      if (!--v4)
        goto LABEL_9;
    }
    sub_23C7DF8F8();
    sub_23C7E087C();
    sub_23C7DBCD0();
  }
LABEL_9:
  sub_23C87E05C();
  sub_23C7DF620();
}

void sub_23C878998(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = a1 + 40;
    v6 = MEMORY[0x24BEE4AF8];
    v18 = a1 + 40;
    do
    {
      v19 = v6;
      v7 = (uint64_t *)(v5 + 16 * v4);
      v8 = v4;
      while (1)
      {
        if (v8 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v10 = *(v7 - 1);
        v9 = *v7;
        v4 = v8 + 1;
        v11 = sub_23C910E18();
        v13 = v12;
        sub_23C7DBBB0();
        sub_23C868438(v11, v13, a2);
        v15 = v14;
        sub_23C7DBCD0();
        if ((v15 & 1) != 0)
          break;
        sub_23C7DB3DC();
        v7 += 2;
        ++v8;
        if (v3 == v4)
          goto LABEL_13;
      }
      v6 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7DBBE4();
        v6 = v19;
      }
      v16 = *(_QWORD *)(v6 + 16);
      if (v16 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        sub_23C7DBBE4();
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v10;
      *(_QWORD *)(v17 + 40) = v9;
      v5 = v18;
    }
    while (v3 - 1 != v8);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  sub_23C7DB62C();
  sub_23C7E1B4C();
}

void sub_23C878AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  if (a1 != a2)
  {
    v3 = a1;
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    {
      v34 = a1 + 64;
      sub_23C87E024();
      v7 = v6 & v5;
      v35 = (unint64_t)(v8 + 63) >> 6;
      v36 = v3;
      while (1)
      {
        if (v7)
        {
          v37 = (v7 - 1) & v7;
          v38 = v4;
          v9 = __clz(__rbit64(v7)) | (v4 << 6);
        }
        else
        {
          v10 = v4 + 1;
          if (__OFADD__(v4, 1))
            goto LABEL_56;
          if (v10 >= v35)
            return;
          v11 = *(_QWORD *)(v34 + 8 * v10);
          v12 = v4 + 1;
          if (!v11)
          {
            v12 = v4 + 2;
            if (v4 + 2 >= v35)
              return;
            v11 = *(_QWORD *)(v34 + 8 * v12);
            if (!v11)
            {
              v12 = v4 + 3;
              if (v4 + 3 >= v35)
                return;
              v11 = *(_QWORD *)(v34 + 8 * v12);
              if (!v11)
              {
                v13 = v4 + 4;
                if (v4 + 4 >= v35)
                  return;
                v11 = *(_QWORD *)(v34 + 8 * v13);
                if (!v11)
                {
                  while (1)
                  {
                    v12 = v13 + 1;
                    if (__OFADD__(v13, 1))
                      goto LABEL_57;
                    if (v12 >= v35)
                      return;
                    v11 = *(_QWORD *)(v34 + 8 * v12);
                    ++v13;
                    if (v11)
                      goto LABEL_19;
                  }
                }
                v12 = v4 + 4;
              }
            }
          }
LABEL_19:
          v37 = (v11 - 1) & v11;
          v38 = v12;
          v9 = __clz(__rbit64(v11)) + (v12 << 6);
        }
        v14 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 24 * v9);
        v15 = *v14;
        v16 = (_QWORD *)v14[1];
        v17 = v14[2];
        sub_23C7DC46C();
        sub_23C7DBCC8();
        sub_23C7E0808();
        sub_23C7DBBB8();
        sub_23C7EE074();
        v18 = sub_23C7E94B8();
        v20 = v19;
        sub_23C7DC474();
        if ((v20 & 1) == 0)
          goto LABEL_52;
        v39 = v17;
        v21 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 24 * v18);
        v22 = (_QWORD *)v21[1];
        v23 = v21[2];
        if (*v21)
        {
          if (!v15)
          {
            sub_23C87E22C();
            goto LABEL_53;
          }
          sub_23C7DB3B8();
          sub_23C7E0808();
          sub_23C7DC46C();
          v24 = sub_23C7DBBB0();
          v25 = sub_23C84839C(v24, v15);
          sub_23C7E072C();
          if ((v25 & 1) == 0)
          {
            sub_23C87E22C();
            sub_23C7DB62C();
            sub_23C7E072C();
            sub_23C7DB398();
            sub_23C7DBCD0();
LABEL_53:
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          if (v15)
          {
LABEL_52:
            swift_bridgeObjectRelease();
            sub_23C7DB62C();
            goto LABEL_53;
          }
          sub_23C7DB3B8();
          sub_23C7E0808();
        }
        v26 = v22[2];
        if (v26 != v16[2])
          goto LABEL_49;
        if (v26 && v22 != v16)
        {
          v28 = v22[4] == v16[4] && v22[5] == v16[5];
          if (!v28 && (sub_23C7E16E8() & 1) == 0)
          {
LABEL_49:
            sub_23C7DBCD0();
            sub_23C7DB3DC();
            sub_23C87E22C();
            sub_23C7DB62C();
            sub_23C7E072C();
            goto LABEL_53;
          }
          if (v26 != 1)
            break;
        }
LABEL_46:
        v33 = sub_23C878AF8(v23, v39);
        sub_23C7DB624();
        sub_23C7DB62C();
        sub_23C7E072C();
        sub_23C7DB398();
        sub_23C7DBCD0();
        sub_23C7DB3DC();
        v3 = v36;
        v7 = v37;
        v4 = v38;
        if ((v33 & 1) == 0)
          return;
      }
      v29 = v16 + 7;
      v30 = v22 + 7;
      v31 = 1;
      while (v31 < v26)
      {
        v32 = *(v30 - 1) == *(v29 - 1) && *v30 == *v29;
        if (!v32 && (sub_23C7E16E8() & 1) == 0)
          goto LABEL_49;
        ++v31;
        v29 += 2;
        v30 += 2;
        if (v26 == v31)
          goto LABEL_46;
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
    }
  }
}

uint64_t sub_23C878E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v25;
  int64_t v26;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v25 = a1 + 64;
    sub_23C87E024();
    v26 = (unint64_t)(v6 + 63) >> 6;
    if ((v5 & v4) != 0)
    {
      sub_23C87E2D0();
      v11 = v9 | (v10 << 6);
LABEL_18:
      v17 = *(_QWORD *)(v7 + 56) + v11 * v8;
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(_BYTE *)(v17 + 16);
      sub_23C7DBBB0();
      sub_23C7E56A4(v18, v19, v20);
      v21 = sub_23C7E94B8();
      v23 = v22;
      sub_23C7DB3DC();
      if ((v23 & 1) != 0)
        __asm { BR              X9 }
      sub_23C7E5640(v18, v19, v20);
      return 0;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v12 < v26)
    {
      if (*(_QWORD *)(v25 + 8 * v12))
        goto LABEL_17;
      if (v3 + 2 < v26)
      {
        if (*(_QWORD *)(v25 + 8 * (v3 + 2)))
          goto LABEL_17;
        if (v3 + 3 < v26)
        {
          if (*(_QWORD *)(v25 + 8 * (v3 + 3)))
            goto LABEL_17;
          v13 = v3 + 4;
          if (v3 + 4 < v26)
          {
            if (!*(_QWORD *)(v25 + 8 * v13))
            {
              while (1)
              {
                v14 = v13 + 1;
                if (__OFADD__(v13, 1))
                  break;
                if (v14 >= v26)
                  return 1;
                ++v13;
                if (*(_QWORD *)(v25 + 8 * v14))
                  goto LABEL_17;
              }
LABEL_24:
              __break(1u);
              JUMPOUT(0x23C8798C0);
            }
LABEL_17:
            sub_23C87E380();
            v11 = v15 + (v16 << 6);
            goto LABEL_18;
          }
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_23C87999C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_23C87E0F0();
  v11 = v10;
  sub_23C7E6D0C();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  Database.columns(in:)(v12, v13);
  sub_23C7E087C();
  if (!v5)
  {
    sub_23C7DE934();
    sub_23C7F16C0();
    v15 = v14;
    sub_23C7E79A8((uint64_t *)&unk_25430D6B8);
    v16 = sub_23C910DA0();
    *v11 = v15;
    v11[1] = v16;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 8))(v11, a3, a4);
  }
  sub_23C7DFB3C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v6, a3);
}

unint64_t PersistenceError.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C83A2C0(*(_QWORD *)(v0 + 16));
  sub_23C7F79D4(v1);
  swift_bridgeObjectRelease();
  type metadata accessor for Row();
  swift_initStackObject();
  sub_23C7F8DD8();
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  sub_23C87E068();
  Row.description.getter();
  sub_23C910F5C();
  swift_release();
  sub_23C7DB624();
  return 0xD000000000000017;
}

void PersistenceConflictPolicy.conflictResolutionForInsert.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void PersistenceConflictPolicy.conflictResolutionForUpdate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void sub_23C879BBC(_WORD *a1@<X8>)
{
  static MutablePersistableRecord.persistenceConflictPolicy.getter(a1);
}

void static MutablePersistableRecord.persistenceConflictPolicy.getter(_WORD *a1@<X8>)
{
  *a1 = 257;
}

void sub_23C879BE0()
{
  MutablePersistableRecord.insert(_:)();
}

void MutablePersistableRecord.insert(_:)()
{
  MutablePersistableRecord.performInsert(_:)();
}

void sub_23C879C08()
{
  MutablePersistableRecord.update(_:columns:)();
}

void MutablePersistableRecord.update(_:columns:)()
{
  MutablePersistableRecord.performUpdate(_:columns:)();
}

void sub_23C879C30()
{
  MutablePersistableRecord.save(_:)();
}

void MutablePersistableRecord.save(_:)()
{
  MutablePersistableRecord.performSave(_:)();
}

uint64_t sub_23C879C58(uint64_t a1)
{
  return MutablePersistableRecord.delete(_:)(a1) & 1;
}

uint64_t MutablePersistableRecord.delete(_:)(uint64_t a1)
{
  char v1;

  MutablePersistableRecord.performDelete(_:)(a1);
  return v1 & 1;
}

void MutablePersistableRecord.performInsert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  GRDBInternal::StatementArguments_optional v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  sub_23C7DEF5C();
  v2 = v1;
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v22 - v10;
  sub_23C87E1FC((uint64_t)v22 - v10);
  sub_23C7E6D0C();
  sub_23C7EFB3C((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 24))(v22, v4, v2);
  v12 = LOBYTE(v22[0]);
  type metadata accessor for DAO(0, v4, v2, v13);
  sub_23C87E1FC((uint64_t)v9);
  sub_23C7E7764();
  v14 = sub_23C87734C();
  if (!v0)
  {
    v15 = v14;
    LOBYTE(v22[0]) = v12;
    sub_23C877398(v22);
    v22[0] = 0;
    v22[1] = 0;
    v16.value.values._rawValue = v22;
    Statement.execute(arguments:)(v16);
    if (v17)
    {
      sub_23C7E6BFC();
LABEL_6:
      swift_release();
      goto LABEL_7;
    }
    sub_23C7DFA18();
    if (v12 == 3)
      goto LABEL_6;
    Database.lastInsertedRowID.getter();
    v19 = v18;
    if (*(_BYTE *)(v15 + 72))
    {
      v20 = 0;
      v21 = 0;
    }
    else
    {
      v20 = *(_QWORD *)(v15 + 56);
      v21 = *(_QWORD *)(v15 + 64);
      sub_23C7F8E30(v20, v21, 0);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 32))(v19, v20, v21, v4, v2);
    sub_23C7E6BFC();
    sub_23C7DB3DC();
  }
LABEL_7:
  sub_23C7DEF28();
}

void MutablePersistableRecord.inserted(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_23C7EE4A8(a1, a2);
  sub_23C87E090(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
  if (v2)
    sub_23C87E1CC();
  sub_23C7EBC70();
}

void MutablePersistableRecord.performUpdate(_:columns:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  sub_23C7DEF5C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7DE95C();
  v11 = v10 - v9;
  type metadata accessor for DAO(0, v12, v13, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v2, v6);
  sub_23C7E62C0();
  sub_23C87734C();
  if (!v1)
  {
    sub_23C7E6D0C();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 24))(v19, v6, v4);
    sub_23C877590();
    if (v15)
    {
      v19[0] = 0;
      v19[1] = 0;
      v16 = v19;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v14 - 1));
      if (!v17)
      {
        Database.changesCount.getter();
        if (!v18)
        {
          sub_23C8774A4();
          sub_23C7E8090();
        }
      }
      sub_23C7DFE08();
    }
    else
    {
      sub_23C8774A4();
      sub_23C7E8090();
    }
    swift_release();
  }
  sub_23C7DEF28();
}

uint64_t MutablePersistableRecord.update<A>(_:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v13[2] = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  KeyPath = swift_getKeyPath();
  sub_23C891CA0((uint64_t)sub_23C87D59C, (uint64_t)v13, v14, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v10);
  sub_23C7DFE08();
  sub_23C87E330();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, v11, a3, a5);
  return sub_23C7DB62C();
}

uint64_t sub_23C87A0D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + a1 - 8);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = v5(AssociatedTypeWitness, v4);
  *a3 = result;
  a3[1] = v8;
  return result;
}

void MutablePersistableRecord.update<A>(_:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C87E130();
  MEMORY[0x24BDAC7A8](v8);
  sub_23C7ED0D0(v9, v10, v11, v13);
  v12 = sub_23C9112BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, v12, a3, a5);
  sub_23C7DB62C();
  sub_23C7E8E84();
}

uint64_t MutablePersistableRecord.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);

  sub_23C7E6D0C();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 16) + 8))(a2);
  Database.columns(in:)(v6, v7);
  if (!v3)
  {
    v9 = v8;
    sub_23C7DBCD0();
    sub_23C877D80(v9);
    sub_23C7DC474();
    sub_23C87E330();
    v10 = sub_23C7EE074();
    v11(v10);
  }
  return swift_bridgeObjectRelease();
}

uint64_t MutablePersistableRecord.updateChanges<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[4];

  v8 = v6;
  sub_23C87E130();
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7ED0D0(v15, v16, v17, v22[0]);
  v18 = *(_QWORD *)(a6 + 8);
  v19 = *(_QWORD *)(a6 + 16);
  v20 = sub_23C7E62C0();
  sub_23C87999C(v20, v7, a4, v18, v19);
  if (!v8)
  {
    v22[0] = v22[2];
    v22[1] = v22[3];
    LOBYTE(a5) = sub_23C87A380(a1, (uint64_t)v22, a3, a5);
    sub_23C7DBCD0();
    sub_23C7DC474();
  }
  return a5 & 1;
}

uint64_t sub_23C87A380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;

  v6 = v5;
  v7 = v4;
  v10 = a1;
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v15 = v13[1];
  (*(void (**)(char *, uint64_t))(v16 + 16))(v12, v7);
  v17 = *(_QWORD *)(a4 + 8);
  v18 = *(_QWORD *)(a4 + 16);
  v19 = swift_retain();
  sub_23C87999C(v19, (uint64_t)v12, a3, v17, v18);
  if (!v6)
  {
    v38 = v10;
    v35 = v7;
    v36 = a3;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = v44;
    *(_QWORD *)(v20 + 32) = 0;
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = v20;
    v21[3] = v14;
    v21[4] = v15;
    sub_23C7E79A8(qword_25430AF40);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = sub_23C824960;
    *(_QWORD *)(inited + 24) = v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v23 = MEMORY[0x24BEE4B08];
    v45 = MEMORY[0x24BEE4B08];
    v37 = inited;
    swift_retain();
    sub_23C821C24((_QWORD *)v20, v14, v15, (uint64_t)&v39);
    v24 = v40;
    if (v40)
    {
      v33 = a4;
      v34 = 0;
      do
      {
        v25 = v41;
        v26 = v42;
        v27 = v39;
        v28 = v43;
        swift_bridgeObjectRetain();
        sub_23C7E56A4(v25, v26, v28);
        sub_23C7E5640(v25, v26, v28);
        sub_23C8FA41C();
        swift_bridgeObjectRelease();
        sub_23C8248E4(v27, v24, v25, v26, v28);
        sub_23C821C24((_QWORD *)v20, v14, v15, (uint64_t)&v39);
        v24 = v40;
      }
      while (v40);
      v23 = v45;
      a4 = v33;
    }
    v29 = v38;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v30 = *(_QWORD *)(v23 + 16);
    LOBYTE(v10) = v30 != 0;
    if (v30)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48))(v29, v23, v36, a4);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_release();
  }
  return v10 & 1;
}

uint64_t MutablePersistableRecord.updateChanges(_:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_23C7DEF5C();
  v27 = v2;
  v28 = v3;
  v4 = v1;
  v5 = v0;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_23C87E130();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v0, v18);
  v19 = *(_QWORD *)(v7 + 8);
  v20 = *(_QWORD *)(v7 + 16);
  v21 = sub_23C7EFAC4();
  sub_23C87999C(v21, (uint64_t)v16, v9, v19, v20);
  if (!v4)
  {
    v22 = v25;
    v23 = v26;
    v11(v0);
    v25 = v22;
    v26 = v23;
    v5 = sub_23C87A380(v13, (uint64_t)&v25, v9, v7);
    sub_23C7DC514();
    sub_23C7E087C();
  }
  return v5 & 1;
}

void MutablePersistableRecord.performSave(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7DEF5C();
  sub_23C87E2BC();
  MEMORY[0x24BDAC7A8](v4);
  sub_23C87E150();
  sub_23C87AA38();
  if (!v0)
  {
    if (v5)
    {
      sub_23C7EBCD8(v3, v2, v1);
      sub_23C7DBCD0();
    }
    else
    {
      sub_23C87E008(v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40));
    }
  }
  sub_23C7DEF28();
}

void MutablePersistableRecord.saved(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_23C7EE4A8(a1, a2);
  sub_23C87E090(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 56));
  if (v2)
    sub_23C87E1CC();
  sub_23C7EBC70();
}

void MutablePersistableRecord.performExists(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  __int128 v12;

  sub_23C87E0F0();
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for DAO(0, v2, v3, v4);
  v5 = sub_23C87E27C();
  v6(v5);
  sub_23C7E62C0();
  sub_23C87734C();
  if (!v0)
  {
    sub_23C87AEA4();
    v8 = v7;
    sub_23C7DFA18();
    if (v8)
    {
      type metadata accessor for Row();
      v12 = 0uLL;
      v11 = 0;
      memset(v10, 0, sizeof(v10));
      v9 = static Row.fetchOne(_:arguments:adapter:)(v8, &v12, (uint64_t)v10);
      sub_23C7E7900((uint64_t)v10, &qword_25430DBD0);
      sub_23C7DFE08();
      if (v9)
        sub_23C7DFA18();
    }
  }
  sub_23C7E8E84();
  sub_23C7E4BEC();
}

void sub_23C87AA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  sub_23C7DEF5C();
  v4 = v3;
  sub_23C87E0F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_23C87E150();
  sub_23C7E6D0C();
  v32 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v6);
  Database.primaryKey(_:)(v7, v8, &v33);
  if (!v0)
  {
    swift_bridgeObjectRelease();
    v9 = (_OWORD *)v33;
    v10 = v34;
    v31 = v35;
    v11 = sub_23C87E0FC();
    v12(v11);
    v13 = *(_QWORD *)(v32 + 8);
    v14 = sub_23C7E62C0();
    sub_23C87999C(v14, v2, v1, v13, v6);
    v16 = v33;
    v15 = v34;
    if (v31)
    {
      if (v31 == 1)
        v17 = v9;
      else
        v17 = &unk_250D858D8;
    }
    else
    {
      sub_23C7E79A8(&qword_25430DA10);
      v17 = (_OWORD *)sub_23C7DF3DC();
      v17[1] = xmmword_23C912A20;
      *((_QWORD *)v17 + 4) = v9;
      *((_QWORD *)v17 + 5) = v10;
    }
    sub_23C7E0808();
    sub_23C7DBCC8();
    v18 = sub_23C878080((uint64_t)v17, v16, v15);
    sub_23C7DB62C();
    sub_23C7DB398();
    sub_23C7DC474();
    v19 = sub_23C828EB8(v18);
    sub_23C90175C(&v36, v19);
    v20 = v39;
    v21 = v40;
    v22 = (unint64_t)(v38 + 64) >> 6;
    while (1)
    {
      if (v21)
      {
        v23 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        v24 = v23 | (v20 << 6);
      }
      else
      {
        v25 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
          return;
        }
        if (v25 >= v22)
          goto LABEL_36;
        v26 = *(_QWORD *)(v37 + 8 * v25);
        v27 = v20 + 1;
        if (!v26)
        {
          v27 = v20 + 2;
          if (v20 + 2 >= v22)
            goto LABEL_36;
          v26 = *(_QWORD *)(v37 + 8 * v27);
          if (!v26)
          {
            v27 = v20 + 3;
            if (v20 + 3 >= v22)
              goto LABEL_36;
            v26 = *(_QWORD *)(v37 + 8 * v27);
            if (!v26)
            {
              v27 = v20 + 4;
              if (v20 + 4 >= v22)
                goto LABEL_36;
              v26 = *(_QWORD *)(v37 + 8 * v27);
              if (!v26)
              {
                v27 = v20 + 5;
                if (v20 + 5 >= v22)
                  goto LABEL_36;
                v26 = *(_QWORD *)(v37 + 8 * v27);
                if (!v26)
                {
                  v27 = v20 + 6;
                  if (v20 + 6 >= v22)
                    goto LABEL_36;
                  v26 = *(_QWORD *)(v37 + 8 * v27);
                  if (!v26)
                  {
                    v28 = v20 + 7;
                    while (v28 < v22)
                    {
                      v26 = *(_QWORD *)(v37 + 8 * v28++);
                      if (v26)
                      {
                        v27 = v28 - 1;
                        goto LABEL_30;
                      }
                    }
LABEL_36:
                    swift_release();
                    goto LABEL_4;
                  }
                }
              }
            }
          }
        }
LABEL_30:
        v21 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v27 << 6);
        v20 = v27;
      }
      v29 = *(_QWORD *)(v36 + 56) + 24 * v24;
      if (*(_BYTE *)(v29 + 16) != 4 || *(_OWORD *)v29 != 0)
      {
        sub_23C7DB3D4();
        swift_release();
        goto LABEL_4;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_4:
  sub_23C7DEF28();
}

uint64_t type metadata accessor for DAO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DAO);
}

void sub_23C87AD08()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23C87E344();
  if (!v0)
  {
    sub_23C7E79A8(&qword_25430DA10);
    v4 = sub_23C7DF3DC();
    *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v4 + 32) = v2;
    *(_QWORD *)(v4 + 40) = v3;
  }
  sub_23C87E19C();
  if (*(_QWORD *)(sub_23C87E0DC((void (*)(__int128 *__return_ptr, _QWORD *))sub_23C87D938) + 16))
  {
    while (1)
    {
      sub_23C7E6AE4();
      v7 = v7 && v6 == 0;
      if (!v7)
        break;
      if (v5 == 1)
        goto LABEL_10;
    }
    v8 = *(_QWORD *)(v1 + 40);
    sub_23C7DBBB0();
    sub_23C87E0B8();
    sub_23C87BF00(v9, v10, v11);
    sub_23C7DBCD0();
    sub_23C7DB3DC();
    sub_23C87E1AC();
    if (v8)
    {
      sub_23C7DB62C();
      sub_23C7DB398();
    }
    else
    {
      v12 = sub_23C7DB398();
      MEMORY[0x24BDAC7A8](v12);
      sub_23C7E79A8(&qword_25430CF60);
      sub_23C7E1240((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
      swift_getKeyPath();
      sub_23C87E338();
      sub_23C87E0A4();
      sub_23C7DB62C();
      v13 = sub_23C7DFB3C();
      sub_23C7EFAF0(v13, v14);
      sub_23C7DB62C();
      sub_23C7DB3DC();
    }
  }
  else
  {
LABEL_10:
    sub_23C7DBCD0();
    sub_23C7DB62C();
  }
  sub_23C7E8E84();
  sub_23C7E4BEC();
}

void sub_23C87AEA4()
{
  int v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C87E344();
  if (v0)
  {
    if (v0 == 1)
      v4 = v2;
    else
      v4 = &unk_250D86510;
  }
  else
  {
    sub_23C7E79A8(&qword_25430DA10);
    v4 = (_OWORD *)sub_23C7DF3DC();
    v4[1] = xmmword_23C912A20;
    *((_QWORD *)v4 + 4) = v2;
    *((_QWORD *)v4 + 5) = v3;
  }
  sub_23C87E19C();
  if (*(_QWORD *)(sub_23C87E0DC((void (*)(__int128 *__return_ptr, _QWORD *))sub_23C87D938) + 16))
  {
    while (1)
    {
      sub_23C7E6AE4();
      v7 = v7 && v6 == 0;
      if (!v7)
        break;
      if (v5 == 1)
        goto LABEL_13;
    }
    v8 = *(_QWORD *)(v1 + 40);
    v9 = *(_QWORD *)(v1 + 48);
    sub_23C7DBBB0();
    sub_23C87BF00(v8, v9, (uint64_t)v4);
    sub_23C7DBCD0();
    sub_23C7DB3DC();
    sub_23C87E1AC();
    if (v8)
    {
      sub_23C7DB62C();
      sub_23C7DB398();
    }
    else
    {
      v10 = sub_23C7DB398();
      MEMORY[0x24BDAC7A8](v10);
      sub_23C7E79A8(&qword_25430CF60);
      sub_23C7E1240((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
      swift_getKeyPath();
      sub_23C87E338();
      sub_23C87E0A4();
      sub_23C7DB62C();
      v11 = sub_23C7DFB3C();
      sub_23C7EFAF0(v11, v12);
      sub_23C7DB62C();
      sub_23C7DB3DC();
    }
  }
  else
  {
LABEL_13:
    sub_23C7DBCD0();
    sub_23C7DB62C();
  }
  sub_23C7E8E84();
  sub_23C7E4BEC();
}

uint64_t MutablePersistableRecord<>.updateChanges(_:with:)(uint64_t a1, void (*a2)(uint64_t), char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = v5;
  v13 = *(_QWORD *)(a5 + 8);
  v14 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  sub_23C87999C(a1, (uint64_t)&v18, a4, v13, v14);
  if (!v6)
  {
    v15 = sub_23C87E05C();
    a2(v15);
    v18 = v7;
    a3 = sub_23C87A380(a1, (uint64_t)&v17, a4, a5);
    sub_23C7DC514();
    sub_23C7DBCD0();
  }
  return a3 & 1;
}

void sub_23C87B150()
{
  PersistableRecord.insert(_:)();
}

void PersistableRecord.insert(_:)()
{
  PersistableRecord.performInsert(_:)();
}

uint64_t sub_23C87B178()
{
  return PersistableRecord.save(_:)();
}

#error "23C87B194: call analysis failed (funcsize=5)"

void PersistableRecord.performInsert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  GRDBInternal::StatementArguments_optional v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  sub_23C7DEF5C();
  v3 = v2;
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7DE95C();
  v10 = v9 - v8;
  sub_23C7E6D0C();
  v11 = *(_QWORD *)(v3 + 8);
  v12 = sub_23C87E318();
  v13(v12, v11);
  type metadata accessor for DAO(0, v5, v11, v14);
  sub_23C87E178(v10, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  sub_23C7E7764();
  v15 = sub_23C87734C();
  if (!v1)
  {
    v16 = v15;
    v17 = LOBYTE(v24[0]);
    sub_23C877398(v24);
    v24[0] = 0;
    v24[1] = 0;
    v18.value.values._rawValue = v24;
    Statement.execute(arguments:)(v18);
    if (v19)
    {
      sub_23C7E6BFC();
LABEL_6:
      swift_release();
      goto LABEL_7;
    }
    sub_23C7DFA18();
    if (v17 == 3)
      goto LABEL_6;
    Database.lastInsertedRowID.getter();
    v21 = v20;
    if (*(_BYTE *)(v16 + 72))
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v22 = *(_QWORD *)(v16 + 56);
      v23 = *(_QWORD *)(v16 + 64);
      sub_23C7F8E30(v22, v23, 0);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(v21, v22, v23, v5, v3);
    sub_23C7E6BFC();
    sub_23C7DC474();
  }
LABEL_7:
  sub_23C7DEF28();
}

void sub_23C87B32C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  sub_23C7DEF5C();
  v2 = v1;
  v3 = v0;
  v4 = *v0;
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_23C7DE95C();
  v23 = v9 - v8;
  v3[2] = v10;
  v24 = v11;
  sub_23C7E6D0C();
  v22 = *(_QWORD *)(v4 + 88);
  v12 = *(_QWORD *)(v22 + 16);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  sub_23C7EFAC4();
  v3[5] = v13(v5, v12);
  v3[6] = v14;
  swift_bridgeObjectRetain();
  v15 = sub_23C7DFDFC();
  Database.primaryKey(_:)(v15, v16, v17);
  if (v2)
  {
    sub_23C7DB62C();
    sub_23C7DF8F8();
    v18 = v24;
    swift_release();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
LABEL_4:
    sub_23C7EFB3C(v18, v21);
    sub_23C7DEF28();
    return;
  }
  sub_23C7DB62C();
  *(_OWORD *)(v3 + 7) = v25;
  *((_BYTE *)v3 + 72) = v26;
  v18 = v24;
  sub_23C87E178(v23, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v19 = *(_QWORD *)(v22 + 8);
  v20 = sub_23C7EFAC4();
  sub_23C87999C(v20, v23, v5, v19, v12);
  *(_OWORD *)(v3 + 3) = v25;
  if (*(_QWORD *)(v25 + 16))
  {
    sub_23C7DF8F8();
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    goto LABEL_4;
  }
  sub_23C911634();
  sub_23C911C70();
  sub_23C7DB624();
  sub_23C910F5C();
  sub_23C9117B4();
  __break(1u);
}

void sub_23C87B57C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v1 = *(unsigned __int8 *)v0;
  v3 = v0[1];
  v2 = v0[2];
  v4 = v0[3];
  v5 = qword_25430CCD8;
  sub_23C7DF858();
  sub_23C7DBBB0();
  if (v5 != -1)
    swift_once();
  sub_23C7DC47C();
  sub_23C8CB9CC((uint64_t)sub_23C87DB58, 0);
  v7 = v6;
  swift_release();
  sub_23C8660E4(v1, v3, v2, v4, v7);
  v9 = v8;
  sub_23C7DB3DC();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    v10 = sub_23C7DBBB0();
    v11 = sub_23C7FA75C(v10);
    sub_23C7DB3DC();
    v17[0] = v11;
    sub_23C7E9B8C();
    sub_23C7E6ADC((unint64_t *)&qword_25430DB98, v12, MEMORY[0x24BEE12B0]);
    sub_23C910E3C();
    sub_23C7DBCD0();
    v17[0] = *(_QWORD *)(v4 + 16);
    v17[1] = 63;
    v17[2] = 0xE100000000000000;
    sub_23C7E9B8C();
    sub_23C7E6ADC(qword_25430CD00, v13, MEMORY[0x24BEE49A8]);
    sub_23C910E3C();
    if ((_DWORD)v1 != 1)
    {
      sub_23C911634();
      swift_bridgeObjectRelease();
      strcpy((char *)v17, "INSERT OR ");
      BYTE3(v17[1]) = 0;
      HIDWORD(v17[1]) = -369098752;
      sub_23C87E1DC();
      __asm { BR              X9 }
    }
    sub_23C911634();
    swift_bridgeObjectRelease();
    strcpy((char *)v17, "INSERT INTO ");
    BYTE5(v17[1]) = 0;
    HIWORD(v17[1]) = -5120;
    sub_23C7E8E10();
    sub_23C7E3164();
    sub_23C7EF954();
    sub_23C7DBCD0();
    sub_23C87E068();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C7E1784();
    sub_23C7DB398();
    sub_23C910F5C();
    v14 = v17[0];
    sub_23C7DF858();
    sub_23C7DBBB0();
    sub_23C7DB3B8();
    swift_retain();
    sub_23C8CB9CC((uint64_t)sub_23C87DB58, 0);
    v16 = v15;
    swift_isUniquelyReferenced_nonNull_native();
    v17[0] = v16;
    sub_23C83AE94(v14, v17[1], v1, v3, v2, v4);
    sub_23C7DB3DC();
    sub_23C7DB624();
    swift_bridgeObjectRelease();
    sub_23C8CBA94();
    swift_release();
  }
  sub_23C7DB4D4();
}

void sub_23C87B95C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v8 = *(_OWORD *)(a1 + 24);
  sub_23C7DBBB0();
  sub_23C7DBBB8();
  sub_23C821964((uint64_t)v10);
  sub_23C7DC474();
  sub_23C7DB3DC();
  if (v11)
  {
    v3 = v12;
    sub_23C7E7E34(v10, v11);
    v4 = sub_23C87E318();
    v5(v4, v3);
    v6 = v9;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
    v7 = v8;
  }
  else
  {
    sub_23C7E7900((uint64_t)v10, (uint64_t *)&unk_25430D6B8);
    v7 = 0uLL;
    v6 = 4;
  }
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a2 + 16) = v6;
}

uint64_t sub_23C87BA30()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[1];
  v22 = *v0;
  v23 = v1;
  v24 = *((_QWORD *)v0 + 4);
  sub_23C83B4C4((uint64_t)&v22);
  if (qword_25430B700 != -1)
    swift_once();
  sub_23C7DC47C();
  sub_23C8CB9F0((uint64_t)sub_23C87DFC8, 0);
  v3 = v2;
  swift_release();
  sub_23C866128((char *)&v22, v3);
  v5 = v4;
  v7 = v6;
  sub_23C7DB398();
  sub_23C87DB84((uint64_t)&v22);
  if (!v7)
  {
    v8 = *((_QWORD *)&v23 + 1);
    v26 = *((_QWORD *)&v23 + 1);
    v9 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 16);
    if (v9)
    {
      v20 = MEMORY[0x24BEE4AF8];
      sub_23C7DBCC8();
      sub_23C7E623C();
      v10 = v8 + 40;
      do
      {
        sub_23C7E0808();
        sub_23C7E1784();
        sub_23C7E3164();
        sub_23C87E044();
        sub_23C7DB398();
        v11 = *(_QWORD *)(v20 + 16);
        if (v11 >= *(_QWORD *)(v20 + 24) >> 1)
          sub_23C7DBBE4();
        v10 += 16;
        *(_QWORD *)(v20 + 16) = v11 + 1;
        v12 = v20 + 16 * v11;
        *(_QWORD *)(v12 + 32) = 34;
        *(_QWORD *)(v12 + 40) = 0xE100000000000000;
        --v9;
      }
      while (v9);
      sub_23C863D04((uint64_t)&v26);
    }
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    sub_23C87E2E4();
    sub_23C7DC474();
    v13 = v24;
    v25 = v24;
    v14 = *(_QWORD *)(v24 + 16);
    if (v14)
    {
      v21 = MEMORY[0x24BEE4AF8];
      sub_23C7DEF00();
      sub_23C7E623C();
      v15 = v13 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23C87E0FC();
        sub_23C910F5C();
        sub_23C7E3164();
        sub_23C87E044();
        swift_bridgeObjectRelease();
        v16 = *(_QWORD *)(v21 + 16);
        if (v16 >= *(_QWORD *)(v21 + 24) >> 1)
          sub_23C7DBBE4();
        v15 += 16;
        *(_QWORD *)(v21 + 16) = v16 + 1;
        v17 = v21 + 16 * v16;
        *(_QWORD *)(v17 + 32) = 34;
        *(_QWORD *)(v17 + 40) = 0xE100000000000000;
        --v14;
      }
      while (v14);
      sub_23C863D04((uint64_t)&v25);
    }
    sub_23C87E290();
    sub_23C87E2E4();
    sub_23C7DC474();
    v18 = v22;
    if (v22 != 1)
    {
      sub_23C911634();
      swift_bridgeObjectRelease();
      sub_23C87E1DC();
      __asm { BR              X9 }
    }
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C7E3164();
    sub_23C87E248();
    sub_23C7DC474();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C7E072C();
    sub_23C7E9630();
    sub_23C7E1784();
    sub_23C7DB398();
    v5 = 0x20455441445055;
    sub_23C83B4C4((uint64_t)&v22);
    sub_23C7DBCC8();
    sub_23C7E62C0();
    sub_23C8CB9F0((uint64_t)sub_23C87DFC8, 0);
    swift_isUniquelyReferenced_nonNull_native();
    sub_23C83AFAC(0x20455441445055, 0xE700000000000000, (char *)&v22);
    swift_bridgeObjectRelease();
    sub_23C87DB84((uint64_t)&v22);
    sub_23C8CBAA8();
    swift_release();
  }
  return v5;
}

void sub_23C87BEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C87E0B8();
  sub_23C87BF00(v0, v1, v2);
}

void sub_23C87BF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v9 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23C7E623C();
    v5 = a3 + 40;
    do
    {
      sub_23C7DF858();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C87E068();
      sub_23C7DB624();
      v6 = *(_QWORD *)(v9 + 16);
      if (v6 >= *(_QWORD *)(v9 + 24) >> 1)
        sub_23C7DBBE4();
      v5 += 16;
      *(_QWORD *)(v9 + 16) = v6 + 1;
      v7 = v9 + 16 * v6;
      *(_QWORD *)(v7 + 32) = 34;
      *(_QWORD *)(v7 + 40) = 0xE100000000000000;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  sub_23C7E9B8C();
  sub_23C7E6ADC((unint64_t *)&qword_25430DB98, v8, MEMORY[0x24BEE12B0]);
  sub_23C87E290();
  sub_23C910E3C();
  sub_23C7DC474();
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C7E8E10();
  sub_23C7E3164();
  sub_23C7E8E10();
  sub_23C7DB624();
  sub_23C7E9630();
  sub_23C910F5C();
  sub_23C7DBCD0();
  sub_23C7DB4D4();
}

void sub_23C87C0DC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v4 = a1[1];
  *(_QWORD *)a3 = *a1;
  *(_QWORD *)(a3 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)&v11 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v11 + 1) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C821964((uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v14;
  if (v14)
  {
    v7 = v15;
    sub_23C7E7E34(v13, v14);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 24))(&v11, v6, v7);
    v10 = v11;
    v8 = v12;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
    v9 = v10;
  }
  else
  {
    sub_23C7E7900((uint64_t)v13, (uint64_t *)&unk_25430D6B8);
    v9 = 0uLL;
    v8 = 4;
  }
  *(_OWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 32) = v8;
}

void sub_23C87C1D0()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_23C7DB624();
  swift_bridgeObjectRelease();
  sub_23C7F9150(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_23C7DB390();
}

uint64_t sub_23C87C210()
{
  sub_23C87C1D0();
  return swift_deallocClassInstance();
}

uint64_t sub_23C87C230(uint64_t a1)
{
  char *v1;

  sub_23C8E7ED4(a1, *v1);
  sub_23C7DBCC8();
  sub_23C87E168();
  sub_23C7DB62C();
  sub_23C7E0808();
  sub_23C87E2B0();
  return sub_23C7EE158();
}

uint64_t sub_23C87C278(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  v5 = a2[1];
  v6 = a2[2];
  v7 = (_QWORD *)a2[3];
  sub_23C87E208((char *)a1);
  if ((v8 & 1) != 0 && (v2 == v5 ? (v9 = v3 == v6) : (v9 = 0), v9 || (sub_23C7DFDFC(), (sub_23C7E16E8() & 1) != 0)))
    return sub_23C8482D8(v4, v7);
  else
    return 0;
}

uint64_t sub_23C87C2F8()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23C911BBC();
  sub_23C8E7ED4((uint64_t)v3, v1);
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C824F78();
  swift_bridgeObjectRelease();
  return sub_23C911BF8();
}

uint64_t sub_23C87C390()
{
  uint64_t v0;

  v0 = sub_23C87E1F0();
  sub_23C87E220(v0);
  sub_23C7DC46C();
  sub_23C87E108();
  sub_23C7E072C();
  sub_23C7DBCC8();
  sub_23C87E214();
  sub_23C7DB62C();
  return sub_23C911BF8();
}

uint64_t sub_23C87C3EC()
{
  uint64_t v0;
  uint64_t result;

  sub_23C87DC04();
  v0 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430CCF0);
  swift_allocObject();
  result = sub_23C8CBE7C(v0);
  qword_25430CE88 = result;
  return result;
}

uint64_t sub_23C87C458(uint64_t a1)
{
  char *v1;

  sub_23C8E7ED4(a1, *v1);
  sub_23C7DBCC8();
  sub_23C87E168();
  sub_23C7DB62C();
  sub_23C7E0808();
  sub_23C87E2B0();
  sub_23C7DB398();
  sub_23C7DBBB0();
  sub_23C824F78();
  return sub_23C7EE158();
}

uint64_t sub_23C87C4B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = a2[1];
  v6 = a2[2];
  v7 = (_QWORD *)a2[4];
  sub_23C87E208((char *)a1);
  if ((v8 & 1) != 0
    && (v2 == v5 ? (v9 = v3 == v6) : (v9 = 0),
        (v9 || (sub_23C7E16E8() & 1) != 0) && (v10 = (_QWORD *)sub_23C7DFDFC(), (sub_23C8482D8(v10, v11) & 1) != 0)))
  {
    return sub_23C8482D8(v4, v7);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23C87C550()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23C911BBC();
  sub_23C8E7ED4((uint64_t)v3, v1);
  swift_bridgeObjectRetain();
  sub_23C910F14();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C824F78();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C824F78();
  swift_bridgeObjectRelease();
  return sub_23C911BF8();
}

uint64_t sub_23C87C60C()
{
  uint64_t v0;

  v0 = sub_23C87E1F0();
  sub_23C87E220(v0);
  sub_23C7DC46C();
  sub_23C87E108();
  sub_23C7E072C();
  sub_23C7DBCC8();
  sub_23C87E214();
  sub_23C7DB62C();
  sub_23C7E0808();
  sub_23C824F78();
  sub_23C7DB398();
  return sub_23C911BF8();
}

uint64_t sub_23C87C684()
{
  uint64_t v0;
  uint64_t result;

  sub_23C87DBC8();
  v0 = sub_23C910DAC();
  sub_23C7E79A8(&qword_25430B5F8);
  swift_allocObject();
  result = sub_23C8CBE7C(v0);
  qword_25430B5E0 = result;
  return result;
}

uint64_t sub_23C87C6F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C87C704()
{
  uint64_t isStackAllocationSafe;
  unint64_t v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  sub_23C87E358();
  v2 = (void *)(v1 >> 6);
  if (v3 > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
      goto LABEL_5;
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  sub_23C87E140();
  v4 = sub_23C7EFAAC();
  sub_23C7DE904();
  if (v2)
  {
    swift_willThrow();

    __break(1u);
LABEL_5:
    swift_slowAlloc();
    sub_23C87E140();
    sub_23C7EFAAC();
    sub_23C7DE904();
    if (!v2)
      sub_23C7E8460();

    sub_23C7E8460();
  }
  return v4;
}

void sub_23C87C82C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t isStackAllocationSafe;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  _QWORD v25[12];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v25[11] = a1;
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = (void *)(a2 + 56);
      v25[0] = a1 + 32;
      sub_23C7DBCC8();
      v5 = 0;
      do
      {
        v6 = (uint64_t *)(v25[0] + 16 * v5);
        v8 = *v6;
        v7 = v6[1];
        ++v5;
        sub_23C911BBC();
        sub_23C7E0808();
        sub_23C910F14();
        v9 = sub_23C911BF8();
        v10 = -1 << *(_BYTE *)(a2 + 32);
        v11 = v9 & ~v10;
        sub_23C87E2F0();
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_QWORD *)(v13 + 16 * v11);
          v15 = *v14 == v8 && v14[1] == v7;
          if (v15 || (sub_23C7E16E8() & 1) != 0)
          {
            sub_23C7DB398();
            v26 = v5;
          }
          else
          {
            v16 = ~v10;
            do
            {
              v11 = (v11 + 1) & v16;
              sub_23C87E2F0();
              if ((v17 & 1) == 0)
                goto LABEL_18;
              v18 = (_QWORD *)(v13 + 16 * v11);
              v19 = *v18 == v8 && v18[1] == v7;
            }
            while (!v19 && (sub_23C7E16E8() & 1) == 0);
            v26 = v5;
            sub_23C7DB398();
          }
          sub_23C87E358();
          v22 = 8 * (v21 >> 6);
          if (v23 < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
          {
            MEMORY[0x24BDAC7A8](isStackAllocationSafe);
            sub_23C87E324((char *)v25 - ((v22 + 15) & 0x3FFFFFFFFFFFFFF0));
            sub_23C7EE058();
            sub_23C7DE904();
            if (a2 == -56)
            {
              swift_bridgeObjectRelease();
              goto LABEL_28;
            }
            swift_willThrow();

            __break(1u);
          }
          else
          {
            v24 = (void *)swift_slowAlloc();
            sub_23C87E324(v24);
            sub_23C7EE058();
            sub_23C7DE904();
            if (a2 == -56)
            {
              swift_bridgeObjectRelease();
              sub_23C7E8460();
            }
          }

          sub_23C7E8460();
        }
LABEL_18:
        sub_23C7DB398();
      }
      while (v5 != v3);
      sub_23C7DB62C();
    }
  }
  else
  {
    sub_23C7DE904();
  }
LABEL_28:
  sub_23C7DBCB0();
}

uint64_t sub_23C87CA84(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v30 = (unint64_t *)result;
  v31 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return sub_23C87D0E0(v30, a2, v31, a3);
  }
  v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_30;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    v14 = sub_23C911BF8();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v32 + 8 * (v16 >> 6))) == 0)
      goto LABEL_25;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (sub_23C911A18() & 1) == 0)
    {
      v24 = ~v15;
      for (i = v16 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v19 + 16 * v26);
        v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (sub_23C911A18() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v17 = v26 >> 6;
          v18 = 1 << v26;
          goto LABEL_13;
        }
      }
LABEL_25:
      result = swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    result = swift_bridgeObjectRelease();
LABEL_13:
    v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      v23 = v31 - 1;
      if (__OFSUB__(v31, 1))
        goto LABEL_31;
      --v31;
      if (!v23)
        return MEMORY[0x24BEE4B08];
    }
LABEL_26:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_23C87CCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a3)
  {
LABEL_35:
    sub_23C7DE904();
    goto LABEL_36;
  }
  v7 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
LABEL_36:
    sub_23C7DBCB0();
    return;
  }
  sub_23C87E0F0();
  sub_23C7E79A8(&qword_256BCA610);
  v8 = sub_23C911610();
  v9 = v8;
  if (v4 < 1)
    v10 = 0;
  else
    v10 = *v5;
  v11 = 0;
  v12 = v8 + 56;
  while (1)
  {
    if (v10)
    {
      sub_23C87E2D0();
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v4)
      goto LABEL_35;
    ++v11;
    if (!v5[v15])
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v4)
        goto LABEL_35;
      if (!v5[v11])
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v4)
          goto LABEL_35;
        if (!v5[v11])
          break;
      }
    }
LABEL_23:
    sub_23C87E380();
    v14 = v17 + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v14);
    v19 = sub_23C911BB0() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) == 0)
    {
      sub_23C7E4E00();
      while (++v21 != v22 || (v20 & 1) == 0)
      {
        v23 = v21 == v22;
        if (v21 == v22)
          v21 = 0;
        v20 |= v23;
        if (*(_QWORD *)(v12 + 8 * v21) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    sub_23C7E3334();
LABEL_33:
    sub_23C87E268();
    *(_QWORD *)(v12 + v24) |= v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v26) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v7--, 1))
      goto LABEL_38;
    if (!v7)
      goto LABEL_35;
  }
  v16 = v15 + 3;
  if (v16 >= v4)
    goto LABEL_35;
  if (v5[v16])
  {
    v11 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v4)
      goto LABEL_35;
    ++v16;
    if (v5[v11])
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

void sub_23C87CE80(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a4;
  if (!a3)
  {
LABEL_35:
    sub_23C7DE904();
    return;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return;
  sub_23C7E79A8(&qword_25430DBD8);
  v8 = sub_23C911610();
  v9 = v8;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = v8 + 56;
  v35 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v34)
      goto LABEL_35;
    v16 = v33[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_35;
      v16 = v33[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_35;
        v16 = v33[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    sub_23C911BBC();
    swift_bridgeObjectRetain_n();
    sub_23C7DEF00();
    sub_23C910F14();
    sub_23C7DBCD0();
    v23 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      sub_23C7E4E00();
      while (++v25 != v26 || (v24 & 1) == 0)
      {
        v27 = v25 == v26;
        if (v25 == v26)
          v25 = 0;
        v24 |= v27;
        if (*(_QWORD *)(v12 + 8 * v25) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    sub_23C7E3334();
LABEL_33:
    sub_23C87E268();
    *(_QWORD *)(v12 + v28) |= v29;
    v31 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 32 * v30);
    *v31 = v19;
    v31[1] = v20;
    v31[2] = v21;
    v31[3] = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    v4 = v35;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v15 + 3;
  if (v17 >= v34)
    goto LABEL_35;
  v16 = v33[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_35;
    v16 = v33[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_23C87D0E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_23C7E79A8(&qword_25430DBE0);
  result = sub_23C911610();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    result = sub_23C911BF8();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_23C87D36C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v21;
  unint64_t j;
  unint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2;
  v31 = *(_QWORD *)(a3 + 16);
  if (!v31)
  {
    v26 = 0;
    goto LABEL_27;
  }
  v32 = a4 + 56;
  v30 = a3 + 32;
  swift_bridgeObjectRetain();
  v28 = 0;
  for (i = 0; i != v31; ++i)
  {
    v7 = (uint64_t *)(v30 + 16 * i);
    v9 = *v7;
    v8 = v7[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    v10 = sub_23C911BF8();
    v11 = -1 << *(_BYTE *)(a4 + 32);
    v12 = v10 & ~v11;
    v13 = v12 >> 6;
    v14 = 1 << v12;
    if (((1 << v12) & *(_QWORD *)(v32 + 8 * (v12 >> 6))) == 0)
      goto LABEL_22;
    v15 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(v15 + 16 * v12);
    v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (sub_23C911A18() & 1) == 0)
    {
      v21 = ~v11;
      for (j = v12 + 1; ; j = v23 + 1)
      {
        v23 = j & v21;
        if (((*(_QWORD *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0)
          break;
        v24 = (_QWORD *)(v15 + 16 * v23);
        v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (sub_23C911A18() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v13 = v23 >> 6;
          v14 = 1 << v23;
          goto LABEL_10;
        }
      }
LABEL_22:
      swift_bridgeObjectRelease();
      continue;
    }
    result = swift_bridgeObjectRelease();
LABEL_10:
    v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  v5 = a2;
  v26 = v28;
LABEL_27:
  swift_retain();
  return sub_23C87D0E0(a1, v5, v26, a4);
}

uint64_t sub_23C87D57C()
{
  return 40;
}

__n128 sub_23C87D588(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_23C87D59C()
{
  return swift_getAtKeyPath();
}

void sub_23C87D5C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_23C7DB3D4();
  sub_23C7DB390();
}

_QWORD *assignWithCopy for PersistenceError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PersistenceError(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PersistenceError()
{
  return &type metadata for PersistenceError;
}

_WORD *initializeBufferWithCopyOfBuffer for PersistenceConflictPolicy(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PersistenceConflictPolicy(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 65284 <= 0xFFFEFFFF)
      v2 = 2;
    else
      v2 = 4;
    if (a2 + 65284 < 0xFF0000)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2))
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 16)) - 65285;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PersistenceConflictPolicy(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65284 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65284 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23C87D798 + 4 * byte_23C9168AF[v4]))();
  *a1 = a2 - 252;
  return ((uint64_t (*)(void))((char *)sub_23C87D7CC + 4 * byte_23C9168AA[v4]))();
}

uint64_t sub_23C87D7CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_23C87D7D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x23C87D7DCLL);
  return result;
}

uint64_t sub_23C87D7E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x23C87D7F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23C87D7F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_23C87D7FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersistenceConflictPolicy()
{
  return &type metadata for PersistenceConflictPolicy;
}

uint64_t dispatch thunk of static MutablePersistableRecord.persistenceConflictPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MutablePersistableRecord.didInsert(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of MutablePersistableRecord.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MutablePersistableRecord.update(_:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of MutablePersistableRecord.save(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MutablePersistableRecord.delete(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))() & 1;
}

uint64_t dispatch thunk of MutablePersistableRecord.exists(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))() & 1;
}

uint64_t dispatch thunk of PersistableRecord.didInsert(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PersistableRecord.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PersistableRecord.save(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_23C87D8E0()
{
  return swift_initClassMetadata2();
}

void sub_23C87D938(uint64_t a1@<X8>)
{
  sub_23C7E6EB8(a1);
}

uint64_t sub_23C87D950()
{
  return 24;
}

__n128 sub_23C87D95C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C87D970()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C87D99C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C87D9D0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23C87C0DC(a1, v2, a2);
}

int64_t sub_23C87D9F0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_23C87DAD8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23C87DB58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23C87C6F0();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23C87DB84(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_23C87DBC8()
{
  unint64_t result;

  result = qword_25430B5E8;
  if (!qword_25430B5E8)
  {
    result = MEMORY[0x242626100](&unk_23C916B30, &type metadata for UpdateQuery);
    atomic_store(result, (unint64_t *)&qword_25430B5E8);
  }
  return result;
}

unint64_t sub_23C87DC04()
{
  unint64_t result;

  result = qword_25430CCE0;
  if (!qword_25430CCE0)
  {
    result = MEMORY[0x242626100](&unk_23C916AF0, &type metadata for InsertQuery);
    atomic_store(result, (unint64_t *)&qword_25430CCE0);
  }
  return result;
}

uint64_t initializeWithCopy for InsertQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InsertQuery(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InsertQuery(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InsertQuery()
{
  return &type metadata for InsertQuery;
}

uint64_t destroy for UpdateQuery()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UpdateQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateQuery(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UpdateQuery(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateQuery(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateQuery()
{
  return &type metadata for UpdateQuery;
}

unint64_t sub_23C87DF4C()
{
  unint64_t result;

  result = qword_25430CCE8;
  if (!qword_25430CCE8)
  {
    result = MEMORY[0x242626100](&unk_23C916AC8, &type metadata for InsertQuery);
    atomic_store(result, (unint64_t *)&qword_25430CCE8);
  }
  return result;
}

unint64_t sub_23C87DF8C()
{
  unint64_t result;

  result = qword_25430B5F0;
  if (!qword_25430B5F0)
  {
    result = MEMORY[0x242626100](&unk_23C916AA0, &type metadata for UpdateQuery);
    atomic_store(result, (unint64_t *)&qword_25430B5F0);
  }
  return result;
}

uint64_t sub_23C87DFC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_23C87DB58(a1);
}

uint64_t sub_23C87DFDC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_23C7E5640(a1, a2, a3);
  sub_23C7E5640(v3, v4, 0);
  return sub_23C7E5640(v3, v4, 0);
}

uint64_t sub_23C87E008@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_23C87E014()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C7E5640(v0, v1, 2);
}

uint64_t sub_23C87E044()
{
  return sub_23C910F5C();
}

uint64_t sub_23C87E05C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C87E068()
{
  return sub_23C910F5C();
}

uint64_t sub_23C87E070()
{
  return swift_release();
}

void sub_23C87E07C()
{
  sub_23C7E649C();
}

uint64_t sub_23C87E090@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

void sub_23C87E0A4()
{
  uint64_t v0;

  sub_23C8C8974(v0);
}

uint64_t sub_23C87E0DC(void (*a1)(__int128 *__return_ptr, _QWORD *))
{
  uint64_t v1;
  uint64_t v2;

  return sub_23C877F48(a1, v1, v2);
}

uint64_t sub_23C87E0FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C87E108()
{
  return sub_23C910F14();
}

uint64_t sub_23C87E118()
{
  return 0;
}

uint64_t sub_23C87E140()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_23C88CFE0(0, v0, v1);
}

uint64_t sub_23C87E168()
{
  return sub_23C910F14();
}

uint64_t sub_23C87E178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_23C87E19C()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  return sub_23C7F8E30(v1, v2, v0);
}

uint64_t sub_23C87E1AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7DF68C(v1, v0);
}

uint64_t sub_23C87E1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t (*v4)(char *);
  va_list va;

  va_start(va, a4);
  return v4(va);
}

uint64_t sub_23C87E1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23C87E1DC()
{
  return 0x4B4341424C4C4F52;
}

uint64_t sub_23C87E1F0()
{
  return sub_23C911BBC();
}

uint64_t sub_23C87E1FC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

void sub_23C87E208(char *a1)
{
  sub_23C8390F8(*a1);
}

void sub_23C87E214()
{
  sub_23C824F78();
}

void sub_23C87E220(uint64_t a1, ...)
{
  char v1;
  va_list va;

  va_start(va, a1);
  sub_23C8E7ED4((uint64_t)va, v1);
}

uint64_t sub_23C87E22C()
{
  return swift_bridgeObjectRelease();
}

void sub_23C87E234(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v3;
  *(__n128 *)(v2 + 24 * v1 + 32) = a1;
}

uint64_t sub_23C87E248()
{
  return sub_23C910F5C();
}

void sub_23C87E254()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
}

uint64_t sub_23C87E27C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C87E290()
{
  return 0x20444E4120;
}

uint64_t sub_23C87E2A4()
{
  return swift_bridgeObjectRelease_n();
}

void sub_23C87E2B0()
{
  sub_23C824F78();
}

uint64_t sub_23C87E2E4()
{
  return sub_23C910E3C();
}

uint64_t sub_23C87E304()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C878E28(v0, v1);
}

uint64_t sub_23C87E310()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_23C87E318()
{
  uint64_t v0;

  return v0;
}

void *sub_23C87E324(void *a1)
{
  const void *v1;
  size_t v2;

  return memcpy(a1, v1, v2);
}

void sub_23C87E330()
{
  uint64_t v0;

  sub_23C7F70A4(v0);
}

uint64_t sub_23C87E338()
{
  return swift_retain();
}

uint64_t sub_23C87E36C()
{
  return 0x4543414C504552;
}

void sub_23C87E394()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
}

uint64_t sub_23C87E3A8(uint64_t a1)
{
  uint64_t v1;
  int v3;
  sqlite3_snapshot *ppSnapshot[2];

  ppSnapshot[1] = *(sqlite3_snapshot **)MEMORY[0x24BDAC8D0];
  ppSnapshot[0] = 0;
  swift_beginAccess();
  v3 = sqlite3_snapshot_get(*(sqlite3 **)(a1 + 16), "main", ppSnapshot);
  swift_release();
  if (v3 || !ppSnapshot[0])
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    *(sqlite3_snapshot **)(v1 + 16) = ppSnapshot[0];
  }
  return v1;
}

uint64_t sub_23C87E46C()
{
  uint64_t v0;

  sqlite3_snapshot_free(*(sqlite3_snapshot **)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WALSnapshot()
{
  return objc_opt_self();
}

uint64_t sub_23C87E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  _BYTE v18[40];
  _OWORD v19[3];
  char v20;
  _QWORD v21[23];

  sub_23C7DF56C(a6, (uint64_t)v18);
  sub_23C7E79A8(&qword_25430DA08);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v21[0] = a2;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = a5;
  sub_23C7F96B0(v21);
  sub_23C7F96E0(v21, (void *)(v11 + 32));
  sub_23C7DF56C((uint64_t)v18, (uint64_t)v17);
  v14 = 0u;
  v15 = 0u;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C811CFC((uint64_t)v17, (uint64_t)&v14);
  v20 = 2;
  v19[0] = v14;
  v19[1] = v15;
  v19[2] = v16;
  sub_23C7E7938((uint64_t)v18, &qword_25430DBD0);
  v12 = sub_23C87E5F0(a1, (uint64_t)v19);
  sub_23C7E7938((uint64_t)v19, &qword_25430DA18);
  return v12;
}

uint64_t sub_23C87E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_23C8546C8(a1, (uint64_t)&v9);
  if (!v2)
  {
    sub_23C7DF56C((uint64_t)&v10, (uint64_t)v8);
    sub_23C7E79A8(qword_25430D190);
    swift_allocObject();
    v4 = swift_retain_n();
    v6 = sub_23C8AD7FC(v4, 0, 0, (uint64_t)v8);
    v11 = MEMORY[0x24BEE4AF8];
    swift_beginAccess();
    if (*(_BYTE *)(v6 + 24) == 1)
    {
      swift_release();
      a2 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      swift_retain();
      v7 = swift_retain();
      sub_23C8E12CC(v7, v6, &v11);
      swift_release();
      *(_BYTE *)(v6 + 24) = 1;
      swift_release();
      a2 = v11;
    }
    sub_23C812C40((uint64_t)&v9);
    swift_release();
  }
  return a2;
}

BOOL static FTS3.Diacritics.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FTS3.Diacritics.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t FTS3.Diacritics.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

GRDBInternal::FTS3 __swiftcall FTS3.init()()
{
  _QWORD *v0;
  GRDBInternal::FTS3 result;

  *v0 = 863204454;
  v0[1] = 0xE400000000000000;
  return result;
}

uint64_t static FTS3.tokenize(_:withTokenizer:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (int *)type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a3;
  *(_WORD *)v8 = 1;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_DWORD *)(v8 + 23) = 0;
  *((_QWORD *)v8 + 4) = MEMORY[0x24BEE4AF8];
  *((_WORD *)v8 + 20) = 0;
  v8[64] = 2;
  *((_QWORD *)v8 + 9) = 0;
  *((_QWORD *)v8 + 10) = 0;
  v8[88] = -1;
  *((_QWORD *)v8 + 12) = 5;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  sub_23C910D4C();
  *(_QWORD *)&v8[v6[17]] = 0;
  *(_QWORD *)&v8[v6[18]] = 0;
  v8[v6[19]] = 1;
  v8[v6[20]] = 0;
  v10 = &v8[v6[21]];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v8[v6[22]];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v8[v6[23]];
  type metadata accessor for DatabaseQueue();
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v15 = *(_OWORD *)(a3 + 1);
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v8);
  v16 = v9;
  v17 = v15;
  v18 = a1;
  v19 = a2;
  v13 = sub_23C8A5020();
  swift_release();
  return v13;
}

uint64_t sub_23C87E980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  GRDBInternal::StatementArguments v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  __int128 v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = a1;
  swift_bridgeObjectRetain();
  sub_23C7F16C0();
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  if (v15 >= *(_QWORD *)(v13 + 24) >> 1)
  {
    sub_23C7F16C0();
    v14 = v30;
  }
  *(_QWORD *)(v14 + 16) = v15 + 1;
  v16 = v14 + 16 * v15;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(v16 + 40) = a3;
  v17 = *(_QWORD *)(a4 + 16);
  if (v17)
  {
    v31 = a5;
    swift_bridgeObjectRetain();
    v18 = a4 + 40;
    do
    {
      *(_QWORD *)&v32[0] = 34;
      *((_QWORD *)&v32[0] + 1) = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v19 = v32[0];
      v20 = *(_QWORD *)(v14 + 16);
      if (v20 >= *(_QWORD *)(v14 + 24) >> 1)
      {
        sub_23C7F16C0();
        v14 = v21;
      }
      v18 += 16;
      *(_QWORD *)(v14 + 16) = v20 + 1;
      *(_OWORD *)(v14 + 16 * v20 + 32) = v19;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    a5 = v31;
  }
  swift_bridgeObjectRetain();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C911634();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  v22._countAndFlagsBits = 0xD00000000000002FLL;
  v32[0] = MEMORY[0x24BEE4AF8];
  v23.values._rawValue = v32;
  v22._object = (void *)0x800000023C91E270;
  v24 = v34;
  Database.execute(sql:arguments:)(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    sub_23C7E79A8(&qword_25430D7C8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 64) = &protocol witness table for String;
    *(_QWORD *)(inited + 32) = a5;
    *(_QWORD *)(inited + 40) = a6;
    swift_bridgeObjectRetain();
    sub_23C7E53DC(inited, v32);
    v27 = v32[0];
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    v28 = sub_23C87E4B0(v24, 0xD00000000000003ALL, 0x800000023C91E2C0, v27, *((uint64_t *)&v27 + 1), (uint64_t)v32);
    sub_23C7E7938((uint64_t)v32, &qword_25430DBD0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a7 = v28;
  }
  return result;
}

uint64_t FTS3.moduleName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *FTS3.makeTableDefinition(configuration:)()
{
  _QWORD *result;

  type metadata accessor for FTS3TableDefinition();
  result = (_QWORD *)swift_allocObject();
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

uint64_t FTS3.moduleArguments(for:in:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[2];
  sub_23C7E6180();
  v3 = a1[4];
  if (v3)
  {
    v4 = a1[3];
    v5 = a1[5];
    if (*(_QWORD *)(v5 + 16))
    {
      sub_23C7E0808();
      sub_23C7E922C();
      swift_bridgeObjectRetain();
      sub_23C7E846C();
      swift_bridgeObjectRelease();
      sub_23C910F5C();
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v15 = v2;
        v16 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_23C7E649C();
        v7 = v5 + 40;
        do
        {
          swift_bridgeObjectRetain();
          sub_23C910F5C();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          v8 = *(_QWORD *)(v16 + 16);
          if (v8 >= *(_QWORD *)(v16 + 24) >> 1)
            sub_23C7E649C();
          v7 += 16;
          *(_QWORD *)(v16 + 16) = v8 + 1;
          v9 = v16 + 16 * v8;
          *(_QWORD *)(v9 + 32) = 34;
          *(_QWORD *)(v9 + 40) = 0xE100000000000000;
          --v6;
        }
        while (v6);
        sub_23C87F2B4(v4, v3);
        swift_bridgeObjectRelease();
        v2 = v15;
      }
      else
      {
        sub_23C7E4328();
      }
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23C7E0808();
      sub_23C7E922C();
      swift_bridgeObjectRetain();
      sub_23C7E846C();
      sub_23C7E4328();
    }
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7E4E14();
      v2 = v13;
    }
    v10 = *(_QWORD *)(v2 + 16);
    if (v10 >= *(_QWORD *)(v2 + 24) >> 1)
    {
      sub_23C7E4E14();
      v2 = v14;
    }
    *(_QWORD *)(v2 + 16) = v10 + 1;
    v11 = v2 + 16 * v10;
    *(_QWORD *)(v11 + 32) = 0x657A696E656B6F74;
    *(_QWORD *)(v11 + 40) = 0xE90000000000003DLL;
  }
  else
  {
    sub_23C7E0808();
  }
  return v2;
}

void sub_23C87F068()
{
  FTS3.makeTableDefinition()();
}

_QWORD *sub_23C87F074@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = FTS3.makeTableDefinition(configuration:)();
  *a1 = result;
  return result;
}

uint64_t sub_23C87F098(_QWORD **a1)
{
  return FTS3.moduleArguments(for:in:)(*a1);
}

uint64_t FTS3TableDefinition.tokenizer.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7E6180();
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return sub_23C87F284(v3, v4);
}

uint64_t FTS3TableDefinition.tokenizer.setter(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  sub_23C7E6180();
  v3 = v1[3];
  v4 = v1[4];
  *(_OWORD *)(v1 + 3) = v6;
  v1[5] = v2;
  return sub_23C87F2B4(v3, v4);
}

uint64_t (*FTS3TableDefinition.tokenizer.modify())()
{
  sub_23C7E6180();
  return j__swift_endAccess;
}

Swift::Void __swiftcall FTS3TableDefinition.column(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  sub_23C7F1248();
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  sub_23C7F1494();
  v5 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  v6 = v5 + 16 * v4;
  *(_QWORD *)(v6 + 32) = countAndFlagsBits;
  *(_QWORD *)(v6 + 40) = object;
}

uint64_t FTS3TableDefinition.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_23C87F2B4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t FTS3TableDefinition.__deallocating_deinit()
{
  FTS3TableDefinition.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23C87F244@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_23C87E980(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t type metadata accessor for FTS3TableDefinition()
{
  return objc_opt_self();
}

uint64_t sub_23C87F284(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C87F2B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_23C87F2E8()
{
  unint64_t result;

  result = qword_256BCCB38[0];
  if (!qword_256BCCB38[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for FTS3.Diacritics, &type metadata for FTS3.Diacritics);
    atomic_store(result, qword_256BCCB38);
  }
  return result;
}

ValueMetadata *type metadata accessor for FTS3()
{
  return &type metadata for FTS3;
}

uint64_t storeEnumTagSinglePayload for FTS3.Diacritics(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C87F380 + 4 * byte_23C916B95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C87F3B4 + 4 * asc_23C916B90[v4]))();
}

uint64_t sub_23C87F3B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C87F3BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C87F3C4);
  return result;
}

uint64_t sub_23C87F3D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C87F3D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C87F3DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C87F3E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FTS3.Diacritics()
{
  return &type metadata for FTS3.Diacritics;
}

uint64_t method lookup function for FTS3TableDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23C87F40C@<X0>(uint64_t *__src@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  _BYTE __srca[169];

  v11 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_BYTE *)a2 + 32);
  v8 = *__src;
  v7 = __src[1];
  memcpy(&__srca[7], __src, 0xA2uLL);
  sub_23C7E79A8(&qword_25430B4A0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 40) = v7;
  *(_BYTE *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 56) = v11;
  *(_QWORD *)(v9 + 72) = v4;
  *(_QWORD *)(v9 + 80) = v5;
  *(_BYTE *)(v9 + 88) = v6;
  memcpy((void *)(v9 + 89), __srca, 0xA9uLL);
  *(_BYTE *)(v9 + 258) = 0;
  *a3 = v9;
  return swift_bridgeObjectRetain();
}

uint64_t JoinAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t JoinAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*JoinAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C87F514(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C87F540(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C87F574(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = JoinAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

uint64_t sub_23C87F5B8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C87F5E4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for JoinAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for JoinAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JoinAssociation);
}

void sub_23C87F61C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v35 = MEMORY[0x24BEE4AF8];
  sub_23C7FD4EC();
  v29 = v5;
  v30 = v4;
  v27 = a2;
  v28 = a1;
  v26 = v6;
  if (v6)
  {
    sub_23C7E0808();
    sub_23C7DBCC8();
    v7 = (uint64_t *)(a2 + 40);
    v8 = (uint64_t *)(a1 + 40);
    v9 = v4;
    while (v9)
    {
      if (!v5)
        goto LABEL_23;
      v10 = *v8;
      v11 = *v7;
      v31 = *(v8 - 1);
      v32 = *(v7 - 1);
      v13 = *(_QWORD *)(v35 + 16);
      v12 = *(_QWORD *)(v35 + 24);
      swift_bridgeObjectRetain();
      sub_23C7DBBB8();
      if (v13 >= v12 >> 1)
        sub_23C7FD4EC();
      *(_QWORD *)(v35 + 16) = v13 + 1;
      v14 = (_QWORD *)(v35 + 32 * v13);
      v14[4] = v31;
      v14[5] = v10;
      --v5;
      v14[6] = v32;
      v14[7] = v11;
      --v9;
      v7 += 2;
      v8 += 2;
      if (!--v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
    sub_23C7E0808();
    sub_23C7DBCC8();
LABEL_13:
    v16 = v29;
    v15 = v30;
    if (v30 <= v29)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C7DF620();
      return;
    }
    v17 = v26;
    v33 = 16 * v26;
    v18 = v27;
    v19 = v28;
    while (v17 < v15)
    {
      if (v16 == v17)
        goto LABEL_21;
      if (v17 >= v16)
        goto LABEL_25;
      v20 = *(_QWORD *)(v19 + v33 + 40);
      v34 = *(_QWORD *)(v19 + v33 + 32);
      v22 = *(_QWORD *)(v18 + v33 + 32);
      v21 = *(_QWORD *)(v18 + v33 + 40);
      v24 = *(_QWORD *)(v35 + 16);
      v23 = *(_QWORD *)(v35 + 24);
      sub_23C7DBBB8();
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
        sub_23C7FD4EC();
      ++v17;
      *(_QWORD *)(v35 + 16) = v24 + 1;
      v25 = (_QWORD *)(v35 + 32 * v24);
      v25[4] = v34;
      v25[5] = v20;
      v25[6] = v22;
      v25[7] = v21;
      v19 += 16;
      v18 += 16;
      v16 = v29;
      v15 = v30;
      if (v30 == v17)
        goto LABEL_21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

void sub_23C87F828(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  _BYTE v20[8];
  _BYTE v21[8];
  __int128 v22;
  __int128 v23;
  _BYTE v24[8];
  __int128 v25;
  __int128 v26;
  _BYTE v27[8];

  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v4 = 0;
    v5 = (_OWORD *)(a1 + 48);
    v6 = MEMORY[0x24BEE4AF8];
    while (v4 < *(_QWORD *)(a1 + 16))
    {
      v7 = *((_QWORD *)v5 - 2);
      v8 = *((_QWORD *)v5 - 1);
      v16 = *v5;
      v17[0] = v7;
      v17[1] = v8;
      v18 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_23C87FE80((uint64_t)v17, (uint64_t)a2);
      if (v2)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v26 = *a2;
        sub_23C880200((uint64_t)&v26);
        v25 = a2[1];
        sub_23C880200((uint64_t)&v25);
        sub_23C8801B8((uint64_t)(a2 + 2), (uint64_t)v27);
        sub_23C863D04((uint64_t)v27);
        sub_23C8801B8((uint64_t)a2 + 40, (uint64_t)v24);
        v13 = v24;
        goto LABEL_15;
      }
      if (v9)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v19 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23C7FD4B8();
          v6 = v19;
        }
        v11 = *(_QWORD *)(v6 + 16);
        if (v11 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_23C7FD4B8();
          v6 = v19;
        }
        *(_QWORD *)(v6 + 16) = v11 + 1;
        v12 = v6 + 32 * v11;
        *(_QWORD *)(v12 + 32) = v7;
        *(_QWORD *)(v12 + 40) = v8;
        *(_OWORD *)(v12 + 48) = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v4;
      v5 += 2;
      if (v14 == v4)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v23 = *a2;
    sub_23C880200((uint64_t)&v23);
    v22 = a2[1];
    sub_23C880200((uint64_t)&v22);
    sub_23C8801B8((uint64_t)(a2 + 2), (uint64_t)v21);
    sub_23C863D04((uint64_t)v21);
    sub_23C8801B8((uint64_t)a2 + 40, (uint64_t)v20);
    v13 = v20;
LABEL_15:
    sub_23C863D04((uint64_t)v13);
  }
}

void sub_23C87FA54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _BYTE v16[8];
  _BYTE v17[8];
  uint64_t v18;

  v2 = v0[4];
  if (!v2
    || (sub_23C8801B8((uint64_t)(v0 + 5), (uint64_t)v17), sub_23C8801B8((uint64_t)v17, (uint64_t)&v18), (v3 = v18) == 0))
  {
    Database.foreignKeys(on:)(*v0, v0[1]);
    if (v1)
      goto LABEL_9;
    v5 = v4;
    v6 = v0[2];
    sub_23C8801B8((uint64_t)(v0 + 5), (uint64_t)v16);
    sub_23C7DBBB8();
    sub_23C7E0808();
    sub_23C7DF858();
    sub_23C863AB4((uint64_t)v16);
    sub_23C87F828(v5, (__int128 *)v0);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      sub_23C7DBBB8();
      swift_bridgeObjectRetain();
      sub_23C7E087C();
      if (v8 != 1)
      {
        sub_23C911634();
        swift_bridgeObjectRelease();
        v13 = 0xD00000000000001BLL;
        v14 = 0x800000023C91E330;
        sub_23C7E0808();
        sub_23C7E9950();
        swift_bridgeObjectRelease();
        sub_23C7E4E20();
        sub_23C7DF858();
        sub_23C7E6318();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23C7E087C();
    if (v2)
    {
      Database.primaryKey(_:)(&v13, v6);
      v9 = v13;
      if (v15)
      {
        if (v15 == 1)
          v10 = (_OWORD *)v13;
        else
          v10 = &unk_250D84648;
      }
      else
      {
        v11 = v14;
        sub_23C7E79A8(&qword_25430DA10);
        v10 = (_OWORD *)swift_allocObject();
        v10[1] = xmmword_23C912A20;
        *((_QWORD *)v10 + 4) = v9;
        *((_QWORD *)v10 + 5) = v11;
      }
      if (*(_QWORD *)(v2 + 16) == *((_QWORD *)v10 + 2))
      {
        v12 = sub_23C7DBBB8();
        sub_23C87F61C(v12, (uint64_t)v10);
        sub_23C7E087C();
        goto LABEL_8;
      }
      sub_23C7E087C();
    }
    v13 = 0;
    v14 = 0xE000000000000000;
    sub_23C911634();
    swift_bridgeObjectRelease();
    v13 = 0xD000000000000021;
    v14 = 0x800000023C91E350;
    sub_23C7E0808();
    sub_23C7E9950();
    swift_bridgeObjectRelease();
    sub_23C7E4E20();
    sub_23C7DF858();
    sub_23C7E6318();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v18 + 16))
  {
    sub_23C7DBBB8();
    sub_23C863AB4((uint64_t)v17);
    sub_23C87F61C(v2, v3);
    swift_bridgeObjectRelease();
    sub_23C863D04((uint64_t)v17);
LABEL_9:
    sub_23C7DF620();
    return;
  }
LABEL_22:
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C87FD90(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if ((a1 & 1) != 0)
  {
    if (v9)
    {
      sub_23C7E09D4();
      v10 = v16;
      v11 = a2 + 56;
      do
      {
        sub_23C7E923C();
        sub_23C7DBCC8();
        if (v6 >= v7 >> 1)
        {
          sub_23C7E4338();
          v10 = v16;
        }
        v11 += 32;
        *(_QWORD *)(v10 + 16) = v3;
        v12 = (_QWORD *)(v10 + 32 * v6);
        v12[4] = v4;
        v12[5] = a2;
        v12[6] = v5;
        v12[7] = v2;
        --v9;
      }
      while (v9);
    }
  }
  else if (v9)
  {
    sub_23C7E09D4();
    v10 = v16;
    v13 = a2 + 56;
    do
    {
      sub_23C7E923C();
      sub_23C7DBCC8();
      if (v6 >= v7 >> 1)
      {
        sub_23C7E4338();
        v10 = v16;
      }
      v13 += 32;
      *(_QWORD *)(v10 + 16) = v3;
      v14 = (_QWORD *)(v10 + 32 * v6);
      v14[4] = v5;
      v14[5] = v2;
      v14[6] = v4;
      v14[7] = a2;
      --v9;
    }
    while (v9);
  }
  return v10;
}

BOOL sub_23C87FE80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = sub_23C910E18();
  v6 = v5;
  if (v4 == sub_23C910E18() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_23C911A18();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v9 & 1) == 0)
      return result;
  }
  v11 = *(_QWORD *)(a2 + 32);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRetain();
    v13 = sub_23C911298();
    v33 = v13;
    if (v12)
    {
      v14 = v11 + 40;
      do
      {
        sub_23C910E18();
        sub_23C8FA41C();
        swift_bridgeObjectRelease();
        v14 += 16;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v15 = v33;
    }
    else
    {
      v15 = v13;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v16 = sub_23C911298();
    v34 = v16;
    v17 = *(_QWORD *)(v3 + 16);
    if (v17)
    {
      v18 = v3 + 40;
      do
      {
        sub_23C910E18();
        sub_23C8FA41C();
        swift_bridgeObjectRelease();
        v18 += 32;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      v19 = v34;
    }
    else
    {
      v19 = v16;
      swift_bridgeObjectRelease();
    }
    sub_23C866918(v15, v19);
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      return 0;
  }
  v22 = *(_QWORD *)(a2 + 40);
  if (!v22)
    return 1;
  v23 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRetain();
  v24 = sub_23C911298();
  v35 = v24;
  if (v23)
  {
    v25 = v22 + 40;
    do
    {
      sub_23C910E18();
      sub_23C8FA41C();
      swift_bridgeObjectRelease();
      v25 += 16;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v26 = v35;
  }
  else
  {
    v26 = v24;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v27 = sub_23C911298();
  v36 = v27;
  v28 = *(_QWORD *)(v3 + 16);
  if (v28)
  {
    v29 = v3 + 56;
    do
    {
      sub_23C910E18();
      sub_23C8FA41C();
      swift_bridgeObjectRelease();
      v29 += 32;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    v30 = v36;
  }
  else
  {
    v30 = v27;
    swift_bridgeObjectRelease();
  }
  sub_23C866918(v26, v30);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v32 & 1) != 0;
}

uint64_t sub_23C8801B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_25430B650);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C880200(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t DatabaseBackupProgress.remainingPageCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DatabaseBackupProgress.totalPageCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t DatabaseBackupProgress.completedPageCount.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  result = v1 - *v0;
  if (__OFSUB__(v1, *v0))
    __break(1u);
  return result;
}

uint64_t DatabaseBackupProgress.isCompleted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t getEnumTagSinglePayload for DatabaseBackupProgress(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseBackupProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseBackupProgress()
{
  return &type metadata for DatabaseBackupProgress;
}

void TableAlias.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7DB388();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  sub_23C7DB3A0();
}

uint64_t sub_23C88032C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[162];
  _QWORD __dst[22];

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 48);
  sub_23C910E18();
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_23C7E94B8(), (v9 & 1) != 0))
  {
    memcpy(__dst, (const void *)(*(_QWORD *)(v7 + 56) + 176 * v8), 0xABuLL);
    sub_23C8133B0((uint64_t)__dst);
    swift_bridgeObjectRelease();
    sub_23C880584();
    v11 = v10;
    if (__dst[0])
    {
      v12 = *(_QWORD *)(__dst[0] + 16);
      swift_release();
      sub_23C8134EC((uint64_t)__dst);
    }
    else
    {
      memcpy(v18, &__dst[1], sizeof(v18));
      sub_23C881AB8((__n128 *)&__dst[1]);
      v12 = sub_23C88F348(v11);
      sub_23C881AB8((__n128 *)&__dst[1]);
      swift_release();
      sub_23C8134EC((uint64_t)__dst);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v4 + 16);
    v13 = *(_QWORD *)(v4 + 24);
    swift_retain();
    v12 = v14;
    if (v13 < 0)
    {
      v12 = sub_23C88032C(a1, a2);
      sub_23C7DD64C(v14, v13);
    }
    else
    {
      Database.columns(in:)(a1, a2);
      v16 = v15;
      swift_release();
      if (!v3)
      {
        v12 = *(_QWORD *)(v16 + 16);
        swift_bridgeObjectRelease();
      }
    }
  }
  return v12;
}

void sub_23C8804C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  sub_23C880A4C();
  if (v4)
  {
    swift_bridgeObjectRelease();
    sub_23C88095C();
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
    if (!sub_23C8685E0(a1, v5) || sub_23C7E4618(v5) >= 2)
      sub_23C8805CC(a1);
  }
  sub_23C7DB3A0();
}

BOOL static TableAlias.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C8808FC();
  v1 = v0;
  swift_release();
  sub_23C8808FC();
  v3 = v2;
  swift_release();
  return v1 == v3;
}

void sub_23C880584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = swift_retain();
  if (v1 < 0)
  {
    sub_23C880584(v2);
    v3 = sub_23C7E31EC();
    sub_23C7DD64C(v3, v4);
  }
  sub_23C7DB3A0();
}

void sub_23C8805CC(uint64_t a1)
{
  _QWORD *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(v1[4] + 16))
  {
    swift_retain();
    sub_23C8224CC();
    if ((v3 & 1) != 0)
    {
      sub_23C7DC46C();
      sub_23C7DE904();
      goto LABEL_8;
    }
    sub_23C7DE904();
  }
  v4 = v1[3];
  if (v4 < 0)
  {
    v5 = v1[2];
    sub_23C7E62C0();
    sub_23C8805CC(a1);
    sub_23C7DD64C(v5, v4);
  }
  else
  {
    sub_23C88095C();
  }
LABEL_8:
  sub_23C7DF5B4();
}

void sub_23C880678(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  *a2 = sub_23C88072C(a2 + 2, *a1, a1[1], a1 + 2);
  a2[1] = v3;
  sub_23C7DB390();
}

_QWORD *sub_23C8806A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a1;
  v4[3] = 0x8000000000000000;
  swift_retain();
  v4[4] = sub_23C7E34E4(a2);
  sub_23C7E4038(a2);
  v4[5] = v8;
  v9 = sub_23C7E4638(a3, a4, (void (*)(_QWORD *__return_ptr, _BYTE *))sub_23C880674, 0);
  swift_release();
  v4[6] = v9;
  return v4;
}

uint64_t sub_23C88072C(void *a1, int a2, int a3, void *__src)
{
  uint64_t v6;
  _BYTE v8[176];

  memcpy(v8, __src, 0xABuLL);
  v6 = sub_23C910E18();
  memcpy(a1, __src, 0xABuLL);
  sub_23C8133B0((uint64_t)v8);
  return v6;
}

void sub_23C8807A8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7DB388();
  sub_23C7DC47C();
  sub_23C7DBCC8();
  sub_23C7DC46C();
  sub_23C7DF858();
  v0 = sub_23C7E6EC4();
  sub_23C8806A4(v0, v1, v2, v3);
  sub_23C7DF5B4();
}

void sub_23C8807FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  sub_23C8805CC(a1);
  v2 = v1;
  if (v4 == sub_23C880978() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_23C7E31EC();
    v6 = sub_23C7E5F08();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      sub_23C7DB624();
  }
  sub_23C7E31EC();
  sub_23C7DB3A0();
}

void sub_23C880878()
{
  type metadata accessor for StatementArgumentsSink();
  sub_23C7DB388();
  qword_254310428 = sub_23C7E0B8C(1);
  sub_23C7DB390();
}

uint64_t sub_23C8808AC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v2 += 16;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  sub_23C8818E4(a1, v2);
  return sub_23C8812E4(v3, v4, v5, v6, v7);
}

void sub_23C8808FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v0 + 48) == 2)
  {
    v1 = sub_23C7DC47C();
    sub_23C8808FC(v1);
    v2 = sub_23C7E6EC4();
    sub_23C7ED0F4(v2, v3, v4, v5);
    sub_23C7DF5B4();
  }
  else
  {
    swift_retain();
  }
}

void sub_23C88095C()
{
  uint64_t v0;

  sub_23C880A4C();
  if (!v0)
    sub_23C880978();
}

uint64_t sub_23C880978()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 == 1)
  {
    sub_23C7DF858();
    return sub_23C7E31EC();
  }
  if (v1 == 2)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v0 + 40);
    v4 = swift_retain();
    sub_23C880978(v4);
    v5 = sub_23C7E31EC();
    sub_23C7ED0F4(v5, v6, v3, v2);
    return sub_23C7E31EC();
  }
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

void sub_23C880A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 48))
  {
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    if (*(_BYTE *)(v0 + 48) == 1)
    {
      sub_23C7DC46C();
    }
    else
    {
      v5 = sub_23C7E62C0();
      sub_23C880A4C(v5);
      sub_23C7ED0F4(v2, v1, v3, v4);
    }
  }
  else
  {
    sub_23C7DBCC8();
  }
  sub_23C7DF5B4();
}

uint64_t TableAlias.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  return v2;
}

uint64_t sub_23C880AE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = v1;
  if (v1 != result)
  {
    v3 = result;
    v4 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 40);
    if (*(_BYTE *)(v2 + 48))
    {
      if (*(_BYTE *)(v2 + 48) != 1)
      {
        sub_23C7E62C0();
        sub_23C880AE4(v3);
        v12 = sub_23C7E6D14();
        return sub_23C8812E4(v12, v13, v14, v15, 2);
      }
      sub_23C7DC46C();
      if (v6)
      {
        sub_23C880E34(v7, v6);
        swift_bridgeObjectRelease();
      }
    }
    else if (v5)
    {
      swift_bridgeObjectRetain();
      sub_23C880E34(v4, v5);
      v8 = sub_23C7E6D14();
      sub_23C8812E4(v8, v9, v10, v11, 0);
    }
    v16 = (unint64_t)v3;
    v17 = 0;
    v18 = 0;
    v19 = 2;
    sub_23C7DC47C();
    return sub_23C8808AC(&v16);
  }
  return result;
}

uint64_t sub_23C880BD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = v1;
  if (v1 == a1)
  {
    swift_retain();
  }
  else
  {
    sub_23C8808FC();
    v4 = v3;
    sub_23C8808FC();
    v2 = v5;
    v6 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    v9 = *(_QWORD *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 40);
    v10 = *(unsigned __int8 *)(v4 + 48);
    v11 = *(_QWORD *)(v5 + 16);
    v13 = *(_QWORD *)(v5 + 32);
    v12 = *(_QWORD *)(v5 + 40);
    if (v10 == 1 && *(_BYTE *)(v5 + 48) == 1)
    {
      v29 = v6 == v11 && v7 == *(_QWORD *)(v5 + 24);
      v30 = *(_QWORD *)(v5 + 24);
      v73 = *(_QWORD *)(v4 + 16);
      if (v29
        || (v31 = *(_QWORD *)(v5 + 16),
            v32 = *(_QWORD *)(v4 + 40),
            v33 = *(_QWORD *)(v4 + 16),
            v34 = sub_23C911A18(),
            v6 = v33,
            v8 = v32,
            v11 = v31,
            (v34 & 1) != 0))
      {
        v35 = v11;
        v36 = v12;
        if (!v8 || !v12)
          goto LABEL_21;
        if (v9 == v13 && v8 == v12)
          goto LABEL_21;
        v38 = v12;
        v39 = v13;
        v40 = v8;
        v41 = v6;
        v42 = sub_23C911A18();
        v6 = v41;
        v8 = v40;
        v13 = v39;
        v36 = v38;
        if ((v42 & 1) != 0)
        {
LABEL_21:
          sub_23C7E4350(v6, v7, v8);
          sub_23C7E4E34();
          v43 = sub_23C880AE4(v2);
          sub_23C7E847C(v43, v44, v45, v46, v47, v48, v49, v50, v72, v73);
          sub_23C8812E4(v35, v30, v13, v36, 1);
          swift_release();
          return v2;
        }
        sub_23C7E4350(v41, v7, v8);
        v64 = sub_23C7E4E34();
        sub_23C7E847C(v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
        v60 = v35;
        v61 = v30;
        v62 = v13;
        v63 = v38;
      }
      else
      {
        sub_23C7E4350(v33, v7, v8);
        v52 = sub_23C8814B4(v31, v30, v13, v12, 1);
        sub_23C7E847C(v52, v53, v54, v55, v56, v57, v58, v59, v72, v73);
        v60 = v31;
        v61 = v30;
        v62 = v13;
        v63 = v12;
      }
      sub_23C8812E4(v60, v61, v62, v63, 1);
    }
    else
    {
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *(_QWORD *)(v4 + 32);
      v74 = v16;
      v17 = *(_QWORD *)(v4 + 40);
      v18 = *(_QWORD *)(v4 + 16);
      sub_23C8814B4(v18, v15, v16, v8, v10);
      v19 = sub_23C7E9648();
      sub_23C8814B4(v19, v20, v21, v22, v23);
      sub_23C8812E4(v18, v7, v74, v17, v10);
      v24 = sub_23C7E9648();
      sub_23C8812E4(v24, v25, v26, v27, v28);
    }
    swift_release();
    sub_23C7DE904();
    return 0;
  }
  return v2;
}

uint64_t sub_23C880E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (!*(_BYTE *)(v2 + 48))
  {
    *(_QWORD *)&v10 = a1;
    *((_QWORD *)&v10 + 1) = a2;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 48) == 1)
  {
    *(_QWORD *)&v10 = *(_QWORD *)(v2 + 16);
    *((_QWORD *)&v10 + 1) = v5;
    v11 = a1;
    v12 = a2;
    v13 = 1;
    sub_23C7DF858();
LABEL_5:
    swift_bridgeObjectRetain();
    return sub_23C8808AC(&v10);
  }
  v9 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  sub_23C7E62C0();
  sub_23C880E34(a1, a2);
  return sub_23C8812E4(v6, v5, v9, v8, 2);
}

uint64_t sub_23C880F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 48))
  {
    if (*(_BYTE *)(v2 + 48) == 1)
    {
      sub_23C7DF858();
      v7 = sub_23C910E18();
      v9 = v8;
      if (v7 == sub_23C910E18() && v9 == v10)
      {
        sub_23C7DB624();
        return swift_bridgeObjectRelease_n();
      }
      else
      {
        v12 = sub_23C7E5F08();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) != 0)
        {
          return swift_bridgeObjectRelease();
        }
        else
        {
          result = sub_23C9117B4();
          __break(1u);
        }
      }
    }
    else
    {
      swift_retain();
      sub_23C880F04(a1, a2);
      v18 = sub_23C7E65AC();
      return sub_23C8812E4(v18, v19, v20, v21, 2);
    }
  }
  else
  {
    *(_QWORD *)&v22 = a1;
    *((_QWORD *)&v22 + 1) = a2;
    v23 = v6;
    v24 = v5;
    v25 = 1;
    v14 = sub_23C7E65AC();
    sub_23C8814B4(v14, v15, v16, v17, 0);
    sub_23C7DC46C();
    return sub_23C8808AC(&v22);
  }
  return result;
}

uint64_t sub_23C88109C(_QWORD *a1)
{
  _BYTE v2[184];
  _BYTE __src[184];

  sub_23C7DEA80(a1);
  sub_23C7E1874();
  memcpy(v2, __src, sizeof(v2));
  sub_23C7EE4D8();
  sub_23C809958();
  return sub_23C8466B0((uint64_t)__src);
}

void sub_23C8810F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32[10];

  v2 = a1[3];
  v1 = a1[4];
  sub_23C7E7E34(a1, v2);
  v3 = (*(_QWORD *(**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v32, v2);
  sub_23C7EC734(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32[0].n128_i8[0]);
  sub_23C7EE4D8();
  sub_23C86E598();
  sub_23C8811C8(v32);
}

void sub_23C881170(_QWORD *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30[10];

  sub_23C7DEA80(a1);
  v1 = sub_23C7E1874();
  sub_23C7EC734(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30[0].n128_i8[0]);
  sub_23C7EE4D8();
  sub_23C8C9E54();
  sub_23C8811C8(v30);
}

void sub_23C8811C8(__n128 *a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v1 = sub_23C7E2108(a1);
  sub_23C7DB4F0(v2, v3, v4, v5, v6, v7, v8, v9, v10, v1);
  sub_23C7E4C90();
}

uint64_t sub_23C881204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  sub_23C813794((uint64_t)v5);
  sub_23C800B48(v5, a3);
  sub_23C7DF858();
  return sub_23C7DC47C();
}

uint64_t sub_23C881258@<X0>(void *a1@<X8>)
{
  uint64_t v3;
  char v4;

  v4 = 0;
  sub_23C874820((uint64_t)&v3);
  sub_23C800B48(&v3, a1);
  return sub_23C7DC47C();
}

void sub_23C88129C()
{
  sub_23C8808FC();
  swift_release();
  sub_23C911BC8();
  sub_23C7DB390();
}

uint64_t TableAlias.deinit()
{
  uint64_t v0;

  sub_23C7EDE74();
  return v0;
}

uint64_t sub_23C8812E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 2)
    return swift_release();
  if (a5 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (a5)
  {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t TableAlias.__deallocating_deinit()
{
  sub_23C7EDE74();
  return swift_deallocClassInstance();
}

uint64_t sub_23C881354()
{
  sub_23C911BBC();
  sub_23C88129C();
  return sub_23C911BF8();
}

uint64_t sub_23C881390()
{
  return sub_23C881354();
}

void sub_23C8813B0()
{
  sub_23C88129C();
  sub_23C7DB390();
}

uint64_t sub_23C8813CC()
{
  return sub_23C7E4B90(&qword_25430DA28, (uint64_t)&protocol conformance descriptor for TableAlias);
}

uint64_t sub_23C8813F0()
{
  sub_23C911BBC();
  sub_23C88129C();
  return sub_23C911BF8();
}

BOOL sub_23C88142C()
{
  return static TableAlias.== infix(_:_:)();
}

uint64_t method lookup function for TableAlias()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TableAlias.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of TableAlias.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of TableAlias.exists.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of TableAlias.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of TableAlias.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_23C8814B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  switch(a5)
  {
    case 2:
      return swift_retain();
    case 1:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 0:
      return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for TableAlias.Impl(uint64_t a1)
{
  return sub_23C8812E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for TableAlias.Impl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C8814B4(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TableAlias.Impl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23C8814B4(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_23C8812E4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TableAlias.Impl(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_23C8812E4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableAlias.Impl(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableAlias.Impl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C8816C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TableAlias.Impl()
{
  return &type metadata for TableAlias.Impl;
}

uint64_t *initializeBufferWithCopyOfBuffer for SQLGenerationContext.Parent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23C881714(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t sub_23C881714(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
    swift_retain();
  return swift_retain();
}

uint64_t destroy for SQLGenerationContext.Parent(uint64_t *a1)
{
  return sub_23C7DD64C(*a1, a1[1]);
}

uint64_t *assignWithCopy for SQLGenerationContext.Parent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23C881714(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23C7DD64C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for SQLGenerationContext.Parent(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23C7DD64C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLGenerationContext.Parent(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 16382;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 50) >> 13) | (2
                                                               * ((*(_QWORD *)(a1 + 8) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
      if (v2 >= 0x3FFE)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SQLGenerationContext.Parent(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)result = a2 - 0x3FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_23C8818A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 63;
}

uint64_t sub_23C8818AC(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_23C8818BC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for SQLGenerationContext.Parent()
{
  return &type metadata for SQLGenerationContext.Parent;
}

uint64_t sub_23C8818E4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23C8818FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;

  v11 = sub_23C881A88(a1, a2);
  v21 = v11;
  if (v11 < 0x4000)
    goto LABEL_19;
  v12 = v11 >> 14;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_23C7DFC90();
    v13 = sub_23C910FF8();
    v15 = v14;
    swift_bridgeObjectRelease();
    v16 = v13 == a3 && v15 == a4;
    if (!v16 && (sub_23C911A18() & 1) != 0)
      break;
    if (v13 == a5 && v15 == a6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_23C911A18();
      result = swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_18;
    }
    v11 = sub_23C7DFC90();
    v12 = v11 >> 14;
    if (v11 < 0x4000)
      goto LABEL_19;
  }
  result = swift_bridgeObjectRelease();
LABEL_18:
  if (v21 >> 14 < v12)
  {
    __break(1u);
  }
  else
  {
LABEL_19:
    v20 = sub_23C8F04DC(v21, v11, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

uint64_t sub_23C881A88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return v3 | (v2 << 16);
}

void sub_23C881AB8(__n128 *a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v1 = sub_23C7E2108(a1);
  sub_23C7DB4F0(v2, v3, v4, v5, v6, v7, v8, v9, v10, v1);
  sub_23C7E4C90();
}

Swift::Int32 __swiftcall Data.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  Swift::Int32 result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_23C881B38()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C7E8494(v0, v1 & 0xFFFFFFFFFFFFLL, BYTE6(v1));
}

uint64_t static Data.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v2 = sub_23C910EB4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)a1;
  v7 = *(unsigned __int8 *)(a1 + 16);
  if (v7 == 3)
  {
    sub_23C7ED944(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  }
  else if (v7 == 2)
  {
    sub_23C910EA8();
    v6 = sub_23C910E84();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    return 0;
  }
  return v6;
}

const void *Data.init(sqliteStatement:index:)(sqlite3_stmt *a1, int a2)
{
  const void *result;
  const void *v5;
  int v6;

  result = sqlite3_column_blob(a1, a2);
  if (result)
  {
    v5 = result;
    v6 = sqlite3_column_bytes(a1, a2);
    return (const void *)MEMORY[0x242624738](v5, v6);
  }
  return result;
}

uint64_t sub_23C881D54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = static Data.fromDatabaseValue(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

const void *sub_23C881D78@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  const void *result;
  uint64_t v5;

  result = Data.init(sqliteStatement:index:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23C881D9C(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Data.bind(to:at:)(to, at);
}

id sub_23C881DA4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1520]), sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_, 0, 0, 0, 0, 0, 0);
  qword_256BCCBC0 = (uint64_t)result;
  return result;
}

void NSNumber.databaseValue.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  const char *v32;
  id v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  float v41;
  double v42;
  BOOL v43;
  BOOL v44;

  v2 = v1;
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
    goto LABEL_9;
  v5 = (void *)v4;
  sub_23C88268C();
  v6 = qword_256BCBA60;
  v7 = v1;
  if (v6 != -1)
    swift_once();
  v8 = objc_msgSend(v5, sel_decimalNumberByRoundingAccordingToBehavior_, qword_256BCCBC0);
  v9 = sub_23C9114A8();

  if ((v9 & 1) == 0
    || (v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1518]), sel_initWithLongLong_, 0x7FFFFFFFFFFFFFFFLL),
        v11 = sub_23C7E09EC(),
        v10,
        v11 == (id)1)
    || (v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1518]), sel_initWithLongLong_, 0x8000000000000000),
        v13 = sub_23C7E09EC(),
        v12,
        v13 == (id)-1))
  {

LABEL_9:
    v16 = objc_retainAutorelease(v2);
    objc_msgSend(v16, sel_objCType);
    v17 = sub_23C910F74();
    v19 = v17 == 99 && v18 == 0xE100000000000000;
    if (v19 || (v20 = v17, v21 = v18, (sub_23C7E84A4() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v16, sel_charValue);
LABEL_15:
      v15 = 0;
      v23 = v22;
LABEL_23:
      *(_QWORD *)a1 = v23;
      goto LABEL_24;
    }
    v24 = v20 == 67 && v21 == 0xE100000000000000;
    if (v24 || (sub_23C7E84A4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v16, sel_unsignedCharValue);
LABEL_22:
      v15 = 0;
      v23 = v25;
      goto LABEL_23;
    }
    v26 = v20 == 115 && v21 == 0xE100000000000000;
    if (v26 || (sub_23C7E84A4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v16, sel_shortValue);
      goto LABEL_15;
    }
    v27 = v20 == 83 && v21 == 0xE100000000000000;
    if (v27 || (sub_23C7E84A4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v16, sel_unsignedShortValue);
      goto LABEL_22;
    }
    v28 = v20 == 105 && v21 == 0xE100000000000000;
    if (v28 || (sub_23C7E84A4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v16, sel_intValue);
      goto LABEL_15;
    }
    v29 = v20 == 73 && v21 == 0xE100000000000000;
    if (v29 || (sub_23C7E84A4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v16, sel_unsignedIntValue);
      goto LABEL_22;
    }
    v30 = v20 == 108 && v21 == 0xE100000000000000;
    if (v30 || (sub_23C7E84A4() & 1) != 0)
    {
      v31 = swift_bridgeObjectRelease();
      v32 = sel_integerValue;
LABEL_55:
      v33 = sub_23C7E3348(v31, v32);
      v15 = 0;
      *(_QWORD *)a1 = v33;
      goto LABEL_24;
    }
    v34 = v20 == 76 && v21 == 0xE100000000000000;
    if (v34 || (sub_23C7E84A4() & 1) != 0)
    {
      v35 = swift_bridgeObjectRelease();
      v36 = (unint64_t)sub_23C7E3348(v35, sel_unsignedIntegerValue);
      if ((v36 & 0x8000000000000000) == 0)
        goto LABEL_62;
    }
    else
    {
      v37 = v20 == 113 && v21 == 0xE100000000000000;
      if (v37 || (sub_23C7E84A4() & 1) != 0)
      {
        v31 = swift_bridgeObjectRelease();
        v32 = sel_longLongValue;
        goto LABEL_55;
      }
      v38 = v20 == 81 && v21 == 0xE100000000000000;
      if (!v38 && (sub_23C7E84A4() & 1) == 0)
      {
        v40 = v20 == 102 && v21 == 0xE100000000000000;
        if (v40 || (sub_23C7E84A4() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          objc_msgSend(v16, sel_floatValue);
          v42 = v41;
        }
        else
        {
          v43 = v20 == 100 && v21 == 0xE100000000000000;
          if (!v43 && (sub_23C7E84A4() & 1) == 0)
          {
            v44 = v20 == 66 && v21 == 0xE100000000000000;
            if (!v44 && (sub_23C7E84A4() & 1) == 0)
              goto LABEL_97;
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v16, sel_BOOLValue);
            goto LABEL_22;
          }
          swift_bridgeObjectRelease();
          objc_msgSend(v16, sel_doubleValue);
        }
        *(double *)a1 = v42;
        v15 = 1;
        goto LABEL_24;
      }
      v39 = swift_bridgeObjectRelease();
      v36 = (unint64_t)sub_23C7E3348(v39, sel_unsignedLongLongValue);
      if ((v36 & 0x8000000000000000) == 0)
      {
LABEL_62:
        v15 = 0;
        *(_QWORD *)a1 = v36;
        goto LABEL_24;
      }
    }
    sub_23C7E8A78();
    sub_23C7E9268();
    sub_23C911880();
    sub_23C7E4E4C();
    swift_bridgeObjectRelease();
    sub_23C7E4364();
    while (1)
    {
      sub_23C9117B4();
      __break(1u);
LABEL_97:
      sub_23C911634();
      sub_23C7E4364();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
    }
  }
  v14 = objc_msgSend(v7, sel_longLongValue);

  v15 = 0;
  *(_QWORD *)a1 = v14;
LABEL_24:
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v15;
}

id static NSNumber.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  int v6;
  id result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;

  v2 = sub_23C7E79A8(&qword_25430B218);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(double *)a1;
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithLongLong_, *(_QWORD *)&v5);
  if (v6 != 2)
  {
    if (v6 == 1)
      return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDouble_, v5);
    return 0;
  }
  if (qword_256BCBA68 != -1)
    swift_once();
  v8 = sub_23C910BCC();
  v9 = sub_23C805EE8(v8, (uint64_t)qword_256BCCBC8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, v9, v8);
  sub_23C7DE70C((uint64_t)v4, 0, 1, v8);
  v10 = sub_23C9114C0();
  v12 = v11;
  v14 = v13;
  sub_23C876030((uint64_t)v4);
  result = 0;
  if ((v14 & 0x100000000) == 0)
  {
    v15 = objc_allocWithZone(MEMORY[0x24BDD1518]);
    v18[0] = v10;
    v18[1] = v12;
    v19 = v14;
    v16 = objc_msgSend(v15, sel_initWithDecimal_, v18);
    result = (id)swift_dynamicCastUnknownClass();
    if (!result)
    {

      return 0;
    }
  }
  return result;
}

void sub_23C8825E4(uint64_t a1@<X8>)
{
  NSNumber.databaseValue.getter(a1);
}

id sub_23C882604@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = static NSNumber.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t sub_23C882628()
{
  uint64_t v0;

  v0 = sub_23C910BCC();
  sub_23C805F48(v0, qword_256BCCBC8);
  sub_23C805EE8(v0, (uint64_t)qword_256BCCBC8);
  return sub_23C910BB4();
}

unint64_t sub_23C88268C()
{
  unint64_t result;

  result = qword_256BCCBE0;
  if (!qword_256BCCBE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256BCCBE0);
  }
  return result;
}

uint64_t FTS3Pattern.rawPattern.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

GRDBInternal::FTS3Pattern __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FTS3Pattern.init(rawPattern:)(Swift::String rawPattern)
{
  uint64_t *v1;
  void *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v5;
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  GRDBInternal::FTS3Pattern result;
  _BYTE v23[16];
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  object = rawPattern._object;
  countAndFlagsBits = rawPattern._countAndFlagsBits;
  v5 = v1;
  v6 = (int *)type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)v8 = 1;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_DWORD *)(v8 + 23) = 0;
  *((_QWORD *)v8 + 4) = MEMORY[0x24BEE4AF8];
  *((_WORD *)v8 + 20) = 0;
  v8[64] = 2;
  *((_QWORD *)v8 + 9) = 0;
  *((_QWORD *)v8 + 10) = 0;
  v8[88] = -1;
  *((_QWORD *)v8 + 12) = 5;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  sub_23C910D4C();
  *(_QWORD *)&v8[v6[17]] = 0;
  *(_QWORD *)&v8[v6[18]] = 0;
  v8[v6[19]] = 1;
  v8[v6[20]] = 0;
  v9 = &v8[v6[21]];
  *v9 = 0;
  v9[1] = 0;
  v10 = &v8[v6[22]];
  *v10 = 0;
  v10[1] = 0;
  v11 = &v8[v6[23]];
  type metadata accessor for DatabaseQueue();
  *v11 = 0;
  v11[1] = 0;
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v8);
  v24 = countAndFlagsBits;
  v25 = object;
  sub_23C8A4EEC((uint64_t)sub_23C883174, (uint64_t)v23);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v29 = v2;
    v12 = v2;
    sub_23C7E79A8(&qword_25430CCC8);
    if (swift_dynamicCast())
    {

      v13 = v26;
      v14 = v27;
      v15 = v28;
      sub_23C7EF5D4();
      swift_allocError();
      v17 = v16;
      if (!v15)
      {
        v18 = (uint64_t)sqlite3_errstr(v13);
        if (!v18)
        {
          __break(1u);
          goto LABEL_10;
        }
        v14 = sub_23C910F74();
        v15 = v20;
      }
      *(_DWORD *)v17 = v13;
      *(_QWORD *)(v17 + 8) = v14;
      *(_QWORD *)(v17 + 16) = v15;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_BYTE *)(v17 + 56) = 0;
      swift_bridgeObjectRelease();
      v21 = sub_23C7E097C();
      sub_23C7E13C4(v21);
      swift_willThrow();
    }

  }
  else
  {
    v18 = swift_release();
    *v5 = countAndFlagsBits;
    v5[1] = (uint64_t)object;
  }
LABEL_10:
  result.rawPattern._object = v19;
  result.rawPattern._countAndFlagsBits = v18;
  return result;
}

uint64_t sub_23C882938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[23];
  _QWORD v19[2];
  char v20;
  _BYTE __src[168];
  _QWORD __dst[24];

  sub_23C7EE664();
  v6 = v5;
  v7 = MEMORY[0x24BEE4B00];
  if (((unint64_t)"t can be stored in the database" & 0x2000000000000000) == 0
    || (((unint64_t)"t can be stored in the database" >> 56) & 0xF) != 0)
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (v8 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_23C7EE664();
      v6 = v17;
    }
    __dst[0] = 0xD000000000000059;
    __dst[1] = 0x800000023C91E700;
    __dst[2] = MEMORY[0x24BEE4AF8];
    __dst[3] = v7;
    sub_23C7F96B0(__dst);
    *(_QWORD *)(v6 + 16) = v8 + 1;
    sub_23C7F96E0(__dst, (void *)(v6 + 184 * v8 + 32));
  }
  __dst[0] = a2;
  __dst[1] = a3;
  swift_bridgeObjectRetain();
  v9 = sub_23C911004();
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_23C7EE664();
    v6 = v15;
  }
  v19[0] = v9;
  v19[1] = v11;
  v20 = 2;
  sub_23C8027EC((uint64_t)v19);
  sub_23C800B48(v19, __src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_23C7FCC1C(__dst);
  *(_QWORD *)(v6 + 16) = v12 + 1;
  sub_23C7F96E0(__dst, (void *)(v6 + 184 * v12 + 32));
  v13 = *(_QWORD *)(v6 + 16);
  if (v13 >= *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_23C7EE664();
    v6 = v16;
  }
  v18[0] = 59;
  v18[1] = 0xE100000000000000;
  v18[2] = MEMORY[0x24BEE4AF8];
  v18[3] = v7;
  sub_23C7F96B0(v18);
  *(_QWORD *)(v6 + 16) = v13 + 1;
  sub_23C7F96E0(v18, (void *)(v6 + 184 * v13 + 32));
  v18[0] = v6;
  Database.execute(literal:)((GRDBInternal::SQL)v18);
  return swift_bridgeObjectRelease();
}

GRDBInternal::FTS3Pattern_optional __swiftcall FTS3Pattern.init(matchingAnyTokenIn:)(Swift::String matchingAnyTokenIn)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  GRDBInternal::FTS3Pattern_optional result;

  sub_23C882B94(matchingAnyTokenIn._countAndFlagsBits, v1);
  result.value.rawPattern._object = v3;
  result.value.rawPattern._countAndFlagsBits = v2;
  return result;
}

GRDBInternal::FTS3Pattern_optional __swiftcall FTS3Pattern.init(matchingAllTokensIn:)(Swift::String matchingAllTokensIn)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  GRDBInternal::FTS3Pattern_optional result;

  sub_23C882B94(matchingAllTokensIn._countAndFlagsBits, v1);
  result.value.rawPattern._object = v3;
  result.value.rawPattern._countAndFlagsBits = v2;
  return result;
}

void sub_23C882B94(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_256BCBA78 != -1)
    swift_once();
  v9 = qword_256BCDA38;
  v10 = unk_256BCDA40;
  v11 = qword_256BCDA48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_23C7E09FC(a1, v4, &v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  if (!*(_QWORD *)(v5 + 16))
  {
    sub_23C7DB398();
    goto LABEL_7;
  }
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  v7 = v6;
  sub_23C7DB398();
  sub_23C7E4374();
  if (v7)
  {
    sub_23C7E6308();
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v8 = v10;
  *a2 = v9;
  a2[1] = v8;
}

GRDBInternal::FTS3Pattern_optional __swiftcall FTS3Pattern.init(matchingAllPrefixesIn:)(Swift::String matchingAllPrefixesIn)
{
  _QWORD *v1;
  uint64_t countAndFlagsBits;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  GRDBInternal::FTS3Pattern_optional result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  countAndFlagsBits = matchingAllPrefixesIn._countAndFlagsBits;
  v3 = v1;
  if (qword_256BCBA78 != -1)
    swift_once();
  v19 = qword_256BCDA38;
  v20 = unk_256BCDA40;
  v21 = qword_256BCDA48;
  sub_23C7DBCC8();
  swift_bridgeObjectRetain();
  v5 = sub_23C7E09FC(countAndFlagsBits, v4, &v19);
  sub_23C7DB398();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v7 = (uint64_t *)(v5 + 40);
    do
    {
      v16 = *(v7 - 1);
      v17 = *v7;
      swift_bridgeObjectRetain_n();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v18 + 16);
      if (v8 >= *(_QWORD *)(v18 + 24) >> 1)
        sub_23C7E649C();
      v7 += 2;
      *(_QWORD *)(v18 + 16) = v8 + 1;
      v9 = v18 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v16;
      *(_QWORD *)(v9 + 40) = v17;
      --v6;
    }
    while (v6);
    sub_23C7E072C();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    v11 = v10;
    swift_release();
    v12 = sub_23C7E4374();
    if (!v11)
    {
      v14 = v20;
      *v3 = v19;
      v3[1] = v14;
      goto LABEL_13;
    }
    sub_23C7E6308();
  }
  else
  {
    v12 = sub_23C7E072C();
  }
  *v3 = 0;
  v3[1] = 0;
LABEL_13:
  result.value.rawPattern._object = v13;
  result.value.rawPattern._countAndFlagsBits = v12;
  return result;
}

GRDBInternal::FTS3Pattern_optional __swiftcall FTS3Pattern.init(matchingPhrase:)(Swift::String matchingPhrase)
{
  _QWORD *v1;
  uint64_t countAndFlagsBits;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *object;
  GRDBInternal::FTS3Pattern v9;
  uint64_t v10;
  uint64_t v11;
  GRDBInternal::FTS3Pattern_optional result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  countAndFlagsBits = matchingPhrase._countAndFlagsBits;
  v3 = v1;
  if (qword_256BCBA78 != -1)
    swift_once();
  v13 = qword_256BCDA38;
  v14 = unk_256BCDA40;
  v15 = qword_256BCDA48;
  sub_23C7DBCC8();
  swift_bridgeObjectRetain();
  v5 = sub_23C7E09FC(countAndFlagsBits, v4, &v13);
  sub_23C7DB398();
  swift_bridgeObjectRelease();
  sub_23C7DE934();
  if (*(_QWORD *)(v5 + 16))
  {
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    sub_23C7E072C();
    sub_23C910F5C();
    sub_23C7DB398();
    swift_bridgeObjectRetain();
    sub_23C910F5C();
    sub_23C7E072C();
    v6._countAndFlagsBits = 34;
    v6._object = (void *)0xE100000000000000;
    v9 = FTS3Pattern.init(rawPattern:)(v6);
    object = v9.rawPattern._object;
    v7 = v9.rawPattern._countAndFlagsBits;
    if (!v10)
    {
      v11 = v14;
      *v3 = v13;
      v3[1] = v11;
      goto LABEL_9;
    }
    sub_23C7E6308();
  }
  else
  {
    v7 = sub_23C7E072C();
  }
  *v3 = 0;
  v3[1] = 0;
LABEL_9:
  result.value.rawPattern._object = object;
  result.value.rawPattern._countAndFlagsBits = v7;
  return result;
}

uint64_t FTS3Pattern.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t static FTS3Pattern.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16[2];

  v4 = sub_23C910EB4();
  result = MEMORY[0x24BDAC7A8](v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 3)
  {
    v9 = sub_23C7E097C();
    sub_23C7ED944(v9, v10);
    sub_23C910EA8();
    sub_23C7E097C();
    v11 = sub_23C910E90();
    v13 = v12;
    v14 = sub_23C7E097C();
    result = sub_23C7E5640(v14, v15, 3);
    if (v13)
    {
      v7 = v13;
      v6 = v11;
      goto LABEL_6;
    }
  }
  else if (v8 == 2)
  {
    sub_23C7DBCC8();
LABEL_6:
    v16[0] = v6;
    v16[1] = v7;
    sub_23C7DBCC8();
    sub_23C883100(v16, a2);
    return swift_bridgeObjectRelease_n();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_23C883100(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  FTS3Pattern.init(rawPattern:)(v5);
  if (v6)
  {

    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = v9;
    v8 = v10;
  }
  *a2 = v7;
  a2[1] = v8;
}

uint64_t sub_23C883174(uint64_t a1)
{
  uint64_t v1;

  return sub_23C882938(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for FTS3Pattern()
{
  return &type metadata for FTS3Pattern;
}

uint64_t sub_23C88319C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[168];
  _BYTE v16[168];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memcpy(v16, v11, 0xA3uLL);
  type metadata accessor for BasePreparation(0, a2, a3, v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  memcpy(v15, v16, 0xA3uLL);
  v13 = sub_23C883280((uint64_t)v10, v15);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v13;
  return sub_23C811F5C((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
}

uint64_t sub_23C883280(uint64_t a1, const void *a2)
{
  swift_allocObject();
  return sub_23C885320(a1, a2);
}

void AssociationToMany.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[21];
  uint64_t v11[3];
  _QWORD v12[2];
  __int16 v13;
  void *v14;
  _BYTE v15[176];

  sub_23C7DE8EC();
  sub_23C88738C();
  v12[0] = v0;
  v12[1] = 0xE500000000000000;
  v13 = 257;
  v14 = &unk_250D83298;
  sub_23C80A884((uint64_t)v12);
  sub_23C800B48(v12, v15);
  sub_23C7E3190(v10, v15);
  v1 = sub_23C88740C((uint64_t)v10, v11);
  v10[0] = v11[0];
  v10[1] = v11[1];
  v10[2] = v11[2];
  sub_23C8873E4(v1, v2, v3, v4, v5, v6, v7, v8);
  sub_23C8872E4();
  __asm { BR              X10 }
}

void sub_23C883368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23C910F5C();
  sub_23C7E087C();
  sub_23C910F5C();
  v0 = sub_23C887344();
  v3 = type metadata accessor for AssociationAggregate(0, v0, v1, v2);
  sub_23C8873B4(v3, v4, v3);
  sub_23C7DFB3C();
  sub_23C7DB62C();
  swift_bridgeObjectRelease();
  sub_23C7DBCB0();
}

uint64_t AssociationAggregate.forKey(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_23C8AC9C4(sub_23C886B68, a1, a2);
}

void AssociationToMany.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[168];
  uint64_t v12;
  _QWORD v13[2];
  __int16 v14;
  void *v15;
  _BYTE v16[168];
  _QWORD v17[21];
  _BYTE v18[176];

  sub_23C7DE8EC();
  sub_23C88738C();
  v13[0] = v0;
  v13[1] = 0xE500000000000000;
  v14 = 257;
  v15 = &unk_250D83360;
  sub_23C80A884((uint64_t)v13);
  sub_23C800B48(v13, v16);
  v1 = sub_23C7DB388();
  sub_23C7E3190((void *)(v1 + 16), v16);
  *(_BYTE *)(v1 + 179) = 0;
  v17[0] = v1;
  sub_23C8748C4((uint64_t)v17);
  sub_23C800B48(v17, v18);
  sub_23C7E3190(v11, v18);
  sub_23C88740C((uint64_t)v11, &v12);
  v2 = swift_release();
  sub_23C8873E4(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_23C8872E4();
  __asm { BR              X10 }
}

void sub_23C883648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23C7DEF00();
  sub_23C887338();
  v1 = v0;
  sub_23C7E087C();
  if (v1)
  {
    sub_23C7E11A0();
    sub_23C7DE934();
    sub_23C7DEF00();
    sub_23C7EE168();
    sub_23C886B8C();
    sub_23C7DBCC8();
    sub_23C910F50();
    sub_23C7E087C();
    sub_23C7DB62C();
    sub_23C7DC474();
  }
  sub_23C7DB500();
  sub_23C7E087C();
  v2 = sub_23C887344();
  v5 = type metadata accessor for AssociationAggregate(0, v2, v3, v4);
  sub_23C8873B4(v5, v6, v5);
  sub_23C7DFB3C();
  sub_23C7DB62C();
  swift_bridgeObjectRelease();
  sub_23C7DBCB0();
}

void AssociationToMany.average(_:)()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7EDE84(v0, (__n128)xmmword_23C912A20);
  v75[0] = 4675137;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(&qword_256BCBCB8);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7E8A8C(v0, (__n128)xmmword_23C912A20);
  v75[0] = 4675137;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(qword_256BCCC00);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

void AssociationToMany.max(_:)()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7EDE84(v0, (__n128)xmmword_23C912A20);
  v75[0] = 5783885;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(&qword_256BCBCB8);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7E8A8C(v0, (__n128)xmmword_23C912A20);
  v75[0] = 5783885;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(qword_256BCCC00);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

void AssociationToMany.min(_:)()
{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7EDE84(v0, (__n128)xmmword_23C912A20);
  v75[0] = 5130573;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(&qword_256BCBCB8);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

{
  __n128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[21];
  _QWORD v75[2];
  __int16 v76;
  __n128 *v77;
  uint64_t v78;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v0 = (__n128 *)sub_23C7DB388();
  sub_23C7E8A8C(v0, (__n128)xmmword_23C912A20);
  v75[0] = 5130573;
  v75[1] = 0xE300000000000000;
  v76 = 1;
  v77 = v0;
  v1 = sub_23C80A884((uint64_t)v75);
  sub_23C7DF048(v1, v2, v3, v4, v5, v6, v7, v8, v34, v38, v42, v46, v50, v53, v56, v59, v61, v63, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0],
    v74[1],
    v74[2],
    v74[3],
    v74[4],
    v74[5],
    v74[6],
    v74[7],
    v74[8],
    v74[9],
    v74[10],
    v74[11],
    v74[12],
    v74[13],
    v74[14],
    v74[15],
    v74[16],
    v74[17],
    v74[18],
    v74[19],
    v74[20],
    v75[0]);
  v9 = sub_23C7E3190(v74, &v78);
  sub_23C7E4E58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v35, v39, v43, v47, v51, v54, v57, v60, v62, v64, v65,
    *((uint64_t *)&v65 + 1),
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74[0]);
  v17 = sub_23C7DB62C();
  sub_23C7EE2D4(v17, v18, v19, v20, v21, v22, v23, v24, v36, v40, v44, v48, v52, v55, v58);
  sub_23C7E79A8(qword_256BCCC00);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7E696C(&v65, (uint64_t)v74);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v26 = sub_23C7DF91C();
  sub_23C7DBD5C(v27, &qword_256BCCBF8, v28, v29, v30, v31, v32, v33, v37, v41, v45, v49, v26);
  sub_23C8873A8();
  sub_23C7DBCB0();
}

void AssociationToMany.sum(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[21];
  _QWORD v87[2];
  __int16 v88;
  __n128 *v89;
  uint64_t v90;

  sub_23C7DE8EC();
  sub_23C7DBC10();
  sub_23C7E79A8(&qword_25430CF70);
  v4 = (__n128 *)sub_23C7DB388();
  sub_23C7EDE84(v4, (__n128)xmmword_23C912A20);
  v87[0] = v3;
  v87[1] = 0xE300000000000000;
  v88 = 1;
  v89 = v4;
  v5 = sub_23C80A884((uint64_t)v87);
  sub_23C7DF048(v5, v6, v7, v8, v9, v10, v11, v12, v46, v50, v54, v58, v62, v65, v68, v71, v73, v75, v77,
    *((uint64_t *)&v77 + 1),
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86[0],
    v86[1],
    v86[2],
    v86[3],
    v86[4],
    v86[5],
    v86[6],
    v86[7],
    v86[8],
    v86[9],
    v86[10],
    v86[11],
    v86[12],
    v86[13],
    v86[14],
    v86[15],
    v86[16],
    v86[17],
    v86[18],
    v86[19],
    v86[20],
    v87[0]);
  v13 = sub_23C7E3190(v86, &v90);
  sub_23C7E4E58((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v47, v51, v55, v59, v63, v66, v69, v72, v74, v76, v77,
    *((uint64_t *)&v77 + 1),
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86[0]);
  v21 = sub_23C7DB62C();
  v22 = v82;
  v23 = v83;
  sub_23C887300(v21, v24, v25, v26, v27, v28, v29, v30, v48, v52, v56, v60, v64, v67, v70);
  sub_23C7E79A8(&qword_256BCBCB8);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7DB5CC(&v77, (uint64_t)v86);
    sub_23C88735C(v1, *(_QWORD *)(v2 + 8), v31, v32, v33, v34, v35, v36);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v38 = sub_23C7DF91C();
  sub_23C7DBD5C(v39, &qword_256BCCBF8, v40, v41, v42, v43, v44, v45, v49, v53, v57, v61, v38);
  *v0 = v81;
  v0[1] = v22;
  v0[2] = v23;
  sub_23C7DBCB0();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[21];
  _QWORD v87[2];
  __int16 v88;
  __n128 *v89;
  uint64_t v90;

  sub_23C7DE8EC();
  sub_23C7DBC10();
  sub_23C7E79A8(&qword_25430CF70);
  v4 = (__n128 *)sub_23C7DB388();
  sub_23C7E8A8C(v4, (__n128)xmmword_23C912A20);
  v87[0] = v3;
  v87[1] = 0xE300000000000000;
  v88 = 1;
  v89 = v4;
  v5 = sub_23C80A884((uint64_t)v87);
  sub_23C7DF048(v5, v6, v7, v8, v9, v10, v11, v12, v46, v50, v54, v58, v62, v65, v68, v71, v73, v75, v77,
    *((uint64_t *)&v77 + 1),
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86[0],
    v86[1],
    v86[2],
    v86[3],
    v86[4],
    v86[5],
    v86[6],
    v86[7],
    v86[8],
    v86[9],
    v86[10],
    v86[11],
    v86[12],
    v86[13],
    v86[14],
    v86[15],
    v86[16],
    v86[17],
    v86[18],
    v86[19],
    v86[20],
    v87[0]);
  v13 = sub_23C7E3190(v86, &v90);
  sub_23C7E4E58((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v47, v51, v55, v59, v63, v66, v69, v72, v74, v76, v77,
    *((uint64_t *)&v77 + 1),
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    v86[0]);
  v21 = sub_23C7DB62C();
  v22 = v82;
  v23 = v83;
  sub_23C887300(v21, v24, v25, v26, v27, v28, v29, v30, v48, v52, v56, v60, v64, v67, v70);
  sub_23C7E79A8(qword_256BCCC00);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7DB5CC(&v77, (uint64_t)v86);
    sub_23C88735C(v1, *(_QWORD *)(v2 + 8), v31, v32, v33, v34, v35, v36);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v38 = sub_23C7DF91C();
  sub_23C7DBD5C(v39, &qword_256BCCBF8, v40, v41, v42, v43, v44, v45, v49, v53, v57, v61, v38);
  *v0 = v81;
  v0[1] = v22;
  v0[2] = v23;
  sub_23C7DBCB0();
}

void AssociationToMany.total(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[21];
  _QWORD v86[2];
  __int16 v87;
  __n128 *v88;
  uint64_t v89;

  sub_23C7DE8EC();
  sub_23C7DC598();
  sub_23C7E79A8(&qword_25430CF70);
  v3 = (__n128 *)sub_23C7DB388();
  sub_23C7E8A8C(v3, (__n128)xmmword_23C912A20);
  v86[0] = 0x4C41544F54;
  v86[1] = 0xE500000000000000;
  v87 = 1;
  v88 = v3;
  v4 = sub_23C80A884((uint64_t)v86);
  sub_23C7DF048(v4, v5, v6, v7, v8, v9, v10, v11, v45, v49, v53, v57, v61, v64, v67, v70, v72, v74, v76,
    *((uint64_t *)&v76 + 1),
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85[0],
    v85[1],
    v85[2],
    v85[3],
    v85[4],
    v85[5],
    v85[6],
    v85[7],
    v85[8],
    v85[9],
    v85[10],
    v85[11],
    v85[12],
    v85[13],
    v85[14],
    v85[15],
    v85[16],
    v85[17],
    v85[18],
    v85[19],
    v85[20],
    v86[0]);
  v12 = sub_23C7E3190(v85, &v89);
  sub_23C7E4E58((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v46, v50, v54, v58, v62, v65, v68, v71, v73, v75, v76,
    *((uint64_t *)&v76 + 1),
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85[0]);
  v20 = sub_23C7DB62C();
  v21 = v81;
  v22 = v82;
  sub_23C887300(v20, v23, v24, v25, v26, v27, v28, v29, v47, v51, v55, v59, v63, v66, v69);
  sub_23C7E79A8(qword_256BCCC00);
  sub_23C7E79A8(&qword_256BCCBF0);
  if (sub_23C7E3350())
  {
    sub_23C7DB5CC(&v76, (uint64_t)v85);
    sub_23C88735C(v1, *(_QWORD *)(v2 + 8), v30, v31, v32, v33, v34, v35);
    sub_23C8872E4();
    __asm { BR              X10 }
  }
  v37 = sub_23C7DF91C();
  sub_23C7DBD5C(v38, &qword_256BCCBF8, v39, v40, v41, v42, v43, v44, v48, v52, v56, v60, v37);
  *v0 = v80;
  v0[1] = v21;
  v0[2] = v22;
  sub_23C7DBCB0();
}

uint64_t sub_23C8851D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)v4 + 88))(a1, a3, a4);
}

uint64_t sub_23C885200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  return result;
}

uint64_t AssociationAggregate.forKey(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23C7E7E34(a1, a1[3]);
  sub_23C911C40();
  AssociationAggregate.forKey(_:)(a2, a3);
  return swift_bridgeObjectRelease();
}

void sub_23C8852C8()
{
  sub_23C9117B4();
  __break(1u);
}

uint64_t sub_23C885320(uint64_t a1, const void *a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 104) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120), a1);
  memcpy((void *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128)), a2, 0xA3uLL);
  return v2;
}

uint64_t sub_23C885378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[163];
  _BYTE v30[176];

  v5 = v4;
  v28 = a4;
  v8 = *v4;
  v9 = *(_QWORD *)(v8 + 104);
  v10 = *(_QWORD *)(v9 - 8);
  v26 = a1;
  v27 = v10;
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TableAlias();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_BYTE *)(v17 + 48) = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 8);
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 48) + 16))();
  v19 = v26;
  JoinableRequest.joining<A>(optional:)((uint64_t)v13, a2, v9, *(_QWORD *)(a3 + 24), v18, v20);
  v21 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v21(v19, a2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v9);
  TableRequest<>.groupByPrimaryKey()();
  v21((uint64_t)v16, a2);
  v22 = (char *)v5 + *(_QWORD *)(*v5 + 128);
  memcpy(v30, v22, 0xA3uLL);
  memcpy(v29, v22, sizeof(v29));
  sub_23C811F5C((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  sub_23C86E598();
  swift_release();
  return sub_23C811F5C((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
}

uint64_t sub_23C88554C()
{
  uint64_t v0;
  _BYTE __dst[168];

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  memcpy(__dst, (const void *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)), 0xA3uLL);
  return sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
}

uint64_t sub_23C8855A8()
{
  uint64_t v0;
  _BYTE __dst[168];

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  memcpy(__dst, (const void *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)), 0xA3uLL);
  sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  return v0;
}

uint64_t sub_23C885608()
{
  sub_23C8855A8();
  return swift_deallocClassInstance();
}

_QWORD *sub_23C885628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t sub_23C88566C()
{
  uint64_t v0;
  void (*v1)(_BYTE *);
  _BYTE v3[168];
  _QWORD __src[21];

  v1 = *(void (**)(_BYTE *))(v0 + 24);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v0 + 16) + 88))(__src);
  memcpy(v3, __src, 0xA3uLL);
  v1(v3);
  return sub_23C811F5C((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
}

uint64_t sub_23C8856E8()
{
  swift_release();
  return swift_release();
}

uint64_t sub_23C885704()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_23C885728()
{
  sub_23C885704();
  return swift_deallocClassInstance();
}

uint64_t sub_23C885744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  _QWORD *v10;

  v9 = *v5;
  type metadata accessor for MapPreparation(0, *(_QWORD *)(a3 + 16), a3, a4);
  v10 = sub_23C885628(v9, a1, a2);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = v10;
  swift_retain();
  return swift_retain();
}

_QWORD *sub_23C8857B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

uint64_t sub_23C885800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v7)(_BYTE *, _BYTE *);
  _BYTE v9[168];
  _BYTE __dst[168];
  _QWORD __src[21];
  _QWORD v12[21];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v3 + 16) + 88))(__src);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 88))(v12, a1, a2, a3);
  v7 = *(void (**)(_BYTE *, _BYTE *))(v3 + 32);
  memcpy(__dst, __src, 0xA3uLL);
  memcpy(v9, v12, 0xA3uLL);
  v7(__dst, v9);
  sub_23C811F5C((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
  return sub_23C811F5C((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E6F90);
}

uint64_t sub_23C8858D4()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23C8858F8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_23C885924()
{
  sub_23C8858F8();
  return swift_deallocClassInstance();
}

uint64_t sub_23C885940@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v9 = *a1;
  v10 = *a2;
  type metadata accessor for CombinePreparation(0, a5, a3, a4);
  v11 = sub_23C8857B0(v9, v10, a3, a4);
  a6[1] = 0;
  a6[2] = 0;
  *a6 = v11;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t ! prefix<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C886B08(a1, (uint64_t)sub_23C8859CC, a2);
}

uint64_t sub_23C8859CC(const void *a1)
{
  return sub_23C886758(a1);
}

uint64_t && infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C8859E4, a4);
}

void sub_23C8859E4()
{
  sub_23C8859FC();
}

void sub_23C8859F0()
{
  sub_23C8859FC();
}

void sub_23C8859FC()
{
  uint64_t (*v0)(_QWORD *, uint64_t *);
  uint64_t (*v1)(_QWORD *, uint64_t *);
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[5];
  _QWORD v19[5];
  _BYTE v20[168];
  _BYTE v21[168];

  sub_23C7DE8EC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v19[3] = &type metadata for SQLExpression;
  v19[4] = &protocol witness table for SQLExpression;
  v6 = sub_23C7DB388();
  v7 = (void *)(v6 + 16);
  v19[0] = v6;
  sub_23C7E3190(v20, v5);
  sub_23C7E3190(v7, v5);
  v18[3] = (uint64_t)&type metadata for SQLExpression;
  v18[4] = (uint64_t)&protocol witness table for SQLExpression;
  v8 = sub_23C7DB388();
  v9 = (void *)(v8 + 16);
  v18[0] = v8;
  sub_23C7E3190(v21, v3);
  sub_23C7E3190(v9, v3);
  sub_23C811F5C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  sub_23C811F5C((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  v10 = v1(v19, v18);
  sub_23C7E7704(v10, v11, v12, v13, v14, v15, v16, v17, v18[0]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
  sub_23C7DBCB0();
}

void sub_23C885AE4()
{
  sub_23C8859FC();
}

void sub_23C885AF0()
{
  sub_23C8859FC();
}

void sub_23C885AFC()
{
  sub_23C8859FC();
}

void sub_23C885B08()
{
  sub_23C8859FC();
}

void sub_23C885B14()
{
  sub_23C8859FC();
}

void sub_23C885B20()
{
  sub_23C8859FC();
}

void sub_23C885B2C()
{
  sub_23C8859FC();
}

void sub_23C885B38()
{
  sub_23C8859FC();
}

void sub_23C885B44()
{
  sub_23C8859FC();
}

void sub_23C885B50()
{
  sub_23C8859FC();
}

void sub_23C885B5C()
{
  sub_23C8859FC();
}

void sub_23C885B68()
{
  sub_23C8859FC();
}

void && infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void && infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t || infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C8859F0, a4);
}

void || infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void sub_23C885BBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __int128 v12;

  v11 = *a1;
  v12 = *(_OWORD *)(a1 + 1);
  sub_23C8461F0(a2, (uint64_t)v10);
  v4 = sub_23C7DB388();
  sub_23C7DB5CC(v10, v4 + 16);
  v7 = type metadata accessor for AssociationAggregate(0, a3, v5, v6);
  sub_23C88734C(v7, v8, v7, v9);
  sub_23C7DFB3C();
  sub_23C887378();
}

void sub_23C885C44(const void *a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[5];
  _BYTE v21[168];

  sub_23C7E3190(v21, a1);
  v20[3] = (uint64_t)&type metadata for SQLExpression;
  v20[4] = (uint64_t)&protocol witness table for SQLExpression;
  v20[0] = sub_23C7DB388();
  v6 = sub_23C7E3190((void *)(v20[0] + 16), a1);
  sub_23C8873F4((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v7, v8, v9, v10, v11);
  v12 = a3(v20, a2);
  sub_23C7E7704(v12, v13, v14, v15, v16, v17, v18, v19, v20[0]);
  sub_23C7E07F4();
}

void || infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

void sub_23C885CEC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __int128 v12;

  v11 = *a2;
  v12 = *(_OWORD *)(a2 + 1);
  sub_23C8461F0(a1, (uint64_t)v10);
  v4 = sub_23C7DB388();
  sub_23C7DB5CC(v10, v4 + 16);
  v7 = type metadata accessor for AssociationAggregate(0, a3, v5, v6);
  sub_23C88734C(v7, v8, v7, v9);
  sub_23C7DFB3C();
  sub_23C887378();
}

void sub_23C885D6C(const void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[5];
  _BYTE v21[168];

  sub_23C7E3190(v21, a1);
  v20[3] = (uint64_t)&type metadata for SQLExpression;
  v20[4] = (uint64_t)&protocol witness table for SQLExpression;
  v20[0] = sub_23C7DB388();
  v6 = sub_23C7E3190((void *)(v20[0] + 16), a1);
  sub_23C8873F4((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v7, v8, v9, v10, v11);
  v12 = a3(a2, v20);
  sub_23C7E7704(v12, v13, v14, v15, v16, v17, v18, v19, v20[0]);
  sub_23C7E07F4();
}

uint64_t == infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885AE4, a4);
}

void == infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void == infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3)
{
  return sub_23C885FFC(a1, a2, a3);
}

uint64_t sub_23C885E48@<X0>(void *__src@<X0>, char a2@<W1>, void *a3@<X8>)
{
  _QWORD v7[5];
  _BYTE __dst[168];

  memcpy(__dst, __src, 0xA3uLL);
  v7[3] = &type metadata for SQLExpression;
  v7[4] = &protocol witness table for SQLExpression;
  v7[0] = swift_allocObject();
  memcpy((void *)(v7[0] + 16), __src, 0xA3uLL);
  sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  == infix(_:_:)(v7, a2, a3);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v7);
}

uint64_t == infix<A>(_:_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_23C886164(a1, a2, a3);
}

uint64_t sub_23C885F08@<X0>(void *__src@<X0>, char a2@<W1>, void *a3@<X8>)
{
  _QWORD v7[5];
  _BYTE __dst[168];

  memcpy(__dst, __src, 0xA3uLL);
  v7[3] = &type metadata for SQLExpression;
  v7[4] = &protocol witness table for SQLExpression;
  v7[0] = swift_allocObject();
  memcpy((void *)(v7[0] + 16), __src, 0xA3uLL);
  sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  == infix(_:_:)(a2, v7, a3);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v7);
}

uint64_t != infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885AF0, a4);
}

void != infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void != infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t != infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3)
{
  return sub_23C885FFC(a1, a2, a3);
}

uint64_t sub_23C885FFC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C887418(a1);
  *(_BYTE *)(sub_23C7DB388() + 16) = a2;
  v7 = type metadata accessor for AssociationAggregate(0, a3, v5, v6);
  sub_23C88734C(v7, v8, v7, v9);
  return sub_23C887364();
}

uint64_t sub_23C886060@<X0>(void *__src@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  _BYTE __dst[168];

  memcpy(__dst, __src, 0xA3uLL);
  v10[3] = &type metadata for SQLExpression;
  v10[4] = &protocol witness table for SQLExpression;
  v10[0] = swift_allocObject();
  memcpy((void *)(v10[0] + 16), __src, 0xA3uLL);
  v9[3] = &type metadata for SQLExpression;
  v9[4] = &protocol witness table for SQLExpression;
  v6 = swift_allocObject();
  v7 = (void *)(v6 + 16);
  v9[0] = v6;
  sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  == infix(_:_:)(v10, a2, v7);
  ! prefix(_:)(v9, a3);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
}

uint64_t != infix<A>(_:_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_23C886164(a1, a2, a3);
}

uint64_t sub_23C886164(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(sub_23C7DB388() + 16) = a1;
  v6 = type metadata accessor for AssociationAggregate(0, a3, v4, v5);
  sub_23C88734C(v6, v7, v6, v8);
  return sub_23C887364();
}

uint64_t sub_23C8861D4@<X0>(void *__src@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  _BYTE __dst[168];

  memcpy(__dst, __src, 0xA3uLL);
  v10[3] = &type metadata for SQLExpression;
  v10[4] = &protocol witness table for SQLExpression;
  v10[0] = swift_allocObject();
  memcpy((void *)(v10[0] + 16), __src, 0xA3uLL);
  v9[3] = &type metadata for SQLExpression;
  v9[4] = &protocol witness table for SQLExpression;
  v6 = swift_allocObject();
  v7 = (void *)(v6 + 16);
  v9[0] = v6;
  sub_23C811F5C((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  == infix(_:_:)(a2, v10, v7);
  ! prefix(_:)(v9, a3);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
}

uint64_t === infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885AFC, a4);
}

void === infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

uint64_t sub_23C8862E4(const void *a1, uint64_t a2, void (*a3)(_QWORD *, _BYTE *))
{
  _BYTE v7[40];
  _QWORD v8[5];
  _BYTE v9[168];

  sub_23C7E3190(v9, a1);
  v8[3] = &type metadata for SQLExpression;
  v8[4] = &protocol witness table for SQLExpression;
  v8[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v8[0] + 16), a1);
  sub_23C8461F0(a2, (uint64_t)v7);
  sub_23C811F5C((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  a3(v8, v7);
  sub_23C7E7900((uint64_t)v7, &qword_25430CF68);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
}

void === infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t sub_23C8863C0(const void *a1, uint64_t a2, void (*a3)(_BYTE *, _QWORD *))
{
  _QWORD v6[5];
  _BYTE v7[40];
  _BYTE v8[168];

  sub_23C7E3190(v8, a1);
  sub_23C8461F0(a2, (uint64_t)v7);
  v6[3] = &type metadata for SQLExpression;
  v6[4] = &protocol witness table for SQLExpression;
  v6[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v6[0] + 16), v8);
  sub_23C811F5C((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  a3(v7, v6);
  sub_23C7E7900((uint64_t)v7, &qword_25430CF68);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t !== infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B08, a4);
}

void !== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

uint64_t sub_23C88649C(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  _QWORD v29[5];
  _BYTE v30[168];

  sub_23C7E3190(v30, a1);
  v29[3] = &type metadata for SQLExpression;
  v29[4] = &protocol witness table for SQLExpression;
  v29[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v29[0] + 16), a1);
  sub_23C8461F0(a2, (uint64_t)v28);
  v26 = sub_23C7DB388();
  v4 = sub_23C811F5C((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  v9 = sub_23C8873FC(v4, v5, v6, v7, v8);
  sub_23C88742C(v9, v10, v11, v12, v13, v14, v15, v16, v26);
  sub_23C7E7704(v17, v18, v19, v20, v21, v22, v23, v24, v27);
  sub_23C7E7900((uint64_t)v28, &qword_25430CF68);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v29);
}

void !== infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t sub_23C886598(const void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _BYTE v38[40];
  _BYTE v39[168];

  sub_23C7E3190(v39, a1);
  sub_23C8461F0(a2, (uint64_t)v38);
  v37[3] = &type metadata for SQLExpression;
  v37[4] = &protocol witness table for SQLExpression;
  v37[0] = sub_23C7DB388();
  sub_23C7E3190((void *)(v37[0] + 16), v39);
  v32 = sub_23C7DB388();
  v3 = sub_23C811F5C((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58);
  v8 = sub_23C8873FC(v3, v4, v5, v6, v7);
  sub_23C88742C(v8, v9, v10, v11, v12, v13, v14, v15, v32);
  v24 = sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v33);
  sub_23C7DBD5C(v24, &qword_25430CF68, v25, v26, v27, v28, v29, v30, v34, v35, v36, (uint64_t)&type metadata for SQLExpression);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v37);
}

uint64_t <= infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B14, a4);
}

void <= infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void <= infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t < infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B20, a4);
}

void < infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void < infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t > infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B2C, a4);
}

void > infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void > infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t >= infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B38, a4);
}

void >= infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void >= infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t - prefix<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C886B08(a1, (uint64_t)sub_23C88674C, a2);
}

uint64_t sub_23C88674C(const void *a1)
{
  return sub_23C886758(a1);
}

uint64_t sub_23C886758(const void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[168];

  sub_23C7E3190(v27, a1);
  v25 = sub_23C7DB388();
  v2 = sub_23C7E3190((void *)(v25 + 16), a1);
  v8 = sub_23C8873F4((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v3, v4, v5, v6, v7);
  v16 = sub_23C887438(v8, v9, v10, v11, v12, v13, v14, v15, v25);
  return sub_23C7E7704(v16, v17, v18, v19, v20, v21, v22, v23, v26);
}

uint64_t + infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B44, a4);
}

void + infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void + infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t - infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B50, a4);
}

void - infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void - infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t * infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B5C, a4);
}

void * infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void * infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t / infix<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_23C88688C(a1, a2, a3, (uint64_t)sub_23C885B68, a4);
}

uint64_t sub_23C88688C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)a2;
  v9 = *(_QWORD *)a1;
  v10 = *(_OWORD *)(a1 + 8);
  v7 = v5;
  v8 = *(_OWORD *)(a2 + 8);
  return sub_23C885940(&v9, &v7, a4, 0, a3, a5);
}

void / infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C885BBC(a1, a2, a3);
}

void / infix<A>(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_23C885CEC(a1, a2, a3);
}

uint64_t ?? infix<A>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = a1[1];
  v7 = a1[2];
  v16 = *a1;
  v17 = v6;
  v18 = v7;
  sub_23C8461F0(a2, (uint64_t)&v14);
  v8 = sub_23C7DB388();
  sub_23C7DB5CC((__int128 *)&v14, v8 + 16);
  v11 = type metadata accessor for AssociationAggregate(0, a3, v9, v10);
  sub_23C885744((uint64_t)sub_23C886F9C, v8, v11, v12, &v19);
  swift_release();
  v14 = v19;
  v15 = v20;
  sub_23C8AC9C4(sub_23C886FBC, v11, a4);
  swift_release();
  return sub_23C7DB624();
}

uint64_t sub_23C886A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  return result;
}

uint64_t abs<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C886B08(a1, (uint64_t)sub_23C886A60, a2);
}

void sub_23C886A60(const void *a1)
{
  sub_23C886A78(a1);
}

void sub_23C886A6C(const void *a1)
{
  sub_23C886A78(a1);
}

void sub_23C886A78(const void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[168];

  v2 = sub_23C7DB388();
  v3 = (void *)(v2 + 16);
  v26 = v2;
  sub_23C7E3190(v28, a1);
  v4 = sub_23C7E3190(v3, a1);
  v10 = sub_23C8873F4((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_23C7E7E58, v5, v6, v7, v8, v9);
  v18 = sub_23C887438(v10, v11, v12, v13, v14, v15, v16, v17, v26);
  sub_23C7E7704(v18, v19, v20, v21, v22, v23, v24, v25, v27);
  sub_23C7E07F4();
}

uint64_t length<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23C886B08(a1, (uint64_t)sub_23C886A6C, a2);
}

uint64_t sub_23C886B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C887418(a1);
  v8 = type metadata accessor for AssociationAggregate(0, v5, v6, v7);
  return sub_23C885744(a2, 0, v8, v9, a3);
}

uint64_t type metadata accessor for AssociationAggregate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociationAggregate);
}

uint64_t sub_23C886B68(uint64_t a1)
{
  uint64_t v1;

  return sub_23C885200(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23C886B84()
{
  return sub_23C7DB0B4();
}

unint64_t sub_23C886B8C()
{
  unint64_t result;

  result = qword_256BCCBE8;
  if (!qword_256BCCBE8)
  {
    result = MEMORY[0x242626100](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_256BCCBE8);
  }
  return result;
}

void sub_23C886BC8(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))&& infix(_:_:));
}

void sub_23C886BE8(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))&& infix(_:_:));
}

void sub_23C886C08(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))|| infix(_:_:));
}

uint64_t sub_23C886C28()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

void sub_23C886C4C(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))|| infix(_:_:));
}

uint64_t sub_23C886C6C(const void *a1)
{
  uint64_t v1;

  return sub_23C8862E4(a1, v1 + 16, (void (*)(_QWORD *, _BYTE *))== infix(_:_:));
}

uint64_t sub_23C886C8C(const void *a1)
{
  uint64_t v1;

  return sub_23C8863C0(a1, v1 + 16, (void (*)(_BYTE *, _QWORD *))== infix(_:_:));
}

uint64_t sub_23C886CB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_23C885E48(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_23C886CBC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_23C885F08(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_23C886CC4(const void *a1)
{
  uint64_t v1;

  return sub_23C88649C(a1, v1 + 16);
}

uint64_t sub_23C886CE4(const void *a1)
{
  uint64_t v1;

  return sub_23C886598(a1, v1 + 16);
}

uint64_t sub_23C886D08@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_23C886060(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_23C886D14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_23C8861D4(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_23C886D1C(const void *a1)
{
  uint64_t v1;

  return sub_23C8862E4(a1, v1 + 16, (void (*)(_QWORD *, _BYTE *))=== infix(_:_:));
}

uint64_t sub_23C886D3C(const void *a1)
{
  uint64_t v1;

  return sub_23C8863C0(a1, v1 + 16, (void (*)(_BYTE *, _QWORD *))=== infix(_:_:));
}

uint64_t sub_23C886D5C(const void *a1)
{
  uint64_t v1;

  return sub_23C88649C(a1, v1 + 16);
}

uint64_t sub_23C886D7C(const void *a1)
{
  uint64_t v1;

  return sub_23C886598(a1, v1 + 16);
}

void sub_23C886D9C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))<= infix(_:_:));
}

void sub_23C886DBC(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))<= infix(_:_:));
}

void sub_23C886DDC(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))< infix(_:_:));
}

void sub_23C886DFC(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))< infix(_:_:));
}

void sub_23C886E1C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))> infix(_:_:));
}

void sub_23C886E3C(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))> infix(_:_:));
}

void sub_23C886E5C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))>= infix(_:_:));
}

void sub_23C886E7C(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))>= infix(_:_:));
}

void sub_23C886E9C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))+ infix(_:_:));
}

void sub_23C886EBC(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))+ infix(_:_:));
}

void sub_23C886EDC(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))- infix(_:_:));
}

void sub_23C886EFC(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))- infix(_:_:));
}

void sub_23C886F1C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))* infix(_:_:));
}

void sub_23C886F3C(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))* infix(_:_:));
}

void sub_23C886F5C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))/ infix(_:_:));
}

void sub_23C886F7C(const void *a1)
{
  uint64_t v1;

  sub_23C885D6C(a1, v1 + 16, (uint64_t (*)(uint64_t, uint64_t *))/ infix(_:_:));
}

void sub_23C886F9C(const void *a1)
{
  uint64_t v1;

  sub_23C885C44(a1, v1 + 16, (uint64_t (*)(uint64_t *, uint64_t))?? infix(_:_:));
}

uint64_t sub_23C886FBC(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C886A08(a1, v1[3], v1[4], v1[5]);
}

void sub_23C886FDC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C7DB390();
}

_QWORD *assignWithCopy for StatementRowImpl(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_23C887078(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C8870BC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AssociationAggregatePreparation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssociationAggregatePreparation);
}

uint64_t sub_23C8870FC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for BasePreparation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BasePreparation);
}

uint64_t sub_23C887180()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MapPreparation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapPreparation);
}

uint64_t sub_23C8871DC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CombinePreparation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinePreparation);
}

uint64_t sub_23C88723C()
{
  return sub_23C7DB0B4();
}

uint64_t sub_23C8872B4()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8872C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8872D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8872F4()
{
  return sub_23C910E24();
}

void sub_23C887300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_23C8461F0(v15, (uint64_t)va);
}

uint64_t sub_23C88730C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_23C812F90(a1, a2, a3);
}

void sub_23C887328()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_23C8A6F6C(v0, v1, v2);
}

uint64_t sub_23C887338()
{
  uint64_t v0;
  unint64_t v1;

  return sub_23C8A6054(v0, v1);
}

uint64_t sub_23C887344()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_23C88734C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  return sub_23C885744(v4, v6, a3, a4, v5);
}

_QWORD *sub_23C88735C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23C8E43E8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23C887364()
{
  return swift_release();
}

void sub_23C8873A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
}

uint64_t sub_23C8873B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return AssociationAggregate.forKey(_:)(a3, v3);
}

uint64_t sub_23C8873C4()
{
  return sub_23C910F5C();
}

void sub_23C8873D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_23C8A6F6C(v1, v2, v0);
}

_QWORD *sub_23C8873E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  return sub_23C8E43E8(v8, *(_QWORD *)(v9 + 8), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23C8873F4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_23C811F5C((uint64_t)va, a2);
}

uint64_t sub_23C8873FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t (*v5)(char *, uint64_t *);
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  return v5(va1, (uint64_t *)va);
}

uint64_t sub_23C88740C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return sub_23C88319C(a1, v2, v3, a2);
}

__n128 sub_23C887418(uint64_t a1)
{
  return *(__n128 *)(a1 + 8);
}

void sub_23C88742C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  ! prefix(_:)(&a9, v9);
}

uint64_t sub_23C887438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *);

  return v9(&a9);
}

void *sub_23C887444(const void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  void *result;

  sub_23C7ECE1C();
  sub_23C7E8AC4();
  sub_23C7E9288();
  result = sub_23C7F96E0(a1, v4);
  *v1 = v2;
  return result;
}

Swift::Void __swiftcall SQLInterpolation.appendInterpolation(sql:arguments:)(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)arguments.values._rawValue;
  v4 = *((_QWORD *)arguments.values._rawValue + 1);
  v6 = sql;
  v7 = v3;
  v8 = v4;
  sub_23C7F96B0(&v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7ECE1C();
  sub_23C7E0734();
  sub_23C7E84CC(v5);
  *v2 = v3;
  sub_23C7E4078();
}

Swift::Void __swiftcall SQLInterpolation.appendInterpolation(literal:)(GRDBInternal::SQL literal)
{
  swift_bridgeObjectRetain();
  sub_23C7ED9B0();
}

void sub_23C8874F8(Swift::String *a1)
{
  SQLInterpolation.appendLiteral(_:)(*a1);
}

uint64_t sub_23C887504()
{
  return MEMORY[0x24BEE0D80];
}

_QWORD *sub_23C887514@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t HasOneThroughAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t HasOneThroughAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*HasOneThroughAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C887564(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C887590(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C8875C4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HasOneThroughAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

uint64_t sub_23C887608(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C887634(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasOneThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HasOneThroughAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HasOneThroughAssociation);
}

uint64_t sub_23C88766C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8, a1, a6);
  result = type metadata accessor for ValueReducers.Trace(0, a6, a7, v15);
  v17 = (_QWORD *)(a8 + *(int *)(result + 36));
  *v17 = a2;
  v17[1] = a3;
  v18 = (_QWORD *)(a8 + *(int *)(result + 40));
  *v18 = a4;
  v18[1] = a5;
  return result;
}

uint64_t ValueReducers.Trace._fetch(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(void))(v2 + *(int *)(a2 + 36)))();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ValueReducers.Trace._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_23C9114E4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, v7, v8);
  if (sub_23C7DE718((uint64_t)v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v14 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, v13, AssociatedTypeWitness);
    (*(void (**)(uint64_t))(v3 + *(int *)(a2 + 40)))(a3);
    v14 = 0;
  }
  return sub_23C7DE70C(a3, v14, 1, AssociatedTypeWitness);
}

uint64_t sub_23C887898(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for ValueReducers.Trace<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C8878C4(uint64_t a1, uint64_t a2)
{
  return ValueReducers.Trace._fetch(_:)(a1, a2);
}

uint64_t sub_23C8878DC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23C887958(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_23C887A30(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t sub_23C887A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23C887B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C887B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23C887C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_23C887C80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return sub_23C7DE718(a1, v6, v4);
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23C887D04 + 4 * byte_23C917328[v11]))();
  }
}

void sub_23C887D84(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_23C887E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        v9 = a2 ^ 0x80000000;
        v8[1] = 0;
      }
      else
      {
        v9 = (a2 - 1);
      }
      *v8 = v9;
    }
    else
    {
      return sub_23C7DE70C(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t type metadata accessor for ValueReducers.Trace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueReducers.Trace);
}

uint64_t sub_23C887F14()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_23C887FD4()
{
  sub_23C7DE8EC();
  swift_allocObject();
  sub_23C88871C();
  sub_23C7DBCB0();
}

void sub_23C88804C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[36];

  sub_23C7DE8EC();
  v6[15] = v1;
  v2 = *v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6[3] = (char *)v6 - v5;
  sub_23C7E188C(v4, &qword_256BCD008);
  v6[4] = v2;
  sub_23C7DB510();
  type metadata accessor for ValueWriteOnlyObserver.NotificationCallbacks();
}

void sub_23C888108()
{
  sub_23C7E3374();
  sub_23C7DB510();
  type metadata accessor for ValueWriteOnlyObserver.DatabaseAccess();
}

void sub_23C888118()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void *);
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_23C7E3374();
  sub_23C7E8E90();
  sub_23C7DEABC((uint64_t)sub_23C889878, 0, (void (*)(id))sub_23C88DE9C);
  v4 = *(_QWORD *)(v3 - 128);
  if (v4)
  {
    *(_QWORD *)(v3 - 352) = v2;
    v5 = *(_QWORD *)(v3 - 208);
    v6 = *(_QWORD *)(v3 - 200);
    v7 = *(_QWORD *)(v3 - 192);
    v8 = *(_QWORD *)(v3 - 184);
    v9 = *(_QWORD *)(v3 - 176);
    v10 = *(_QWORD *)(v3 - 168);
    v12 = *(_QWORD *)(v3 - 160);
    v11 = *(_QWORD *)(v3 - 152);
    v13 = *(_QWORD *)(v3 - 144);
    v14 = *(_QWORD *)(v3 - 136);
    v15 = *(_QWORD *)(v3 - 120);
    v16 = *(_QWORD *)(v3 - 112);
    *(_QWORD *)(v3 - 312) = v6;
    if (v16)
    {
      v18 = *(_QWORD *)(v3 - 104);
      v17 = *(_QWORD *)(v3 - 96);
      *(_QWORD *)(v3 - 232) = v15;
      *(_QWORD *)(v3 - 240) = v4;
      *(_QWORD *)(v3 - 288) = v14;
      v44 = v14;
      *(_QWORD *)(v3 - 272) = v13;
      v19 = v5;
      *(_QWORD *)(v3 - 280) = v7;
      *(_QWORD *)(v3 - 296) = v8;
      *(_QWORD *)(v3 - 256) = v9;
      v20 = v9;
      *(_QWORD *)(v3 - 264) = v10;
      *(_QWORD *)(v3 - 224) = v12;
      v21 = v11;
      sub_23C88DEB4(v5, v6, v7, v8, v20, v10, v12, v11, v13, v44, v4);
      *(_QWORD *)(v3 - 304) = v18;
      sub_23C88DF68(v16);
      *(_QWORD *)(v3 - 320) = v17;
      sub_23C7DE904();
      v22 = *(_QWORD **)(v1 + 16);
      v23 = v22[5];
      v24 = v22[6];
      sub_23C7E7E34(v22 + 2, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24) & 1) != 0)
      {
        v25 = *(_QWORD *)(v3 - 344);
        sub_23C889920();
        v26 = v16;
        if (v0)
        {
          v27 = *(void (**)(void *))(v3 - 224);
          if (v27)
            v27(v0);
          v28 = type metadata accessor for AnyDatabaseCancellable();
          sub_23C7DB388();
          v29 = AnyDatabaseCancellable.init(cancel:)((uint64_t)nullsub_1, 0);
          v30 = *(uint64_t **)(v3 - 248);
          v30[3] = v28;
          v30[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;

          goto LABEL_11;
        }
        (*(void (**)(uint64_t))(v3 - 240))(v25);
        sub_23C7E1884(v25, *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 360) + 8));
      }
      else
      {
        sub_23C8899B0();
        v26 = v16;
      }
      v31 = type metadata accessor for AnyDatabaseCancellable();
      *(_QWORD *)(v3 - 208) = v1;
      swift_retain();
      v29 = sub_23C88FE74(v3 - 208, v31, *(_QWORD *)(v3 - 336), (uint64_t)&off_250D852B0);
      v32 = *(uint64_t **)(v3 - 248);
      v32[3] = v31;
      v32[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;
      v30 = v32;
      v27 = *(void (**)(void *))(v3 - 224);
LABEL_11:
      *(_QWORD *)(v3 - 328) = v26;
      swift_unknownObjectRelease();
      *v30 = v29;
      v33 = v19;
      v34 = *(_QWORD *)(v3 - 312);
      sub_23C7EC754(v19);
      v35 = *(_QWORD *)(v3 - 280);
      v36 = *(_QWORD *)(v3 - 296);
      sub_23C7ED114(v35);
      v37 = *(_QWORD *)(v3 - 256);
      v38 = *(_QWORD *)(v3 - 264);
      sub_23C7F1754(v37);
      sub_23C7E58EC((uint64_t)v27);
      v39 = *(_QWORD *)(v3 - 272);
      v40 = *(_QWORD *)(v3 - 288);
      sub_23C7E6D40(v39);
      swift_release();
      sub_23C88DD08(*(_QWORD *)(v3 - 328));
      sub_23C88D7B0(v33, v34, v35, v36, v37, v38, *(_QWORD *)(v3 - 224), v21, v39, v40, *(_QWORD *)(v3 - 240));
      sub_23C7DBCB0();
      return;
    }
    v41 = v13;
    v42 = v5;
    v43 = v7;
    sub_23C7F5610(v5);
    sub_23C7F5610(v43);
    sub_23C7F5610(v9);
    sub_23C7E2144(v12);
    sub_23C7F5610(v41);
    sub_23C7DB634();
    sub_23C7EDEBC(v42);
    sub_23C7F1754(v43);
    sub_23C7F1754(v9);
    sub_23C7F1754(v12);
    sub_23C7ED114(v41);
    sub_23C7DE904();
  }
  sub_23C9117B4();
  __break(1u);
}

id sub_23C88850C(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  return sub_23C888520(a1, a2, a3);
}

id sub_23C888520(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  void *v3;

  a3(objc_msgSend(v3, sel_lock));
  return objc_msgSend(v3, sel_unlock);
}

void sub_23C888590()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  sub_23C7DC5B8();
  v3 = objc_msgSend(v2, sel_lock);
  sub_23C7DF414((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v26);
  sub_23C88E178();
  if (v0)
  {
    sub_23C7E3368(v11);
  }
  else
  {
    v12 = sub_23C7E3368(v11);
    sub_23C7E8E9C((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
    *(_QWORD *)(v1 + 80) = v25;
  }
}

uint64_t sub_23C8885FC()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t *__return_ptr, id);
  uint64_t v3;
  char v4;
  uint64_t v6;

  sub_23C7EE08C();
  v2(&v6, objc_msgSend(v1, sel_lock));
  sub_23C88E178();
  sub_23C7E4E70(v3);
  if (!v0)
    v4 = v6;
  return v4 & 1;
}

void sub_23C888664()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;

  sub_23C7DC5B8();
  v2 = objc_msgSend(v1, sel_lock);
  sub_23C7DF414((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v24);
  sub_23C88E178();
  if (v0)
  {
    sub_23C7E3368(v10);
  }
  else
  {
    v11 = sub_23C7E3368(v10);
    sub_23C7E8E9C((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  }
  sub_23C7EE4E8();
}

id sub_23C8886B8()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t *__return_ptr, id);
  uint64_t v3;
  uint64_t v5;

  sub_23C7EE08C();
  v2(&v5, objc_msgSend(v1, sel_lock));
  sub_23C88E178();
  if (v0)
    return sub_23C7E4E70(v3);
  sub_23C7E4E70(v3);
  return (id)v5;
}

void sub_23C88871C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;

  sub_23C7DE8EC();
  v1 = v0;
  v106 = v2;
  v94 = v3;
  v5 = v4;
  v7 = v6;
  v104 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = *(_QWORD **)v1;
  v101 = sub_23C911430();
  v99 = *(_QWORD *)(v101 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v17);
  sub_23C7E16D4();
  v100 = v18;
  v97 = sub_23C9113F4();
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v19);
  sub_23C7E16D4();
  v98 = v20;
  sub_23C7E79A8(&qword_25430D2B0);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v21);
  sub_23C7E16D4();
  v84 = v22;
  v95 = sub_23C910D58();
  v66 = *(_QWORD *)(v95 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v23);
  sub_23C7E16D4();
  v96 = v24;
  v80 = type metadata accessor for Configuration();
  sub_23C7E1AD4();
  v26 = MEMORY[0x24BDAC7A8](v25);
  v85 = (uint64_t)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v83 = (char *)&v65 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v81 = (char *)&v65 - v30;
  *(_QWORD *)(v1 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_QWORD *)(v1 + 168) = 0;
  v32 = v16[11];
  v79 = v16[10];
  v31 = v79;
  v105 = v32;
  v34 = v16[13];
  v82 = v16[12];
  v33 = v82;
  *(_QWORD *)(v1 + 176) = 1;
  *(_BYTE *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 16) = v13;
  *(_BYTE *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 32) = v9;
  v35 = sub_23C888DEC(v7, v31, v32, v33, v34);
  v36 = *(_QWORD *)(v1 + 56);
  v78 = v15;
  *(_QWORD *)(v1 + 56) = v15;
  *(_QWORD *)(v1 + 64) = v35;
  *(_QWORD *)(v1 + 72) = v37;
  v102 = v13;
  swift_retain();
  swift_unknownObjectRetain();
  sub_23C88DD08(v36);
  v38 = *v5;
  v39 = v5[1];
  v40 = v5[2];
  v41 = v5[3];
  v43 = v5[4];
  v42 = v5[5];
  v44 = v5[6];
  v45 = v5[7];
  v46 = v5[8];
  v47 = v5[9];
  v103 = v46;
  v77 = *(_QWORD *)(v1 + 80);
  v76 = *(_QWORD *)(v1 + 88);
  v75 = *(_QWORD *)(v1 + 96);
  v74 = *(_QWORD *)(v1 + 104);
  v73 = *(_QWORD *)(v1 + 112);
  v72 = *(_QWORD *)(v1 + 120);
  v71 = *(_QWORD *)(v1 + 128);
  v70 = *(_QWORD *)(v1 + 136);
  v69 = *(_OWORD *)(v1 + 144);
  v68 = *(_QWORD *)(v1 + 160);
  v67 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 80) = v38;
  *(_QWORD *)(v1 + 88) = v39;
  *(_QWORD *)(v1 + 96) = v40;
  *(_QWORD *)(v1 + 104) = v41;
  *(_QWORD *)(v1 + 112) = v43;
  *(_QWORD *)(v1 + 120) = v42;
  *(_QWORD *)(v1 + 128) = v44;
  *(_QWORD *)(v1 + 136) = v45;
  *(_QWORD *)(v1 + 144) = v46;
  *(_QWORD *)(v1 + 152) = v47;
  v48 = v106;
  *(_QWORD *)(v1 + 160) = v94;
  *(_QWORD *)(v1 + 168) = v48;
  swift_retain();
  v87 = v38;
  v86 = v39;
  sub_23C7F5610(v38);
  v88 = v41;
  v89 = v40;
  v49 = v80;
  sub_23C7F5610(v40);
  v90 = v42;
  v91 = v43;
  sub_23C7F5610(v43);
  v92 = v45;
  v93 = v44;
  sub_23C7F5610(v44);
  v94 = v47;
  sub_23C7F5610(v103);
  sub_23C88D7B0(v77, v76, v75, v74, v73, v72, v71, v70, v69, *((uint64_t *)&v69 + 1), v68);
  v50 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 176);
  v77 = *(_QWORD *)(v105 - 8);
  (*(void (**)(uint64_t, uint64_t))(v77 + 16))(v50, v104);
  v51 = (uint64_t)v81;
  sub_23C88E198();
  v52 = *(_QWORD *)(v51 + 8);
  if (*(_QWORD *)(v51 + 16))
  {
    v53 = *(_QWORD *)(v51 + 16);
  }
  else
  {
    v52 = 1111773767;
    v53 = 0xE400000000000000;
  }
  v107 = v52;
  v108 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C910F5C();
  v54 = (uint64_t)v83;
  swift_bridgeObjectRelease();
  v82 = v108;
  sub_23C84AB78(v51);
  sub_23C88E198();
  if (*(_QWORD *)(v54 + *(int *)(v49 + 68)))
  {
    v55 = v84;
    sub_23C91143C();
    v56 = 0;
    v57 = v55;
  }
  else
  {
    v57 = v84;
    v56 = 1;
  }
  v58 = v95;
  sub_23C7DE70C(v57, v56, 1, v95);
  v59 = v85;
  sub_23C84AB34(v54, v85);
  v60 = sub_23C7DE718(v57, 1, v58);
  v61 = v96;
  if (v60 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v96, v59 + *(int *)(v49 + 64), v58);
    sub_23C84AB78(v59);
    v62 = sub_23C84ABB4(v57);
  }
  else
  {
    sub_23C84AB78(v59);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v61, v57, v58);
  }
  v63 = v77;
  sub_23C7E188C(v62, (unint64_t *)&qword_25430DBB0);
  sub_23C84AB78(v54);
  v107 = MEMORY[0x24BEE4AF8];
  sub_23C7E45DC((unint64_t *)&qword_25430DBA8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  sub_23C7E79A8(qword_25430D970);
  sub_23C88DDCC((unint64_t *)&qword_25430DBA0, qword_25430D970);
  sub_23C7DF92C();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v100, *MEMORY[0x24BEE5750], v101);
  v64 = sub_23C911478();
  swift_release();
  sub_23C7EDEBC(v87);
  sub_23C7F1754(v89);
  sub_23C7F1754(v91);
  sub_23C7F1754(v93);
  sub_23C7F1754(v103);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v104, v105);
  *(_QWORD *)(v1 + 48) = v64;
  sub_23C7DBCB0();
}

void (*sub_23C888DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  return sub_23C88DE60;
}

uint64_t *sub_23C888EB8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  sub_23C83BC68(v0[4]);

  sub_23C88DD08(v0[7]);
  sub_23C88D7B0(v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19], v0[20]);
  sub_23C88CFA0(v0[22]);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 176));
  return v0;
}

uint64_t sub_23C888F54()
{
  sub_23C888EB8();
  return swift_deallocClassInstance();
}

void type metadata accessor for ValueWriteOnlyObserver()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C888F88(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_23C888F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != 1)
    v4 = swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  sub_23C7DB390();
}

uint64_t sub_23C888FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 == 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    v6 = 1;
  }
  else
  {
    if (v5 != 1)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_23C889064(a1);
    v6 = *(_QWORD *)a2;
  }
  *(_QWORD *)a1 = v6;
LABEL_9:
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_23C889064(uint64_t a1)
{
  destroy for DatabaseRegion();
  return a1;
}

uint64_t sub_23C889098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 != 1)
  {
    if (v4 != 1)
    {
      *(_QWORD *)a1 = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_23C889064(a1);
    v4 = 1;
  }
  *(_QWORD *)a1 = v4;
LABEL_6:
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t sub_23C889100(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFD && *((_BYTE *)a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 2147483645;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v4 = v3 - 1;
      if (v4 < 0)
        v4 = -1;
      v5 = __OFSUB__(v4, 1);
      v2 = v4 - 1;
      if (v2 < 0 != v5)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C88915C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for ValueWriteOnlyObserver.ObservationState()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C8891B8(_QWORD *a1)
{
  if (*a1)
    swift_release();
  if (a1[2])
    swift_release();
  if (a1[4])
    swift_release();
  if (a1[6])
    swift_release();
  if (a1[8])
    swift_release();
  return swift_release();
}

_QWORD *sub_23C889228(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = a2[4];
  if (v7)
  {
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v9 = a2[6];
  if (v9)
  {
    v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  v11 = a2[8];
  if (v11)
  {
    v12 = a2[9];
    a1[8] = v11;
    a1[9] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  v13 = a2[11];
  a1[10] = a2[10];
  a1[11] = v13;
  swift_retain();
  return a1;
}

_QWORD *sub_23C889318(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (a1[6])
  {
    if (v13)
    {
      v14 = a2[7];
      a1[6] = v13;
      a1[7] = v14;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    a1[6] = v13;
    a1[7] = v15;
    swift_retain();
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (!a1[8])
  {
    if (v16)
    {
      v18 = a2[9];
      a1[8] = v16;
      a1[9] = v18;
      swift_retain();
      goto LABEL_36;
    }
LABEL_35:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    goto LABEL_36;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_35;
  }
  v17 = a2[9];
  a1[8] = v16;
  a1[9] = v17;
  swift_retain();
  swift_release();
LABEL_36:
  v19 = a2[11];
  a1[10] = a2[10];
  a1[11] = v19;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_23C88950C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_23C889514(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v7)
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = a2[5];
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v13)
    {
      v14 = a2[7];
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v14;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = a2[7];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v15;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v16 = a2[8];
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v16)
    {
      v18 = a2[9];
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v18;
      goto LABEL_36;
    }
LABEL_35:
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    goto LABEL_36;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_35;
  }
  v17 = a2[9];
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v17;
  swift_release();
LABEL_36:
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  swift_release();
  return a1;
}

uint64_t sub_23C8896C4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C889704(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ValueWriteOnlyObserver.NotificationCallbacks()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C88976C()
{
  swift_unknownObjectRelease();
  return swift_release();
}

void sub_23C889794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v2;
  swift_unknownObjectRetain();
  sub_23C7DC47C();
  sub_23C7DB390();
}

_QWORD *sub_23C8897CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C889828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

void type metadata accessor for ValueWriteOnlyObserver.DatabaseAccess()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C889878()
{
  return 0x29287472617473;
}

uint64_t sub_23C889890@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[14];
  v6 = a1[15];
  v7 = a1[16];
  v8 = a1[17];
  v9 = a1[18];
  v10 = a1[19];
  v11 = a1[20];
  v12 = a1[21];
  v14 = a1[9];
  v13 = a1[10];
  *a2 = v13;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  a2[6] = v7;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = v10;
  a2[10] = v11;
  a2[11] = v12;
  v15 = a1[7];
  v16 = a1[8];
  a2[12] = v15;
  a2[13] = v16;
  a2[14] = v14;
  sub_23C88DEB4(v13, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  return sub_23C88DF68(v15);
}

uint64_t sub_23C889920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = *(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v2(sub_23C88DF94, v0, AssociatedTypeWitness, v3, v1);
}

uint64_t sub_23C8899B0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_retain();
  v2(sub_23C88E000, v0, v3, v1);
  return swift_release();
}

uint64_t sub_23C889A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = a3;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v17[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 104) + 8);
  v17[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v17 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v17 - v13;
  result = sub_23C889C2C(a1, (uint64_t)v11);
  if (!v3)
  {
    if (sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      result = sub_23C9117B4();
      __break(1u);
    }
    else
    {
      v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, AssociatedTypeWitness);
      MEMORY[0x24BDAC7A8](v16);
      swift_getAssociatedTypeWitness();
      sub_23C911460();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t sub_23C889C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  void (*v77)(uint64_t);
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_QWORD);
  unint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[2];
  void (*v99)(_QWORD);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v4 = v2;
  v94 = a1;
  v92 = a2;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 104);
  v7 = *(_QWORD *)(*v2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v85 = (unint64_t *)((char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v86 = (unint64_t *)((char *)&v79 - v11);
  sub_23C88DD94(0, &qword_256BCD008);
  sub_23C7DDB10(&qword_256BCD010);
  type metadata accessor for Database();
  v95 = AssociatedTypeWitness;
  swift_getFunctionTypeMetadata1();
  sub_23C9114E4();
  swift_getTupleTypeMetadata2();
  sub_23C888520((uint64_t)sub_23C88B3F8, 0, (void (*)(id))sub_23C88DFC4);
  v12 = v102;
  v93 = v104;
  v13 = v105;
  v14 = v107;
  if (!v107)
  {
    if (v98[0] != 1)
    {
      v29 = v103;
      v30 = v101;
      v31 = (uint64_t)v99;
      sub_23C7F1754(v98[0]);
      sub_23C7F1754(v31);
      sub_23C7F1754(v30);
      sub_23C7F1754(v29);
      sub_23C7F1754(v13);
      v28 = v95;
      goto LABEL_10;
    }
    v19 = 0;
LABEL_8:
    v28 = v95;
    sub_23C7F1754((uint64_t)v19);
LABEL_10:
    v32 = v92;
    v33 = 1;
    v34 = v28;
    return sub_23C7DE70C(v32, v33, 1, v34);
  }
  v81 = v98[1];
  v84 = v99;
  v87 = v100;
  v83 = v101;
  v89 = v103;
  v90 = v105;
  v91 = v106;
  v15 = v108;
  v88 = v98[0];
  v16 = (_QWORD *)swift_allocObject();
  v17 = v16;
  v18 = v88;
  v16[2] = *(_QWORD *)(v5 + 80);
  v16[3] = v7;
  v16[4] = *(_QWORD *)(v5 + 96);
  v16[5] = v6;
  v16[6] = v14;
  v16[7] = v15;
  v19 = sub_23C88E144;
  if (v18 == 1)
    goto LABEL_8;
  v20 = v4[4];
  v80 = v12;
  if (v20 < 2)
  {
    v21 = v18;
    v22 = v12;
    v23 = v81;
    v24 = v84;
    v25 = v83;
    sub_23C88CEF4(v18, v81, (uint64_t)v84, v87, v83, v22, v89, v93, v90, v91, (void (*)(void))sub_23C88E0FC, (void (*)(uint64_t, uint64_t))sub_23C7F5610, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
    sub_23C7F5610((uint64_t)sub_23C88E144);
    sub_23C7E3084();
    v26 = sub_23C910DAC();
    v86 = &v79;
    v98[0] = v26;
    MEMORY[0x24BDAC7A8](v26);
    v75 = v94;
    v76 = v4;
    v77 = sub_23C88E144;
    v78 = v17;
    sub_23C8E88AC(v98);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_23C88CEF4(v21, v23, (uint64_t)v24, v87, v25, v80, v89, v93, v90, v91, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
      sub_23C7F1754((uint64_t)sub_23C88E144);
      sub_23C7F1754((uint64_t)sub_23C88E144);
      sub_23C7F1754(v21);
      sub_23C7F1754((uint64_t)v24);
      sub_23C7F1754(v25);
      sub_23C7F1754(v89);
      return sub_23C7F1754(v90);
    }
    v42 = v80;
    if (v98[0])
    {
      v43 = swift_bridgeObjectRetain();
      v44 = sub_23C88CFFC(v43);
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = 0;
    }
    v97 = v44;
    sub_23C8679E0(&v109);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v109;
    v56 = v87;
    v57 = v84;
    if (v84)
      v84(&v109);
    v109 = v55;
    sub_23C88B5B0(v94, &v109);
    v58 = v88;
    v94 = v55;
    v59 = v56;
    v60 = v83;
    v61 = v89;
    sub_23C88CEF4(v88, v81, (uint64_t)v57, v59, v83, v42, v89, v93, v90, v91, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    sub_23C7F1754((uint64_t)sub_23C88E144);
    sub_23C7F1754((uint64_t)sub_23C88E144);
    sub_23C7F1754(v58);
    sub_23C7F1754((uint64_t)v57);
    sub_23C7F1754(v60);
    sub_23C7F1754(v61);
    sub_23C7F1754(v90);
    swift_bridgeObjectRelease();
    v62 = *(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 32);
    v63 = v92;
    v64 = v92;
    v65 = &v110;
    goto LABEL_30;
  }
  v79 = v20;
  v85 = &v79;
  v35 = *((_BYTE *)v4 + 24);
  MEMORY[0x24BDAC7A8](v16);
  *(&v79 - 8) = v36;
  *(&v79 - 7) = v7;
  v38 = v37;
  v39 = v81;
  sub_23C88CEF4(v37, v81, (uint64_t)v84, v87, v83, v12, v89, v93, v90, v91, (void (*)(void))sub_23C88E0FC, (void (*)(uint64_t, uint64_t))sub_23C7F5610, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
  sub_23C7F5610((uint64_t)sub_23C88E144);
  sub_23C7DE574(v35, (uint64_t)sub_23C88D118, (uint64_t)(&v79 - 10), v95, (uint64_t)v86);
  if (!v3)
  {
    sub_23C7E3084();
    v45 = v79;
    swift_bridgeObjectRetain();
    v46 = sub_23C910DAC();
    v47 = *(_QWORD *)(v45 + 16);
    if (v47)
    {
      v48 = (_QWORD *)(v45 + 32);
      swift_bridgeObjectRetain();
      do
      {
        v49 = v48[3];
        v50 = v48[4];
        sub_23C7E7E34(v48, v49);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v50 + 8))(v98, v94, v49, v50);
        v96 = v98[0];
        v97 = v46;
        DatabaseRegion.union(_:)(&v96, &v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v46 = v109;
        v48 += 5;
        --v47;
      }
      while (v47);
      v45 = v79;
      sub_23C83BC68(v79);
    }
    v51 = v91;
    v52 = v94;
    sub_23C83BC68(v45);
    if (v46)
    {
      v53 = swift_bridgeObjectRetain();
      v54 = sub_23C88CFFC(v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = 0;
    }
    v109 = v54;
    sub_23C8679E0(v98);
    v66 = v51;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v67 = v98[0];
    v68 = v87;
    v69 = v84;
    if (v84)
      v84(v98);
    v98[0] = v67;
    sub_23C88B5B0(v52, v98);
    v94 = v67;
    v70 = v88;
    v71 = v68;
    v72 = v83;
    v73 = v89;
    sub_23C88CEF4(v88, v81, (uint64_t)v69, v71, v83, v80, v89, v93, v90, v66, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    sub_23C7F1754((uint64_t)sub_23C88E144);
    sub_23C7F1754((uint64_t)sub_23C88E144);
    sub_23C7F1754(v70);
    sub_23C7F1754((uint64_t)v69);
    sub_23C7F1754(v72);
    sub_23C7F1754(v73);
    sub_23C7F1754(v90);
    swift_bridgeObjectRelease();
    v62 = *(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 32);
    v63 = v92;
    v64 = v92;
    v65 = &v111;
LABEL_30:
    v74 = v95;
    v62(v64, *(v65 - 32), v95);
    v32 = v63;
    v33 = 0;
    v34 = v74;
    return sub_23C7DE70C(v32, v33, 1, v34);
  }
  v40 = v84;
  v41 = v83;
  sub_23C88CEF4(v38, v39, (uint64_t)v84, v87, v83, v80, v89, v93, v90, v91, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
  sub_23C7F1754((uint64_t)sub_23C88E144);
  sub_23C7F1754(v38);
  sub_23C7F1754((uint64_t)v40);
  sub_23C7F1754(v41);
  sub_23C7F1754(v89);
  sub_23C7F1754(v90);
  return sub_23C7F1754((uint64_t)sub_23C88E144);
}

uint64_t sub_23C88AA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v12 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a2, v5, v4);
  swift_endAccess();
  if (sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  result = sub_23C9117B4();
  __break(1u);
  return result;
}

uint64_t sub_23C88ABC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[8];

  v4 = *a2;
  v5 = sub_23C910D34();
  v6 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  v41 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910D58();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v4 + 104);
  v44 = v4;
  v36 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_23C9114E4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v35 - v14;
  v45 = AssociatedTypeWitness;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v35 - v20;
  sub_23C889C2C(a1, (uint64_t)v15);
  v22 = v11;
  v23 = v44;
  if (sub_23C7DE718((uint64_t)v15, 1, v45) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v22);
  v25 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v26 = v45;
  v25(v21, v15, v45);
  v35 = a2[6];
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v26);
  v27 = (*(unsigned __int8 *)(v16 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v28 = (char *)swift_allocObject();
  v29 = v36;
  *((_QWORD *)v28 + 2) = *(_QWORD *)(v23 + 80);
  *((_QWORD *)v28 + 3) = v29;
  v30 = v38;
  *((_QWORD *)v28 + 4) = *(_QWORD *)(v23 + 96);
  *((_QWORD *)v28 + 5) = v30;
  *((_QWORD *)v28 + 6) = a2;
  v25(&v28[v27], v19, v26);
  aBlock[4] = sub_23C88E014;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23C88B2C0;
  aBlock[3] = &unk_250D8A3A0;
  v31 = _Block_copy(aBlock);
  swift_retain();
  v32 = v37;
  sub_23C910D40();
  v46 = MEMORY[0x24BEE4AF8];
  sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23C7E79A8(&qword_25430D600);
  sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
  v33 = v39;
  v34 = v40;
  sub_23C911574();
  MEMORY[0x242625098](0, v32, v33, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v43);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v26);
  return swift_release();
}

uint64_t sub_23C88AF58(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(id (*)(), char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 104);
  v29 = a2;
  v30 = v4;
  v5 = *(_QWORD *)(v4 + 8);
  v32 = v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v31 = (char *)&v27 - v15;
  result = sub_23C8885FC();
  if ((result & 1) != 0)
  {
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v29, v32, v5);
    swift_endAccess();
    if (sub_23C7DE718((uint64_t)v10, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      result = sub_23C9117B4();
      __break(1u);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v18 = v31;
      v17(v31, v10, AssociatedTypeWitness);
      v19 = (_QWORD *)a1[2];
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, AssociatedTypeWitness);
      v20 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v21 = (char *)swift_allocObject();
      v22 = v32;
      *((_QWORD *)v21 + 2) = v3[10];
      *((_QWORD *)v21 + 3) = v22;
      v23 = v30;
      *((_QWORD *)v21 + 4) = v3[12];
      *((_QWORD *)v21 + 5) = v23;
      *((_QWORD *)v21 + 6) = a1;
      v17(&v21[v20], v14, AssociatedTypeWitness);
      v24 = v19[5];
      v25 = v19[6];
      sub_23C7E7E34(v19 + 2, v24);
      v26 = *(void (**)(id (*)(), char *, uint64_t, uint64_t))(v25 + 8);
      swift_retain();
      v26(sub_23C88E07C, v21, v24, v25);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v31, AssociatedTypeWitness);
    }
  }
  return result;
}

unint64_t sub_23C88B20C()
{
  return 0xD000000000000011;
}

uint64_t *sub_23C88B228@<X0>(uint64_t *result@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = result[20];
  if (v3)
  {
    v4 = *result;
    v5 = result[21];
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 80);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)(v4 + 88);
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(v4 + 104);
    *(_QWORD *)(v6 + 48) = v3;
    *(_QWORD *)(v6 + 56) = v5;
    result = (uint64_t *)swift_retain();
    v7 = sub_23C88E158;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return result;
}

uint64_t sub_23C88B2C0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = sub_23C7DC47C();
  v1(v2);
  return swift_release();
}

id sub_23C88B2E8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C8080CC();
  v1 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 176) = 1;
  *(_BYTE *)(v0 + 184) = 0;
  sub_23C88CFA0(v1);
  return sub_23C888520((uint64_t)sub_23C88CE44, 0, (void (*)(id))sub_23C88DCF0);
}

uint64_t sub_23C88B364(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *(*)(), uint64_t, uint64_t, uint64_t);
  id v9;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = sub_23C7DB388();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = v3 + 2;
  v6 = v3[5];
  v7 = v3[6];
  sub_23C7E7E34(v5, v6);
  v8 = *(void (**)(uint64_t *(*)(), uint64_t, uint64_t, uint64_t))(v7 + 8);
  sub_23C7DC47C();
  v9 = a1;
  v8(sub_23C88D6E0, v4, v6, v7);
  return swift_release();
}

unint64_t sub_23C88B3F8()
{
  return 0xD00000000000001CLL;
}

_QWORD *sub_23C88B414@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = result;
  v28 = *result;
  if (result[20])
  {
    v4 = result[10];
    v6 = result[12];
    v5 = result[13];
    v7 = result[14];
    v8 = result[15];
    v9 = result[16];
    v10 = result[18];
    v25 = result[17];
    v26 = result[19];
    v30 = result[11];
    sub_23C7F5610(v4);
    sub_23C7F5610(v6);
    sub_23C7F5610(v7);
    v31 = v9;
    v11 = v9;
    v12 = v25;
    sub_23C7F5610(v11);
    v29 = v10;
    v13 = v10;
    v14 = v26;
    result = (_QWORD *)sub_23C7F5610(v13);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v6 = 0;
    v5 = 0;
    v7 = 0;
    v8 = 0;
    v12 = 0;
    v29 = 0;
    v14 = 0;
    v4 = 1;
  }
  v15 = (void (*)(_QWORD *))v2[7];
  if (v15)
  {
    v27 = v8;
    v16 = v7;
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v14;
    v21 = v12;
    v23 = v2[8];
    v22 = v2[9];
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v28 + 80);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v28 + 88);
    *(_QWORD *)(v24 + 40) = *(_QWORD *)(v28 + 104);
    *(_QWORD *)(v24 + 48) = v23;
    v12 = v21;
    v14 = v20;
    v6 = v19;
    v5 = v18;
    v4 = v17;
    v7 = v16;
    v8 = v27;
    *(_QWORD *)(v24 + 56) = v22;
    result = (_QWORD *)swift_retain();
    v15 = sub_23C88E118;
  }
  else
  {
    v24 = 0;
  }
  *a2 = v4;
  a2[1] = v30;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v31;
  a2[7] = v12;
  a2[8] = v29;
  a2[9] = v14;
  a2[10] = (uint64_t)v15;
  a2[11] = v24;
  return result;
}

uint64_t sub_23C88B5B0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7;

  v4 = *v2;
  v5 = v2[22];
  v2[22] = *a2;
  swift_bridgeObjectRetain();
  sub_23C88CFA0(v5);
  v7 = 0;
  return sub_23C80848C((uint64_t)v2, &v7, a1, v4, (uint64_t)&off_250D85280);
}

BOOL sub_23C88B618(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v5 = *(_QWORD *)(v4 + 176);
  if (v5 == 1)
  {
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = DatabaseRegion.isModified(byEventsOfKind:)(a1, a2, a3, a4);
    sub_23C88CFA0(v5);
  }
  return v6;
}

void sub_23C88B6A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 176);
  if (!v3)
    goto LABEL_9;
  if (v3 == 1)
    return;
  v5 = a1[3];
  v6 = a1[4];
  sub_23C7E7E34(a1, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v8 = v7(v5, v6);
  v10 = v9;
  v11 = sub_23C910E18();
  sub_23C866094(v11, v12, v8, v10, v3);
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 == 1)
    goto LABEL_9;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    sub_23C88CFA0(v3);
LABEL_10:
    *(_BYTE *)(v2 + 184) = 1;
    TransactionObserver.stopObservingDatabaseChangesUntilNextTransaction()();
    return;
  }
  sub_23C868540(a1[6], v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C88CFA0(v3);
  if ((v18 & 1) != 0)
    goto LABEL_10;
}

void sub_23C88B7CC()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v2)(void);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void (*v36)(uint64_t);
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  void (*v64)(_QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(void);
  void (*v91)(uint64_t, uint64_t);
  void (*v92)(uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)();
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(void);
  uint64_t v118;
  id v119;
  void (*v120)(_QWORD);
  uint64_t v121[2];
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  void *v125;
  uint64_t (*v126)();
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  sub_23C7DE8EC();
  v1 = v0;
  v117 = v2;
  v3 = (_QWORD *)*v0;
  v4 = sub_23C910D34();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C910D58();
  v116 = *(_QWORD *)(v8 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = (id)v3[13];
  v118 = v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v94 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v94 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  if (*((_BYTE *)v1 + 184) == 1)
  {
    v99 = v23;
    v105 = (char *)&v94 - v21;
    v106 = v22;
    v109 = v11;
    v100 = v8;
    v102 = v7;
    v101 = v5;
    *((_BYTE *)v1 + 184) = 0;
    v24 = v20;
    sub_23C7E188C(v20, &qword_256BCD008);
    v25 = (void *)sub_23C7DDB10(&qword_256BCD010);
    type metadata accessor for Database();
    v110 = v24;
    swift_getFunctionTypeMetadata1();
    sub_23C7E3374();
    sub_23C7E8E90();
    sub_23C7DEABC((uint64_t)sub_23C88C180, 0, (void (*)(id))sub_23C88CEB8);
    v112 = v126;
    v26 = v128;
    v113 = v127;
    v27 = v129;
    v28 = v132;
    v114 = v131;
    v115 = v130;
    if (v132)
    {
      v103 = v123;
      v108 = v124;
      v107 = (uint64_t)v125;
      v104 = v128;
      v98 = v4;
      v29 = v133;
      v111 = v122;
      v30 = sub_23C7DB388();
      v31 = v111;
      v32 = v3[10];
      v33 = v118;
      *(_QWORD *)(v30 + 16) = v32;
      *(_QWORD *)(v30 + 24) = v33;
      v34 = v3[12];
      v35 = v119;
      *(_QWORD *)(v30 + 32) = v34;
      *(_QWORD *)(v30 + 40) = v35;
      *(_QWORD *)(v30 + 48) = v28;
      *(_QWORD *)(v30 + 56) = v29;
      v36 = sub_23C88D12C;
      if (v31 != 1)
      {
        v95 = v34;
        v96 = v32;
        v37 = v112;
        v97 = v27;
        if (v112)
        {
          sub_23C7E84EC();
          sub_23C88E15C(v38, v39, v40, v41, (uint64_t)v37, v113, v42, v43, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
          v44 = sub_23C7F5610((uint64_t)sub_23C88D12C);
          ((void (*)(uint64_t))v37)(v44);
        }
        else
        {
          sub_23C7E84EC();
          sub_23C88E15C(v47, v48, v49, v50, 0, v113, v51, v52, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t))sub_23C88E0FC);
          sub_23C7F5610((uint64_t)sub_23C88D12C);
        }
        v53 = (uint64_t)v109;
        if (v1[4] != 1)
        {
          v55 = MEMORY[0x24BDAC7A8](*((unsigned __int8 *)v1 + 24));
          v57 = v117;
          v56 = v118;
          *(&v94 - 8) = v96;
          *(&v94 - 7) = v56;
          v88 = v95;
          v89 = (uint64_t)v119;
          v90 = (void (*)(void))sub_23C88D12C;
          v91 = (void (*)(uint64_t, uint64_t))v30;
          v92 = (void (*)(uint64_t))v57;
          v58 = v110;
          sub_23C7DE574(v55, (uint64_t)sub_23C88D118, (uint64_t)(&v94 - 10), v110, (uint64_t)v19);
          if (v25)
            goto LABEL_21;
          v59 = v106;
          v60 = v105;
          v61 = v19;
          v62 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
          v62(v105, v61, v58);
LABEL_29:
          v72 = v99;
          (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v99, v60, v58);
          v73 = (*(unsigned __int8 *)(v59 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
          v74 = (char *)swift_allocObject();
          v75 = v118;
          *((_QWORD *)v74 + 2) = v96;
          *((_QWORD *)v74 + 3) = v75;
          v76 = v119;
          *((_QWORD *)v74 + 4) = v95;
          *((_QWORD *)v74 + 5) = v76;
          *((_QWORD *)v74 + 6) = v1;
          v62(&v74[v73], v72, v58);
          v126 = sub_23C88CFBC;
          v127 = (uint64_t)v74;
          v122 = MEMORY[0x24BDAC760];
          v123 = 1107296256;
          v124 = sub_23C88B2C0;
          v125 = &unk_250D8A2B0;
          v77 = _Block_copy(&v122);
          swift_retain();
          sub_23C910D40();
          v121[0] = MEMORY[0x24BEE4AF8];
          sub_23C7E45DC((unint64_t *)&qword_25430D5F8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          sub_23C7E79A8(&qword_25430D600);
          sub_23C88DDCC((unint64_t *)&qword_25430D550, &qword_25430D600);
          v78 = (uint64_t)v102;
          sub_23C7DF92C();
          MEMORY[0x242625098](0, v53, v78, v77);
          sub_23C7EC754((uint64_t)sub_23C88D12C);
          _Block_release(v77);
          v79 = v103;
          sub_23C7E58EC(v111);
          v80 = (uint64_t)v108;
          v81 = v107;
          sub_23C7E6D40((uint64_t)v108);
          v82 = (uint64_t)v112;
          v83 = v113;
          sub_23C7E5F14((uint64_t)v112);
          v84 = v104;
          v85 = v97;
          sub_23C7DBD64(v104);
          v86 = v114;
          v87 = v115;
          sub_23C7DC5B0(v115);
          sub_23C7EC754((uint64_t)sub_23C88D12C);
          sub_23C88CEF4(v111, v79, v80, v81, v82, v83, v84, v85, v87, v86, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
          sub_23C7E1884((uint64_t)v102, *(uint64_t (**)(uint64_t, _QWORD))(v101 + 8));
          sub_23C7E1884((uint64_t)v109, *(uint64_t (**)(uint64_t, _QWORD))(v116 + 8));
          sub_23C7E4398();
          swift_release();
          goto LABEL_30;
        }
        sub_23C7E3084();
        v122 = sub_23C910DAC();
        MEMORY[0x24BDAC7A8](v122);
        v90 = v117;
        v91 = (void (*)(uint64_t, uint64_t))v1;
        v92 = sub_23C88D12C;
        v93 = v30;
        v54 = v110;
        sub_23C8E88AC(&v122);
        if (v25)
        {
          swift_bridgeObjectRelease();
LABEL_21:
          v119 = v25;
          sub_23C88B2E8();
          sub_23C88B364(v25);
          v65 = v111;
          v66 = (uint64_t)v108;
          v67 = (uint64_t)v112;
          v68 = v104;
          sub_23C88CEF4(v111, v103, (uint64_t)v108, v107, (uint64_t)v112, v113, v104, v97, v115, v114, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
          sub_23C7EC754((uint64_t)sub_23C88D12C);
          sub_23C7EC754((uint64_t)sub_23C88D12C);
          sub_23C7DBD64(v65);
          sub_23C7ED114(v66);
          sub_23C7E6D40(v67);
          sub_23C7DC5B0(v68);
          sub_23C7F1754(v115);

          goto LABEL_30;
        }
        v62 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
        v62(v105, v16, v54);
        if (v122)
        {
          v63 = swift_bridgeObjectRetain();
          v64 = (void (*)(_QWORD))sub_23C88CFFC(v63);
          sub_23C7DB624();
        }
        else
        {
          v64 = 0;
        }
        v120 = v64;
        sub_23C8679E0(v121);
        swift_bridgeObjectRelease();
        sub_23C7DB624();
        v69 = v121[0];
        if (!v108)
        {
LABEL_28:
          v71 = v1[22];
          v1[22] = v69;
          sub_23C88CFA0(v71);
          v58 = v110;
          v59 = v106;
          v60 = v105;
          goto LABEL_29;
        }
        if (v1[22] == 1)
        {
          sub_23C7DB420();
          sub_23C7E6328();
          sub_23C7DB624();
          sub_23C88CFA0(v69);
          sub_23C88CFA0(1);
        }
        else
        {
          v120 = (void (*)(_QWORD))v1[22];
          sub_23C7DB420();
          sub_23C7E6328();
          v70 = static DatabaseRegion.== infix(_:_:)(v121, (uint64_t *)&v120);
          sub_23C7DB624();
          swift_bridgeObjectRelease();
          if ((v70 & 1) != 0)
          {
LABEL_27:
            sub_23C7F1754((uint64_t)v64);
            goto LABEL_28;
          }
        }
        v121[0] = v69;
        v64(v121);
        goto LABEL_27;
      }
    }
    else
    {
      if (v122 != 1)
      {
        v46 = (uint64_t)v124;
        sub_23C7F1754(v122);
        sub_23C7E5F14(v46);
        sub_23C7EDEBC((uint64_t)v112);
        sub_23C7E58EC(v26);
        v45 = v115;
        goto LABEL_10;
      }
      v36 = 0;
    }
    v45 = (uint64_t)v36;
LABEL_10:
    sub_23C7F1754(v45);
  }
LABEL_30:
  sub_23C7DBCB0();
}

unint64_t sub_23C88C180()
{
  return 0xD000000000000015;
}

_QWORD *sub_23C88C19C@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = result;
  v28 = *result;
  if (result[20])
  {
    v4 = result[10];
    v6 = result[12];
    v5 = result[13];
    v7 = result[14];
    v8 = result[15];
    v9 = result[16];
    v10 = result[18];
    v25 = result[17];
    v26 = result[19];
    v30 = result[11];
    sub_23C7F5610(v4);
    sub_23C7F5610(v6);
    sub_23C7F5610(v7);
    v31 = v9;
    v11 = v9;
    v12 = v25;
    sub_23C7F5610(v11);
    v29 = v10;
    v13 = v10;
    v14 = v26;
    result = (_QWORD *)sub_23C7F5610(v13);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v6 = 0;
    v5 = 0;
    v7 = 0;
    v8 = 0;
    v12 = 0;
    v29 = 0;
    v14 = 0;
    v4 = 1;
  }
  v15 = (void (*)(_QWORD *))v2[7];
  if (v15)
  {
    v27 = v8;
    v16 = v7;
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v14;
    v21 = v12;
    v23 = v2[8];
    v22 = v2[9];
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = *(_QWORD *)(v28 + 80);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v28 + 88);
    *(_QWORD *)(v24 + 40) = *(_QWORD *)(v28 + 104);
    *(_QWORD *)(v24 + 48) = v23;
    v12 = v21;
    v14 = v20;
    v6 = v19;
    v5 = v18;
    v4 = v17;
    v7 = v16;
    v8 = v27;
    *(_QWORD *)(v24 + 56) = v22;
    result = (_QWORD *)swift_retain();
    v15 = sub_23C88DD58;
  }
  else
  {
    v24 = 0;
  }
  *a2 = v4;
  a2[1] = v30;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v31;
  a2[7] = v12;
  a2[8] = v29;
  a2[9] = v14;
  a2[10] = (uint64_t)v15;
  a2[11] = v24;
  return result;
}

void sub_23C88C338(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)a2;
  v9 = a2[24];
  v11[2] = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v12 = *(_OWORD *)(v8 + 88);
  v13 = *(_QWORD *)(v8 + 104);
  v14 = a3;
  v15 = a4;
  v16 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C7DE574(v9, a5, (uint64_t)v11, AssociatedTypeWitness, a6);
  sub_23C7EE4E8();
}

uint64_t sub_23C88C3C8(_QWORD *a1, void (*a2)(char *, char *, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(id (*)(), char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = (_QWORD *)*a1;
  v30 = *(_QWORD *)(*a1 + 104);
  v31 = a2;
  v4 = *(_QWORD *)(v30 + 8);
  v34 = v3[11];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v33 + 64);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v28 - v8;
  v9 = sub_23C9114E4();
  v35 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v28 - v13;
  result = sub_23C8885FC();
  if ((result & 1) != 0)
  {
    swift_beginAccess();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(v31, v34, v4);
    swift_endAccess();
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v12, v14, v9);
    if (sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness) == 1)
    {
      v16 = *(void (**)(char *, uint64_t))(v35 + 8);
      v16(v14, v9);
      return ((uint64_t (*)(char *, uint64_t))v16)(v12, v9);
    }
    else
    {
      v18 = v32;
      v17 = v33;
      v31 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v31(v32, v12, AssociatedTypeWitness);
      v19 = (_QWORD *)a1[2];
      v20 = v29;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v29, v18, AssociatedTypeWitness);
      v21 = (*(unsigned __int8 *)(v17 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v22 = (char *)swift_allocObject();
      v23 = v34;
      *((_QWORD *)v22 + 2) = v3[10];
      *((_QWORD *)v22 + 3) = v23;
      v24 = v30;
      *((_QWORD *)v22 + 4) = v3[12];
      *((_QWORD *)v22 + 5) = v24;
      *((_QWORD *)v22 + 6) = a1;
      v31(&v22[v21], v20, AssociatedTypeWitness);
      v25 = v19[5];
      v26 = v19[6];
      sub_23C7E7E34(v19 + 2, v25);
      v27 = *(void (**)(id (*)(), char *, uint64_t, uint64_t))(v26 + 8);
      swift_retain();
      v27(sub_23C88D668, v22, v25, v26);
      swift_release();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v14, v9);
    }
  }
  return result;
}

id sub_23C88C6A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  id result;
  void (*v8)(uint64_t);

  sub_23C7E188C(a1, &qword_256BCD008);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  sub_23C9114E4();
  result = sub_23C7DEABC(a3, 0, a4);
  if (v8)
  {
    sub_23C7DC47C();
    v8(a2);
    sub_23C7DC5B0((uint64_t)v8);
    return (id)sub_23C7DC5B0((uint64_t)v8);
  }
  return result;
}

uint64_t *sub_23C88C79C@<X0>(uint64_t *result@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = result[20];
  if (v3)
  {
    v4 = *result;
    v5 = result[21];
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 80);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)(v4 + 88);
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(v4 + 104);
    *(_QWORD *)(v6 + 48) = v3;
    *(_QWORD *)(v6 + 56) = v5;
    result = (uint64_t *)swift_retain();
    v7 = sub_23C88D694;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return result;
}

void sub_23C88C834()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 184) = 0;
}

uint64_t sub_23C88C84C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(id (*)(), uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;

  v2 = *v1;
  sub_23C7E188C(a1, &qword_256BCD008);
  sub_23C7DDB10(&qword_256BCD010);
  v3 = *(_QWORD *)(v2 + 80);
  sub_23C9114E4();
  sub_23C7E8E90();
  sub_23C7DEABC((uint64_t)sub_23C826280, 0, (void (*)(id))sub_23C88DD78);
  if (v32 == 1)
    return sub_23C7DB71C();
  sub_23C7E8AD4(v32, v33, v4, v5, v6, v7, v8, v9, v19, v20, v21, v22, v23, v24, v3, v2, v33, v34, v36, v39, v38);
  if (v40)
  {
    v11 = sub_23C7E2144((uint64_t)v40);
    v12 = v41;
    v40(v11);
  }
  else
  {
    v12 = v41;
    sub_23C7E2144(0);
  }
  if (v42)
  {
    v13 = *(_QWORD *)(v26 + 96);
    v14 = *(void (**)(id (*)(), uint64_t *, uint64_t, uint64_t))(v13 + 56);
    swift_unknownObjectRetain();
    sub_23C7DB634();
    v14(sub_23C88DD90, v1, v25, v13);
    sub_23C7DB71C();
    sub_23C7DE904();
    sub_23C88E16C(v32, v27, v28, v35, v29, v37, v15, v16, (uint64_t)v40, v12, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    sub_23C7DB71C();
    return sub_23C88E16C(v32, v27, v28, v35, v29, v37, v17, v18, (uint64_t)v40, v12, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
  }
  else
  {
    sub_23C88CEF4(v32, v27, v28, v35, v29, v37, v31, v30, (uint64_t)v40, v12, (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
    sub_23C7EC754(v32);
    sub_23C7ED114(v28);
    sub_23C7DBD64(v29);
    sub_23C7E5F14(v31);
    return sub_23C7E6D40((uint64_t)v40);
  }
}

uint64_t sub_23C88CAE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1 + 10;
  v5 = a1[20];
  if (v5)
  {
    v6 = a1[10];
    v7 = a1[12];
    v34 = a1[13];
    v8 = a1[15];
    v33 = a1[14];
    v9 = a1[16];
    v10 = a1[17];
    v11 = a1[18];
    v30 = a1[19];
    v32 = a1[11];
    sub_23C7F5610(v6);
    v31 = v7;
    sub_23C7F5610(v7);
    v12 = v8;
    sub_23C7F5610(v33);
    v13 = v9;
    v14 = v9;
    v15 = v10;
    sub_23C7F5610(v14);
    v16 = v11;
    v17 = v11;
    v18 = v30;
    sub_23C7F5610(v17);
    v5 = a1[20];
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v12 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v6 = 1;
  }
  v19 = a1[10];
  v20 = a1[11];
  v21 = a1[12];
  v22 = a1[13];
  v23 = a1[14];
  v24 = a1[15];
  v25 = a1[16];
  v26 = a1[17];
  v27 = a1[18];
  v28 = a1[19];
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  sub_23C88D7B0(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v5);
  *a2 = v6;
  a2[1] = v32;
  a2[2] = v31;
  a2[3] = v34;
  a2[4] = v33;
  a2[5] = v12;
  a2[6] = v13;
  a2[7] = v15;
  a2[8] = v16;
  a2[9] = v18;
  result = a1[7];
  if (result)
    result = swift_unknownObjectRetain();
  a2[10] = result;
  return result;
}

uint64_t *sub_23C88CC48(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4[10];
  _QWORD v5[6];
  void (*v6)(uint64_t);

  sub_23C888664();
  result = (uint64_t *)sub_23C88D700((uint64_t)v4, (uint64_t)v5);
  if (v5[0] != 1)
  {
    if (v6)
      v6(a2);
    return sub_23C88D748(v4);
  }
  return result;
}

uint64_t sub_23C88CCD0()
{
  return 0x7245796669746F6ELL;
}

uint64_t sub_23C88CCF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1 + 10;
  v5 = a1[20];
  if (v5)
  {
    v6 = a1[10];
    v7 = a1[12];
    v34 = a1[13];
    v8 = a1[15];
    v33 = a1[14];
    v9 = a1[16];
    v10 = a1[17];
    v11 = a1[18];
    v30 = a1[19];
    v32 = a1[11];
    sub_23C7F5610(v6);
    v31 = v7;
    sub_23C7F5610(v7);
    v12 = v8;
    sub_23C7F5610(v33);
    v13 = v9;
    v14 = v9;
    v15 = v10;
    sub_23C7F5610(v14);
    v16 = v11;
    v17 = v11;
    v18 = v30;
    sub_23C7F5610(v17);
    v5 = a1[20];
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v12 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v6 = 1;
  }
  v19 = a1[10];
  v20 = a1[11];
  v21 = a1[12];
  v22 = a1[13];
  v23 = a1[14];
  v24 = a1[15];
  v25 = a1[16];
  v26 = a1[17];
  v27 = a1[18];
  v28 = a1[19];
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  result = sub_23C88D7B0(v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v5);
  *a2 = v6;
  a2[1] = v32;
  a2[2] = v31;
  a2[3] = v34;
  a2[4] = v33;
  a2[5] = v12;
  a2[6] = v13;
  a2[7] = v15;
  a2[8] = v16;
  a2[9] = v18;
  return result;
}

unint64_t sub_23C88CE44()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_23C88CE60(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[7];
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  return sub_23C88DD08(v1);
}

uint64_t sub_23C88CE98(uint64_t a1)
{
  return sub_23C88C84C(a1);
}

_QWORD *sub_23C88CEB8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C88C19C(v1, a1);
}

void sub_23C88CED0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C88C338(*(_QWORD *)(v1 + 16), *(_BYTE **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_23C88D118, a1);
}

uint64_t sub_23C88CEF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), void (*a12)(uint64_t, uint64_t), void (*a13)(uint64_t, uint64_t))
{
  if (result != 1)
  {
    a11();
    a12(a3, a4);
    ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
    a13(a7, a8);
    return ((uint64_t (*)(uint64_t, uint64_t))a11)(a9, a10);
  }
  return result;
}

uint64_t sub_23C88CFA0(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C88CFB0()
{
  return sub_23C7DB128();
}

uint64_t sub_23C88CFBC()
{
  return sub_23C88E020((uint64_t (*)(uint64_t))sub_23C88C3C8);
}

uint64_t sub_23C88CFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_23C88CFD8()
{
  return swift_release();
}

uint64_t sub_23C88CFE0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_23C88CFFC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = isStackAllocationSafe;
  if ((*(_BYTE *)(isStackAllocationSafe + 32) & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v3 = sub_23C7E0A04();
    if (v1)
      swift_willThrow();
    else
      return v3;
  }
  else
  {
    v4 = swift_slowAlloc();
    v2 = sub_23C7E0A04();
    MEMORY[0x2426261F0](v4, -1, -1);
  }
  return v2;
}

void sub_23C88D118()
{
  sub_23C88DFDC();
}

void sub_23C88D12C(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *);
  uint64_t v3;

  v2 = *(void (**)(uint64_t *))(v1 + 48);
  v3 = a1;
  v2(&v3);
  sub_23C7DE9A8();
}

uint64_t sub_23C88D150(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;

  v16 = (unint64_t *)result;
  v17 = 0;
  v4 = 0;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v19 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
      goto LABEL_20;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v10 >= v19)
      return sub_23C88D374(v16, a2, v17, a3);
    v11 = *(_QWORD *)(v18 + 8 * v10);
    ++v4;
    if (!v11)
    {
      v4 = v10 + 1;
      if (v10 + 1 >= v19)
        return sub_23C88D374(v16, a2, v17, a3);
      v11 = *(_QWORD *)(v18 + 8 * v4);
      if (!v11)
      {
        v4 = v10 + 2;
        if (v10 + 2 >= v19)
          return sub_23C88D374(v16, a2, v17, a3);
        v11 = *(_QWORD *)(v18 + 8 * v4);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v4 << 6);
LABEL_20:
    type metadata accessor for Database();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = static Database.isSQLiteInternalTable(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      *(unint64_t *)((char *)v16 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v17++, 1))
      {
        __break(1u);
        return sub_23C88D374(v16, a2, v17, a3);
      }
    }
  }
  v12 = v10 + 3;
  if (v12 >= v19)
    return sub_23C88D374(v16, a2, v17, a3);
  v11 = *(_QWORD *)(v18 + 8 * v12);
  if (v11)
  {
    v4 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v4 >= v19)
      return sub_23C88D374(v16, a2, v17, a3);
    v11 = *(_QWORD *)(v18 + 8 * v4);
    ++v12;
    if (v11)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23C88D374(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_23C7E79A8(&qword_256BCD018);
  result = sub_23C9117E4();
  v8 = result;
  v37 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v39 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v40 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v37)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v37)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v37)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v37)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v37)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v40 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = *(_QWORD *)(v4 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v13);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[3];
    v41 = v19[2];
    v23 = (uint64_t *)(v18 + 16 * v13);
    v25 = *v23;
    v24 = v23[1];
    sub_23C911BBC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C910F14();
    swift_bridgeObjectRelease();
    result = sub_23C911BF8();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) == 0)
      break;
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 32 * v29);
    *v34 = v20;
    v34[1] = v21;
    v34[2] = v41;
    v34[3] = v22;
    v35 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v29);
    *v35 = v25;
    v35[1] = v24;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    v4 = v39;
    v10 = v40;
    if (!v5)
      return v8;
  }
  v30 = 0;
  v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    v32 = v28 == v31;
    if (v28 == v31)
      v28 = 0;
    v30 |= v32;
    v33 = *(_QWORD *)(v11 + 8 * v28);
    if (v33 != -1)
    {
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23C88D65C()
{
  return sub_23C7DB128();
}

id sub_23C88D668()
{
  return sub_23C88E090((uint64_t)sub_23C88C180, (void (*)(id))sub_23C88D67C);
}

uint64_t *sub_23C88D67C@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t *v1;

  return sub_23C88C79C(v1, a1);
}

uint64_t sub_23C88D694()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_23C88D6B4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t *sub_23C88D6E0()
{
  uint64_t v0;

  return sub_23C88CC48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C88D6E8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C88CCF4(v1, a1);
}

uint64_t sub_23C88D700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C7E79A8(&qword_256BCD010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_23C88D748(uint64_t *a1)
{
  sub_23C88CEF4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], (void (*)(void))sub_23C88E0F8, (void (*)(uint64_t, uint64_t))sub_23C7F1754, (void (*)(uint64_t, uint64_t))sub_23C88E0F8);
  return a1;
}

uint64_t sub_23C88D7B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_23C7F1754(result);
    sub_23C7F1754(a3);
    sub_23C7F1754(a5);
    sub_23C7F1754(a7);
    sub_23C7F1754(a9);
    return swift_release();
  }
  return result;
}

void sub_23C88D864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t *v34;
  uint64_t v35;

  if (!a3)
    return;
  sub_23C7EE178();
  if (v7)
  {
    sub_23C7DB634();
    return;
  }
  v8 = v6;
  v9 = v5;
  sub_23C7E79A8(&qword_256BCD020);
  v10 = sub_23C7E11A8();
  v11 = v10;
  v34 = v9;
  v35 = v8;
  if (v8 < 1)
    v12 = 0;
  else
    v12 = *v9;
  v13 = 0;
  v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_40;
    if (v17 >= v35)
      return;
    v18 = v34[v17];
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v35)
        return;
      v18 = v34[v13];
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v35)
          return;
        v18 = v34[v13];
        if (!v18)
          break;
      }
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_26:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    sub_23C7E25D4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23C910F14();
    v24 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      sub_23C7E4E00();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        v28 = v26 == v27;
        if (v26 == v27)
          v26 = 0;
        v25 |= v28;
        if (*(_QWORD *)(v14 + 8 * v26) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_23C7E3334();
LABEL_35:
    sub_23C87E268();
    *(_QWORD *)(v14 + v29) |= v30;
    v32 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v31);
    *v32 = v22;
    v32[1] = v21;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v31) = v23;
    sub_23C88E184();
    if (v33)
      goto LABEL_39;
    if (!v4)
      return;
  }
  v19 = v17 + 3;
  if (v19 >= v35)
    return;
  v18 = v34[v19];
  if (v18)
  {
    v13 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v35)
      return;
    v18 = v34[v13];
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_41:
  __break(1u);
}

void sub_23C88DA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  _BYTE __dst[224];

  if (!a3)
    return;
  sub_23C7EE178();
  if (v7)
  {
    sub_23C7DB634();
    return;
  }
  v8 = v6;
  v9 = v5;
  sub_23C7E79A8(&qword_256BCC5A8);
  v10 = sub_23C7E11A8();
  v11 = v10;
  v33 = v8;
  if (v8 < 1)
    v12 = 0;
  else
    v12 = *v9;
  v13 = 0;
  v14 = v10 + 64;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_26;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_40;
    if (v17 >= v33)
      return;
    v18 = v9[v17];
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        return;
      v18 = v9[v13];
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v33)
          return;
        v18 = v9[v13];
        if (!v18)
          break;
      }
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_26:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    memcpy(__dst, (const void *)(*(_QWORD *)(v3 + 56) + 216 * v16), 0xD2uLL);
    sub_23C7E25D4();
    swift_bridgeObjectRetain();
    sub_23C813864((uint64_t)__dst);
    sub_23C910F14();
    v23 = sub_23C911BF8() & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) == 0)
    {
      sub_23C7E4E00();
      while (++v25 != v26 || (v24 & 1) == 0)
      {
        v27 = v25 == v26;
        if (v25 == v26)
          v25 = 0;
        v24 |= v27;
        if (*(_QWORD *)(v14 + 8 * v25) != -1)
        {
          sub_23C7E09C0();
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_23C7E3334();
LABEL_35:
    sub_23C87E268();
    *(_QWORD *)(v14 + v28) |= v29;
    v31 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v30);
    *v31 = v22;
    v31[1] = v21;
    memcpy((void *)(*(_QWORD *)(v11 + 56) + 216 * v30), __dst, 0xD2uLL);
    sub_23C88E184();
    if (v32)
      goto LABEL_39;
    if (!v4)
      return;
  }
  v19 = v17 + 3;
  if (v19 >= v33)
    return;
  v18 = v9[v19];
  if (v18)
  {
    v13 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v33)
      return;
    v18 = v9[v13];
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_23C88DCF0()
{
  _QWORD *v0;

  return sub_23C88CE60(v0);
}

uint64_t sub_23C88DD08(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C88DD34()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C88DD58(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 48))(*a1);
  sub_23C7DE9A8();
}

uint64_t sub_23C88DD78@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C88CAE0(v1, a1);
}

uint64_t sub_23C88DD94(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_23C88DDCC(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_23C7DDB10(a2);
    atomic_store(MEMORY[0x242626100](MEMORY[0x24BEE12C8], v3), a1);
  }
  sub_23C7DB390();
}

uint64_t sub_23C88DE08()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

void sub_23C88DE60()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 8) + 24))();
  sub_23C7DE9A8();
}

uint64_t sub_23C88DE9C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C889890(v1, a1);
}

uint64_t sub_23C88DEB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_23C7F5610(result);
    sub_23C7F5610(a3);
    sub_23C7F5610(a5);
    sub_23C7F5610(a7);
    sub_23C7F5610(a9);
    return swift_retain();
  }
  return result;
}

uint64_t sub_23C88DF68(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23C88DF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C889A14(a1, v2, a2);
}

uint64_t sub_23C88DFAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C88AA34(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *sub_23C88DFC4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_23C88B414(v1, a1);
}

void sub_23C88DFDC()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 48))(*(_QWORD *)(v0 + 64));
  sub_23C7DE9A8();
}

uint64_t sub_23C88E000(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C88ABC8(a1, v1);
}

uint64_t sub_23C88E008()
{
  return sub_23C7DB128();
}

uint64_t sub_23C88E014()
{
  return sub_23C88E020((uint64_t (*)(uint64_t))sub_23C88AF58);
}

uint64_t sub_23C88E020(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  sub_23C7E65C0();
  sub_23C7DF054();
  v1 = sub_23C7DFCA0();
  return a1(v1);
}

void sub_23C88E05C(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 160) != 0;
}

uint64_t sub_23C88E070()
{
  return sub_23C7DB128();
}

id sub_23C88E07C()
{
  return sub_23C88E090((uint64_t)sub_23C88B20C, (void (*)(id))sub_23C88E0E0);
}

id sub_23C88E090(uint64_t a1, void (*a2)(id))
{
  uint64_t v4;
  uint64_t v5;

  sub_23C7E65C0();
  sub_23C7DF054();
  v4 = sub_23C7DFCA0();
  return sub_23C88C6A0(v4, v5, a1, a2);
}

uint64_t *sub_23C88E0E0@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t *v1;

  return sub_23C88B228(v1, a1);
}

void sub_23C88E118(_QWORD *a1)
{
  sub_23C88DD58(a1);
}

void sub_23C88E12C(BOOL *a1@<X8>)
{
  sub_23C88E05C(a1);
}

void sub_23C88E144(uint64_t a1)
{
  sub_23C88D12C(a1);
}

uint64_t sub_23C88E15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), void (*a12)(uint64_t, uint64_t), void (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;

  return sub_23C88CEF4(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v14 - 336), v13, a9, a10, a11, a12, a13);
}

uint64_t sub_23C88E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void), void (*a12)(uint64_t, uint64_t), void (*a13)(uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;

  return sub_23C88CEF4(a1, a2, a3, a4, a5, a6, v13, v14, a9, a10, a11, a12, a13);
}

void sub_23C88E184()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t sub_23C88E198()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

void sub_23C88E1A4(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  v6 = v5 - v4;
  v7 = sub_23C911C04();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v11 - v9;
  a1(v6);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v10, v7);
  sub_23C7DBCB0();
}

uint64_t DatabaseQueue.__allocating_init(configuration:)(uint64_t a1)
{
  uint64_t v2;

  sub_23C7E9960();
  v2 = swift_allocObject();
  DatabaseQueue.init(configuration:)(a1);
  return v2;
}

void DatabaseQueue.inDatabase<A>(_:)()
{
  sub_23C7DDEE4();
  sub_23C7DE9A8();
}

uint64_t DatabaseQueue.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C84AB34(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, a1);
}

uint64_t DatabaseQueue.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatabaseQueue.__allocating_init(path:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23C7E9960();
  v6 = swift_allocObject();
  DatabaseQueue.init(path:configuration:)(a1, a2, a3);
  return v6;
}

uint64_t DatabaseQueue.init(path:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  type metadata accessor for Configuration();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE95C();
  sub_23C84AB34(a3, v8 - v7);
  type metadata accessor for SerializedDatabase();
  swift_allocObject();
  sub_23C7E3380();
  v9 = sub_23C8D21C8();
  if (v4)
  {
    sub_23C84AB78(a3);
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v9;
    sub_23C88E4A0();
    sub_23C84AB78(a3);
  }
  return v3;
}

void sub_23C88E4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  id v5;
  uint64_t v6;

  v1 = type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DatabaseQueue.configuration.getter((uint64_t)v3);
  v4 = v3[25];
  sub_23C84AB78((uint64_t)v3);
  if (v4 == 1)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (qword_256BCBA90 != -1)
      swift_once();
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_suspend_, qword_256BCDC08, 0);
    if (qword_256BCBA98 != -1)
      swift_once();
    objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_resume_, qword_256BCDC10, 0);

  }
}

uint64_t DatabaseQueue.init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v1;
  type metadata accessor for Configuration();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v4);
  sub_23C7DE95C();
  sub_23C84AB34(a1, v6 - v5);
  type metadata accessor for SerializedDatabase();
  swift_allocObject();
  sub_23C7E3380();
  v7 = sub_23C8D21C8();
  sub_23C84AB78(a1);
  *(_QWORD *)(v2 + 16) = v7;
  return v2;
}

uint64_t DatabaseQueue.deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_, v0);

  swift_release();
  return v0;
}

uint64_t DatabaseQueue.__deallocating_deinit()
{
  DatabaseQueue.deinit();
  sub_23C7E9960();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseQueue.close()()
{
  sub_23C8A4EEC((uint64_t)sub_23C88E760, 0);
  sub_23C7DE9A8();
}

void sub_23C88E760()
{
  sub_23C8E899C();
}

void sub_23C88E780()
{
  DatabaseQueue.inDatabase<A>(_:)();
}

void DatabaseQueue.asyncWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2)
{
  sub_23C8D1B1C(a1, a2);
  sub_23C7DB390();
}

void sub_23C88E7B4()
{
  DatabaseQueue.unsafeReentrantRead<A>(_:)();
}

uint64_t DatabaseQueue.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C7DDB10(&qword_25430CCC8);
  v7 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v13[-v8];
  type metadata accessor for DatabaseFuture(0, a3, v10, v11);
  v14 = a3;
  v15 = v3;
  v16 = a1;
  v17 = a2;
  sub_23C88E1A4((void (*)(uint64_t))sub_23C88EFC8, (uint64_t)v9);
  return sub_23C7F4BF8((uint64_t)v9);
}

void DatabaseQueue.spawnConcurrentRead(_:)(void (*a1)(void *, uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_23C8D29F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 209, v3);
  sub_23C88EE00(*(void **)(v3 + 16), a1);
  sub_23C7E252C();
}

void sub_23C88E908()
{
  DatabaseQueue.close()();
}

Swift::Void __swiftcall DatabaseQueue.interrupt()()
{
  sub_23C8D1ADC();
  sub_23C7DB390();
}

void sub_23C88E93C()
{
  DatabaseQueue.read<A>(_:)();
}

void DatabaseQueue.read<A>(_:)()
{
  sub_23C7DDEE4();
  sub_23C7E8904();
}

uint64_t DatabaseQueue.asyncRead(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C88E9B4(a1, a2, (uint64_t)&unk_250D8D770, (uint64_t)sub_23C88F030);
}

uint64_t DatabaseQueue.asyncUnsafeRead(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C88E9B4(a1, a2, (uint64_t)&unk_250D8D798, (uint64_t)sub_23C88F038);
}

uint64_t sub_23C88E9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_retain();
  sub_23C8D1B1C(a4, v7);
  return swift_release();
}

void DatabaseQueue.unsafeReentrantRead<A>(_:)()
{
  sub_23C8D201C();
  sub_23C7DE9A8();
}

void DatabaseQueue._add<A>(observation:scheduling:onChange:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  void (*v6)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  type metadata accessor for Configuration();
  sub_23C7E0790();
  MEMORY[0x24BDAC7A8](v0);
  sub_23C7DE95C();
  v3 = v2 - v1;
  DatabaseQueue.configuration.getter(v2 - v1);
  v4 = *(unsigned __int8 *)(v3 + 1);
  sub_23C84AB78(v3);
  if (v4 != 1)
  {
    sub_23C7E851C();
    sub_23C7E6344();
    sub_23C7F3064();
  }
  sub_23C7E851C();
  sub_23C7E6344();
  sub_23C8CFC88(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_23C7DBCB0();
}

Swift::Void __swiftcall DatabaseQueue.releaseMemory()()
{
  sub_23C8A4EEC((uint64_t)sub_23C88EB80, 0);
  sub_23C7E252C();
}

void sub_23C88EB80()
{
  Database.releaseMemory()();
}

uint64_t sub_23C88EBA8()
{
  return sub_23C8E9654();
}

uint64_t sub_23C88EBD8()
{
  return sub_23C8E9AD0();
}

uint64_t sub_23C88EC0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_23C910938();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_23C7DE95C();
  v9 = v8 - v7;
  sub_23C91092C();
  swift_retain();
  a4(v9);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_23C88ECAC(void *a1, void (*a2)(void *, uint64_t))
{
  void *v4;
  id v5;
  char v6;

  v6 = 0;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v6);
  if (v4)
  {
    v5 = v4;
    a2(v4, 1);

LABEL_4:
    return;
  }
  sub_23C8E8E7C();
  a2(a1, 0);
  sub_23C8E8F18();
  Database.commit()();
  if (v4)
    goto LABEL_4;
}

uint64_t sub_23C88ED7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  result = sub_23C8D2160((uint64_t (*)(_QWORD))sub_23C88EFE8);
  if (v5)
    *a5 = v5;
  return result;
}

void sub_23C88EDCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v6[6];

  v6[5] = a1;
  v6[2] = a4;
  v6[3] = a2;
  v6[4] = a3;
  sub_23C7DE574(1, a5, (uint64_t)v6, a4, a6);
  sub_23C7E8904();
}

void sub_23C88EE00(void *a1, void (*a2)(void *, uint64_t))
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  char v8;

  if ((Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C9117B4();
    __break(1u);
    return;
  }
  v8 = 0;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v8);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    a2(v4, 1);

LABEL_5:
    return;
  }
  sub_23C8E8E7C();
  a2(a1, 0);
  sub_23C8E8F18();
  Database.commit()();
  v5 = v7;
  if (v7)
    goto LABEL_5;
}

void DatabaseQueue.inTransaction(_:_:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[24];
  uint64_t v4;
  uint64_t v5;

  v3[16] = *a1;
  v4 = a2;
  v5 = a3;
  sub_23C8A4EEC((uint64_t)sub_23C88F058, (uint64_t)v3);
  sub_23C7E8904();
}

void sub_23C88EF7C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = a2;
  swift_retain();
  sub_23C8E7768(&v10, a1, a3, a4, a1, v7, v8, v9);
}

uint64_t sub_23C88EFC8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23C88ED7C(v1[3], v1[4], v1[5], v1[2], a1);
}

void sub_23C88EFE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_23C88EDCC(a1, v2[3], v2[4], v2[2], (uint64_t)sub_23C88F0C0, a2);
}

uint64_t sub_23C88F00C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C88F030(void *a1)
{
  uint64_t v1;

  sub_23C88ECAC(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

void sub_23C88F038(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(a1, 0);
  sub_23C7DB390();
}

void sub_23C88F058(uint64_t a1)
{
  uint64_t v1;

  sub_23C88EF7C(a1, *(_BYTE *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for DatabaseQueue()
{
  return objc_opt_self();
}

uint64_t method lookup function for DatabaseQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseQueue.__allocating_init(path:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DatabaseQueue.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void sub_23C88F0C0()
{
  sub_23C88F0D4();
}

void sub_23C88F0D4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 24))(*(_QWORD *)(v0 + 40));
  sub_23C7DE9A8();
}

void DatabaseQueue.writeWithoutTransaction<A>(_:)()
{
  DatabaseQueue.inDatabase<A>(_:)();
}

void DatabaseQueue.barrierWriteWithoutTransaction<A>(_:)()
{
  DatabaseQueue.inDatabase<A>(_:)();
}

void DatabaseQueue.unsafeRead<A>(_:)()
{
  DatabaseQueue.inDatabase<A>(_:)();
}

void DatabaseQueue.unsafeReentrantWrite<A>(_:)()
{
  DatabaseQueue.unsafeReentrantRead<A>(_:)();
}

void sub_23C88F150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SQLSubqueryable.sqlExpression.getter(a1, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, a3);
}

void SQLSubqueryable.sqlExpression.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[168];

  sub_23C7EC75C(a1, a2, a3);
  sub_23C8743FC((uint64_t)v3);
  sub_23C7E322C(v3);
  sub_23C7E4198();
}

void SQLSubqueryable.exists()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[168];

  sub_23C7EC75C(a1, a2, a3);
  v3[162] = 0;
  sub_23C874988((uint64_t)v3);
  sub_23C7E322C(v3);
  sub_23C7E4198();
}

void sub_23C88F1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SQLSubqueryable.sqlExpression.getter(a1, (uint64_t)&protocol witness table for AdaptedFetchRequest<A>, a3);
}

void sub_23C88F1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SQLSubqueryable.sqlExpression.getter(a1, (uint64_t)&protocol witness table for AnyFetchRequest<A>, a3);
}

void sub_23C88F1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SQLSubqueryable.sqlExpression.getter(a1, (uint64_t)&off_250D83AB8, a3);
}

uint64_t sub_23C88F1DC(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[21];
  char v76;
  uint64_t v77;
  char v78;
  _BYTE v79[168];
  _BYTE v80[168];

  sub_23C8104B8(v1, v79);
  sub_23C8104B8(v79, v80);
  if (sub_23C88FB38((uint64_t)v80) == 1)
  {
    v4 = (const void *)sub_23C88FB44((uint64_t)v80);
    sub_23C7E635C(v4);
    sub_23C7E0A30();
    sub_23C7E0A30();
    sub_23C7E67DC(v5, v6, v7, v8, v9, v10, v11, v12, v32);
    sub_23C7DFCBC();
    swift_bridgeObjectRetain();
    sub_23C7E9970();
    sub_23C7EDEC4();
    v13 = sub_23C7DB398();
    v21 = sub_23C7E9670(v13, v14, v15, v16, v17, v18, v19, v20, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51, v53,
                          v55,
                          v57,
                          v59,
                          v61,
                          v63,
                          v65,
                          v67,
                          v69,
                          v71,
                          v73,
                          v75[0]);
    sub_23C7E4E7C(v21, v22, v23, v24, v25, v26, v27, v28, v34, v36, v38, v40, v42, v44, v46, v48, v50, v52, v54,
      v56,
      v58,
      v60,
      v62,
      v64,
      v66,
      v68,
      v70,
      v72,
      v74,
      v75[0],
      v75[1],
      v75[2],
      v75[3],
      v75[4],
      v75[5],
      v75[6],
      v75[7],
      v75[8],
      v75[9],
      v75[10],
      v75[11],
      v75[12],
      v75[13],
      v75[14],
      v75[15],
      v75[16],
      v75[17],
      v75[18],
      v75[19],
      v75[20],
      v76,
      v77,
      v78);
    v29 = sub_23C909560(a1);
    sub_23C811C18(v75);
    sub_23C7E92A4();
  }
  else
  {
    v29 = *(_QWORD *)sub_23C88FB44((uint64_t)v80);
    swift_retain();
    sub_23C7E92A4();
    v30 = sub_23C8A9A6C(v29, a1);
    if (!v2)
    {
      v75[0] = v30;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C7EDC44();
      v29 = sub_23C910E3C();
      sub_23C7DB398();
    }
    sub_23C7E92A4();
  }
  return v29;
}

uint64_t sub_23C88F348(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[21];
  char v102;
  uint64_t v103;
  char v104;
  _BYTE v105[168];
  _BYTE v106[168];

  sub_23C8104B8(v1, v105);
  sub_23C8104B8(v105, v106);
  if (sub_23C88FB38((uint64_t)v106) == 1)
  {
    v4 = (const void *)sub_23C88FB44((uint64_t)v106);
    sub_23C7E635C(v4);
    sub_23C7E0A30();
    sub_23C7E0A30();
    sub_23C7E67DC(v5, v6, v7, v8, v9, v10, v11, v12, v46);
    sub_23C7DFCBC();
    swift_bridgeObjectRetain();
    sub_23C7E9970();
    sub_23C7EDEC4();
    v13 = sub_23C7DB398();
    v21 = sub_23C7E9670(v13, v14, v15, v16, v17, v18, v19, v20, v47, v50, v53, v56, v59, v62, v65, v68, v71, v74, v77,
                          v80,
                          v83,
                          v85,
                          v87,
                          v89,
                          v91,
                          v93,
                          v95,
                          v97,
                          v99,
                          v101[0]);
    sub_23C7E4E7C(v21, v22, v23, v24, v25, v26, v27, v28, v48, v51, v54, v57, v60, v63, v66, v69, v72, v75, v78,
      v81,
      v84,
      v86,
      v88,
      v90,
      v92,
      v94,
      v96,
      v98,
      v100,
      v101[0],
      v101[1],
      v101[2],
      v101[3],
      v101[4],
      v101[5],
      v101[6],
      v101[7],
      v101[8],
      v101[9],
      v101[10],
      v101[11],
      v101[12],
      v101[13],
      v101[14],
      v101[15],
      v101[16],
      v101[17],
      v101[18],
      v101[19],
      v101[20],
      v102,
      v103,
      v104);
    sub_23C9092F8(a1, v29, v30, v31, v32, v33, v34, v35, v49, v52, v55, v58, v61, v64, v67, v70, v73, v76, v79, v82);
    a1 = v36;
    sub_23C811C18(v101);
    sub_23C7E92A4();
  }
  else
  {
    v37 = *(_QWORD *)sub_23C88FB44((uint64_t)v106);
    type metadata accessor for StatementArgumentsSink();
    swift_allocObject();
    sub_23C7E5F1C();
    swift_retain();
    v38 = sub_23C7E0B8C(0);
    v39 = MEMORY[0x24BEE4AF8];
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    swift_allocObject();
    sub_23C7E30C0(a1, v38, v39);
    sub_23C7E5F1C();
    swift_retain();
    v40 = sub_23C8A9A6C(v37);
    sub_23C7E92A4();
    if (v2)
    {
      sub_23C7DFB3C();
      sub_23C7E92A4();
    }
    else
    {
      v101[0] = v40;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C7EDC44();
      v41 = sub_23C910E3C();
      v43 = v42;
      swift_bridgeObjectRelease();
      sub_23C7E92A4();
      v45 = Database.cachedStatement(sql:)(v41, v43);
      swift_bridgeObjectRelease();
      LODWORD(v41) = sqlite3_column_count(*(sqlite3_stmt **)(v45 + 16));
      sub_23C7DFB3C();
      swift_release();
      return (int)v41;
    }
  }
  return a1;
}

void SQLSubquery.sqlSubquery.getter(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C7E0718(a1, v1);
  sub_23C88FB9C();
  sub_23C7E4198();
}

void sub_23C88F5EC(void *a1@<X8>)
{
  const void *v1;
  _BYTE v3[168];

  sub_23C7E0718(v3, v1);
  sub_23C86F0E8(a1);
  sub_23C7E4198();
}

void *SQLSubqueryable.contains(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD v8[21];
  _BYTE v9[168];
  _QWORD __src[21];
  _QWORD v11[21];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 16))(v8, a2, a3);
  sub_23C88F6F8((uint64_t)v8);
  sub_23C813130(v8, v9);
  v4 = a1[3];
  v5 = a1[4];
  sub_23C7E7E34(a1, v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(__src, v4, v5);
  v6 = (_BYTE *)swift_allocObject();
  memcpy(v6 + 16, __src, 0xA3uLL);
  sub_23C7E0718(v6 + 184, v9);
  v6[346] = 0;
  v11[0] = v6;
  sub_23C813280((uint64_t)v11);
  return sub_23C7E322C(v11);
}

uint64_t sub_23C88F6F8(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 104) & 1;
  v2 = *(_WORD *)(result + 160) & 0x81FF | 0x2000;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

uint64_t sub_23C88F724()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 v43;

  v42 = *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16);
  v38 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 168);
  sub_23C7E3398();
  sub_23C7E6F90(v1, v2, v3, v4, v5, v6, v7, v8, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42);
  v43 = *(_WORD *)(v0 + 344);
  v39 = *(_QWORD *)(v0 + 328);
  v41 = *(_QWORD *)(v0 + 336);
  sub_23C7E3398();
  sub_23C8131FC(v9, v10, v11, v12, v13, v14, v15, v16, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43);
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SQLSubquery()
{
  return &type metadata for SQLSubquery;
}

uint64_t dispatch thunk of SQLSubqueryable.sqlSubquery.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t _s12GRDBInternal11SQLSubqueryV4ImplOwxx_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v22 = *(_WORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 152);
  sub_23C7E3398();
  return sub_23C7F9AE0(v8, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
}

void _s12GRDBInternal11SQLSubqueryV4ImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_WORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  sub_23C7FD5D8(*(_QWORD *)a2, v11, v3, v4, v5, v6, v7, v8, v9, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v20;
  *(_QWORD *)(a1 + 144) = v21;
  *(_QWORD *)(a1 + 152) = v22;
  *(_WORD *)(a1 + 160) = v23;
  sub_23C7E8930();
}

void _s12GRDBInternal11SQLSubqueryV4ImplOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v39 = *(_QWORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 104);
  v41 = *(_QWORD *)(a2 + 112);
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 128);
  v44 = *(_QWORD *)(a2 + 136);
  v45 = *(_QWORD *)(a2 + 144);
  v46 = *(_QWORD *)(a2 + 152);
  v47 = *(_WORD *)(a2 + 160);
  sub_23C7FD5D8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
    v46,
    v47);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v38;
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v42;
  *(_QWORD *)(a1 + 128) = v43;
  *(_QWORD *)(a1 + 136) = v44;
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v45;
  *(_QWORD *)(a1 + 152) = v46;
  v14 = *(_WORD *)(a1 + 160);
  *(_WORD *)(a1 + 160) = v47;
  v35 = v14;
  v33 = v12;
  v34 = v13;
  sub_23C7E3398();
  sub_23C7F9AE0(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  sub_23C7E8930();
}

void _s12GRDBInternal11SQLSubqueryV4ImplOwta_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  sub_23C7E3248();
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_WORD *)(a1 + 160);
  v6 = v5[1];
  *(_OWORD *)a1 = *v5;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v5[5];
  *(_OWORD *)(a1 + 64) = v5[4];
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v5[7];
  *(_OWORD *)(a1 + 96) = v5[6];
  *(_OWORD *)(a1 + 112) = v9;
  v10 = v5[9];
  *(_OWORD *)(a1 + 128) = v5[8];
  *(_OWORD *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 160) = v11;
  v32 = v4;
  v30 = v2;
  v31 = v3;
  sub_23C7E3398();
  sub_23C7F9AE0(v12, v19, v13, v14, v15, v16, v17, v18, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32);
  sub_23C7E4C90();
}

uint64_t sub_23C88FB38(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 160) >> 15;
}

uint64_t sub_23C88FB44(uint64_t result)
{
  *(_WORD *)(result + 160) &= ~0x8000u;
  return result;
}

uint64_t sub_23C88FB54(uint64_t result, __int16 a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(result + 104) & 1;
  v3 = *(_WORD *)(result + 160) & 0x1FF | (a2 << 15);
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v2;
  *(_WORD *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SQLSubquery.Impl()
{
  return &type metadata for SQLSubquery.Impl;
}

void sub_23C88FB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SQLSubqueryable.sqlExpression.getter(a1, (uint64_t)&protocol witness table for SQLRequest<A>, a3);
}

void sub_23C88FB9C()
{
  void (*v0)(void);

  sub_23C7E3248();
  sub_23C7E3398();
  v0();
  sub_23C7E4C90();
}

uint64_t AnyDatabaseCancellable.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_23C800944(a1, v3);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = sub_23C88FE74((uint64_t)v7, v1, v3, v4);
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return v9;
}

void AnyDatabaseCancellable.__allocating_init(cancel:)(uint64_t a1, uint64_t a2)
{
  sub_23C7DB388();
  AnyDatabaseCancellable.init(cancel:)(a1, a2);
  sub_23C7DB3A0();
}

uint64_t sub_23C88FCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_23C88E0F8(v3, v4);
}

uint64_t AnyDatabaseCancellable.init(cancel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_23C88E0F8(0, 0);
  return v2;
}

uint64_t sub_23C88FCFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v2 = a1 + 16;
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 40))
  {
    sub_23C7EFC04(v2, (uint64_t)&v6);
    v3 = *((_QWORD *)&v7 + 1);
    v4 = v8;
    sub_23C7E7E34(&v6, *((uint64_t *)&v7 + 1));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v6);
  }
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  swift_beginAccess();
  return sub_23C842000((uint64_t)&v6, v2);
}

void AnyDatabaseCancellable.deinit()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  if (v1)
  {
    v2 = sub_23C7E43B8();
    v1(v2);
    sub_23C7E8B04();
    v3 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = 0;
  }
  sub_23C88E0F8(v3, *(_QWORD *)(v0 + 24));
  sub_23C7DB3A0();
}

uint64_t AnyDatabaseCancellable.__deallocating_deinit()
{
  AnyDatabaseCancellable.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23C88FE14()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  if (v1)
  {
    v2 = sub_23C7E43B8();
    v1(v2);
    sub_23C7E8B04();
  }
  return sub_23C88FCC4(0, 0);
}

uint64_t sub_23C88FE54()
{
  return sub_23C88FE14();
}

uint64_t sub_23C88FE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[5];

  v10[3] = a3;
  v10[4] = a4;
  v6 = sub_23C812004(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v6, a1, a3);
  v7 = sub_23C7DB388();
  sub_23C7EFC04((uint64_t)v10, v7 + 16);
  type metadata accessor for AnyDatabaseCancellable();
  v8 = sub_23C7DB388();
  swift_retain();
  AnyDatabaseCancellable.init(cancel:)((uint64_t)sub_23C88FF8C, v7);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
  swift_release();
  return v8;
}

uint64_t dispatch thunk of DatabaseCancellable.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for AnyDatabaseCancellable()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyDatabaseCancellable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyDatabaseCancellable.__allocating_init(cancel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AnyDatabaseCancellable.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_23C88FF60()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C88FF8C()
{
  uint64_t v0;

  return sub_23C88FCFC(v0);
}

uint64_t NSData.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23C910AF4();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 3;
  return result;
}

uint64_t static NSData.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  _QWORD v13[2];
  uint64_t v14;

  v3 = sub_23C910EB4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 16);
  if (v9 == 3)
  {
    sub_23C7ED944(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    result = 0;
    if (v9 != 2)
      return result;
    sub_23C910EA8();
    v7 = sub_23C910E84();
    v8 = v11;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v8 >> 60 == 15)
      return 0;
  }
  v13[0] = v7;
  v13[1] = v8;
  sub_23C8901F8((uint64_t)v13, v1, (uint64_t)&v14);
  sub_23C7EEE1C(v7, v8);
  return v14;
}

uint64_t sub_23C8900D4@<X0>(uint64_t a1@<X8>)
{
  return NSData.databaseValue.getter(a1);
}

uint64_t sub_23C8900F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = static NSData.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t String.quotedDatabaseIdentifier.getter()
{
  sub_23C910F5C();
  sub_23C910F5C();
  return 34;
}

uint64_t GRDBPrecondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
  uint64_t result;

  result = a1();
  if ((result & 1) == 0)
  {
    a3();
    result = sub_23C9117B4();
    __break(1u);
  }
  return result;
}

void sub_23C8901F8(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = swift_dynamicCast();
  sub_23C7DE70C(a3, v7 ^ 1u, 1, a2);
  sub_23C7DB3A0();
}

uint64_t sub_23C89028C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (v3)
  {
    v4 = 0;
    for (i = (_QWORD *)(v2 + 32); *i != a2; i += 3)
    {
      if (v3 == ++v4)
        return swift_release();
    }
    sub_23C8904DC(v4);
    v7 = v6;
    swift_release();
    sub_23C7E13C4(v7);
  }
  return swift_release();
}

uint64_t sub_23C890314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v19 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v19 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v8 = sub_23C9114E4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v19 - v14;
  v16 = v24;
  result = sub_23C9112F8();
  if (!v16)
  {
    v24 = a3;
    v18 = v22;
    if (sub_23C7DE718((uint64_t)v12, 1, v7) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v7);
      sub_23C9113B8();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v7);
    }
  }
  return result;
}

void sub_23C8904DC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8908C8();
    v3 = v6;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    sub_23C8F9080((char *)(v3 + 24 * a1 + 56), v4 - 1 - a1, (char *)(v3 + 24 * a1 + 32));
    *(_QWORD *)(v3 + 16) = v5;
    *v1 = v3;
  }
}

void sub_23C89056C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((sub_23C7E8578() & 1) == 0)
  {
    sub_23C8908DC();
    v0 = v5;
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (v3 <= v2)
  {
    __break(1u);
  }
  else
  {
    v4 = v3 - 1;
    sub_23C8F9018((char *)(v0 + 16 * v2 + 48), v3 - 1 - v2, (char *)(v0 + 16 * v2 + 32));
    *(_QWORD *)(v0 + 16) = v4;
    *v1 = v0;
  }
}

uint64_t sub_23C8905E8(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!(_DWORD)result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
    sub_23C8908EC(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    v9 = v5 + 8 * a1;
    v10 = *(_QWORD *)(v9 + 32);
    sub_23C8F9060((char *)(v9 + 40), v8, (char *)(v9 + 32));
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v7;
    sub_23C9110DC();
    return v10;
  }
  return result;
}

void sub_23C890678()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if ((sub_23C7E8578() & 1) == 0)
  {
    sub_23C890954();
    v0 = v5;
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (v3 <= v2)
  {
    __break(1u);
  }
  else
  {
    v4 = v3 - 1;
    sub_23C8F9080((char *)(v0 + 24 * v2 + 56), v3 - 1 - v2, (char *)(v0 + 24 * v2 + 32));
    *(_QWORD *)(v0 + 16) = v4;
    *v1 = v0;
  }
}

Swift::String __swiftcall databaseQuestionMarks(count:)(Swift::Int count)
{
  void *v1;
  Swift::String result;

  if (count < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23C7E79A8(&qword_25430CEA0);
    sub_23C890760();
    count = sub_23C910E3C();
  }
  result._object = v1;
  result._countAndFlagsBits = count;
  return result;
}

unint64_t sub_23C890760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430CD00[0];
  if (!qword_25430CD00[0])
  {
    v1 = sub_23C7DDB10(&qword_25430CEA0);
    result = MEMORY[0x242626100](MEMORY[0x24BEE49A8], v1);
    atomic_store(result, qword_25430CD00);
  }
  return result;
}

ValueMetadata *type metadata accessor for PrintOutputStream()
{
  return &type metadata for PrintOutputStream;
}

uint64_t sub_23C8907B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23C7E79A8(qword_256BCD028);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  swift_bridgeObjectRetain();
  sub_23C911BA4();
  return swift_bridgeObjectRelease();
}

void sub_23C890848(uint64_t (*a1)(void), uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = a1();
  a3(v4);
  sub_23C7DB3A0();
}

uint64_t sub_23C890878(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23C890898(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

void sub_23C8908C8()
{
  sub_23C7F1C20();
}

void sub_23C8908DC()
{
  sub_23C7E43C4();
  sub_23C7F16C0();
}

void sub_23C8908EC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23C9117C0();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x24262529CLL);
}

void sub_23C890954()
{
  sub_23C7E43C4();
  sub_23C7F1C3C();
}

void sub_23C890964()
{
  sub_23C7E43C4();
  sub_23C7F1F6C();
}

void sub_23C890974()
{
  sub_23C7E43C4();
  sub_23C7F203C();
}

void sub_23C890984()
{
  sub_23C7E43C4();
  sub_23C7F2058();
}

void sub_23C890994()
{
  sub_23C7E43C4();
  sub_23C7F2380();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_23C8909A4()
{
  uint64_t v0;

  v0 = sub_23C91119C();
  nullsub_1(v0);
}

uint64_t sub_23C8909DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  unint64_t v13;
  _BYTE __dst[163];
  _QWORD v16[2];
  _BYTE __src[176];
  uint64_t v18;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v10 = v18;
    v11 = (_QWORD *)(a1 + 32);
    for (i = v7 - 1; ; --i)
    {
      v16[1] = *v11;
      swift_bridgeObjectRetain();
      sub_23C8933E8(a3, a4, v16, __src);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return v10;
      }
      v5 = 0;
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, sizeof(__dst));
      v18 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_23C7FD468();
        v10 = v18;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      memcpy((void *)(v10 + 168 * v13 + 32), __dst, 0xA3uLL);
      if (!i)
        break;
      ++v11;
    }
    swift_release();
  }
  else
  {
    swift_release();
    v10 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23C890B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  _BYTE v20[168];
  _BYTE v21[168];
  _QWORD v22[21];
  _BYTE v23[168];
  _QWORD v24[21];
  _BYTE v25[168];
  uint64_t __src[21];
  uint64_t v27;
  _BYTE v28[168];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  __n128 __dst[10];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[21];
  uint64_t v37;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v37 = MEMORY[0x24BEE4AF8];
    sub_23C7FD468();
    v4 = a1 + 48;
    while (1)
    {
      v6 = *(_QWORD *)(v4 - 16);
      v5 = *(_QWORD *)(v4 - 8);
      sub_23C896698(v4, (uint64_t)__src, (uint64_t *)&unk_25430D6B8);
      v7 = __src[3];
      if (__src[3])
      {
        v8 = __src[4];
        v9 = sub_23C7E7E34(__src, __src[3]);
        *((_QWORD *)&v34 + 1) = v7;
        v35 = *(_QWORD *)(v8 + 8);
        v10 = sub_23C812004((uint64_t *)&v33);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, v9, v7);
        swift_bridgeObjectRetain();
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)__src);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_23C7E7900((uint64_t)__src, (uint64_t *)&unk_25430D6B8);
        v33 = 0u;
        v34 = 0u;
        v35 = 0;
      }
      sub_23C896698((uint64_t)&v33, (uint64_t)v29, &qword_25430CF68);
      v11 = v30;
      if (v30)
      {
        v12 = v31;
        sub_23C7E7E34(v29, v30);
        v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8);
        swift_bridgeObjectRetain();
        v13(__src, v11, v12);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v29);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_23C7E7900((uint64_t)v29, &qword_25430CF68);
        v36[1] = 0;
        v36[0] = 0;
        LOBYTE(v36[2]) = 4;
        sub_23C8027EC((uint64_t)v36);
        sub_23C800B48(v36, __src);
      }
      memcpy(__dst, __src, 0xA3uLL);
      v24[0] = v6;
      v24[1] = v5;
      sub_23C800B0C((uint64_t)v24);
      sub_23C800B48(v24, v25);
      sub_23C800B48(v24, __src);
      sub_23C800B48(__dst, &v27);
      sub_23C800B48(__dst, v28);
      if (sub_23C874270((uint64_t)v28) != 2)
        break;
      v14 = sub_23C8746E0((uint64_t)v28);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(unsigned __int8 *)(v14 + 16);
      if (v17 != 4 || v16 | v15)
      {
        sub_23C894614(__dst);
        swift_bridgeObjectRetain();
        sub_23C894614(__dst);
        sub_23C7E5640(0, 0, 4);
        sub_23C7E5640(v15, v16, v17);
        goto LABEL_15;
      }
      sub_23C894614(__dst);
      swift_bridgeObjectRetain();
      sub_23C894614(__dst);
      sub_23C7E5640(0, 0, 4);
      sub_23C7E5640(0, 0, 4);
      swift_bridgeObjectRetain();
      sub_23C838EE8((uint64_t)__src);
      memcpy(v21, v25, 0xA3uLL);
      v22[0] = 0;
      v22[1] = 0;
      LOBYTE(v22[2]) = 4;
      sub_23C8027EC((uint64_t)v22);
      sub_23C800B48(v22, v23);
      memcpy(v20, v23, 0xA3uLL);
      sub_23C86F20C(2, v21, v20, v36);
      swift_bridgeObjectRelease();
LABEL_16:
      sub_23C894614(__dst);
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)&v33, &qword_25430CF68);
      swift_bridgeObjectRelease();
      memcpy(v23, v36, 0xA3uLL);
      v2 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23C7FD468();
        v2 = v37;
      }
      v18 = *(_QWORD *)(v2 + 16);
      if (v18 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        sub_23C7FD468();
        v2 = v37;
      }
      v4 += 56;
      *(_QWORD *)(v2 + 16) = v18 + 1;
      memcpy((void *)(v2 + 168 * v18 + 32), v23, 0xA3uLL);
      if (!--v1)
        return v2;
    }
    swift_bridgeObjectRetain();
    sub_23C894614(__dst);
LABEL_15:
    sub_23C838EE8((uint64_t)__src);
    memcpy(v23, v25, 0xA3uLL);
    memcpy(v22, __dst, 0xA3uLL);
    sub_23C86F20C(0, v23, v22, v36);
    goto LABEL_16;
  }
  return v2;
}

uint64_t sub_23C890FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;
  _QWORD v15[21];
  _BYTE __src[176];
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_23C7FDBA8();
    v2 = v17;
    v4 = (uint64_t *)(a1 + 40);
    for (i = v1 - 1; ; --i)
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      v13 = &type metadata for SQLExpression;
      v14 = &protocol witness table for SQLExpression;
      *(_QWORD *)&v12 = swift_allocObject();
      v8 = (void *)(v12 + 16);
      v15[0] = v7;
      v15[1] = v6;
      sub_23C800B0C((uint64_t)v15);
      sub_23C800B48(v15, __src);
      memcpy(v8, __src, 0xA3uLL);
      v17 = v2;
      v10 = *(_QWORD *)(v2 + 16);
      v9 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1)
      {
        sub_23C7FDBA8();
        v2 = v17;
      }
      *(_QWORD *)(v2 + 16) = v10 + 1;
      sub_23C7DB5CC(&v12, v2 + 40 * v10 + 32);
      if (!i)
        break;
      v4 += 2;
    }
  }
  return v2;
}

void sub_23C891104(uint64_t a1)
{
  char *v2;
  _BYTE __dst[184];
  _BYTE v4[192];
  uint64_t v5;

  if (*(_QWORD *)(a1 + 16))
  {
    v5 = MEMORY[0x24BEE4AF8];
    sub_23C7FDC10();
    memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
    swift_allocObject();
    sub_23C801054(__dst, v4);
    v2 = (char *)&loc_23C8911E4 + 4 * byte_23C917760[sub_23C801090((uint64_t)v4)];
    __asm { BR              X9 }
  }
  swift_release();
  sub_23C7DEF28();
}

uint64_t FilteredRequest.none()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void (*)(uint64_t@<X8>), _QWORD, uint64_t, uint64_t))(a2 + 8))(sub_23C8929DC, 0, a1, a2);
}

uint64_t SelectionRequest.select(_:)()
{
  return sub_23C893AA4();
}

uint64_t SelectionRequest.annotated(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);

  sub_23C7DF844();
  v1 = v0;
  *(_QWORD *)(sub_23C7DB388() + 16) = v2;
  v3 = *(void (**)(void))(v1 + 16);
  swift_bridgeObjectRetain();
  sub_23C7E698C();
  v3();
  return sub_23C7E8B10();
}

uint64_t FilteredRequest.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8928AC(a1, a2, a3, (uint64_t)&unk_250D8D8D0, (void (*)(_BYTE *, uint64_t))sub_23C7DB5CC, (uint64_t)sub_23C892A1C);
}

{
  return sub_23C8928AC(a1, a2, a3, (uint64_t)&unk_250D8DA38, (void (*)(_BYTE *, uint64_t))sub_23C7DB5CC, (uint64_t)sub_23C89457C);
}

void TableRequest<>.filter<A>(key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;

  sub_23C7DE8EC();
  v23[2] = v2;
  v23[3] = v3;
  v23[1] = v4;
  v6 = v5;
  v8 = v7;
  v24 = v9;
  v11 = v10;
  sub_23C9114E4();
  sub_23C7EE4FC();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - v14;
  v16 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v13);
  sub_23C7DE95C();
  v19 = v18 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v15, v11, v1);
  if (sub_23C7DE718((uint64_t)v15, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v0 + 8))(v15, v1);
    (*(void (**)(void (*)(uint64_t@<X8>), _QWORD, uint64_t, uint64_t))(v6 + 8))(sub_23C8929DC, 0, v24, v6);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19, v15, v8);
    sub_23C894358(v8, v8);
    swift_allocObject();
    v20 = sub_23C9110E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v21, v19, v8);
    sub_23C8909A4();
    v25 = v20;
    v22 = sub_23C91119C();
    MEMORY[0x242626100](MEMORY[0x24BEE12C8], v22);
    TableRequest<>.filter<A>(keys:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v8);
  }
  sub_23C7DBCB0();
}

void TableRequest<>.filter<A>(keys:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;

  sub_23C7DE8EC();
  v45 = v1;
  v46 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v40 = v17;
  v41 = v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!sub_23C7EF87C(AssociatedTypeWitness))
    goto LABEL_4;
  v39 = v0;
  v20 = swift_getAssociatedTypeWitness();
  if (v20 == sub_23C910B6C())
  {
    v21 = sub_23C7DC5D0();
    v38 = v43;
    v37 = v44;
    MEMORY[0x24BDAC7A8](v21);
    v28[0] = v16;
    v28[1] = v14;
    v29 = v12;
    v30 = (uint64_t)v10;
    v31 = v8;
    v32 = v6;
    v33 = v4;
    v34 = v42;
    v35 = v22;
    v36 = v23;
    v42 = (void *)sub_23C911034();
    sub_23C7E79A8(&qword_25430CF60);
    sub_23C7E1240((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
    sub_23C7ECCB8();
    sub_23C892BE0();
    sub_23C81ABB8(v34, v43, v44);
  }
  else
  {
    if (v20 != sub_23C910BA8())
    {
LABEL_4:
      sub_23C892BE0();
      return;
    }
    v24 = sub_23C7DC5D0();
    MEMORY[0x24BDAC7A8](v24);
    v29 = v16;
    v30 = v14;
    v31 = v12;
    v32 = v10;
    v33 = v8;
    v34 = v6;
    v35 = v4;
    v36 = v25;
    sub_23C891CA0((uint64_t)sub_23C894398, (uint64_t)v28, v14, (uint64_t)&type metadata for DatabaseValue, MEMORY[0x24BEE4078], (uint64_t)v6, MEMORY[0x24BEE40A8], v26);
    v42 = v27;
    sub_23C7E79A8(&qword_25430CF60);
    sub_23C7E1240((unint64_t *)&qword_25430CF28, &qword_25430CF60, MEMORY[0x24BEE12C8]);
    sub_23C7ECCB8();
    sub_23C892BE0();
  }
  swift_bridgeObjectRelease();
  sub_23C7DBCB0();
}

uint64_t TableRequest<>.filter(key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_23C7DF844();
  if (v0)
  {
    v1 = v0;
    sub_23C7E79A8(&qword_256BCC588);
    v2 = sub_23C7DB388();
    *(_OWORD *)(v2 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v2 + 32) = v1;
    sub_23C7DBBB0();
    TableRequest<>.filter(keys:)();
    return sub_23C7E9680();
  }
  else
  {
    sub_23C7E698C();
    return sub_23C7EDED4(v4, v5, v6, v7, v8);
  }
}

uint64_t TableRequest<>.filter(keys:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);

  sub_23C7DF844();
  sub_23C8967CC();
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = v2;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v3);
    v7 = v6;
    v8 = (_QWORD *)sub_23C7DB388();
    v8[2] = v4;
    v8[3] = v5;
    v8[4] = v7;
    v9 = *(void (**)(void))(v0 + 8);
    sub_23C7E0808();
    sub_23C7E698C();
    v9();
    return sub_23C7E8B10();
  }
  else
  {
    sub_23C7E698C();
    return sub_23C7EDED4(v11, v12, v13, v14, v15);
  }
}

uint64_t OrderedRequest.order(_:)()
{
  return sub_23C893AA4();
}

{
  return sub_23C893AA4();
}

uint64_t TableRequest<>.orderByPrimaryKey()()
{
  return sub_23C8927DC();
}

void TableRequest<>.filter(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7DE8EC();
  v8 = v1;
  v9 = v0;
  sub_23C7DB724();
  v3 = v2;
  sub_23C7E6D48();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C9114E4();
  sub_23C7EE4FC();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v8 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))((char *)&v8 - v6, v3, AssociatedTypeWitness);
  sub_23C7DE70C((uint64_t)v7, 0, 1, AssociatedTypeWitness);
  sub_23C7ED11C();
  sub_23C8967BC();
  sub_23C7DBCB0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  sub_23C7DE8EC();
  v8 = v1;
  v9 = v0;
  sub_23C7DB724();
  v3 = v2;
  sub_23C7E6D48();
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C9114E4();
  sub_23C7EE4FC();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v8 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))((char *)&v8 - v6, v3, AssociatedTypeWitness);
  sub_23C7DE70C((uint64_t)v7, 0, 1, AssociatedTypeWitness);
  sub_23C7ED11C();
  sub_23C8967BC();
  sub_23C7DBCB0();
}

void sub_23C891CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(uint64_t, void (*)(char *, uint64_t, uint64_t));
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *);
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v42 = a8;
  v43 = a5;
  v56 = a1;
  v57 = a2;
  v41 = *(_QWORD *)(a5 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C7E66C8();
  v55 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)v40 - v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v46 = (char *)v40 - v17;
  v18 = sub_23C9114E4();
  v44 = *(_QWORD *)(v18 - 8);
  v45 = v18;
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v19);
  sub_23C7E66C8();
  v52 = v20;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v40 - v22;
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v24);
  sub_23C7E66C8();
  v40[1] = v25;
  MEMORY[0x24BDAC7A8](v26);
  v51 = *(_QWORD *)(v15 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v27);
  sub_23C7DE95C();
  v50 = v29 - v28;
  v49 = a6;
  v59 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v53 = (char *)v40 - v30;
  v31 = sub_23C911028();
  v60 = sub_23C911700();
  sub_23C91170C();
  sub_23C9116C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v48, v15);
  v51 = v15;
  sub_23C91101C();
  if (v31 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_23C7E25E0();
      sub_23C7E5974((uint64_t)v23);
      if (v32)
        goto LABEL_20;
      v33 = sub_23C8967E4();
      v34(v33, v55);
      if (v8)
      {
        sub_23C7E9980();
        swift_release();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 32))(v42, v55, v43);
        sub_23C7E33A8();
        goto LABEL_18;
      }
      sub_23C7E33A8();
      sub_23C7E6ED8();
      if (!--v31)
      {
        v35 = v52;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v35 = v52;
LABEL_9:
  sub_23C911520();
  sub_23C7E5974(v35);
  v36 = v46;
  if (v32)
  {
    v37 = v52;
LABEL_15:
    sub_23C7E9980();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v37, v45);
  }
  else
  {
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    v37 = v52;
    while (1)
    {
      v55(v36, v37, AssociatedTypeWitness);
      v38 = sub_23C8967E4();
      v39(v38, v54);
      if (v8)
        break;
      sub_23C7E33A8();
      sub_23C7E6ED8();
      sub_23C7E25E0();
      sub_23C7E5974(v37);
      if (v32)
        goto LABEL_15;
    }
    sub_23C7E33A8();
    sub_23C7E9980();
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v42, v54, v43);
  }
LABEL_18:
  sub_23C7DEF28();
}

uint64_t JoinableRequest.including<A>(all:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 16) + 8))(&v15, a3);
  sub_23C7EDC58();
  sub_23C7E4E94(v5, v6, v7, v8, v9, v10, v11, v12, v14);
  return sub_23C7E08D0();
}

uint64_t JoinableRequest.including<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23C7E43D8(a1, a2, a3, a4, a5, a6);
  sub_23C7EDC58();
  sub_23C7E4E94(v6, v7, v8, v9, v10, v11, v12, v13, v15);
  return sub_23C7E08D0();
}

uint64_t JoinableRequest.including<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23C7E43D8(a1, a2, a3, a4, a5, a6);
  sub_23C7EDC58();
  sub_23C7E4E94(v6, v7, v8, v9, v10, v11, v12, v13, v15);
  return sub_23C7E08D0();
}

uint64_t JoinableRequest.joining<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23C7E43D8(a1, a2, a3, a4, a5, a6);
  sub_23C7EDC58();
  sub_23C7E4E94(v6, v7, v8, v9, v10, v11, v12, v13, v15);
  return sub_23C7E08D0();
}

uint64_t JoinableRequest.joining<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_23C7E43D8(a1, a2, a3, a4, a5, a6);
  sub_23C7EDC58();
  sub_23C7E4E94(v6, v7, v8, v9, v10, v11, v12, v13, v15);
  return sub_23C7E08D0();
}

void JoinableRequest<>.annotated<A>(withOptional:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[64];
  _QWORD v27[22];

  sub_23C7DE8EC();
  v3 = v2;
  v5 = v4;
  v23 = v6;
  v8 = v7;
  v10 = v9;
  v24 = *(_QWORD *)(v7 - 8);
  sub_23C7E1AD4();
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE96C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7E2548();
  type metadata accessor for TableAlias();
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_BYTE *)(v15 + 48) = 0;
  v16 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 16) + 8))(&v25, v8);
  v17 = *(_QWORD *)(v25 + 16);
  if (v17)
  {
    sub_23C7E11B4((uint64_t)v16, (const void *)(v25 + 232 * v17 - 200));
    sub_23C800974((uint64_t)v26);
    swift_bridgeObjectRelease();
    v18 = v27[4];
    v22 = v27[3];
    sub_23C837C80(v27);
    sub_23C812FA8((uint64_t)v26);
    swift_retain();
    sub_23C7FA5C4(v27);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 48) + 16))(v15, v8);
    JoinableRequest.joining<A>(optional:)(v1, v10, v8, v23, v3, v19);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v8);
    v20 = (_QWORD *)sub_23C7DB388();
    v20[2] = v22;
    v20[3] = v18;
    v20[4] = v15;
    v21 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v21(sub_23C894488, v20, v10, v5);
    swift_release();
    swift_release();
    sub_23C7DFB3C();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v10);
    sub_23C7DBCB0();
  }
  else
  {
    __break(1u);
  }
}

void JoinableRequest<>.annotated<A>(withRequired:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void (*v26)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[64];
  _QWORD v32[22];

  sub_23C7DE8EC();
  v2 = v1;
  v4 = v3;
  v29 = v5;
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE95C();
  v14 = v13 - v12;
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v17);
  sub_23C7E2548();
  v20 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v18 + 16) + 8))(&v30, v19);
  v21 = *(_QWORD *)(v30 + 16);
  if (v21)
  {
    v28 = v16;
    sub_23C7E11B4((uint64_t)v20, (const void *)(v30 + 232 * v21 - 200));
    sub_23C800974((uint64_t)v31);
    swift_bridgeObjectRelease();
    v22 = v32[4];
    v27 = v32[3];
    sub_23C837C80(v32);
    sub_23C812FA8((uint64_t)v31);
    swift_retain();
    sub_23C7FA5C4(v32);
    type metadata accessor for TableAlias();
    v23 = sub_23C7DB388();
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_BYTE *)(v23 + 48) = 0;
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 48) + 16))();
    JoinableRequest.joining<A>(required:)(v14, v9, v7, v29, v2, v24);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v7);
    v25 = (_QWORD *)sub_23C7DB388();
    v25[2] = v27;
    v25[3] = v22;
    v25[4] = v23;
    v26 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    swift_retain();
    v26(sub_23C89679C, v25, v9, v4);
    sub_23C7DFB3C();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v0, v9);
    sub_23C7DBCB0();
  }
  else
  {
    __break(1u);
  }
}

void DerivableRequest.annotated(with:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AssociationAggregate(255, AssociatedTypeWitness, v1, v2);
  v3 = sub_23C91119C();
  MEMORY[0x242626100](MEMORY[0x24BEE12C8], v3);
  sub_23C911070();
  sub_23C7E1B78();
}

uint64_t DerivableRequest.having(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD v18[5];
  _BYTE v19[163];
  uint64_t v20;
  uint64_t v21;

  sub_23C7DF844();
  v20 = v2;
  v21 = v3;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7DE96C();
  v17 = *v10;
  v11 = *((_QWORD *)v10 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v0, v7);
  v18[1] = *((_QWORD *)&v17 + 1);
  v18[2] = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for AssociationAggregate(0, AssociatedTypeWitness, v13, v14);
  sub_23C8851D0(v1, v15, v7, v5);
  v18[3] = &type metadata for SQLExpression;
  v18[4] = &protocol witness table for SQLExpression;
  v18[0] = sub_23C7DB388();
  memcpy((void *)(v18[0] + 16), v19, 0xA3uLL);
  AggregatingRequest.having(_:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v18);
}

uint64_t TableRequest<>.groupByPrimaryKey()()
{
  return sub_23C8927DC();
}

uint64_t sub_23C8927DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23C7DF844();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = (*(uint64_t (**)(void))(v6 + 8))();
  v9 = v8;
  v10 = sub_23C7DB388();
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, v10, v5, v3);
  return sub_23C7E8B10();
}

void SelectionRequest.select(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  sub_23C893B2C(a1, a2, a3, a4, a5, &qword_25430D128, (uint64_t)&protocol witness table for SQL, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:));
}

uint64_t SelectionRequest.select(literal:)()
{
  return sub_23C893C34();
}

uint64_t sub_23C8928AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *, uint64_t), uint64_t a6)
{
  uint64_t v10;
  _BYTE v12[40];

  sub_23C8461F0(a1, (uint64_t)v12);
  v10 = sub_23C7DB388();
  a5(v12, v10 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(a6, v10, a2, a3);
  return swift_release();
}

uint64_t sub_23C892944@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_23C7E7E34(a1, v3);
  a2[3] = v3;
  a2[4] = *(_QWORD *)(v4 + 8);
  v6 = sub_23C812004(a2);
  return (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v6, v5, v3);
}

uint64_t FilteredRequest.filter(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return sub_23C893D34(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for SQL, (void (*)(_QWORD *, uint64_t, uint64_t))FilteredRequest.filter(_:));
}

void FilteredRequest.filter(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C893E2C(a1, a2, a3, (uint64_t)&protocol witness table for SQL, (void (*)(_QWORD *, uint64_t, uint64_t))FilteredRequest.filter(_:));
}

void sub_23C8929DC(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE1328];
  *(_QWORD *)(a1 + 32) = &protocol witness table for Bool;
  *(_BYTE *)a1 = 0;
}

uint64_t sub_23C8929F8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C892A1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23C892944((_QWORD *)(v1 + 16), a1);
}

void sub_23C892A34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  char v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;

  v22 = a5;
  v9 = sub_23C910B6C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v24 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21 - v15, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  sub_23C82097C((uint64_t)v12, v25);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v16 = v26;
  if (v26)
  {
    v17 = v27;
    sub_23C7E7E34(v25, v26);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 24))(&v23, v16, v17);
    v21 = v23;
    v18 = v24;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v25);
    v19 = v21;
  }
  else
  {
    sub_23C7E7900((uint64_t)v25, (uint64_t *)&unk_25430D6B8);
    v19 = 0uLL;
    v18 = -1;
  }
  v20 = v22;
  *v22 = v19;
  *((_BYTE *)v20 + 16) = v18;
}

void sub_23C892BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  sub_23C7DE8EC();
  v22 = v0;
  v23 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  MEMORY[0x24BDAC7A8](v12);
  sub_23C7DE95C();
  (*(void (**)(uint64_t))(v15 + 16))(v14 - v13);
  swift_getAssociatedTypeWitness();
  v16 = sub_23C9111B4();
  v17 = sub_23C91119C();
  MEMORY[0x242626100](MEMORY[0x24BEE12E0], v17);
  if ((sub_23C911364() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_23C7E214C((uint64_t)sub_23C8929DC, 0);
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v11, v5);
    v20 = v19;
    v21 = (_QWORD *)sub_23C7DB388();
    v21[2] = v11;
    v21[3] = v9;
    v21[4] = v7;
    v21[5] = v5;
    v21[6] = v22;
    v21[7] = v3;
    v21[8] = v23;
    v21[9] = v18;
    v21[10] = v20;
    v21[11] = v16;
    sub_23C7E214C((uint64_t)sub_23C896704, (uint64_t)v21);
    sub_23C7DFB3C();
  }
  sub_23C7DBCB0();
}

uint64_t sub_23C892D58(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  _UNKNOWN **v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23C910BA8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v28 - v10, a1, AssociatedTypeWitness);
  swift_dynamicCast();
  if (a2)
  {
    if (a2 == 1)
    {
      v11 = sub_23C910B84();
      v40 = (ValueMetadata *)MEMORY[0x24BEE0D00];
      v41 = &protocol witness table for String;
      v37 = v11;
      v38 = v12;
    }
    else
    {
      sub_23C910B84();
      v22 = sub_23C910E18();
      v24 = v23;
      swift_bridgeObjectRelease();
      v40 = (ValueMetadata *)MEMORY[0x24BEE0D00];
      v41 = &protocol witness table for String;
      v37 = v22;
      v38 = v24;
    }
  }
  else
  {
    v40 = &type metadata for DatabaseValue;
    v41 = &protocol witness table for DatabaseValue;
    v28 = sub_23C910B9C();
    v29 = v13;
    v30 = v14;
    v31 = v15;
    v32 = v16;
    v33 = v17;
    v34 = v18;
    v35 = v19;
    v36 = v20;
    v37 = MEMORY[0x242624738](&v28, 16);
    v38 = v21;
    v39 = 3;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v25 = v40;
  v26 = v41;
  sub_23C7E7E34(&v37, (uint64_t)v40);
  ((void (*)(ValueMetadata *, _UNKNOWN **))v26[3])(v25, v26);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v37);
}

void sub_23C892FE0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned __int8 v26;
  ValueMetadata *v27;
  _UNKNOWN **v28;
  uint64_t v29;

  Database.primaryKey(_:)(a1, a2, &v24);
  if (!v7)
  {
    v11 = (uint64_t)v24;
    v10 = v25;
    v12 = v26;
    v23 = v25;
    if (v26)
    {
      if (v26 == 1)
        v13 = v24;
      else
        v13 = &unk_250D80B08;
    }
    else
    {
      sub_23C7E79A8(&qword_25430DA10);
      v14 = swift_allocObject();
      v10 = v23;
      v13 = (_QWORD *)v14;
      *(_OWORD *)(v14 + 16) = xmmword_23C912A20;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v23;
    }
    v15 = v13[2];
    sub_23C7F8E30(v11, v10, v12);
    swift_bridgeObjectRelease();
    if (v15 == 1)
    {
      v29 = a3;
      if (v12)
      {
        if (v12 == 1)
          v16 = (_OWORD *)v11;
        else
          v16 = &unk_250D80AD8;
      }
      else
      {
        sub_23C7E79A8(&qword_25430DA10);
        v16 = (_OWORD *)swift_allocObject();
        v16[1] = xmmword_23C912A20;
        *((_QWORD *)v16 + 4) = v11;
        *((_QWORD *)v16 + 5) = v23;
      }
      if (*((_QWORD *)v16 + 2))
      {
        v18 = (_QWORD *)*((_QWORD *)v16 + 4);
        v17 = *((_QWORD *)v16 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v27 = &type metadata for Column;
        v28 = &protocol witness table for Column;
        v24 = v18;
        v25 = v17;
        a4[3] = (uint64_t)&type metadata for SQLExpression;
        a4[4] = (uint64_t)&protocol witness table for SQLExpression;
        v19 = swift_allocObject();
        v20 = (void *)(v19 + 16);
        *a4 = v19;
        swift_getAssociatedTypeWitness();
        v21 = sub_23C91119C();
        v22 = MEMORY[0x242626100](MEMORY[0x24BEE12C8], v21);
        Sequence<>.contains(_:)(v21, v22, *(_QWORD *)(a7 + 8), v20);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v24);
        return;
      }
      __break(1u);
    }
    v24 = 0;
    v25 = 0xE000000000000000;
    sub_23C911634();
    sub_23C910F5C();
    sub_23C910F5C();
    sub_23C9117B4();
    __break(1u);
  }
}

uint64_t sub_23C893268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16[4];
  char v17;
  __int16 v18;

  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_23C8909DC(a2, a1, a3, a4);
  if (!v5)
  {
    a5[3] = (uint64_t)&type metadata for SQLExpression;
    a5[4] = (uint64_t)&protocol witness table for SQLExpression;
    v12 = swift_allocObject();
    *a5 = v12;
    v13 = (void *)(v12 + 16);
    v16[0] = 21071;
    v16[1] = 0xE200000000000000;
    v16[2] = 0;
    v16[3] = 0;
    v17 = 0;
    v18 = 1;
    MEMORY[0x24BDAC7A8](v12);
    sub_23C7E79A8(&qword_25430B3B0);
    sub_23C7E1240((unint64_t *)&qword_25430B3B8, &qword_25430B3B0, MEMORY[0x24BEE12C8]);
    swift_getKeyPath();
    swift_retain();
    sub_23C907A54();
    v15 = v14;
    swift_release();
    sub_23C87019C(v16, v15, v13);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C8933E8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X4>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27[2];
  __int128 v28;
  __int16 v29;
  char v30;
  uint64_t v31;

  v9 = swift_bridgeObjectRetain();
  sub_23C850848(v9, a1, a2);
  v11 = v10;
  result = swift_bridgeObjectRelease();
  if (v4)
  {
    *a3 = v4;
  }
  else if (v11)
  {
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      v27[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v14 = (_QWORD *)v27[0];
      v15 = v11 + 40;
      do
      {
        v16 = sub_23C910E18();
        v18 = v17;
        v27[0] = (uint64_t)v14;
        v19 = v14[2];
        if (v19 >= v14[3] >> 1)
        {
          sub_23C7E649C();
          v14 = (_QWORD *)v27[0];
        }
        v15 += 16;
        v14[2] = v19 + 1;
        v20 = &v14[2 * v19];
        v20[4] = v16;
        v20[5] = v18;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C7FD0DC();
    v22 = v21;
    swift_bridgeObjectRelease();
    v27[0] = v22;
    sub_23C894774(v27, v14);
    swift_bridgeObjectRelease();
    sub_23C890B68(v27[0]);
    v23 = swift_release();
    v27[0] = 4476481;
    v27[1] = 0xE300000000000000;
    v28 = xmmword_23C914530;
    v29 = 256;
    v30 = 0;
    MEMORY[0x24BDAC7A8](v23);
    sub_23C7E79A8(&qword_25430B3B0);
    sub_23C7E1240((unint64_t *)&qword_25430B3B8, &qword_25430B3B0, MEMORY[0x24BEE12C8]);
    swift_getKeyPath();
    swift_retain();
    sub_23C907A54();
    v25 = v24;
    swift_release();
    sub_23C87019C(v27, v25, a4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23C911634();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    sub_23C910F5C();
    swift_bridgeObjectRetain();
    sub_23C7FD068();
    v31 = v26;
    sub_23C89470C(&v31);
    swift_bridgeObjectRelease();
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7E1240((unint64_t *)&qword_25430DB98, &qword_25430D9F8, MEMORY[0x24BEE12B0]);
    sub_23C910E3C();
    swift_release();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    result = sub_23C9117B4();
    __break(1u);
  }
  return result;
}

uint64_t sub_23C8937CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  Database.primaryKey(_:)(a2, a3, v9);
  if (!v3)
  {
    v5 = v9[0];
    if (v10)
    {
      if (v10 == 1)
        v6 = (_OWORD *)v9[0];
      else
        v6 = &unk_250D80AA8;
    }
    else
    {
      v7 = v9[1];
      sub_23C7E79A8(&qword_25430DA10);
      v6 = (_OWORD *)swift_allocObject();
      v6[1] = xmmword_23C912A20;
      *((_QWORD *)v6 + 4) = v5;
      *((_QWORD *)v6 + 5) = v7;
    }
    v4 = sub_23C890FBC((uint64_t)v6);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_23C89388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;
  unsigned __int8 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;
  uint64_t v18;

  Database.primaryKey(_:)(a2, a3, &v14);
  if (!v3)
  {
    v5 = v14;
    if (v15)
    {
      if (v15 != 1 || (BYTE8(v14) & 1) != 0)
      {
        sub_23C7F9150(v14, *((uint64_t *)&v14 + 1), v15);
        sub_23C7E79A8(&qword_25430B0C8);
        a1 = swift_allocObject();
        *(_OWORD *)(a1 + 16) = xmmword_23C912A20;
        *(_QWORD *)(a1 + 56) = &type metadata for Column;
        *(_QWORD *)(a1 + 64) = &protocol witness table for Column;
        *(_QWORD *)(a1 + 32) = 0x6469776F72;
        *(_QWORD *)(a1 + 40) = 0xE500000000000000;
      }
      else
      {
        v6 = *(_QWORD *)(v14 + 16);
        if (v6)
        {
          v13 = *((_QWORD *)&v14 + 1);
          v18 = MEMORY[0x24BEE4AF8];
          sub_23C7FDBDC();
          a1 = v18;
          v7 = (uint64_t *)(v5 + 40);
          do
          {
            v9 = *(v7 - 1);
            v8 = *v7;
            v18 = a1;
            v11 = *(_QWORD *)(a1 + 16);
            v10 = *(_QWORD *)(a1 + 24);
            swift_bridgeObjectRetain();
            if (v11 >= v10 >> 1)
            {
              sub_23C7FDBDC();
              a1 = v18;
            }
            v7 += 2;
            v16 = &type metadata for Column;
            v17 = &protocol witness table for Column;
            *(_QWORD *)&v14 = v9;
            *((_QWORD *)&v14 + 1) = v8;
            *(_QWORD *)(a1 + 16) = v11 + 1;
            sub_23C7DB5CC(&v14, a1 + 40 * v11 + 32);
            --v6;
          }
          while (v6);
          sub_23C7F9150(v5, v13, 1u);
        }
        else
        {
          sub_23C7F9150(v14, *((uint64_t *)&v14 + 1), 1u);
          return MEMORY[0x24BEE4AF8];
        }
      }
    }
    else
    {
      sub_23C7E79A8(&qword_25430B0C8);
      a1 = swift_allocObject();
      *(_OWORD *)(a1 + 16) = xmmword_23C912A20;
      *(_QWORD *)(a1 + 56) = &type metadata for Column;
      *(_QWORD *)(a1 + 64) = &protocol witness table for Column;
      *(_OWORD *)(a1 + 32) = v5;
    }
  }
  return a1;
}

uint64_t AggregatingRequest.group(_:)()
{
  return sub_23C893AA4();
}

uint64_t sub_23C893AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  sub_23C7DF844();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_23C7DB388();
  *(_QWORD *)(v8 + 16) = v7;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8);
  sub_23C7E0808();
  v9(v1, v8, v5, v3);
  return sub_23C7E8B10();
}

void AggregatingRequest.group(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  sub_23C893B2C(a1, a2, a3, a4, a5, &qword_25430B0C8, (uint64_t)&protocol witness table for SQL, (void (*)(uint64_t, uint64_t, uint64_t))AggregatingRequest.group(_:));
}

void sub_23C893B2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[24];

  v14 = *a3;
  v13 = a3[1];
  sub_23C7E79A8(a6);
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v15 + 56) = &type metadata for SQL;
  *(_QWORD *)(v15 + 64) = a7;
  sub_23C7E79A8(&qword_25430DA08);
  v16 = sub_23C7DB388();
  *(_OWORD *)(v16 + 16) = xmmword_23C912A20;
  v18[0] = a1;
  v18[1] = a2;
  v18[2] = v14;
  v18[3] = v13;
  sub_23C7F96B0(v18);
  sub_23C7F96E0(v18, (void *)(v16 + 32));
  *(_QWORD *)(v15 + 32) = v16;
  swift_bridgeObjectRetain();
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  a8(v15, a4, a5);
  swift_bridgeObjectRelease();
  sub_23C7E1894();
}

uint64_t AggregatingRequest.group(literal:)()
{
  return sub_23C893C34();
}

uint64_t sub_23C893C34()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_23C7DF844();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = *v8;
  sub_23C7E79A8(v10);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v11 + 56) = &type metadata for SQL;
  *(_QWORD *)(v11 + 64) = v3;
  *(_QWORD *)(v11 + 32) = v9;
  sub_23C7DBBB8();
  v1(v11, v7, v5);
  return sub_23C7E9680();
}

void AggregatingRequest.having(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  __int128 v3[2];

  sub_23C8967CC();
  sub_23C8461F0(v0, (uint64_t)v3);
  v1 = sub_23C7DB388();
  sub_23C7DB5CC(v3, v1 + 16);
  sub_23C7E698C();
  v2();
  sub_23C7DFB3C();
  sub_23C7E1B78();
}

uint64_t AggregatingRequest.having(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return sub_23C893D34(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for SQL, (void (*)(_QWORD *, uint64_t, uint64_t))AggregatingRequest.having(_:));
}

uint64_t sub_23C893D34(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[5];
  _QWORD v17[24];

  v11 = *a3;
  v12 = a3[1];
  v16[3] = &type metadata for SQL;
  v16[4] = a6;
  sub_23C7E79A8(&qword_25430DA08);
  v13 = sub_23C7DB388();
  *(_OWORD *)(v13 + 16) = xmmword_23C912A20;
  v17[0] = a1;
  v17[1] = a2;
  v17[2] = v11;
  v17[3] = v12;
  sub_23C7F96B0(v17);
  sub_23C7F96E0(v17, (void *)(v13 + 32));
  v16[0] = v13;
  sub_23C7E0808();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a7(v16, a4, a5);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v16);
}

void AggregatingRequest.having(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_23C893E2C(a1, a2, a3, (uint64_t)&protocol witness table for SQL, (void (*)(_QWORD *, uint64_t, uint64_t))AggregatingRequest.having(_:));
}

void sub_23C893E2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v8;
  _QWORD v9[5];

  v8 = *a1;
  v9[3] = &type metadata for SQL;
  v9[4] = a4;
  v9[0] = v8;
  swift_bridgeObjectRetain();
  a5(v9, a2, a3);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  sub_23C7E1B78();
}

void OrderedRequest.order(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[24];

  v6 = *a3;
  v5 = a3[1];
  sub_23C7E79A8(&qword_256BCBC78);
  v7 = sub_23C7DB388();
  *(_OWORD *)(v7 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v7 + 56) = &type metadata for SQL;
  *(_QWORD *)(v7 + 64) = &protocol witness table for SQL;
  sub_23C7E79A8(&qword_25430DA08);
  v8 = sub_23C7DB388();
  *(_OWORD *)(v8 + 16) = xmmword_23C912A20;
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = v6;
  v9[3] = v5;
  sub_23C7F96B0(v9);
  sub_23C7F96E0(v9, (void *)(v8 + 32));
  *(_QWORD *)(v7 + 32) = v8;
  sub_23C7DBBB8();
  sub_23C7DBBB0();
  sub_23C7E0808();
  OrderedRequest.order(_:)();
  swift_bridgeObjectRelease();
  sub_23C7E1894();
}

uint64_t OrderedRequest.order(literal:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  sub_23C8967CC();
  v1 = *v0;
  sub_23C7E79A8(&qword_256BCBC78);
  v2 = sub_23C7DB388();
  *(_OWORD *)(v2 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v2 + 56) = &type metadata for SQL;
  *(_QWORD *)(v2 + 64) = &protocol witness table for SQL;
  *(_QWORD *)(v2 + 32) = v1;
  sub_23C7E0808();
  OrderedRequest.order(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C894008(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  a2(&v8);
  if (!v3)
  {
    v5 = v8;
    swift_retain();
    sub_23C891104(v5);
    a3 = v6;
    swift_bridgeObjectRelease();
  }
  return a3;
}

uint64_t DerivableRequest.limit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a3 + 64))(a1, 0, 1, a2, a3);
}

uint64_t sub_23C89409C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[23];
  _QWORD v24[23];
  __n128 __src[11];

  v6 = *(_QWORD *)(a2 - 8);
  v7 = (uint64_t *)MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v7;
  v11 = v7[1];
  v12 = v7[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for AssociationAggregate(0, AssociatedTypeWitness, v14, v15);
  sub_23C8851D0((uint64_t)v9, v16, a2, a3);
  sub_23C7E79A8(&qword_25430D128);
  if (v12)
  {
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v17 + 56) = &type metadata for SQLSelection;
    *(_QWORD *)(v17 + 64) = &protocol witness table for SQLSelection;
    v18 = swift_allocObject();
    v19 = (void *)(v18 + 16);
    *(_QWORD *)(v17 + 32) = v18;
    memcpy(v23, __src, 0xA3uLL);
    v23[21] = v11;
    v23[22] = v12;
    sub_23C8011BC(v23);
    sub_23C801054(v23, v24);
    memcpy(v19, v24, 0xB8uLL);
    sub_23C894614(__src);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_23C912A20;
    *(_QWORD *)(v20 + 56) = &type metadata for SQLExpression;
    *(_QWORD *)(v20 + 64) = &protocol witness table for SQLExpression;
    v21 = swift_allocObject();
    *(_QWORD *)(v20 + 32) = v21;
    memcpy((void *)(v21 + 16), __src, 0xA3uLL);
    sub_23C894614(__src);
  }
  SelectionRequest.annotated(with:)();
  swift_bridgeObjectRelease();
  sub_23C894614(__src);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a2);
}

uint64_t sub_23C89430C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;

  v5 = *a2;
  v6 = *(_OWORD *)(a2 + 1);
  return sub_23C89409C((uint64_t)&v5, a3, a4);
}

uint64_t sub_23C894358(uint64_t a1, uint64_t a2)
{
  if (sub_23C896730(a2))
    return sub_23C7E79A8(&qword_25430DBC8);
  else
    return sub_23C91188C();
}

uint64_t sub_23C894398(uint64_t a1)
{
  uint64_t v1;

  return sub_23C892D58(a1, *(_BYTE *)(v1 + 72));
}

void sub_23C8943D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;

  sub_23C7DF938();
  sub_23C892A34(v1, v2, *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), v3);
}

uint64_t sub_23C894400()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C89442C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_23C893268(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_23C894448()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C89446C(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8937CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C894488(uint64_t a1)
{
  uint64_t v1;

  return sub_23C894008(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C8944A8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8944D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_23C89430C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_23C8944EC()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_23C7E9BA4();
  sub_23C7E6F90(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, v11, v12, v13, v14, v15, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_23C894540(uint64_t a1)
{
  uint64_t v1;

  return sub_23C89388C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23C894558()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

void sub_23C89457C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C8461F0(v1 + 16, a1);
}

uint64_t dispatch thunk of SelectionRequest.annotated(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TableRequest.databaseTableName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of OrderedRequest.order(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of OrderedRequest.reversed()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of OrderedRequest.unordered()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _JoinableRequest._including(all:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of _JoinableRequest._including(required:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _JoinableRequest._joining(optional:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _JoinableRequest._joining(required:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DerivableRequest.distinct()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of DerivableRequest.limit(_:offset:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 64))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of DerivableRequest.with<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t sub_23C894614(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_23C7E40F4(a1);
  sub_23C7DB4F0(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

uint64_t sub_23C89465C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_23C7E9BA4();
  sub_23C800D94(v2, v3, v4, v5, v6, v7, v8, v9, v1.n128_i64[0], v1.n128_i64[1], v10, v11, v12, v13, v14, v15, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176));
  return swift_deallocObject();
}

uint64_t sub_23C8946A8(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t);

  v2 = sub_23C7E40F4(a1);
  sub_23C7DB4F0(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2);
  return v1;
}

uint64_t sub_23C8946EC()
{
  return 24;
}

__n128 sub_23C8946F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23C89470C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DEA08();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = sub_23C89480C(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_23C894774(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v8[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C8DEA18();
    v4 = v5;
  }
  v6 = *(char **)(v4 + 16);
  v8[0] = (char *)(v4 + 32);
  v8[1] = v6;
  swift_bridgeObjectRetain();
  sub_23C894EAC(v8, a2);
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23C89480C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;

  v3 = a1[1];
  result = sub_23C911874();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      return sub_23C895B7C(0, v3, 1, a1);
    return result;
  }
  if (v3 < -1)
    goto LABEL_146;
  v99 = result;
  v96 = a1;
  if (v3 <= 1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v102 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v36 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v8 = MEMORY[0x24BEE4AF8];
      goto LABEL_113;
    }
    v98 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    result = sub_23C911130();
    *(_QWORD *)(result + 16) = v3 / 2;
    v98 = result;
    v102 = (char *)(result + 32);
  }
  v6 = 0;
  v7 = *a1;
  v97 = v7 + 8;
  v8 = MEMORY[0x24BEE4AF8];
  v100 = v3;
  while (1)
  {
    v9 = v6++;
    if (v6 >= v3)
      goto LABEL_39;
    v10 = (uint64_t *)(v7 + 16 * v6);
    result = *v10;
    v11 = v10[1];
    v12 = (_QWORD *)(v7 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_38;
      v14 = 0;
    }
    else
    {
      result = sub_23C911A18();
      v14 = result;
      v15 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_30;
    }
    v16 = (_QWORD *)(v97 + 16 * v15);
    do
    {
      result = *(v16 - 1);
      v17 = (_QWORD *)(v7 + 16 * v6);
      if (result == *v17 && *v16 == v17[1])
      {
        if ((v14 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        result = sub_23C911A18();
        if (((v14 ^ result) & 1) != 0)
          goto LABEL_30;
      }
      v16 += 2;
      v19 = v15 + 1;
      v6 = v15;
      v15 = v19;
    }
    while (v19 < v3);
    v15 = v19;
LABEL_30:
    v6 = v15;
    if ((v14 & 1) != 0)
    {
LABEL_31:
      if (v15 < v9)
        goto LABEL_150;
      if (v9 < v15)
      {
        v20 = 16 * v15;
        v21 = 16 * v9;
        v22 = v15;
        v23 = v9;
        do
        {
          if (v23 != --v22)
          {
            if (!v7)
              goto LABEL_153;
            v24 = v7 + v20;
            v25 = *(_QWORD *)(v7 + v21);
            v26 = *(_QWORD *)(v7 + v21 + 8);
            *(_OWORD *)(v7 + v21) = *(_OWORD *)(v7 + v20 - 16);
            *(_QWORD *)(v24 - 16) = v25;
            *(_QWORD *)(v24 - 8) = v26;
          }
          ++v23;
          v20 -= 16;
          v21 += 16;
        }
        while (v23 < v22);
      }
LABEL_38:
      v6 = v15;
    }
LABEL_39:
    if (v6 < v3)
    {
      if (__OFSUB__(v6, v9))
        goto LABEL_145;
      if (v6 - v9 < v99)
        break;
    }
LABEL_59:
    if (v6 < v9)
      goto LABEL_140;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C8DE884(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
    }
    v35 = *(_QWORD *)(v8 + 16);
    v34 = *(_QWORD *)(v8 + 24);
    v36 = v35 + 1;
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)sub_23C8DE884((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
      v8 = result;
    }
    *(_QWORD *)(v8 + 16) = v36;
    v37 = v8 + 32;
    v38 = (uint64_t *)(v8 + 32 + 16 * v35);
    *v38 = v9;
    v38[1] = v6;
    if (v35)
    {
      v101 = v6;
      while (1)
      {
        v39 = v36 - 1;
        if (v36 >= 4)
        {
          v44 = v37 + 16 * v36;
          v45 = *(_QWORD *)(v44 - 64);
          v46 = *(_QWORD *)(v44 - 56);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_129;
          v49 = *(_QWORD *)(v44 - 48);
          v48 = *(_QWORD *)(v44 - 40);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_130;
          v51 = v36 - 2;
          v52 = (uint64_t *)(v37 + 16 * (v36 - 2));
          v54 = *v52;
          v53 = v52[1];
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_131;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_133;
          if (v56 >= v47)
          {
            v74 = (uint64_t *)(v37 + 16 * v39);
            v76 = *v74;
            v75 = v74[1];
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_139;
            v67 = v42 < v77;
            goto LABEL_97;
          }
        }
        else
        {
          if (v36 != 3)
          {
            v68 = *(_QWORD *)(v8 + 32);
            v69 = *(_QWORD *)(v8 + 40);
            v50 = __OFSUB__(v69, v68);
            v61 = v69 - v68;
            v62 = v50;
            goto LABEL_91;
          }
          v41 = *(_QWORD *)(v8 + 32);
          v40 = *(_QWORD *)(v8 + 40);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
        }
        if ((v43 & 1) != 0)
          goto LABEL_132;
        v51 = v36 - 2;
        v57 = (uint64_t *)(v37 + 16 * (v36 - 2));
        v59 = *v57;
        v58 = v57[1];
        v60 = __OFSUB__(v58, v59);
        v61 = v58 - v59;
        v62 = v60;
        if (v60)
          goto LABEL_134;
        v63 = (uint64_t *)(v37 + 16 * v39);
        v65 = *v63;
        v64 = v63[1];
        v50 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v50)
          goto LABEL_136;
        if (__OFADD__(v61, v66))
          goto LABEL_138;
        if (v61 + v66 >= v42)
        {
          v67 = v42 < v66;
LABEL_97:
          if (v67)
            v39 = v51;
          goto LABEL_99;
        }
LABEL_91:
        if ((v62 & 1) != 0)
          goto LABEL_135;
        v70 = (uint64_t *)(v37 + 16 * v39);
        v72 = *v70;
        v71 = v70[1];
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_137;
        if (v73 < v61)
          goto LABEL_108;
LABEL_99:
        v78 = v39 - 1;
        if (v39 - 1 >= v36)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        v79 = v7;
        if (!v7)
          goto LABEL_152;
        v80 = v8;
        v81 = (uint64_t *)(v37 + 16 * v78);
        v82 = *v81;
        v83 = v37;
        v84 = v39;
        v85 = (_QWORD *)(v37 + 16 * v39);
        v86 = v85[1];
        v87 = v79;
        result = sub_23C895F2C((char *)(v79 + 16 * *v81), (char *)(v79 + 16 * *v85), v79 + 16 * v86, v102);
        if (v1)
        {
LABEL_110:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v98 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v86 < v82)
          goto LABEL_126;
        if (v84 > *(_QWORD *)(v80 + 16))
          goto LABEL_127;
        *v81 = v82;
        *(_QWORD *)(v83 + 16 * v78 + 8) = v86;
        v88 = *(_QWORD *)(v80 + 16);
        if (v84 >= v88)
          goto LABEL_128;
        v8 = v80;
        v36 = v88 - 1;
        result = (uint64_t)memmove(v85, v85 + 2, 16 * (v88 - 1 - v84));
        v37 = v83;
        *(_QWORD *)(v80 + 16) = v88 - 1;
        v7 = v87;
        v6 = v101;
        if (v88 <= 2)
          goto LABEL_108;
      }
    }
    v36 = 1;
LABEL_108:
    v3 = v100;
    if (v6 >= v100)
    {
      v5 = v98;
LABEL_113:
      result = v8;
      v98 = v5;
      if (v36 >= 2)
      {
        v89 = *v96;
        do
        {
          v90 = v36 - 2;
          if (v36 < 2)
            goto LABEL_141;
          if (!v89)
            goto LABEL_154;
          v91 = result;
          v92 = *(_QWORD *)(result + 32 + 16 * v90);
          v93 = *(_QWORD *)(result + 32 + 16 * (v36 - 1) + 8);
          result = sub_23C895F2C((char *)(v89 + 16 * v92), (char *)(v89 + 16 * *(_QWORD *)(result + 32 + 16 * (v36 - 1))), v89 + 16 * v93, v102);
          if (v1)
            goto LABEL_110;
          if (v93 < v92)
            goto LABEL_142;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C8DE978();
            v91 = result;
          }
          if (v90 >= *(_QWORD *)(v91 + 16))
            goto LABEL_143;
          v94 = (_QWORD *)(v91 + 32 + 16 * v90);
          *v94 = v92;
          v94[1] = v93;
          v95 = *(_QWORD *)(v91 + 16);
          if (v36 > v95)
            goto LABEL_144;
          memmove((void *)(v91 + 32 + 16 * (v36 - 1)), (const void *)(v91 + 32 + 16 * v36), 16 * (v95 - v36));
          result = v91;
          *(_QWORD *)(v91 + 16) = v95 - 1;
          v36 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v98 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v9, v99))
    goto LABEL_148;
  if (v9 + v99 >= v3)
    v27 = v3;
  else
    v27 = v9 + v99;
  if (v27 >= v9)
  {
    if (v6 != v27)
    {
      v28 = (uint64_t *)(v7 + 16 * v6);
      do
      {
        v29 = (uint64_t *)(v7 + 16 * v6);
        result = *v29;
        v30 = v29[1];
        v31 = v9;
        v32 = v28;
        do
        {
          if (result == *(v32 - 2) && v30 == *(v32 - 1))
            break;
          result = sub_23C911A18();
          if ((result & 1) == 0)
            break;
          if (!v7)
            goto LABEL_151;
          result = *v32;
          v30 = v32[1];
          *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
          *(v32 - 1) = v30;
          *(v32 - 2) = result;
          v32 -= 2;
          ++v31;
        }
        while (v6 != v31);
        ++v6;
        v28 += 2;
      }
      while (v6 != v27);
      v6 = v27;
    }
    goto LABEL_59;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
  return result;
}

uint64_t sub_23C894EAC(char **a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BOOL4 v29;
  _QWORD *v30;
  uint64_t v31;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  char v97;
  char *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  __int128 v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char **v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  char v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t result;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  int v177;
  uint64_t v178;
  char *v179;
  char **v180;
  char *v181;
  uint64_t v182;
  char *v183;
  _QWORD *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;

  v5 = (uint64_t)a1[1];
  swift_bridgeObjectRetain_n();
  v6 = sub_23C911874();
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
        sub_23C895C40(0, v5, 1, a1, a2);
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_242;
  }
  if (v5 < -1)
  {
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  v174 = v6;
  v188 = a2;
  v185 = v2;
  if (v5 <= 1)
  {
    v179 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v173 = MEMORY[0x24BEE4AF8];
    if (v5 != 1)
    {
      v10 = a1;
      v109 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v9 = (char *)MEMORY[0x24BEE4AF8];
LABEL_207:
      if (v109 < 2)
      {
LABEL_218:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v173 + 16) = 0;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v163 = *v10;
      v191 = *v10;
      while (1)
      {
        v164 = v109 - 2;
        if (v109 < 2)
          goto LABEL_236;
        if (!v163)
          goto LABEL_249;
        v165 = v9;
        v166 = *(_QWORD *)&v9[16 * v164 + 32];
        v167 = *(_QWORD *)&v9[16 * v109 + 24];
        v168 = &v163[56 * v166];
        v169 = &v163[56 * *(_QWORD *)&v9[16 * v109 + 16]];
        v170 = &v163[56 * v167];
        swift_bridgeObjectRetain();
        sub_23C8960E4(v168, v169, v170, v179, a2);
        if (v185)
        {
          v161 = v173;
          goto LABEL_203;
        }
        if (v167 < v166)
          goto LABEL_237;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v165 = sub_23C8DE978();
        if (v164 >= *((_QWORD *)v165 + 2))
          goto LABEL_238;
        v171 = &v165[16 * v164 + 32];
        *(_QWORD *)v171 = v166;
        *((_QWORD *)v171 + 1) = v167;
        v172 = *((_QWORD *)v165 + 2);
        if (v109 > v172)
          goto LABEL_239;
        memmove(&v165[16 * v109 + 16], &v165[16 * v109 + 32], 16 * (v172 - v109));
        v9 = v165;
        *((_QWORD *)v165 + 2) = v172 - 1;
        v109 = v172 - 1;
        v140 = v172 > 2;
        a2 = v188;
        v163 = v191;
        if (!v140)
          goto LABEL_218;
      }
    }
  }
  else
  {
    sub_23C7E79A8(&qword_25430B370);
    v7 = sub_23C911130();
    *(_QWORD *)(v7 + 16) = v5 / 2;
    v173 = v7;
    v179 = (char *)(v7 + 32);
  }
  v8 = 0;
  v184 = a2 + 7;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v10 = a1;
  v180 = a1;
  while (2)
  {
    v186 = v9;
    v11 = (uint64_t)v8;
    v12 = (uint64_t)(v8 + 1);
    v191 = v8;
    if ((uint64_t)(v8 + 1) >= v5)
    {
      v13 = v10;
      goto LABEL_101;
    }
    v13 = v10;
    v14 = *v10;
    v181 = v8 + 1;
    sub_23C896698((uint64_t)&(*v10)[56 * v12], (uint64_t)&v190, &qword_25430B370);
    sub_23C896698((uint64_t)&v14[56 * v11], (uint64_t)&v189, &qword_25430B370);
    v15 = sub_23C910E18();
    v17 = v16;
    v18 = a2[2];
    v175 = v5;
    v176 = v14;
    if (v18)
    {
      v19 = v15;
      v20 = a2[4] == v15 && a2[5] == v16;
      if (v20 || (sub_23C911A18() & 1) != 0)
      {
        v21 = 0;
LABEL_18:
        swift_bridgeObjectRelease();
        v22 = sub_23C910E18();
        v24 = v23;
        v25 = a2[2];
        if (v25)
        {
          v26 = v22;
          v27 = a2[4] == v22 && a2[5] == v23;
          if (v27 || (sub_23C911A18() & 1) != 0)
          {
            v28 = 0;
LABEL_25:
            swift_bridgeObjectRelease();
            v29 = v21 < v28;
          }
          else
          {
            v34 = v184;
            v35 = 1;
            while (v25 != v35)
            {
              v28 = v35;
              if (*(v34 - 1) != v26 || *v34 != v24)
              {
                v37 = sub_23C911A18();
                v35 = v28 + 1;
                v34 += 2;
                if ((v37 & 1) == 0)
                  continue;
              }
              goto LABEL_25;
            }
            swift_bridgeObjectRelease();
            v29 = 1;
          }
          v177 = v29;
          v5 = v175;
        }
        else
        {
          swift_bridgeObjectRelease();
          v177 = 1;
        }
      }
      else
      {
        v30 = v184;
        v31 = 1;
        while (v18 != v31)
        {
          v21 = v31;
          if (*(v30 - 1) != v19 || *v30 != v17)
          {
            v33 = sub_23C911A18();
            v31 = v21 + 1;
            v30 += 2;
            if ((v33 & 1) == 0)
              continue;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        v177 = 0;
      }
      v14 = v176;
    }
    else
    {
      swift_bridgeObjectRelease();
      v177 = 0;
    }
    sub_23C7E7900((uint64_t)&v189, &qword_25430B370);
    sub_23C7E7900((uint64_t)&v190, &qword_25430B370);
    v11 = (uint64_t)v191;
    v38 = (uint64_t)(v191 + 2);
    v39 = v181;
    if ((uint64_t)(v191 + 2) >= v5)
      goto LABEL_92;
    while (1)
    {
      sub_23C896698((uint64_t)&v14[56 * v38], (uint64_t)&v190, &qword_25430B370);
      sub_23C896698((uint64_t)&v14[56 * (_QWORD)v39], (uint64_t)&v189, &qword_25430B370);
      v40 = sub_23C910E18();
      v42 = v41;
      v43 = a2[2];
      if (!v43)
      {
        swift_bridgeObjectRelease();
        v54 = 0;
        goto LABEL_86;
      }
      v44 = v40;
      v45 = a2[4] == v40 && a2[5] == v41;
      if (v45 || (sub_23C911A18() & 1) != 0)
      {
        v46 = 0;
LABEL_56:
        swift_bridgeObjectRelease();
        v47 = sub_23C910E18();
        v49 = v48;
        v50 = a2[2];
        if (v50)
        {
          v51 = v47;
          v52 = a2[4] == v47 && a2[5] == v48;
          if (v52 || (sub_23C911A18() & 1) != 0)
          {
            v53 = 0;
LABEL_63:
            swift_bridgeObjectRelease();
            v54 = v46 < v53;
          }
          else
          {
            v59 = v184;
            v60 = 1;
            while (v50 != v60)
            {
              v53 = v60;
              if (*(v59 - 1) != v51 || *v59 != v49)
              {
                v62 = sub_23C911A18();
                v60 = v53 + 1;
                v59 += 2;
                if ((v62 & 1) == 0)
                  continue;
              }
              goto LABEL_63;
            }
            swift_bridgeObjectRelease();
            v54 = 1;
          }
          v13 = v180;
          v5 = v175;
          goto LABEL_85;
        }
        swift_bridgeObjectRelease();
        v54 = 1;
      }
      else
      {
        v55 = v184;
        v56 = 1;
        while (v43 != v56)
        {
          v46 = v56;
          if (*(v55 - 1) != v44 || *v55 != v42)
          {
            v58 = sub_23C911A18();
            v56 = v46 + 1;
            v55 += 2;
            if ((v58 & 1) == 0)
              continue;
          }
          goto LABEL_56;
        }
        swift_bridgeObjectRelease();
        v54 = 0;
      }
      v13 = v180;
LABEL_85:
      v14 = v176;
LABEL_86:
      sub_23C7E7900((uint64_t)&v189, &qword_25430B370);
      sub_23C7E7900((uint64_t)&v190, &qword_25430B370);
      if (v177 != v54)
        break;
      v39 = (char *)v38++;
      a2 = v188;
      if (v38 >= v5)
      {
        v38 = v5;
        goto LABEL_91;
      }
    }
    a2 = v188;
LABEL_91:
    v11 = (uint64_t)v191;
LABEL_92:
    if (v177)
    {
      if (v38 >= v11)
      {
        if (v11 < v38)
        {
          v63 = (uint64_t)&v14[56 * v38 - 56];
          v64 = &v14[56 * v11];
          v65 = v38;
          v66 = v11;
          do
          {
            if (v66 != --v65)
            {
              if (!v14)
                goto LABEL_248;
              v67 = *((_QWORD *)v64 + 6);
              v69 = *((_OWORD *)v64 + 1);
              v68 = *((_OWORD *)v64 + 2);
              v70 = *(_OWORD *)v64;
              v72 = *(_OWORD *)(v63 + 16);
              v71 = *(_OWORD *)(v63 + 32);
              v73 = *(_OWORD *)v63;
              *((_QWORD *)v64 + 6) = *(_QWORD *)(v63 + 48);
              *((_OWORD *)v64 + 1) = v72;
              *((_OWORD *)v64 + 2) = v71;
              *(_OWORD *)v64 = v73;
              *(_OWORD *)v63 = v70;
              *(_OWORD *)(v63 + 16) = v69;
              *(_OWORD *)(v63 + 32) = v68;
              *(_QWORD *)(v63 + 48) = v67;
            }
            ++v66;
            v63 -= 56;
            v64 += 56;
          }
          while (v66 < v65);
        }
        goto LABEL_100;
      }
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
      goto LABEL_245;
    }
LABEL_100:
    v12 = v38;
LABEL_101:
    if (v12 >= v5)
      goto LABEL_149;
    if (__OFSUB__(v12, v11))
      goto LABEL_240;
    if (v12 - v11 >= v174)
      goto LABEL_149;
    v74 = (char *)(v11 + v174);
    if (__OFADD__(v11, v174))
      goto LABEL_244;
    if ((uint64_t)v74 >= v5)
      v74 = (char *)v5;
    if ((uint64_t)v74 < v11)
    {
LABEL_245:
      __break(1u);
LABEL_246:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_247:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_248:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_249:
      result = swift_bridgeObjectRelease_n();
      __break(1u);
      return result;
    }
    v178 = (uint64_t)v74;
    if ((char *)v12 == v74)
      goto LABEL_149;
    while (2)
    {
      v182 = v12;
      while (2)
      {
        v75 = (uint64_t)&(*v13)[56 * v12];
        sub_23C896698(v75, (uint64_t)&v190, &qword_25430B370);
        sub_23C896698(v75 - 56, (uint64_t)&v189, &qword_25430B370);
        v76 = sub_23C910E18();
        v78 = v77;
        v79 = a2[2];
        if (v79)
        {
          v80 = v76;
          v81 = a2[4] == v76 && a2[5] == v77;
          if (!v81 && (sub_23C911A18() & 1) == 0)
          {
            v90 = v184;
            v91 = 1;
            while (v79 != v91)
            {
              v82 = v91;
              if (*(v90 - 1) != v80 || *v90 != v78)
              {
                v93 = sub_23C911A18();
                v91 = v82 + 1;
                v90 += 2;
                if ((v93 & 1) == 0)
                  continue;
              }
              goto LABEL_117;
            }
            break;
          }
          v82 = 0;
LABEL_117:
          swift_bridgeObjectRelease();
          v83 = sub_23C910E18();
          v85 = v84;
          v86 = a2[2];
          if (v86)
          {
            v87 = v83;
            v88 = a2[4] == v83 && a2[5] == v84;
            if (v88 || (sub_23C911A18() & 1) != 0)
            {
              v89 = 0;
LABEL_124:
              swift_bridgeObjectRelease();
              sub_23C7E7900((uint64_t)&v189, &qword_25430B370);
              sub_23C7E7900((uint64_t)&v190, &qword_25430B370);
              if (v82 >= v89)
                goto LABEL_147;
LABEL_143:
              v98 = *v13;
              if (!*v13)
                goto LABEL_246;
              v99 = &v98[56 * v12];
              v100 = *((_QWORD *)v99 + 6);
              v102 = *((_OWORD *)v99 + 1);
              v101 = *((_OWORD *)v99 + 2);
              v103 = *(_OWORD *)v99;
              v104 = &v98[56 * v12 - 56];
              v105 = *((_OWORD *)v104 + 1);
              *(_OWORD *)v99 = *(_OWORD *)v104;
              *((_OWORD *)v99 + 1) = v105;
              *((_OWORD *)v99 + 2) = *((_OWORD *)v104 + 2);
              *((_QWORD *)v99 + 6) = *((_QWORD *)v104 + 6);
              *(_OWORD *)v104 = v103;
              *((_OWORD *)v104 + 1) = v102;
              *((_OWORD *)v104 + 2) = v101;
              *((_QWORD *)v104 + 6) = v100;
              if ((char *)--v12 == v191)
                goto LABEL_147;
              continue;
            }
            v94 = v184;
            v95 = 1;
            while (v86 != v95)
            {
              v89 = v95;
              if (*(v94 - 1) != v87 || *v94 != v85)
              {
                v97 = sub_23C911A18();
                v95 = v89 + 1;
                v94 += 2;
                if ((v97 & 1) == 0)
                  continue;
              }
              goto LABEL_124;
            }
          }
          swift_bridgeObjectRelease();
          sub_23C7E7900((uint64_t)&v189, &qword_25430B370);
          sub_23C7E7900((uint64_t)&v190, &qword_25430B370);
          goto LABEL_143;
        }
        break;
      }
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)&v189, &qword_25430B370);
      sub_23C7E7900((uint64_t)&v190, &qword_25430B370);
LABEL_147:
      v12 = v182 + 1;
      if (v182 + 1 != v178)
        continue;
      break;
    }
    v12 = v178;
LABEL_149:
    v106 = v191;
    if (v12 < (uint64_t)v191)
    {
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
    v10 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v9 = v186;
    else
      v9 = sub_23C8DE884(0, *((_QWORD *)v186 + 2) + 1, 1, v186);
    v108 = *((_QWORD *)v9 + 2);
    v107 = *((_QWORD *)v9 + 3);
    v109 = v108 + 1;
    if (v108 >= v107 >> 1)
      v9 = sub_23C8DE884((char *)(v107 > 1), v108 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v109;
    v110 = v9 + 32;
    v111 = (char **)&v9[16 * v108 + 32];
    *v111 = v106;
    v111[1] = (char *)v12;
    v183 = (char *)v12;
    if (!v108)
    {
      v109 = 1;
      a2 = v188;
LABEL_198:
      v5 = (uint64_t)v10[1];
      v8 = v183;
      if ((uint64_t)v183 >= v5)
        goto LABEL_207;
      continue;
    }
    break;
  }
  a2 = v188;
  v187 = v9;
  while (2)
  {
    v112 = v109 - 1;
    if (v109 >= 4)
    {
      v117 = &v110[16 * v109];
      v118 = *((_QWORD *)v117 - 8);
      v119 = *((_QWORD *)v117 - 7);
      v123 = __OFSUB__(v119, v118);
      v120 = v119 - v118;
      if (v123)
        goto LABEL_224;
      v122 = *((_QWORD *)v117 - 6);
      v121 = *((_QWORD *)v117 - 5);
      v123 = __OFSUB__(v121, v122);
      v115 = v121 - v122;
      v116 = v123;
      if (v123)
        goto LABEL_225;
      v124 = v109 - 2;
      v125 = &v110[16 * v109 - 32];
      v127 = *(_QWORD *)v125;
      v126 = *((_QWORD *)v125 + 1);
      v123 = __OFSUB__(v126, v127);
      v128 = v126 - v127;
      if (v123)
        goto LABEL_226;
      v123 = __OFADD__(v115, v128);
      v129 = v115 + v128;
      if (v123)
        goto LABEL_228;
      if (v129 >= v120)
      {
        v147 = &v110[16 * v112];
        v149 = *(_QWORD *)v147;
        v148 = *((_QWORD *)v147 + 1);
        v123 = __OFSUB__(v148, v149);
        v150 = v148 - v149;
        if (v123)
          goto LABEL_234;
        v140 = v115 < v150;
      }
      else
      {
LABEL_169:
        if ((v116 & 1) != 0)
          goto LABEL_227;
        v124 = v109 - 2;
        v130 = &v110[16 * v109 - 32];
        v132 = *(_QWORD *)v130;
        v131 = *((_QWORD *)v130 + 1);
        v133 = __OFSUB__(v131, v132);
        v134 = v131 - v132;
        v135 = v133;
        if (v133)
          goto LABEL_229;
        v136 = &v110[16 * v112];
        v138 = *(_QWORD *)v136;
        v137 = *((_QWORD *)v136 + 1);
        v123 = __OFSUB__(v137, v138);
        v139 = v137 - v138;
        if (v123)
          goto LABEL_231;
        if (__OFADD__(v134, v139))
          goto LABEL_233;
        if (v134 + v139 < v115)
          goto LABEL_181;
        v140 = v115 < v139;
      }
      if (v140)
        v112 = v124;
    }
    else
    {
      if (v109 == 3)
      {
        v114 = *((_QWORD *)v9 + 4);
        v113 = *((_QWORD *)v9 + 5);
        v123 = __OFSUB__(v113, v114);
        v115 = v113 - v114;
        v116 = v123;
        goto LABEL_169;
      }
      v141 = *((_QWORD *)v9 + 4);
      v142 = *((_QWORD *)v9 + 5);
      v123 = __OFSUB__(v142, v141);
      v134 = v142 - v141;
      v135 = v123;
LABEL_181:
      if ((v135 & 1) != 0)
        goto LABEL_230;
      v143 = &v110[16 * v112];
      v145 = *(_QWORD *)v143;
      v144 = *((_QWORD *)v143 + 1);
      v123 = __OFSUB__(v144, v145);
      v146 = v144 - v145;
      if (v123)
        goto LABEL_232;
      if (v146 < v134)
      {
        v9 = v187;
        goto LABEL_198;
      }
    }
    v151 = v112 - 1;
    if (v112 - 1 >= v109)
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    v152 = *v10;
    if (!*v10)
      goto LABEL_247;
    v153 = &v110[16 * v151];
    v154 = *(_QWORD *)v153;
    v155 = v112;
    v156 = &v110[16 * v112];
    v157 = *((_QWORD *)v156 + 1);
    v158 = &v152[56 * *(_QWORD *)v153];
    v191 = &v152[56 * *(_QWORD *)v156];
    v159 = &v152[56 * v157];
    swift_bridgeObjectRetain();
    sub_23C8960E4(v158, v191, v159, v179, v188);
    if (!v185)
    {
      if (v157 < v154)
        goto LABEL_221;
      if (v155 > *((_QWORD *)v187 + 2))
        goto LABEL_222;
      *(_QWORD *)v153 = v154;
      *(_QWORD *)&v110[16 * v151 + 8] = v157;
      v160 = *((_QWORD *)v187 + 2);
      if (v155 >= v160)
        goto LABEL_223;
      v185 = 0;
      v109 = v160 - 1;
      memmove(v156, v156 + 16, 16 * (v160 - 1 - v155));
      v9 = v187;
      *((_QWORD *)v187 + 2) = v160 - 1;
      v140 = v160 > 2;
      a2 = v188;
      v10 = v180;
      if (!v140)
        goto LABEL_198;
      continue;
    }
    break;
  }
  v161 = v173;
LABEL_203:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v161 + 16) = 0;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C895B7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = sub_23C911A18();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

void sub_23C895C40(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = a5;
  v47 = a1;
  if (a3 == a2)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a3;
  v44 = a5 + 7;
  while (2)
  {
    v43 = v7;
    while (1)
    {
      v8 = *a4 + 56 * v7;
      sub_23C896698(v8, (uint64_t)&v46, &qword_25430B370);
      sub_23C896698(v8 - 56, (uint64_t)&v45, &qword_25430B370);
      v9 = sub_23C910E18();
      v11 = v10;
      v12 = v5;
      v13 = v5[2];
      if (!v13)
        break;
      v14 = v9;
      v15 = v5[4] == v9 && v5[5] == v10;
      if (!v15 && (sub_23C911A18() & 1) == 0)
      {
        v26 = v44;
        v27 = 1;
        while (v13 != v27)
        {
          v16 = v27;
          if (*(v26 - 1) != v14 || *v26 != v11)
          {
            v29 = sub_23C911A18();
            v27 = v16 + 1;
            v26 += 2;
            if ((v29 & 1) == 0)
              continue;
          }
          goto LABEL_12;
        }
        break;
      }
      v16 = 0;
LABEL_12:
      v17 = a4;
      swift_bridgeObjectRelease();
      v18 = sub_23C910E18();
      v20 = v19;
      v21 = v12[2];
      if (v21)
      {
        v22 = v18;
        v23 = v12[4] == v18 && v12[5] == v19;
        if (v23 || (sub_23C911A18() & 1) != 0)
        {
          v24 = 0;
LABEL_19:
          swift_bridgeObjectRelease();
          sub_23C7E7900((uint64_t)&v45, &qword_25430B370);
          sub_23C7E7900((uint64_t)&v46, &qword_25430B370);
          v25 = v16 < v24;
          a4 = v17;
          v5 = v12;
          if (!v25)
            goto LABEL_42;
          goto LABEL_38;
        }
        v30 = v44;
        v31 = 1;
        while (v21 != v31)
        {
          v24 = v31;
          if (*(v30 - 1) != v22 || *v30 != v20)
          {
            v33 = sub_23C911A18();
            v31 = v24 + 1;
            v30 += 2;
            if ((v33 & 1) == 0)
              continue;
          }
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)&v45, &qword_25430B370);
      sub_23C7E7900((uint64_t)&v46, &qword_25430B370);
      a4 = v17;
      v5 = v12;
LABEL_38:
      v34 = *a4;
      if (!*a4)
      {
        __break(1u);
        return;
      }
      v35 = (__int128 *)(v34 + 56 * v7);
      v36 = *((_QWORD *)v35 + 6);
      v38 = v35[1];
      v37 = v35[2];
      v39 = *v35;
      v40 = (__int128 *)(v34 + 56 * (v7 - 1));
      v41 = v40[1];
      *v35 = *v40;
      v35[1] = v41;
      v35[2] = v40[2];
      *((_QWORD *)v35 + 6) = *((_QWORD *)v40 + 6);
      *v40 = v39;
      v40[1] = v38;
      v40[2] = v37;
      *((_QWORD *)v40 + 6) = v36;
      if (--v7 == v47)
        goto LABEL_42;
    }
    swift_bridgeObjectRelease();
    sub_23C7E7900((uint64_t)&v45, &qword_25430B370);
    sub_23C7E7900((uint64_t)&v46, &qword_25430B370);
    v5 = v12;
LABEL_42:
    v7 = v43 + 1;
    if (v43 + 1 != a2)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_23C895F2C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_23C8F9018(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v12 - 16;
      v21 = *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v12 - 1) == *((_QWORD *)v6 - 1);
      if (v21 || (sub_23C911A18() & 1) == 0)
      {
        v23 = v19 != v12 || v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_23C8F9018(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (sub_23C911A18() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  v25 = (v12 - v4) / 16;
  if (v6 != v4 || v6 >= &v4[16 * v25])
    memmove(v6, v4, 16 * v25);
  return 1;
}

uint64_t sub_23C8960E4(char *a1, char *a2, char *a3, char *a4, _QWORD *a5)
{
  _QWORD *v5;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v33;
  char *v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char *v60;
  _BOOL4 v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  char v70;
  BOOL v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v76;
  _QWORD *v79;
  unint64_t v80;
  char *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;

  v5 = a5;
  v7 = a3;
  v8 = a2;
  v9 = a1;
  v10 = a2 - a1;
  v11 = (a2 - a1) / 56;
  v12 = a3 - a2;
  v13 = (a3 - a2) / 56;
  if (v11 >= v13)
  {
    sub_23C8F91B8(a2, (a3 - a2) / 56, a4);
    v44 = &a4[56 * v13];
    v15 = a4;
    if (v9 >= v8 || v12 <= 55)
    {
      v14 = v44;
    }
    else
    {
      v79 = v5 + 7;
      v89 = a4;
      v14 = v44;
      v80 = (unint64_t)v9;
      do
      {
        v84 = v7;
        sub_23C896698((uint64_t)(v14 - 56), (uint64_t)&v88, &qword_25430B370);
        v45 = v8 - 56;
        sub_23C896698((uint64_t)(v8 - 56), (uint64_t)&v87, &qword_25430B370);
        v46 = sub_23C910E18();
        v48 = v47;
        v49 = v5[2];
        v82 = v14 - 56;
        if (v49)
        {
          v50 = v46;
          v51 = v5[4] == v46 && v5[5] == v47;
          v86 = v14;
          if (v51 || (sub_23C911A18() & 1) != 0)
          {
            v52 = 0;
LABEL_65:
            swift_bridgeObjectRelease();
            v53 = sub_23C910E18();
            v55 = v54;
            v56 = v5[2];
            if (v56)
            {
              v57 = v53;
              v58 = v5[4] == v53 && v5[5] == v54;
              if (v58 || (sub_23C911A18() & 1) != 0)
              {
                v59 = 0;
LABEL_72:
                v60 = v8;
                swift_bridgeObjectRelease();
                v61 = v52 < v59;
              }
              else
              {
                v67 = v79;
                v68 = 1;
                while (v56 != v68)
                {
                  v59 = v68;
                  if (*(v67 - 1) != v57 || *v67 != v55)
                  {
                    v70 = sub_23C911A18();
                    v68 = v59 + 1;
                    v67 += 2;
                    if ((v70 & 1) == 0)
                      continue;
                  }
                  goto LABEL_72;
                }
                v60 = v8;
                swift_bridgeObjectRelease();
                v61 = 1;
              }
              v62 = a5;
            }
            else
            {
              v62 = v5;
              v60 = v8;
              swift_bridgeObjectRelease();
              v61 = 1;
            }
          }
          else
          {
            v63 = v79;
            v64 = 1;
            while (v49 != v64)
            {
              v52 = v64;
              if (*(v63 - 1) != v50 || *v63 != v48)
              {
                v66 = sub_23C911A18();
                v64 = v52 + 1;
                v63 += 2;
                if ((v66 & 1) == 0)
                  continue;
              }
              goto LABEL_65;
            }
            v62 = v5;
            v60 = v8;
            swift_bridgeObjectRelease();
            v61 = 0;
          }
          v15 = v89;
          v14 = v86;
        }
        else
        {
          v62 = v5;
          v60 = v8;
          swift_bridgeObjectRelease();
          v61 = 0;
        }
        v7 = v84 - 56;
        sub_23C7E7900((uint64_t)&v87, &qword_25430B370);
        sub_23C7E7900((uint64_t)&v88, &qword_25430B370);
        if (v61)
        {
          v71 = v84 != v60 || v7 >= v60;
          v8 -= 56;
        }
        else
        {
          v71 = v84 != v14 || v7 >= v14;
          v14 = v82;
          v45 = v82;
          v8 = v60;
        }
        v5 = v62;
        if (v71)
        {
          v72 = *(_OWORD *)v45;
          v73 = *((_OWORD *)v45 + 1);
          v74 = *((_OWORD *)v45 + 2);
          *((_QWORD *)v84 - 1) = *((_QWORD *)v45 + 6);
          *(_OWORD *)(v84 - 40) = v73;
          *(_OWORD *)(v84 - 24) = v74;
          *(_OWORD *)v7 = v72;
        }
      }
      while (v14 > v15 && (unint64_t)v8 > v80);
    }
  }
  else
  {
    sub_23C8F91B8(a1, (a2 - a1) / 56, a4);
    v14 = &a4[56 * v11];
    v15 = a4;
    if (v8 < v7 && v10 > 55)
    {
      v83 = v5 + 7;
      v85 = &a4[56 * v11];
      while (1)
      {
        sub_23C896698((uint64_t)v8, (uint64_t)&v88, &qword_25430B370);
        v89 = v15;
        sub_23C896698((uint64_t)v15, (uint64_t)&v87, &qword_25430B370);
        v16 = sub_23C910E18();
        v18 = v17;
        v19 = v5[2];
        if (!v19)
          goto LABEL_29;
        v20 = v16;
        v21 = v5[4] == v16 && v5[5] == v17;
        if (!v21 && (sub_23C911A18() & 1) == 0)
          break;
        v22 = 0;
LABEL_12:
        swift_bridgeObjectRelease();
        v23 = sub_23C910E18();
        v25 = v24;
        v26 = v5[2];
        if (!v26)
          goto LABEL_41;
        v27 = v23;
        v28 = a5[4] == v23 && a5[5] == v24;
        if (!v28 && (sub_23C911A18() & 1) == 0)
        {
          v36 = v83;
          v37 = 1;
          while (v26 != v37)
          {
            v29 = v37;
            if (*(v36 - 1) != v27 || *v36 != v25)
            {
              v39 = sub_23C911A18();
              v37 = v29 + 1;
              v36 += 2;
              if ((v39 & 1) == 0)
                continue;
            }
            goto LABEL_19;
          }
LABEL_41:
          swift_bridgeObjectRelease();
          sub_23C7E7900((uint64_t)&v87, &qword_25430B370);
          sub_23C7E7900((uint64_t)&v88, &qword_25430B370);
          v5 = a5;
LABEL_42:
          v21 = v9 == v8;
          v34 = v8;
          v8 += 56;
          v35 = !v21 || v9 >= v8;
          v15 = v89;
          goto LABEL_46;
        }
        v29 = 0;
LABEL_19:
        swift_bridgeObjectRelease();
        sub_23C7E7900((uint64_t)&v87, &qword_25430B370);
        sub_23C7E7900((uint64_t)&v88, &qword_25430B370);
        v5 = a5;
        if (v22 < v29)
          goto LABEL_42;
LABEL_30:
        v34 = v89;
        v15 = v89 + 56;
        v35 = v9 != v89 || v9 >= v15;
LABEL_46:
        v14 = v85;
        if (v35)
        {
          v40 = *(_OWORD *)v34;
          v41 = *((_OWORD *)v34 + 1);
          v42 = *((_OWORD *)v34 + 2);
          *((_QWORD *)v9 + 6) = *((_QWORD *)v34 + 6);
          *((_OWORD *)v9 + 1) = v41;
          *((_OWORD *)v9 + 2) = v42;
          *(_OWORD *)v9 = v40;
        }
        v9 += 56;
        if (v15 >= v85 || v8 >= v7)
          goto LABEL_54;
      }
      v30 = v83;
      v31 = 1;
      while (v19 != v31)
      {
        v22 = v31;
        if (*(v30 - 1) != v20 || *v30 != v18)
        {
          v33 = sub_23C911A18();
          v31 = v22 + 1;
          v30 += 2;
          if ((v33 & 1) == 0)
            continue;
        }
        goto LABEL_12;
      }
LABEL_29:
      swift_bridgeObjectRelease();
      sub_23C7E7900((uint64_t)&v87, &qword_25430B370);
      sub_23C7E7900((uint64_t)&v88, &qword_25430B370);
      goto LABEL_30;
    }
LABEL_54:
    v8 = v9;
  }
  v76 = (v14 - v15) / 56;
  if (v8 != v15 || v8 >= &v15[56 * v76])
    memmove(v8, v15, 56 * v76);
  swift_bridgeObjectRelease();
  return 1;
}

void sub_23C896698(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_23C7E79A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_23C7DB390();
}

uint64_t sub_23C8966D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C896704()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = sub_23C7DF938();
  sub_23C892FE0(v2, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v3, v1.n128_i64[0], v1.n128_i64[1], v4);
}

uint64_t sub_23C896730(uint64_t a1)
{
  if (swift_isClassType())
    return a1;
  else
    return 0;
}

void sub_23C89675C(uint64_t a1@<X8>)
{
  sub_23C89457C(a1);
}

uint64_t sub_23C89679C(uint64_t a1)
{
  return sub_23C894488(a1);
}

void *sub_23C8967B0(uint64_t a1, const void *a2)
{
  void *v2;

  return memcpy(v2, a2, 0xB8uLL);
}

uint64_t sub_23C8967BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_23C8967DC()
{
  return sub_23C8011F0((uint64_t)&STACK[0x310]);
}

uint64_t sub_23C8967E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23C8967F8()
{
  return sub_23C8946A8((__n128 *)&STACK[0x258]);
}

uint64_t destroy for DatabaseSchemaCache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DatabaseSchemaCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DatabaseSchemaCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DatabaseSchemaCache(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseSchemaCache()
{
  return &type metadata for DatabaseSchemaCache;
}

uint64_t sub_23C8969C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C8969D0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23C896A28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if (sub_23C7DE718((uint64_t)a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    sub_23C7DE70C((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_23C896AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C7DE718(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return result;
}

void *sub_23C896B44(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_23C7DE718((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    sub_23C7DE70C((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23C896BD4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_23C7DE718((uint64_t)a1, 1, v5);
  v7 = sub_23C7DE718((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      sub_23C7DE70C((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_23C896CAC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_23C7DE718((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    sub_23C7DE70C((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23C896D3C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = sub_23C7DE718((uint64_t)a1, 1, v5);
  v7 = sub_23C7DE718((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      sub_23C7DE70C((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_23C896E14(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 > v7)
  {
    v10 = 8 * v8;
    if (v8 > 3)
      goto LABEL_8;
    v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v8);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v8 > 3)
          v13 = 0;
        if ((_DWORD)v8)
        {
          if (v8 > 3)
            LODWORD(v8) = 4;
          __asm { BR              X12 }
        }
        return v7 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v15 = sub_23C7DE718(a1, v6, v4);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_23C896F40(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8 * v11;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        v6 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v15 > 1;
      }
    }
    else
    {
      v6 = 1u;
    }
  }
  if (v9 < a2)
  {
    v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_23C8970D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23C8970DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_23C897100(uint64_t a1, uint64_t a2)
{
  return sub_23C7DE718(a1, 1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_23C89710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C7DE70C(a1, a2, 1, *(_QWORD *)(a3 + 16));
}

uint64_t type metadata accessor for DatabaseSchemaCache.Presence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatabaseSchemaCache.Presence);
}

uint64_t DatabaseSnapshot.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C84AB34(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) + OBJC_IVAR____TtC12GRDBInternal8Database_configuration, a1);
}

_QWORD *sub_23C897144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];
  uint64_t v21;

  v20[2] = a7;
  v20[0] = *v7;
  v20[1] = a6;
  v11 = type metadata accessor for Configuration();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v20 - v15;
  type metadata accessor for DatabasePool();
  v21 = a3;
  sub_23C8CB984(a3, (uint64_t)v16);
  v16[41] = 1;
  sub_23C84AB34((uint64_t)v16, (uint64_t)v14);
  type metadata accessor for SerializedDatabase();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v17 = v20[3];
  v18 = sub_23C8D21C8();
  if (v17)
  {
    swift_bridgeObjectRelease();
    sub_23C84AB78(v21);
    sub_23C84AB78((uint64_t)v16);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v7[2] = v18;
    MEMORY[0x24BDAC7A8](v18);
    v20[-2] = a1;
    v20[-1] = a2;
    sub_23C8A4EEC((uint64_t)sub_23C8977C0, (uint64_t)&v20[-4]);
    swift_bridgeObjectRelease();
    sub_23C84AB78(v21);
    sub_23C84AB78((uint64_t)v16);
  }
  return v7;
}

void sub_23C897314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v2 = sub_23C8CB844(a1, 0xD000000000000013, 0x800000023C91EC60, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], (uint64_t)v10);
  v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7D9F34((uint64_t)v10);
  if (!v1)
  {
    if (!v4)
    {
LABEL_8:
      *(_QWORD *)&v10[0] = 0;
      *((_QWORD *)&v10[0] + 1) = 0xE000000000000000;
      sub_23C911634();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v10[0] = 0xD000000000000023;
      *((_QWORD *)&v10[0] + 1) = 0x800000023C91EC80;
      sub_23C910F5C();
      v7 = v10[0];
      sub_23C7EF5D4();
      swift_allocError();
      *(_DWORD *)v8 = 1;
      *(_OWORD *)(v8 + 8) = v7;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_BYTE *)(v8 + 56) = 0;
      swift_willThrow();
      return;
    }
    if (v2 == 7102839 && v4 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = sub_23C911A18();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_8;
    }
    LOBYTE(v10[0]) = 0;
    Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)v10);
    if (!v9)
    {
      sub_23C7DF68C(0xD00000000000002ALL, 0x800000023C91ECB0);
      v10[0] = 0uLL;
      sub_23C8DFF18((uint64_t *)v10);
      swift_release();
      sub_23C8EFE00();
      swift_release();
    }
  }
}

uint64_t DatabaseSnapshot.deinit()
{
  uint64_t v0;

  sub_23C7E8588();
  swift_release();
  return v0;
}

void sub_23C89756C(BOOL *a1@<X8>)
{
  void *v2;

  Database.commit()();
  if (v2)

  *a1 = v2 != 0;
}

uint64_t DatabaseSnapshot.__deallocating_deinit()
{
  sub_23C7E8588();
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseSnapshot.close()()
{
  sub_23C8A4EEC((uint64_t)sub_23C88E760, 0);
  sub_23C7DE9A8();
}

void sub_23C89761C()
{
  DatabaseSnapshot.close()();
}

Swift::Void __swiftcall DatabaseSnapshot.interrupt()()
{
  sub_23C8D1ADC();
}

void sub_23C897654()
{
  DatabaseSnapshot.unsafeRead<A>(_:)();
}

uint64_t DatabaseSnapshot.asyncRead(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C88E9B4(a1, a2, (uint64_t)&unk_250D8DB00, (uint64_t)sub_23C8977F0);
}

void DatabaseSnapshot.unsafeRead<A>(_:)()
{
  sub_23C7DDEE4();
  sub_23C7DE9A8();
}

uint64_t DatabaseSnapshot.asyncUnsafeRead(_:)(uint64_t a1, uint64_t a2)
{
  return sub_23C88E9B4(a1, a2, (uint64_t)&unk_250D8DB28, (uint64_t)sub_23C897770);
}

void sub_23C8976B4()
{
  DatabaseSnapshot.unsafeReentrantRead<A>(_:)();
}

void DatabaseSnapshot.unsafeReentrantRead<A>(_:)()
{
  sub_23C8D201C();
  sub_23C7DE9A8();
}

void DatabaseSnapshot._add<A>(observation:scheduling:onChange:)(_QWORD *a1@<X1>, void (*a2)(char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t *v6;

  sub_23C8CFC88(a1, a2, a3, *v6, a4, (uint64_t)&protocol witness table for DatabaseSnapshot, a5, a6);
}

uint64_t sub_23C89774C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C897770(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, 0);
}

uint64_t type metadata accessor for DatabaseSnapshot()
{
  return objc_opt_self();
}

uint64_t method lookup function for DatabaseSnapshot()
{
  return swift_lookUpClassMethod();
}

void sub_23C8977C0(uint64_t a1)
{
  sub_23C897314(a1);
}

void DatabaseSnapshot.read<A>(_:)()
{
  DatabaseSnapshot.unsafeRead<A>(_:)();
}

uint64_t HasManyThroughAssociation._sqlAssociation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t HasManyThroughAssociation._sqlAssociation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*HasManyThroughAssociation._sqlAssociation.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C897838(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23C897864(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_23C897898(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HasManyThroughAssociation._sqlAssociation.modify();
  return sub_23C801E38;
}

uint64_t sub_23C8978DC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_23C897908(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242626100](&protocol conformance descriptor for HasManyThroughAssociation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HasManyThroughAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HasManyThroughAssociation);
}

void sub_23C897940()
{
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

void sub_23C8979CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a6;
  v23 = a5;
  v20 = a1;
  v21 = a2;
  swift_getAssociatedTypeWitness();
  v9 = sub_23C7EE2E8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE944();
  MEMORY[0x24BDAC7A8](v15);
  sub_23C7DE95C();
  v18 = v17 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17 - v16, v6, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v6, v20, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v21, v9);
  sub_23C897D3C(v18, a3, v22);
}

void sub_23C897AF0()
{
  sub_23C7DBCB0();
}

void sub_23C897AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v20 = a1;
  v21 = a4;
  v19 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  sub_23C7DE95C();
  v18 = v7 - v6;
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 24);
  sub_23C7DC5E0();
  v17 = sub_23C7EE2E8();
  v11 = MEMORY[0x24BDAC7A8](v17);
  v16[1] = (char *)v16 - v12;
  MEMORY[0x24BDAC7A8](v11);
  sub_23C7DE95C();
  v13 = *(_QWORD *)(a2 + 16);
  MEMORY[0x24BDAC7A8](v14);
  sub_23C7DE944();
  v15 = *(_QWORD *)(a2 + 32);
  v22 = v13;
  v23 = v10;
  v24 = a3;
  v25 = v15;
  v26 = v9;
  v27 = v21;
  type metadata accessor for ReceiveValuesOnSubscription();
}

void sub_23C897C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v11 = *(_QWORD *)(v9 - 168);
  v10(v0, v11, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v11 + *(int *)(v4 + 52), v5);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v1 + 16))(*(_QWORD *)(v9 - 184), v11 + *(int *)(v4 + 56), *(_QWORD *)(v9 - 176));
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v9 - 152) + 16))(*(_QWORD *)(v9 - 160), *(_QWORD *)(v9 - 144), v6);
  sub_23C897CDC();
}

void sub_23C897C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 96) = MEMORY[0x242626100](&unk_23C917C18, v1);
  *(_QWORD *)(v2 - 128) = a1;
  sub_23C910C5C();
  _s12GRDBInternal13DatabaseEventVwxx_0(v2 - 128);
  sub_23C7DBCB0();
}

void sub_23C897CDC()
{
  swift_allocObject();
  sub_23C897F3C();
}

void sub_23C897D3C(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ReceiveValuesOn();
}

uint64_t sub_23C897DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + *(int *)(a1 + 52), v3, v2);
  v6 = v4 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void sub_23C897E28(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C897E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  v7 = sub_23C9114E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + *(int *)(a1 + 72), v2, v1);
}

void sub_23C897F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C897AFC(a1, a4, a2, a3);
}

void sub_23C897F3C()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C897F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)(v12 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&a9 - v13;
  v15 = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v9 + v15) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  sub_23C897E28(*(_QWORD *)(v12 - 168), v10, (uint64_t)v14);
}

void sub_23C898008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 32))(v9, *(_QWORD *)(v8 - 136), v0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 144) + 32))(v10, v7, v6);
  *(_QWORD *)(v8 - 128) = v0;
  *(_QWORD *)(v8 - 120) = v2;
  *(_QWORD *)(v8 - 112) = v3;
  *(_QWORD *)(v8 - 104) = v4;
  v11 = *(_QWORD *)(v8 - 176);
  *(_QWORD *)(v8 - 96) = v5;
  *(_QWORD *)(v8 - 88) = v11;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C898084()
{
  uint64_t v0;

  swift_storeEnumTagMultiPayload();
  return v0;
}

id sub_23C8980B8()
{
  return sub_23C8C411C((uint64_t)sub_23C825B94, 0);
}

void sub_23C898108()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C898158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v15 - 192) = a1;
  *(_QWORD *)(v15 - 168) = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 216) = (char *)&a9 - v17;
  v18 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v15 - 200) = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v15 - 272) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v15 - 208) = (char *)&a9 - v21;
  *(_QWORD *)(v15 - 136) = v13;
  *(_QWORD *)(v15 - 128) = v9;
  *(_QWORD *)(v15 - 240) = v10;
  *(_QWORD *)(v15 - 232) = v9;
  *(_QWORD *)(v15 - 256) = v12;
  *(_QWORD *)(v15 - 248) = v11;
  *(_QWORD *)(v15 - 120) = v11;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 104) = v10;
  *(_QWORD *)(v15 - 96) = v14;
  *(_QWORD *)(v15 - 264) = v14;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C89820C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v10 + 128);
  *(_QWORD *)(v11 - 224) = v9;
  v20 = v9 + v19;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v20, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_23C8982DC + dword_23C89864C[EnumCaseMultiPayload]))();
}

uint64_t sub_23C8982EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)();

  sub_23C88E0F8(**(_QWORD **)(v8 - 184), *(_QWORD *)(*(_QWORD *)(v8 - 184) + 8));
  v9 = *(_QWORD *)(v8 - 192);
  *(_QWORD *)(v8 - 216) = v2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 32);
  v10(*(_QWORD *)(v8 - 208), v2, v4);
  v11 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 168) + 32))(v6, *(_QWORD *)(v8 - 216), v9);
  *(_QWORD *)(v6 + v11) = *(_QWORD *)(v8 - 176);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v6, v3);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 40))(v5, v1, v3);
  swift_endAccess();
  v12 = *(_QWORD *)(v8 - 272);
  v10(v12, *(_QWORD *)(v8 - 208), v4);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 200) + 80);
  v14 = (v13 + 64) & ~v13;
  v15 = (void (*)())swift_allocObject();
  v16 = *(_QWORD *)(v8 - 232);
  *((_QWORD *)v15 + 2) = v4;
  *((_QWORD *)v15 + 3) = v16;
  v17 = *(_QWORD *)(v8 - 256);
  *((_QWORD *)v15 + 4) = *(_QWORD *)(v8 - 248);
  *((_QWORD *)v15 + 5) = v17;
  v18 = *(_QWORD *)(v8 - 264);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(v8 - 240);
  *((_QWORD *)v15 + 7) = v18;
  v10((uint64_t)v15 + v14, v12, v4);
  *(_QWORD *)((char *)v15 + ((v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = *(_QWORD *)(v8 - 224);
  v19 = *(void (***)())(v8 - 184);
  *v19 = sub_23C89F014;
  v19[1] = v15;
  return swift_retain();
}

void sub_23C89865C()
{
  type metadata accessor for ReceiveValuesOnSubscription();
}

uint64_t sub_23C8986A8(uint64_t a1)
{
  MEMORY[0x242626100](&unk_23C917BC0, a1);
  return sub_23C910CF8();
}

id sub_23C8986EC()
{
  return sub_23C8C411C((uint64_t)sub_23C826280, 0);
}

void sub_23C89872C()
{
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C89877C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;

  v13 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v11 - 200) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&a9 - v15;
  v17 = *(_QWORD *)(v10 + 128);
  v19 = v18;
  v20 = v9 + v17;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v20, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23C898828 + 4 * byte_23C917A40[EnumCaseMultiPayload]))();
}

void sub_23C898828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v0;
  *(_QWORD *)(v6 - 112) = v1;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v4;
  *(_QWORD *)(v6 - 88) = v3;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C898840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2 + *(int *)(TupleTypeMetadata2 + 48), a1);
  v9 = *(_QWORD *)(v6 - 200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v3, v9, v1);
  return swift_endAccess();
}

id sub_23C898A04()
{
  return sub_23C8C411C((uint64_t)sub_23C898A54, 0);
}

unint64_t sub_23C898A54()
{
  return 0xD000000000000016;
}

void sub_23C898A70()
{
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C898AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v11 - 192) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&a9 - v17;
  v19 = v9 + *(_QWORD *)(v10 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v19, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)&loc_23C898B78 + dword_23C898DFC[EnumCaseMultiPayload]))();
}

void sub_23C898B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C88E0F8(**(_QWORD **)(v4 - 160), *(_QWORD *)(*(_QWORD *)(v4 - 160) + 8));
  *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v2;
  v5 = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v4 - 96) = v1;
  *(_QWORD *)(v4 - 88) = v5;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C898BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t (**v14)();

  v8 = *(_QWORD *)(v1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  sub_23C7DDB10(qword_256BCD230);
  v9 = v4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v4, v1, a1);
  v10 = *(_QWORD *)(v6 - 168);
  sub_23C7EFC04(v10, v9);
  swift_storeEnumTagMultiPayload();
  v11 = *(_QWORD *)(v6 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v11, v4, v2);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v3, v11, v2);
  swift_endAccess();
  sub_23C7EFC04(v10, v6 - 128);
  v12 = swift_allocObject();
  result = sub_23C7DB5CC((__int128 *)(v6 - 128), v12 + 16);
  *(_QWORD *)(v12 + 56) = v8;
  v14 = *(uint64_t (***)())(v6 - 160);
  *v14 = sub_23C89EF64;
  v14[1] = (uint64_t (*)())v12;
  return result;
}

void sub_23C898D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v1;
  *(_QWORD *)(v4 - 88) = v5;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C898D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1 + *(int *)(TupleTypeMetadata2 + 48), a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 - 176) - 8) + 8))(v1);
  __break(1u);
  JUMPOUT(0x23C898DFCLL);
}

uint64_t sub_23C898E0C(_QWORD *a1)
{
  sub_23C7E7E34(a1, a1[3]);
  return sub_23C910CBC();
}

uint64_t sub_23C898E50(_QWORD *a1)
{
  sub_23C7E7E34(a1, a1[3]);
  return sub_23C910C74();
}

uint64_t sub_23C898E84()
{
  sub_23C8C411C((uint64_t)sub_23C8263E0, 0);
  return sub_23C910CA4();
}

void sub_23C898ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11[8] = a3;
  v13 = a1;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[3] = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)v11 - v6;
  v7 = v3[11];
  v8 = v3[12];
  v9 = v3[14];
  v10 = v3[15];
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v4;
  v20 = v9;
  v21 = v10;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C898F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 - 144) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 240) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 136) = v10;
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 208) = v11;
  *(_QWORD *)(v15 - 200) = v9;
  *(_QWORD *)(v15 - 224) = v13;
  *(_QWORD *)(v15 - 216) = v14;
  *(_QWORD *)(v15 - 120) = v13;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 104) = v9;
  *(_QWORD *)(v15 - 96) = v14;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C898FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v11 - 168) = v10;
  v17 = v10 + v16;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23C899064 + 4 * byte_23C917A44[EnumCaseMultiPayload]))();
}

uint64_t sub_23C899064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v4 = *(_QWORD *)(v3 - 144);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1 + *(int *)(TupleTypeMetadata2 + 48), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

void sub_23C8991F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v18[8] = a3;
  v18[9] = a2;
  v4 = *(_QWORD **)a2;
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = v4[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v18[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18[6] = v6;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18[4] = (char *)v18 - v7;
  v8 = v4[11];
  v18[0] = v4[14];
  v9 = v18[0];
  swift_getAssociatedTypeWitness();
  v10 = sub_23C9114E4();
  v11 = *(_QWORD *)(v10 - 8);
  v18[2] = v10;
  v18[3] = v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v18[1] = (char *)v18 - v13;
  v18[7] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v16 = v4[12];
  v17 = v4[15];
  v21 = v5;
  v22 = v8;
  v23 = v16;
  v24 = v19;
  v25 = v9;
  v26 = v17;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C899354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v4 + *(int *)(a1 + 68), v5);
  v11 = *(_QWORD *)(v10 - 192);
  v12 = *(_QWORD *)(v10 - 184);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v12 + 16))(v11, *(_QWORD *)(v10 - 160), *(_QWORD *)(v10 - 136));
  v13 = (*(unsigned __int8 *)(v12 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v9;
  *((_QWORD *)v14 + 3) = v3;
  v16 = *(_QWORD *)(v10 - 144);
  v15 = *(_QWORD *)(v10 - 136);
  *((_QWORD *)v14 + 4) = v8;
  *((_QWORD *)v14 + 5) = v16;
  *((_QWORD *)v14 + 6) = *(_QWORD *)(v10 - 224);
  *((_QWORD *)v14 + 7) = v7;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(v10 - 152);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v14[v13], v11, v15);
  swift_retain();
  v17 = *(_QWORD *)(v10 - 216);
  sub_23C910D10();
  swift_release();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 200) + 8))(v17, *(_QWORD *)(v10 - 208));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 168) + 8))(v2, v3);
}

id sub_23C89944C(uint64_t a1)
{
  return sub_23C899E10(a1, (uint64_t)sub_23C899460);
}

unint64_t sub_23C899460()
{
  return 0xD000000000000014;
}

void sub_23C89947C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11[8] = a3;
  v13 = a1;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v15 = sub_23C910C80();
  v12 = *(_QWORD *)(v15 - 8);
  v11[3] = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v14 = (char *)v11 - v6;
  v7 = v3[11];
  v8 = v3[12];
  v9 = v3[14];
  v10 = v3[15];
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v4;
  v20 = v9;
  v21 = v10;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C899560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 - 144) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 240) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 136) = v10;
  *(_QWORD *)(v15 - 128) = v12;
  *(_QWORD *)(v15 - 208) = v12;
  *(_QWORD *)(v15 - 200) = v9;
  *(_QWORD *)(v15 - 224) = v13;
  *(_QWORD *)(v15 - 216) = v14;
  *(_QWORD *)(v15 - 120) = v13;
  *(_QWORD *)(v15 - 112) = v11;
  *(_QWORD *)(v15 - 104) = v9;
  *(_QWORD *)(v15 - 96) = v14;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C8995B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v11 - 168) = v10;
  v17 = v10 + v16;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23C89963C + 4 * byte_23C917A48[EnumCaseMultiPayload]))();
}

uint64_t sub_23C89963C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v4 = *(_QWORD *)(v3 - 144);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1 + *(int *)(TupleTypeMetadata2 + 48), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

void sub_23C8997CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v23 = a3;
  v24 = a2;
  v4 = *(_QWORD **)a2;
  v25 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = v4[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = sub_23C910C80();
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  v21 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)v18 - v7;
  v9 = v4[11];
  v18[0] = v4[14];
  v8 = v18[0];
  swift_getAssociatedTypeWitness();
  v10 = sub_23C9114E4();
  v11 = *(_QWORD *)(v10 - 8);
  v18[2] = v10;
  v18[3] = v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v18[1] = (char *)v18 - v13;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v16 = v4[12];
  v17 = v4[15];
  v27 = v5;
  v28 = v9;
  v29 = v16;
  v30 = v25;
  v31 = v8;
  v32 = v17;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C899964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v8 + *(int *)(a1 + 68), v3);
  v11 = *(_QWORD *)(v10 - 192);
  v12 = *(_QWORD *)(v10 - 184);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v11 + 16))(*(_QWORD *)(v10 - 136), *(_QWORD *)(v10 - 160), v12);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v7;
  *((_QWORD *)v14 + 3) = v4;
  v16 = *(_QWORD *)(v10 - 144);
  v15 = *(_QWORD *)(v10 - 136);
  *((_QWORD *)v14 + 4) = v9;
  *((_QWORD *)v14 + 5) = v16;
  *((_QWORD *)v14 + 6) = *(_QWORD *)(v10 - 224);
  *((_QWORD *)v14 + 7) = v1;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(v10 - 152);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v14[v13], v15, v12);
  swift_retain();
  v17 = *(_QWORD *)(v10 - 216);
  sub_23C910D10();
  swift_release();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 200) + 8))(v17, *(_QWORD *)(v10 - 208));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 168) + 8))(v2, v4);
}

id sub_23C899A5C(uint64_t a1)
{
  return sub_23C899E10(a1, (uint64_t)sub_23C899A70);
}

uint64_t sub_23C899A70()
{
  return 0x657669656365725FLL;
}

void sub_23C899A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[10];
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11[9] = a3;
  v13 = a1;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[4] = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)v11 - v6;
  v7 = v3[11];
  v8 = v3[12];
  v9 = v3[14];
  v10 = v3[15];
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v4;
  v20 = v9;
  v21 = v10;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C899B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 - 144) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 136) = v10;
  *(_QWORD *)(v15 - 128) = v12;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v9;
  *(_QWORD *)(v15 - 216) = v14;
  *(_QWORD *)(v15 - 208) = v13;
  *(_QWORD *)(v15 - 120) = v14;
  *(_QWORD *)(v15 - 112) = v11;
  *(_QWORD *)(v15 - 104) = v9;
  *(_QWORD *)(v15 - 96) = v13;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C899B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&a9 - v13;
  v15 = v9 + *(_QWORD *)(v10 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23C899C18 + 4 * byte_23C917A4C[EnumCaseMultiPayload]))();
}

uint64_t sub_23C899C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v4 = *(_QWORD *)(v3 - 144);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + *(int *)(TupleTypeMetadata2 + 48), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_23C899D8C()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C899DCC()
{
  return sub_23C910C68();
}

id sub_23C899DFC(uint64_t a1)
{
  return sub_23C899E10(a1, (uint64_t)sub_23C899E54);
}

id sub_23C899E10(uint64_t a1, uint64_t a2)
{
  return sub_23C8C411C(a2, 0);
}

unint64_t sub_23C899E54()
{
  return 0xD000000000000015;
}

void sub_23C899E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[12];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v13 = a3;
  v15 = a1;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = sub_23C910C80();
  v12 = *(_QWORD *)(v14 - 8);
  v11[6] = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v11[11] = (char *)v11 - v6;
  v7 = v3[11];
  v8 = v3[12];
  v9 = v3[14];
  v10 = v3[15];
  v16 = v5;
  v17 = v7;
  v18 = v8;
  v19 = v4;
  v20 = v9;
  v21 = v10;
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

void sub_23C899F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 176) = a1;
  *(_QWORD *)(v15 - 168) = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 136) = v9;
  *(_QWORD *)(v15 - 128) = v12;
  *(_QWORD *)(v15 - 232) = v12;
  *(_QWORD *)(v15 - 224) = v11;
  *(_QWORD *)(v15 - 248) = v14;
  *(_QWORD *)(v15 - 240) = v13;
  *(_QWORD *)(v15 - 120) = v14;
  *(_QWORD *)(v15 - 112) = v10;
  *(_QWORD *)(v15 - 104) = v11;
  *(_QWORD *)(v15 - 96) = v13;
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C899FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;

  v12 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&a9 - v14;
  v16 = v9 + *(_QWORD *)(v10 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v16, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23C89A06C + 4 * byte_23C917A50[EnumCaseMultiPayload]))();
}

uint64_t sub_23C89A06C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;

  v3 = *(_QWORD *)(v2 - 176);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1 + *(int *)(TupleTypeMetadata2 + 48), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void sub_23C89A280()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C89A2C0()
{
  return sub_23C910C50();
}

void sub_23C89A2F0()
{
  type metadata accessor for ReceiveValuesOnSubscription.State();
}

uint64_t sub_23C89A328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);

  return v2;
}

void sub_23C89A360()
{
  sub_23C89A2F0();
}

uint64_t sub_23C89A36C()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for ReceiveValuesOnSubscription()
{
  JUMPOUT(0x24262607CLL);
}

void type metadata accessor for ReceiveValuesOnSubscription.State()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C89A398()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C89A3A0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    type metadata accessor for ReceiveValuesOnSubscription.Target();
  return result;
}

_QWORD *sub_23C89A490(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *);
  unint64_t v38;
  unint64_t v39;
  void *v40;
  const void *v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *);
  _QWORD *v45;
  void *v46;
  const void *v47;
  size_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *);
  _QWORD *v52;
  void *v53;
  const void *v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  size_t __n;
  uint64_t AssociatedTypeWitness;

  v6 = a3[3];
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12;
  v14 = a3[4];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v12 | v10 | v16;
  v18 = (v12 | v10 | v16);
  v19 = v8 + v18;
  v20 = (v8 + v18) & ~v18;
  v21 = *(_QWORD *)(v9 + 64) + v12;
  if (*(_DWORD *)(v11 + 84))
    v22 = *(_QWORD *)(v11 + 64);
  else
    v22 = *(_QWORD *)(v11 + 64) + 1;
  v23 = ((v22 + v16 + (v21 & ~(unint64_t)v12)) & ~(unint64_t)v16)
      + *(_QWORD *)(v15 + 64);
  v24 = v23 + v20;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v25 + 8 > v23 + v20)
    v24 = v25 + 8;
  v26 = v25 + 40;
  if (v26 <= v24)
    v27 = v24;
  else
    v27 = v26;
  v28 = *(_DWORD *)(v7 + 80) | v17;
  if ((v28 & 0x1000F8) != 0 || v27 + 1 > 0x18)
  {
    v30 = *a2;
    *a1 = *a2;
    v31 = (_QWORD *)(v30 + (((v28 & 0xF8 | 7u) + 16) & ~(unint64_t)(v28 & 0xF8 | 7u)));
    swift_retain();
    return v31;
  }
  v32 = *((unsigned __int8 *)a2 + v27);
  v33 = a2;
  if (v32 >= 3)
  {
    if (v27 <= 3)
      v34 = v27;
    else
      v34 = 4;
    __asm { BR              X14 }
  }
  __n = v22;
  v35 = ~v13;
  if (v32 == 2)
  {
    v42 = ~(unint64_t)v16;
    v43 = *(_DWORD *)(v15 + 80);
    v64 = *(_QWORD *)(v14 - 8);
    v67 = v14;
    v70 = v27;
    v44 = *(void (**)(_QWORD *))(v9 + 16);
    v31 = a1;
    v45 = v33;
    v44(a1);
    v46 = (void *)(((unint64_t)a1 + v21) & v35);
    v47 = (const void *)(((unint64_t)v45 + v21) & v35);
    if (sub_23C7DE718((uint64_t)v47, 1, AssociatedTypeWitness))
    {
      v48 = __n;
      memcpy(v46, v47, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v46, v47, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v46, 0, 1, AssociatedTypeWitness);
      v48 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v64 + 16))(((unint64_t)v46 + v43 + v48) & v42, ((unint64_t)v47 + v43 + v48) & v42, v67);
    v56 = ((unint64_t)v31 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v57 = ((unint64_t)v45 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = *(_QWORD *)(v57 + 24);
    *(_QWORD *)(v56 + 24) = v58;
    *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
    (**(void (***)(void))(v58 - 8))();
    v59 = 2;
    goto LABEL_34;
  }
  if (v32 == 1)
  {
    v49 = ~(unint64_t)v16;
    v50 = *(_DWORD *)(v15 + 80);
    v65 = *(_QWORD *)(v14 - 8);
    v68 = v14;
    v70 = v27;
    v51 = *(void (**)(_QWORD *))(v9 + 16);
    v31 = a1;
    v52 = v33;
    v51(a1);
    v53 = (void *)(((unint64_t)a1 + v21) & v35);
    v54 = (const void *)(((unint64_t)v52 + v21) & v35);
    if (sub_23C7DE718((uint64_t)v54, 1, AssociatedTypeWitness))
    {
      v55 = __n;
      memcpy(v53, v54, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v53, v54, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v53, 0, 1, AssociatedTypeWitness);
      v55 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v65 + 16))(((unint64_t)v53 + v50 + v55) & v49, ((unint64_t)v54 + v50 + v55) & v49, v68);
    *(_QWORD *)(((unint64_t)v31 + v23 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v52 + v23 + 7) & 0xFFFFFFFFFFFFF8);
    v59 = 1;
LABEL_34:
    *((_BYTE *)v31 + v70) = v59;
    return v31;
  }
  v61 = v22 + v16;
  v62 = ~(unint64_t)v16;
  v63 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  v69 = v27;
  v36 = ~v18;
  v37 = *(void (**)(_QWORD *))(v7 + 16);
  v31 = a1;
  v37(a1);
  v38 = ((unint64_t)a1 + v19) & v36;
  v39 = ((unint64_t)a2 + v19) & v36;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v38, v39, v6);
  v40 = (void *)((v21 + v38) & v35);
  v41 = (const void *)((v21 + v39) & v35);
  if (sub_23C7DE718((uint64_t)v41, 1, AssociatedTypeWitness))
  {
    memcpy(v40, v41, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v40, v41, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v40, 0, 1, AssociatedTypeWitness);
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v63 + 16))(((unint64_t)v40 + v61) & v62, ((unint64_t)v41 + v61) & v62, v66);
  *((_BYTE *)v31 + v69) = 0;
  return v31;
}

uint64_t sub_23C89A944(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedTypeWitness;

  v4 = a2[3];
  v39 = a2[2];
  v38 = *(_QWORD *)(v39 - 8);
  v5 = *(_QWORD *)(v38 + 64);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = a2[4];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13;
  v15 = (v9 | v7 | v13);
  v16 = v5 + v15;
  v17 = *(_QWORD *)(v6 + 64) + v9;
  if (*(_DWORD *)(v8 + 84))
    v18 = *(_QWORD *)(v8 + 64);
  else
    v18 = *(_QWORD *)(v8 + 64) + 1;
  v19 = ((v17 & ~(unint64_t)v9) + v13 + v18) & ~(unint64_t)v13;
  v20 = *(_QWORD *)(v12 + 64);
  v21 = v19 + v20 + ((v5 + v15) & ~v15);
  v22 = (v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v22 + 8 > v21)
    v21 = v22 + 8;
  v23 = v22 + 40;
  if (v23 <= v21)
    v23 = v21;
  v24 = *(unsigned __int8 *)(a1 + v23);
  if (v24 >= 3)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X15 }
  }
  v26 = ~v10;
  if (v24 == 2)
  {
    v40 = v19;
    v31 = v18;
    v42 = v11;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
    v32 = (v17 + a1) & v26;
    if (!sub_23C7DE718(v32, 1, AssociatedTypeWitness))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))((v31 + v14 + v32) & ~v14, v42);
    return _s12GRDBInternal13DatabaseEventVwxx_0((a1 + v20 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else if (v24 == 1)
  {
    v33 = *(_QWORD *)(v8 + 64);
    v43 = v11;
    v34 = *(_DWORD *)(v8 + 84);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
    v35 = (v17 + a1) & v26;
    if (!sub_23C7DE718(v35, 1, AssociatedTypeWitness))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v35, AssociatedTypeWitness);
    if (v34)
      v36 = v33 + v14;
    else
      v36 = v33 + 1 + v14;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))((v36 + v35) & ~v14, v43);
  }
  else
  {
    v41 = v11;
    v37 = v18;
    v27 = ~v15;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a1, v39);
    v28 = (v16 + a1) & v27;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v28, v4);
    v29 = (v17 + v28) & v26;
    if (!sub_23C7DE718(v29, 1, AssociatedTypeWitness))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))((v37 + v14 + v29) & ~v14, v41);
  }
}

uint64_t sub_23C89AC88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void *v39;
  const void *v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  size_t __n;
  uint64_t AssociatedTypeWitness;

  v5 = a3[3];
  v48 = a3[2];
  v6 = *(_QWORD *)(v48 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = a3[4];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15;
  v17 = (v11 | v9 | v15);
  v18 = v7 + v17;
  v19 = (v7 + v17) & ~v17;
  v20 = *(_QWORD *)(v8 + 64) + v11;
  if (*(_DWORD *)(v10 + 84))
    v21 = *(_QWORD *)(v10 + 64);
  else
    v21 = *(_QWORD *)(v10 + 64) + 1;
  v22 = ((v21 + v15 + (v20 & ~(unint64_t)v11)) & ~(unint64_t)v15)
      + *(_QWORD *)(v14 + 64);
  v23 = v22 + v19;
  v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v24 + 8 > v22 + v19)
    v23 = v24 + 8;
  v25 = v24 + 40;
  if (v25 <= v23)
    v26 = v23;
  else
    v26 = v25;
  v27 = *(unsigned __int8 *)(a2 + v26);
  if (v27 >= 3)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X14 }
  }
  __n = v21;
  v29 = ~v12;
  if (v27 == 2)
  {
    v51 = *(_QWORD *)(v13 - 8);
    v54 = v13;
    v57 = v26;
    v35 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v5);
    v36 = (void *)((v20 + a1) & v29);
    v37 = (const void *)((v20 + a2) & v29);
    if (sub_23C7DE718((uint64_t)v37, 1, AssociatedTypeWitness))
    {
      v38 = __n;
      memcpy(v36, v37, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v36, v37, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v36, 0, 1, AssociatedTypeWitness);
      v38 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))(((unint64_t)v36 + v16 + v38) & ~v16, ((unint64_t)v37 + v16 + v38) & ~v16, v54);
    v42 = (a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (a2 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = *(_QWORD *)(v43 + 24);
    *(_QWORD *)(v42 + 24) = v44;
    *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
    (**(void (***)(void))(v44 - 8))();
    v45 = 2;
    goto LABEL_28;
  }
  if (v27 == 1)
  {
    v52 = *(_QWORD *)(v13 - 8);
    v55 = v13;
    v57 = v26;
    v35 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v5);
    v39 = (void *)((v20 + a1) & v29);
    v40 = (const void *)((v20 + a2) & v29);
    if (sub_23C7DE718((uint64_t)v40, 1, AssociatedTypeWitness))
    {
      v41 = __n;
      memcpy(v39, v40, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v39, v40, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v39, 0, 1, AssociatedTypeWitness);
      v41 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 16))(((unint64_t)v39 + v16 + v41) & ~v16, ((unint64_t)v40 + v16 + v41) & ~v16, v55);
    *(_QWORD *)((a1 + v22 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v22 + 7) & 0xFFFFFFFFFFFFF8);
    v45 = 1;
LABEL_28:
    *(_BYTE *)(v35 + v57) = v45;
    return v35;
  }
  v47 = v21 + v15;
  v49 = ~(unint64_t)v15;
  v50 = *(_QWORD *)(v13 - 8);
  v53 = v13;
  v56 = v26;
  v30 = ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v48);
  v31 = (v18 + a1) & v30;
  v32 = (v18 + a2) & v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v31, v32, v5);
  v33 = (void *)((v20 + v31) & v29);
  v34 = (const void *)((v20 + v32) & v29);
  if (sub_23C7DE718((uint64_t)v34, 1, AssociatedTypeWitness))
  {
    memcpy(v33, v34, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v33, v34, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v33, 0, 1, AssociatedTypeWitness);
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 16))(((unint64_t)v33 + v47) & v49, ((unint64_t)v34 + v47) & v49, v53);
  v35 = a1;
  *(_BYTE *)(a1 + v56) = 0;
  return v35;
}

uint64_t sub_23C89B0EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  void *v48;
  const void *v49;
  void *v50;
  const void *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  if (a1 == a2)
    return a1;
  v7 = a3[2];
  v6 = a3[3];
  v61 = v7;
  v60 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v60 + 64);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v69 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 84);
  v16 = v14;
  v65 = a3[4];
  v17 = *(_QWORD *)(v65 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18;
  v20 = (v14 | v10 | v18);
  v59 = v8 + v20;
  v21 = (v8 + v20) & ~v20;
  v68 = *(_QWORD *)(v9 + 64) + v14;
  v22 = v68 & ~(unint64_t)v14;
  v23 = *(_QWORD *)(v13 + 64);
  if (v15)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = v23 + 1;
  v63 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v64 = v24 + v18;
  v71 = *(_QWORD *)(v65 - 8);
  v25 = *(_QWORD *)(v17 + 64);
  v26 = ((v64 + v22) & ~(unint64_t)v18) + v25;
  v27 = v26 + v21;
  v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v28 + 8 > v26 + v21)
    v27 = v28 + 8;
  v29 = v28 + 40;
  if (v29 <= v27)
    v30 = v27;
  else
    v30 = v29;
  v31 = *(unsigned __int8 *)(a1 + v30);
  v62 = ((v64 + v22) & ~v19) + v25;
  if (v31 >= 3)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X14 }
  }
  v58 = ~v20;
  v67 = ~v16;
  v70 = ~v19;
  v66 = *(_DWORD *)(v17 + 80);
  if (v31 == 2)
  {
    v57 = v24;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v69);
    v38 = (v68 + a1) & v67;
    if (!sub_23C7DE718(v38, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v38, v12);
    v33 = v65;
    (*(void (**)(size_t, uint64_t))(v71 + 8))((v64 + v38) & v70, v65);
    v37 = v57;
    _s12GRDBInternal13DatabaseEventVwxx_0((a1 + v25 + ((v22 + v66 + v57) & v70) + 7) & 0xFFFFFFFFFFFFFFF8);
    v34 = v12;
  }
  else if (v31 == 1)
  {
    v39 = v24;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v69);
    v40 = (v68 + a1) & v67;
    v34 = v12;
    if (!sub_23C7DE718(v40, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v40, v12);
    if (v15)
      v41 = v23 + v66;
    else
      v41 = v23 + 1 + v66;
    v33 = v65;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))((v41 + v40) & v70, v65);
    v37 = v39;
  }
  else
  {
    v33 = v65;
    v34 = AssociatedTypeWitness;
    v35 = v24;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(a1, v61);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v59 + a1) & v58, v69);
    v36 = (v68 + ((v59 + a1) & v58)) & v67;
    if (!sub_23C7DE718(v36, 1, v34))
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v36, v34);
    (*(void (**)(size_t, uint64_t))(v71 + 8))((v64 + v36) & v70, v65);
    v37 = v35;
  }
  v42 = *(unsigned __int8 *)(a2 + v30);
  if (v42 >= 3)
  {
    if (v30 <= 3)
      v43 = v30;
    else
      v43 = 4;
    __asm { BR              X12 }
  }
  if (v42 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v69);
    v48 = (void *)((v68 + a1) & v67);
    v49 = (const void *)((v68 + a2) & v67);
    if (sub_23C7DE718((uint64_t)v49, 1, v34))
    {
      memcpy(v48, v49, v37);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v48, v49, v34);
      sub_23C7DE70C((uint64_t)v48, 0, 1, v34);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 16))(((unint64_t)v48 + v66 + v37) & v70, ((unint64_t)v49 + v66 + v37) & v70, v33);
    v52 = (a1 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = (a2 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v54 = *(_QWORD *)(v53 + 24);
    *(_QWORD *)(v52 + 24) = v54;
    *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
    (**(void (***)(void))(v54 - 8))();
    v55 = 2;
    goto LABEL_48;
  }
  if (v42 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v69);
    v50 = (void *)((v68 + a1) & v67);
    v51 = (const void *)((v68 + a2) & v67);
    if (sub_23C7DE718((uint64_t)v51, 1, v34))
    {
      memcpy(v50, v51, v37);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v50, v51, v34);
      sub_23C7DE70C((uint64_t)v50, 0, 1, v34);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 16))(((unint64_t)v50 + v66 + v37) & v70, ((unint64_t)v51 + v66 + v37) & v70, v33);
    *(_QWORD *)((a1 + v62 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v62 + 7) & 0xFFFFFFFFFFFFF8);
    v55 = 1;
LABEL_48:
    *(_BYTE *)(a1 + v30) = v55;
    return a1;
  }
  v44 = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(a1, a2, v61);
  v45 = (v59 + a2) & v58;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v59 + a1) & v58, v45, v69);
  v46 = (void *)((v68 + ((v59 + a1) & v58)) & v67);
  v47 = (const void *)((v68 + v45) & v67);
  if (sub_23C7DE718((uint64_t)v47, 1, v34))
  {
    memcpy(v46, v47, v44);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v46, v47, v34);
    sub_23C7DE70C((uint64_t)v46, 0, 1, v34);
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 16))(((unint64_t)v46 + v64) & v70, ((unint64_t)v47 + v64) & v70, v33);
  *(_BYTE *)(a1 + v30) = 0;
  return a1;
}

uint64_t sub_23C89B7A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  void *v40;
  const void *v41;
  size_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  char v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  size_t __n;
  uint64_t AssociatedTypeWitness;

  v5 = a3[3];
  v51 = a3[2];
  v6 = *(_QWORD *)(v51 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = a3[4];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15;
  v17 = (v11 | v9 | v15);
  v18 = v7 + v17;
  v19 = (v7 + v17) & ~v17;
  v20 = *(_QWORD *)(v8 + 64) + v11;
  if (*(_DWORD *)(v10 + 84))
    v21 = *(_QWORD *)(v10 + 64);
  else
    v21 = *(_QWORD *)(v10 + 64) + 1;
  __n = v21;
  v22 = v21 + v15;
  v23 = ((v22 + (v20 & ~(unint64_t)v11)) & ~(unint64_t)v15)
      + *(_QWORD *)(v14 + 64);
  v24 = v23 + v19;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v25 + 8 > v23 + v19)
    v24 = v25 + 8;
  v26 = v25 + 40;
  if (v26 <= v24)
    v27 = v24;
  else
    v27 = v26;
  v28 = *(unsigned __int8 *)(a2 + v27);
  if (v28 >= 3)
  {
    if (v27 <= 3)
      v29 = v27;
    else
      v29 = 4;
    __asm { BR              X14 }
  }
  v30 = ~v12;
  if (v28 == 2)
  {
    v53 = *(_QWORD *)(v13 - 8);
    v56 = v13;
    v59 = v27;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v35 = a1;
    v34(a1, a2, v5);
    v36 = (void *)((v20 + a1) & v30);
    v37 = (const void *)((v20 + a2) & v30);
    if (sub_23C7DE718((uint64_t)v37, 1, AssociatedTypeWitness))
    {
      v38 = __n;
      memcpy(v36, v37, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v36, v37, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v36, 0, 1, AssociatedTypeWitness);
      v38 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 32))(((unint64_t)v36 + v16 + v38) & ~v16, ((unint64_t)v37 + v16 + v38) & ~v16, v56);
    v43 = (a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = *(_QWORD *)(v43 + 32);
    v45 = *(_OWORD *)(v43 + 16);
    v46 = (a1 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v46 = *(_OWORD *)v43;
    *(_OWORD *)(v46 + 16) = v45;
    *(_QWORD *)(v46 + 32) = v44;
    v47 = 2;
    goto LABEL_28;
  }
  if (v28 == 1)
  {
    v54 = *(_QWORD *)(v13 - 8);
    v57 = v13;
    v59 = v27;
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v35 = a1;
    v39(a1, a2, v5);
    v40 = (void *)((v20 + a1) & v30);
    v41 = (const void *)((v20 + a2) & v30);
    if (sub_23C7DE718((uint64_t)v41, 1, AssociatedTypeWitness))
    {
      v42 = __n;
      memcpy(v40, v41, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v40, v41, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v40, 0, 1, AssociatedTypeWitness);
      v42 = __n;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 32))(((unint64_t)v40 + v16 + v42) & ~v16, ((unint64_t)v41 + v16 + v42) & ~v16, v57);
    *(_QWORD *)((a1 + v23 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v23 + 7) & 0xFFFFFFFFFFFFF8);
    v47 = 1;
LABEL_28:
    *(_BYTE *)(v35 + v59) = v47;
    return v35;
  }
  v49 = v22;
  v50 = ~(unint64_t)v15;
  v52 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  v58 = v27;
  v31 = ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v51);
  v32 = (v18 + a1) & v31;
  v33 = (v18 + a2) & v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v32, v33, v5);
  if (sub_23C7DE718((v20 + v33) & v30, 1, AssociatedTypeWitness))
  {
    memcpy((void *)((v20 + v32) & v30), (const void *)((v20 + v33) & v30), __n);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v20 + v32) & v30, (v20 + v33) & v30, AssociatedTypeWitness);
    sub_23C7DE70C((v20 + v32) & v30, 0, 1, AssociatedTypeWitness);
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 32))((v49 + ((v20 + v32) & v30)) & v50, (v49 + ((v20 + v33) & v30)) & v50, v55);
  v35 = a1;
  *(_BYTE *)(a1 + v58) = 0;
  return v35;
}

uint64_t sub_23C89BBF8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  void *v48;
  const void *v49;
  void *v50;
  const void *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  char v56;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if (a1 == a2)
    return a1;
  v7 = a3[2];
  v6 = a3[3];
  v62 = v7;
  v61 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v61 + 64);
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v70 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 84);
  v16 = v14;
  v66 = a3[4];
  v17 = *(_QWORD *)(v66 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18;
  v20 = (v14 | v10 | v18);
  v60 = v8 + v20;
  v21 = (v8 + v20) & ~v20;
  v69 = *(_QWORD *)(v9 + 64) + v14;
  v22 = v69 & ~(unint64_t)v14;
  v23 = *(_QWORD *)(v13 + 64);
  if (v15)
    v24 = *(_QWORD *)(v13 + 64);
  else
    v24 = v23 + 1;
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v65 = v24 + v18;
  v72 = *(_QWORD *)(v66 - 8);
  v25 = *(_QWORD *)(v17 + 64);
  v26 = ((v65 + v22) & ~(unint64_t)v18) + v25;
  v27 = v26 + v21;
  v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v28 + 8 > v26 + v21)
    v27 = v28 + 8;
  v29 = v28 + 40;
  if (v29 <= v27)
    v30 = v27;
  else
    v30 = v29;
  v31 = *(unsigned __int8 *)(a1 + v30);
  v63 = ((v65 + v22) & ~v19) + v25;
  if (v31 >= 3)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X14 }
  }
  v59 = ~v20;
  v68 = ~v16;
  v71 = ~v19;
  v67 = *(_DWORD *)(v17 + 80);
  if (v31 == 2)
  {
    v58 = v24;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v70);
    v38 = (v69 + a1) & v68;
    if (!sub_23C7DE718(v38, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v38, v12);
    v33 = v66;
    (*(void (**)(size_t, uint64_t))(v72 + 8))((v65 + v38) & v71, v66);
    v37 = v58;
    _s12GRDBInternal13DatabaseEventVwxx_0((a1 + v25 + ((v22 + v67 + v58) & v71) + 7) & 0xFFFFFFFFFFFFFFF8);
    v34 = v12;
  }
  else if (v31 == 1)
  {
    v39 = v24;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v70);
    v40 = (v69 + a1) & v68;
    v34 = v12;
    if (!sub_23C7DE718(v40, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v40, v12);
    if (v15)
      v41 = v23 + v67;
    else
      v41 = v23 + 1 + v67;
    v33 = v66;
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))((v41 + v40) & v71, v66);
    v37 = v39;
  }
  else
  {
    v33 = v66;
    v34 = AssociatedTypeWitness;
    v35 = v24;
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(a1, v62);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v60 + a1) & v59, v70);
    v36 = (v69 + ((v60 + a1) & v59)) & v68;
    if (!sub_23C7DE718(v36, 1, v34))
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v36, v34);
    (*(void (**)(size_t, uint64_t))(v72 + 8))((v65 + v36) & v71, v66);
    v37 = v35;
  }
  v42 = *(unsigned __int8 *)(a2 + v30);
  if (v42 >= 3)
  {
    if (v30 <= 3)
      v43 = v30;
    else
      v43 = 4;
    __asm { BR              X12 }
  }
  if (v42 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v70);
    v48 = (void *)((v69 + a1) & v68);
    v49 = (const void *)((v69 + a2) & v68);
    if (sub_23C7DE718((uint64_t)v49, 1, v34))
    {
      memcpy(v48, v49, v37);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v48, v49, v34);
      sub_23C7DE70C((uint64_t)v48, 0, 1, v34);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))(((unint64_t)v48 + v67 + v37) & v71, ((unint64_t)v49 + v67 + v37) & v71, v33);
    v52 = (a2 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = *(_QWORD *)(v52 + 32);
    v54 = *(_OWORD *)(v52 + 16);
    v55 = (a1 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v55 = *(_OWORD *)v52;
    *(_OWORD *)(v55 + 16) = v54;
    *(_QWORD *)(v55 + 32) = v53;
    v56 = 2;
    goto LABEL_48;
  }
  if (v42 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v70);
    v50 = (void *)((v69 + a1) & v68);
    v51 = (const void *)((v69 + a2) & v68);
    if (sub_23C7DE718((uint64_t)v51, 1, v34))
    {
      memcpy(v50, v51, v37);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v50, v51, v34);
      sub_23C7DE70C((uint64_t)v50, 0, 1, v34);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))(((unint64_t)v50 + v67 + v37) & v71, ((unint64_t)v51 + v67 + v37) & v71, v33);
    *(_QWORD *)((a1 + v63 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v63 + 7) & 0xFFFFFFFFFFFFF8);
    v56 = 1;
LABEL_48:
    *(_BYTE *)(a1 + v30) = v56;
    return a1;
  }
  v44 = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(a1, a2, v62);
  v45 = (v60 + a2) & v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((v60 + a1) & v59, v45, v70);
  v46 = (void *)((v69 + ((v60 + a1) & v59)) & v68);
  v47 = (const void *)((v69 + v45) & v68);
  if (sub_23C7DE718((uint64_t)v47, 1, v34))
  {
    memcpy(v46, v47, v44);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 32))(v46, v47, v34);
    sub_23C7DE70C((uint64_t)v46, 0, 1, v34);
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))(((unint64_t)v46 + v65) & v71, ((unint64_t)v47 + v65) & v71, v33);
  *(_BYTE *)(a1 + v30) = 0;
  return a1;
}

uint64_t sub_23C89C2A4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  unsigned int v23;
  int v24;
  unsigned int v25;

  v6 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(a3[4] - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v9 + 64)
      + v13
      + ((*(_QWORD *)(v7 + 64) + v10) & ~(unint64_t)v10);
  if (!v11)
    ++v14;
  v15 = (v14 & ~(unint64_t)*(_DWORD *)(v12 + 80)) + *(_QWORD *)(v12 + 64);
  v16 = v15 + ((v6 + (v10 | v8 | v13)) & ~(unint64_t)(v10 | v8 | v13));
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v17 + 8 > v16)
    v16 = v17 + 8;
  v18 = v17 + 40;
  if (v18 > v16)
    v16 = v18;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_25;
  v19 = v16 + 1;
  v20 = 8 * (v16 + 1);
  if ((v16 + 1) <= 3)
  {
    v23 = ((a2 + ~(-1 << v20) - 252) >> v20) + 1;
    if (HIWORD(v23))
    {
      v21 = *(_DWORD *)(a1 + v19);
      if (!v21)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v23 > 0xFF)
    {
      v21 = *(unsigned __int16 *)(a1 + v19);
      if (!*(_WORD *)(a1 + v19))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v23 < 2)
    {
LABEL_25:
      v25 = *(unsigned __int8 *)(a1 + v16);
      if (v25 >= 4)
        return (v25 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v21 = *(unsigned __int8 *)(a1 + v19);
  if (!*(_BYTE *)(a1 + v19))
    goto LABEL_25;
LABEL_18:
  v24 = (v21 - 1) << v20;
  if (v19 > 3)
    v24 = 0;
  if ((_DWORD)v19)
  {
    if (v19 > 3)
      LODWORD(v19) = 4;
    __asm { BR              X11 }
  }
  return (v24 + 253);
}

void sub_23C89C47C(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v8 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  v9 = *(_QWORD *)(a4[3] - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 84);
  v14 = *(_QWORD *)(a4[4] - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_QWORD *)(v11 + 64)
      + v15
      + ((*(_QWORD *)(v9 + 64) + v12) & ~(unint64_t)v12);
  if (!v13)
    ++v16;
  v17 = (v16 & ~(unint64_t)*(_DWORD *)(v14 + 80)) + *(_QWORD *)(v14 + 64);
  v18 = v17 + ((v8 + (v12 | v10 | v15)) & ~(unint64_t)(v12 | v10 | v15));
  v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v19 + 8 > v18)
    v18 = v19 + 8;
  v20 = v19 + 40;
  if (v20 <= v18)
    v20 = v18;
  v21 = v20 + 1;
  v22 = 8 * (v20 + 1);
  if (a3 < 0xFD)
  {
    v23 = 0;
  }
  else if (v21 <= 3)
  {
    v25 = ((a3 + ~(-1 << v22) - 252) >> v22) + 1;
    if (HIWORD(v25))
    {
      v23 = 4u;
    }
    else if (v25 >= 0x100)
    {
      v23 = 2;
    }
    else
    {
      v23 = v25 > 1;
    }
  }
  else
  {
    v23 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v24 = a2 - 253;
  if (v21 < 4)
  {
    if ((_DWORD)v20 != -1)
    {
      v26 = v24 & ~(-1 << v22);
      bzero(a1, v21);
      if ((_DWORD)v21 == 3)
      {
        *(_WORD *)a1 = v26;
        a1[2] = BYTE2(v26);
      }
      else if ((_DWORD)v21 == 2)
      {
        *(_WORD *)a1 = v26;
      }
      else
      {
        *a1 = v26;
      }
    }
  }
  else
  {
    bzero(a1, v20 + 1);
    *(_DWORD *)a1 = v24;
  }
  __asm { BR              X10 }
}

uint64_t sub_23C89C6CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  v5 = *(_QWORD *)(a2[3] - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(a2[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64)
      + v11
      + ((*(_QWORD *)(v5 + 64) + v8) & ~(unint64_t)v8);
  if (!v9)
    ++v12;
  v13 = (v12 & ~(unint64_t)*(_DWORD *)(v10 + 80)) + *(_QWORD *)(v10 + 64);
  v14 = v13 + ((v4 + (v8 | v6 | v11)) & ~(unint64_t)(v8 | v6 | v11));
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v15 + 8 > v14)
    v14 = v15 + 8;
  v16 = v15 + 40;
  if (v16 <= v14)
    v16 = v14;
  result = *(unsigned __int8 *)(a1 + v16);
  if (result >= 3)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23C89C820(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  char v21;
  int v22;

  v6 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(_DWORD *)(v7 + 80);
  result = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(result - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(a3[4] - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_QWORD *)(v10 + 64)
      + v14
      + ((*(_QWORD *)(v7 + 64) + v11) & ~(unint64_t)v11);
  if (!v12)
    ++v15;
  v16 = (v15 & ~(unint64_t)*(_DWORD *)(v13 + 80)) + *(_QWORD *)(v13 + 64);
  v17 = v16 + ((v6 + (v11 | v8 | v14)) & ~(unint64_t)(v11 | v8 | v14));
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v18 + 8 > v17)
    v17 = v18 + 8;
  v19 = v18 + 40;
  if (v19 <= v17)
    v20 = v17;
  else
    v20 = v19;
  if (a2 > 2)
  {
    if (v20 <= 3)
      v21 = ((a2 - 3) >> (8 * v20)) + 3;
    else
      v21 = 3;
    a1[v20] = v21;
    if (v20 >= 4)
      v22 = 4;
    else
      v22 = v20;
    bzero(a1, v20);
    __asm { BR              X10 }
  }
  a1[v20] = a2;
  return result;
}

void type metadata accessor for ReceiveValuesOnSubscription.Target()
{
  JUMPOUT(0x24262607CLL);
}

uint64_t sub_23C89C9A4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C89C9AC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    v0 = sub_23C9114E4();
    if (v2 <= 0x3F)
    {
      v0 = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *sub_23C89CA84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  size_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v8 + v10;
  if (*(_DWORD *)(v9 + 84))
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  v14 = *(_QWORD *)(a3 + 32);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v16;
  v18 = v13 + v16;
  v19 = v10 | *(_DWORD *)(v7 + 80) | v16;
  v20 = v19;
  v21 = v19 & 0x100000;
  if (v20 <= 7 && ((v18 + (v12 & ~v11)) & ~v17) + *(_QWORD *)(v15 + 64) <= 0x18 && v21 == 0)
  {
    v25 = ~v11;
    v29 = ~v17;
    v30 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v26 = (void *)(((unint64_t)a1 + v12) & v25);
    v27 = (const void *)(((unint64_t)a2 + v12) & v25);
    if (sub_23C7DE718((uint64_t)v27, 1, AssociatedTypeWitness))
    {
      memcpy(v26, v27, v13);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v26, v27, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v26, 0, 1, AssociatedTypeWitness);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(((unint64_t)v26 + v18) & v29, ((unint64_t)v27 + v18) & v29, v30);
  }
  else
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v20 + 16) & ~v20));
    swift_retain();
  }
  return a1;
}

uint64_t sub_23C89CC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(v4 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  if (!sub_23C7DE718(v8, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v7 + 64) + v8;
  if (!*(_DWORD *)(v7 + 84))
    ++v9;
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((v9 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

uint64_t sub_23C89CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 24));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v7 + v10 + a1) & ~v10);
  v12 = (const void *)((v7 + v10 + a2) & ~v10);
  if (sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v11, 0, 1, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(((unint64_t)v11 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v12 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_23C89CE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(a1, a2, *(_QWORD *)(a3 + 24));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v7 + v10 + a1) & ~v10);
  v12 = (const void *)((v7 + v10 + a2) & ~v10);
  LODWORD(v7) = sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness);
  v13 = sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness);
  if ((_DWORD)v7)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(v11, v12, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v9 + 84))
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v14);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))(((unint64_t)v11 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v12 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t sub_23C89CF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 24));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v7 + v10 + a1) & ~v10);
  v12 = (const void *)((v7 + v10 + a2) & ~v10);
  if (sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v11, 0, 1, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v11 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v12 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_23C89D0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(a1, a2, *(_QWORD *)(a3 + 24));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v7 + v10 + a1) & ~v10);
  v12 = (const void *)((v7 + v10 + a2) & ~v10);
  LODWORD(v7) = sub_23C7DE718((uint64_t)v11, 1, AssociatedTypeWitness);
  v13 = sub_23C7DE718((uint64_t)v12, 1, AssociatedTypeWitness);
  if ((_DWORD)v7)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(v11, v12, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v9 + 84))
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v14);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(((unint64_t)v11 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v12 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t sub_23C89D228(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a3 + 32);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  if (v16 > v13)
    v13 = *(_DWORD *)(v15 + 84);
  v17 = *(_QWORD *)(v10 + 64);
  if (!(_DWORD)v11)
    ++v17;
  if (!a2)
    return 0;
  v18 = AssociatedTypeWitness;
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = *(_QWORD *)(v7 + 64) + v19;
  v21 = *(unsigned __int8 *)(v15 + 80);
  if (a2 <= v13)
    goto LABEL_30;
  v22 = ((v17 + v21 + (v20 & ~v19)) & ~v21) + *(_QWORD *)(v15 + 64);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v25 = ((a2 - v13 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v25))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v25 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v25 < 2)
    {
LABEL_30:
      if (v13)
      {
        if ((_DWORD)v8 == v13)
          return sub_23C7DE718(a1, v8, v6);
        v28 = (v20 + a1) & ~v19;
        if (v12 != v13)
          return sub_23C7DE718((v28 + v17 + v21) & ~v21, v16, v14);
        v29 = sub_23C7DE718(v28, v11, v18);
        if (v29 >= 2)
          return v29 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_30;
LABEL_21:
  v26 = (v24 - 1) << v23;
  if (v22 > 3)
    v26 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v27 = v22;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  return v13 + v26 + 1;
}

void sub_23C89D440(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = 0;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12)
    v13 = v12 - 1;
  else
    v13 = 0;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v15 + 84) > v14)
    v14 = *(_DWORD *)(v15 + 84);
  v16 = (*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 64);
  if (v12)
    v18 = v17;
  else
    v18 = v17 + 1;
  v19 = ((v18 + *(unsigned __int8 *)(v15 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
      + *(_QWORD *)(v15 + 64);
  v20 = 8 * v19;
  if (a3 > v14)
  {
    if (v19 <= 3)
    {
      v21 = ((a3 - v14 + ~(-1 << v20)) >> v20) + 1;
      if (HIWORD(v21))
      {
        v10 = 4u;
      }
      else if (v21 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v21 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  if (v14 < a2)
  {
    v22 = ~v14 + a2;
    if (v19 < 4)
    {
      if ((_DWORD)v19)
      {
        v23 = v22 & ~(-1 << v20);
        bzero(a1, v19);
        if ((_DWORD)v19 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if ((_DWORD)v19 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v22;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X1 }
}

void sub_23C89D698()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23C89D6A0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

uint64_t sub_23C89D6C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C89D6D0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      v0 = sub_23C9114E4();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *sub_23C89D7A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  void (*v22)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  void *v25;
  const void *v26;
  size_t __n;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v29 - 8);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 + 64) + v6;
  v8 = *(_QWORD *)(v5 + 64);
  v30 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = *(_QWORD *)(v9 + 64);
  if (!*(_DWORD *)(v9 + 84))
    ++v12;
  v13 = v12
      + ((v8 + v10 + (v7 & ~(unint64_t)v6)) & ~(unint64_t)v10);
  v14 = v6 | *(_DWORD *)(v4 + 80) | v10;
  v15 = (v6 | *(_BYTE *)(v4 + 80) | v10);
  v16 = v14 & 0x100000;
  if (v15 <= 7 && v13 <= 0x18 && v16 == 0)
  {
    __n = v12;
    v21 = ~(unint64_t)v6;
    v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    v20 = a1;
    v22(a1, a2, v29);
    v23 = ((unint64_t)a1 + v7) & v21;
    v24 = ((unint64_t)a2 + v7) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v23, v24, v3);
    v25 = (void *)((v23 + v30 + v11) & ~v11);
    v26 = (const void *)((v24 + v30 + v11) & ~v11);
    if (sub_23C7DE718((uint64_t)v26, 1, AssociatedTypeWitness))
    {
      memcpy(v25, v26, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v25, v26, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v25, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (uint64_t *)(v19 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v20;
}

uint64_t sub_23C89D960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v6 = (*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, _QWORD))(v5 + 8))(v6, *(_QWORD *)(a2 + 24));
  v7 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = sub_23C7DE718(v10, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v10, AssociatedTypeWitness);
  return result;
}

uint64_t sub_23C89DA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (void *)((v12 + v15 + v10) & ~v15);
  v18 = (const void *)((v16 + v11) & ~v15);
  if (sub_23C7DE718((uint64_t)v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84))
      v19 = *(_QWORD *)(v14 + 64);
    else
      v19 = *(_QWORD *)(v14 + 64) + 1;
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v17, v18, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23C89DB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  int v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 24))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (void *)((v12 + v15 + v10) & ~v15);
  v17 = (const void *)((v12 + v15 + v11) & ~v15);
  LODWORD(v10) = sub_23C7DE718((uint64_t)v16, 1, AssociatedTypeWitness);
  v18 = sub_23C7DE718((uint64_t)v17, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v16, v17, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 24))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v14 + 84))
    v19 = *(_QWORD *)(v14 + 64);
  else
    v19 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v19);
  return a1;
}

uint64_t sub_23C89DCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 32))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (void *)((v12 + v15 + v10) & ~v15);
  v18 = (const void *)((v16 + v11) & ~v15);
  if (sub_23C7DE718((uint64_t)v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84))
      v19 = *(_QWORD *)(v14 + 64);
    else
      v19 = *(_QWORD *)(v14 + 64) + 1;
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v17, v18, AssociatedTypeWitness);
    sub_23C7DE70C((uint64_t)v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23C89DDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  int v18;
  size_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 40))(v10, v11, *(_QWORD *)(a3 + 24));
  v12 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (void *)((v12 + v15 + v10) & ~v15);
  v17 = (const void *)((v12 + v15 + v11) & ~v15);
  LODWORD(v10) = sub_23C7DE718((uint64_t)v16, 1, AssociatedTypeWitness);
  v18 = sub_23C7DE718((uint64_t)v17, 1, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v16, v17, AssociatedTypeWitness);
      sub_23C7DE70C((uint64_t)v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v14 + 84))
    v19 = *(_QWORD *)(v14 + 64);
  else
    v19 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v19);
  return a1;
}

uint64_t sub_23C89DF64(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= v11)
    v15 = v11;
  if ((_DWORD)v14)
    v16 = *(_QWORD *)(v13 + 64);
  else
    v16 = *(_QWORD *)(v13 + 64) + 1;
  if (!a2)
    return 0;
  v17 = AssociatedTypeWitness;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(_QWORD *)(v7 + 64) + v18;
  v20 = *(_QWORD *)(v9 + 64);
  v21 = *(unsigned __int8 *)(v13 + 80);
  if (a2 <= v15)
    goto LABEL_30;
  v22 = v16 + ((v20 + v21 + (v19 & ~v18)) & ~v21);
  v23 = 8 * v22;
  if (v22 > 3)
    goto LABEL_14;
  v25 = ((a2 - v15 + ~(-1 << v23)) >> v23) + 1;
  if (HIWORD(v25))
  {
    v24 = *(_DWORD *)(a1 + v22);
    if (!v24)
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v25 > 0xFF)
  {
    v24 = *(unsigned __int16 *)(a1 + v22);
    if (!*(_WORD *)(a1 + v22))
      goto LABEL_30;
    goto LABEL_21;
  }
  if (v25 >= 2)
  {
LABEL_14:
    v24 = *(unsigned __int8 *)(a1 + v22);
    if (!*(_BYTE *)(a1 + v22))
      goto LABEL_30;
LABEL_21:
    v26 = (v24 - 1) << v23;
    if (v22 > 3)
      v26 = 0;
    if ((_DWORD)v22)
    {
      if (v22 <= 3)
        v27 = v22;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    return v15 + v26 + 1;
  }
LABEL_30:
  if (!v15)
    return 0;
  if ((_DWORD)v8 == v15)
  {
    v28 = a1;
    v29 = v8;
    v30 = v6;
    return sub_23C7DE718(v28, v29, v30);
  }
  v28 = (v19 + a1) & ~v18;
  if ((_DWORD)v10 == v15)
  {
    v29 = v10;
    v30 = v5;
    return sub_23C7DE718(v28, v29, v30);
  }
  v31 = sub_23C7DE718((v28 + v20 + v21) & ~v21, v14, v17);
  if (v31 >= 2)
    return v31 - 1;
  else
    return 0;
}

void sub_23C89E18C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84))
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = 0;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  v15 = (*(_QWORD *)(v8 + 64)
       + *(unsigned __int8 *)(v11 + 80)
       + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = *(_QWORD *)(v11 + 64);
  if (v12)
    v17 = v16;
  else
    v17 = v16 + 1;
  v18 = v15 + v17;
  v19 = 8 * (v15 + v17);
  if (a3 > v14)
  {
    if (v18 <= 3)
    {
      v20 = ((a3 - v14 + ~(-1 << v19)) >> v19) + 1;
      if (HIWORD(v20))
      {
        v10 = 4u;
      }
      else if (v20 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v20 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  if (v14 < a2)
  {
    v21 = ~v14 + a2;
    if (v18 < 4)
    {
      if ((_DWORD)v18)
      {
        v22 = v21 & ~(-1 << v19);
        bzero(a1, v18);
        if ((_DWORD)v18 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v21;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

void sub_23C89E430()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 + v1) = v0;
}

void sub_23C89E438()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v2 + v1) = v0;
}

void sub_23C89E48C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23C89E49C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23C89E4A4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata accessor for ReceiveValuesOn()
{
  JUMPOUT(0x24262607CLL);
}

id sub_23C89E4BC()
{
  return sub_23C8980B8();
}

id sub_23C89E4DC()
{
  return sub_23C898A04();
}

uint64_t sub_23C89E4FC()
{
  return sub_23C898E84();
}

id sub_23C89E51C(uint64_t a1)
{
  return sub_23C89944C(a1);
}

id sub_23C89E53C()
{
  return sub_23C8986EC();
}

void sub_23C89E55C()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C89E56C()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_23C89E58C()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C89E59C()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_23C89E5BC(uint64_t a1)
{
  uint64_t v1;

  sub_23C899E70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C89E5C4()
{
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_23C89E60C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  sub_23C89F064();
  sub_23C7E1B8C();
  sub_23C7E18B0();
  sub_23C7ED130();
  v2 = sub_23C7E6370();
  sub_23C7ECCD8(v2, v3, v4, v5, v6, v7, v8, v9, v12);
  v10 = sub_23C7DFE5C();
  if (!sub_23C7EC76C(v10))
    sub_23C7EE514();
  sub_23C7E92AC(v1 + *(int *)(v0 + 72));
  if (!sub_23C7E67E8())
    sub_23C7DFCD4();
  return sub_23C7E6998();
}

void sub_23C89E6DC()
{
  sub_23C7E4400();
}

void sub_23C89E720()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_23C910C80();
  sub_23C89A280();
}

void sub_23C89E7D0(uint64_t a1)
{
  uint64_t v1;

  sub_23C899A90(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C89E7D8()
{
  sub_23C7E8EB8();
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

#error "23C89E860: call analysis failed (funcsize=47)"

void sub_23C89E8D0()
{
  sub_23C7E4400();
}

void sub_23C89E910()
{
  swift_getAssociatedTypeWitness();
  sub_23C899D8C();
}

void sub_23C89E98C(uint64_t a1)
{
  uint64_t v1;

  sub_23C89947C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C89E994()
{
  sub_23C7E8EB8();
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

#error "23C89EA40: call analysis failed (funcsize=53)"

void sub_23C89EAA4()
{
  sub_23C7E4400();
}

void sub_23C89EAEC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = v2 & ~v1;
  v5 = (*(_QWORD *)(a1 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23C7E9994();
  sub_23C7EDC68();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C7E6D5C() - 8) + 80);
  sub_23C8997CC(v3 + v4, *(_QWORD *)(v3 + v5), v3 + ((v5 + v6 + 8) & ~v6));
}

uint64_t sub_23C89EB74()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C910C80() - 8) + 80);
  v3 = (v2 + 72) & ~v2;
  swift_release();
  if (!sub_23C7DE718(v0 + v3, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + v3, AssociatedTypeWitness);
  return sub_23C7E0A3C();
}

id sub_23C89EC40()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C7E9994();
  sub_23C7EDC68();
  v0 = sub_23C7E6D5C();
  v1 = sub_23C7E4EA8(v0);
  return sub_23C899DFC(v1);
}

void sub_23C89ECA0(uint64_t a1)
{
  uint64_t v1;

  sub_23C898ED8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23C89ECA8()
{
  sub_23C7E8EB8();
  type metadata accessor for ReceiveValuesOnSubscription.Target();
}

#error "23C89ED30: call analysis failed (funcsize=52)"

void sub_23C89EDB4()
{
  sub_23C7E4400();
}

void sub_23C89EDF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v11 = v9 & ~v8;
  v12 = (*(_QWORD *)(a8 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23C7ECCD8(a1, a2, v15, a3, a4, a5, a6, a7, v14);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_23C7DF054() - 8) + 80);
  sub_23C8991F4(v10 + v11, *(_QWORD *)(v10 + v12), v10 + ((v12 + v13 + 8) & ~v13));
}

uint64_t sub_23C89EE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23C7DF054();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return sub_23C7E0A3C();
}

id sub_23C89EED8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_23C7DF054();
  v1 = sub_23C7E4EA8(v0);
  return sub_23C899A5C(v1);
}

void sub_23C89EF14()
{
  sub_23C898A70();
}

uint64_t sub_23C89EF1C()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C89EF40()
{
  uint64_t v0;

  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23C89EF64()
{
  uint64_t v0;

  return sub_23C898E0C((_QWORD *)(v0 + 16));
}

void sub_23C89EF80()
{
  sub_23C89872C();
}

uint64_t sub_23C89EF88()
{
  uint64_t v0;

  return sub_23C898E50((_QWORD *)(v0 + 16));
}

void sub_23C89EFA0()
{
  sub_23C898108();
}

uint64_t sub_23C89EFA8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

void sub_23C89F014()
{
  sub_23C89865C();
}

uint64_t sub_23C89F054()
{
  return swift_getAssociatedTypeWitness();
}

void CommonTableExpression<A>.init<A>(recursive:named:columns:request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *);
  uint64_t v11;

  sub_23C7DE8EC();
  sub_23C7E99A8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = sub_23C7E4EC8(v8, v11);
  v10(v9);
  type metadata accessor for Row();
  sub_23C7E1BA0();
  sub_23C7EDC7C(v0);
  sub_23C7EDC7C(v1);
  *(_QWORD *)v6 = v4;
  *(_QWORD *)(v6 + 8) = v3;
  *(_QWORD *)(v6 + 16) = v2;
  sub_23C7E0718((void *)(v6 + 24), &v11);
  *(_BYTE *)(v6 + 186) = v5;
  sub_23C7DBCB0();
}

void *CommonTableExpression.contains(_:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _BYTE *v10;
  _QWORD v12[21];
  _BYTE v13[168];
  _QWORD __src[21];
  _QWORD v15[21];

  v5 = *v2;
  v6 = v2[1];
  v12[0] = v5;
  v12[1] = v6;
  sub_23C813104((uint64_t)v12);
  sub_23C813130(v12, v13);
  v7 = a1[3];
  v8 = a1[4];
  sub_23C7E7E34(a1, v7);
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  sub_23C7DB3D4();
  v9(__src, v7, v8);
  v10 = (_BYTE *)sub_23C7DB388();
  memcpy(v10 + 16, __src, 0xA3uLL);
  sub_23C7E0718(v10 + 184, v13);
  v10[346] = 0;
  v15[0] = v10;
  sub_23C813280((uint64_t)v15);
  return sub_23C800B48(v15, a2);
}

uint64_t CommonTableExpression.tableName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C7DB3D4();
  return v1;
}

uint64_t CommonTableExpression.tableName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CommonTableExpression.tableName.modify())()
{
  return nullsub_1;
}

uint64_t sub_23C89F24C()
{
  uint64_t v0;

  sub_23C7E6F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  sub_23C8131FC(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328),
    *(_QWORD *)(v0 + 336),
    *(_WORD *)(v0 + 344));
  return swift_deallocObject();
}

void CommonTableExpression.init<A>(recursive:named:columns:request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *);
  uint64_t v11;

  sub_23C7DE8EC();
  sub_23C7E99A8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = sub_23C7E4EC8(v8, v11);
  v10(v9);
  sub_23C7E1BA0();
  sub_23C7EDC7C(v0);
  sub_23C7EDC7C(v1);
  *(_QWORD *)v6 = v4;
  *(_QWORD *)(v6 + 8) = v3;
  *(_QWORD *)(v6 + 16) = v2;
  sub_23C7E0718((void *)(v6 + 24), &v11);
  *(_BYTE *)(v6 + 186) = v5;
  sub_23C7DBCB0();
}

void CommonTableExpression.init(recursive:named:columns:sql:arguments:)()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34[5];
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  sub_23C7DE8EC();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  HIDWORD(v32) = v12;
  v14 = v13;
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_23C7E79A8(&qword_25430DA08);
  v15 = sub_23C7DB388();
  *(_OWORD *)(v15 + 16) = xmmword_23C912A20;
  v41[0] = v5;
  v41[1] = v3;
  v42 = *v1;
  sub_23C7F96B0(v41);
  sub_23C7F96E0(v41, (void *)(v15 + 32));
  sub_23C7EE528((uint64_t)v35, v16);
  v43 = 0u;
  v44 = 0u;
  *(_QWORD *)&v45 = 0;
  *((_QWORD *)&v45 + 1) = v15;
  v17 = sub_23C811CFC((uint64_t)v34, (uint64_t)&v43);
  v40 = 2;
  v37 = v43;
  v38 = v44;
  v39 = v45;
  sub_23C7DE9A0(v17, &qword_25430DBD0, v18, v19, v20, v21, v22, v23);
  sub_23C7E79A8(&qword_25430DA18);
  v24 = j___s12GRDBInternal10SQLRequestV11sqlSubqueryAA11SQLSubqueryVvg(&v43);
  sub_23C7EC780((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v32, v34[0], v34[1], v34[2]);
  *(_QWORD *)v14 = v11;
  *(_QWORD *)(v14 + 8) = v9;
  *(_QWORD *)(v14 + 16) = v7;
  sub_23C7E0718((void *)(v14 + 24), &v43);
  *(_BYTE *)(v14 + 186) = v33;
  sub_23C7DBCB0();
}

void *CommonTableExpression.init(recursive:named:columns:literal:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *result;
  uint64_t v28;
  uint64_t v29[5];
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v11 = *a5;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  sub_23C7EE528((uint64_t)v30, a2);
  v36 = 0u;
  v37 = 0u;
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = v11;
  v12 = sub_23C811CFC((uint64_t)v29, (uint64_t)&v36);
  v35 = 2;
  v32 = v36;
  v33 = v37;
  v34 = v38;
  sub_23C7DE9A0(v12, &qword_25430DBD0, v13, v14, v15, v16, v17, v18);
  sub_23C7E79A8(&qword_25430DA18);
  v19 = j___s12GRDBInternal10SQLRequestV11sqlSubqueryAA11SQLSubqueryVvg(&v36);
  sub_23C7EC780((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, v28, v29[0], v29[1], v29[2]);
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  result = sub_23C7E0718((void *)(a6 + 24), &v36);
  *(_BYTE *)(a6 + 186) = a1;
  return result;
}

void CommonTableExpression<A>.init(recursive:named:columns:sql:arguments:)()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  _QWORD v26[2];
  __int128 v27;
  _QWORD v28[22];
  __int128 v29;
  __int128 v30;
  __int128 v31;

  sub_23C7DE8EC();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v20 = v10;
  sub_23C7E67FC();
  memset(v28, 0, 40);
  sub_23C7E79A8(&qword_25430DA08);
  v11 = sub_23C7DB388();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  v26[0] = v9;
  v26[1] = v7;
  v27 = *v5;
  sub_23C7F96B0(v26);
  sub_23C7F96E0(v26, (void *)(v11 + 32));
  sub_23C7EE528((uint64_t)v28, v12);
  v29 = 0u;
  v30 = 0u;
  *(_QWORD *)&v31 = 0;
  *((_QWORD *)&v31 + 1) = v11;
  sub_23C811CFC((uint64_t)v21, (uint64_t)&v29);
  v25 = 2;
  v22 = v29;
  v23 = v30;
  v24 = v31;
  sub_23C7E7938((uint64_t)v28, &qword_25430DBD0);
  v28[0] = *((_QWORD *)&v24 + 1);
  sub_23C89F6C4((uint64_t)v28);
  sub_23C8104B8(v28, &v29);
  v13 = swift_bridgeObjectRetain();
  sub_23C7DE9A0(v13, &qword_25430DA18, v14, v15, v16, v17, v18, v19);
  sub_23C7E0718((void *)(v1 + 24), &v29);
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v20;
  *(_BYTE *)(v1 + 186) = v0;
  sub_23C7DBCB0();
}

uint64_t sub_23C89F6C4(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 104) & 1;
  v2 = *(_WORD *)(result + 160) & 0x1FF;
  *(_QWORD *)(result + 64) &= 1uLL;
  *(_QWORD *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

void *CommonTableExpression<A>.init(recursive:named:columns:literal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  _BYTE v20[40];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  sub_23C7E67FC();
  v10 = *v9;
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  sub_23C7EE528((uint64_t)v25, v11);
  v27 = 0u;
  v28 = 0u;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = v10;
  sub_23C811CFC((uint64_t)v20, (uint64_t)&v27);
  v24 = 2;
  v21 = v27;
  v22 = v28;
  v23 = v29;
  sub_23C7E7938((uint64_t)v25, &qword_25430DBD0);
  *(_QWORD *)&v25[0] = *((_QWORD *)&v23 + 1);
  sub_23C89F6C4((uint64_t)v25);
  sub_23C8104B8(v25, &v27);
  v12 = swift_bridgeObjectRetain();
  sub_23C7DE9A0(v12, &qword_25430DA18, v13, v14, v15, v16, v17, v18);
  result = sub_23C7E0718((void *)(v5 + 24), &v27);
  *(_QWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = a4;
  *(_BYTE *)(v5 + 186) = v4;
  return result;
}

void *CommonTableExpression.all()@<X0>(void *a1@<X8>)
{
  _BYTE __src[168];

  sub_23C8291CC((uint64_t)__src);
  return sub_23C80BC0C(__src, a1);
}

uint64_t CommonTableExpression.association<A>(to:on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;

  sub_23C7EDEFC();
  sub_23C7E5F28(v2, v3, v4, v5, v6);
  v7 = sub_23C7DB388();
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v0;
  sub_23C7E92BC(v7, (uint64_t)sub_23C8A0640, v9, v10, v11, v12, v13, v14);
  return sub_23C7E8B40();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;

  sub_23C7EDEFC();
  v13 = *v2;
  v6 = type metadata accessor for Table(0, v5, v3, v4);
  sub_23C7ECCE4(v6, v7, v8, v9, v10);
  v11 = sub_23C7DB388();
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = v0;
  sub_23C7E92BC(v11, (uint64_t)sub_23C89FA94, v13, v14, v15, v16, v17, v18);
  return sub_23C7E8B40();
}

uint64_t type metadata accessor for CommonTableExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommonTableExpression);
}

uint64_t sub_23C89F874()
{
  swift_release();
  return swift_deallocObject();
}

void CommonTableExpression.association<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;

  sub_23C7E5F28(a1, a2, a3, a4, a5);
  sub_23C7E4420((unint64_t)sub_23C861AF0, v5, v6, v7, v8, v9, v10);
  sub_23C7E07F4();
}

uint64_t CommonTableExpression.association<A>(to:on:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  __int128 *v10;
  _BYTE v12[168];

  sub_23C7F92B4(a3, a4, (uint64_t)v12);
  v8 = sub_23C7DB388();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_23C7E96A8();
  sub_23C87F40C(v9, v10, a5);
  return swift_retain();
}

uint64_t CommonTableExpression.association<A>(to:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  __int128 *v5;
  _BYTE v7[168];

  sub_23C7F92B4(a1, a2, (uint64_t)v7);
  sub_23C7E96A8();
  return sub_23C87F40C(v4, v5, a3);
}

void sub_23C89FA20(void (*a1)(_QWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[21];

  a1(v5);
  v3 = v6;
  v4 = v7;
  sub_23C7E7E34(v5, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v8, v3, v4);
  nullsub_1(v8);
  sub_23C838EA0((uint64_t)v8, a2);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v5);
  sub_23C7E07F4();
}

void sub_23C89FA94(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23C89FA20(*(void (**)(_QWORD *__return_ptr))(v1 + 16), a1);
}

void CommonTableExpression.association<A>(to:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;

  v9 = *a1;
  v4 = type metadata accessor for Table(0, a3, a3, a4);
  sub_23C7ECCE4(v4, v5, v6, v7, v8);
  sub_23C7E4420((unint64_t)sub_23C861AF0, v9, v10, v11, v12, v13, v14);
  sub_23C7E07F4();
}

uint64_t sub_23C89FAFC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23C7F9AE0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_WORD *)(a1 + 184));
}

uint64_t sub_23C89FB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v21 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 64);
  v20 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 96);
  v26 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 128);
  v22 = *(_QWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  v8 = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 168);
  v10 = *(_QWORD *)(a2 + 176);
  v12 = *(_WORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7FD5D8(v21, v19, v18, v17, v16, v15, v14, v20, v26, v25, v24, v23, v22, v5, v6, v7, v8, v9, v11, v10, v12);
  *(_QWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 104) = v24;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 176) = v10;
  *(_WORD *)(a1 + 184) = v12;
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  return a1;
}

uint64_t sub_23C89FD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v29 = *(_QWORD *)(a2 + 88);
  v30 = *(_QWORD *)(a2 + 96);
  v31 = *(_QWORD *)(a2 + 104);
  v32 = *(_QWORD *)(a2 + 112);
  v33 = *(_QWORD *)(a2 + 120);
  v34 = *(_QWORD *)(a2 + 128);
  v35 = *(_QWORD *)(a2 + 136);
  v36 = *(_QWORD *)(a2 + 144);
  v37 = *(_QWORD *)(a2 + 152);
  v38 = *(_QWORD *)(a2 + 160);
  v39 = *(_QWORD *)(a2 + 168);
  v40 = *(_QWORD *)(a2 + 176);
  v41 = *(_WORD *)(a2 + 184);
  sub_23C7FD5D8(v4, v5, v6, v7, v8, v9, v10, v11, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  v20 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  v21 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  v22 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  v23 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v35;
  *(_QWORD *)(a1 + 144) = v36;
  v24 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v37;
  *(_QWORD *)(a1 + 160) = v38;
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v39;
  *(_QWORD *)(a1 + 176) = v40;
  v27 = *(_WORD *)(a1 + 184);
  *(_WORD *)(a1 + 184) = v41;
  sub_23C7F9AE0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    v26,
    v27);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  return a1;
}

void *sub_23C89FEF8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xBBuLL);
}

uint64_t sub_23C89FF00(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_WORD *)(a2 + 184);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 88);
  v14 = *(_OWORD *)(a1 + 104);
  v15 = *(_OWORD *)(a1 + 120);
  v16 = *(_OWORD *)(a1 + 136);
  v17 = *(_OWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 168);
  v19 = *(_QWORD *)(a1 + 176);
  v20 = *(_WORD *)(a1 + 184);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_WORD *)(a1 + 184) = v4;
  sub_23C7F9AE0(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    v19,
    v20);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  return a1;
}

uint64_t sub_23C89FFF0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 187))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C8A0030(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 186) = 0;
    *(_WORD *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 187) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 187) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for SQLCTE(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_23C7F9AE0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_WORD *)(a1 + 168));
}

uint64_t initializeWithCopy for SQLCTE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = v4;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 56);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 96);
  v24 = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 112);
  v22 = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 136);
  v8 = *(_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a2 + 152);
  v11 = *(_QWORD *)(a2 + 160);
  v12 = *(_WORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  sub_23C7FD5D8(v21, v20, v19, v18, v17, v16, v15, v14, v26, v25, v24, v23, v22, v5, v6, v7, v9, v8, v10, v11, v12);
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v24;
  *(_QWORD *)(a1 + 96) = v23;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = v11;
  *(_WORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  return a1;
}

uint64_t assignWithCopy for SQLCTE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v30 = *(_QWORD *)(a2 + 80);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v33 = *(_QWORD *)(a2 + 104);
  v34 = *(_QWORD *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 120);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  v38 = *(_QWORD *)(a2 + 144);
  v39 = *(_QWORD *)(a2 + 152);
  v40 = *(_QWORD *)(a2 + 160);
  v41 = *(_WORD *)(a2 + 168);
  sub_23C7FD5D8(v4, v5, v6, v7, v8, v9, v10, v11, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v20 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v29;
  *(_QWORD *)(a1 + 80) = v30;
  v21 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v31;
  *(_QWORD *)(a1 + 96) = v32;
  v22 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v33;
  *(_QWORD *)(a1 + 112) = v34;
  v23 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v35;
  *(_QWORD *)(a1 + 128) = v36;
  v24 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  v25 = *(_QWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = v39;
  *(_QWORD *)(a1 + 160) = v40;
  v27 = *(_WORD *)(a1 + 168);
  *(_WORD *)(a1 + 168) = v41;
  sub_23C7F9AE0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    v26,
    v27);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  return a1;
}

void *initializeWithTake for SQLCTE(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xABuLL);
}

uint64_t assignWithTake for SQLCTE(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_WORD *)(a2 + 168);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 88);
  v15 = *(_OWORD *)(a1 + 104);
  v16 = *(_OWORD *)(a1 + 120);
  v17 = *(_OWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_WORD *)(a1 + 168);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_WORD *)(a1 + 168) = v4;
  sub_23C7F9AE0(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    v19,
    v20);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLCTE(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 171))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 72) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SQLCTE(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 170) = 0;
    *(_WORD *)(a1 + 168) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 171) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_QWORD *)(a1 + 72) = 2 * -a2;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 154) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 171) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLCTE()
{
  return &type metadata for SQLCTE;
}

void sub_23C8A0644()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _BYTE v3[184];
  _BYTE v4[192];

  sub_23C7DEF5C();
  if (*(_QWORD *)(v0 + 16))
  {
    v1 = v0;
    sub_23C7DBF00();
    sub_23C7F96E0((const void *)(v1 + 32), v3);
    sub_23C7F96E0(v3, v4);
    v2 = (char *)&loc_23C8A06DC + 4 * byte_23C917CD8[sub_23C8A22E4((uint64_t)v4)];
    __asm { BR              X9 }
  }
  swift_release();
  sub_23C7DEF28();
}

uint64_t sub_23C8A0C7C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD __src[23];
  _BYTE __dst[184];
  _BYTE v8[192];
  uint64_t v9;

  if (a1[2])
  {
    v1 = a1;
    v9 = MEMORY[0x24BEE4AF8];
    sub_23C7FD588();
    v1 += 4;
    v2 = v1[3];
    v3 = v1[4];
    sub_23C7E7E34(v1, v2);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 8))(__src, v2, v3);
    memcpy(__dst, __src, sizeof(__dst));
    sub_23C801054(__dst, v8);
    v4 = (char *)&loc_23C8A0D48 + 4 * byte_23C917CE8[sub_23C801090((uint64_t)v8)];
    __asm { BR              X9 }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

unint64_t static TableRecord.databaseTableName.getter()
{
  return sub_23C8A1058();
}

double sub_23C8A0FFC()
{
  return static TableRecord.databaseSelection.getter();
}

double static TableRecord.databaseSelection.getter()
{
  uint64_t v0;
  double result;

  sub_23C7E79A8(&qword_25430D128);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v0 + 56) = &type metadata for AllColumns;
  *(_QWORD *)(v0 + 64) = &protocol witness table for AllColumns;
  return result;
}

unint64_t sub_23C8A1058()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_256BCBA70 != -1)
    swift_once();
  v0 = (void *)qword_256BCD2B8;
  sub_23C7DEACC();
  v1 = (void *)sub_23C910E6C();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    v3 = sub_23C910E78();

    return v3;
  }
  sub_23C7DEACC();
  v4 = sub_23C7EEE60();
  v5 = MEMORY[0x24BEE0D00];
  v3 = sub_23C7E6810();
  v7 = v6;
  swift_bridgeObjectRelease();
  v22 = v3;
  v23 = v7;
  v20 = v4;
  v21 = v4;
  v18 = v5;
  v19 = v4;
  sub_23C7E6810();
  v8 = sub_23C910F20();
  if (sub_23C910F20() == v8)
  {
    swift_bridgeObjectRelease();
    v3 = sub_23C8A230C();
LABEL_9:
    sub_23C7DE934();
LABEL_14:
    v15 = (void *)qword_256BCD2B8;
    v16 = (void *)sub_23C910E6C();
    sub_23C7DEACC();
    v17 = (void *)sub_23C910E6C();
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_setObject_forKey_, v16, v17, v18, v19, v20, v21, v22, v23);

    return v3;
  }
  if (v8 == 1)
  {
    v9 = sub_23C8A230C();
    sub_23C7DE934();
    v10 = sub_23C7E69A4(1uLL);
    v24 = v9;
LABEL_13:
    v22 = v10;
    v23 = v11;
    sub_23C886B8C();
    sub_23C7DBBB0();
    sub_23C910F50();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v24;
    goto LABEL_14;
  }
  if (!v8)
    goto LABEL_9;
  swift_bridgeObjectRetain();
  sub_23C8D6CA4(1);
  v12 = sub_23C9114F0();
  swift_bridgeObjectRelease();
  v13 = sub_23C910F20();
  sub_23C7DE934();
  result = v13 - 1;
  if (!__OFSUB__(v13, 1))
  {
    v10 = sub_23C7E69A4(result);
    v24 = v12;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t static TableRecord.fetchCount(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8A165C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))QueryInterfaceRequest.fetchCount(_:));
}

void static TableRecord.numberOfSelectedColumns(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  _BYTE v15[184];
  _BYTE v16[248];

  sub_23C7DEF5C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v0);
  v8 = v7;
  type metadata accessor for TableAlias();
  v9 = sub_23C7DB388();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 48) = 1;
  type metadata accessor for StatementArgumentsSink();
  sub_23C7DB388();
  swift_retain();
  v10 = sub_23C7E0B8C(0);
  v11 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_initStackObject();
  sub_23C7E30C0(v5, v10, v11);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v3, v1);
  swift_retain();
  v13 = sub_23C8A0C7C(v12);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v13 + 16))
  {
    sub_23C7DBBB0();
    sub_23C7DE93C(v15, (const void *)(v13 + 32));
    sub_23C801054(v15, v16);
    v14 = (char *)&loc_23C8A14C8 + dword_23C8A162C[sub_23C801090((uint64_t)v16)];
    __asm { BR              X9 }
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C7DEF28();
}

#error "23C8A15DC: call analysis failed (funcsize=16)"

uint64_t static TableRecord.deleteAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8A165C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))QueryInterfaceRequest.deleteAll(_:));
}

uint64_t sub_23C8A165C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[21];

  v6 = static TableRecord.all()(a2, a3, v70);
  v14 = sub_23C7E4068(v6, v7, v8, v9, v10, v11, v12, v13, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48,
          v50,
          v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70[0]);
  v18 = sub_23C7DFB44((uint64_t)v14, v15, v16, v17);
  v19 = a4(a1, v18);
  sub_23C7E1BB4(v19, v20, v21, v22, v23, v24, v25, v26, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v70[0]);
  return v19;
}

void static TableRecord.exists<A>(_:key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  uint64_t v26;

  sub_23C7DEF5C();
  v22 = v0;
  v23 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_23C7E2560();
  sub_23C7EE18C();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((char *)&v22 - v15, v12, v8);
  sub_23C7DE70C((uint64_t)v16, 0, 1, v8);
  static TableRecord.filter<A>(key:)(v25, v16, v10, v8, v6, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v16, v13);
  sub_23C7E0718(&v26, v25);
  v17 = sub_23C7E0718(&v24, v25);
  v21 = sub_23C7E6E24((uint64_t)v17, v18, v19, v20);
  QueryInterfaceRequest.isEmpty(_:)(v23, v21);
  sub_23C7DB738();
  sub_23C7DEF28();
}

void static TableRecord<>.exists(_:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;

  v2 = sub_23C7EDC84(a1, a2);
  v3 = static TableRecord<>.filter(id:)(v2);
  v11 = sub_23C7E4068(v3, v4, v5, v6, v7, v8, v9, v10, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44,
          v46,
          v48,
          v50,
          v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66);
  v15 = sub_23C7E16A8((uint64_t)v11, v12, v13, v14);
  v16 = sub_23C7E3200(v15);
  sub_23C7E1BB4(v16, v17, v18, v19, v20, v21, v22, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67);
  sub_23C7E68F4();
  sub_23C7E6228();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v2 = sub_23C7EDC84(a1, a2);
  static TableRecord<>.filter(id:)(v2, v3, v4, v5, v6, v7, v7, v8);
  v17 = sub_23C7E4068(v9, v10, v11, v12, v13, v14, v15, v16, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50,
          v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70,
          v72);
  v21 = sub_23C7E16A8((uint64_t)v17, v18, v19, v20);
  v22 = sub_23C7E3200(v21);
  sub_23C7E1BB4(v22, v23, v24, v25, v26, v27, v28, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73);
  sub_23C7E68F4();
  sub_23C7E6228();
}

void static TableRecord.exists(_:key:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  sub_23C7E11C0(a1, a2);
  static TableRecord.filter(key:)();
  v10 = sub_23C7E4068(v2, v3, v4, v5, v6, v7, v8, v9, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43,
          v45,
          v47,
          v49,
          v51,
          v53,
          v55,
          v57,
          v59,
          v61,
          v63,
          v65);
  v14 = sub_23C7E16A8((uint64_t)v10, v11, v12, v13);
  v15 = sub_23C7E3200(v14);
  sub_23C7E1BB4(v15, v16, v17, v18, v19, v20, v21, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66);
  sub_23C7E68F4();
  sub_23C7E6228();
}

void static TableRecord.deleteAll<A>(_:keys:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[168];
  _QWORD v18[22];

  sub_23C7DEF5C();
  v15 = v0;
  v2 = v1;
  v4 = v3;
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *))(v7 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getAssociatedTypeWitness();
  v8 = sub_23C9111B4();
  v18[0] = v8;
  v9 = sub_23C91119C();
  MEMORY[0x242626100](MEMORY[0x24BEE12E0], v9);
  if ((sub_23C911364() & 1) != 0)
  {
    sub_23C7DC514();
  }
  else
  {
    v18[0] = v8;
    MEMORY[0x242626100](MEMORY[0x24BEE12C8], v9);
    static TableRecord.filter<A>(keys:)((uint64_t)v18, v4, v9, v2);
    sub_23C7DC514();
    sub_23C7E0718(v18, v17);
    v10 = sub_23C7E0718(&v16, v17);
    sub_23C7E6E24((uint64_t)v10, v11, v12, v13);
    QueryInterfaceRequest.deleteAll(_:)();
    sub_23C7DB738();
  }
  sub_23C7DEF28();
}

void static TableRecord.deleteOne<A>(_:key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  sub_23C7DEF5C();
  v19[2] = v2;
  v20 = v0;
  v19[0] = v3;
  v19[1] = v4;
  v6 = v5;
  v8 = v7;
  v9 = sub_23C7E2560();
  sub_23C7EE18C();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v19 - v12;
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v13, v8, v9);
  if (sub_23C7DE718((uint64_t)v13, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v6);
    sub_23C894358(v6, v6);
    sub_23C7E980C();
    sub_23C82D054();
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v17, v16, v6);
    sub_23C8909A4();
    v18 = sub_23C91119C();
    MEMORY[0x242626100](MEMORY[0x24BEE12C8], v18);
    static TableRecord.deleteAll<A>(_:keys:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v6);
  }
  sub_23C7DEF28();
}

void static TableRecord<>.deleteAll<A>(_:ids:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[21];
  uint64_t v19[22];

  if ((sub_23C7E4448(a1) & 1) == 0)
  {
    v1 = sub_23C7EC794();
    static TableRecord<>.filter<A>(ids:)(v1, v2, v3, v4);
    v5 = sub_23C7E0718(v18, v19);
    sub_23C7DFB44((uint64_t)v5, v6, v7, v8);
    sub_23C7E5F34();
    sub_23C7DC5E8(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18[0], v18[1], v18[2], v18[3], v18[4], v18[5], v18[6], v18[7], v18[8], v18[9],
      v18[10],
      v18[11],
      v18[12],
      v18[13],
      v18[14],
      v18[15],
      v18[16],
      v18[17],
      v18[18],
      v18[19],
      v18[20],
      v19[0]);
  }
  sub_23C7E2074();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[21];
  uint64_t v21[22];

  if ((sub_23C7E4448(a1) & 1) == 0)
  {
    v1 = sub_23C7EC794();
    static TableRecord<>.filter<A>(ids:)(v1, v2, v3, v4, v5, v6);
    v7 = sub_23C7E0718(v20, v21);
    sub_23C7DFB44((uint64_t)v7, v8, v9, v10);
    sub_23C7E5F34();
    sub_23C7DC5E8(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20[0], v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7], v20[8], v20[9],
      v20[10],
      v20[11],
      v20[12],
      v20[13],
      v20[14],
      v20[15],
      v20[16],
      v20[17],
      v20[18],
      v20[19],
      v20[20],
      v21[0]);
  }
  sub_23C7E2074();
}

BOOL static TableRecord<>.deleteOne(_:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C894358(AssociatedTypeWitness, AssociatedTypeWitness);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7E980C();
  sub_23C82D054();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, a2, AssociatedTypeWitness);
  sub_23C8909A4();
  v7 = sub_23C91119C();
  MEMORY[0x242626100](MEMORY[0x24BEE12E0], v7);
  static TableRecord<>.deleteAll<A>(_:ids:)(a1);
  v9 = v8;
  swift_bridgeObjectRelease();
  return v9 > 0;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23C894358(AssociatedTypeWitness, AssociatedTypeWitness);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_23C7E980C();
  sub_23C82D054();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, a2, AssociatedTypeWitness);
  sub_23C8909A4();
  v7 = sub_23C91119C();
  MEMORY[0x242626100](MEMORY[0x24BEE12E0], v7);
  static TableRecord<>.deleteAll<A>(_:ids:)(a1);
  v9 = v8;
  swift_bridgeObjectRelease();
  return v9 > 0;
}

uint64_t static TableRecord.deleteAll(_:keys:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[21];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_23C7E11C0(a1, a2);
  static TableRecord.filter(keys:)();
  v10 = sub_23C7E4068(v2, v3, v4, v5, v6, v7, v8, v9, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27,
          v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38[0]);
  sub_23C7DFB44((uint64_t)v10, v11, v12, v13);
  QueryInterfaceRequest.deleteAll(_:)();
  v15 = v14;
  sub_23C8A2208(v38);
  return v15;
}

BOOL static TableRecord.deleteOne(_:key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23C7E79A8(&qword_256BCC588);
  v4 = sub_23C7DB388();
  *(_OWORD *)(v4 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v4 + 32) = a2;
  sub_23C7DBBB0();
  v5 = static TableRecord.deleteAll(_:keys:)(a1, v4);
  swift_bridgeObjectRelease();
  return v5 > 0;
}

uint64_t static TableRecord.updateAll(_:onConflict:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[21];
  unsigned __int8 v73;

  v7 = *a2;
  v8 = static TableRecord.all()(a4, a5, v72);
  v16 = sub_23C7E4068(v8, v9, v10, v11, v12, v13, v14, v15, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48, v50,
          v52,
          v54,
          v56,
          v58,
          v60,
          v62,
          v64,
          v66,
          v68,
          v70,
          v72[0]);
  v73 = v7;
  v20 = sub_23C7E16A8((uint64_t)v16, v17, v18, v19);
  v21 = QueryInterfaceRequest.updateAll(_:onConflict:_:)(a1, &v73, a3, v20);
  sub_23C7E1BB4(v21, v22, v23, v24, v25, v26, v27, v28, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v72[0]);
  return v21;
}

uint64_t static TableRecord.updateAll(_:onConflict:_:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  uint64_t v11;
  unsigned __int8 v13;

  v13 = *a2;
  sub_23C7E79A8(&qword_25430AF38);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  sub_23C811FD0(a3, inited + 32);
  swift_bridgeObjectRetain();
  sub_23C7FB44C();
  v11 = static TableRecord.updateAll(_:onConflict:_:)(a1, &v13, inited, a5, a6);
  swift_bridgeObjectRelease();
  return v11;
}

id sub_23C8A21D8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE40]), sel_init);
  qword_256BCD2B8 = (uint64_t)result;
  return result;
}

_QWORD *sub_23C8A2208(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[5];
  v3 = a1[14];
  v5 = a1[16];
  swift_release();
  sub_23C7DE934();
  swift_release();
  sub_23C7F1754(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C7F1754(v3);
  sub_23C7F1754(v5);
  return a1;
}

uint64_t dispatch thunk of static TableRecord.databaseTableName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static TableRecord.databaseSelection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_23C8A22E4(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 160) >> 58) & 7;
}

uint64_t sub_23C8A22F0(uint64_t result)
{
  *(_QWORD *)(result + 160) &= 0xE3FFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_23C8A2300()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23C8A230C()
{
  return sub_23C910E18();
}

GRDBInternal::FTS4 __swiftcall FTS4.init()()
{
  _QWORD *v0;
  GRDBInternal::FTS4 result;

  *v0 = 879981670;
  v0[1] = 0xE400000000000000;
  return result;
}

void FTS4.moduleName.getter()
{
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DB390();
}

double FTS4.makeTableDefinition(configuration:)(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *a1;
  type metadata accessor for FTS4TableDefinition();
  v2 = swift_allocObject();
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_BYTE *)(v2 + 16) = v1;
  return result;
}

uint64_t type metadata accessor for FTS4TableDefinition()
{
  return objc_opt_self();
}

uint64_t FTS4.moduleArguments(for:in:)(uint64_t *a1)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63[6];
  _WORD v64[8];
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[2];

  sub_23C7E6180();
  v4 = a1[3];
  if (v4 >> 62)
  {
    sub_23C7DBCC8();
    v5 = sub_23C9117C0();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_23C7DBCC8();
  }
  v6 = MEMORY[0x24BEE4AF8];
  v62 = a1;
  if (v5)
  {
    if (v5 >= 1)
    {
      v7 = 0;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x242625290](v7, v4);
        }
        else
        {
          v8 = *(_QWORD *)(v4 + 8 * v7 + 32);
          swift_retain();
        }
        if (*(_BYTE *)(v8 + 33) == 1)
        {
          strcpy((char *)v69, "languageid=\"");
          BYTE5(v69[1]) = 0;
          HIWORD(v69[1]) = -5120;
          swift_bridgeObjectRetain();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          sub_23C7E3164();
          v10 = v69[0];
          v9 = v69[1];
          if ((sub_23C7DFC88() & 1) == 0)
          {
            sub_23C7E8598();
            v6 = v11;
          }
        }
        else
        {
          v13 = *(_QWORD *)(v8 + 16);
          v12 = *(_QWORD *)(v8 + 24);
          swift_bridgeObjectRetain();
          if ((sub_23C7DFC88() & 1) == 0)
          {
            sub_23C7E8598();
            v6 = v19;
          }
          v14 = *(_QWORD *)(v6 + 16);
          a1 = (uint64_t *)(v14 + 1);
          if (v14 >= *(_QWORD *)(v6 + 24) >> 1)
          {
            sub_23C7E92E4();
            v6 = v20;
          }
          *(_QWORD *)(v6 + 16) = a1;
          v15 = v6 + 16 * v14;
          *(_QWORD *)(v15 + 32) = v13;
          *(_QWORD *)(v15 + 40) = v12;
          if ((*(_BYTE *)(v8 + 32) & 1) != 0)
            goto LABEL_21;
          strcpy((char *)v69, "notindexed=");
          HIDWORD(v69[1]) = -352321536;
          swift_bridgeObjectRetain();
          sub_23C910F5C();
          swift_bridgeObjectRelease();
          v10 = v69[0];
          v9 = v69[1];
        }
        v16 = *(_QWORD *)(v6 + 16);
        a1 = (uint64_t *)(v16 + 1);
        if (v16 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_23C7E92E4();
          v6 = v18;
        }
        *(_QWORD *)(v6 + 16) = a1;
        v17 = v6 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v10;
        *(_QWORD *)(v17 + 40) = v9;
LABEL_21:
        ++v7;
        swift_release();
        if (v5 == v7)
          goto LABEL_22;
      }
    }
    __break(1u);
LABEL_78:
    sub_23C7E8598();
    v6 = v49;
    goto LABEL_34;
  }
LABEL_22:
  sub_23C7DB62C();
  v2 = v62;
  sub_23C7E6180();
  v21 = v62[8];
  if (!v21)
    goto LABEL_37;
  v5 = v62[7];
  v22 = v62[9];
  if (*(_QWORD *)(v22 + 16))
  {
    sub_23C8A3EBC();
    swift_bridgeObjectRetain();
    sub_23C7DF074();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    v23 = v68;
    v61 = v67;
    v24 = *(_QWORD *)(v22 + 16);
    if (v24)
    {
      v59 = v68;
      v60 = v21;
      v65 = MEMORY[0x24BEE4AF8];
      sub_23C7DBCC8();
      sub_23C7E649C();
      v25 = v65;
      v26 = v22 + 40;
      do
      {
        v67 = 34;
        v68 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_23C910F5C();
        sub_23C7E3164();
        swift_bridgeObjectRelease();
        v65 = v25;
        v27 = *(_QWORD *)(v25 + 16);
        if (v27 >= *(_QWORD *)(v25 + 24) >> 1)
        {
          sub_23C8A3F10();
          v25 = v65;
        }
        v26 += 16;
        *(_QWORD *)(v25 + 16) = v27 + 1;
        v28 = v25 + 16 * v27;
        *(_QWORD *)(v28 + 32) = 34;
        *(_QWORD *)(v28 + 40) = 0xE100000000000000;
        --v24;
      }
      while (v24);
      sub_23C87F2B4(v5, v60);
      sub_23C7DE934();
      v2 = v62;
      v23 = v59;
    }
    else
    {
      sub_23C8A3EE8();
      v25 = MEMORY[0x24BEE4AF8];
    }
    v67 = v25;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    a1 = &v67;
    sub_23C7DB744();
    v5 = v29;
    swift_bridgeObjectRelease();
    v67 = v61;
    v68 = v23;
    swift_bridgeObjectRetain();
    sub_23C7E8ED4();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23C8A3EBC();
    swift_bridgeObjectRetain();
    sub_23C7DF074();
    sub_23C8A3EE8();
  }
  swift_bridgeObjectRelease();
  v4 = v67;
  v1 = v68;
  if ((sub_23C7DFC88() & 1) == 0)
    goto LABEL_78;
LABEL_34:
  sub_23C7EC7BC();
  if (v30)
  {
    sub_23C7E92E4();
    v6 = v50;
  }
  *(_QWORD *)(v6 + 16) = a1;
  v31 = v6 + 16 * v5;
  *(_QWORD *)(v31 + 32) = v4;
  *(_QWORD *)(v31 + 40) = v1;
LABEL_37:
  v32 = v2[5];
  if (*((_BYTE *)v2 + 48) == 1 || v32)
  {
    sub_23C7E9BD8();
    sub_23C8A3D34();
    sub_23C7E8ED4();
    sub_23C8A3D3C();
    sub_23C7E3164();
    v34 = v67;
    v33 = v68;
    if ((sub_23C7DFC88() & 1) == 0)
    {
      sub_23C7E8598();
      v6 = v47;
    }
    sub_23C7EC7BC();
    if (v30)
    {
      sub_23C7E92E4();
      v6 = v48;
    }
    *(_QWORD *)(v6 + 16) = &v67;
    v35 = v6 + 16 * v32;
    *(_QWORD *)(v35 + 32) = v34;
    *(_QWORD *)(v35 + 40) = v33;
  }
  sub_23C7E6180();
  if (v2[11])
  {
    v65 = 0x73736572706D6F63;
    v66 = 0xEA0000000000223DLL;
    sub_23C7DBCC8();
    sub_23C7E599C();
    sub_23C7DB62C();
    sub_23C7E3164();
    if ((sub_23C7DFC88() & 1) == 0)
    {
      sub_23C7E8598();
      v6 = v51;
    }
    sub_23C7EC7BC();
    if (v30)
    {
      sub_23C7E92E4();
      v6 = v52;
    }
    sub_23C7E6D6C();
  }
  sub_23C7E6180();
  if (v2[13])
  {
    strcpy((char *)v64, "uncompress=\"");
    HIBYTE(v64[6]) = 0;
    v64[7] = -5120;
    sub_23C7DBCC8();
    sub_23C7E599C();
    sub_23C7DB62C();
    sub_23C7E3164();
    if ((sub_23C7DFC88() & 1) == 0)
    {
      sub_23C7E8598();
      v6 = v53;
    }
    sub_23C7EC7BC();
    if (v30)
    {
      sub_23C7E92E4();
      v6 = v54;
    }
    sub_23C7E6D6C();
  }
  sub_23C7E6180();
  if (v2[15])
  {
    v63[3] = 0x666E69686374616DLL;
    v63[4] = 0xEB00000000223D6FLL;
    sub_23C7DBCC8();
    sub_23C7E599C();
    sub_23C7DB62C();
    sub_23C7E3164();
    if ((sub_23C7DFC88() & 1) == 0)
    {
      sub_23C7E8598();
      v6 = v55;
    }
    sub_23C7EC7BC();
    if (v30)
    {
      sub_23C7E92E4();
      v6 = v56;
    }
    sub_23C7E6D6C();
  }
  sub_23C7E6180();
  if (v2[16])
  {
    v63[1] = 0x223D786966657270;
    v63[2] = 0xE800000000000000;
    swift_bridgeObjectRetain_n();
    sub_23C7FCBA8();
    v37 = v36;
    sub_23C7DE934();
    v63[0] = v37;
    sub_23C82FE94(v63);
    sub_23C7DE934();
    v38 = *(_QWORD *)(v63[0] + 16);
    if (v38)
    {
      v63[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v39 = 0;
      v40 = v63[0];
      do
      {
        v41 = sub_23C911880();
        v43 = v42;
        v63[0] = v40;
        v44 = *(_QWORD *)(v40 + 16);
        if (v44 >= *(_QWORD *)(v40 + 24) >> 1)
        {
          sub_23C8A3F10();
          v40 = v63[0];
        }
        ++v39;
        *(_QWORD *)(v40 + 16) = v44 + 1;
        v45 = v40 + 16 * v44;
        *(_QWORD *)(v45 + 32) = v41;
        *(_QWORD *)(v45 + 40) = v43;
      }
      while (v38 != v39);
      swift_release();
    }
    else
    {
      swift_release();
      v40 = MEMORY[0x24BEE4AF8];
    }
    v63[0] = v40;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C7DB744();
    swift_bridgeObjectRelease();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    sub_23C7E3164();
    if ((sub_23C7DFC88() & 1) == 0)
    {
      sub_23C7E8598();
      v6 = v57;
    }
    sub_23C7EC7BC();
    if (v30)
    {
      sub_23C7E92E4();
      v6 = v58;
    }
    sub_23C7E6D6C();
  }
  return v6;
}

uint64_t FTS4.database(_:didCreate:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  GRDBInternal::StatementArguments v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  GRDBInternal::StatementArguments v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (*(_BYTE *)(a4 + 48) == 1)
  {
    v5 = *(_QWORD *)(a4 + 32);
    v6 = *(_QWORD *)(a4 + 40);
    swift_bridgeObjectRetain();
    Database.primaryKey(_:)(v5, v6, &v28);
    if (v4)
    {
      return sub_23C7DF42C();
    }
    else
    {
      if (v30)
      {
        if (v30 == 1)
          v8 = 1;
        else
          v8 = 2;
        sub_23C7F9150(v28, v29, v8);
        v24 = 0x6469776F72;
        v25 = 0xE500000000000000;
      }
      else
      {
        v24 = v28;
        v25 = v29;
      }
      v28 = 34;
      v29 = 0xE100000000000000;
      sub_23C910F5C();
      sub_23C7E3164();
      v28 = 34;
      v29 = 0xE100000000000000;
      sub_23C910F5C();
      sub_23C7E3164();
      sub_23C7DF42C();
      swift_beginAccess();
      v9 = sub_23C7DB3D4();
      sub_23C82D118(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C7E11D4();
      sub_23C7FA75C((uint64_t)&unk_250D86A20);
      swift_bridgeObjectRelease();
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C7ED150();
      sub_23C7DB3DC();
      sub_23C7E79A8(&qword_25430DA10);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23C912A20;
      *(_QWORD *)(inited + 32) = v24;
      *(_QWORD *)(inited + 40) = v25;
      v26[0] = inited;
      swift_bridgeObjectRetain();
      sub_23C7E11D4();
      v11 = *(_QWORD *)(v26[0] + 16);
      if (v11)
      {
        v27 = MEMORY[0x24BEE4AF8];
        sub_23C7E649C();
        v12 = v27;
        v13 = v26[0] + 40;
        do
        {
          v26[0] = 779576686;
          v26[1] = 0xE400000000000000;
          swift_bridgeObjectRetain();
          sub_23C7E9848();
          sub_23C7E3164();
          sub_23C7E6918();
          sub_23C7DC474();
          swift_bridgeObjectRelease();
          v27 = v12;
          v14 = *(_QWORD *)(v12 + 16);
          if (v14 >= *(_QWORD *)(v12 + 24) >> 1)
          {
            sub_23C7E649C();
            v12 = v27;
          }
          v13 += 16;
          *(_QWORD *)(v12 + 16) = v14 + 1;
          v15 = v12 + 16 * v14;
          *(_QWORD *)(v15 + 32) = 779576686;
          *(_QWORD *)(v15 + 40) = 0xE400000000000000;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7DB624();
      }
      sub_23C7ED150();
      swift_bridgeObjectRelease();
      v26[0] = 778333295;
      v26[1] = 0xE400000000000000;
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E96CC();
      sub_23C7DB624();
      sub_23C911634();
      sub_23C910F5C();
      sub_23C910F5C();
      sub_23C7EE2F4();
      sub_23C7E9848();
      sub_23C7EDB84();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E96CC();
      sub_23C7DB624();
      sub_23C7E65DC();
      sub_23C910F5C();
      sub_23C7E25F0();
      sub_23C910F5C();
      sub_23C7E1BC0();
      sub_23C7E6918();
      sub_23C910F5C();
      sub_23C7E6918();
      sub_23C7EE2F4();
      sub_23C7E9848();
      sub_23C7EDB84();
      sub_23C7E9848();
      sub_23C7E3164();
      sub_23C7DC474();
      sub_23C7E9848();
      sub_23C7DC474();
      sub_23C7E65DC();
      sub_23C7E9848();
      sub_23C7E25F0();
      sub_23C910F5C();
      sub_23C7E1BC0();
      sub_23C7DE9D4();
      sub_23C7DBCD0();
      sub_23C910F5C();
      sub_23C7E6918();
      sub_23C7E2168();
      sub_23C910F5C();
      sub_23C7EDB84();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E96CC();
      sub_23C7DB624();
      sub_23C7EE1A0();
      sub_23C7E9848();
      sub_23C8A3ED4();
      sub_23C7E6918();
      sub_23C7E06E4();
      sub_23C8A3EF8();
      sub_23C7EE530();
      sub_23C7DE9D4();
      sub_23C910F5C();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C7E2168();
      sub_23C910F5C();
      sub_23C7EDB84();
      sub_23C7E8E10();
      sub_23C7E3164();
      sub_23C7DB624();
      sub_23C7E96CC();
      sub_23C7DB624();
      sub_23C910F5C();
      sub_23C7E8E10();
      sub_23C7DB624();
      sub_23C8A3ED4();
      sub_23C7E6918();
      sub_23C7E06E4();
      sub_23C8A3EF8();
      sub_23C7DB3DC();
      sub_23C7EE530();
      sub_23C7DE9D4();
      sub_23C7DBCD0();
      sub_23C910F5C();
      v16._countAndFlagsBits = 0;
      v17 = MEMORY[0x24BEE4B00];
      v18 = MEMORY[0x24BEE4AF8];
      v26[0] = MEMORY[0x24BEE4AF8];
      v26[1] = MEMORY[0x24BEE4B00];
      v19.values._rawValue = v26;
      v16._object = (void *)0xE000000000000000;
      Database.execute(sql:arguments:)(v16, v19);
      if (v20)
      {
        swift_bridgeObjectRelease();
        sub_23C7DB398();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23C7DB398();
        sub_23C7DB624();
        swift_bridgeObjectRelease();
        v26[0] = 0;
        v26[1] = 0xE000000000000000;
        sub_23C911634();
        swift_bridgeObjectRelease();
        strcpy((char *)v26, "INSERT INTO ");
        BYTE5(v26[1]) = 0;
        HIWORD(v26[1]) = -5120;
        sub_23C7E1784();
        sub_23C7E06E4();
        sub_23C7E1784();
        sub_23C7DB398();
        sub_23C7EE1A0();
        v21._countAndFlagsBits = v26[0];
        v22 = (void *)v26[1];
        v26[0] = v18;
        v26[1] = v17;
        v23.values._rawValue = v26;
        v21._object = v22;
        Database.execute(sql:arguments:)(v21, v23);
        sub_23C7DB398();
        sub_23C7DB624();
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_23C8A3474()
{
  FTS4.makeTableDefinition()();
}

void sub_23C8A3480(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  FTS4.makeTableDefinition(configuration:)(a1);
  *a2 = v3;
}

uint64_t sub_23C8A34A4(uint64_t **a1)
{
  return FTS4.moduleArguments(for:in:)(*a1);
}

uint64_t sub_23C8A34CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return FTS4.database(_:didCreate:using:)(a1, a2, a3, *a4);
}

void FTS4TableDefinition.tokenizer.getter(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23C7E6180();
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_23C87F284(v3, v4);
  sub_23C7DF890();
}

uint64_t FTS4TableDefinition.tokenizer.setter(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  sub_23C7E6180();
  v3 = v1[7];
  v4 = v1[8];
  *(_OWORD *)(v1 + 7) = v6;
  v1[9] = v2;
  return sub_23C87F2B4(v3, v4);
}

void FTS4TableDefinition.tokenizer.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t FTS4TableDefinition.content.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_23C8A3D34();
  return v1;
}

uint64_t sub_23C8A35E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FTS4TableDefinition.content.setter(v1, v2);
}

uint64_t FTS4TableDefinition.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  *(_BYTE *)(v2 + 48) = 0;
  return sub_23C8A3D3C();
}

void FTS4TableDefinition.content.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = FTS4TableDefinition.content.getter();
  a1[1] = v3;
  sub_23C7DB390();
}

uint64_t sub_23C8A3670(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return sub_23C8A3F04();
  swift_bridgeObjectRetain();
  sub_23C8A3F04();
  return swift_bridgeObjectRelease();
}

void FTS4TableDefinition.compress.getter()
{
  sub_23C7E6180();
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DF890();
}

void FTS4TableDefinition.compress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7E6180();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  swift_bridgeObjectRelease();
  sub_23C7DF304();
}

void FTS4TableDefinition.compress.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

void FTS4TableDefinition.uncompress.getter()
{
  sub_23C7E6180();
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DF890();
}

void FTS4TableDefinition.uncompress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7E6180();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  swift_bridgeObjectRelease();
  sub_23C7DF304();
}

void FTS4TableDefinition.uncompress.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

void FTS4TableDefinition.matchinfo.getter()
{
  sub_23C7E6180();
  sub_23C7DB3D4();
  sub_23C7DF8B0();
  sub_23C7DF890();
}

void FTS4TableDefinition.matchinfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23C7E6180();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  swift_bridgeObjectRelease();
  sub_23C7DF304();
}

void FTS4TableDefinition.matchinfo.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t FTS4TableDefinition.prefixes.getter()
{
  sub_23C7E6180();
  return swift_bridgeObjectRetain();
}

void FTS4TableDefinition.prefixes.setter(uint64_t a1)
{
  uint64_t v1;

  sub_23C7E6180();
  *(_QWORD *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  sub_23C7DF890();
}

void FTS4TableDefinition.prefixes.modify()
{
  sub_23C7E6180();
  sub_23C7DB390();
}

uint64_t FTS4TableDefinition.column(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for FTS4ColumnDefinition();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_WORD *)(v5 + 32) = 1;
  sub_23C7E6180();
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  MEMORY[0x242624CE4](v6);
  sub_23C7DD090(*(_QWORD *)((*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFF8) + 0x10));
  sub_23C911148();
  sub_23C9110DC();
  swift_endAccess();
  return v5;
}

Swift::Void __swiftcall FTS4TableDefinition.synchronize(withTable:)(Swift::String withTable)
{
  uint64_t v1;

  *(Swift::String *)(v1 + 32) = withTable;
  *(_BYTE *)(v1 + 48) = 1;
  sub_23C8A3D3C();
  swift_bridgeObjectRetain();
}

uint64_t FTS4TableDefinition.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  sub_23C8A3D3C();
  sub_23C87F2B4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FTS4TableDefinition.__deallocating_deinit()
{
  FTS4TableDefinition.deinit();
  return swift_deallocClassInstance();
}

uint64_t FTS4ColumnDefinition.notIndexed()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 32) = 0;
  return swift_retain();
}

uint64_t FTS4ColumnDefinition.asLanguageId()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 33) = 1;
  return swift_retain();
}

uint64_t FTS4ColumnDefinition.deinit()
{
  uint64_t v0;

  sub_23C7EE024();
  return v0;
}

uint64_t FTS4ColumnDefinition.__deallocating_deinit()
{
  sub_23C7EE024();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.dropFTS4SynchronizationTriggers(forTable:)(Swift::String forTable)
{
  Swift::String v1;
  GRDBInternal::StatementArguments v2;
  _QWORD v3[2];

  sub_23C911634();
  sub_23C910F5C();
  sub_23C7E4EF8();
  sub_23C7EDB84();
  sub_23C7E9848();
  sub_23C7E3164();
  sub_23C7DC474();
  sub_23C7E9848();
  sub_23C7DC474();
  sub_23C7E9848();
  sub_23C7E4EF8();
  sub_23C7EDB84();
  sub_23C7DE9D4();
  sub_23C7E3164();
  sub_23C7DBCD0();
  sub_23C7DE9D4();
  sub_23C7DBCD0();
  sub_23C7E9848();
  sub_23C7E4EF8();
  sub_23C7EDB84();
  sub_23C7DE9D4();
  sub_23C7E3164();
  sub_23C7DBCD0();
  sub_23C7DE9D4();
  sub_23C7DBCD0();
  sub_23C7E9848();
  sub_23C7E4EF8();
  sub_23C7EDB84();
  sub_23C7E1784();
  sub_23C7E3164();
  sub_23C7DB398();
  sub_23C7E1784();
  sub_23C7DB398();
  sub_23C7E06E4();
  v1._countAndFlagsBits = 0;
  v3[0] = MEMORY[0x24BEE4AF8];
  v3[1] = MEMORY[0x24BEE4B00];
  v2.values._rawValue = v3;
  v1._object = (void *)0xE000000000000000;
  Database.execute(sql:arguments:)(v1, v2);
  sub_23C7DB398();
  sub_23C7DC474();
  sub_23C7DB3DC();
}

uint64_t sub_23C8A3D34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8A3D3C()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FTS4ColumnDefinition()
{
  return objc_opt_self();
}

uint64_t sub_23C8A3D64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FTS4TableDefinition.content.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for FTS4()
{
  return &type metadata for FTS4;
}

uint64_t method lookup function for FTS4TableDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for FTS4ColumnDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for FTS4TableDefinition.ContentMode()
{
  return sub_23C8A3D3C();
}

uint64_t _s12GRDBInternal19FTS4TableDefinitionC11ContentModeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23C8A3D34();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FTS4TableDefinition.ContentMode(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23C8A3D34();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C8A3D3C();
  return a1;
}

uint64_t assignWithTake for FTS4TableDefinition.ContentMode(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C8A3D3C();
  return a1;
}

ValueMetadata *type metadata accessor for FTS4TableDefinition.ContentMode()
{
  return &type metadata for FTS4TableDefinition.ContentMode;
}

uint64_t sub_23C8A3EBC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C87F284(v1, v0);
}

uint64_t sub_23C8A3ED4()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8A3EE8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_23C87F2B4(v1, v0);
}

uint64_t sub_23C8A3EF8()
{
  return sub_23C910F5C();
}

uint64_t sub_23C8A3F04()
{
  uint64_t v0;
  uint64_t v1;

  return FTS4TableDefinition.content.setter(v1, v0);
}

void sub_23C8A3F10()
{
  sub_23C7E649C();
}

uint64_t sub_23C8A3F1C()
{
  uint64_t (**v0)(_QWORD *);
  uint64_t (*v1)(_QWORD *);
  _QWORD v3[2];
  char v4;

  v1 = *v0;
  v3[0] = 0;
  v3[1] = 0;
  v4 = 4;
  return v1(v3);
}

uint64_t sub_23C8A3F5C(char a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1 & 1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

uint64_t sub_23C8A3F9C(char a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

uint64_t sub_23C8A3FDC(__int16 a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

uint64_t sub_23C8A401C(int a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

void sub_23C8A405C(uint64_t a1)
{
  void (**v1)(_QWORD *);
  void (*v2)(_QWORD *);
  _QWORD v3[2];
  char v4;

  v2 = *v1;
  v3[0] = a1;
  v3[1] = 0;
  v4 = 0;
  v2(v3);
  sub_23C7DF890();
}

uint64_t sub_23C8A4090(unsigned __int8 a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

uint64_t sub_23C8A40D0(unsigned __int16 a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

uint64_t sub_23C8A4110(unsigned int a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0;
  v5 = 0;
  return v2(v4);
}

void sub_23C8A4150(uint64_t a1)
{
  void (**v1)(_QWORD *);
  void (*v2)(_QWORD *);
  _QWORD v3[2];
  char v4;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *v1;
    v3[0] = a1;
    v3[1] = 0;
    v4 = 0;
    v2(v3);
    sub_23C7DF890();
  }
}

uint64_t sub_23C8A4190(float a1)
{
  uint64_t (**v1)(double *);
  uint64_t (*v2)(double *);
  double v4[2];
  char v5;

  v2 = *v1;
  v4[0] = a1;
  v4[1] = 0.0;
  v5 = 1;
  return v2(v4);
}

uint64_t sub_23C8A41D8(double a1)
{
  uint64_t (**v1)(_QWORD *);
  uint64_t (*v2)(_QWORD *);
  _QWORD v4[2];
  char v5;

  v2 = *v1;
  *(double *)v4 = a1;
  v4[1] = 0;
  v5 = 1;
  return v2(v4);
}

uint64_t sub_23C8A421C(uint64_t a1, uint64_t a2)
{
  void (**v2)(_QWORD *);
  void (*v3)(_QWORD *);
  _QWORD v5[2];
  char v6;

  v3 = *v2;
  v5[0] = a1;
  v5[1] = a2;
  v6 = 2;
  swift_bridgeObjectRetain();
  v3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8A4278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(__int128 *);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  sub_23C7E79A8(&qword_25430CEB8);
  if (swift_dynamicCast())
  {
    sub_23C7DB5CC(&v20, (uint64_t)v23);
    v9 = (void (*)(__int128 *))*v3;
    v10 = v24;
    v11 = v25;
    sub_23C7E7E34(v23, v24);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 24))(&v20, v10, v11);
    v12 = v20;
    v13 = v21;
    v18 = v20;
    v19 = v21;
    v9(&v18);
    sub_23C7E5640(v12, *((unint64_t *)&v12 + 1), v13);
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v23);
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    sub_23C7E7A6C((uint64_t)&v20);
    v16 = *v3;
    v15 = v3[1];
    type metadata accessor for DatabaseValueEncoder();
    swift_allocObject();
    swift_retain();
    sub_23C8A4528(v16, v15);
    sub_23C8A469C(a1, a2, a3);
    return swift_release();
  }
}

uint64_t sub_23C8A4408()
{
  return sub_23C818210();
}

uint64_t sub_23C8A4410()
{
  return sub_23C8A3F1C();
}

uint64_t sub_23C8A4424(char a1)
{
  return sub_23C8A3F5C(a1);
}

uint64_t sub_23C8A4438(uint64_t a1, uint64_t a2)
{
  return sub_23C8A421C(a1, a2);
}

uint64_t sub_23C8A444C(double a1)
{
  return sub_23C8A41D8(a1);
}

uint64_t sub_23C8A4460(float a1)
{
  return sub_23C8A4190(a1);
}

void sub_23C8A4474(uint64_t a1)
{
  sub_23C8A405C(a1);
}

uint64_t sub_23C8A4488(char a1)
{
  return sub_23C8A3F9C(a1);
}

uint64_t sub_23C8A449C(__int16 a1)
{
  return sub_23C8A3FDC(a1);
}

uint64_t sub_23C8A44B0(int a1)
{
  return sub_23C8A401C(a1);
}

void sub_23C8A44C4(uint64_t a1)
{
  sub_23C8A4150(a1);
}

uint64_t sub_23C8A44D8(unsigned __int8 a1)
{
  return sub_23C8A4090(a1);
}

uint64_t sub_23C8A44EC(unsigned __int16 a1)
{
  return sub_23C8A40D0(a1);
}

uint64_t sub_23C8A4500(unsigned int a1)
{
  return sub_23C8A4110(a1);
}

uint64_t sub_23C8A4514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8A4278(a1, a2, a3);
}

uint64_t sub_23C8A4528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = 0;
  sub_23C91176C();
  *(_QWORD *)(v2 + 40) = sub_23C910DAC();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_23C8A458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + 32) = 1;
  nullsub_1(MEMORY[0x24BEE4AF8]);
  v7 = type metadata accessor for JSONRequiredEncoder.KeyedContainer(0, a2, a3, v6);
  MEMORY[0x242626100](&unk_23C9182A4, v7);
  return sub_23C91185C();
}

unint64_t sub_23C8A4614@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t result;

  *(_BYTE *)(v1 + 32) = 1;
  a1[3] = &type metadata for JSONRequiredEncoder;
  result = sub_23C81AB7C();
  a1[4] = result;
  *a1 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t sub_23C8A4658@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  a1[3] = &type metadata for DatabaseValueEncodingContainer;
  a1[4] = sub_23C8A4D04();
  *a1 = v4;
  a1[1] = v3;
  return swift_retain();
}

void sub_23C8A469C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  unint64_t v43;
  id v44;

  v5 = v3;
  v9 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23C910854();
  MEMORY[0x24BDAC7A8](v11);
  v37 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23C91089C();
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v34 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23C910878();
  v32 = *(_QWORD *)(v15 - 8);
  v33 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23C91086C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DatabaseValueEncoder();
  v42 = v30;
  v29 = sub_23C8A4D40();
  v43 = v29;
  v41[0] = v5;
  swift_retain();
  v38 = a1;
  v39 = a2;
  v40 = a3;
  sub_23C910E00();
  v22 = v4;
  if (v4)
  {
    v28 = v5;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v41);
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v41);
    if (*(_BYTE *)(v5 + 32) != 1)
      return;
    v28 = v5;
    sub_23C7DAF10();
    v22 = (void *)swift_allocError();
    swift_willThrow();
  }
  v44 = v22;
  v23 = v22;
  sub_23C7E79A8(&qword_25430CCC8);
  if (swift_dynamicCast())
  {

    sub_23C9108D8();
    swift_allocObject();
    sub_23C9108CC();
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BDCB320], v18);
    sub_23C910884();
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v17, *MEMORY[0x24BDCB340], v33);
    sub_23C910890();
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v34, *MEMORY[0x24BDCB390], v36);
    sub_23C9108A8();
    sub_23C910848();
    sub_23C910860();
    v24 = sub_23C9108B4();
    v26 = v25;
    sub_23C910EA8();
    sub_23C910E90();
    if (!v27)
    {
      __break(1u);
      return;
    }
    v42 = v30;
    v43 = v29;
    v41[0] = v28;
    swift_retain();
    sub_23C910F68();
    sub_23C7EEE1C(v24, v26);
    swift_bridgeObjectRelease();
    swift_release();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v41);
  }

}

uint64_t sub_23C8A4A44()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23C8A4A68()
{
  sub_23C8A4A44();
  return swift_deallocClassInstance();
}

uint64_t sub_23C8A4A84()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C8A4A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23C8A458C(a1, a2, a3);
}

unint64_t sub_23C8A4AB0@<X0>(_QWORD *a1@<X8>)
{
  return sub_23C8A4614(a1);
}

uint64_t sub_23C8A4AD0@<X0>(_QWORD *a1@<X8>)
{
  return sub_23C8A4658(a1);
}

uint64_t DatabaseValueConvertible<>.databaseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = -1;
  type metadata accessor for DatabaseValueEncoder();
  swift_allocObject();
  swift_retain();
  sub_23C8A4528((uint64_t)sub_23C8A4CDC, v7);
  sub_23C8A469C(v3, a1, a2);
  swift_release();
  swift_beginAccess();
  v8 = *(unsigned __int8 *)(v7 + 32);
  if (v8 == 255)
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    sub_23C7E56A4(v10, v9, *(_BYTE *)(v7 + 32));
    result = swift_release();
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = v8;
  }
  return result;
}

uint64_t sub_23C8A4C20()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    sub_23C7E5640(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject();
}

uint64_t sub_23C8A4C50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  v8 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = v5;
  sub_23C7E56A4(v3, v4, v5);
  return sub_23C7F6294(v6, v7, v8);
}

uint64_t sub_23C8A4CDC(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8A4C50(a1, v1);
}

uint64_t type metadata accessor for DatabaseValueEncoder()
{
  return objc_opt_self();
}

unint64_t sub_23C8A4D04()
{
  unint64_t result;

  result = qword_256BCD2C0;
  if (!qword_256BCD2C0)
  {
    result = MEMORY[0x242626100](&unk_23C917EA0, &type metadata for DatabaseValueEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_256BCD2C0);
  }
  return result;
}

unint64_t sub_23C8A4D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256BCD2C8;
  if (!qword_256BCD2C8)
  {
    v1 = type metadata accessor for DatabaseValueEncoder();
    result = MEMORY[0x242626100](&unk_23C917E38, v1);
    atomic_store(result, (unint64_t *)&qword_256BCD2C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValueEncodingContainer()
{
  return &type metadata for DatabaseValueEncodingContainer;
}

void static FTS5TokenizerDescriptor.ascii(separators:tokenCharacters:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for Configuration();
  sub_23C7ED168();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C7DE96C();
  if (*(_QWORD *)(a1 + 16))
  {
    sub_23C7E92FC();
    sub_23C7E85B0();
    sub_23C7E69B0();
    v7 = sub_23C7E0A4C();
    MEMORY[0x24BDAC7A8](v7);
    sub_23C8A5020();
    swift_release();
    sub_23C7FAE44();
  }
  if (*(_QWORD *)(a2 + 16))
  {
    sub_23C7E92FC();
    sub_23C7E85B0();
    sub_23C7DC5F8();
    v8 = sub_23C7E0A4C();
    MEMORY[0x24BDAC7A8](v8);
    sub_23C7DFCE8();
    sub_23C8A5020();
    sub_23C7E6EF0();
    sub_23C7ECCF0();
  }
  *a3 = &unk_250D85490;
  sub_23C7DBCB0();
}

uint64_t sub_23C8A4EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for SchedulingWatchdog();
  if (sub_23C7E3188())
  {
    v4 = sub_23C7E5C18(*(_QWORD *)(v2 + 16));
    if ((v4 & 1) != 0)
    {
      sub_23C7E6388();
      sub_23C7DC484();
      sub_23C7E447C();
      sub_23C7E5F48();
    }
    MEMORY[0x24BDAC7A8](v4);
    sub_23C7E96DC();
    return sub_23C7E6BFC();
  }
  else
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C8A602C();
    *(_QWORD *)(v6 - 16) = a2;
    return sub_23C7E96DC();
  }
}

uint64_t sub_23C8A5020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_23C7E1BE8();
  if (!sub_23C7E3188())
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E79A8(&qword_25430D9F8);
    result = sub_23C7E96DC();
    if (v1)
      return result;
    return v4;
  }
  v2 = sub_23C7E18C4();
  if ((v2 & 1) != 0)
  {
    sub_23C7E6388();
    sub_23C7DC484();
    sub_23C7E447C();
    sub_23C7E5F48();
  }
  MEMORY[0x24BDAC7A8](v2);
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7E96DC();
  result = sub_23C7E9BF8();
  if (!v0)
    return v4;
  return result;
}

void sub_23C8A5158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23C7E1BE8();
  if (sub_23C7E3188())
  {
    v2 = sub_23C7E18C4();
    if ((v2 & 1) != 0)
    {
      sub_23C7E6388();
      sub_23C7DC484();
      sub_23C7E447C();
      sub_23C7E5F48();
    }
    MEMORY[0x24BDAC7A8](v2);
    sub_23C8A602C();
    *(_QWORD *)(v3 - 16) = v1;
    *(_QWORD *)(v3 - 8) = v0;
    sub_23C7E96DC();
    sub_23C7E9BF8();
  }
  else
  {
    MEMORY[0x24BDAC7A8](0);
    sub_23C7E96DC();
  }
  sub_23C7E4BEC();
}

uint64_t FTS5TokenizerDescriptor.components.getter()
{
  return swift_bridgeObjectRetain();
}

GRDBInternal::FTS5TokenizerDescriptor __swiftcall FTS5TokenizerDescriptor.init(components:)(GRDBInternal::FTS5TokenizerDescriptor components)
{
  GRDBInternal::FTS5TokenizerDescriptor *v1;

  if (*((_QWORD *)components.components._rawValue + 2))
  {
    v1->components._rawValue = components.components._rawValue;
  }
  else
  {
    sub_23C7E33BC();
    sub_23C7DC484();
    components.components._rawValue = (void *)sub_23C7E8B58();
    __break(1u);
  }
  return components;
}

uint64_t sub_23C8A52AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  _BYTE __dst[163];
  _QWORD v41[2];
  char v42;
  _QWORD __src[22];
  int v44;

  v4 = v3;
  sub_23C7E79A8(&qword_25430DA10);
  v7 = swift_allocObject();
  v8 = (_QWORD *)v7;
  *(_OWORD *)(v7 + 16) = xmmword_23C9157F0;
  *(_QWORD *)(v7 + 32) = 0x6F74617261706573;
  *(_QWORD *)(v7 + 40) = 0xEA00000000007372;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v34 = v3;
    v35 = (_QWORD *)a3;
    v36 = (_QWORD *)v7;
    v37 = a2;
    __src[0] = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v10 = a2;
    v11 = __src[0];
    v4 = sub_23C87DAD4(v10);
    v13 = v12;
    v15 = v14 & 1;
    v39 = v10 + 56;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v10 + 32))
    {
      if (((*(_QWORD *)(v39 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v10 + 36) != (_DWORD)v13)
        goto LABEL_17;
      v44 = v15;
      v16 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v4);
      v17 = *v16;
      v8 = (_QWORD *)v16[1];
      __src[0] = v11;
      a3 = *(_QWORD *)(v11 + 16);
      v18 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (a3 >= v18 >> 1)
      {
        sub_23C7E649C();
        v10 = v37;
        v11 = __src[0];
      }
      *(_QWORD *)(v11 + 16) = a3 + 1;
      v19 = v11 + 16 * a3;
      *(_QWORD *)(v19 + 32) = v17;
      *(_QWORD *)(v19 + 40) = v8;
      v20 = sub_23C87D9EC(v4, v13, v44 & 1, v10);
      v4 = v20;
      v13 = v21;
      v15 = v22 & 1;
      if (!--v9)
      {
        sub_23C7F91AC(v20, v21, v15);
        a3 = (unint64_t)v35;
        v8 = v36;
        v4 = v34;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = MEMORY[0x24BEE4AF8];
LABEL_12:
  __src[0] = v11;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v23 = sub_23C910E3C();
  v25 = v24;
  swift_bridgeObjectRelease();
  v41[0] = v23;
  v41[1] = v25;
  v42 = 2;
  sub_23C8027EC((uint64_t)v41);
  sub_23C800B48(v41, __src);
  v26 = qword_25430CC40;
  v9 = a1;
  swift_retain();
  if (v26 != -1)
LABEL_18:
    swift_once();
  v27 = qword_254310428;
  swift_retain();
  v28 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_allocObject();
  sub_23C7E30C0(v9, v27, v28);
  memcpy(__dst, __src, sizeof(__dst));
  sub_23C7EA244();
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v8[2] = 0;
    swift_release();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v31 = v29;
    v32 = v30;
    swift_bridgeObjectRelease();
    result = swift_release();
    v8[6] = v31;
    v8[7] = v32;
    *(_QWORD *)a3 = v8;
  }
  return result;
}

uint64_t sub_23C8A5610@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C8A52AC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_23C8A5628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_23C7EDCAC();
  return sub_23C8A5988(v0, v1, v2);
}

void static FTS5TokenizerDescriptor.porter(wrapping:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  if (*a1)
  {
    swift_bridgeObjectRetain();
    sub_23C7FAE44();
    v3 = &unk_250D854F0;
  }
  else
  {
    v3 = &unk_250D854C0;
  }
  if (v3[2])
  {
    *a2 = v3;
  }
  else
  {
    sub_23C7E33BC();
    sub_23C7DC484();
    sub_23C7E8B58();
    __break(1u);
  }
}

void static FTS5TokenizerDescriptor.unicode61(diacritics:separators:tokenCharacters:)(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  type metadata accessor for Configuration();
  sub_23C7ED168();
  MEMORY[0x24BDAC7A8](v9);
  sub_23C7DE96C();
  v10 = *a1;
  sub_23C7E79A8(&qword_25430DA10);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23C912A20;
  *(_QWORD *)(v11 + 32) = 0x3665646F63696E75;
  *(_QWORD *)(v11 + 40) = 0xE900000000000031;
  v31 = v11;
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == 1)
      goto LABEL_14;
    sub_23C7EC7CC();
    sub_23C7EE550();
    if (!(!v17 & v16))
    {
      sub_23C7EC7CC();
      v15 = v12;
    }
    sub_23C8A6040(v12, v13, v14, v15);
    sub_23C7E682C();
    if (v19 != v20)
    {
      sub_23C7EC7CC();
      v18 = v30;
    }
    *(_QWORD *)(v18 + 16) = v4;
    v21 = v18 + 16 * v10;
    v22 = 50;
  }
  else
  {
    sub_23C7EC7CC();
    sub_23C7EE550();
    if (!(!v17 & v16))
    {
      sub_23C7EC7CC();
      v26 = v23;
    }
    sub_23C8A6040(v23, v24, v25, v26);
    sub_23C7E682C();
    if (v19 != v20)
    {
      sub_23C7EC7CC();
      v18 = v29;
    }
    *(_QWORD *)(v18 + 16) = v4;
    v21 = v18 + 16 * v10;
    v22 = 48;
  }
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = 0xE100000000000000;
  v31 = v18;
LABEL_14:
  if (*(_QWORD *)(a2 + 16))
  {
    sub_23C7E92FC();
    sub_23C7E85B0();
    sub_23C7E69B0();
    v27 = sub_23C7E0A4C();
    MEMORY[0x24BDAC7A8](v27);
    sub_23C8A5020();
    swift_release();
    sub_23C7FAE44();
  }
  if (*(_QWORD *)(a3 + 16))
  {
    sub_23C7E92FC();
    sub_23C7E85B0();
    sub_23C7DC5F8();
    v28 = sub_23C7E0A4C();
    MEMORY[0x24BDAC7A8](v28);
    sub_23C7DFCE8();
    sub_23C8A5020();
    sub_23C7E6EF0();
    sub_23C7ECCF0();
  }
  if (!*(_QWORD *)(v31 + 16))
  {
    sub_23C7E33BC();
    sub_23C7DC484();
    sub_23C9117B4();
    sub_23C7E5F48();
  }
  *a4 = v31;
  sub_23C7DBCB0();
}

uint64_t sub_23C8A5988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _BYTE __dst[163];
  _QWORD v32[2];
  char v33;
  uint64_t __src[22];
  uint64_t *v35;

  sub_23C7E79A8(&qword_25430DA10);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23C9157F0;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = 0xEA00000000007372;
  swift_bridgeObjectRetain();
  sub_23C7FD14C();
  v8 = v7;
  swift_bridgeObjectRelease();
  __src[0] = v8;
  sub_23C8CAEF8(__src);
  if (v3)
  {
    swift_release();
    __break(1u);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 16) = 0;
    swift_release();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v35 = a3;
    v9 = __src[0];
    v10 = *(_QWORD *)(__src[0] + 16);
    if (v10)
    {
      v29 = v6;
      __src[0] = MEMORY[0x24BEE4AF8];
      sub_23C7E649C();
      v11 = __src[0];
      v12 = (uint64_t *)(v9 + 40);
      do
      {
        v14 = *(v12 - 1);
        v13 = *v12;
        __src[0] = v11;
        v16 = *(_QWORD *)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 24);
        swift_bridgeObjectRetain();
        if (v16 >= v15 >> 1)
        {
          sub_23C7E649C();
          v11 = __src[0];
        }
        v12 += 2;
        *(_QWORD *)(v11 + 16) = v16 + 1;
        v17 = v11 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v14;
        *(_QWORD *)(v17 + 40) = v13;
        --v10;
      }
      while (v10);
      sub_23C7E6BFC();
      v6 = v29;
    }
    else
    {
      sub_23C7E6BFC();
      v11 = MEMORY[0x24BEE4AF8];
    }
    __src[0] = v11;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    v18 = sub_23C910E3C();
    v20 = v19;
    swift_bridgeObjectRelease();
    v32[0] = v18;
    v32[1] = v20;
    v33 = 2;
    sub_23C8027EC((uint64_t)v32);
    sub_23C800B48(v32, __src);
    v21 = qword_25430CC40;
    swift_retain();
    if (v21 != -1)
      swift_once();
    v22 = qword_254310428;
    swift_retain();
    v23 = MEMORY[0x24BEE4AF8];
    sub_23C7E0C50();
    type metadata accessor for SQLGenerationContext();
    swift_allocObject();
    sub_23C7E30C0(a1, v22, v23);
    memcpy(__dst, __src, sizeof(__dst));
    sub_23C7EA244();
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRelease();
    result = swift_release();
    *(_QWORD *)(v6 + 48) = v25;
    *(_QWORD *)(v6 + 56) = v27;
    *v35 = v6;
  }
  return result;
}

void sub_23C8A5C90(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  a2(v4);
  if (v2)
  {
    sub_23C8D296C(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 108, a1);
  }
  else if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 41) & 1) == 0
         && (Database.isInsideTransaction.getter() & 1) != 0)
  {
    sub_23C9117B4();
    __break(1u);
  }
}

void sub_23C8A5D6C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  a2(&v4, v3);
  sub_23C8D296C(v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 108, a1);
}

uint64_t sub_23C8A5DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  type metadata accessor for SchedulingWatchdog();
  result = sub_23C7E2FE0();
  if (result)
  {
    v9 = result;
    swift_retain();
    sub_23C8C96E4(a1, v9, a2, a3, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23C8A5E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for SchedulingWatchdog();
  v10 = sub_23C7E3188();
  if (v10)
  {
    v11 = v10;
    swift_retain();
    a5(a1, v11, a2, a3, a4);
    swift_release();
    sub_23C7E4BEC();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23C8A5F0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23C8A5988(a1, 0x6F74617261706573, a2);
}

uint64_t sub_23C8A5F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  sub_23C7EDCAC();
  return sub_23C8A5988(v0, v1, v2);
}

ValueMetadata *type metadata accessor for FTS5TokenizerDescriptor()
{
  return &type metadata for FTS5TokenizerDescriptor;
}

void sub_23C8A5F64(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  sub_23C8A5D6C(a1, a2);
  if (!v3)
    *a3 = v5;
}

void sub_23C8A5F8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  sub_23C8A5E80(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_23C8C98A4);
  if (!v5)
    *a5 = v7;
}

void sub_23C8A5FBC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_23C8A5F64(*(_QWORD *)(v1 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 24), a1);
}

void sub_23C8A5FD8(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  sub_23C8A5F8C(v1[2], v1[3], v1[4], v1[5], a1);
}

void sub_23C8A5FF4()
{
  uint64_t v0;

  sub_23C8A5C90(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_23C8A6010()
{
  uint64_t *v0;

  return sub_23C8A5DE4(v0[2], v0[3], v0[4], v0[5]);
}

void sub_23C8A6040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(a4 + 16) = v4;
}

uint64_t sub_23C8A6054(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return sub_23C910FF8();
  else
    return 0;
}

BOOL sub_23C8A6094(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

GRDBInternal::Inflections __swiftcall Inflections.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  GRDBInternal::Inflections result;

  v1 = v0;
  sub_23C88DD94(0, (unint64_t *)&qword_25430B328);
  v2 = MEMORY[0x24BEE4AF8];
  v3 = (void *)sub_23C910DAC();
  *v1 = v2;
  v1[1] = v2;
  v1[2] = v3;
  result.uncountablesRegularExpressions._rawValue = v5;
  result.singularizeRules._rawValue = v4;
  result.pluralizeRules._rawValue = v3;
  return result;
}

Swift::Void __swiftcall Inflections.plural(_:options:_:)(Swift::String _, NSRegularExpressionOptions options, Swift::String a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  sub_23C7E9C04();
  v6 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  sub_23C7DC46C();
  v7 = sub_23C7E18D4();
  if (v4)
  {
    sub_23C7DFD00();
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v8 = v7;
    sub_23C7DF084();
    sub_23C7F1314();
    sub_23C7E2180();
    v9 = *v3;
    sub_23C7ECD00(v5 + 1);
    *v3 = v9;
    sub_23C7E0778();
  }
}

Swift::Void __swiftcall Inflections.singular(_:options:_:)(Swift::String _, NSRegularExpressionOptions options, Swift::String a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  sub_23C7E9C04();
  v6 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  sub_23C7DC46C();
  v7 = sub_23C7E18D4();
  if (v4)
  {
    sub_23C7DFD00();
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v8 = v7;
    sub_23C7DF084();
    sub_23C7F1314();
    sub_23C7E2180();
    v9 = *(_QWORD *)(v3 + 8);
    sub_23C7ECD00(v5 + 1);
    *(_QWORD *)(v3 + 8) = v9;
    sub_23C7E0778();
  }
}

Swift::Void __swiftcall Inflections.uncountableWords(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v2 = v1;
  v3 = *((_QWORD *)a1._rawValue + 2);
  if (v3)
  {
    v25 = (id)objc_opt_self();
    sub_23C7DF858();
    v5 = (uint64_t *)((char *)a1._rawValue + 40);
    while (1)
    {
      v26 = v3;
      v7 = *(v5 - 1);
      v6 = *v5;
      sub_23C7DBBB8();
      v8 = (void *)sub_23C7DF43C();
      v9 = objc_msgSend(v25, sel_escapedPatternForString_, v8);

      sub_23C910E78();
      sub_23C910F5C();
      sub_23C7DB398();
      sub_23C910F5C();
      v10 = objc_allocWithZone(MEMORY[0x24BDD1798]);
      v11 = sub_23C8A7A38(25180, 0xE200000000000000, 1);
      sub_23C7DBBB8();
      swift_isUniquelyReferenced_nonNull_native();
      v12 = *(_QWORD **)(v2 + 16);
      v13 = v2;
      *(_QWORD *)(v2 + 16) = 0x8000000000000000;
      v14 = sub_23C8A7BF8();
      if (__OFADD__(v12[2], (v15 & 1) == 0))
        break;
      v16 = v14;
      v17 = v15;
      sub_23C7E79A8(&qword_25430B338);
      if ((sub_23C911778() & 1) != 0)
      {
        v18 = sub_23C8A7BF8();
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_16;
        v16 = v18;
      }
      if ((v17 & 1) != 0)
      {
        v20 = v12[7];

        *(_QWORD *)(v20 + 8 * v16) = v11;
      }
      else
      {
        v12[(v16 >> 6) + 8] |= 1 << v16;
        v21 = (_QWORD *)(v12[6] + 16 * v16);
        *v21 = v7;
        v21[1] = v6;
        *(_QWORD *)(v12[7] + 8 * v16) = v11;
        v22 = v12[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_15;
        v12[2] = v24;
        sub_23C7DBBB8();
      }
      v5 += 2;
      v2 = v13;
      *(_QWORD *)(v13 + 16) = v12;
      swift_bridgeObjectRelease_n();
      sub_23C7DB624();
      v3 = v26 - 1;
      if (v26 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    sub_23C7DFD00();
    swift_unexpectedError();
    __break(1u);
LABEL_16:
    sub_23C911B50();
    __break(1u);
  }
}

Swift::Void __swiftcall Inflections.irregularSuffix(_:_:)(Swift::String a1, Swift::String a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  NSRegularExpressionOptions v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v4 = a1._object;
  v5 = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v6 = sub_23C8A6054(v5, (unint64_t)v4);
  v8 = v7;
  sub_23C7E072C();
  if (v8)
  {
    sub_23C7DC46C();
    v9 = sub_23C8A6DD0(1uLL, v5, (unint64_t)v4);
    v11 = v10;
    v211 = v13;
    v217 = v12;
    sub_23C7DF858();
    v14 = sub_23C8A6054(countAndFlagsBits, (unint64_t)object);
    v16 = v15;
    sub_23C7DB624();
    if (v16)
    {
      sub_23C7DF858();
      v193 = sub_23C8A6DD0(1uLL, countAndFlagsBits, (unint64_t)object);
      v199 = v17;
      v205 = v18;
      v20 = v19;
      v21 = v6;
      v22 = sub_23C910E24();
      v24 = v23;
      v26 = v22 == sub_23C910E24() && v24 == v25;
      v162 = v11;
      v129 = v14;
      if (v26)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v27 = sub_23C911A18();
        swift_bridgeObjectRelease();
        sub_23C7DB398();
        if ((v27 & 1) == 0)
        {
          sub_23C910E24();
          sub_23C7E9340();
          v28 = v11;
          v29 = v217;
          MEMORY[0x242624B34](v9, v11, v217, v211);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          sub_23C910E24();
          v30 = v193;
          v31 = sub_23C886B8C();
          sub_23C7EDCC4(v31, MEMORY[0x24BEE1E08], v31, v32, v33, v34, v35, v36, v112, v31, v129, v20, v16, v21, v162, v8, v179, v9, v193,
            v199,
            v205,
            v211,
            v217,
            v193);
          v37 = sub_23C910F50();
          sub_23C7E33CC(v37, v38, v39, v40, v41, v42, v43, v44, v113, v121, v130, v138, v146, v154, v163, v171, v180);
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E18();
          sub_23C7E9340();
          MEMORY[0x242624B34](v9, v28, v29, v212);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          v45 = sub_23C910E18();
          v46 = v200;
          v47 = v206;
          v48 = v139;
          sub_23C7EDCC4(v45, v49, v50, v51, v52, v53, v54, v55, v114, v122, v131, v139, v147, v155, v164, v172, v181, v188, v194,
            v200,
            v206,
            v212,
            v218,
            v30);
          v56 = sub_23C7EE310();
          sub_23C7E33CC(v56, v57, v58, v59, v60, v61, v62, v63, v115, v123, v132, v140, v148, v156, v165, v173, v182);
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E24();
          sub_23C7E9340();
          MEMORY[0x242624B34](v30, v46, v47, v48);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          v64 = sub_23C910E24();
          sub_23C7EDCC4(v64, v65, v66, v67, v68, v69, v70, v71, v116, v124, v133, v141, v149, v157, v166, v174, v183, v189, v195,
            v201,
            v207,
            v213,
            v219,
            v30);
          v72 = sub_23C910F50();
          sub_23C7E33CC(v72, v73, v74, v75, v76, v77, v78, v79, v117, v125, v134, v142, v150, v158, v167, v175, v184);
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E18();
          sub_23C7E9340();
          MEMORY[0x242624B34](v196, v46, v47, v143);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          v80 = sub_23C910E18();
          sub_23C7EDCC4(v80, v81, v82, v83, v84, v85, v86, v87, v118, v126, v135, v143, v151, v159, v168, v176, v185, v190, v196,
            v202,
            v208,
            v214,
            v220,
            v196);
          sub_23C910F50();
          v88._countAndFlagsBits = sub_23C7E6EFC();
          Inflections.plural(_:options:_:)(v88, v89, v90);
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E24();
          sub_23C7E9340();
          v91 = v169;
          v92 = v215;
          MEMORY[0x242624B34](v191, v169, v221, v215);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          v93 = sub_23C910E24();
          sub_23C7EDCC4(v93, v94, v95, v96, v97, v98, v99, v100, v119, v127, v136, v144, v152, v160, v169, v177, v186, v191, v197,
            v203,
            v209,
            v215,
            v221,
            v191);
          sub_23C7EE310();
          sub_23C7EDF14();
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E18();
          sub_23C7E9340();
          MEMORY[0x242624B34](v192, v91, v222, v92);
          sub_23C7E4498();
          sub_23C7DB624();
          sub_23C7E85F8();
          v223 = sub_23C910E18();
          sub_23C7EDCC4(v223, v101, v102, v103, v104, v105, v106, v107, v120, v128, v137, v145, v153, v161, v170, v178, v187, v192, v198,
            v204,
            v210,
            v216,
            v222,
            v192);
          sub_23C910F50();
          sub_23C7EDF14();
          sub_23C7DB3DC();
          sub_23C7DB398();
          sub_23C910E24();
          sub_23C7E9340();
          sub_23C8A7BF0();
        }
      }
      sub_23C7E06E4();
      sub_23C910E30();
      sub_23C7E06E4();
      MEMORY[0x242624B34](v9, v11, v217, v211);
      sub_23C7E4F0C();
      sub_23C7E087C();
      sub_23C7E85F8();
      MEMORY[0x242624B34](v193, v199, v205, v20);
      sub_23C7E4498();
      sub_23C7DB624();
      v108._countAndFlagsBits = 12580;
      v109._countAndFlagsBits = 0;
      v109._object = (void *)0xE000000000000000;
      v108._object = (void *)0xE200000000000000;
      Inflections.plural(_:options:_:)(v109, 1uLL, v108);
      sub_23C7DB624();
      sub_23C7DC514();
      sub_23C7E06E4();
      sub_23C910E30();
      sub_23C7E06E4();
      MEMORY[0x242624B34](v193, v199, v205, v20);
      sub_23C7E4498();
      sub_23C7DB624();
      sub_23C7E85F8();
      sub_23C7E5F54();
      MEMORY[0x242624B34](v193, v199, v205, v20);
      sub_23C7E4F0C();
      sub_23C7DC514();
      v110._countAndFlagsBits = 0;
      v111._countAndFlagsBits = 0;
      v111._object = (void *)0xE000000000000000;
      v110._object = (void *)0xE000000000000000;
      Inflections.plural(_:options:_:)(v111, 1uLL, v110);
      sub_23C7DC514();
      sub_23C7E087C();
      sub_23C7E06E4();
      sub_23C910E30();
      sub_23C7DB624();
      sub_23C7E06E4();
      sub_23C8A7BE4();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_23C8A6D20(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_23C8A6D28@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 & result;
  return result;
}

uint64_t sub_23C8A6D34@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a2 & result;
  return result;
}

BOOL sub_23C8A6D40(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

BOOL sub_23C8A6D6C(_DWORD *a1, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

void sub_23C8A6D98(uint64_t a1)
{
  _QWORD *v1;

  sub_23C7E65F0(*v1 | a1);
}

uint64_t sub_23C8A6DA4(uint64_t result)
{
  _DWORD *v1;

  *v1 |= result;
  return result;
}

void sub_23C8A6DB4(uint64_t a1)
{
  _QWORD *v1;

  sub_23C7E65F0(*v1 & a1);
}

uint64_t sub_23C8A6DC0(uint64_t result)
{
  _DWORD *v1;

  *v1 &= result;
  return result;
}

unint64_t sub_23C8A6DD0(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_23C910F44();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = sub_23C911010();
      sub_23C7DB624();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23C8A6E9C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C8DEA48(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if (v3 < v5)
    goto LABEL_9;
  if ((v5 & 0x8000000000000000) == 0)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

Swift::String __swiftcall Inflections.pluralize(_:)(Swift::String a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  sub_23C8A6F6C(a1._countAndFlagsBits, (unint64_t)a1._object, *v1);
  sub_23C7DF890();
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

Swift::String __swiftcall Inflections.singularize(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  sub_23C8A6F6C(a1._countAndFlagsBits, (unint64_t)a1._object, *(_QWORD *)(v1 + 8));
  sub_23C7DF890();
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

void sub_23C8A6F6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = sub_23C8A72A4();
  if ((sub_23C911A18() & 1) != 0)
    goto LABEL_28;
  sub_23C7DF858();
  sub_23C8818FC(a1, a2, 48, 0xE100000000000000, 57, 0xE100000000000000);
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 14 >= v8 >> 14)
  {
    v37 = v10;
    v38 = a3;
    v39 = a1;
    v40 = a2;
    v11 = sub_23C7E59A8();
    v12 = MEMORY[0x242624B34](v11);
    v14 = v13;
    sub_23C7E087C();
    sub_23C7DBBB8();
    v15 = sub_23C910FE0();
    sub_23C7DC474();
    v16 = v7 + 64;
    v17 = 1 << *(_BYTE *)(v7 + 32);
    v18 = -1;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    v19 = v18 & *(_QWORD *)(v7 + 64);
    v41 = (unint64_t)(v17 + 63) >> 6;
    swift_bridgeObjectRetain();
    v20 = 0;
    while (1)
    {
      if (v19)
      {
        v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v22 = v21 | (v20 << 6);
      }
      else
      {
        v23 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
          goto LABEL_27;
        }
        if (v23 >= v41)
          goto LABEL_24;
        v24 = *(_QWORD *)(v16 + 8 * v23);
        ++v20;
        if (!v24)
        {
          v20 = v23 + 1;
          if (v23 + 1 >= v41)
            goto LABEL_24;
          v24 = *(_QWORD *)(v16 + 8 * v20);
          if (!v24)
          {
            v20 = v23 + 2;
            if (v23 + 2 >= v41)
              goto LABEL_24;
            v24 = *(_QWORD *)(v16 + 8 * v20);
            if (!v24)
            {
              v25 = v23 + 3;
              if (v25 >= v41)
              {
LABEL_24:
                swift_release();
                sub_23C7DF858();
                v29 = sub_23C7E59A8();
                v31 = v30;
                v33 = v32;
                v35 = v34;
                sub_23C7DB624();
                MEMORY[0x242624B34](v29, v31, v33, v35);
                sub_23C7DB3DC();
                sub_23C8A76C4(v12, v14, v38);
                sub_23C7DC474();
                sub_23C910F5C();
                sub_23C7DB398();
                sub_23C7DF858();
                v36 = sub_23C876390(v37, v39, v40);
                MEMORY[0x242624B34](v36);
                sub_23C910F5C();
                sub_23C7DB624();
                sub_23C7E072C();
                return;
              }
              v24 = *(_QWORD *)(v16 + 8 * v25);
              if (!v24)
              {
                while (1)
                {
                  v20 = v25 + 1;
                  if (__OFADD__(v25, 1))
                    break;
                  if (v20 >= v41)
                    goto LABEL_24;
                  v24 = *(_QWORD *)(v16 + 8 * v20);
                  ++v25;
                  if (v24)
                    goto LABEL_21;
                }
LABEL_27:
                __break(1u);
LABEL_28:
                __break(1u);
                break;
              }
              v20 = v25;
            }
          }
        }
LABEL_21:
        v19 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v20 << 6);
      }
      v26 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v22);
      v27 = (void *)sub_23C7DF43C();
      v28 = objc_msgSend(v26, sel_firstMatchInString_options_range_, v27, 0, 0, v15);

      if (v28)
      {
        swift_release();
        sub_23C7DF858();
        sub_23C7DC474();
        return;
      }
    }
  }
  __break(1u);
}

uint64_t sub_23C8A72A4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  char v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  swift_bridgeObjectRetain();
  sub_23C7E79A8(&qword_25430B320);
  sub_23C8A7B6C();
  sub_23C7EEE60();
  sub_23C9114B4();
  if (qword_25430B398 != -1)
    swift_once();
  v0 = (void *)qword_25430B300;
  v1 = (void *)sub_23C8A7BD8();
  v2 = sub_23C7EE568(v0, sel_firstMatchInString_options_range_, (uint64_t)v1);

  if (!v2)
    goto LABEL_6;
  v3 = v2;
  v4 = sub_23C7EE1B0(v3);
  if (v4 == (id)sub_23C9107C4())
  {

LABEL_6:
    v43 = 0;
    v5 = 1;
    goto LABEL_11;
  }
  objc_msgSend(v3, sel_range);
  v6 = sub_23C7DEAD8();
  v8 = v7;

  v5 = v8 & 1;
  if ((v8 & 1) != 0)
    v9 = 0;
  else
    v9 = v6;
  v43 = v9;
LABEL_11:
  if (qword_25430B3A0 != -1)
    swift_once();
  v10 = (void *)qword_25430B2C0;
  v11 = (void *)sub_23C8A7BD8();
  v12 = sub_23C7EE568(v10, sel_firstMatchInString_options_range_, (uint64_t)v11);

  if (v12)
  {
    v13 = v12;
    v14 = sub_23C7EE1B0(v13);
    if (v14 == (id)sub_23C9107C4() || (objc_msgSend(v13, sel_range), sub_23C7DEAD8(), (v15 & 1) != 0))
    {
      v42 = 0;
      v16 = 1;
    }
    else
    {
      v42 = sub_23C7DB524();
      v16 = 0;
    }

  }
  else
  {
    v42 = 0;
    v16 = 1;
  }
  if (qword_25430B390 != -1)
    swift_once();
  v17 = (void *)qword_25430B2F8;
  v18 = (void *)sub_23C8A7BD8();
  v19 = sub_23C7EE568(v17, sel_firstMatchInString_options_range_, (uint64_t)v18);

  if (v19)
  {
    v20 = v19;
    v21 = sub_23C7EE1B0(v20);
    if (v21 == (id)sub_23C9107C4() || (objc_msgSend(v20, sel_range), sub_23C7DEAD8(), (v22 & 1) != 0))
    {
      v23 = 0;
      v24 = 1;
    }
    else
    {
      v23 = sub_23C7DB524();
      v24 = 0;
    }

    if ((v5 & 1) != 0)
    {
LABEL_28:
      v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if ((v16 & 1) != 0)
        goto LABEL_39;
      goto LABEL_34;
    }
  }
  else
  {
    v23 = 0;
    v24 = 1;
    if ((v5 & 1) != 0)
      goto LABEL_28;
  }
  sub_23C7F2100(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v25 = v26;
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
  {
    sub_23C7E99C4(v27);
    v25 = v37;
  }
  v25[2] = v28 + 1;
  v25[v28 + 4] = v43;
  if ((v16 & 1) == 0)
  {
LABEL_34:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7E96E4(0, v25[2] + 1);
      v25 = v38;
    }
    v30 = v25[2];
    v29 = v25[3];
    if (v30 >= v29 >> 1)
    {
      sub_23C7E99C4(v29);
      v25 = v39;
    }
    v25[2] = v30 + 1;
    v25[v30 + 4] = v42;
  }
LABEL_39:
  if ((v24 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23C7E96E4(0, v25[2] + 1);
      v25 = v40;
    }
    v32 = v25[2];
    v31 = v25[3];
    if (v32 >= v31 >> 1)
    {
      sub_23C7E99C4(v31);
      v25 = v41;
    }
    v25[2] = v32 + 1;
    v25[v32 + 4] = v23;
  }
  v33 = sub_23C8A7904(v25);
  v35 = v34;
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
    return 15;
  else
    return v33;
}

uint64_t sub_23C8A76C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = a1;
  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4
    && (sub_23C7DF858(),
        sub_23C7E79A8(&qword_25430B320),
        sub_23C8A7B6C(),
        sub_23C7EEE60(),
        v17 = sub_23C9114B4(),
        (v7 = *(_QWORD *)(a3 + 16)) != 0))
  {
    v8 = v6;
    sub_23C88DD94(0, &qword_25430B3D0);
    sub_23C7DC46C();
    v9 = a3 + 24 * v7 + 16;
    while (1)
    {
      v10 = *(void **)(v9 - 8);
      sub_23C7DF858();
      v11 = v10;
      swift_bridgeObjectRetain();
      v12 = v3;
      v13 = sub_23C8A7894();
      v14 = (void *)sub_23C910E6C();
      sub_23C7DC514();
      v15 = (uint64_t)objc_msgSend(v11, sel_replaceMatchesInString_options_range_withTemplate_, v13, 0, v17, v8, v14);

      if (v15 >= 1)
        break;
      --v7;
      v9 -= 24;

      v3 = v12;
      if (!v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    v3 = sub_23C910EC0();

  }
  else
  {
LABEL_9:
    sub_23C7DF858();
  }
  return v3;
}

id sub_23C8A7894()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (void *)sub_23C910E6C();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  return v2;
}

unint64_t sub_23C8A7904(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;

  v1 = a1[2];
  if (!v1)
    return 0;
  result = a1[4];
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = a1 + 5;
    do
    {
      v7 = *v5++;
      v6 = v7;
      if (result >> 14 < v7 >> 14)
        result = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

id sub_23C8A794C(uint64_t a1)
{
  return sub_23C8A79B8(a1, 0x242B775C625CLL, 0xE600000000000000, &qword_25430B300);
}

id sub_23C8A796C(uint64_t a1)
{
  return sub_23C8A79B8(a1, 0x242B5D5F5E5B5FLL, 0xE700000000000000, &qword_25430B2C0);
}

id sub_23C8A7990(uint64_t a1)
{
  return sub_23C8A79B8(a1, 0xD000000000000016, 0x800000023C91F140, &qword_25430B2F8);
}

id sub_23C8A79B8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id result;

  v7 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_23C8A7A38(a2, a3, 0);
  *a4 = result;
  return result;
}

id sub_23C8A7A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_23C910E6C();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_23C910A4C();

    swift_willThrow();
  }
  return v6;
}

_QWORD *sub_23C8A7B14(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C7DC46C();
  return a1;
}

ValueMetadata *type metadata accessor for Inflections()
{
  return &type metadata for Inflections;
}

unint64_t sub_23C8A7B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25430B2D0;
  if (!qword_25430B2D0)
  {
    v1 = sub_23C7DDB10(&qword_25430B320);
    result = MEMORY[0x242626100](MEMORY[0x24BEE1BC0], v1);
    atomic_store(result, (unint64_t *)&qword_25430B2D0);
  }
  return result;
}

uint64_t sub_23C8A7BD8()
{
  return sub_23C910E6C();
}

void sub_23C8A7BE4()
{
  JUMPOUT(0x242624B34);
}

void sub_23C8A7BF0()
{
  JUMPOUT(0x242624B34);
}

unint64_t sub_23C8A7BF8()
{
  return sub_23C7E94B8();
}

uint64_t sub_23C8A7C04(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v9 = a5;
  v48 = a4;
  v49 = a5;
  LOBYTE(v46) = a3;
  type metadata accessor for FTS5TableDefinition();
  swift_allocObject();
  v12 = sub_23C82FA50((char *)&v46);
  v50 = v12;
  if (a6)
  {
    swift_retain();
    a6(&v50);
    if (v7)
    {
      swift_release();
      return sub_23C7F1754((uint64_t)a6);
    }
    v45 = v6;
    sub_23C7F1754((uint64_t)a6);
  }
  else
  {
    v45 = v6;
  }
  sub_23C7F16C0();
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  v17 = v16 + 1;
  if (v16 >= *(_QWORD *)(v14 + 24) >> 1)
  {
    sub_23C7F16C0();
    v15 = v39;
  }
  *(_QWORD *)(v15 + 16) = v17;
  v18 = v15 + 16 * v16;
  *(_QWORD *)(v18 + 32) = 0xD000000000000014;
  *(_QWORD *)(v18 + 40) = 0x800000023C91C570;
  if ((a3 & 1) != 0)
  {
    if (v17 >= *(_QWORD *)(v15 + 24) >> 1)
    {
      sub_23C7F16C0();
      v15 = v42;
    }
    *(_QWORD *)(v15 + 16) = v16 + 2;
    v19 = v15 + 16 * v17;
    strcpy((char *)(v19 + 32), "IF NOT EXISTS");
    *(_WORD *)(v19 + 46) = -4864;
  }
  v46 = 34;
  v47 = 0xE100000000000000;
  sub_23C910F5C();
  sub_23C910F5C();
  v20 = v46;
  v21 = v47;
  v22 = *(_QWORD *)(v15 + 16);
  v23 = *(_QWORD *)(v15 + 24) >> 1;
  v24 = v22 + 1;
  if (v23 <= v22)
  {
    sub_23C7F16C0();
    v15 = v40;
    v23 = *(_QWORD *)(v40 + 24) >> 1;
  }
  *(_QWORD *)(v15 + 16) = v24;
  v25 = v15 + 16 * v22;
  *(_QWORD *)(v25 + 32) = v20;
  *(_QWORD *)(v25 + 40) = v21;
  if ((uint64_t)v23 < (uint64_t)(v22 + 2))
  {
    sub_23C7F16C0();
    v15 = v41;
  }
  *(_QWORD *)(v15 + 16) = v22 + 2;
  v26 = v15 + 16 * v24;
  *(_QWORD *)(v26 + 32) = 0x474E495355;
  *(_QWORD *)(v26 + 40) = 0xE500000000000000;
  v27 = FTS5.moduleArguments(for:in:)(v12, v45);
  if (v7)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v28 = v27;
    if (*(_QWORD *)(v27 + 16))
    {
      v46 = a4;
      v47 = v9;
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      v29 = v46;
      v30 = v47;
      v46 = v28;
      sub_23C7E79A8(&qword_25430D9F8);
      sub_23C7F16DC();
      sub_23C910E3C();
      swift_bridgeObjectRelease();
      v46 = v29;
      v47 = v30;
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C910F5C();
      swift_bridgeObjectRelease();
      v31 = v46;
      v9 = v47;
      v32 = *(_QWORD *)(v15 + 16);
      if (v32 >= *(_QWORD *)(v15 + 24) >> 1)
      {
        sub_23C7F16C0();
        v15 = v43;
      }
      *(_QWORD *)(v15 + 16) = v32 + 1;
      v33 = v15 + 16 * v32;
      *(_QWORD *)(v33 + 32) = v31;
      v34 = v33 + 32;
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(v15 + 16);
      v35 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      if (v36 >= v35 >> 1)
      {
        sub_23C7F16C0();
        v15 = v44;
      }
      *(_QWORD *)(v15 + 16) = v36 + 1;
      v37 = v15 + 16 * v36;
      *(_QWORD *)(v37 + 32) = a4;
      v34 = v37 + 32;
    }
    *(_QWORD *)(v34 + 8) = v9;
    v46 = v15;
    sub_23C7E79A8(&qword_25430D9F8);
    sub_23C7F16DC();
    sub_23C910E3C();
    v38 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v38);
    Database.inSavepoint(_:)(sub_23C8A8D50);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_23C8A80A4(uint64_t a1, Swift::String sql, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v13;
  _QWORD v15[4];

  object = sql._object;
  v15[2] = a3;
  v15[3] = a4;
  v15[0] = MEMORY[0x24BEE4AF8];
  v15[1] = MEMORY[0x24BEE4B00];
  sql._object = v15;
  countAndFlagsBits = sql._countAndFlagsBits;
  sql._countAndFlagsBits = (uint64_t)object;
  Database.execute(sql:arguments:)(*(Swift::String *)((char *)&sql - 8), *(GRDBInternal::StatementArguments *)&sql._object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13)
    FTS5.database(_:didCreate:using:)(a1, a5, a6, a7);
  return 0;
}

uint64_t sub_23C8A815C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_23C7E649C();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t FTS5Pattern.rawPattern.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

GRDBInternal::FTS5Pattern_optional __swiftcall FTS5Pattern.init(matchingAnyTokenIn:)(Swift::String matchingAnyTokenIn)
{
  uint64_t v1;
  void *v2;
  GRDBInternal::FTS5Pattern_optional result;

  sub_23C8A84D4(matchingAnyTokenIn._countAndFlagsBits, (uint64_t)matchingAnyTokenIn._object);
  result.value.rawPattern._object = v2;
  result.value.rawPattern._countAndFlagsBits = v1;
  return result;
}

void sub_23C8A826C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v9 = (int *)type metadata accessor for Configuration();
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)v11 = 1;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_DWORD *)(v11 + 23) = 0;
  *((_QWORD *)v11 + 4) = MEMORY[0x24BEE4AF8];
  *((_WORD *)v11 + 20) = 0;
  v11[64] = 2;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  v11[88] = -1;
  *((_QWORD *)v11 + 12) = 5;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = 0;
  sub_23C910D4C();
  *(_QWORD *)&v11[v9[17]] = 0;
  *(_QWORD *)&v11[v9[18]] = 0;
  v11[v9[19]] = 1;
  v11[v9[20]] = 0;
  v12 = &v11[v9[21]];
  *v12 = 0;
  v12[1] = 0;
  v13 = &v11[v9[22]];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v11[v9[23]];
  type metadata accessor for DatabaseQueue();
  *v14 = 0;
  v14[1] = 0;
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v11);
  v24 = a3;
  v25 = a1;
  v26 = a2;
  sub_23C8A4EEC((uint64_t)sub_23C8A8CC8, (uint64_t)v23);
  if (v4)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v4;
    v15 = v4;
    sub_23C7E79A8(&qword_25430CCC8);
    if (!swift_dynamicCast())
    {
LABEL_7:

      return;
    }

    v16 = v27;
    v17 = v28;
    v18 = v29;
    sub_23C7EF5D4();
    swift_allocError();
    v20 = v19;
    if (v18)
    {
LABEL_6:
      *(_DWORD *)v20 = v16;
      *(_QWORD *)(v20 + 8) = v17;
      *(_QWORD *)(v20 + 16) = v18;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 40) = 0u;
      *(_BYTE *)(v20 + 56) = 0;
      swift_bridgeObjectRelease();
      v22 = sub_23C7E097C();
      sub_23C7E13C4(v22);
      swift_willThrow();
      goto LABEL_7;
    }
    if (sqlite3_errstr(v16))
    {
      v17 = sub_23C910F74();
      v18 = v21;
      goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    *a4 = a1;
    a4[1] = a2;
  }
}

GRDBInternal::FTS5Pattern_optional __swiftcall FTS5Pattern.init(matchingAllTokensIn:)(Swift::String matchingAllTokensIn)
{
  uint64_t v1;
  void *v2;
  GRDBInternal::FTS5Pattern_optional result;

  sub_23C8A84D4(matchingAllTokensIn._countAndFlagsBits, (uint64_t)matchingAllTokensIn._object);
  result.value.rawPattern._object = v2;
  result.value.rawPattern._countAndFlagsBits = v1;
  return result;
}

void sub_23C8A84D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  sub_23C7E8608(a1, a2);
  if (v3)
  {
    sub_23C7E6308();
LABEL_3:
    swift_bridgeObjectRelease();
    *v2 = 0;
    v2[1] = 0;
    return;
  }
  sub_23C7E44A4();
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_3;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C7E4F14(MEMORY[0x24BEE4AF8], v6);
  v5 = v6[1];
  *v2 = v6[0];
  v2[1] = v5;
}

GRDBInternal::FTS5Pattern_optional __swiftcall FTS5Pattern.init(matchingAllPrefixesIn:)(Swift::String matchingAllPrefixesIn)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  GRDBInternal::FTS5Pattern_optional result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v3 = sub_23C7E8608(matchingAllPrefixesIn._countAndFlagsBits, (uint64_t)matchingAllPrefixesIn._object);
  if (v2)
  {
    sub_23C7E6308();
LABEL_3:
    v4 = swift_bridgeObjectRelease();
    *v1 = 0;
    v1[1] = 0;
    goto LABEL_11;
  }
  v6 = v3;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    goto LABEL_3;
  v13 = v1;
  v16 = MEMORY[0x24BEE4AF8];
  sub_23C7E649C();
  v8 = (uint64_t *)(v6 + 40);
  do
  {
    v14 = *(v8 - 1);
    v15 = *v8;
    swift_bridgeObjectRetain_n();
    sub_23C910F5C();
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v16 + 16);
    if (v9 >= *(_QWORD *)(v16 + 24) >> 1)
      sub_23C7E649C();
    v8 += 2;
    *(_QWORD *)(v16 + 16) = v9 + 1;
    v10 = v16 + 16 * v9;
    *(_QWORD *)(v10 + 32) = v14;
    *(_QWORD *)(v10 + 40) = v15;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_release();
  sub_23C7E4F14(MEMORY[0x24BEE4AF8], v17);
  v11 = v17[1];
  *v13 = v17[0];
  v13[1] = v11;
LABEL_11:
  result.value.rawPattern._object = v5;
  result.value.rawPattern._countAndFlagsBits = v4;
  return result;
}

GRDBInternal::FTS5Pattern_optional __swiftcall FTS5Pattern.init(matchingPhrase:)(Swift::String matchingPhrase)
{
  uint64_t v1;
  void *v2;
  GRDBInternal::FTS5Pattern_optional result;

  sub_23C8A8758(matchingPhrase._countAndFlagsBits, (uint64_t)matchingPhrase._object, 34, 0xE100000000000000);
  result.value.rawPattern._object = v2;
  result.value.rawPattern._countAndFlagsBits = v1;
  return result;
}

GRDBInternal::FTS5Pattern_optional __swiftcall FTS5Pattern.init(matchingPrefixPhrase:)(Swift::String matchingPrefixPhrase)
{
  uint64_t v1;
  void *v2;
  GRDBInternal::FTS5Pattern_optional result;

  sub_23C8A8758(matchingPrefixPhrase._countAndFlagsBits, (uint64_t)matchingPrefixPhrase._object, 8798, 0xE200000000000000);
  result.value.rawPattern._object = v2;
  result.value.rawPattern._countAndFlagsBits = v1;
  return result;
}

void sub_23C8A8758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD v10[3];

  sub_23C7E8608(a1, a2);
  if (v5)
  {
    sub_23C7E6308();
LABEL_3:
    swift_bridgeObjectRelease();
    *v4 = 0;
    v4[1] = 0;
    return;
  }
  sub_23C7E44A4();
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_3;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  sub_23C910E3C();
  swift_bridgeObjectRelease();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C7DBCC8();
  sub_23C910F5C();
  swift_bridgeObjectRelease();
  sub_23C8A826C(a3, a4, MEMORY[0x24BEE4AF8], v10);
  v9 = v10[1];
  *v4 = v10[0];
  v4[1] = v9;
}

uint64_t sub_23C8A8870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t inited;
  uint64_t v9;

  *(_QWORD *)(swift_allocObject() + 16) = a2;
  swift_bridgeObjectRetain();
  sub_23C8A7C04(0x746E656D75636F64, 0xE800000000000000, 0, 896758886, 0xE400000000000000, (void (*)(uint64_t *))sub_23C8A8D08);
  result = swift_release();
  if (!v4)
  {
    sub_23C8C8C84(0xD00000000000002DLL, 0x800000023C91F160, 0);
    sub_23C7E79A8(&qword_25430D7C8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23C912A20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 64) = &protocol witness table for String;
    *(_QWORD *)(inited + 32) = a3;
    *(_QWORD *)(inited + 40) = a4;
    swift_bridgeObjectRetain();
    sub_23C7E53DC(inited, &v9);
    sub_23C8DFF18(&v9);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C8EFE00();
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8A89F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = (uint64_t *)(a2 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      FTS5TableDefinition.column(_:)(v5, v6);
      swift_bridgeObjectRelease();
      swift_release();
      v4 += 2;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    FTS5TableDefinition.column(_:)(0x5F5F626472675F5FLL, 0xE800000000000000);
    return swift_release();
  }
}

GRDBInternal::FTS5Pattern __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.makeFTS5Pattern(rawPattern:forTable:)(Swift::String rawPattern, Swift::String forTable)
{
  _QWORD *v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  GRDBInternal::FTS5Pattern result;

  object = rawPattern._object;
  countAndFlagsBits = rawPattern._countAndFlagsBits;
  v6 = v2;
  Database.columns(in:)(forTable._countAndFlagsBits, (uint64_t)forTable._object);
  if (!v3)
  {
    v9 = sub_23C8A815C(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C8A826C(countAndFlagsBits, (uint64_t)object, v9, v6);
  }
  result.rawPattern._object = v8;
  result.rawPattern._countAndFlagsBits = v7;
  return result;
}

uint64_t FTS5Pattern.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t static FTS5Pattern.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16[2];

  v4 = sub_23C910EB4();
  result = MEMORY[0x24BDAC7A8](v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 3)
  {
    v9 = sub_23C7E097C();
    sub_23C7ED944(v9, v10);
    sub_23C910EA8();
    sub_23C7E097C();
    v11 = sub_23C910E90();
    v13 = v12;
    v14 = sub_23C7E097C();
    result = sub_23C7E5640(v14, v15, 3);
    if (v13)
    {
      v7 = v13;
      v6 = v11;
      goto LABEL_6;
    }
  }
  else if (v8 == 2)
  {
    sub_23C7DBCC8();
LABEL_6:
    v16[0] = v6;
    v16[1] = v7;
    sub_23C7DBCC8();
    sub_23C8A8C3C(v16, a2);
    return swift_bridgeObjectRelease_n();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_23C8A8C3C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  sub_23C8A826C(v4, v5, MEMORY[0x24BEE4AF8], v8);
  if (v2)
  {

    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = v8[0];
    v7 = v8[1];
  }
  *a2 = v6;
  a2[1] = v7;
}

ValueMetadata *type metadata accessor for FTS5Pattern()
{
  return &type metadata for FTS5Pattern;
}

uint64_t sub_23C8A8CC8(uint64_t a1)
{
  uint64_t *v1;

  return sub_23C8A8870(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23C8A8CE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C8A8D08(uint64_t a1)
{
  uint64_t v1;

  return sub_23C8A89F4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23C8A8D20(uint64_t a1, Swift::String a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_23C8A80A4(a1, a2, *a3, a3[1], a4, a5, *a6) & 1;
}

uint64_t sub_23C8A8D50()
{
  uint64_t v0;

  return sub_23C8A8D20(*(_QWORD *)(v0 + 16), *(Swift::String *)(v0 + 24), *(uint64_t **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(uint64_t **)(v0 + 64));
}

ValueMetadata *type metadata accessor for JSONRequiredError()
{
  return &type metadata for JSONRequiredError;
}

void sub_23C8A8D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for JSONRequiredEncoder.KeyedContainer(0, a3, a4, a4);
  sub_23C7E639C();
  MEMORY[0x242626100](&unk_23C9182A4, v4);
  sub_23C7E0A58();
  sub_23C7E252C();
}

uint64_t sub_23C8A8DD8@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a2 + 24) = &type metadata for JSONRequiredEncoder;
  v2 = a1();
  sub_23C7E33E8(v2);
  return sub_23C7E8B74();
}

void sub_23C8A8E08()
{
  sub_23C7DAF10();
  sub_23C7DB694();
  sub_23C7E8090();
  sub_23C7E44B0();
}

uint64_t sub_23C8A8E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t inited;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  sub_23C7E79A8(&qword_25430CEC0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23C912A20;
  *(_QWORD *)(inited + 56) = a4;
  *(_QWORD *)(inited + 64) = a6;
  v13 = sub_23C812004((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v13, a2, a4);
  swift_bridgeObjectRetain();
  sub_23C7EFB60();
  v15 = type metadata accessor for JSONRequiredEncoder.KeyedContainer(0, a5, a7, v14);
  MEMORY[0x242626100](&unk_23C9182A4, v15);
  return sub_23C91185C();
}

uint64_t sub_23C8A8F2C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  *(_QWORD *)(a1 + 24) = &type metadata for JSONRequiredEncoder;
  v1 = sub_23C8A9768();
  sub_23C7E33E8(v1);
  return sub_23C7E8B74();
}

uint64_t sub_23C8A8F5C@<X0>(uint64_t (*a1)(void)@<X4>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a2 + 24) = &type metadata for JSONRequiredEncoder;
  v2 = a1();
  sub_23C7E33E8(v2);
  return sub_23C7E8B74();
}

uint64_t sub_23C8A8F8C()
{
  return swift_bridgeObjectRetain();
}

void sub_23C8A8F94()
{
  sub_23C8A8E08();
}

void sub_23C8A8FA8()
{
  sub_23C8A8E08();
}

uint64_t sub_23C8A8FC0()
{
  return sub_23C911AB4();
}

uint64_t sub_23C8A8FD4()
{
  return sub_23C911AA8();
}

uint64_t sub_23C8A8FE8()
{
  return sub_23C911AC0();
}

void sub_23C8A9000(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A9144(a1, a2, a3, a4, MEMORY[0x24BEE3C98]);
}

uint64_t sub_23C8A901C()
{
  return sub_23C911ACC();
}

void sub_23C8A9034(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A90D4(a1, a2, a3, a4, MEMORY[0x24BEE3CB8]);
}

void sub_23C8A9050(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A910C(a1, a2, a3, a4, MEMORY[0x24BEE3CC0]);
}

void sub_23C8A906C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A9144(a1, a2, a3, a4, MEMORY[0x24BEE3CC8]);
}

uint64_t sub_23C8A9088()
{
  return sub_23C911AF0();
}

uint64_t sub_23C8A90A0()
{
  return sub_23C911AD8();
}

void sub_23C8A90B8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A90D4(a1, a2, a3, a4, MEMORY[0x24BEE3CD8]);
}

void sub_23C8A90D4(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(a1 & 0x1FF);
  sub_23C7E1A0C();
}

void sub_23C8A90F0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A910C(a1, a2, a3, a4, MEMORY[0x24BEE3CE8]);
}

void sub_23C8A910C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(a1 & 0x1FFFF);
  sub_23C7E1A0C();
}

void sub_23C8A9128(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23C8A9144(a1, a2, a3, a4, MEMORY[0x24BEE3CF0]);
}

void sub_23C8A9144(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  a5(a1 | ((HIDWORD(a1) & 1) << 32));
  sub_23C7E1A0C();
}

uint64_t sub_23C8A9168()
{
  return sub_23C911B08();
}

uint64_t sub_23C8A9180()
{
  return sub_23C911AE4();
}

uint64_t sub_23C8A91A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_23C8A8E38(a1, a2, *v5, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_23C8A91C0@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8A8F5C((uint64_t (*)(void))sub_23C81AB7C, a1);
}

uint64_t sub_23C8A91E0@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8A8F2C(a1);
}

uint64_t sub_23C8A91E8@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8A8F5C((uint64_t (*)(void))sub_23C8A9768, a1);
}

void sub_23C8A9208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_23C8A8D84(a1, *v3, a2, a3);
}

uint64_t sub_23C8A9218@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8A8DD8((uint64_t (*)(void))sub_23C81AB7C, a1);
}

uint64_t sub_23C8A9238@<X0>(uint64_t a1@<X8>)
{
  return sub_23C8A8DD8((uint64_t (*)(void))sub_23C8A97B0, a1);
}

uint64_t sub_23C8A9258()
{
  sub_23C81AB7C();
  return sub_23C911A6C();
}

uint64_t sub_23C8A92B4()
{
  sub_23C81AB7C();
  return sub_23C911A78();
}

void sub_23C8A9310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for JSONRequiredEncoder.KeyedContainer(0, a2, a3, a4);
  sub_23C7E639C();
  MEMORY[0x242626100](&unk_23C9182A4, v4);
  sub_23C7E0A58();
  sub_23C7E252C();
}

uint64_t sub_23C8A935C@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  a2[3] = &type metadata for JSONRequiredEncoder;
  a2[4] = a1();
  *a2 = v4;
  return sub_23C7E8B74();
}

uint64_t sub_23C8A9394()
{
  return 0;
}

uint64_t sub_23C8A939C()
{
  sub_23C8A97B0();
  return sub_23C911A6C();
}

uint64_t sub_23C8A93F8()
{
  sub_23C8A97B0();
  return sub_23C911A78();
}

uint64_t sub_23C8A9454()
{
  return sub_23C911910();
}

uint64_t sub_23C8A947C()
{
  return sub_23C911934();
}

uint64_t sub_23C8A94A4()
{
  return sub_23C911928();
}

uint64_t sub_23C8A94CC()
{
  return sub_23C911940();
}

uint64_t sub_23C8A94F4()
{
  return sub_23C91194C();
}

uint64_t sub_23C8A951C()
{
  return sub_23C911958();
}

uint64_t sub_23C8A9544()
{
  return sub_23C911970();
}

uint64_t sub_23C8A956C()
{
  return sub_23C91197C();
}

uint64_t sub_23C8A9594()
{
  return sub_23C911988();
}

uint64_t sub_23C8A95BC()
{
  return sub_23C911994();
}

uint64_t sub_23C8A95E4()
{
  return sub_23C9119AC();
}

uint64_t sub_23C8A960C()
{
  return sub_23C911964();
}

uint64_t sub_23C8A9634()
{
  return sub_23C9119A0();
}

uint64_t sub_23C8A965C()
{
  return sub_23C9119B8();
}

uint64_t sub_23C8A9684()
{
  return sub_23C9119C4();
}

uint64_t sub_23C8A96AC()
{
  return sub_23C9119D0();
}

uint64_t sub_23C8A96D4()
{
  return sub_23C9119DC();
}

uint64_t sub_23C8A96FC()
{
  return sub_23C91191C();
}

uint64_t sub_23C8A9730@<X0>(_QWORD *a1@<X8>)
{
  return sub_23C8A935C((uint64_t (*)(void))sub_23C81AB7C, a1);
}

uint64_t sub_23C8A974C@<X0>(_QWORD *a1@<X8>)
{
  return sub_23C8A935C((uint64_t (*)(void))sub_23C8A9768, a1);
}

unint64_t sub_23C8A9768()
{
  unint64_t result;

  result = qword_256BCD2D0;
  if (!qword_256BCD2D0)
  {
    result = MEMORY[0x242626100](&unk_23C91841C, &type metadata for JSONRequiredEncoder);
    atomic_store(result, (unint64_t *)&qword_256BCD2D0);
  }
  return result;
}

uint64_t type metadata accessor for JSONRequiredEncoder.KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONRequiredEncoder.KeyedContainer);
}

unint64_t sub_23C8A97B0()
{
  unint64_t result;

  result = qword_256BCD2D8;
  if (!qword_256BCD2D8)
  {
    result = MEMORY[0x242626100](&unk_23C91819C, &type metadata for JSONRequiredEncoder);
    atomic_store(result, (unint64_t *)&qword_256BCD2D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONRequiredEncoder()
{
  return &type metadata for JSONRequiredEncoder;
}

uint64_t sub_23C8A97FC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

void NSURL.databaseValue.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = sub_23C8A99CC(v1);
  if (v4)
    v5 = v3;
  else
    v5 = 0;
  if (v4)
    v6 = 2;
  else
    v6 = 4;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23C7DB390();
}

uint64_t static NSURL.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_23C7E79A8(&qword_256BCBD10);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23C910EB4();
  MEMORY[0x24BDAC7A8](v6);
  v7 = *(unsigned __int8 *)(a1 + 16);
  if (v7 != 3)
  {
    result = 0;
    if (v7 != 2)
      return result;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  v9 = sub_23C7E8618();
  sub_23C7ED944(v9, v10);
  sub_23C910EA8();
  sub_23C7E8618();
  sub_23C910E90();
  v12 = v11;
  v13 = sub_23C7E8618();
  sub_23C7E5640(v13, v14, 3);
  if (v12)
  {
LABEL_5:
    sub_23C7E8618();
    sub_23C910A88();
    swift_bridgeObjectRelease();
    sub_23C8901F8((uint64_t)v5, v1, (uint64_t)&v16);
    sub_23C8A9A2C((uint64_t)v5);
    return v16;
  }
  return 0;
}

void sub_23C8A9990(uint64_t a1@<X8>)
{
  NSURL.databaseValue.getter(a1);
  sub_23C7DB390();
}

void sub_23C8A99AC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = static NSURL.fromDatabaseValue(_:)(a1);
  sub_23C7DB390();
}

uint64_t sub_23C8A99CC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_absoluteString);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_23C910E78();

  return v3;
}

uint64_t sub_23C8A9A2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C7E79A8(&qword_256BCBD10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C8A9A6C(uint64_t a1)
{
  char *v2;
  _BYTE v4[184];
  _BYTE v5[184];
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = MEMORY[0x24BEE4AF8];
    sub_23C7E649C();
    sub_23C7F96E0((const void *)(a1 + 32), v4);
    sub_23C7F96E0(v4, v5);
    v2 = (char *)&loc_23C8A9B0C + 4 * byte_23C9184D0[sub_23C8A22E4((uint64_t)v5)];
    __asm { BR              X9 }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

uint64_t SQLRequest.init(stringInterpolation:)()
{
  return SQLRequest.init(literal:adapter:cached:)();
}

uint64_t SQLRequest<A>.init(sql:arguments:adapter:cached:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[40];
  _QWORD v20[2];
  __int128 v21;

  sub_23C7E79A8(&qword_25430DA08);
  v12 = sub_23C7E41DC();
  *(_OWORD *)(v12 + 16) = xmmword_23C912A20;
  v20[0] = a1;
  v20[1] = a2;
  v21 = *a3;
  sub_23C7F96B0(v20);
  sub_23C7F96E0(v20, (void *)(v12 + 32));
  sub_23C7DF56C(a4, (uint64_t)v19);
  v16 = 0u;
  v17 = 0u;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v12;
  sub_23C811CFC((uint64_t)v19, (uint64_t)&v16);
  if ((a5 & 1) != 0)
    v13 = 0;
  else
    v13 = 2;
  *(_BYTE *)(a6 + 48) = v13;
  v14 = v17;
  *(_OWORD *)a6 = v16;
  *(_OWORD *)(a6 + 16) = v14;
  *(_OWORD *)(a6 + 32) = v18;
  return sub_23C7E7938(a4, &qword_25430DBD0);
}

uint64_t SQLRequest<A>.init(literal:adapter:cached:)()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[40];

  sub_23C7EC7D4();
  sub_23C7DF56C(v1, (uint64_t)v10);
  v7 = 0u;
  v8 = 0u;
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = v3;
  sub_23C811CFC((uint64_t)v10, (uint64_t)&v7);
  if ((v0 & 1) != 0)
    v4 = 0;
  else
    v4 = 2;
  *(_BYTE *)(v2 + 48) = v4;
  v5 = v8;
  *(_OWORD *)v2 = v7;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v9;
  return sub_23C7E7938(v1, &qword_25430DBD0);
}

BOOL sub_23C8AA170(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23C8AA180()
{
  return sub_23C911BC8();
}

uint64_t sub_23C8AA1A4()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

BOOL sub_23C8AA1E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23C8AA170(*a1, *a2);
}

uint64_t sub_23C8AA1F4()
{
  return sub_23C8AA1A4();
}

uint64_t sub_23C8AA1FC()
{
  return sub_23C8AA180();
}

uint64_t sub_23C8AA204()
{
  sub_23C911BBC();
  sub_23C8AA180();
  return sub_23C911BF8();
}

uint64_t SQLRequest.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C7DF56C(v1, a1);
}

uint64_t SQLRequest.adapter.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23C811CFC(a1, v1);
}

uint64_t (*SQLRequest.adapter.modify())()
{
  return nullsub_1;
}

uint64_t SQLRequest.init(sql:arguments:adapter:cached:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  char v13;
  _BYTE v15[40];
  _QWORD v16[2];
  __int128 v17;

  sub_23C7E79A8(&qword_25430DA08);
  v12 = sub_23C7E41DC();
  *(_OWORD *)(v12 + 16) = xmmword_23C912A20;
  v16[0] = a1;
  v16[1] = a2;
  v17 = *a3;
  sub_23C7F96B0(v16);
  sub_23C7F96E0(v16, (void *)(v12 + 32));
  sub_23C7DF56C(a4, (uint64_t)v15);
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if ((a5 & 1) != 0)
    v13 = 0;
  else
    v13 = 2;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = v12;
  sub_23C811CFC((uint64_t)v15, a6);
  *(_BYTE *)(a6 + 48) = v13;
  return sub_23C7E7938(a4, &qword_25430DBD0);
}

uint64_t SQLRequest.init(literal:adapter:cached:)()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BYTE v6[40];

  sub_23C7EC7D4();
  sub_23C7DF56C(v1, (uint64_t)v6);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  if ((v0 & 1) != 0)
    v4 = 0;
  else
    v4 = 2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = v3;
  sub_23C811CFC((uint64_t)v6, v2);
  *(_BYTE *)(v2 + 48) = v4;
  return sub_23C7E7938(v1, &qword_25430DBD0);
}

uint64_t SQLRequest.sqlSubquery.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[21];

  v4[0] = *(_QWORD *)(v1 + 40);
  sub_23C89F6C4((uint64_t)v4);
  sub_23C8104B8(v4, a1);
  return swift_bridgeObjectRetain();
}

uint64_t SQLRequest.fetchCount(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = v2;
  v6 = MEMORY[0x24BEE4AF8];
  sub_23C7EE664();
  v8 = v7;
  v26 = v7;
  v9 = MEMORY[0x24BEE4B00];
  if (((unint64_t)"QL with empty selection" & 0x2000000000000000) == 0
    || (((unint64_t)"QL with empty selection" >> 56) & 0xF) != 0)
  {
    v10 = *(_QWORD *)(v7 + 16);
    if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
    {
      sub_23C7E0A70();
      v8 = v21;
    }
    v22 = 0xD000000000000016;
    v23 = 0x800000023C91DFB0;
    v24 = v6;
    v11 = MEMORY[0x24BEE4B00];
    v25 = MEMORY[0x24BEE4B00];
    sub_23C7F96B0(&v22);
    *(_QWORD *)(v8 + 16) = v10 + 1;
    v9 = v11;
    sub_23C7E99DC(v8 + 184 * v10, v22);
    v26 = v8;
  }
  SQLInterpolation.appendInterpolation<A>(_:)(v4, a2, (uint64_t)&protocol witness table for SQLRequest<A>);
  v12 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_23C7E0A70();
    v12 = v19;
  }
  v13 = *(_QWORD *)(v12 + 16);
  if (v13 >= *(_QWORD *)(v12 + 24) >> 1)
  {
    sub_23C7E0A70();
    v12 = v20;
  }
  v22 = 41;
  v23 = 0xE100000000000000;
  v24 = v6;
  v25 = v9;
  sub_23C7F96B0(&v22);
  *(_QWORD *)(v12 + 16) = v13 + 1;
  sub_23C7E99DC(v12 + 184 * v13, v22);
  sub_23C8106CC(&v22, v12);
  sub_23C81171C();
  v16 = v15;
  if (v3)
  {
    sub_23C7E7938((uint64_t)&v22, &qword_256BCA5F8);
    return v16;
  }
  v17 = v14;
  result = sub_23C7E7938((uint64_t)&v22, &qword_256BCA5F8);
  if ((v17 & 1) == 0)
    return v16;
  __break(1u);
  return result;
}

uint64_t SQLRequest.makePreparedRequest(_:forSingleResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  GRDBInternal::StatementArguments v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[5];
  _QWORD v21[2];

  v4 = v2;
  type metadata accessor for StatementArgumentsSink();
  swift_allocObject();
  swift_retain();
  v7 = sub_23C7E0B8C(0);
  v8 = MEMORY[0x24BEE4AF8];
  sub_23C7E0C50();
  type metadata accessor for SQLGenerationContext();
  swift_allocObject();
  sub_23C7E30C0(a1, v7, v8);
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_23C8A9A6C(v9);
  if (v3)
  {
    sub_23C7DC4C4();
    return swift_bridgeObjectRelease();
  }
  v20[0] = v10;
  sub_23C7E79A8(&qword_25430D9F8);
  sub_23C7F16DC();
  v11 = sub_23C910E3C();
  v13 = v12;
  sub_23C7E087C();
  swift_bridgeObjectRelease();
  v14 = *(unsigned __int8 *)(v4 + 48);
  if (v14 == 2)
  {
    v15 = sub_23C8C8C84(v11, v13, 0);
  }
  else if ((v14 & 1) != 0)
  {
    v15 = sub_23C7DF68C(v11, v13);
  }
  else
  {
    v15 = Database.cachedStatement(sql:)(v11, v13);
  }
  v16 = v15;
  swift_bridgeObjectRelease();
  sub_23C7E0BF0(v20);
  v21[0] = v20[0];
  v21[1] = v20[1];
  v17.values._rawValue = v21;
  Statement.setArguments(_:)(v17);
  if (v18)
  {
    sub_23C7DC4C4();
    swift_release();
    sub_23C7E087C();
    return swift_bridgeObjectRelease();
  }
  sub_23C7E087C();
  swift_bridgeObjectRelease();
  sub_23C7DF56C(v4, (uint64_t)v20);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)a2 = v16;
  sub_23C811CFC((uint64_t)v20, a2 + 8);
  sub_23C7F1754(*(_QWORD *)(a2 + 48));
  result = sub_23C7DC4C4();
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_23C8AA820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SQLRequest.makePreparedRequest(_:forSingleResult:)(a1, a2);
}

uint64_t sub_23C8AA838(uint64_t a1, uint64_t a2)
{
  return SQLRequest.fetchCount(_:)(a1, a2);
}

uint64_t _s12GRDBInternal10SQLRequestV20unicodeScalarLiteralACyxGSS_tcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v4 = MEMORY[0x24BEE4AF8];
  return SQLRequest.init(sql:arguments:adapter:cached:)(a1, a2, &v4, (uint64_t)v5, 0, a3);
}

uint64_t sub_23C8AA8A4()
{
  return SQLRequest.init(stringInterpolation:)();
}

uint64_t sub_23C8AA8AC(_QWORD *a1)
{
  return SQLRequest.init(stringLiteral:)(*a1, a1[1]);
}

void sub_23C8AA8B8()
{
  JUMPOUT(0x242626100);
}

unint64_t sub_23C8AA8CC()
{
  unint64_t result;

  result = qword_256BCD2E0[0];
  if (!qword_256BCD2E0[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SQLInterpolation, &type metadata for SQLInterpolation);
    atomic_store(result, qword_256BCD2E0);
  }
  return result;
}

void sub_23C8AA908()
{
  JUMPOUT(0x242626100);
}

void sub_23C8AA918()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C8AA928()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_23C8AA934()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t sub_23C8AA940(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8AA970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C8AA9E0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
    goto LABEL_7;
  }
  sub_23C8089A0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 sub_23C8AAA88(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_23C8AAAA4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t sub_23C8AAAF8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_23C8AAB38(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SQLRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLRequest);
}

uint64_t getEnumTagSinglePayload for SharedValueObservationExtent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_23C8AAC1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8AAC68 + 4 * byte_23C9184DA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8AAC9C + 4 * byte_23C9184D5[v4]))();
}

uint64_t sub_23C8AAC9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8AACA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8AACACLL);
  return result;
}

uint64_t sub_23C8AACB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8AACC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8AACC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8AACCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23C8AACD8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for SQLRequest.Cache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLRequest.Cache);
}

void sub_23C8AACF0()
{
  JUMPOUT(0x242626100);
}

uint64_t sub_23C8AAD00(uint64_t a1)
{
  sub_23C7F9AE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_WORD *)(a1 + 160));
  return a1;
}

BOOL static SharedValueObservationExtent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SharedValueObservationExtent.hash(into:)()
{
  return sub_23C911BC8();
}

uint64_t SharedValueObservationExtent.hashValue.getter()
{
  sub_23C911BBC();
  sub_23C911BC8();
  return sub_23C911BF8();
}

uint64_t *ValueObservation.shared(in:scheduling:extent:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v18;
  uint64_t v19[14];

  v9 = *a4;
  sub_23C7E9360(v19);
  v12 = a5 + 16;
  v10 = *(_QWORD *)(a5 + 16);
  v11 = *(_QWORD *)(v12 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for SharedValueObservation(0, AssociatedTypeWitness, v14, v15);
  v18 = v9;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v10;
  v16[3] = v11;
  sub_23C7E9360(v16 + 4);
  v16[18] = a1;
  v16[19] = a2;
  v16[20] = a3;
  swift_retain_n();
  sub_23C83D298(v19);
  swift_unknownObjectRetain();
  return sub_23C8AB070(a3, &v18, (uint64_t)sub_23C8AB040, (uint64_t)v16);
}

uint64_t type metadata accessor for SharedValueObservation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedValueObservation);
}

void sub_23C8AAEFC(int a1, int a2, int a3, int a4, void *__src, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _BYTE v11[112];

  memcpy(v11, __src, sizeof(v11));
  type metadata accessor for ValueObservation(0, a9, a10, v10);
  ValueObservation.start(in:scheduling:onError:onChange:)();
}

uint64_t sub_23C8AAFAC()
{
  _QWORD *v0;

  if (v0[4])
    swift_release();
  if (v0[6])
    swift_release();
  if (v0[8])
    swift_release();
  if (v0[10])
    swift_release();
  if (v0[12])
    swift_release();
  if (v0[15] >= 2uLL)
    swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23C8AB040(int a1, int a2, int a3, int a4)
{
  uint64_t *v4;

  sub_23C8AAEFC(a1, a2, a3, a4, v4 + 4, v4[18], v4[19], v4[20], v4[2], v4[3]);
}

uint64_t *sub_23C8AB070(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_23C8AB110(a1, a2, a3, a4);
}

uint64_t sub_23C8AB0D0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_23C8AB0F4()
{
  sub_23C8AB0D0();
  return swift_deallocClassInstance();
}

uint64_t *sub_23C8AB110(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *v4;
  v9 = *a2;
  v4[6] = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  *((_BYTE *)v4 + 64) = 0;
  v4[9] = 0;
  v10 = (uint64_t)v4 + *(_QWORD *)(*v4 + 144);
  v11 = *(_QWORD *)(v8 + 80);
  sub_23C7DDB10(&qword_25430CCC8);
  v12 = sub_23C911C04();
  sub_23C7DE70C(v10, 1, 1, v12);
  v4[2] = a1;
  *((_BYTE *)v4 + 24) = v9;
  v4[4] = a3;
  v4[5] = a4;
  type metadata accessor for SharedValueObservation.Client(0, v11, v13, v14);
  v4[7] = sub_23C911124();
  return v4;
}

id SharedValueObservation.start(onError:onChange:)()
{
  sub_23C7E79A8(&qword_256BCD368);
  return sub_23C8ABA10((void (*)(id))sub_23C8AB768);
}

uint64_t sub_23C8AB24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *__return_ptr, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t result;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v75 = a6;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  sub_23C7DDB10(&qword_25430CCC8);
  v12 = sub_23C911C04();
  v70 = sub_23C9114E4();
  v68 = *(_QWORD *)(v70 - 8);
  v13 = MEMORY[0x24BDAC7A8](v70);
  v69 = (char *)&v61 - v14;
  v71 = v12;
  v67 = *(_QWORD *)(v12 - 8);
  v15 = *(_QWORD *)(v67 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v64 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v61 - v17;
  LODWORD(v73) = *(unsigned __int8 *)(a1 + 64);
  v72 = v11;
  type metadata accessor for SharedValueObservation.Client(0, v11, v19, v20);
  v65 = a2;
  v66 = a4;
  v21 = sub_23C8857B0(a2, a3, a4, a5);
  v79 = v21;
  swift_beginAccess();
  sub_23C91119C();
  swift_retain();
  swift_retain();
  v74 = v21;
  swift_retain();
  sub_23C91116C();
  swift_endAccess();
  *(_BYTE *)(a1 + 64) = 1;
  if ((v73 & 1) != 0)
  {
    v22 = v67;
    v73 = a3;
    v63 = a5;
    v23 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
    swift_beginAccess();
    v25 = v68;
    v24 = (uint64_t)v69;
    v26 = v23;
    v27 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v26, v70);
    if (sub_23C7DE718(v24, 1, v71) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v27);
    }
    else
    {
      v42 = v22;
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
      v62 = v18;
      v44 = v24;
      v45 = v71;
      v43(v18, v44, v71);
      v70 = *(_QWORD *)(a1 + 16);
      v46 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      v47 = v64;
      v46(v64, v18, v45);
      v48 = (*(unsigned __int8 *)(v42 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      v49 = (v15 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = v72;
      v43((char *)(v50 + v48), (uint64_t)v47, v45);
      v51 = (uint64_t *)(v50 + v49);
      v52 = v73;
      *v51 = v65;
      v51[1] = v52;
      v53 = (uint64_t *)(v50 + ((v49 + 23) & 0xFFFFFFFFFFFFFFF8));
      v54 = v63;
      *v53 = v66;
      v53[1] = v54;
      swift_retain();
      swift_retain();
      sub_23C906020((uint64_t (*)(void))sub_23C8AC664, v50);
      swift_release();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v62, v45);
    }
  }
  else
  {
    v28 = type metadata accessor for AnyDatabaseCancellable();
    v29 = *(void (**)(_QWORD *__return_ptr, uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
    v30 = swift_allocObject();
    swift_weakInit();
    v31 = swift_allocObject();
    v32 = v72;
    *(_QWORD *)(v31 + 16) = v72;
    *(_QWORD *)(v31 + 24) = v30;
    v33 = swift_allocObject();
    swift_weakInit();
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v32;
    *(_QWORD *)(v34 + 24) = v33;
    swift_retain();
    swift_retain();
    v29(v76, sub_23C8AC528, v31, sub_23C8AC530, v34);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v35 = v77;
    v36 = v78;
    v37 = sub_23C800944((uint64_t)v76, v77);
    MEMORY[0x24BDAC7A8](v37);
    v39 = (char *)&v61 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v40 + 16))(v39);
    v41 = sub_23C88FE74((uint64_t)v39, v28, v35, v36);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v76);
    *(_QWORD *)(a1 + 72) = v41;
    swift_release();
  }
  v55 = swift_allocObject();
  v56 = v74;
  *(_QWORD *)(v55 + 16) = a1;
  *(_QWORD *)(v55 + 24) = v56;
  v57 = type metadata accessor for AnyDatabaseCancellable();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v58 = AnyDatabaseCancellable.init(cancel:)((uint64_t)sub_23C8AC564, v55);
  v59 = v75;
  v75[3] = v57;
  v59[4] = (uint64_t)&protocol witness table for AnyDatabaseCancellable;
  result = swift_release();
  *v59 = v58;
  return result;
}

uint64_t sub_23C8AB768@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_23C8AB24C(v1[2], v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t sub_23C8AB788(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C8AB9CC(a1, (void (*)(id))sub_23C8AC71C);
    return swift_release();
  }
  return result;
}

uint64_t sub_23C8AB7EC()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23C8AB848();
    return swift_release();
  }
  return result;
}

id sub_23C8AB848()
{
  return sub_23C8ABA10((void (*)(id))sub_23C8AC704);
}

void sub_23C8AB88C(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C7DDB10(&qword_25430CCC8);
  v13 = sub_23C911C04();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v18 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = (void *)*v15;
    a2(*v15);

  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v10 + 32))(v12, v15, a6);
    a4(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  }
}

id sub_23C8AB9CC(uint64_t a1, void (*a2)(id))
{
  return sub_23C8ABA10(a2);
}

id sub_23C8ABA10(void (*a1)(id))
{
  uint64_t v1;

  a1(objc_msgSend(*(id *)(v1 + 48), sel_lock));
  return objc_msgSend(*(id *)(v1 + 48), sel_unlock);
}

uint64_t SharedValueObservation.publisher()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_23C83DEEC((uint64_t)j_j___s12GRDBInternal22SharedValueObservationC5start7onError0F6ChangeAA19DatabaseCancellable_pys0G0_pc_yxctF, v1, a1);
  return swift_retain();
}

uint64_t sub_23C8ABAAC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  void (*v20)(void *);
  _QWORD v21[3];

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  sub_23C7DDB10(&qword_25430CCC8);
  v5 = sub_23C911C04();
  v6 = sub_23C9114E4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (_QWORD *)((char *)v21 - v8);
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 56);
  v13 = type metadata accessor for SharedValueObservation.Client(0, v4, v11, v12);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 56) = sub_23C911124();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    swift_release();
    sub_23C7DE70C((uint64_t)v9, 1, 1, v5);
    v14 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
    swift_beginAccess();
  }
  else
  {
    *v9 = a2;
    swift_storeEnumTagMultiPayload();
    sub_23C7DE70C((uint64_t)v9, 0, 1, v5);
    v14 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
    swift_beginAccess();
    v15 = a2;
  }
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v7 + 40))(v14, v9, v6);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v16 = sub_23C9110C4();
  swift_bridgeObjectRelease();
  for (v21[0] = v16; v16 != MEMORY[0x242624DA4](v10, v13); v16 = v21[0])
  {
    v18 = sub_23C91113C();
    sub_23C9110F4();
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v10 + 32 + 8 * v16);
      swift_retain();
    }
    else
    {
      v19 = sub_23C911658();
    }
    swift_bridgeObjectRetain();
    MEMORY[0x242624DBC](v21, v10, v13);
    swift_bridgeObjectRelease();
    v20 = *(void (**)(void *))(v19 + 16);
    swift_retain();
    v20(a2);
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8ABD5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t i;

  v4 = *(_QWORD *)(*a1 + 80);
  sub_23C7DDB10(&qword_25430CCC8);
  v5 = sub_23C911C04();
  v6 = sub_23C9114E4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&i - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))((char *)&i - v8, a2, v4);
  swift_storeEnumTagMultiPayload();
  sub_23C7DE70C((uint64_t)v9, 0, 1, v5);
  v10 = (char *)a1 + *(_QWORD *)(*a1 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_beginAccess();
  v11 = a1[7];
  v14 = type metadata accessor for SharedValueObservation.Client(0, v4, v12, v13);
  swift_bridgeObjectRetain();
  v15 = sub_23C9110C4();
  for (i = v15; v15 != MEMORY[0x242624DA4](v11, v14); v15 = i)
  {
    v17 = sub_23C91113C();
    sub_23C9110F4();
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v11 + 32 + 8 * v15);
      swift_retain();
    }
    else
    {
      v18 = sub_23C911658();
    }
    swift_bridgeObjectRetain();
    MEMORY[0x242624DBC](&i, v11, v14);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t))(v18 + 32);
    swift_retain();
    v19(a2);
    swift_release();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C8ABF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[4];

  sub_23C7DDB10(&qword_25430CCC8);
  v4 = sub_23C911C04();
  v5 = sub_23C9114E4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - v7;
  swift_beginAccess();
  v9 = sub_23C91119C();
  v10 = MEMORY[0x242626100](MEMORY[0x24BEE12E8], v9);
  sub_23C890314((uint64_t)sub_23C8AC6F4, a2, v9, v10);
  swift_endAccess();
  v13[1] = *(_QWORD *)(a1 + 56);
  MEMORY[0x242626100](MEMORY[0x24BEE12E0], v9);
  result = sub_23C911364();
  if ((result & 1) != 0 && *(_BYTE *)(a1 + 24) == 1)
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    swift_release();
    sub_23C7DE70C((uint64_t)v8, 1, 1, v4);
    v12 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 144);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
    return swift_endAccess();
  }
  return result;
}

id *SharedValueObservation.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  v1 = (char *)v0 + *((_QWORD *)*v0 + 18);
  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C911C04();
  v2 = sub_23C9114E4();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SharedValueObservation.__deallocating_deinit()
{
  SharedValueObservation.deinit();
  return swift_deallocClassInstance();
}

uint64_t SharedValueObservation.values(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_23C7DDB10(&qword_25430CCC8);
  v2 = sub_23C911208();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v6 - v4, a1);
  sub_23C83D22C();
  return swift_retain();
}

unint64_t sub_23C8AC2D8()
{
  unint64_t result;

  result = qword_256BCD370[0];
  if (!qword_256BCD370[0])
  {
    result = MEMORY[0x242626100](&protocol conformance descriptor for SharedValueObservationExtent, &type metadata for SharedValueObservationExtent);
    atomic_store(result, qword_256BCD370);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SharedValueObservationExtent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C8AC360 + 4 * byte_23C918715[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C8AC394 + 4 * byte_23C918710[v4]))();
}

uint64_t sub_23C8AC394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8AC39C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C8AC3A4);
  return result;
}

uint64_t sub_23C8AC3B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C8AC3B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C8AC3BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C8AC3C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedValueObservationExtent()
{
  return &type metadata for SharedValueObservationExtent;
}

uint64_t sub_23C8AC3E0()
{
  uint64_t result;
  unint64_t v1;

  sub_23C7DDB10(&qword_25430CCC8);
  sub_23C911C04();
  result = sub_23C9114E4();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SharedValueObservation()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for SharedValueObservation.Client(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23C7DDAD8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedValueObservation.Client);
}

uint64_t sub_23C8AC4E0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23C8AC504()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C8AC528(uint64_t a1)
{
  return sub_23C8AB788(a1);
}

uint64_t sub_23C8AC530()
{
  return sub_23C8AB7EC();
}

uint64_t sub_23C8AC538()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

