uint64_t sub_1B21FA8EC(uint64_t result, int a2, int a3, float a4)
{
  int v4;

  switch(a2)
  {
    case 4:
      if (a3 <= 0)
      {
        *(float *)(result + 272) = a4;
        v4 = 256;
      }
      else if (a3 > 2)
      {
        if (a3 == 3)
        {
          *(float *)(result + 288) = a4;
          v4 = 1024;
        }
        else
        {
          if (a3 > 5)
            return result;
          *(float *)(result + 320) = a4;
          v4 = 64;
        }
      }
      else
      {
        *(float *)(result + 304) = a4;
        v4 = 16;
      }
      break;
    case 3:
      if (a3 <= 0)
      {
        *(float *)(result + 240) = a4;
        v4 = 1;
      }
      else
      {
        if (a3 != 3)
          return result;
        *(float *)(result + 256) = a4;
        v4 = 4;
      }
      break;
    case 2:
      if (a3 <= 0)
      {
        *(float *)(result + 260) = a4;
        v4 = 512;
      }
      else if (a3 > 2)
      {
        if (a3 == 3)
        {
          *(float *)(result + 276) = a4;
          v4 = 2048;
        }
        else
        {
          if (a3 > 5)
            return result;
          *(float *)(result + 308) = a4;
          v4 = 128;
        }
      }
      else
      {
        *(float *)(result + 292) = a4;
        v4 = 32;
      }
      break;
    default:
      return result;
  }
  *(_DWORD *)(result + 328) |= v4;
  return result;
}

float sub_1B21FA9D8(float *a1, int a2, int a3)
{
  switch(a2)
  {
    case 4:
      if (a3 <= 0)
        return a1[68];
      if (a3 <= 2)
        return a1[76];
      if (a3 == 3)
        return a1[72];
      if (a3 <= 5)
        return a1[80];
      break;
    case 3:
      if (a3 <= 0)
        return a1[60];
      if (a3 == 3)
        return a1[64];
      break;
    case 2:
      if (a3 <= 0)
        return a1[65];
      if (a3 <= 2)
        return a1[73];
      if (a3 == 3)
        return a1[69];
      if (a3 <= 5)
        return a1[77];
      break;
  }
  return 3.4028e38;
}

_QWORD *sub_1B21FAA9C(_QWORD *result)
{
  *result = off_1E63CC8E0;
  return result;
}

void sub_1B21FAAB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E63CC8E0;
  sub_1B21FF5FC(a1);
}

uint64_t sub_1B21FAAC8()
{
  return 216;
}

const char *sub_1B21FAAD0(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t *v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  int32x4_t *v12;
  uint64_t k;
  uint64_t m;
  __int32 v15;

  sub_1B21FADBC(a1, (uint64_t)a2, a3);
  v5 = 0;
  v6 = a1 + 80;
  v7 = a2 + 4;
  do
  {
    for (i = 0; i != 4; ++i)
      v7->i32[i] = *(_DWORD *)(v6 + i * 4);
    ++v5;
    v6 += 16;
    ++v7;
  }
  while (v5 != 3);
  for (j = 0; j != 4; ++j)
    a2[7].i32[j] = *(_DWORD *)(a1 + 128 + j * 4);
  v10 = 0;
  v11 = a1 + 144;
  v12 = a2 + 8;
  do
  {
    for (k = 0; k != 4; ++k)
      v12->i32[k] = *(_DWORD *)(v11 + k * 4);
    ++v10;
    v11 += 16;
    ++v12;
  }
  while (v10 != 3);
  for (m = 0; m != 4; ++m)
    a2[11].i32[m] = *(_DWORD *)(a1 + 192 + m * 4);
  a2[12] = vrev64q_s32(*(int32x4_t *)(a1 + 212));
  v15 = *(unsigned __int8 *)(a1 + 73);
  a2[13].i32[0] = *(unsigned __int8 *)(a1 + 208);
  a2[13].i32[1] = v15;
  return "btSliderConstraintData";
}

uint64_t sub_1B21FABC4(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E63CC8E0;
  *(_QWORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = a3;
  sub_1B21FAC38();
  *(_QWORD *)(a1 + 48) = &unk_1EEFD49C0;
  *(_QWORD *)(a1 + 56) = 0x3E99999A00000000;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void *sub_1B21FAC38()
{
  unsigned __int8 v0;
  float32x2_t v2;
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEFD4C80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EEFD4C80))
  {
    v2 = 0;
    v3 = 0;
    sub_1B21FEA60(&unk_1EEFD49C0, 0, 0, &v2, 0.0);
    __cxa_atexit((void (*)(void *))sub_1B21FAF0C, &unk_1EEFD49C0, &dword_1B178D000);
    __cxa_guard_release(&qword_1EEFD4C80);
  }
  v2 = 0;
  v3 = 0;
  sub_1B21FEA84((uint64_t)&unk_1EEFD49C0, &v2, 0.0);
  return &unk_1EEFD49C0;
}

double sub_1B21FACE4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E63CC8E0;
  *(_QWORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  result = 0.000000381469818;
  *(_QWORD *)(a1 + 56) = 0x3E99999A00000000;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

float sub_1B21FAD2C(float a1, float a2, float a3, float a4, float a5)
{
  float v5;
  float v7;
  float v8;

  v5 = 1.0;
  if (a2 <= a3)
  {
    v5 = 0.0;
    if (a2 != a3)
    {
      v7 = a4 / a5;
      if (v7 >= 0.0)
      {
        if (v7 <= 0.0)
          return v5;
        if (a1 > a3 || (float)(a3 - v7) >= a1)
        {
          if (a1 <= a3)
            return 1.0;
          else
            return 0.0;
        }
        v8 = a3 - a1;
      }
      else
      {
        if (a1 < a2 || (float)(a2 - v7) <= a1)
        {
          if (a1 >= a2)
            return 1.0;
          else
            return 0.0;
        }
        v8 = a2 - a1;
      }
      return v8 / v7;
    }
  }
  return v5;
}

const char *sub_1B21FADBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, *(_QWORD *)(a1 + 48));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v6);
  *(_QWORD *)(a2 + 16) = v7;
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v6);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = *(unsigned __int8 *)(a1 + 28);
  *(_QWORD *)(a2 + 28) = *(_QWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a2 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(unsigned int *)(v8 + 548);
  if ((int)v9 >= 1)
  {
    v10 = *(_QWORD **)(v8 + 560);
    do
    {
      if (*v10 == a1)
        *(_DWORD *)(a2 + 48) = 1;
      ++v10;
      --v9;
    }
    while (v9);
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(unsigned int *)(v11 + 548);
  if ((int)v12 >= 1)
  {
    v13 = *(_QWORD **)(v11 + 560);
    do
    {
      if (*v13 == a1)
        *(_DWORD *)(a2 + 48) = 1;
      ++v13;
      --v12;
    }
    while (v12);
  }
  return "btTypedConstraintData";
}

double sub_1B21FAF0C(_QWORD *a1)
{
  *a1 = off_1E63CBAA0;
  sub_1B1810570((uint64_t)(a1 + 68));
  return nullsub_16(a1);
}

void sub_1B21FAF44(uint64_t a1, float a2)
{
  _QWORD *v2;
  float v3;
  float v5;
  float v6;

  *(_QWORD *)(a1 + 20) = 0;
  v2 = (_QWORD *)(a1 + 20);
  *(_BYTE *)(a1 + 28) = 0;
  v3 = *(float *)(a1 + 4);
  if (v3 >= 0.0)
  {
    v5 = fmodf(a2 - *(float *)a1, 6.2832);
    if (v5 >= -3.1416)
    {
      if (v5 > 3.1416)
        v5 = v5 + -6.2832;
    }
    else
    {
      v5 = v5 + 6.2832;
    }
    if (v5 >= (float)-v3)
    {
      if (v5 <= v3)
        return;
      *(_BYTE *)(a1 + 28) = 1;
      v6 = v3 - v5;
      __asm { FMOV            V0.2S, #-1.0 }
    }
    else
    {
      *(_BYTE *)(a1 + 28) = 1;
      v6 = -(float)(v3 + v5);
      __asm { FMOV            V0.2S, #1.0 }
    }
    *(float *)&_D0 = v6;
    *v2 = _D0;
  }
}

void sub_1B21FB010(float *a1)
{
  fmodf(*a1 + a1[1], 6.2832);
}

void sub_1B21FB074(float *a1)
{
  fmodf(*a1 - a1[1], 6.2832);
}

uint64_t sub_1B21FB0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1B21FB218(a1, a2, a3);
  v7 = 0;
  *(_QWORD *)v8 = off_1E63CD228;
  *(_QWORD *)(v8 + 292) = 0;
  *(_QWORD *)(v8 + 324) = 0;
  *(_QWORD *)(v8 + 380) = 0;
  *(_QWORD *)(v8 + 420) = 0;
  *(_BYTE *)(v8 + 256) = 1;
  *(_QWORD *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 236) = 0;
  *(_DWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 272) = a4;
  *(_BYTE *)(v8 + 312) = 1;
  *(_QWORD *)(v8 + 304) = 0;
  *(_BYTE *)(v8 + 344) = 1;
  *(_QWORD *)(v8 + 336) = 0;
  *(_OWORD *)(v8 + 352) = xmmword_1B22CA5D0;
  *(_DWORD *)(v8 + 368) = 0;
  *(_WORD *)(v8 + 374) = 0;
  *(_BYTE *)(v8 + 400) = 1;
  *(_QWORD *)(v8 + 392) = 0;
  *(_DWORD *)(v8 + 408) = 0;
  *(_BYTE *)(v8 + 440) = 1;
  *(_QWORD *)(v8 + 432) = 0;
  if (!a4)
  {
    v9 = sub_1B21FF5F0(320, 16);
    sub_1B21F59AC(v9);
    *(_QWORD *)(a1 + 272) = v10;
    v7 = 1;
  }
  *(_BYTE *)(a1 + 373) = v7;
  v11 = sub_1B21FF5F0(112, 16);
  *(_QWORD *)(a1 + 280) = sub_1B21DBCE8(v11);
  *(_BYTE *)(a1 + 372) = 1;
  v12 = sub_1B21FF5F0(152, 16);
  v13 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)v12 = &off_1E63CD980;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = a2;
  *(_BYTE *)(v12 + 80) = 1;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 60) = 0;
  *(_BYTE *)(v12 + 112) = 1;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 92) = 0;
  *(_BYTE *)(v12 + 144) = 1;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 124) = 0;
  *(_QWORD *)(a1 + 264) = v12;
  return a1;
}

double sub_1B21FB218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  sub_1B21D065C(a1, a2, a3);
  *(_QWORD *)v3 = off_1E63CC1C0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 144) = xmmword_1B22CA5E0;
  *(_QWORD *)(v3 + 160) = 0xA00000000;
  *(_QWORD *)(v3 + 184) = 0x100000000;
  *(_OWORD *)(v3 + 168) = xmmword_1B22CA5F0;
  *(_OWORD *)(v3 + 192) = xmmword_1B22CA600;
  *(_QWORD *)(v3 + 208) = 0x200000104;
  *(_DWORD *)(v3 + 216) = 128;
  result = 5.28028251e237;
  *(_QWORD *)(v3 + 220) = 0x7149F2CA42C80000;
  *(_DWORD *)(v3 + 228) = 1065353216;
  return result;
}

uint64_t sub_1B21FB2A0(uint64_t a1)
{
  void (***v2)(_QWORD);

  *(_QWORD *)a1 = off_1E63CD228;
  if (*(_BYTE *)(a1 + 372))
  {
    (***(void (****)(_QWORD))(a1 + 280))(*(_QWORD *)(a1 + 280));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 280));
  }
  v2 = *(void (****)(_QWORD))(a1 + 264);
  if (v2)
  {
    (**v2)(v2);
    sub_1B21FF5FC(*(_QWORD *)(a1 + 264));
  }
  if (*(_BYTE *)(a1 + 373))
  {
    (***(void (****)(_QWORD))(a1 + 272))(*(_QWORD *)(a1 + 272));
    sub_1B21FF5FC(*(_QWORD *)(a1 + 272));
  }
  sub_1B1810570(a1 + 416);
  sub_1B1810570(a1 + 376);
  sub_1B1810570(a1 + 320);
  sub_1B1810570(a1 + 288);
  sub_1B1810570(a1 + 232);
  return sub_1B21D06C8(a1);
}

void sub_1B21FB354(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1B21FB2A0(a1);
  sub_1B21FF5FC(v1);
}

void sub_1B21FB368(uint64_t a1, __n128 a2)
{
  int v2;
  unsigned __int32 v3;
  uint64_t i;
  uint64_t v6;
  BOOL v7;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    v3 = a2.n128_u32[0];
    for (i = 0; i < v2; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v6)
        v7 = (*(_DWORD *)(v6 + 264) & 2) == 0;
      else
        v7 = 1;
      if (!v7 && *(_DWORD *)(v6 + 244) != 2 && (*(_BYTE *)(v6 + 232) & 2) != 0)
      {
        a2.n128_u32[0] = v3;
        a2 = sub_1B21FEB94(v6, a2);
        v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
}

uint64_t sub_1B21FB3E8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1B21D2F74(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2) & 0x1800) != 0)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
      if (v3 >= 1)
      {
        v4 = v3 + 1;
        do
        {
          v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 216))(a1, v4 - 2);
          sub_1B21FB530(a1, v5);
          --v4;
        }
        while (v4 > 1);
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (result)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    if ((result & 0x4003) != 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if (result)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
        if ((_DWORD)result)
        {
          if (*(int *)(a1 + 380) >= 1)
          {
            v9 = 0;
            do
            {
              v10 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v9);
              result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, *(_QWORD *)(a1 + 104));
              ++v9;
            }
            while (v9 < *(int *)(a1 + 380));
          }
        }
      }
    }
  }
  return result;
}

void sub_1B21FB530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  float32x4_t v8;
  float32x4_t v9;
  unsigned int v10;
  __int16 v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  __float2 v28;
  __float2 v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  uint64_t v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  uint64_t v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  float32x4_t v97;
  float32x4_t *v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint64_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  int v156;
  float32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  int8x16_t v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  uint64_t v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  float32x4_t v181;
  float32x4_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  float32x4_t *v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  uint64_t v201;
  float *v202;
  float v203;
  float v204;
  float v205;
  float v206;
  uint64_t v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float32x4_t v216;
  uint64_t v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  _QWORD v223[2];
  __int128 v224;
  __int128 v225;
  int8x16_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v10 = *(unsigned int *)(a2 + 60);
  if (*(float *)&v10 > 0.0)
  {
    v11 = v7;
    switch(*(_DWORD *)(a2 + 8))
    {
      case 3:
        v230 = (float32x4_t)xmmword_1B2244DB0;
        v231 = (float32x4_t)xmmword_1B2244DD0;
        v232 = (float32x4_t)xmmword_1B2244D90;
        v97 = *(float32x4_t *)(a2 + 368);
        v98 = *(float32x4_t **)(a2 + 40);
        v99 = vmulq_f32(v97, v98[1]);
        v100 = (int8x16_t)vmulq_f32(v97, v98[2]);
        v101 = (int8x16_t)vmulq_f32(v97, v98[3]);
        v101.i32[3] = 0;
        *(float32x2_t *)v99.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v100.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)));
        *(float32x2_t *)&v99.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)), 0);
        v233 = vaddq_f32(v99, v98[4]);
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v102 + 112))(v102, &v230, *(float *)&v10);
        v103 = *(float32x4_t *)(a2 + 384);
        v104 = *(float32x4_t **)(a2 + 48);
        v105 = vmulq_f32(v103, v104[1]);
        v106 = (int8x16_t)vmulq_f32(v103, v104[2]);
        v107 = (int8x16_t)vmulq_f32(v103, v104[3]);
        v107.i32[3] = 0;
        *(float32x2_t *)v105.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v106.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL)));
        *(float32x2_t *)&v105.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL)), 0);
        v233 = vaddq_f32(v105, v104[4]);
        if ((v5 & 0x800) != 0)
        {
          v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v108 + 112))(v108, &v230, *(float *)&v10);
        }
        break;
      case 4:
        v109 = *(float32x4_t **)(a2 + 40);
        v110 = v109[1];
        v111 = v109[2];
        v112 = *(float32x4_t *)(a2 + 656);
        v113 = *(float32x4_t *)(a2 + 672);
        v112.i32[3] = 0;
        v113.i32[3] = 0;
        v114 = *(float32x4_t *)(a2 + 688);
        v115 = *(float32x4_t *)(a2 + 704);
        v114.i32[3] = 0;
        v116 = v109[3];
        v117 = v109[4];
        v118 = vmlaq_lane_f32(vmulq_n_f32(v112, v116.f32[0]), v113, *(float32x2_t *)v116.f32, 1);
        v119 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v111.f32[0]), v113, *(float32x2_t *)v111.f32, 1), v114, v111, 2);
        v120 = (int8x16_t)vmulq_f32(v110, v115);
        v121 = (int8x16_t)vmulq_f32(v111, v115);
        v122 = (int8x16_t)vmulq_f32(v116, v115);
        v122.i32[3] = 0;
        v123 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v110.f32[0]), v113, *(float32x2_t *)v110.f32, 1), v114, v110, 2);
        *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v121.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)));
        *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)), 0);
        v230 = v123;
        v231 = v119;
        v232 = vmlaq_laneq_f32(v118, v114, v116, 2);
        v233 = vaddq_f32(v117, v110);
        if ((v5 & 0x800) != 0)
        {
          v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v185 + 112))(v185, &v230, *(float *)&v10);
          v186 = *(float32x4_t **)(a2 + 48);
          v187 = v186[1];
          v188 = v186[2];
          v189 = *(float32x4_t *)(a2 + 720);
          v190 = *(float32x4_t *)(a2 + 736);
          v189.i32[3] = 0;
          v190.i32[3] = 0;
          v191 = *(float32x4_t *)(a2 + 752);
          v192 = *(float32x4_t *)(a2 + 768);
          v191.i32[3] = 0;
          v193 = v186[3];
          v194 = vmlaq_lane_f32(vmulq_n_f32(v189, v193.f32[0]), v190, *(float32x2_t *)v193.f32, 1);
          v195 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v189, v188.f32[0]), v190, *(float32x2_t *)v188.f32, 1), v191, v188, 2);
          v196 = (int8x16_t)vmulq_f32(v187, v192);
          v197 = (int8x16_t)vmulq_f32(v188, v192);
          v198 = (int8x16_t)vmulq_f32(v193, v192);
          v198.i32[3] = 0;
          v199 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v189, v187.f32[0]), v190, *(float32x2_t *)v187.f32, 1), v191, v187, 2);
          *(float32x2_t *)v187.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v197.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL)));
          *(float32x2_t *)&v187.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)), 0);
          v200 = vaddq_f32(v186[4], v187);
          v230 = v199;
          v231 = v195;
          v232 = vmlaq_laneq_f32(v194, v191, v193, 2);
          v233 = v200;
          v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v201 + 112))(v201, &v230, *(float *)&v10);
        }
        else
        {
          v124 = *(float32x4_t **)(a2 + 48);
          v125 = *(float32x4_t *)(a2 + 720);
          v126 = *(float32x4_t *)(a2 + 736);
          v125.i32[3] = 0;
          v126.i32[3] = 0;
          v127 = v124[1];
          v128 = v124[2];
          v129 = *(float32x4_t *)(a2 + 752);
          v130 = *(float32x4_t *)(a2 + 768);
          v129.i32[3] = 0;
          v131 = v124[3];
          v132 = v124[4];
          v133 = vmlaq_lane_f32(vmulq_n_f32(v125, v131.f32[0]), v126, *(float32x2_t *)v131.f32, 1);
          v134 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v128.f32[0]), v126, *(float32x2_t *)v128.f32, 1), v129, v128, 2);
          v135 = (int8x16_t)vmulq_f32(v127, v130);
          v136 = (int8x16_t)vmulq_f32(v128, v130);
          v137 = (int8x16_t)vmulq_f32(v131, v130);
          v137.i32[3] = 0;
          v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v127.f32[0]), v126, *(float32x2_t *)v127.f32, 1), v129, v127, 2);
          *(float32x2_t *)v126.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v136.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)));
          *(float32x2_t *)&v126.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL)), 0);
          v230 = v138;
          v231 = v134;
          v232 = vmlaq_laneq_f32(v133, v129, v131, 2);
          v233 = vaddq_f32(v132, v126);
        }
        v202 = (float *)(a2 + 792);
        sub_1B21FB074(v202);
        v204 = v203;
        sub_1B21FB010(v202);
        if (v204 != v205 && (v11 & 0x1000) != 0)
        {
          if (v204 <= v205)
          {
            v206 = v205;
          }
          else
          {
            v204 = 0.0;
            v206 = 6.2832;
          }
          v229.i64[0] = __PAIR64__(v231.u32[2], v230.u32[2]);
          v229.i64[1] = v232.u32[2];
          v228.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v228.i64[1] = v232.u32[0];
          v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v227 = 0uLL;
          v208.n128_u32[0] = 10.0;
          v209.n128_u32[0] = v10;
          v210.n128_u32[0] = v10;
          v211.n128_f32[0] = v204;
          v212.n128_f32[0] = v206;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v207 + 120))(v209, v210, v211, v212, v208);
        }
        break;
      case 5:
        v41 = *(float32x4_t **)(a2 + 40);
        v42 = v41[1];
        v43 = v41[2];
        v44 = *(float32x4_t *)(a2 + 368);
        v45 = *(float32x4_t *)(a2 + 384);
        v44.i32[3] = 0;
        v45.i32[3] = 0;
        v46 = *(float32x4_t *)(a2 + 400);
        v47 = *(float32x4_t *)(a2 + 416);
        v46.i32[3] = 0;
        v48 = v41[3];
        v49 = v41[4];
        v50 = vmlaq_lane_f32(vmulq_n_f32(v44, v48.f32[0]), v45, *(float32x2_t *)v48.f32, 1);
        v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v43.f32[0]), v45, *(float32x2_t *)v43.f32, 1), v46, v43, 2);
        v52 = (int8x16_t)vmulq_f32(v42, v47);
        v53 = (int8x16_t)vmulq_f32(v43, v47);
        v54 = (int8x16_t)vmulq_f32(v48, v47);
        v54.i32[3] = 0;
        v55 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v42.f32[0]), v45, *(float32x2_t *)v42.f32, 1), v46, v42, 2);
        *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
        *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
        v230 = v55;
        v231 = v51;
        v232 = vmlaq_laneq_f32(v50, v46, v48, 2);
        v233 = vaddq_f32(v49, v42);
        if ((v5 & 0x800) != 0)
        {
          v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v139 + 112))(v139, &v230, *(float *)&v10);
          v140 = *(float32x4_t **)(a2 + 48);
          v141 = v140[1];
          v142 = v140[2];
          v143 = *(float32x4_t *)(a2 + 432);
          v144 = *(float32x4_t *)(a2 + 448);
          v143.i32[3] = 0;
          v144.i32[3] = 0;
          v145 = *(float32x4_t *)(a2 + 464);
          v146 = *(float32x4_t *)(a2 + 480);
          v145.i32[3] = 0;
          v147 = v140[3];
          v148 = vmlaq_lane_f32(vmulq_n_f32(v143, v147.f32[0]), v144, *(float32x2_t *)v147.f32, 1);
          v149 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v142.f32[0]), v144, *(float32x2_t *)v142.f32, 1), v145, v142, 2);
          v150 = (int8x16_t)vmulq_f32(v141, v146);
          v151 = (int8x16_t)vmulq_f32(v142, v146);
          v152 = (int8x16_t)vmulq_f32(v147, v146);
          v152.i32[3] = 0;
          v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v141.f32[0]), v144, *(float32x2_t *)v141.f32, 1), v145, v141, 2);
          *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v151.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)));
          *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v152.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL)), 0);
          v154 = vaddq_f32(v140[4], v141);
          v230 = v153;
          v231 = v149;
          v232 = vmlaq_laneq_f32(v148, v145, v147, 2);
          v233 = v154;
          v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v155 + 112))(v155, &v230, *(float *)&v10);
        }
        else
        {
          v56 = *(float32x4_t **)(a2 + 48);
          v57 = *(float32x4_t *)(a2 + 432);
          v58 = *(float32x4_t *)(a2 + 448);
          v57.i32[3] = 0;
          v58.i32[3] = 0;
          v59 = v56[1];
          v60 = v56[2];
          v61 = *(float32x4_t *)(a2 + 464);
          v62 = *(float32x4_t *)(a2 + 480);
          v61.i32[3] = 0;
          v63 = v56[3];
          v64 = v56[4];
          v65 = vmlaq_lane_f32(vmulq_n_f32(v57, v63.f32[0]), v58, *(float32x2_t *)v63.f32, 1);
          v66 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v60.f32[0]), v58, *(float32x2_t *)v60.f32, 1), v61, v60, 2);
          v67 = (int8x16_t)vmulq_f32(v59, v62);
          v68 = (int8x16_t)vmulq_f32(v60, v62);
          v69 = (int8x16_t)vmulq_f32(v63, v62);
          v69.i32[3] = 0;
          v70 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v59.f32[0]), v58, *(float32x2_t *)v59.f32, 1), v61, v59, 2);
          *(float32x2_t *)v58.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
          *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
          v230 = v70;
          v231 = v66;
          v232 = vmlaq_laneq_f32(v65, v61, v63, 2);
          v233 = vaddq_f32(v64, v58);
        }
        if ((v11 & 0x1000) != 0)
        {
          v229 = (float32x4_t)xmmword_1B2244EE0;
          sub_1B21F2B74(a2, (__n128 *)&v228, 6.0868, v10);
          v156 = 0;
          v157 = vmulq_f32(v230, v228);
          v158 = (int8x16_t)vmulq_f32(v228, v231);
          v159 = (int8x16_t)vmulq_f32(v228, v232);
          v159.i32[3] = 0;
          *(float32x2_t *)v157.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v158.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)));
          *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL)), 0);
          v228 = vaddq_f32(v157, v233);
          do
          {
            sub_1B21F2B74(a2, (__n128 *)&v227, (float)((float)v156 * 6.2832) * 0.03125, v10);
            v160 = vmulq_f32(v230, v227);
            v161 = (int8x16_t)vmulq_f32(v227, v231);
            v162 = (int8x16_t)vmulq_f32(v227, v232);
            v162.i32[3] = 0;
            *(float32x2_t *)v160.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v161.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL)));
            *(float32x2_t *)&v160.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)), 0);
            v227 = vaddq_f32(v160, v233);
            v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v163 + 16))(v163, &v228, &v227, &v229);
            if ((v156 & 3) == 0)
            {
              v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v164 + 16))(v164, &v233, &v227, &v229);
            }
            v228 = v227;
            ++v156;
          }
          while (v156 != 32);
          v165 = *(float *)(a2 + 520);
          v166 = *(float *)(a2 + 580);
          v167 = *(float32x4_t **)(a2 + 48);
          if (v167[24].f32[0] <= 0.0)
          {
            v167 = *(float32x4_t **)(a2 + 40);
            v169 = v167[1];
            v168 = v167[2];
            v170 = v167[3];
            v171 = *(float32x4_t *)(a2 + 368);
            v172 = *(float32x4_t *)(a2 + 384);
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            v174 = *(float32x4_t *)(a2 + 400);
            v173 = *(float32x4_t *)(a2 + 416);
          }
          else
          {
            v169 = v167[1];
            v168 = v167[2];
            v170 = v167[3];
            v171 = *(float32x4_t *)(a2 + 432);
            v172 = *(float32x4_t *)(a2 + 448);
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            v174 = *(float32x4_t *)(a2 + 464);
            v173 = *(float32x4_t *)(a2 + 480);
          }
          v174.i32[3] = 0;
          v213 = vmulq_f32(v169, v173);
          v214 = (int8x16_t)vmulq_f32(v168, v173);
          v215 = (int8x16_t)vmulq_f32(v170, v173);
          v215.i32[3] = 0;
          *(float32x2_t *)v213.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v214.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL)));
          *(float32x2_t *)&v213.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL)), 0);
          v216 = vaddq_f32(v167[4], v213);
          v230 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v169.f32[0]), v172, *(float32x2_t *)v169.f32, 1), v174, v169, 2);
          v231 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v168.f32[0]), v172, *(float32x2_t *)v168.f32, 1), v174, v168, 2);
          v232 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v170.f32[0]), v172, *(float32x2_t *)v170.f32, 1), v174, v170, 2);
          v233 = v216;
          v227 = v216;
          *(int32x2_t *)v226.i8 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          v226.i64[1] = v232.u32[0];
          *(int32x2_t *)&v225 = vzip2_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          *((_QWORD *)&v225 + 1) = v232.u32[1];
          v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v220.n128_u32[0] = 10.0;
          v221.n128_u32[0] = v10;
          v222.n128_u32[0] = v10;
          v218.n128_f32[0] = (float)-v166 - v165;
          v219.n128_f32[0] = v165 - v166;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v217 + 120))(v221, v222, v218, v219, v220);
        }
        break;
      case 6:
      case 9:
        v12 = *(float32x4_t *)(a2 + 1216);
        v230 = *(float32x4_t *)(a2 + 1200);
        v231 = v12;
        v13 = *(float32x4_t *)(a2 + 1248);
        v232 = *(float32x4_t *)(a2 + 1232);
        v233 = v13;
        if ((v5 & 0x800) != 0)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v14 + 112))(v14, &v230, *(float *)&v10);
          v15 = *(float32x4_t *)(a2 + 1280);
          v230 = *(float32x4_t *)(a2 + 1264);
          v231 = v15;
          v16 = *(float32x4_t *)(a2 + 1312);
          v232 = *(float32x4_t *)(a2 + 1296);
          v233 = v16;
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v17 + 112))(v17, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          v18 = *(int8x16_t *)(a2 + 1216);
          v230 = *(float32x4_t *)(a2 + 1200);
          v231 = (float32x4_t)v18;
          v19 = *(float32x4_t *)(a2 + 1248);
          v232 = *(float32x4_t *)(a2 + 1232);
          v233 = v19;
          v229.i64[1] = v232.u32[2];
          *(int32x2_t *)v229.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
          *(int32x2_t *)v228.f32 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v18.i8);
          v228.i64[1] = v232.u32[0];
          v20 = *(float *)(a2 + 1056);
          v21 = *(float *)(a2 + 1060);
          v22 = *(float *)(a2 + 1120);
          v23 = *(float *)(a2 + 1124);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v227 = 0uLL;
          v25 = (float32x4_t)((__n128 (*)(uint64_t, uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float, float, float, float, float, float))*(_QWORD *)(*(_QWORD *)v24 + 128))(v24, a2 + 1312, &v229, &v228, &v227, *(float *)&v10 * 0.9, v20, v21, v22, v23, 10.0);
          v25.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v25.i32[2] = v232.i32[1];
          v228 = v25;
          v26 = sub_1B21F30BC(a2, 1);
          v27 = sub_1B21F30BC(a2, 2);
          v28 = __sincosf_stret(v26);
          v29 = __sincosf_stret(v27);
          v227.f32[0] = (float)((float)((float)(v28.__cosval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__cosval * v29.__cosval) * v228.f32[0]))
                      - (float)(v28.__sinval * v228.f32[2]);
          v227.f32[1] = (float)(v29.__cosval * v228.f32[1]) - (float)(v29.__sinval * v228.f32[0]);
          v227.f32[2] = (float)((float)((float)(v28.__sinval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__sinval * v29.__cosval) * v228.f32[0]))
                      + (float)(v28.__cosval * v228.f32[2]);
          v31 = *(int8x16_t *)(a2 + 1280);
          v230 = *(float32x4_t *)(a2 + 1264);
          v30.i64[0] = __PAIR64__(v31.u32[0], v230.u32[0]);
          v231 = (float32x4_t)v31;
          v32 = *(float32x4_t *)(a2 + 1312);
          v232 = *(float32x4_t *)(a2 + 1296);
          v233 = v32;
          v30.i64[1] = v232.u32[0];
          v31.i64[0] = 0x8000000080000000;
          v31.i64[1] = 0x8000000080000000;
          v226 = veorq_s8(v30, v31);
          v33 = *(float *)(a2 + 992);
          v34 = *(float *)(a2 + 996);
          if (v33 <= v34)
          {
            if (v33 < v34)
            {
              v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              v225 = 0uLL;
              v176.n128_u32[0] = 10.0;
              v177.n128_u32[0] = v10;
              v178.n128_u32[0] = v10;
              v179.n128_f32[0] = v33;
              v180.n128_f32[0] = v34;
              (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v175 + 120))(v177, v178, v179, v180, v176);
            }
          }
          else
          {
            v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            v225 = 0uLL;
            v36.n128_u32[0] = -1068953637;
            v37.n128_u32[0] = 1078530011;
            v38.n128_u32[0] = 10.0;
            v39.n128_u32[0] = v10;
            v40.n128_u32[0] = v10;
            (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v35 + 120))(v39, v40, v36, v37, v38);
          }
          v181 = *(float32x4_t *)(a2 + 1216);
          v230 = *(float32x4_t *)(a2 + 1200);
          v231 = v181;
          v182 = *(float32x4_t *)(a2 + 1248);
          v232 = *(float32x4_t *)(a2 + 1232);
          v233 = v182;
          v183 = *(_OWORD *)(a2 + 784);
          v224 = *(_OWORD *)(a2 + 800);
          v225 = v183;
          v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v223[0] = 0;
          v223[1] = 0;
          (*(void (**)(uint64_t, __int128 *, __int128 *, float32x4_t *, _QWORD *))(*(_QWORD *)v184 + 144))(v184, &v225, &v224, &v230, v223);
        }
        break;
      case 7:
        v71 = *(float32x4_t *)(a2 + 960);
        v230 = *(float32x4_t *)(a2 + 944);
        v231 = v71;
        v72 = *(float32x4_t *)(a2 + 992);
        v232 = *(float32x4_t *)(a2 + 976);
        v233 = v72;
        if ((v5 & 0x800) != 0)
        {
          v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v73 + 112))(v73, &v230, *(float *)&v10);
          v74 = *(float32x4_t *)(a2 + 1024);
          v230 = *(float32x4_t *)(a2 + 1008);
          v231 = v74;
          v75 = *(float32x4_t *)(a2 + 1056);
          v232 = *(float32x4_t *)(a2 + 1040);
          v233 = v75;
          v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v76 + 112))(v76, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          v77 = (float32x4_t *)(a2 + 944);
          v78 = 944;
          if (!*(_BYTE *)(a2 + 208))
          {
            v78 = 1008;
            v77 = (float32x4_t *)(a2 + 1008);
          }
          v79 = v77[1];
          v80 = v77[2];
          v230 = *(float32x4_t *)(a2 + v78);
          v231 = v79;
          v8.i32[0] = *(_DWORD *)(a2 + 212);
          v9.i32[0] = *(_DWORD *)(a2 + 216);
          v81 = vmulq_f32(v230, v8);
          v82 = (int8x16_t)vmulq_f32(v79, v8);
          v83 = v77[3];
          v84 = (int8x16_t)vmulq_f32(v80, v8);
          v84.i32[3] = 0;
          v232 = v80;
          v233 = v83;
          *(float32x2_t *)v81.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v82.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)));
          *(float32x2_t *)&v81.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)), 0);
          v85 = vmulq_f32(v230, v9);
          v86 = (int8x16_t)vmulq_f32(v79, v9);
          v87 = (int8x16_t)vmulq_f32(v80, v9);
          v87.i32[3] = 0;
          *(float32x2_t *)v85.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v86.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)));
          *(float32x2_t *)&v85.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)), 0);
          v228 = vaddq_f32(v83, v85);
          v229 = vaddq_f32(v83, v81);
          v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v227 = 0uLL;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v88 + 16))(v88, &v229, &v228, &v227);
          v227.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v227.i64[1] = v232.u32[0];
          v226.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v226.i64[1] = v232.u32[1];
          v89 = *(_DWORD *)(a2 + 220);
          v90 = *(_DWORD *)(a2 + 224);
          v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          v225 = 0uLL;
          v92.n128_u32[0] = 10.0;
          v93.n128_u32[0] = v10;
          v94.n128_u32[0] = v10;
          v95.n128_u32[0] = v89;
          v96.n128_u32[0] = v90;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v91 + 120))(v93, v94, v95, v96, v92);
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1B21FC2BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 324) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)(result + 336) + 8 * v1);
      *(_OWORD *)(v2 + 464) = 0uLL;
      *(_OWORD *)(v2 + 480) = 0uLL;
      ++v1;
    }
    while (v1 < *(int *)(result + 324));
  }
  return result;
}

void sub_1B21FC2F0(uint64_t a1)
{
  int v1;
  uint64_t i;
  float32x4_t *v4;
  __int32 v5;

  v1 = *(_DWORD *)(a1 + 324);
  if (v1 >= 1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(float32x4_t **)(*(_QWORD *)(a1 + 336) + 8 * i);
      v5 = v4[15].i32[1];
      if (v5 != 2 && v5 != 5)
      {
        sub_1B21FEE14(v4);
        v1 = *(_DWORD *)(a1 + 324);
      }
    }
  }
}

uint64_t sub_1B21FC348(uint64_t result, uint64_t a2)
{
  float32x4_t v3[4];

  if (*(_QWORD *)(a2 + 536))
  {
    if ((*(_BYTE *)(a2 + 232) & 3) == 0)
    {
      sub_1B21E8F2C((float32x4_t *)(a2 + 80), (float32x4_t *)(a2 + 144), (float32x4_t *)(a2 + 160), v3, *(float *)(result + 368) * *(float *)(a2 + 280));
      return (*(uint64_t (**)(_QWORD, float32x4_t *))(**(_QWORD **)(a2 + 536) + 24))(*(_QWORD *)(a2 + 536), v3);
    }
  }
  return result;
}

uint64_t sub_1B21FC3B8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t i;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t j;
  uint64_t v8;
  int v9;

  v1 = result;
  if (*(_BYTE *)(result + 374))
  {
    v2 = *(_DWORD *)(result + 12);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * i);
        if (v4)
          v5 = (*(_DWORD *)(v4 + 264) & 2) == 0;
        else
          v5 = 1;
        if (!v5)
        {
          result = sub_1B21FC348(v1, v4);
          v2 = *(_DWORD *)(v1 + 12);
        }
      }
    }
  }
  else
  {
    v6 = *(_DWORD *)(result + 324);
    if (v6 >= 1)
    {
      for (j = 0; j < v6; ++j)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v1 + 336) + 8 * j);
        v9 = *(_DWORD *)(v8 + 244);
        if (v9 != 2 && v9 != 5)
        {
          *(_BYTE *)(v1 + 448) = 1;
          result = sub_1B21FC348(v1, v8);
          v6 = *(_DWORD *)(v1 + 324);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B21FC474(uint64_t a1, int a2, float a3, float a4)
{
  float v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 448) = 0;
  if (a2)
  {
    v5 = a4;
    v6 = a2;
    v7 = *(float *)(a1 + 368) + a3;
    *(float *)(a1 + 368) = v7;
    if (v7 >= a4)
    {
      v8 = (int)(float)(v7 / a4);
      *(float *)(a1 + 368) = v7 - (float)((float)(int)(float)(v7 / a4) * a4);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    *(float *)(a1 + 368) = a3;
    v9 = fabsf(a3);
    v8 = v9 >= 0.00000011921;
    v5 = a3;
    v6 = v9 >= 0.00000011921;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    byte_1EEFD59F0 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10) & 0x10) != 0;
  }
  if ((_DWORD)v8)
  {
    if ((int)v8 < v6)
      v6 = v8;
    (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 320))(a1, v5 * (float)v6);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
    if (v6 >= 1)
    {
      do
      {
        (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 312))(a1, v5);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  return v8;
}

uint64_t sub_1B21FC5D4(uint64_t a1, __n128 a2)
{
  float v2;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, float);

  v2 = a2.n128_f32[0];
  v4 = *(void (**)(uint64_t, __n128))(a1 + 128);
  if (v4)
    v4(a1, a2);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 280))(a1, v2);
  *(float *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_1B21FC700(a1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  *(float *)(a1 + 156) = v2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 304))(a1, a1 + 144);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 288))(a1, v2);
  if (*(int *)(a1 + 380) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v5);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v6 + 16))(v6, a1, v2);
      ++v5;
    }
    while (v5 < *(int *)(a1 + 380));
  }
  result = sub_1B21FCBD8(a1, v2);
  v8 = *(uint64_t (**)(uint64_t, float))(a1 + 120);
  if (v8)
    return v8(a1, v2);
  return result;
}

void sub_1B21FC700(uint64_t a1, float a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int32x2_t v32;
  unsigned __int32 v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float v48;
  float32x4_t v49;
  _QWORD v50[2];
  int8x16_t v51;
  int8x16_t v52;
  unsigned __int32 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64[3];
  float32x4_t v65;
  void *v66;
  int v67;
  int v68;
  int v69;
  uint64_t (**v70)();
  float v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  float32x4_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 420) >= 1)
  {
    v4 = 0;
    do
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v4++));
    while (v4 < *(int *)(a1 + 420));
  }
  v5 = (_QWORD *)(a1 + 420);
  v6 = *(_QWORD *)(a1 + 432);
  if (v6 && *(_BYTE *)(a1 + 440))
    sub_1B21FF5FC(v6);
  *(_BYTE *)(a1 + 440) = 1;
  *(_QWORD *)(a1 + 432) = 0;
  *v5 = 0;
  if (*(int *)(a1 + 324) >= 1)
  {
    v7 = 0;
    v8 = &qword_1EEFD5000;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v7);
      *(_DWORD *)(v9 + 280) = 1065353216;
      v10 = *(_DWORD *)(v9 + 244);
      if (v10 != 2 && v10 != 5 && (*(_BYTE *)(v9 + 232) & 3) == 0)
      {
        sub_1B21FEB7C((float32x4_t *)v9, v64, a2);
        if (*(_BYTE *)(a1 + 64))
        {
          v12 = *(float *)(v9 + 288) * *(float *)(v9 + 288);
          if (v12 != 0.0)
          {
            v13 = vsubq_f32(v65, *(float32x4_t *)(v9 + 64));
            v13.i32[3] = 0;
            v14 = (int8x16_t)vmulq_f32(v13, v13);
            if (v12 < vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]&& *(int *)(*(_QWORD *)(v9 + 208) + 8) <= 19)
            {
              ++*((_DWORD *)v8 + 635);
              v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
              v16 = *(_QWORD *)(a1 + 40);
              v71 = 1.0;
              v72 = xmmword_1B2246510;
              v73 = 0;
              v74 = *(_OWORD *)(v9 + 64);
              v75 = v65;
              v70 = &off_1E63CDD08;
              v77 = 0;
              v78 = v9;
              v79 = 0;
              v80 = v15;
              v81 = v16;
              v17 = *(_DWORD *)(v9 + 284);
              sub_1B21E0FCC((uint64_t)&v66);
              v66 = &unk_1E63CBCC8;
              v67 = 8;
              v68 = v17;
              v69 = v17;
              v79 = *(_DWORD *)(a1 + 84);
              v18 = *(_QWORD *)(v9 + 200);
              v72 = *(_OWORD *)(v18 + 8);
              v73 = *(_QWORD *)(v18 + 24);
              v61 = v64[1];
              v62 = v64[2];
              v63 = v65;
              v19 = *(float32x4_t *)(v9 + 32);
              v60 = *(_OWORD *)(v9 + 16);
              v61 = v19;
              v62 = *(float32x4_t *)(v9 + 48);
              sub_1B21D2020(a1, (uint64_t)&v66, v9 + 16, (uint64_t)&v60, (uint64_t)&v70, 0.0);
              if (v71 < 1.0)
              {
                v48 = v71;
                v45 = *(float32x4_t *)(v9 + 64);
                v46 = v65;
                v47 = v76;
                v20 = (float32x4_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v9, v77);
                v21 = *(_DWORD *)(a1 + 420);
                if (v21 == *(_DWORD *)(a1 + 424))
                {
                  v22 = v21 ? 2 * v21 : 1;
                  if (v21 < v22)
                  {
                    if (v22)
                    {
                      v23 = sub_1B21FF5F0(8 * v22, 16);
                      v21 = *(_DWORD *)v5;
                    }
                    else
                    {
                      v23 = 0;
                    }
                    if (v21 >= 1)
                    {
                      v24 = 0;
                      do
                      {
                        *(_QWORD *)(v23 + v24) = *(_QWORD *)(*(_QWORD *)(a1 + 432) + v24);
                        v24 += 8;
                      }
                      while (8 * v21 != v24);
                    }
                    v25 = *(_QWORD *)(a1 + 432);
                    if (v25)
                    {
                      if (*(_BYTE *)(a1 + 440))
                      {
                        sub_1B21FF5FC(v25);
                        v21 = *(_DWORD *)v5;
                      }
                    }
                    *(_BYTE *)(a1 + 440) = 1;
                    *(_QWORD *)(a1 + 432) = v23;
                    *(_DWORD *)(a1 + 424) = v22;
                    v8 = &qword_1EEFD5000;
                  }
                }
                v26 = vmulq_n_f32(vsubq_f32(v46, v45), v48);
                v26.i32[3] = 0;
                v27.i64[0] = 0x8000000080000000;
                v27.i64[1] = 0x8000000080000000;
                *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v21) = v20;
                *(_DWORD *)(a1 + 420) = v21 + 1;
                v28 = *(float32x4_t *)(v77 + 16);
                v29 = *(int32x4_t *)(v77 + 32);
                v30 = *(int8x16_t *)(v77 + 48);
                v31 = (float32x4_t)vtrn1q_s32((int32x4_t)v28, v29);
                v32 = vzip2_s32(*(int32x2_t *)v30.i8, 0);
                v33 = vextq_s8(v30, v30, 8uLL).u32[0];
                v34.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
                v31.i64[1] = v30.u32[0];
                v35 = (float32x4_t)veorq_s8(*(int8x16_t *)(v77 + 64), v27);
                *(int32x2_t *)v28.f32 = vzip2_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v29.i8);
                *(int32x2_t *)&v28.u32[2] = v32;
                v36 = (int8x16_t)vmulq_f32(v31, v35);
                v37 = (int8x16_t)vmulq_f32(v28, v35);
                v34.i64[1] = v33;
                *(float32x2_t *)v36.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
                v38 = (int8x16_t)vmulq_f32(v34, v35);
                v38.i32[3] = 0;
                v49 = vaddq_f32(*(float32x4_t *)(v9 + 64), v26);
                v39 = (int8x16_t)vmulq_f32(v49, v31);
                v40 = (int8x16_t)vmulq_f32(v49, v28);
                v41 = (int8x16_t)vmulq_f32(v49, v34);
                v41.i32[3] = 0;
                *(float32x2_t *)v40.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL))), *(float32x2_t *)v36.i8);
                v40.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0));
                v42 = (int8x16_t)vmulq_f32((float32x4_t)veorq_s8(v47, v27), v26);
                v50[0] = 0;
                v50[1] = 0;
                v51 = v40;
                v52 = v76;
                v53 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).u32[0];
                v54 = 0;
                v55 = 0;
                v56 = 0;
                v57 = 0;
                v58 = 0u;
                v59 = 0u;
                v43 = &v20[12 * (int)sub_1B21ED154(v20, (uint64_t)v50)];
                v43[6].i32[3] = 0;
                v43[6].f32[1] = sub_1B21DB7D8(v9, v77);
                v44 = *(float32x4_t *)(v9 + 64);
                v43[3] = v49;
                v43[4] = v44;
              }
              nullsub_16(&v66);
            }
          }
        }
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 324));
  }
}

uint64_t sub_1B21FCBD8(uint64_t result, float a2)
{
  uint64_t v3;
  uint64_t i;
  float32x4_t *v5;
  __int32 v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int v10;

  if (*(int *)(result + 324) >= 1)
  {
    v3 = result;
    for (i = 0; i < *(int *)(v3 + 324); ++i)
    {
      v5 = *(float32x4_t **)(*(_QWORD *)(v3 + 336) + 8 * i);
      if (v5)
      {
        v6 = v5[15].i32[1];
        if (v6 != 2)
        {
          if (v6 == 4)
            continue;
          v7 = (int8x16_t)vmulq_f32(v5[22], v5[22]);
          if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(v5[32].f32[3] * v5[32].f32[3])|| (v8 = (int8x16_t)vmulq_f32(v5[23], v5[23]), vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] >= (float)(v5[33].f32[0] * v5[33].f32[0])))
          {
            v5[15].i32[2] = 0;
            result = sub_1B21D0364((uint64_t)v5, 0);
            v6 = v5[15].i32[1];
            if (v6 == 4)
              continue;
          }
          else
          {
            v5[15].f32[2] = v5[15].f32[2] + a2;
          }
        }
        if (byte_1EEFD59F0
          || *(float *)&dword_1EEF652FC == 0.0
          || (v6 & 0xFFFFFFFE) != 2 && v5[15].f32[2] <= *(float *)&dword_1EEF652FC)
        {
          v9 = (uint64_t)v5;
          v10 = 1;
        }
        else
        {
          if ((v5[14].i8[8] & 3) == 0)
          {
            if (v6 == 1)
            {
              result = sub_1B21D0364((uint64_t)v5, 3);
              v6 = v5[15].i32[1];
            }
            if (v6 == 2)
            {
              v5[22] = 0u;
              v5[23] = 0u;
            }
            continue;
          }
          v9 = (uint64_t)v5;
          v10 = 2;
        }
        result = sub_1B21D0364(v9, v10);
      }
    }
  }
  return result;
}

void sub_1B21FCD54(float32x4_t *a1, float32x4_t *a2)
{
  int v2;
  uint64_t i;
  float32x4_t *v6;
  __int32 v7;
  BOOL v8;

  a1[22] = *a2;
  v2 = a1[20].i32[1];
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v6 = *(float32x4_t **)(a1[21].i64[0] + 8 * i);
      v7 = v6[15].i32[1];
      v8 = v7 == 2 || v7 == 5;
      if (!v8 && (v6[36].i8[0] & 1) == 0)
      {
        sub_1B21FEC54(v6, a2);
        v2 = a1[20].i32[1];
      }
    }
  }
}

__n128 sub_1B21FCDD4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[22];
  *a2 = result;
  return result;
}

uint64_t sub_1B21FCDE4(uint64_t a1, uint64_t a2)
{
  if (a2 && (*(_DWORD *)(a2 + 264) & 2) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  else
    return sub_1B21D0BA0(a1, a2);
}

uint64_t sub_1B21FCE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  sub_1B21D0C28(a1 + 320, &v4);
  return sub_1B21D0BA0(a1, v4);
}

void sub_1B21FCE40(float32x4_t *a1, float32x4_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a2[14].i8[8] & 3) == 0 && (a2[36].i8[0] & 1) == 0)
    sub_1B21FEC54(a2, a1 + 22);
  if (a2[13].i64[0])
  {
    if ((a2[14].i8[8] & 1) != 0)
    {
      sub_1B21D0364((uint64_t)a2, 2);
    }
    else
    {
      v4 = a1[20].i32[1];
      if (v4 == a1[20].i32[2])
      {
        v5 = v4 ? 2 * v4 : 1;
        if (v4 < v5)
        {
          if (v5)
          {
            v6 = sub_1B21FF5F0(8 * v5, 16);
            v4 = a1[20].i32[1];
          }
          else
          {
            v6 = 0;
          }
          if (v4 >= 1)
          {
            v7 = 0;
            do
            {
              *(_QWORD *)(v6 + v7) = *(_QWORD *)(a1[21].i64[0] + v7);
              v7 += 8;
            }
            while (8 * v4 != v7);
          }
          v8 = a1[21].i64[0];
          if (v8 && a1[21].i8[8])
          {
            sub_1B21FF5FC(v8);
            v4 = a1[20].i32[1];
          }
          a1[21].i8[8] = 1;
          a1[21].i64[0] = v6;
          a1[20].i32[2] = v5;
        }
      }
      *(_QWORD *)(a1[21].i64[0] + 8 * v4) = a2;
      a1[20].i32[1] = v4 + 1;
    }
    if ((a2[14].i32[2] & 3) != 0)
      v9 = 2;
    else
      v9 = 1;
    if ((a2[14].i32[2] & 3) != 0)
      v10 = -3;
    else
      v10 = -1;
    (*(void (**)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, _QWORD))(a1->i64[0] + 72))(a1, a2, v9, v10, 0);
  }
}

void sub_1B21FCF88(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2[14].i8[8] & 3) == 0 && (a2[36].i8[0] & 1) == 0)
    sub_1B21FEC54(a2, a1 + 22);
  if (a2[13].i64[0])
  {
    if ((a2[14].i8[8] & 1) != 0)
    {
      sub_1B21D0364((uint64_t)a2, 2);
    }
    else
    {
      v10 = a1[20].i32[1];
      if (v10 == a1[20].i32[2])
      {
        v11 = v10 ? 2 * v10 : 1;
        if (v10 < v11)
        {
          if (v11)
          {
            v12 = sub_1B21FF5F0(8 * v11, 16);
            v10 = a1[20].i32[1];
          }
          else
          {
            v12 = 0;
          }
          if (v10 >= 1)
          {
            v13 = 0;
            do
            {
              *(_QWORD *)(v12 + v13) = *(_QWORD *)(a1[21].i64[0] + v13);
              v13 += 8;
            }
            while (8 * v10 != v13);
          }
          v14 = a1[21].i64[0];
          if (v14)
          {
            if (a1[21].i8[8])
            {
              sub_1B21FF5FC(v14);
              v10 = a1[20].i32[1];
            }
          }
          a1[21].i8[8] = 1;
          a1[21].i64[0] = v12;
          a1[20].i32[2] = v11;
        }
      }
      *(_QWORD *)(a1[21].i64[0] + 8 * v10) = a2;
      a1[20].i32[1] = v10 + 1;
    }
    (*(void (**)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))(a1->i64[0] + 72))(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_1B21FD0E4(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_DWORD *)(result + 324);
  if (v1 >= 1)
  {
    v2 = result;
    for (i = 0; i < v1; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(v2 + 336) + 8 * i);
      if (result)
      {
        result = sub_1B21D0384(result, 0);
        v1 = *(_DWORD *)(v2 + 324);
      }
    }
  }
  return result;
}

void sub_1B21FD134(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 292);
  if (v6 == *(_DWORD *)(a1 + 296))
  {
    v7 = v6 ? 2 * v6 : 1;
    if (v6 < v7)
    {
      if (v7)
      {
        v8 = sub_1B21FF5F0(8 * v7, 16);
        v6 = *(_DWORD *)(a1 + 292);
      }
      else
      {
        v8 = 0;
      }
      if (v6 >= 1)
      {
        v9 = 0;
        do
        {
          *(_QWORD *)(v8 + v9) = *(_QWORD *)(*(_QWORD *)(a1 + 304) + v9);
          v9 += 8;
        }
        while (8 * v6 != v9);
      }
      v10 = *(_QWORD *)(a1 + 304);
      if (v10 && *(_BYTE *)(a1 + 312))
      {
        sub_1B21FF5FC(v10);
        v6 = *(_DWORD *)(a1 + 292);
      }
      *(_BYTE *)(a1 + 312) = 1;
      *(_QWORD *)(a1 + 304) = v8;
      *(_DWORD *)(a1 + 296) = v7;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v6) = a2;
  *(_DWORD *)(a1 + 292) = v6 + 1;
  if (a3)
  {
    sub_1B21FF030(*(_QWORD *)(a2 + 40), a2);
    sub_1B21FF030(*(_QWORD *)(a2 + 48), a2);
  }
}

uint64_t sub_1B21FD238(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  sub_1B21D0C28(a1 + 288, &v3);
  sub_1B21FF138(*(_QWORD *)(v3 + 40), v3);
  return sub_1B21FF138(*(_QWORD *)(v3 + 48), v3);
}

void sub_1B21FD278(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 380);
  if (v4 == *(_DWORD *)(a1 + 384))
  {
    v5 = v4 ? 2 * v4 : 1;
    if (v4 < v5)
    {
      if (v5)
      {
        v6 = sub_1B21FF5F0(8 * v5, 16);
        v4 = *(_DWORD *)(a1 + 380);
      }
      else
      {
        v6 = 0;
      }
      if (v4 >= 1)
      {
        v7 = 0;
        do
        {
          *(_QWORD *)(v6 + v7) = *(_QWORD *)(*(_QWORD *)(a1 + 392) + v7);
          v7 += 8;
        }
        while (8 * v4 != v7);
      }
      v8 = *(_QWORD *)(a1 + 392);
      if (v8 && *(_BYTE *)(a1 + 400))
      {
        sub_1B21FF5FC(v8);
        v4 = *(_DWORD *)(a1 + 380);
      }
      *(_BYTE *)(a1 + 400) = 1;
      *(_QWORD *)(a1 + 392) = v6;
      *(_DWORD *)(a1 + 384) = v5;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v4) = a2;
  *(_DWORD *)(a1 + 380) = v4 + 1;
}

uint64_t sub_1B21FD344(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1B21D0C28(a1 + 376, &v3);
}

uint64_t sub_1B21FD36C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 380);
}

uint64_t sub_1B21FD374(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * a2);
}

uint64_t sub_1B21FD380(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t sub_1B21FD38C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_1B21FD398(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t sub_1B21FD3A4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_1B21FD3B0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;

  v4 = *(_DWORD *)(a1 + 292);
  v5 = *(_DWORD *)(a1 + 236);
  if (v5 < v4)
  {
    v6 = v5;
    if (*(_DWORD *)(a1 + 240) < v4)
    {
      if (v4)
      {
        v7 = sub_1B21FF5F0(8 * v4, 16);
        v5 = *(_DWORD *)(a1 + 236);
      }
      else
      {
        v7 = 0;
      }
      if (v5 >= 1)
      {
        v8 = 0;
        v9 = 8 * v5;
        do
        {
          *(_QWORD *)(v7 + v8) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + v8);
          v8 += 8;
        }
        while (v9 != v8);
      }
      v10 = *(_QWORD *)(a1 + 248);
      if (v10 && *(_BYTE *)(a1 + 256))
        sub_1B21FF5FC(v10);
      *(_BYTE *)(a1 + 256) = 1;
      *(_QWORD *)(a1 + 248) = v7;
      *(_DWORD *)(a1 + 240) = v4;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v6++) = 0;
    while (v4 != v6);
  }
  *(_DWORD *)(a1 + 236) = v4;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1) >= 1)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v11);
      ++v11;
    }
    while (v11 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1));
  }
  v12 = *(_DWORD *)(a1 + 236);
  if (v12 > 1)
    sub_1B21FE6A8(a1 + 232, (uint64_t)&v27, 0, v12 - 1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1))
    v13 = *(_QWORD *)(a1 + 248);
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 264);
  v15 = *(_DWORD *)(a1 + 236);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(v14 + 8) = a2;
  *(_QWORD *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  v17 = *(int *)(v14 + 60);
  if ((v17 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 64) & 0x80000000) != 0)
    {
      v18 = *(_QWORD *)(v14 + 72);
      if (v18 && *(_BYTE *)(v14 + 80))
        sub_1B21FF5FC(v18);
      *(_BYTE *)(v14 + 80) = 1;
      *(_QWORD *)(v14 + 72) = 0;
      *(_DWORD *)(v14 + 64) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 72) + 8 * v17++) = 0;
    while ((_DWORD)v17);
  }
  *(_DWORD *)(v14 + 60) = 0;
  v19 = *(int *)(v14 + 92);
  if ((v19 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 96) & 0x80000000) != 0)
    {
      v20 = *(_QWORD *)(v14 + 104);
      if (v20 && *(_BYTE *)(v14 + 112))
        sub_1B21FF5FC(v20);
      *(_BYTE *)(v14 + 112) = 1;
      *(_QWORD *)(v14 + 104) = 0;
      *(_DWORD *)(v14 + 96) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 104) + 8 * v19++) = 0;
    while ((_DWORD)v19);
  }
  *(_DWORD *)(v14 + 92) = 0;
  v21 = *(int *)(v14 + 124);
  if ((v21 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 128) & 0x80000000) != 0)
    {
      v22 = *(_QWORD *)(v14 + 136);
      if (v22 && *(_BYTE *)(v14 + 144))
        sub_1B21FF5FC(v22);
      *(_BYTE *)(v14 + 144) = 1;
      *(_QWORD *)(v14 + 136) = 0;
      *(_DWORD *)(v14 + 128) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(v14 + 136) + 8 * v21++) = 0;
    while ((_DWORD)v21);
  }
  *(_DWORD *)(v14 + 124) = 0;
  v23 = *(_QWORD *)(a1 + 272);
  v24 = *(unsigned int *)(a1 + 12);
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v24, v25);
  sub_1B21DC360(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 40), a1, *(_QWORD *)(a1 + 264));
  sub_1B21FD678(*(_QWORD *)(a1 + 264));
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 32))(*(_QWORD *)(a1 + 272), a2, *(_QWORD *)(a1 + 104));
}

void sub_1B21FD678(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 60))
    v2 = *(_QWORD *)(a1 + 72);
  else
    v2 = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v2);
  v3 = *(int *)(a1 + 60);
  if ((v3 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0)
    {
      v4 = *(_QWORD *)(a1 + 72);
      if (v4 && *(_BYTE *)(a1 + 80))
        sub_1B21FF5FC(v4);
      *(_BYTE *)(a1 + 80) = 1;
      *(_QWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v3++) = 0;
    while ((_DWORD)v3);
  }
  *(_DWORD *)(a1 + 60) = 0;
  v5 = *(int *)(a1 + 92);
  if ((v5 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 96) & 0x80000000) != 0)
    {
      v6 = *(_QWORD *)(a1 + 104);
      if (v6 && *(_BYTE *)(a1 + 112))
        sub_1B21FF5FC(v6);
      *(_BYTE *)(a1 + 112) = 1;
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v5++) = 0;
    while ((_DWORD)v5);
  }
  *(_DWORD *)(a1 + 92) = 0;
  v7 = *(int *)(a1 + 124);
  if ((v7 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 128) & 0x80000000) != 0)
    {
      v8 = *(_QWORD *)(a1 + 136);
      if (v8 && *(_BYTE *)(a1 + 144))
        sub_1B21FF5FC(v8);
      *(_BYTE *)(a1 + 144) = 1;
      *(_QWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 128) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v7++) = 0;
    while ((_DWORD)v7);
  }
  *(_DWORD *)(a1 + 124) = 0;
}

uint64_t sub_1B21FD7C8(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 280) + 16))(*(_QWORD *)(a1 + 280), a1, *(_QWORD *)(a1 + 40));
  v2 = *(_DWORD *)(a1 + 420);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * i);
      v5 = *(_QWORD *)(v4 + 784);
      if (v5)
      {
        v6 = *(_QWORD *)(v4 + 792);
        v7 = (*(_BYTE *)(v5 + 232) & 3) != 0 || v6 == 0;
        if (!v7 && (*(_BYTE *)(v6 + 232) & 3) == 0)
        {
          v8 = *(_DWORD *)(v5 + 244);
          v9 = v8 == 5 || v8 == 2;
          if (!v9 || ((v10 = *(_DWORD *)(v6 + 244), v10 != 2) ? (v11 = v10 == 5) : (v11 = 1), !v11))
          {
            sub_1B21DBE6C(*(_QWORD *)(a1 + 280) + 8, *(unsigned int *)(v5 + 236), *(unsigned int *)(v6 + 236));
            v2 = *(_DWORD *)(a1 + 420);
          }
        }
      }
    }
  }
  v12 = *(unsigned int *)(a1 + 292);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 8 * v12;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + v13);
      if (*(_BYTE *)(v15 + 28))
      {
        v16 = *(_QWORD *)(v15 + 40);
        if ((*(_BYTE *)(v16 + 232) & 3) == 0)
        {
          v17 = *(_QWORD *)(v15 + 48);
          if ((*(_BYTE *)(v17 + 232) & 3) == 0)
          {
            v18 = *(_DWORD *)(v16 + 244);
            v19 = v18 == 5 || v18 == 2;
            if (!v19 || ((v20 = *(_DWORD *)(v17 + 244), v20 != 2) ? (v21 = v20 == 5) : (v21 = 1), !v21))
              sub_1B21DBE6C(*(_QWORD *)(a1 + 280) + 8, *(unsigned int *)(v16 + 236), *(unsigned int *)(v17 + 236));
          }
        }
      }
      v13 += 8;
    }
    while (v14 != v13);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 24))(*(_QWORD *)(a1 + 280), a1);
}

void sub_1B21FD924(uint64_t a1, float a2)
{
  uint64_t v4;
  float32x4_t *v5;
  __int32 v6;
  BOOL v7;
  __n128 v8;
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  __int32 v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  __n128 v17;
  int v18;
  uint64_t i;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37[3];
  float32x4_t v38;
  float32x4_t v39;
  int v40;
  int v41;
  int8x16_t v42;
  __int128 v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 324) >= 1)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(float32x4_t **)(*(_QWORD *)(a1 + 336) + 8 * v4);
      v5[17].i32[2] = 1065353216;
      v6 = v5[15].i32[1];
      v7 = v6 == 2 || v6 == 5;
      if (v7 || (v5[14].i8[8] & 3) != 0)
        goto LABEL_16;
      sub_1B21FEB7C(v5, v37, a2);
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_15;
      v8.n128_f32[0] = v5[18].f32[0] * v5[18].f32[0];
      if (v8.n128_f32[0] == 0.0)
        goto LABEL_15;
      v9 = vsubq_f32(v38, v5[4]);
      v9.i32[3] = 0;
      v10 = (int8x16_t)vmulq_f32(v9, v9);
      if (v8.n128_f32[0] >= vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]|| *(int *)(v5[13].i64[0] + 8) > 19)
      {
        goto LABEL_15;
      }
      ++dword_1EEFD59EC;
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
      v12 = *(_QWORD *)(a1 + 40);
      v42.i32[2] = 1065353216;
      v43 = xmmword_1B2246510;
      v44 = 0;
      v45 = v5[4];
      v46 = v38;
      v42.i64[0] = (uint64_t)&off_1E63CDD08;
      v47 = 0;
      v48 = v5;
      v49 = 0;
      v50 = v11;
      v51 = v12;
      v13 = v5[17].i32[3];
      sub_1B21E0FCC((uint64_t)&v39);
      v39.i64[0] = (uint64_t)&unk_1E63CBCC8;
      v39.i32[2] = 8;
      v40 = v13;
      v41 = v13;
      v49 = *(_DWORD *)(a1 + 84);
      v14 = v5[12].i64[1];
      v43 = *(_OWORD *)(v14 + 8);
      v44 = *(_QWORD *)(v14 + 24);
      v34 = v37[1];
      v35 = v37[2];
      v36 = v38;
      v15 = v5[2];
      v33 = v5[1];
      v34 = v15;
      v35 = v5[3];
      sub_1B21D2020(a1, (uint64_t)&v39, (uint64_t)&v5[1], (uint64_t)&v33, (uint64_t)&v42, 0.0);
      v16 = *(float *)&v42.i32[2];
      if (*(float *)&v42.i32[2] >= 1.0)
        break;
      v5[17].i32[2] = v42.i32[2];
      sub_1B21FEB7C(v5, v37, v16 * a2);
      v5[17].i32[2] = 0;
      sub_1B21FEE3C(v5, v37, v17);
      nullsub_16(&v39);
LABEL_16:
      if (++v4 >= *(int *)(a1 + 324))
        goto LABEL_17;
    }
    v8.n128_f64[0] = nullsub_16(&v39);
LABEL_15:
    sub_1B21FEE3C(v5, v37, v8);
    goto LABEL_16;
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 375))
  {
    v18 = *(_DWORD *)(a1 + 420);
    if (v18 >= 1)
    {
      for (i = 0; i < v18; ++i)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * i);
        if ((*(_BYTE *)(*(_QWORD *)(v20 + 784) + 264) & 2) != 0)
          v21 = *(float32x4_t **)(v20 + 784);
        else
          v21 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(v20 + 792) + 264) & 2) != 0)
          v22 = *(float32x4_t **)(v20 + 792);
        else
          v22 = 0;
        if (*(int *)(v20 + 800) >= 1)
        {
          v23 = 0;
          v24 = v20 + 80;
          do
          {
            v25 = sub_1B21DB800((uint64_t)v21, (uint64_t)v22);
            if (v25 > 0.0)
            {
              v26 = *(float *)(v24 + 60);
              if (v26 != 0.0)
              {
                v27.i64[0] = 0x8000000080000000;
                v27.i64[1] = 0x8000000080000000;
                v28 = vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(*(int8x16_t *)v24, v27), v26), v25);
                v28.i32[3] = 0;
                v42 = (int8x16_t)v28;
                v29 = vsubq_f32(*(float32x4_t *)(v24 - 16), v21[4]);
                v29.i32[3] = 0;
                v39 = v29;
                v30 = vsubq_f32(*(float32x4_t *)(v24 - 32), v22[4]);
                v30.i32[3] = 0;
                v33 = v30;
                sub_1B1904A0C(v21, (float32x4_t *)&v42, (int8x8_t *)&v39);
                v31.i64[0] = 0x8000000080000000;
                v31.i64[1] = 0x8000000080000000;
                v32 = veorq_s8(v42, v31);
                sub_1B1904A0C(v22, (float32x4_t *)&v32, (int8x8_t *)&v33);
              }
            }
            ++v23;
            v24 += 192;
          }
          while (v23 < *(int *)(v20 + 800));
          v18 = *(_DWORD *)(a1 + 420);
        }
      }
    }
  }
}

void sub_1B21FDCA0(uint64_t a1, float a2)
{
  int v2;
  uint64_t i;
  float32x4_t *v6;

  v2 = *(_DWORD *)(a1 + 324);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v6 = *(float32x4_t **)(*(_QWORD *)(a1 + 336) + 8 * i);
      if ((v6[14].i8[8] & 3) == 0)
      {
        sub_1B21FEC84(*(float32x4_t **)(*(_QWORD *)(a1 + 336) + 8 * i), a2);
        sub_1B21FEB7C(v6, v6 + 5, a2);
        v2 = *(_DWORD *)(a1 + 324);
      }
    }
  }
}

void sub_1B21FDD20(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 373))
    sub_1B21FF5FC(*(_QWORD *)(a1 + 272));
  *(_BYTE *)(a1 + 373) = 0;
  *(_QWORD *)(a1 + 272) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16) = a2;
}

uint64_t sub_1B21FDD60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272);
}

uint64_t sub_1B21FDD68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t sub_1B21FDD70(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * a2);
}

uint64_t sub_1B21FDD7C(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * a2);
}

uint64_t sub_1B21FDD88(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t i;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_BYTE **)(*(_QWORD *)(v3 + 24) + 8 * i);
      if ((v6[264] & 2) != 0)
      {
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 32))(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i));
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v7, 1);
        v9 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v8 + 8), a2);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a2 + 40))(a2, v8, v9, 1497645650, v6);
        v4 = *(_DWORD *)(v3 + 12);
      }
    }
  }
  if (*(int *)(v3 + 292) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 304) + 8 * v10);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12, 1);
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 80))(v11, *(_QWORD *)(v13 + 8), a2);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v13, v14, 1397641027, v11);
      ++v10;
    }
    while (v10 < *(int *)(v3 + 292));
  }
  return result;
}

uint64_t sub_1B21FDEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 104, 1);
  v5 = 0;
  v6 = *(_QWORD *)(v4 + 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  do
  {
    *(_DWORD *)(v6 + v5 + 88) = *(_DWORD *)(a1 + 352 + v5);
    v5 += 4;
  }
  while (v5 != 16);
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 160);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a1 + 168);
  *(_DWORD *)(v6 + 36) = *(_DWORD *)(a1 + 184);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a1 + 220);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(a1 + 164);
  *(_QWORD *)(v6 + 68) = *(_QWORD *)(a1 + 208);
  v7 = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(v6 + 76) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(v6 + 80) = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v4, "btDynamicsWorldFloatData", 1145853764);
}

uint64_t sub_1B21FDFBC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  sub_1B21FDEE0(a1, a2);
  sub_1B21FDD88(a1, a2);
  sub_1B21D3294(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t sub_1B21FE01C()
{
  return 2;
}

uint64_t sub_1B21FE028(uint64_t result, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(int *)(result + 380) >= 1)
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 392) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v5 + 16))(v5, v3, a2);
      ++v4;
    }
    while (v4 < *(int *)(v3 + 380));
  }
  return result;
}

uint64_t sub_1B21FE094()
{
  return 0;
}

uint64_t sub_1B21FE09C()
{
  return 0;
}

uint64_t sub_1B21FE0A4()
{
  return 0;
}

_QWORD *sub_1B21FE0BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD980;
  v2 = (uint64_t)(a1 + 7);
  sub_1B1810570((uint64_t)(a1 + 15));
  sub_1B1810570((uint64_t)(a1 + 11));
  sub_1B1810570(v2);
  return a1;
}

void sub_1B21FE104(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD980;
  v2 = (uint64_t)(a1 + 7);
  sub_1B1810570((uint64_t)(a1 + 15));
  sub_1B1810570((uint64_t)(a1 + 11));
  sub_1B1810570(v2);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21FE15C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a6 < 0)
    goto LABEL_21;
  v10 = *(unsigned int *)(a1 + 32);
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 40) + 236);
      if (v13 < 0)
        v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 236);
      if (v13 == a6)
        break;
      ++v11;
      v12 += 8;
      if (v10 == v11)
      {
        v12 = 0;
        goto LABEL_19;
      }
    }
  }
  if ((int)v11 >= (int)v10)
  {
LABEL_19:
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v11 = v11;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v11);
      v16 = *(_DWORD *)(*(_QWORD *)(v15 + 40) + 236);
      if (v16 < 0)
        v16 = *(_DWORD *)(*(_QWORD *)(v15 + 48) + 236);
      if (v16 == a6)
        ++v14;
      ++v11;
    }
    while ((int)v10 > (int)v11);
  }
  if (*(int *)(*(_QWORD *)(a1 + 8) + 72) < 2)
  {
LABEL_21:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2);
    return;
  }
  if (a3 >= 1)
  {
    v17 = 0;
    v18 = a3;
    v20 = *(_DWORD *)(a1 + 60);
    v19 = *(unsigned int *)(a1 + 64);
    do
    {
      if (v20 == (_DWORD)v19)
      {
        if ((_DWORD)v19)
          v21 = (2 * v19);
        else
          v21 = 1;
        if ((int)v19 < (int)v21)
        {
          if ((_DWORD)v21)
          {
            v22 = sub_1B21FF5F0(8 * (int)v21, 16);
            LODWORD(v19) = *(_DWORD *)(a1 + 60);
          }
          else
          {
            v22 = 0;
          }
          if ((int)v19 >= 1)
          {
            v23 = 0;
            do
            {
              *(_QWORD *)(v22 + v23) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + v23);
              v23 += 8;
            }
            while (8 * v19 != v23);
          }
          v24 = *(_QWORD *)(a1 + 72);
          if (v24 && *(_BYTE *)(a1 + 80))
          {
            sub_1B21FF5FC(v24);
            LODWORD(v19) = *(_DWORD *)(a1 + 60);
          }
          *(_BYTE *)(a1 + 80) = 1;
          *(_QWORD *)(a1 + 72) = v22;
          v20 = v19;
          *(_DWORD *)(a1 + 64) = v21;
          goto LABEL_42;
        }
        v20 = v19;
      }
      v21 = v19;
LABEL_42:
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v20++) = *(_QWORD *)(a2 + 8 * v17);
      *(_DWORD *)(a1 + 60) = v20;
      ++v17;
      v19 = v21;
    }
    while (v17 != v18);
  }
  if (a5 >= 1)
  {
    v25 = 0;
    v26 = a5;
    v28 = *(_DWORD *)(a1 + 92);
    v27 = *(unsigned int *)(a1 + 96);
    do
    {
      if (v28 == (_DWORD)v27)
      {
        if ((_DWORD)v27)
          v29 = (2 * v27);
        else
          v29 = 1;
        if ((int)v27 < (int)v29)
        {
          if ((_DWORD)v29)
          {
            v30 = sub_1B21FF5F0(8 * (int)v29, 16);
            LODWORD(v27) = *(_DWORD *)(a1 + 92);
          }
          else
          {
            v30 = 0;
          }
          if ((int)v27 >= 1)
          {
            v31 = 0;
            do
            {
              *(_QWORD *)(v30 + v31) = *(_QWORD *)(*(_QWORD *)(a1 + 104) + v31);
              v31 += 8;
            }
            while (8 * v27 != v31);
          }
          v32 = *(_QWORD *)(a1 + 104);
          if (v32 && *(_BYTE *)(a1 + 112))
          {
            sub_1B21FF5FC(v32);
            LODWORD(v27) = *(_DWORD *)(a1 + 92);
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_QWORD *)(a1 + 104) = v30;
          v28 = v27;
          *(_DWORD *)(a1 + 96) = v29;
          goto LABEL_62;
        }
        v28 = v27;
      }
      v29 = v27;
LABEL_62:
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v28++) = *(_QWORD *)(a4 + 8 * v25);
      *(_DWORD *)(a1 + 92) = v28;
      ++v25;
      v27 = v29;
    }
    while (v25 != v26);
  }
  if (v14)
  {
    v33 = 0;
    v35 = *(_DWORD *)(a1 + 124);
    v34 = *(unsigned int *)(a1 + 128);
    while (1)
    {
      if (v35 == (_DWORD)v34)
      {
        if ((_DWORD)v34)
          v36 = (2 * v34);
        else
          v36 = 1;
        if ((int)v34 < (int)v36)
        {
          if ((_DWORD)v36)
          {
            v37 = sub_1B21FF5F0(8 * (int)v36, 16);
            LODWORD(v34) = *(_DWORD *)(a1 + 124);
          }
          else
          {
            v37 = 0;
          }
          if ((int)v34 >= 1)
          {
            v38 = 0;
            do
            {
              *(_QWORD *)(v37 + v38) = *(_QWORD *)(*(_QWORD *)(a1 + 136) + v38);
              v38 += 8;
            }
            while (8 * v34 != v38);
          }
          v39 = *(_QWORD *)(a1 + 136);
          if (v39 && *(_BYTE *)(a1 + 144))
          {
            sub_1B21FF5FC(v39);
            LODWORD(v34) = *(_DWORD *)(a1 + 124);
          }
          *(_BYTE *)(a1 + 144) = 1;
          *(_QWORD *)(a1 + 136) = v37;
          v35 = v34;
          *(_DWORD *)(a1 + 128) = v36;
          goto LABEL_82;
        }
        v35 = v34;
      }
      v36 = v34;
LABEL_82:
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v35++) = *(_QWORD *)(v12 + 8 * v33);
      *(_DWORD *)(a1 + 124) = v35;
      ++v33;
      v34 = v36;
      if (v33 == v14)
        goto LABEL_85;
    }
  }
  v35 = *(_DWORD *)(a1 + 124);
LABEL_85:
  if (*(_DWORD *)(a1 + 92) + v35 > *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72))
    sub_1B21FD678(a1);
}

void sub_1B21FE570()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B21FE584(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (*a2 != *(_QWORD *)(a1 + 120)
    && ((v2 = a2[1], (*(_QWORD *)(a1 + 24) & v2) != 0) && (a2[2] & *(_QWORD *)(a1 + 16)) != 0
     || (*(_QWORD *)(a1 + 32) & v2) != 0))
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 56))(*(_QWORD *)(a1 + 144));
  }
  else
  {
    return 0;
  }
}

float sub_1B21FE5EC(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t *v3;
  float result;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;

  v3 = *(float32x4_t **)a2;
  result = 1.0;
  if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 120) && (v3[14].i8[8] & 4) == 0)
  {
    v5 = vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 48));
    v5.i32[3] = 0;
    v6 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), v5);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] < (float)-*(float *)(a1 + 128))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 112) = v3;
      v7 = *(float32x4_t *)(a2 + 16);
      if (!a3)
      {
        v8 = (int8x16_t)vmulq_f32(v3[1], v7);
        v9 = (int8x16_t)vmulq_f32(v7, v3[2]);
        v10 = (int8x16_t)vmulq_f32(v7, v3[3]);
        v10.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
        *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
      }
      *(float32x4_t *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 32);
      return *(float *)(a2 + 48);
    }
  }
  return result;
}

uint64_t sub_1B21FE6A8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;

  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v9 >> 1));
    v11 = a4;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 236);
      v14 = (uint64_t *)(v12 + 8 * a3);
      v15 = a3;
      do
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 236);
        if (v13 < 0)
          v16 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 236);
        v17 = *v14;
        v18 = *(_DWORD *)(*(_QWORD *)(*v14 + 40) + 236);
        if (v18 < 0)
          v18 = *(_DWORD *)(*(_QWORD *)(v17 + 48) + 236);
        ++v15;
        ++v14;
      }
      while (v18 < v16);
      a3 = v15 - 1;
      v19 = 8 * v11;
      v20 = v11;
      do
      {
        v21 = *(_QWORD *)(v12 + v19);
        v22 = *(_DWORD *)(*(_QWORD *)(v21 + 40) + 236);
        if (v22 < 0)
          v22 = *(_DWORD *)(*(_QWORD *)(v21 + 48) + 236);
        result = *(unsigned int *)(*(_QWORD *)(v10 + 40) + 236);
        if (v13 < 0)
          result = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 236);
        --v20;
        v19 -= 8;
      }
      while ((int)result < v22);
      v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v21;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v19 + 8) = v17;
        a3 = v15;
        v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8)
      result = sub_1B21FE6A8(a1, a2);
  }
  while (a3 < a4);
  return result;
}

__n128 sub_1B21FE7CC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  __n128 result;

  v4 = (_OWORD *)(a1 + 508);
  *(_DWORD *)(a1 + 264) = 2;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 624) = xmmword_1B2244F70;
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)(a1 + 400) = _D1;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_DWORD *)(a1 + 444) = 0;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int8x8_t *)(a1 + 496) = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a2 + 112), _D1), (int8x8_t)_D1, *(int8x8_t *)(a2 + 112)), (int8x8_t)vcltz_f32(*(float32x2_t *)(a2 + 112)));
  *(_QWORD *)(a1 + 524) = *(_QWORD *)(a2 + 132);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 536) = v10;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 140);
  *v4 = *(_OWORD *)(a2 + 144);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a1 + 16);
    v11 = *(_OWORD *)(a1 + 16);
    v12 = *(_OWORD *)(a1 + 32);
    v13 = *(_OWORD *)(a1 + 48);
    v14 = *(_OWORD *)(a1 + 64);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v15 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 124);
  v16 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 252) = v15;
  *(_DWORD *)(a1 + 256) = v16;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(a2 + 80));
  v17 = dword_1EEFD4C88++;
  *(_DWORD *)(a1 + 580) = v17;
  sub_1B21FEA84(a1, (float32x2_t *)(a2 + 96), *(float *)a2);
  sub_1B21FEB10((float32x4_t *)a1);
  *(_DWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  result = (__n128)vmulq_n_f32(*(float32x4_t *)(a1 + 400), *(float *)(a1 + 384));
  result.n128_u32[3] = 0;
  *(_DWORD *)(a1 + 532) = 0;
  *(__n128 *)(a1 + 640) = result;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  return result;
}

uint64_t sub_1B21FE938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B21D02D0(a1);
  *(_QWORD *)v4 = off_1E63CBAA0;
  *(_BYTE *)(v4 + 568) = 1;
  *(_QWORD *)(v4 + 560) = 0;
  *(_QWORD *)(v4 + 548) = 0;
  sub_1B21FE7CC(v4, a2);
  return a1;
}

uint64_t sub_1B21FE988(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, float a5)
{
  uint64_t v10;
  float v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;

  sub_1B21D02D0(a1);
  *(_QWORD *)v10 = off_1E63CBAA0;
  *(_BYTE *)(v10 + 568) = 1;
  *(_QWORD *)(v10 + 560) = 0;
  *(_QWORD *)(v10 + 548) = 0;
  v12 = a5;
  v13 = a2;
  v19 = a3;
  v20 = *a4;
  v21 = xmmword_1B22CA640;
  v22 = 0x3F4CCCCD00000000;
  v23 = 1065353216;
  v24 = 0;
  v25 = xmmword_1B2248000;
  v14 = xmmword_1B2244DB0;
  v15 = xmmword_1B2244DD0;
  v16 = xmmword_1B2244D90;
  v17 = 0;
  v18 = 0;
  sub_1B21FE7CC(v10, (uint64_t)&v12);
  return a1;
}

int8x8_t sub_1B21FEA64(int8x8_t *a1, float32x2_t a2, float32_t a3)
{
  int8x8_t result;

  a2.f32[1] = a3;
  __asm { FMOV            V2.2S, #1.0 }
  result = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(a2, _D2), (int8x8_t)_D2, (int8x8_t)a2), (int8x8_t)vcltz_f32(a2));
  a1[62] = result;
  return result;
}

__n128 sub_1B21FEA84(uint64_t a1, float32x2_t *a2, float a3)
{
  int v3;
  float v4;
  float32x4_t v5;
  float v6;
  float v8;
  __n128 result;

  v3 = *(_DWORD *)(a1 + 232);
  if (a3 == 0.0)
  {
    *(_DWORD *)(a1 + 232) = v3 | 1;
    v4 = 0.0;
  }
  else
  {
    *(_DWORD *)(a1 + 232) = v3 & 0xFFFFFFFE;
    v4 = 1.0 / a3;
  }
  *(float *)(a1 + 384) = v4;
  v5 = vmulq_n_f32(*(float32x4_t *)(a1 + 432), a3);
  v5.i32[3] = 0;
  *(float32x4_t *)(a1 + 416) = v5;
  v5.i32[0] = a2[1].i32[0];
  v6 = 1.0 / v5.f32[0];
  _ZF = v5.f32[0] == 0.0;
  v8 = 0.0;
  if (!_ZF)
    v8 = v6;
  __asm { FMOV            V4.2S, #1.0 }
  *(int8x8_t *)(a1 + 448) = vbic_s8((int8x8_t)vdiv_f32(_D4, *a2), (int8x8_t)vceqz_f32(*a2));
  *(float *)(a1 + 456) = v8;
  *(_DWORD *)(a1 + 460) = 0;
  result = (__n128)vmulq_n_f32(*(float32x4_t *)(a1 + 400), v4);
  result.n128_u32[3] = 0;
  *(__n128 *)(a1 + 640) = result;
  return result;
}

float32x4_t sub_1B21FEB10(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t result;

  v1 = a1[28];
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = (float32x4_t)vtrn1q_s32((int32x4_t)v2, (int32x4_t)v3);
  v6 = (float32x4_t)vzip2q_s64((int64x2_t)v5, (int64x2_t)v4);
  v6.i32[3] = 0;
  v7 = vmulq_f32(v1, v4);
  *(int32x2_t *)v8.f32 = vzip2_s32(*(int32x2_t *)v2.f32, *(int32x2_t *)v3.f32);
  v8.i64[1] = vdup_lane_s32(*(int32x2_t *)v4.f32, 1).u32[0];
  v5.i64[1] = v4.u32[0];
  v9 = vmulq_f32(v1, v3);
  result = vmulq_f32(v2, v1);
  a1[19] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, result.f32[0]), v8, *(float32x2_t *)result.f32, 1), v6, result, 2);
  a1[20] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v8, *(float32x2_t *)v9.f32, 1), v6, v9, 2);
  a1[21] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v7.f32[0]), v8, *(float32x2_t *)v7.f32, 1), v6, v7, 2);
  return result;
}

void sub_1B21FEB7C(float32x4_t *a1, float32x4_t *a2, float a3)
{
  sub_1B21E8F2C(a1 + 1, a1 + 22, a1 + 23, a2, a3);
}

__n128 sub_1B21FEB94(uint64_t a1, __n128 result)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  float v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result.n128_f32[0] != 0.0)
  {
    v15 = v5;
    v16 = v4;
    v17 = v2;
    v18 = v3;
    v6 = result.n128_f32[0];
    v8 = *(_QWORD *)(a1 + 536);
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a1 + 16);
    v9 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 128)), 1.0 / v6);
    v9.i32[3] = 0;
    *(float32x4_t *)(a1 + 352) = v9;
    v13 = 0.0;
    sub_1B21D3CB8((_OWORD *)(a1 + 80), (float32x2_t *)(a1 + 16), &v14, &v13);
    v10 = vmulq_n_f32(vmulq_n_f32(v14, v13), 1.0 / v6);
    v10.i32[3] = 0;
    *(float32x4_t *)(a1 + 368) = v10;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 352);
    *(float32x4_t *)(a1 + 160) = v10;
    v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 96) = v11;
    result = *(__n128 *)(a1 + 48);
    v12 = *(_OWORD *)(a1 + 64);
    *(__n128 *)(a1 + 112) = result;
    *(_OWORD *)(a1 + 128) = v12;
  }
  return result;
}

__n128 sub_1B21FEC54(float32x4_t *a1, float32x4_t *a2)
{
  float v2;
  float32x4_t v3;
  __n128 result;

  v2 = a1[24].f32[0];
  if (v2 != 0.0)
  {
    v3 = vmulq_n_f32(*a2, 1.0 / v2);
    v3.i32[3] = 0;
    a1[26] = v3;
  }
  result = *(__n128 *)a2;
  a1[27] = *a2;
  return result;
}

void sub_1B21FEC84(float32x4_t *a1, float a2)
{
  float v4;
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  int8x16_t v11;
  float v12;
  float32x4_t *v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;

  v4 = a1[31].f32[0];
  v19 = vmulq_n_f32(a1[22], powf(1.0 - v4, a2));
  a1[22] = v19;
  v5 = a1[31].f32[1];
  v6 = vmulq_n_f32(a1[23], powf(1.0 - v5, a2));
  a1[23] = v6;
  if (a1[31].i8[8])
  {
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8)).f32[0] >= a1[32].f32[1])
    {
      v8 = v19;
    }
    else
    {
      v8 = v19;
      v9 = (int8x16_t)vmulq_f32(v8, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0] < a1[32].f32[0])
      {
        v10 = a1[31].f32[3];
        v6 = vmulq_n_f32(v6, v10);
        v8 = vmulq_n_f32(v19, v10);
        a1[22] = v8;
        a1[23] = v6;
      }
    }
    v11 = (int8x16_t)vmulq_f32(v8, v8);
    v12 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]);
    if (v12 < v4)
    {
      v13 = a1 + 22;
      if (v12 <= 0.005)
      {
        v13->i64[0] = 0;
        a1[22].i64[1] = 0;
      }
      else
      {
        v14 = vmulq_f32(vmulq_n_f32(v8, 1.0 / v12), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v14.i32[3] = 0;
        *v13 = vsubq_f32(v8, v14);
      }
    }
    v15 = (int8x16_t)vmulq_f32(v6, v6);
    v16 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]);
    if (v16 < v5)
    {
      v17 = a1 + 23;
      if (v16 <= 0.005)
      {
        v17->i64[0] = 0;
        a1[23].i64[1] = 0;
      }
      else
      {
        v18 = vmulq_f32(vmulq_n_f32(v6, 1.0 / v16), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v18.i32[3] = 0;
        *v17 = vsubq_f32(v6, v18);
      }
    }
  }
}

float32x4_t sub_1B21FEE14(float32x4_t *a1)
{
  float32x4_t result;

  if ((a1[14].i8[8] & 3) == 0)
  {
    result = vaddq_f32(a1[29], vmulq_f32(a1[26], a1[25]));
    a1[29] = result;
  }
  return result;
}

double sub_1B21FEE40(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  if ((a1[14].i8[8] & 2) != 0)
  {
    v3 = a1[2];
    a1[5] = a1[1];
    a1[6] = v3;
    a1[7] = a1[3];
    v2 = a1 + 4;
  }
  else
  {
    a1[5] = *a2;
    a1[6] = a2[1];
    a1[7] = a2[2];
    v2 = a2 + 3;
  }
  v4 = a1[22];
  v5 = a1[23];
  a1[8] = *v2;
  a1[9] = v4;
  a1[10] = v5;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  a1[4] = a2[3];
  *(_QWORD *)&result = sub_1B21FEB10(a1).u64[0];
  return result;
}

uint64_t sub_1B21FEEB0@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X8>, float a3@<S0>, float32x4_t _Q2@<Q2>)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v26;

  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)_Q2.f32 = vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(result + 448));
  _Q2.f32[2] = 1.0 / *(float *)(result + 456);
  v8 = *(float32x4_t *)(result + 16);
  v9 = *(float32x4_t *)(result + 32);
  v10 = *(float32x4_t *)(result + 48);
  v11 = vmulq_f32(_Q2, v9);
  v12 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  *(int32x2_t *)v9.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  v13 = vmulq_f32(_Q2, v10);
  v14 = (float32x4_t)vzip2q_s64((int64x2_t)v12, (int64x2_t)v10);
  v9.i64[1] = vdup_lane_s32(*(int32x2_t *)v10.f32, 1).u32[0];
  v15 = vmulq_f32(v8, _Q2);
  v12.i64[1] = v10.u32[0];
  v14.i32[3] = 0;
  v16 = vmulq_n_f32(v12, v11.f32[0]);
  v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v15.f32[0]), v9, *(float32x2_t *)v15.f32, 1), v14, v15, 2);
  v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v14, v13, 2);
  v19 = *(float32x4_t *)(result + 368);
  v20 = vmulq_f32(v17, v19);
  v21 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v16, v9, *(float32x2_t *)v11.f32, 1), v14, v11, 2), v19);
  v22 = (int8x16_t)vmulq_f32(v18, v19);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)v21.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v21.i8, 4uLL);
  v11.i64[1] = v20.i64[0];
  *(float32x2_t *)v20.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), 4uLL), *(float32x2_t *)v20.f32);
  *(float32x2_t *)&v20.u32[2] = vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v21.i8);
  v23 = (int8x16_t)vsubq_f32(vmulq_f32(v19, v11), v20);
  v24.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
  v24.i64[1] = v23.u32[0];
  v25 = (int8x16_t)vmulq_f32(v24, v24);
  v26 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0];
  if (v26 > (float)(a3 * a3))
    v24 = vmulq_n_f32(v24, (float)(1.0 / sqrtf(v26)) * a3);
  *a2 = v24;
  return result;
}

BOOL sub_1B21FEFC8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 1;
  if ((*(_BYTE *)(a2 + 264) & 2) != 0)
  {
    if (a2)
    {
      v3 = *(unsigned int *)(a1 + 548);
      if ((int)v3 >= 1)
      {
        v4 = 0;
        v2 = 0;
        do
        {
          v5 = *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v4);
          if (*(_BYTE *)(v5 + 28) && (*(_QWORD *)(v5 + 40) == a2 || *(_QWORD *)(v5 + 48) == a2))
            break;
          v2 = ++v4 >= v3;
        }
        while (v3 != v4);
      }
    }
  }
  return v2;
}

void sub_1B21FF030(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 548);
  if (v4 < 1)
    goto LABEL_7;
  v5 = *(_QWORD **)(a1 + 560);
  v6 = *(unsigned int *)(a1 + 548);
  while (*v5 != a2)
  {
    ++v5;
    if (!--v6)
      goto LABEL_7;
  }
  if (!(_DWORD)v6)
  {
LABEL_7:
    if (v4 == *(_DWORD *)(a1 + 552))
    {
      v7 = v4 ? 2 * v4 : 1;
      if (v4 < v7)
      {
        if (v7)
        {
          v8 = sub_1B21FF5F0(8 * v7, 16);
          v4 = *(_DWORD *)(a1 + 548);
        }
        else
        {
          v8 = 0;
        }
        if (v4 >= 1)
        {
          v9 = 0;
          do
          {
            *(_QWORD *)(v8 + v9) = *(_QWORD *)(*(_QWORD *)(a1 + 560) + v9);
            v9 += 8;
          }
          while (8 * v4 != v9);
        }
        v10 = *(_QWORD *)(a1 + 560);
        if (v10 && *(_BYTE *)(a1 + 568))
        {
          sub_1B21FF5FC(v10);
          v4 = *(_DWORD *)(a1 + 548);
        }
        *(_BYTE *)(a1 + 568) = 1;
        *(_QWORD *)(a1 + 560) = v8;
        *(_DWORD *)(a1 + 552) = v7;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v4) = a2;
    *(_DWORD *)(a1 + 548) = v4 + 1;
  }
  *(_DWORD *)(a1 + 292) = 1;
}

uint64_t sub_1B21FF138(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  result = sub_1B21D0C28(a1 + 544, &v4);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a1 + 548) > 0;
  return result;
}

uint64_t sub_1B21FF17C()
{
  return 504;
}

const char *sub_1B21FF184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v13;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  __int128 v20;

  v5 = (_OWORD *)(a2 + 468);
  v6 = a1 + 508;
  sub_1B21D03B8(a1, a2, a3);
  v7 = 0;
  v8 = a1 + 304;
  v9 = a2 + 272;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)(v9 + i) = *(_DWORD *)(v8 + i);
    ++v7;
    v8 += 16;
    v9 += 16;
  }
  while (v7 != 3);
  for (j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 320 + j) = *(_DWORD *)(a1 + 352 + j);
  for (k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 336 + k) = *(_DWORD *)(a1 + 368 + k);
  v13 = 0;
  *(_DWORD *)(a2 + 464) = *(_DWORD *)(a1 + 384);
  do
  {
    *(_DWORD *)(a2 + 352 + v13) = *(_DWORD *)(a1 + 624 + v13);
    v13 += 4;
  }
  while (v13 != 16);
  for (m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 368 + m) = *(_DWORD *)(a1 + 400 + m);
  for (n = 0; n != 16; n += 4)
    *(_DWORD *)(a2 + 384 + n) = *(_DWORD *)(a1 + 416 + n);
  for (ii = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + 400 + ii) = *(_DWORD *)(a1 + 432 + ii);
  for (jj = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + 416 + jj) = *(_DWORD *)(a1 + 448 + jj);
  for (kk = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + 432 + kk) = *(_DWORD *)(a1 + 464 + kk);
  for (mm = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + 448 + mm) = *(_DWORD *)(a1 + 480 + mm);
  *(_QWORD *)&v20 = *(_QWORD *)(a1 + 496);
  *(_DWORD *)(a2 + 500) = *(unsigned __int8 *)(a1 + 504);
  *((_QWORD *)&v20 + 1) = *(_QWORD *)v6;
  *v5 = v20;
  v5[1] = *(_OWORD *)(v6 + 8);
  return "btRigidBodyFloatData";
}

uint64_t sub_1B21FF340(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v4, 1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(v5 + 8), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6, 1497645650, a1);
}

void sub_1B21FF3C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E63CBAA0;
  sub_1B1810570((uint64_t)(a1 + 68));
  nullsub_16(a1);
  sub_1B21FF5FC(v2);
}

uint64_t sub_1B21FF400(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  return 0;
}

void sub_1B21FF4C8()
{
  JUMPOUT(0x1B5E22E18);
}

void sub_1B21FF4DC()
{
  JUMPOUT(0x1B5E22E18);
}

float sub_1B21FF4F0(float32x4_t *a1, uint64_t a2, int a3)
{
  float32x4_t *v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;

  a1->i32[2] = *(_DWORD *)(a2 + 32);
  v3 = *(float32x4_t **)a2;
  a1[1].i64[0] = *(_QWORD *)a2;
  v4 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v5 = (int8x16_t)vmulq_f32(v3[1], v4);
    v6 = (int8x16_t)vmulq_f32(v4, v3[2]);
    v7 = (int8x16_t)vmulq_f32(v4, v3[3]);
    v7.i32[3] = 0;
    *(float32x2_t *)v4.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
    *(float32x2_t *)&v4.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  }
  a1[6] = v4;
  a1[7] = vaddq_f32(a1[4], vmulq_n_f32(vsubq_f32(a1[5], a1[4]), *(float *)(a2 + 32)));
  return *(float *)(a2 + 32);
}

uint64_t sub_1B21FF574(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;

  v3 = off_1EEF65310(a1 + a2 - 1 + 8);
  v4 = 0;
  if (v3)
  {
    v4 = ((unint64_t)v3 + a2 + 7) & -(uint64_t)a2;
    *(_QWORD *)(v4 - 8) = v3;
  }
  return v4;
}

void sub_1B21FF5C8(uint64_t a1)
{
  if (a1)
    off_1EEF65318(*(void **)(a1 - 8));
}

void *sub_1B21FF5E0(size_t a1)
{
  return malloc_type_malloc(a1, 0x7DDD96CuLL);
}

uint64_t sub_1B21FF5F0(uint64_t a1, int a2)
{
  return off_1EEF65300(a1, a2);
}

void sub_1B21FF5FC(uint64_t a1)
{
  if (a1)
    off_1EEF65308(a1);
}

BOOL sub_1B21FF610(uint64_t a1, int *a2, float32x4_t *a3, float32_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x8_t v7;
  float32x4_t v8;
  int8x8_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;

  v4 = *(float32x4_t *)(a1 + 16 * a2[1]);
  v5 = *(float32x4_t *)(a1 + 16 * *a2);
  v6 = vsubq_f32(v4, v5);
  v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * a2[2]), v4);
  v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  v12 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v8)), v6, v11);
  v13.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v13.i64[1] = v12.u32[0];
  v14 = (int8x16_t)vmulq_f32(v13, v13);
  v15 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]);
  if (v15 == 0.0)
  {
    v16 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v16 = vmulq_n_f32(v13, 1.0 / v15);
    v16.i32[3] = 0;
  }
  v17 = vsubq_f32(*a3, v5);
  v17.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v16, v17);
  return vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0] > a4;
}

uint64_t sub_1B21FF6C4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = 0;
  v4 = &unk_1EEF65320;
  while (1)
  {
    v5 = v3 + 1;
    v6 = v3 == 2 ? 0 : v3 + 1;
    v7 = *(_DWORD *)(a1 + 4 * v3);
    if (v7 == a2 && *(_DWORD *)(a1 + 4 * v6) == a3)
      break;
    if (v7 == a3 && *(_DWORD *)(a1 + 4 * v6) == a2)
      break;
    ++v3;
    if (v5 == 3)
      return (uint64_t)v4;
  }
  v8 = v3 + 2;
  v9 = v3 - 1;
  if (v8 >= 3)
    v8 = v9;
  return a1 + 4 * (int)v8 + 12;
}

_DWORD *sub_1B21FF738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int *v15;
  _DWORD *result;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = -3;
  do
  {
    v7 = v6 + 4;
    v8 = v6 + 1;
    if (v6 == -1)
      v7 = 0;
    if (v6 == -3)
      v9 = 2;
    else
      v9 = v6 + 2;
    v10 = *(_DWORD *)(a2 + 4 * v7);
    v11 = *(_DWORD *)(a2 + 4 * v9);
    v12 = *(_DWORD *)sub_1B21FF6C4(a3, v11, v10);
    v13 = (int *)sub_1B21FF6C4(a2, v10, v11);
    *(_DWORD *)sub_1B21FF6C4(*(_QWORD *)(v5 + 8 * *v13), v11, v10) = v12;
    v14 = *(_DWORD *)sub_1B21FF6C4(a2, v10, v11);
    v15 = (int *)sub_1B21FF6C4(a3, v11, v10);
    result = (_DWORD *)sub_1B21FF6C4(*(_QWORD *)(v5 + 8 * *v15), v10, v11);
    *result = v14;
    v6 = v8;
  }
  while (v8);
  return result;
}

void sub_1B21FF81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B21FF738(a1, a2, a3);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a2 + 24)) = 0;
  sub_1B21FF5FC(a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a3 + 24)) = 0;
  sub_1B21FF5FC(a3);
}

uint64_t sub_1B21FF870(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = sub_1B21FF5F0(36, 16);
  *(_DWORD *)v8 = a2;
  *(_DWORD *)(v8 + 4) = a3;
  *(_DWORD *)(v8 + 8) = a4;
  *(_QWORD *)(v8 + 12) = -1;
  *(_QWORD *)(v8 + 28) = 0xFFFFFFFFLL;
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v8 + 20) = -1;
  *(_DWORD *)(v8 + 24) = v9;
  if (v9 == v10)
  {
    v11 = v9 ? 2 * v9 : 1;
    if (v9 < v11)
    {
      if (v11)
      {
        v12 = sub_1B21FF5F0(8 * v11, 16);
        v9 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        v12 = 0;
      }
      if (v9 >= 1)
      {
        v13 = 0;
        do
        {
          *(_QWORD *)(v12 + v13) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13);
          v13 += 8;
        }
        while (8 * v9 != v13);
      }
      v14 = *(_QWORD *)(a1 + 16);
      if (v14 && *(_BYTE *)(a1 + 24))
      {
        sub_1B21FF5FC(v14);
        v9 = *(_DWORD *)(a1 + 4);
      }
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = v12;
      *(_DWORD *)(a1 + 8) = v11;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9) = v8;
  *(_DWORD *)(a1 + 4) = v9 + 1;
  return v8;
}

void sub_1B21FF978(uint64_t a1, int *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v18;
  _DWORD *v21;
  uint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *(_DWORD *)(a1 + 4);
  v10 = (_DWORD *)sub_1B21FF870(a1, a3, v7, v8);
  v11 = v9 + 2;
  v10[3] = a2[3];
  v10[4] = v9 + 1;
  v10[5] = v9 + 2;
  *(_DWORD *)sub_1B21FF6C4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2[3]), v7, v8) = v9;
  v12 = (_DWORD *)sub_1B21FF870(a1, a3, v8, v6);
  v12[3] = a2[4];
  v12[4] = v9 + 2;
  v22 = (uint64_t)v12;
  v12[5] = v9;
  *(_DWORD *)sub_1B21FF6C4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2[4]), v8, v6) = v9 + 1;
  v13 = (_DWORD *)sub_1B21FF870(a1, a3, v6, v7);
  v13[3] = a2[5];
  v13[4] = v9;
  v13[5] = v9 + 1;
  v14 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)sub_1B21FF6C4(*(_QWORD *)(v14 + 8 * a2[5]), v6, v7) = v11;
  v15 = *(_DWORD **)(v14 + 8 * (int)v10[3]);
  if (*v15 == a3 || v15[1] == a3 || v15[2] == a3)
  {
    sub_1B21FF81C(a1, (uint64_t)v10, (uint64_t)v15);
    v14 = *(_QWORD *)(a1 + 16);
  }
  v18 = *(_DWORD **)(v14 + 8 * *(int *)(v22 + 12));
  if (*v18 == a3 || v18[1] == a3 || v18[2] == a3)
  {
    sub_1B21FF81C(a1, v22, (uint64_t)v18);
    v14 = *(_QWORD *)(a1 + 16);
  }
  v21 = *(_DWORD **)(v14 + 8 * (int)v13[3]);
  if (*v21 == a3 || v21[1] == a3 || v21[2] == a3)
  {
    sub_1B21FF81C(a1, (uint64_t)v13, (uint64_t)v21);
    v14 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(v14 + 8 * a2[6]) = 0;
  sub_1B21FF5FC((uint64_t)a2);
}

uint64_t sub_1B21FFB3C(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(uint64_t **)(a1 + 16);
  do
  {
    v6 = *v5;
    if (!result || v6 && *(float *)(result + 32) < *(float *)(v6 + 32))
      result = *v5;
    ++v5;
    --v2;
  }
  while (v2);
  if (result && *(float *)(result + 32) <= a2)
    return 0;
  return result;
}

unint64_t sub_1B21FFB9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  signed int v7;
  int8x16_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x2_t v13;
  unsigned int v14;
  uint64_t v15;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float32x4_t v25;
  int v26;
  int v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int v36;
  int8x16_t v37;
  int8x16_t v38;
  __int128 v39;
  int8x16_t v40;
  float32x4_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v39 = xmmword_1B22CA660;
  v7 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v39, a4);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v38 = veorq_s8((int8x16_t)v39, v8);
  v9 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v38, a4);
  v10 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v7), *(float32x4_t *)(a2 + 16 * (int)v9));
  v10.i32[3] = 0;
  v39 = (__int128)v10;
  if (v7 == (_DWORD)v9
    || (v11 = v9,
        v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0],
        v13 = vceqz_f32(*(float32x2_t *)v12.f32),
        (v13.i8[4] & 1) != 0)
    && (v13.i8[0] & 1) != 0
    && v10.f32[0] == 0.0)
  {
    v14 = -1;
LABEL_6:
    v15 = 0xFFFFFFFFLL;
    return v14 | (unint64_t)(v15 << 32);
  }
  v12.i64[1] = v10.i64[0];
  v17 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1B22CA680), (float32x4_t)xmmword_1B22CA670, v12);
  v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
  v18.i64[1] = v17.u32[0];
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1B22CA6A0), (float32x4_t)xmmword_1B22CA690, v12);
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  v21 = (int8x16_t)vmulq_f32(v18, v18);
  *(float32x2_t *)v17.i8 = vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8);
  v22 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
  *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v22.f32);
  v22.f32[0] = sqrtf(v22.f32[0]);
  v23 = (int8x16_t)vmulq_f32((float32x4_t)v20, (float32x4_t)v20);
  v24 = vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
  v25 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
  *(float32x2_t *)v25.f32 = vadd_f32(v24, *(float32x2_t *)v25.f32);
  v25.f32[0] = sqrtf(v25.f32[0]);
  v40 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v22, v25), 0), (int8x16_t)v18, v20), 1.0 / fmaxf(v22.f32[0], v25.f32[0]));
  v41 = (float32x4_t)v20;
  v26 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v40, a4);
  if (v26 == v7 || (v27 = v26, v26 == (_DWORD)v11))
  {
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    v38 = veorq_s8(v40, v28);
    v27 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v38, a4);
  }
  v14 = -1;
  if (v27 == v7)
    goto LABEL_6;
  v15 = 0xFFFFFFFFLL;
  if (v27 == (_DWORD)v11)
    return v14 | (unint64_t)(v15 << 32);
  v29 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v27), *(float32x4_t *)(a2 + 16 * v7));
  v30 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v29.i32[3] = 0;
  *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v30, 4uLL);
  v31.i64[1] = v29.i64[0];
  *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)&v39, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
  v32.i64[1] = v39;
  v33 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v31, (float32x4_t)v39)), v29, v32);
  v34.i64[0] = vextq_s8(v33, v33, 4uLL).u64[0];
  v34.i64[1] = v33.u32[0];
  v35 = (int8x16_t)vmulq_f32(v34, v34);
  v40 = (int8x16_t)v29;
  v41 = vmulq_n_f32(v34, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]));
  v36 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v41, a4);
  if (v36 == v27 || v36 == v7 || v36 == (_DWORD)v11)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    v38 = veorq_s8((int8x16_t)v41, v37);
    v36 = sub_1B21FFF38(a2, a3, (int8x8_t *)&v38, a4);
  }
  v14 = -1;
  if (v36 == v27 || v36 == v7)
    goto LABEL_6;
  v15 = 0xFFFFFFFFLL;
  if (v36 != (_DWORD)v11)
  {
    v14 = v7;
    v15 = v11;
  }
  return v14 | (unint64_t)(v15 << 32);
}

uint64_t sub_1B21FFF38(uint64_t a1, int a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int v32;
  int v33;
  float v34;
  __float2 v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float i;
  __float2 v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  int8x16_t v47;
  int8x16_t v48;
  BOOL v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = (float32x4_t)xmmword_1B2244DD0;
  v9 = (float32x4_t)xmmword_1B22684E0;
  v10 = (float32x4_t)xmmword_1B2244E40;
  v11 = a2;
  v51 = (float32x4_t)vdupq_n_s32(0x3CCCCCCDu);
LABEL_2:
  if (a2 < 1)
  {
    v14 = -1;
  }
  else
  {
    v12 = 0;
    v13 = *(float32x4_t *)a3->i8;
    v14 = -1;
    do
    {
      if (*(_DWORD *)(v7 + 4 * v12))
      {
        if (v14 == -1
          || (v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v12), v13),
              v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v14), v13),
              (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8))).u8[0] & 1) != 0))
        {
          v14 = v12;
        }
      }
      ++v12;
    }
    while (v11 != v12);
  }
  v17 = v14;
  if (*(_DWORD *)(v7 + 4 * v14) != 3)
  {
    v18 = 0;
    *(int8x8_t *)v19.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v19.u32[2] = *a3;
    v20 = (int8x16_t)vmlaq_f32(vmulq_f32(v19, v9), v8, *(float32x4_t *)a3->i8);
    v21.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
    v21.i64[1] = v20.u32[0];
    v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v19, v8)), v10, *(float32x4_t *)a3->i8);
    v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
    v23.i64[1] = v22.u32[0];
    v24 = (int8x16_t)vmulq_f32(v21, v21);
    v25 = vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
    v26 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
    *(float32x2_t *)v26.f32 = vadd_f32(*(float32x2_t *)v26.f32, v25);
    v26.f32[0] = sqrtf(v26.f32[0]);
    v27 = (int8x16_t)vmulq_f32(v23, v23);
    v28 = vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8);
    v29 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
    *(float32x2_t *)v29.f32 = vadd_f32(*(float32x2_t *)v29.f32, v28);
    v29.f32[0] = sqrtf(v29.f32[0]);
    v30 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, v29), 0), (int8x16_t)v21, (int8x16_t)v23), 1.0 / fmaxf(v26.f32[0], v29.f32[0]));
    v26.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
    v26.i64[1] = v30.i64[0];
    v53 = v30;
    v54 = *(float32x4_t *)a3->i8;
    v31 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v26, *(float32x4_t *)a3->i8)), v19, v30);
    v19.i64[0] = vextq_s8(v31, v31, 4uLL).u64[0];
    v19.i64[1] = v31.u32[0];
    v52 = v19;
    v32 = -1;
    while (1)
    {
      v33 = v32;
      v34 = (float)v18;
      v35 = __sincosf_stret((float)v18 * 0.017453);
      if (a2 < 1)
      {
        v32 = -1;
      }
      else
      {
        v36 = 0;
        v37 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v35.__cosval), v53, v35.__sinval), v51);
        v37.i32[3] = 0;
        v38 = vaddq_f32(v54, v37);
        v32 = -1;
        do
        {
          if (*(_DWORD *)(v7 + 4 * v36))
          {
            if (v32 == -1
              || (v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v36), v38),
                  v40 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v32), v38),
                  (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8))).u8[0] & 1) != 0))
            {
              v32 = v36;
            }
          }
          ++v36;
        }
        while (v11 != v36);
      }
      if (v33 == (_DWORD)v17 && v32 == (_DWORD)v17)
        break;
      if (v33 != -1 && v33 != v32)
      {
        for (i = v34 + -40.0; i <= v34; v33 = v46)
        {
          v42 = __sincosf_stret(i * 0.017453);
          if (a2 < 1)
          {
            if ((v33 & v17) == 0xFFFFFFFF)
              goto LABEL_43;
            v46 = -1;
          }
          else
          {
            v43 = 0;
            v44 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v42.__cosval), v53, v42.__sinval), v51);
            v44.i32[3] = 0;
            v45 = vaddq_f32(v54, v44);
            v46 = -1;
            do
            {
              if (*(_DWORD *)(v7 + 4 * v43))
              {
                if (v46 == -1
                  || (v47 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v43), v45),
                      v48 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v46), v45),
                      (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u8[0] & 1) != 0))
                {
                  v46 = v43;
                }
              }
              ++v43;
            }
            while (v11 != v43);
            if (v33 == (_DWORD)v17 && v46 == (_DWORD)v17)
              goto LABEL_43;
          }
          i = i + 5.0;
        }
      }
      v49 = v18 >= 0x13C;
      v18 += 45;
      if (v49)
      {
        *(_DWORD *)(v7 + 4 * v17) = 0;
        v9 = (float32x4_t)xmmword_1B22684E0;
        v8 = (float32x4_t)xmmword_1B2244DD0;
        v10 = (float32x4_t)xmmword_1B2244E40;
        goto LABEL_2;
      }
    }
LABEL_43:
    *(_DWORD *)(v7 + 4 * v17) = 3;
  }
  return v17;
}

uint64_t sub_1B22002D0(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  float32x4_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x8_t v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  float32x4_t v55;
  int v56;
  float32x4_t v57;
  int8x16_t v58;
  int v59;
  float32x4_t v60;
  int8x16_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  float32x4_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  uint64_t v86;
  int *v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float v98;
  float32x4_t v99;
  int v100;
  float32x4_t v101;
  int8x16_t v102;
  BOOL v104;
  int v106;
  int v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  _BYTE v118[4];
  int v119;
  int v120;
  uint64_t v121;
  char v122;

  if ((int)a3 < 4)
    return 0;
  v106 = a4 - 4;
  v112 = *a2;
  v8 = 4 * a3;
  v9 = a3;
  v10 = sub_1B21FF5F0(v8, 16);
  v119 = 0;
  v11 = sub_1B21FF5F0(v8, 16);
  v12 = v112;
  v13 = v11;
  v14 = 0;
  v122 = 1;
  v121 = v11;
  v120 = a3;
  v15 = v112;
  v108 = a3;
  v16 = a3;
  do
  {
    v17 = v119;
    if (v119 == v120)
    {
      v18 = v119 ? 2 * v119 : 1;
      if (v119 < v18)
      {
        v109 = v15;
        v113 = v12;
        if (v18)
        {
          v11 = sub_1B21FF5F0(4 * v18, 16);
          v19 = v11;
        }
        else
        {
          v19 = 0;
        }
        if (v119 < 1)
        {
          if (!v13)
          {
LABEL_18:
            v122 = 1;
            v121 = v19;
            v120 = v18;
            v13 = v19;
            LODWORD(v17) = v119;
            v15 = v109;
            v12 = v113;
            goto LABEL_19;
          }
        }
        else
        {
          v20 = (_DWORD *)v19;
          v21 = (int *)v13;
          do
          {
            v22 = *v21++;
            *v20++ = v22;
            --v17;
          }
          while (v17);
        }
        sub_1B21FF5FC(v13);
        goto LABEL_18;
      }
    }
LABEL_19:
    *(_DWORD *)(v13 + 4 * (int)v17) = 1;
    ++v119;
    if (v14 != v16 || (!v14 ? (v23 = 1) : (v23 = (2 * v14)), (int)v16 >= (int)v23))
    {
      v23 = v16;
      goto LABEL_34;
    }
    v110 = v15;
    v114 = v12;
    if ((_DWORD)v23)
    {
      v11 = sub_1B21FF5F0(4 * v23, 16);
      v24 = v11;
      if (v14)
        goto LABEL_26;
    }
    else
    {
      v24 = 0;
      if (v14)
      {
LABEL_26:
        for (i = 0; i != v14; ++i)
          *(_DWORD *)(v24 + 4 * i) = *(_DWORD *)(v10 + 4 * i);
        goto LABEL_32;
      }
    }
    if (!v10)
    {
      v23 = 1;
      goto LABEL_33;
    }
LABEL_32:
    sub_1B21FF5FC(v10);
LABEL_33:
    v10 = v24;
    v15 = v110;
    v12 = v114;
LABEL_34:
    *(_DWORD *)(v10 + 4 * v14) = 0;
    v26 = a2[v14];
    v12 = vminq_f32(v12, v26);
    v15 = vmaxq_f32(v15, v26);
    ++v14;
    v16 = v23;
  }
  while (v14 != v9);
  v111 = v15;
  v115 = v12;
  v27 = sub_1B21FFB9C(v11, (uint64_t)a2, v108, (uint64_t)v118);
  v29 = v27;
  if ((_DWORD)v27 == -1)
  {
    v4 = 0;
  }
  else
  {
    v30 = v28;
    v31 = HIDWORD(v28);
    v32 = v28 >> 32;
    __asm { FMOV            V1.4S, #0.25 }
    v37 = vmulq_f32(vaddq_f32(vaddq_f32(a2[v27 >> 32], a2[(int)v27]), vaddq_f32(a2[(int)v28], a2[v28 >> 32])), _Q1);
    v37.i32[3] = 0;
    v117 = v37;
    v38 = sub_1B21FF870(a1, v28, SHIDWORD(v28), SHIDWORD(v27));
    *(_QWORD *)(v38 + 12) = 0x300000002;
    *(_DWORD *)(v38 + 20) = 1;
    v39 = sub_1B21FF870(a1, v31, v30, v29);
    *(_QWORD *)(v39 + 12) = 0x200000003;
    *(_DWORD *)(v39 + 20) = 0;
    v40 = sub_1B21FF870(a1, v29, SHIDWORD(v29), v31);
    *(_QWORD *)(v40 + 12) = 0x100000000;
    *(_DWORD *)(v40 + 20) = 3;
    v41 = sub_1B21FF870(a1, SHIDWORD(v29), v29, v30);
    *(_QWORD *)(v41 + 12) = 1;
    *(_DWORD *)(v41 + 20) = 2;
    *(_DWORD *)(v10 + 4 * v32) = 1;
    *(_DWORD *)(v10 + 4 * v30) = 1;
    *(_DWORD *)(v10 + 4 * (v29 >> 32)) = 1;
    *(_DWORD *)(v10 + 4 * (int)v29) = 1;
    if (*(int *)(a1 + 4) >= 1)
    {
      v42 = 0;
      do
      {
        v43 = *(int **)(*(_QWORD *)(a1 + 16) + 8 * v42);
        v44 = a2[v43[1]];
        v45 = vsubq_f32(v44, a2[*v43]);
        v46 = (int8x8_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
        v45.i32[3] = 0;
        v47 = vsubq_f32(a2[v43[2]], v44);
        v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
        v47.i32[3] = 0;
        *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v45.f32, v46, 4uLL);
        v49.i64[1] = v45.i64[0];
        *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
        v50.i64[1] = v47.i64[0];
        v51 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v49, v47)), v45, v50);
        v52.i64[0] = vextq_s8(v51, v51, 4uLL).u64[0];
        v52.i64[1] = v51.u32[0];
        v53 = (int8x16_t)vmulq_f32(v52, v52);
        v54 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8)).f32[0]);
        v55 = (float32x4_t)xmmword_1B2244DB0;
        if (v54 != 0.0)
        {
          v55 = vmulq_n_f32(v52, 1.0 / v54);
          v55.i32[3] = 0;
        }
        v116 = v55;
        v56 = sub_1B21FFF38((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
        v43[7] = v56;
        v57 = vsubq_f32(a2[v56], a2[*v43]);
        v57.i32[3] = 0;
        v58 = (int8x16_t)vmulq_f32(v116, v57);
        v43[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)).u32[0];
        ++v42;
      }
      while (v42 < *(int *)(a1 + 4));
    }
    if (a4)
      v59 = v106;
    else
      v59 = 999999996;
    if (v59 >= 1)
    {
      v60 = vsubq_f32(v111, v115);
      v60.i32[3] = 0;
      v61 = (int8x16_t)vmulq_f32(v60, v60);
      *(float *)v61.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0]);
      v62 = *(float *)v61.i32 * 0.001;
      v63 = *(float *)v61.i32 * 0.00001;
      v64 = (float)(*(float *)v61.i32 * 0.0001) * (float)(*(float *)v61.i32 * 0.001);
      while (1)
      {
        v65 = sub_1B21FFB3C(a1, v62);
        if (!v65)
          goto LABEL_82;
        v66 = *(int *)(v65 + 28);
        *(_DWORD *)(v10 + 4 * v66) = 1;
        v67 = *(int *)(a1 + 4);
        if (!(_DWORD)v67)
          goto LABEL_80;
        v68 = v67 - 1;
        do
        {
          v69 = *(int **)(*(_QWORD *)(a1 + 16) + 8 * v68);
          if (v69)
          {
            v116.i64[0] = *(_QWORD *)v69;
            v116.i32[2] = v69[2];
            if (sub_1B21FF610((uint64_t)a2, (int *)&v116, &a2[v66], v63))
              sub_1B21FF978(a1, v69, v66);
          }
        }
        while ((_DWORD)v68--);
        v71 = *(_DWORD *)(a1 + 4);
        if (!v71)
          goto LABEL_80;
        v72 = *(_DWORD *)(a1 + 4);
        while (1)
        {
          --v72;
          v73 = *(_QWORD *)(a1 + 16);
          v74 = *(_DWORD **)(v73 + 8 * v72);
          if (v74)
            break;
LABEL_69:
          if (!v72)
            goto LABEL_70;
        }
        _ZF = *v74 == (_DWORD)v66 || v74[1] == (_DWORD)v66;
        if (_ZF || v74[2] == (_DWORD)v66)
          break;
LABEL_70:
        if (v71)
        {
          v86 = v71 - 1;
          do
          {
            v87 = *(int **)(*(_QWORD *)(a1 + 16) + 8 * v86);
            if (v87)
            {
              if ((v87[7] & 0x80000000) == 0)
                break;
              v88 = a2[v87[1]];
              v89 = vsubq_f32(v88, a2[*v87]);
              v90 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
              v89.i32[3] = 0;
              v91 = vsubq_f32(a2[v87[2]], v88);
              v92 = (int8x8_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
              v91.i32[3] = 0;
              *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v89.f32, v90, 4uLL);
              v93.i64[1] = v89.i64[0];
              *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v91.f32, v92, 4uLL);
              v94.i64[1] = v91.i64[0];
              v95 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v93, v91)), v89, v94);
              v96.i64[0] = vextq_s8(v95, v95, 4uLL).u64[0];
              v96.i64[1] = v95.u32[0];
              v97 = (int8x16_t)vmulq_f32(v96, v96);
              v98 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8)).f32[0]);
              v99 = (float32x4_t)xmmword_1B2244DB0;
              if (v98 != 0.0)
              {
                v99 = vmulq_n_f32(v96, 1.0 / v98);
                v99.i32[3] = 0;
              }
              v116 = v99;
              v100 = sub_1B21FFF38((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
              v87[7] = v100;
              if (*(_DWORD *)(v10 + 4 * v100))
              {
                v87[7] = -1;
              }
              else
              {
                v101 = vsubq_f32(a2[v100], a2[*v87]);
                v101.i32[3] = 0;
                v102 = (int8x16_t)vmulq_f32(v116, v101);
                v87[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL), vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8)).u32[0];
              }
            }
          }
          while ((_DWORD)v86--);
        }
LABEL_80:
        _VF = __OFSUB__(v59--, 1);
        if ((v59 < 0) ^ _VF | (v59 == 0))
          goto LABEL_82;
      }
      v116.i64[0] = *(_QWORD *)v74;
      v116.i32[2] = v74[2];
      if (sub_1B21FF610((uint64_t)a2, (int *)&v116, &v117, v63))
        goto LABEL_68;
      v77 = a2[v116.i32[1]];
      v78 = vsubq_f32(v77, a2[v116.i32[0]]);
      v79 = (int8x8_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
      v78.i32[3] = 0;
      v80 = vsubq_f32(a2[v116.i32[2]], v77);
      v81 = (int8x8_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
      v80.i32[3] = 0;
      *(int8x8_t *)v82.f32 = vext_s8(*(int8x8_t *)v78.f32, v79, 4uLL);
      v82.i64[1] = v78.i64[0];
      *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v80.f32, v81, 4uLL);
      v83.i64[1] = v80.i64[0];
      v84 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v82, v80)), v78, v83);
      v78.i64[0] = vextq_s8(v84, v84, 4uLL).u64[0];
      v78.i64[1] = v84.u32[0];
      v85 = (int8x16_t)vmulq_f32(v78, v78);
      if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8)).f32[0]) < v64)
      {
LABEL_68:
        sub_1B21FF978(a1, *(int **)(v73 + 8 * (int)v74[3]), v66);
        v71 = *(_DWORD *)(a1 + 4);
        v72 = v71;
      }
      goto LABEL_69;
    }
LABEL_82:
    v4 = 1;
  }
  if (v121)
    v104 = v122 == 0;
  else
    v104 = 1;
  if (!v104)
    sub_1B21FF5FC(v121);
  if (v10)
    sub_1B21FF5FC(v10);
  return v4;
}

uint64_t sub_1B2200A24(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int *v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;

  result = sub_1B22002D0(a1, a2, a3, a6);
  if (!(_DWORD)result)
    return result;
  v39 = a5;
  v10 = *(_DWORD *)(a1 + 4);
  if (v10 < 1)
  {
    v14 = 0;
    v12 = 0;
    goto LABEL_26;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11))
      goto LABEL_23;
    v15 = 0;
    v16 = v14;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
      if (v13 == (_DWORD)v16)
      {
        v18 = v16 ? 2 * v13 : 1;
        if (v13 < v18)
        {
          if (v18)
            v19 = sub_1B21FF5F0(4 * v18, 16);
          else
            v19 = 0;
          if (v16 < 1)
          {
            if (!v12)
            {
LABEL_20:
              v13 = v18;
              v12 = v19;
              goto LABEL_21;
            }
          }
          else
          {
            v20 = v13;
            v21 = (_DWORD *)v19;
            v22 = (int *)v12;
            do
            {
              v23 = *v22++;
              *v21++ = v23;
              --v20;
            }
            while (v20);
          }
          sub_1B21FF5FC(v12);
          goto LABEL_20;
        }
      }
LABEL_21:
      *(_DWORD *)(v12 + 4 * v16++) = *(_DWORD *)(v17 + 4 * v15++);
    }
    while (v15 != 3);
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(v24 + 8 * v11);
    *(_QWORD *)(v24 + 8 * *(int *)(v25 + 24)) = 0;
    sub_1B21FF5FC(v25);
    v10 = *(_DWORD *)(a1 + 4);
    v14 = v16;
LABEL_23:
    ++v11;
  }
  while (v11 < v10);
LABEL_26:
  *v39 = v14 / 3;
  v26 = *(_DWORD *)(a4 + 4);
  if (v26 < v14)
  {
    if (*(_DWORD *)(a4 + 8) < v14)
    {
      if (v14)
        v27 = sub_1B21FF5F0(4 * v14, 16);
      else
        v27 = 0;
      LODWORD(v28) = *(_DWORD *)(a4 + 4);
      v29 = *(_QWORD *)(a4 + 16);
      if ((int)v28 >= 1)
      {
        v28 = v28;
        v30 = (_DWORD *)v27;
        v31 = *(int **)(a4 + 16);
        do
        {
          v32 = *v31++;
          *v30++ = v32;
          --v28;
        }
        while (v28);
        goto LABEL_36;
      }
      if (v29)
      {
LABEL_36:
        if (*(_BYTE *)(a4 + 24))
          sub_1B21FF5FC(v29);
      }
      *(_BYTE *)(a4 + 24) = 1;
      *(_QWORD *)(a4 + 16) = v27;
      *(_DWORD *)(a4 + 8) = v14;
    }
    bzero((void *)(*(_QWORD *)(a4 + 16) + 4 * v26), 4 * (v14 + ~v26) + 4);
  }
  *(_DWORD *)(a4 + 4) = v14;
  if (v14 >= 1)
  {
    v33 = *(_DWORD **)(a4 + 16);
    v34 = v14;
    v35 = (int *)v12;
    do
    {
      v36 = *v35++;
      *v33++ = v36;
      --v34;
    }
    while (v34);
  }
  v37 = *(int *)(a1 + 4);
  if ((v37 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      v38 = *(_QWORD *)(a1 + 16);
      if (v38 && *(_BYTE *)(a1 + 24))
        sub_1B21FF5FC(v38);
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v37++) = 0;
    while ((_DWORD)v37);
  }
  *(_DWORD *)(a1 + 4) = 0;
  if (v12)
    sub_1B21FF5FC(v12);
  return 1;
}

BOOL sub_1B2200CC4(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, int a5)
{
  int v7;
  int v8;
  int v9;
  int v11;

  v7 = a2;
  v11 = 0;
  v8 = sub_1B2200A24(a1, a3, a2, a4 + 24, &v11, a5);
  if (v8)
  {
    v9 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = a3;
    *(_DWORD *)a4 = v7;
    *(_DWORD *)(a4 + 4) = 3 * v9;
  }
  return v8 != 0;
}

uint64_t sub_1B2200D34(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v9;
  unsigned int v10;
  unsigned int v11;
  float32x4_t *v12;
  uint64_t v13;
  int v14;
  float32x2_t v15;
  float v16;
  float32x2_t *v17;
  unsigned int v18;
  const void *v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  int *v52;
  int v53;
  char *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  unsigned int v61;
  float32x2_t v62;
  float v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *__src;
  char v69;

  v69 = 1;
  __src = 0;
  HIDWORD(v9) = 0;
  v67 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  if ((v11 & 0x80000000) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = (float32x4_t *)sub_1B21FF5F0(16 * v11, 16);
    v10 = *(_DWORD *)(a2 + 4);
  }
  v61 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 20);
  if (!sub_1B2201294(a1, v10, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), &v61, v12->f32, (uint64_t)&v62, v9, a5, a6))
    goto LABEL_14;
  v13 = v61;
  if (v61)
  {
    v14 = 0;
    v15 = v62;
    v16 = v63;
    do
    {
      v17 = (float32x2_t *)&v12[v14];
      *v17 = vmul_f32(*v17, v15);
      v17[1].f32[0] = v17[1].f32[0] * v16;
      ++v14;
    }
    while ((_DWORD)v13 != v14);
  }
  if (!sub_1B2200CC4(a1, v13, v12, (uint64_t)&v64, *(_DWORD *)(a2 + 24)))
  {
LABEL_14:
    v20 = 1;
    if (!v12)
      goto LABEL_16;
LABEL_15:
    sub_1B21FF5FC((uint64_t)v12);
    goto LABEL_16;
  }
  v18 = v64;
  if ((int)v64 < 1)
    v19 = 0;
  else
    v19 = (const void *)sub_1B21FF5F0(16 * v64, 16);
  sub_1B22018D8(a1, v66, v18, (uint64_t)v19, &v61, (uint64_t)__src, SHIDWORD(v64));
  if ((*(_BYTE *)a2 & 1) == 0)
  {
    *(_BYTE *)a3 = 1;
    v22 = v61;
    *(_DWORD *)(a3 + 4) = v61;
    v23 = *(_DWORD *)(a3 + 12);
    if (v23 < (int)v22 && *(_DWORD *)(a3 + 16) < (int)v22)
    {
      if ((_DWORD)v22)
      {
        v24 = sub_1B21FF5F0(16 * (int)v22, 16);
        v23 = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v24 = 0;
      }
      if (v23 >= 1)
      {
        v28 = 0;
        v29 = 16 * v23;
        do
        {
          *(_OWORD *)(v24 + v28) = *(_OWORD *)(*(_QWORD *)(a3 + 24) + v28);
          v28 += 16;
        }
        while (v29 != v28);
      }
      v30 = *(_QWORD *)(a3 + 24);
      if (v30)
        v31 = *(_BYTE *)(a3 + 32) == 0;
      else
        v31 = 1;
      if (!v31)
        sub_1B21FF5FC(v30);
      *(_BYTE *)(a3 + 32) = 1;
      *(_QWORD *)(a3 + 24) = v24;
      *(_DWORD *)(a3 + 16) = v22;
    }
    *(_DWORD *)(a3 + 12) = v22;
    v32 = v65;
    v33 = HIDWORD(v64) + v65;
    *(_DWORD *)(a3 + 40) = v65;
    *(_DWORD *)(a3 + 44) = v33;
    v34 = *(_DWORD *)(a3 + 52);
    if (v34 >= v33)
      goto LABEL_73;
    if (*(_DWORD *)(a3 + 56) >= v33)
    {
LABEL_72:
      bzero((void *)(*(_QWORD *)(a3 + 64) + 4 * v34), 4 * (v33 + ~v34) + 4);
LABEL_73:
      *(_DWORD *)(a3 + 52) = v33;
      memcpy(*(void **)(a3 + 24), v19, 16 * v22);
      v54 = (char *)__src;
      if (v32)
      {
        v55 = (_DWORD *)(*(_QWORD *)(a3 + 64) + 8);
        v56 = __src;
        do
        {
          *(v55 - 2) = 3;
          if ((*(_BYTE *)a2 & 2) != 0)
          {
            *(v55 - 1) = v56[2];
            *v55 = v56[1];
            v57 = v56;
          }
          else
          {
            *(v55 - 1) = *v56;
            *v55 = v56[1];
            v57 = v56 + 2;
          }
          v55[1] = *v57;
          v56 += 3;
          v55 += 4;
          --v32;
        }
        while (v32);
      }
      goto LABEL_90;
    }
    if (v33)
      v35 = sub_1B21FF5F0(4 * v33, 16);
    else
      v35 = 0;
    LODWORD(v36) = *(_DWORD *)(a3 + 52);
    v46 = *(_QWORD *)(a3 + 64);
    if ((int)v36 < 1)
    {
      if (!v46)
      {
LABEL_71:
        *(_BYTE *)(a3 + 72) = 1;
        *(_QWORD *)(a3 + 64) = v35;
        *(_DWORD *)(a3 + 56) = v33;
        goto LABEL_72;
      }
    }
    else
    {
      v36 = v36;
      v47 = (_DWORD *)v35;
      v48 = *(int **)(a3 + 64);
      do
      {
        v49 = *v48++;
        *v47++ = v49;
        --v36;
      }
      while (v36);
    }
    if (*(_BYTE *)(a3 + 72))
      sub_1B21FF5FC(v46);
    goto LABEL_71;
  }
  *(_BYTE *)a3 = 0;
  v25 = v61;
  *(_DWORD *)(a3 + 4) = v61;
  v26 = *(_DWORD *)(a3 + 12);
  if (v26 < (int)v25 && *(_DWORD *)(a3 + 16) < (int)v25)
  {
    if ((_DWORD)v25)
    {
      v27 = sub_1B21FF5F0(16 * (int)v25, 16);
      v26 = *(_DWORD *)(a3 + 12);
    }
    else
    {
      v27 = 0;
    }
    if (v26 >= 1)
    {
      v37 = 0;
      v38 = 16 * v26;
      do
      {
        *(_OWORD *)(v27 + v37) = *(_OWORD *)(*(_QWORD *)(a3 + 24) + v37);
        v37 += 16;
      }
      while (v38 != v37);
    }
    v39 = *(_QWORD *)(a3 + 24);
    if (v39)
      v40 = *(_BYTE *)(a3 + 32) == 0;
    else
      v40 = 1;
    if (!v40)
      sub_1B21FF5FC(v39);
    *(_BYTE *)(a3 + 32) = 1;
    *(_QWORD *)(a3 + 24) = v27;
    *(_DWORD *)(a3 + 16) = v25;
  }
  *(_DWORD *)(a3 + 12) = v25;
  v42 = HIDWORD(v64);
  v41 = v65;
  *(_DWORD *)(a3 + 40) = v65;
  *(_DWORD *)(a3 + 44) = v42;
  v43 = *(_DWORD *)(a3 + 52);
  if (v43 < (int)v42)
  {
    if (*(_DWORD *)(a3 + 56) >= (int)v42)
    {
LABEL_84:
      bzero((void *)(*(_QWORD *)(a3 + 64) + 4 * v43), 4 * (v42 + ~v43) + 4);
      goto LABEL_85;
    }
    if ((_DWORD)v42)
      v44 = sub_1B21FF5F0(4 * (int)v42, 16);
    else
      v44 = 0;
    LODWORD(v45) = *(_DWORD *)(a3 + 52);
    v50 = *(_QWORD *)(a3 + 64);
    if ((int)v45 < 1)
    {
      if (!v50)
      {
LABEL_83:
        *(_BYTE *)(a3 + 72) = 1;
        *(_QWORD *)(a3 + 64) = v44;
        *(_DWORD *)(a3 + 56) = v42;
        goto LABEL_84;
      }
    }
    else
    {
      v45 = v45;
      v51 = (_DWORD *)v44;
      v52 = *(int **)(a3 + 64);
      do
      {
        v53 = *v52++;
        *v51++ = v53;
        --v45;
      }
      while (v45);
    }
    if (*(_BYTE *)(a3 + 72))
      sub_1B21FF5FC(v50);
    goto LABEL_83;
  }
LABEL_85:
  *(_DWORD *)(a3 + 52) = v42;
  memcpy(*(void **)(a3 + 24), v19, 16 * v25);
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    v54 = (char *)__src;
    if (v41)
    {
      v58 = 0;
      v59 = *(_QWORD *)(a3 + 64);
      do
      {
        v60 = (_DWORD *)(v59 + v58);
        *v60 = *(_DWORD *)&v54[v58 + 8];
        v60[1] = *(_DWORD *)&v54[v58 + 4];
        v60[2] = *(_DWORD *)&v54[v58];
        v58 += 12;
        --v41;
      }
      while (v41);
    }
  }
  else
  {
    v54 = (char *)__src;
    memcpy(*(void **)(a3 + 64), __src, 4 * v42);
  }
LABEL_90:
  if ((_DWORD)v67)
  {
    if (v54 && v69)
      sub_1B21FF5FC((uint64_t)v54);
    v69 = 1;
    __src = 0;
  }
  if (v19)
    sub_1B21FF5FC((uint64_t)v19);
  v20 = 0;
  if (v12)
    goto LABEL_15;
LABEL_16:
  if (__src && v69)
    sub_1B21FF5FC((uint64_t)__src);
  return v20;
}

BOOL sub_1B2201294(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _DWORD *a5, float *a6, uint64_t a7, double a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v24;
  uint64_t i;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t *v36;
  float v37;
  float32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  int32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  float *v50;
  uint64_t v51;
  int v52;
  float *v53;
  _DWORD *v54;
  float32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  unint64_t j;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v86;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unsigned int v102;
  double v103;
  _BYTE v104[12];
  _BYTE v105[12];
  uint64_t v106;

  v10 = a2;
  v106 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return v10 != 0;
  v17 = *(int *)(a1 + 36);
  v103 = a8;
  if ((v17 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
    {
      v18 = *(_QWORD *)(a1 + 48);
      if (v18 && *(_BYTE *)(a1 + 56))
        sub_1B21FF5FC(v18);
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }
    bzero((void *)(*(_QWORD *)(a1 + 48) + 4 * v17), 4 * ~(_DWORD)v17 + 4);
    a8 = v103;
  }
  v19 = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *a5 = 0;
  __asm { FMOV            V6.2S, #1.0 }
  *(float32x2_t *)a7 = _D6;
  *(_DWORD *)(a7 + 8) = 1065353216;
  *(_QWORD *)v105 = 0x7F7FFFFF7F7FFFFFLL;
  *(_DWORD *)&v105[8] = 2139095039;
  *(_DWORD *)&v104[8] = -8388609;
  *(_QWORD *)v104 = 0xFF7FFFFFFF7FFFFFLL;
  v24 = a3;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v26 = *(float *)(v24 + i);
      if (v26 < *(float *)&v105[i])
        *(float *)&v105[i] = v26;
      if (v26 > *(float *)&v104[i])
        *(float *)&v104[i] = v26;
    }
    v24 += a4;
    ++v19;
  }
  while (v19 != v10);
  v27 = *(float *)v104 - *(float *)v105;
  *(float *)&a10 = *(float *)v105 + (float)((float)(*(float *)v104 - *(float *)v105) * 0.5);
  v28 = vsub_f32(*(float32x2_t *)&v104[4], *(float32x2_t *)&v105[4]);
  v29 = vmla_f32(*(float32x2_t *)&v105[4], (float32x2_t)0x3F0000003F000000, v28);
  if (v10 >= 3 && v27 >= 0.000001 && v28.f32[0] >= 0.000001 && v28.f32[1] >= 0.000001)
  {
    v30 = 0;
    *(float *)a7 = v27;
    *(float32x2_t *)(a7 + 4) = v28;
    v31 = 1.0 / v27;
    v32 = vdiv_f32(_D6, v28);
    *(float *)&a10 = *(float *)&a10 * (float)(1.0 / v27);
    v33 = vmul_f32(v29, v32);
    v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
    v36 = (float32x2_t *)(a6 + 1);
    v102 = v10;
    while (1)
    {
      v37 = *(float *)a3 * v31;
      v38 = vmul_f32(*(float32x2_t *)(a3 + 4), v32);
      v39 = *a5;
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = v36;
        while (1)
        {
          if (vabds_f32(v41[-1].f32[1], v37) < *(float *)&a8)
          {
            v42 = vcgt_f32(v35, vabd_f32(*v41, v38));
            if ((v42.i8[0] & 1) != 0 && (v42.i8[4] & 1) != 0)
              break;
          }
          ++v40;
          v41 += 2;
          if (v39 == v40)
          {
            LODWORD(v40) = *a5;
            goto LABEL_33;
          }
        }
        v43.f32[0] = *(float *)a3 * v31;
        v43.i32[1] = v41[-1].i32[1];
        v44 = vsub_f32(v43, v34);
        v45 = vsub_f32(v38, v33);
        v46 = (int32x2_t)vmul_f32(v45, v45);
        v47 = vsub_f32(*v41, v33);
        v48 = (int32x2_t)vmul_f32(v47, v47);
        v49 = (int32x2_t)vadd_f32(vmla_f32((float32x2_t)vzip1_s32(v46, v48), v44, v44), (float32x2_t)vzip2_s32(v46, v48));
        if ((vcgt_f32((float32x2_t)v49, (float32x2_t)vdup_lane_s32(v49, 1)).u8[0] & 1) != 0)
        {
          v41[-1].f32[1] = v37;
          *v41 = v38;
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      if ((_DWORD)v40 == (_DWORD)v39)
      {
LABEL_33:
        v50 = &a6[4 * v39];
        *v50 = v37;
        *(float32x2_t *)(v50 + 1) = v38;
        *a5 = v39 + 1;
      }
      LODWORD(v51) = *(_DWORD *)(a1 + 36);
      if ((_DWORD)v51 != *(_DWORD *)(a1 + 40))
        goto LABEL_50;
      v52 = (_DWORD)v51 ? 2 * v51 : 1;
      if ((int)v51 >= v52)
        goto LABEL_50;
      v53 = a6;
      v54 = a5;
      v55 = v36;
      if (v52)
      {
        v56 = sub_1B21FF5F0(4 * v52, 16);
        LODWORD(v51) = *(_DWORD *)(a1 + 36);
      }
      else
      {
        v56 = 0;
      }
      v57 = *(_QWORD *)(a1 + 48);
      if ((int)v51 >= 1)
        break;
      if (v57)
        goto LABEL_47;
LABEL_49:
      *(_BYTE *)(a1 + 56) = 1;
      *(_QWORD *)(a1 + 48) = v56;
      *(_DWORD *)(a1 + 40) = v52;
      LODWORD(v51) = *(_DWORD *)(a1 + 36);
      LODWORD(a8) = LODWORD(v103);
      v36 = v55;
      a5 = v54;
      a6 = v53;
      v10 = v102;
LABEL_50:
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * (int)v51) = v40;
      a3 += a4;
      ++*(_DWORD *)(a1 + 36);
      if (++v30 == v10)
      {
        *(_DWORD *)&v105[8] = 2139095039;
        *(_QWORD *)v105 = 0x7F7FFFFF7F7FFFFFLL;
        *(_DWORD *)&v104[8] = -8388609;
        *(_QWORD *)v104 = 0xFF7FFFFFFF7FFFFFLL;
        v61 = *a5;
        if ((_DWORD)v61)
        {
          v62 = 0;
          v63 = a6;
          do
          {
            for (j = 0; j != 12; j += 4)
            {
              v65 = v63[j / 4];
              if (v65 < *(float *)&v105[j])
                *(float *)&v105[j] = v65;
              if (v65 > *(float *)&v104[j])
                *(float *)&v104[j] = v65;
            }
            ++v62;
            v63 += 4;
          }
          while (v62 != v61);
          v66 = *(float *)&v104[4];
          v67 = *(float *)v104;
          v68 = *(float *)&v105[4];
          v69 = *(float *)v105;
          v70 = *(float *)&v104[8];
          v71 = *(float *)&v105[8];
        }
        else
        {
          v70 = -3.4028e38;
          v71 = 3.4028e38;
          v68 = 3.4028e38;
          v66 = -3.4028e38;
          v69 = 3.4028e38;
          v67 = -3.4028e38;
        }
        v79 = v67 - v69;
        v80 = v66 - v68;
        v81 = v70 - v71;
        if (v61 < 3 || v79 < 0.000001 || v80 < 0.000001 || v81 < 0.000001)
        {
          v82 = v69 + (float)(v79 * 0.5);
          v83 = v68 + (float)(v80 * 0.5);
          v84 = v71 + (float)(v81 * 0.5);
          if (v79 >= 3.4028e38 || v79 < 0.000001)
            v86 = 3.4028e38;
          else
            v86 = v79;
          if (v80 < v86 && v80 >= 0.000001)
            v86 = v80;
          if (v81 < v86 && v81 >= 0.000001)
            v86 = v81;
          if (v86 == 3.4028e38)
          {
            v79 = 0.01;
            v80 = 0.01;
            v89 = 0.01;
          }
          else
          {
            v89 = v86 * 0.05;
            if (v79 < 0.000001)
              v79 = v89;
            if (v80 < 0.000001)
              v80 = v89;
            if (v81 >= 0.000001)
              v89 = v81;
          }
          v96 = v82 - v79;
          v97 = v79 + v82;
          v98 = v83 - v80;
          *a6 = v96;
          a6[1] = v83 - v80;
          v99 = v80 + v83;
          v100 = v84 - v89;
          a6[2] = v84 - v89;
          v95 = v89 + v84;
          a6[4] = v97;
          a6[5] = v98;
          a6[6] = v100;
          a6[8] = v97;
          a6[9] = v99;
          a6[10] = v100;
          a6[12] = v96;
          a6[13] = v99;
          a6[14] = v100;
          a6[16] = v96;
          a6[17] = v98;
          a6[18] = v95;
          a6[20] = v97;
          a6[21] = v98;
          a6[22] = v95;
          a6[24] = v97;
          a6[25] = v99;
          a6[26] = v95;
          a6[28] = v96;
          a6[29] = v99;
          goto LABEL_118;
        }
        return v10 != 0;
      }
    }
    v51 = v51;
    v58 = (_DWORD *)v56;
    v59 = *(int **)(a1 + 48);
    do
    {
      v60 = *v59++;
      *v58++ = v60;
      --v51;
    }
    while (v51);
LABEL_47:
    if (*(_BYTE *)(a1 + 56))
      sub_1B21FF5FC(v57);
    goto LABEL_49;
  }
  if (v27 >= 3.4028e38 || v27 <= 0.000001)
    v73 = 3.4028e38;
  else
    v73 = *(float *)v104 - *(float *)v105;
  if (v28.f32[0] < v73 && v28.f32[0] > 0.000001)
    v73 = v28.f32[0];
  if (v28.f32[1] < v73 && v28.f32[1] > 0.000001)
    v73 = v28.f32[1];
  if (v73 == 3.4028e38)
  {
    v76 = 0.01;
    v77 = 0.01;
    v78 = 0.01;
  }
  else
  {
    v76 = v73 * 0.05;
    if (v27 >= 0.000001)
      v78 = *(float *)v104 - *(float *)v105;
    else
      v78 = v76;
    if (v28.f32[0] >= 0.000001)
      v77 = v28.f32[0];
    else
      v77 = v76;
    if (v28.f32[1] >= 0.000001)
      v76 = v28.f32[1];
  }
  v90 = *(float *)&a10 - v78;
  v91 = v78 + *(float *)&a10;
  v92 = v29.f32[0] - v77;
  *a6 = v90;
  a6[1] = v29.f32[0] - v77;
  v93 = v77 + v29.f32[0];
  v94 = v29.f32[1] - v76;
  a6[2] = v29.f32[1] - v76;
  v95 = v76 + v29.f32[1];
  a6[4] = v91;
  a6[5] = v92;
  a6[6] = v94;
  a6[8] = v91;
  a6[9] = v93;
  a6[10] = v94;
  a6[12] = v90;
  a6[13] = v93;
  a6[14] = v94;
  a6[16] = v90;
  a6[17] = v92;
  a6[18] = v95;
  a6[20] = v91;
  a6[21] = v92;
  a6[22] = v95;
  a6[24] = v91;
  a6[25] = v93;
  a6[26] = v95;
  a6[28] = v90;
  a6[29] = v93;
LABEL_118:
  a6[30] = v95;
  *a5 = 8;
  return v10 != 0;
}

void sub_1B22018D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7)
{
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t i;

  v14 = *(unsigned int *)(a1 + 36);
  if ((int)v14 < 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = 4 * v14;
    v16 = (void *)sub_1B21FF5F0(4 * v14, 16);
    bzero(v16, v15);
    if (*(int *)(a1 + 36) >= 1)
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 48);
      do
      {
        *((_DWORD *)v16 + v17) = *(_DWORD *)(v18 + 4 * v17);
        ++v17;
      }
      while (v17 < *(int *)(a1 + 36));
    }
  }
  if ((int)a3 < 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = (void *)sub_1B21FF5F0(4 * a3, 16);
    bzero(v19, 4 * a3);
  }
  bzero(v19, 4 * a3);
  *a5 = 0;
  if (a7 < 1)
  {
    if (!v19)
      goto LABEL_25;
  }
  else
  {
    v20 = 0;
    do
    {
      v21 = *(int *)(a6 + 4 * v20);
      v22 = *((_DWORD *)v19 + v21);
      if (v22)
      {
        *(_DWORD *)(a6 + 4 * v20) = v22 - 1;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v20) = *a5;
        v23 = (_DWORD *)(a2 + 16 * v21);
        v24 = *a5;
        v25 = (_DWORD *)(a4 + 16 * v24);
        *v25 = *v23;
        v25[1] = v23[1];
        v25[2] = v23[2];
        v26 = *(_DWORD *)(a1 + 36);
        if (v26 >= 1)
        {
          for (i = 0; i < v26; ++i)
          {
            if (*((_DWORD *)v16 + i) == (_DWORD)v21)
            {
              *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * i) = *a5;
              v26 = *(_DWORD *)(a1 + 36);
            }
          }
          LODWORD(v24) = *a5;
        }
        *a5 = v24 + 1;
        *((_DWORD *)v19 + v21) = v24 + 1;
      }
      ++v20;
    }
    while (v20 != a7);
  }
  sub_1B21FF5FC((uint64_t)v19);
LABEL_25:
  if (v16)
    sub_1B21FF5FC((uint64_t)v16);
}

uint64_t sub_1B2201AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  if (*(_DWORD *)(a2 + 12))
  {
    *(_DWORD *)(a2 + 4) = 0;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
      v4 = *(_BYTE *)(a2 + 32) == 0;
    else
      v4 = 1;
    if (!v4)
      sub_1B21FF5FC(v3);
    *(_BYTE *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  if (*(_DWORD *)(a2 + 52))
  {
    *(_DWORD *)(a2 + 44) = 0;
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
      v6 = *(_BYTE *)(a2 + 72) == 0;
    else
      v6 = 1;
    if (!v6)
      sub_1B21FF5FC(v5);
    *(_BYTE *)(a2 + 72) = 1;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    *(_DWORD *)(a2 + 56) = 0;
  }
  return 0;
}

unint64_t sub_1B2201B30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  unint64_t result;

  v2 = a1[1];
  v3 = v2 >= 0;
  if (v2 >= 0)
    v4 = *a1;
  else
    v4 = -*a1;
  v5 = v2 < 0;
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = -a2;
  if (a2 >= 0)
    v7 = v5;
  else
    v7 = v3;
  result = sub_1B2201BA4(v4, v6);
  if (v7)
    return -(uint64_t)result;
  return result;
}

unint64_t sub_1B2201BA4(uint64_t a1, uint64_t a2)
{
  return a2 * (unint64_t)a1
       + (((HIDWORD(a2) * a1) + (unint64_t)(a2 * HIDWORD(a1))) << 32);
}

unint64_t sub_1B2201BE4(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1 >= 0;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  if (a2 >= 0)
    v2 = a1 < 0;
  v5 = v4 * (unint64_t)v3
     + (((HIDWORD(v4) * v3) + (unint64_t)(v4 * HIDWORD(v3))) << 32);
  if (v2)
    return -(uint64_t)v5;
  else
    return v5;
}

uint64_t sub_1B2201C58(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a2 + 16);
  result = (v3 - v4);
  if (v3 == v4)
  {
    if (v3)
    {
      v7 = sub_1B2201BA4(*(_QWORD *)a1, *(_QWORD *)(a2 + 8));
      v9 = v8;
      v10 = sub_1B2201BA4(*(_QWORD *)(a1 + 8), *(_QWORD *)a2);
      if (v7 >= v10)
        v12 = v7 > v10;
      else
        v12 = -1;
      if (v9 <= v11)
        v13 = v12;
      else
        v13 = 1;
      if (v9 >= v11)
        v14 = v13;
      else
        v14 = -1;
      return (v14 * v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B2201CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(int *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 32);
  if ((_DWORD)v2 != v3)
    return (v2 - v3);
  if (!(_DWORD)v2)
    return 0;
  if (*(_BYTE *)(a1 + 36))
    return -sub_1B2201DEC(a2, *(_QWORD *)a1 * v2);
  sub_1B2201EA8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), &v14, &v12);
  sub_1B2201EA8(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), &v10, &v8);
  if (v13 < v9)
    goto LABEL_8;
  if (v13 > v9)
  {
LABEL_10:
    v7 = 1;
    return (*(_DWORD *)(a1 + 32) * v7);
  }
  if (v12 >= v8)
  {
    if (v12 > v8)
      goto LABEL_10;
    if (v15 >= v11)
    {
      if (v15 <= v11)
      {
        v7 = v14 > v10;
        if (v14 < v10)
          v7 = -1;
        return (*(_DWORD *)(a1 + 32) * v7);
      }
      goto LABEL_10;
    }
  }
LABEL_8:
  v7 = -1;
  return (*(_DWORD *)(a1 + 32) * v7);
}

uint64_t sub_1B2201DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  if (*(_BYTE *)(a1 + 36))
  {
    v3 = *(_QWORD *)a1 * *(int *)(a1 + 32);
    v4 = v3 <= a2;
    if (v3 >= a2)
      v5 = 0;
    else
      v5 = -1;
    if (v4)
      return v5;
    else
      return 1;
  }
  else
  {
    if (a2 < 1)
    {
      v6 = *(unsigned int *)(a1 + 32);
      if ((a2 & 0x8000000000000000) == 0)
        return v6;
      if ((v6 & 0x80000000) == 0)
        return 1;
      a2 = -a2;
    }
    else
    {
      LODWORD(v6) = *(_DWORD *)(a1 + 32);
      if ((int)v6 < 1)
        return 0xFFFFFFFFLL;
    }
    v7 = sub_1B2201B30((uint64_t *)(a1 + 16), a2);
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v9 > v8)
      {
        v10 = 1;
      }
      else
      {
        v10 = *(_QWORD *)a1 > v7;
        if (*(_QWORD *)a1 < v7)
          v10 = -1;
      }
    }
    else
    {
      v10 = -1;
    }
    return (v6 * v10);
  }
}

unint64_t sub_1B2201EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  BOOL v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL8 v30;

  v12 = sub_1B2201BA4(a1, a3);
  v14 = v13;
  v15 = sub_1B2201BA4(a1, a4);
  v17 = v16;
  v18 = sub_1B2201BA4(a2, a3);
  v20 = v19;
  result = sub_1B2201BA4(a2, a4);
  v23 = result + v17;
  v24 = __CFADD__(result, v17);
  v25 = __CFADD__(__CFADD__(v18, v15), v23);
  v26 = __CFADD__(v18, v15) + v23;
  v25 |= __CFADD__(v20, v26);
  v26 += v20;
  v27 = v24 + v25 + v22;
  v28 = v26 + 1;
  v29 = __CFADD__(v18 + v15, v14);
  if (!__CFADD__(v18 + v15, v14))
    v28 = v26;
  v30 = v26 == -1 && v29;
  *a5 = v12;
  a5[1] = v18 + v15 + v14;
  *a6 = v28;
  a6[1] = v27 + v30;
  return result;
}

uint64_t sub_1B2201F74(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  v6 = (uint64_t)(a1 + 16);
  sub_1B2201FF8((uint64_t)(a1 + 16));
  v8 = v7;
  sub_1B2201FF8(v6);
  v9 = a1[40];
  *(_DWORD *)(v8 + 40) = v9;
  *(_DWORD *)(v10 + 40) = v9;
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  v11 = a1[44];
  v12 = a1[45];
  a1[44] = v11 + 1;
  if (v11 >= v12)
    a1[45] = v11 + 1;
  return v8;
}

double sub_1B2201FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v3 = sub_1B21FF5F0(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      v2 = sub_1B21FF5F0(48 * v4, 16);
      *(_QWORD *)v3 = v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = (_QWORD *)(v2 + 48);
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B2244C80)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 6) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 6;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 12;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v2;
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  return result;
}

uint64_t sub_1B220211C(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t ***a4, uint64_t **a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t **v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  BOOL v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t result;
  uint64_t v68;

  v5 = a2[3];
  v6 = a3[2];
  if (*(_DWORD *)(v5 + 104) == *((_DWORD *)v6 + 26) && *(_DWORD *)(v5 + 108) == *((_DWORD *)v6 + 27))
  {
    v7 = (uint64_t *)v6[1];
    if (v7 == v6)
    {
      *a4 = (uint64_t **)v5;
      v68 = v6[2];
      result = 0;
      if (v68)
        v6 = *(uint64_t **)(v68 + 24);
      goto LABEL_78;
    }
    v8 = (uint64_t *)*v6;
    *v7 = *v6;
    v8[1] = (uint64_t)v7;
    if (v6 == *a3)
    {
      v9 = *((_DWORD *)v8 + 26);
      v10 = *((_DWORD *)v7 + 26);
      v11 = v8;
      if (v9 >= v10)
      {
        if (v9 != v10 || (v11 = v8, *((_DWORD *)v8 + 27) >= *((_DWORD *)v7 + 27)))
          v11 = v7;
      }
      *a3 = v11;
    }
    if (v6 == a3[1])
    {
      v12 = *((_DWORD *)v8 + 26);
      v13 = *((_DWORD *)v7 + 26);
      if (v12 <= v13 && (v12 != v13 || *((_DWORD *)v8 + 27) <= *((_DWORD *)v7 + 27)))
        v8 = v7;
      a3[1] = v8;
    }
  }
  v14 = 0;
  v15 = 0;
  v17 = *a2;
  v16 = a2[1];
  v19 = *a3;
  v18 = a3[1];
  v20 = 1;
  v21 = 1;
  v22 = v18;
  v23 = v16;
  do
  {
    v24 = (uint64_t **)v15;
    v6 = v14;
    v25 = v20;
    v26 = *(_DWORD *)(v23 + 104);
    v27 = (*((_DWORD *)v22 + 26) - v26) * v21;
    if (v27 < 1)
    {
      if (v27 < 0)
      {
        v14 = v22;
        while (1)
        {
          v15 = v23;
          v52 = *(_DWORD *)(v23 + 108);
          v53 = v27;
          while (1)
          {
            v54 = *((_DWORD *)v14 + 27);
            v55 = v54 - v52;
            v56 = v14 + 1;
            if ((v25 & 1) != 0)
              v56 = v14;
            v57 = (uint64_t *)*v56;
            if (v57 == v14)
              break;
            v58 = *((_DWORD *)v57 + 27) - v54;
            if (v58 < 0)
              break;
            v59 = *((_DWORD *)v57 + 26);
            v60 = *((_DWORD *)v14 + 26);
            if (v59 != v60)
            {
              v61 = (v59 - v60) * v21;
              if ((v61 & 0x80000000) == 0 || v58 * v53 > v61 * v55)
                break;
            }
            v53 = (v59 - *(_DWORD *)(v15 + 104)) * v21;
            v14 = v57;
          }
          v62 = (uint64_t *)(v15 + 8);
          if ((v25 & 1) != 0)
            v62 = (uint64_t *)v15;
          v23 = *v62;
          if (v23 == v15)
            break;
          v63 = *(_DWORD *)(v23 + 104);
          v27 = (*((_DWORD *)v14 + 26) - v63) * v21;
          if ((v27 & 0x80000000) == 0)
            break;
          v64 = *(_DWORD *)(v23 + 108) - v52;
          if (v64 < 1)
            break;
          v65 = *(_DWORD *)(v15 + 104);
          if (v63 != v65)
          {
            v66 = (v63 - v65) * v21;
            if ((v66 & 0x80000000) == 0 || v64 * v53 >= v66 * v55)
              break;
          }
        }
      }
      else
      {
        v45 = *(_DWORD *)(v23 + 108);
        v46 = v23;
        do
        {
          v15 = v46;
          v47 = (uint64_t *)(v46 + 8);
          if ((v25 & 1) == 0)
            v47 = (uint64_t *)v15;
          v46 = *v47;
          if (v46 == v23)
            break;
          if (*(_DWORD *)(v46 + 104) != v26)
            break;
          v48 = *(_DWORD *)(v46 + 108) <= v45;
          v45 = *(_DWORD *)(v46 + 108);
        }
        while (v48);
        v49 = *((_DWORD *)v22 + 27);
        v50 = v22;
        do
        {
          v14 = v50;
          v51 = v50 + 1;
          if ((v25 & 1) != 0)
            v51 = v14;
          v50 = (uint64_t *)*v51;
          if (v50 == v22)
            break;
          if (*((_DWORD *)v50 + 26) != v26)
            break;
          v48 = *((_DWORD *)v50 + 27) < v49;
          v49 = *((_DWORD *)v50 + 27);
        }
        while (!v48);
      }
    }
    else
    {
LABEL_18:
      v28 = *(_DWORD *)(v23 + 108);
      v29 = (uint64_t *)(v23 + 8);
      if ((v25 & 1) == 0)
        v29 = (uint64_t *)v23;
      v30 = *v29;
      v31 = v22;
      while (1)
      {
        v32 = v27;
        v22 = v31;
        v33 = *((_DWORD *)v31 + 27);
        v34 = v33 - v28;
        if (v30 != v23)
        {
          v35 = *(_DWORD *)(v30 + 108);
          v36 = v35 - v28;
          if (v35 <= v28)
          {
            v37 = *(_DWORD *)(v30 + 104);
            v38 = *(_DWORD *)(v23 + 104);
            if (v37 == v38 || (v39 = (v37 - v38) * v21, v39 < 0) && v36 * v32 <= v39 * v34)
            {
              v27 = (*((_DWORD *)v22 + 26) - v37) * v21;
              v23 = v30;
              goto LABEL_18;
            }
          }
        }
        v40 = v22 + 1;
        if ((v25 & 1) == 0)
          v40 = v22;
        v31 = (uint64_t *)*v40;
        if ((uint64_t *)*v40 == v22)
          break;
        v41 = *((_DWORD *)v31 + 26);
        v27 = (v41 - *(_DWORD *)(v23 + 104)) * v21;
        if (v27 < 1)
          break;
        v42 = *((_DWORD *)v31 + 27) - v33;
        if ((v42 & 0x80000000) == 0)
          break;
        v43 = *((_DWORD *)v22 + 26);
        if (v41 != v43)
        {
          v44 = (v41 - v43) * v21;
          if ((v44 & 0x80000000) == 0 || v42 * v32 >= v44 * v34)
            break;
        }
      }
      v15 = v23;
      v14 = v22;
    }
    v20 = 0;
    v21 = -1;
    v22 = *a3;
    v23 = *a2;
  }
  while ((v25 & 1) != 0);
  *(_QWORD *)(v15 + 8) = v14;
  *v14 = v15;
  *v24 = v6;
  v6[1] = (uint64_t)v24;
  if (*((_DWORD *)v19 + 26) < *(_DWORD *)(v17 + 104))
    *a2 = (uint64_t)v19;
  if (*((_DWORD *)v18 + 26) >= *(_DWORD *)(v16 + 104))
    a2[1] = (uint64_t)v18;
  a2[3] = (uint64_t)a3[3];
  *a4 = v24;
  result = 1;
LABEL_78:
  *a5 = v6;
  return result;
}

void sub_1B2202510(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  _BOOL4 v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD v43[2];

  v5 = a3 - a2;
  if (a3 == a2)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else if (v5 == 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a2);
    v8 = v7 + 128;
    v10 = *(_DWORD *)(v7 + 104);
    v9 = *(_DWORD *)(v7 + 108);
    v12 = *(_DWORD *)(v7 + 232);
    v11 = *(_DWORD *)(v7 + 236);
    if (v10 == v12 && v9 == v11)
    {
      v37 = *(_DWORD *)(v7 + 112);
      v38 = *(_DWORD *)(v7 + 240);
      v39 = v37 <= v38;
      if (v37 == v38)
        goto LABEL_5;
      v40 = v37 > v38;
      if (v39)
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a2);
      else
        v24 = v7 + 128;
      *(_QWORD *)(v7 + ((unint64_t)v40 << 7)) = v7 + (v40 << 7);
      *(_QWORD *)(v24 + 8) = v24;
      if (!v39)
        v8 = v7;
      *(_QWORD *)a4 = v24;
      *(_QWORD *)(a4 + 8) = v24;
      v25 = v24;
      v7 = v24;
    }
    else
    {
      v14 = v10 == v12;
      v15 = v10 != v12;
      if (v9 != v11)
        v15 = 0;
      if (v9 >= v11)
        v14 = 0;
      v16 = v10 < v12;
      v17 = v10 < v12 || v14;
      v18 = v16 && v15;
      *(_QWORD *)v7 = v8;
      *(_QWORD *)(v7 + 8) = v8;
      *(_QWORD *)(v7 + 128) = v7;
      *(_QWORD *)(v7 + 136) = v7;
      v19 = v9 < v11 || v18;
      v20 = v17 == 0;
      if (v17)
        v21 = v7;
      else
        v21 = v7 + 128;
      if (v20)
        v22 = v7;
      else
        v22 = v7 + 128;
      *(_QWORD *)a4 = v21;
      *(_QWORD *)(a4 + 8) = v22;
      v23 = v19 == 0;
      if (v19)
        v24 = v7;
      else
        v24 = v7 + 128;
      if (v23)
        v25 = v7;
      else
        v25 = v7 + 128;
    }
    *(_QWORD *)(a4 + 16) = v24;
    *(_QWORD *)(a4 + 24) = v25;
    v41 = (_QWORD *)sub_1B2201F74((_DWORD *)a1, v7, v8);
    *v41 = v41;
    v41[1] = v41;
    *(_QWORD *)(v7 + 16) = v41;
    v42 = (_QWORD *)v41[2];
    *v42 = v42;
    v42[1] = v42;
    *(_QWORD *)(v8 + 16) = v42;
  }
  else
  {
    if (v5 == 1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a2);
LABEL_5:
      *(_QWORD *)(v7 + 8) = v7;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = v7;
      *(_QWORD *)a4 = v7;
      *(_QWORD *)(a4 + 8) = v7;
      *(_QWORD *)(a4 + 16) = v7;
      *(_QWORD *)(a4 + 24) = v7;
      return;
    }
    v27 = v5 + (v5 < 0);
    v28 = a2 + (a3 - a2) / 2;
    if (v28 < a3)
    {
      v29 = v27 >> 1;
      v30 = *(_QWORD *)(a1 + 144);
      v31 = *(_DWORD **)(v30 + 8 * (v28 - 1));
      v32 = v31[26];
      v33 = v31[27];
      v34 = v31[28];
      v35 = v29 + (uint64_t)a2;
      do
      {
        v36 = *(_DWORD **)(v30 + 8 * v35);
        if (v36[26] != v32)
          break;
        if (v36[27] != v33)
          break;
        if (v36[28] != v34)
          break;
        ++v35;
      }
      while (v35 < a3);
    }
    sub_1B2202510(a1);
    memset(v43, 0, sizeof(v43));
    sub_1B2202510(a1);
    sub_1B2202708((_DWORD *)a1, a4, (uint64_t)v43);
  }
}

void sub_1B2202708(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t **v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t **v71;
  _QWORD *v72;
  uint64_t ***v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t *v76;
  BOOL v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t **v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  int *v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t *v117;
  uint64_t **v118;

  if (!*(_QWORD *)(a3 + 8))
    return;
  if (!*(_QWORD *)(a2 + 8))
  {
    v31 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v31;
    return;
  }
  --a1[40];
  v117 = 0;
  v118 = 0;
  if (sub_1B220211C((uint64_t)a1, (uint64_t *)a2, (uint64_t **)a3, &v118, &v117))
  {
    v101 = *((_DWORD *)v117 + 27);
    v102 = *((_DWORD *)v117 + 26);
    v5 = *((int *)v118 + 26);
    v4 = *((int *)v118 + 27);
    v6 = v102 - v5;
    v7 = v101;
    v8 = v101 - v4;
    v90 = (int *)v118;
    v92 = v117;
    v87 = *((_DWORD *)v117 + 28);
    v9 = *((int *)v118 + 28);
    v10 = v87 - v9;
    v11 = v5 - v102;
    v12 = v10 * v6;
    v113 = (v102 - v5) | ((unint64_t)v8 << 32);
    v114 = v10 | 0xFFFFFFFF00000000;
    v13 = v8 * v10;
    v14 = -(v6 * (int)v6) - v8 * v8;
    v15 = v118[2];
    v108 = 0;
    v16 = &unk_1B2268000;
    v97 = v12;
    v17 = 0;
    if (v15)
    {
      v18 = v15;
      v94 = v15;
      do
      {
        v19 = (int *)v18[3];
        v20 = v19[26] - v5;
        v21 = v19[27] - v4;
        if (!(v21 * v11 + v8 * v20) && v20 * v12 + v13 * v21 + v14 * (v19[28] - v9) >= 1)
        {
          if (!v17)
            goto LABEL_11;
          v111 = xmmword_1B2268A10;
          v22 = v14;
          v23 = v13;
          v24 = v9;
          v25 = v8;
          v26 = v11;
          v27 = v4;
          v28 = sub_1B2202E9C((_QWORD *)v17, (uint64_t)v18, &v113, &v111);
          v4 = v27;
          v11 = v26;
          v8 = v25;
          v9 = v24;
          v13 = v23;
          v14 = v22;
          v12 = v97;
          v7 = v101;
          v77 = v28 == 1;
          v15 = v94;
          if (v77)
LABEL_11:
            v17 = (uint64_t)v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18 != v15);
      v108 = v17;
      v29 = v92;
      v30 = v102;
      v16 = (_OWORD *)&unk_1B2268000;
    }
    else
    {
      v29 = v117;
      v30 = v102;
    }
    v34 = (_QWORD *)v29[2];
    v105 = 0;
    v35 = 0;
    if (v34)
    {
      v95 = v16[161];
      v36 = v34;
      do
      {
        v37 = (int *)v36[3];
        v38 = v37[26] - v30;
        v39 = v37[27] - v7;
        if (!(v39 * v11 + v8 * v38) && v38 * v12 + v13 * v39 + v14 * (v37[28] - (uint64_t)v87) >= 1)
        {
          if (!v35
            || (v111 = v95,
                v40 = sub_1B2202E9C((_QWORD *)v35, (uint64_t)v36, &v113, &v111),
                v12 = v97,
                v7 = v101,
                v40 == 2))
          {
            v35 = (uint64_t)v36;
          }
        }
        v36 = (_QWORD *)*v36;
      }
      while (v36 != v34);
      v105 = v35;
      v29 = v92;
    }
    v32 = (uint64_t **)v90;
    if (!(v17 | v35))
      goto LABEL_31;
    sub_1B220312C((uint64_t)a1, v90, (int *)v29, &v108, &v105, 0, 0);
    if (v108)
    {
      v32 = *(uint64_t ***)(v108 + 24);
      v118 = v32;
    }
    if (v105)
    {
      v29 = *(uint64_t **)(v105 + 24);
      v117 = v29;
      v102 = *((_DWORD *)v29 + 26);
      v101 = *((_DWORD *)v29 + 27);
      v41 = *((_DWORD *)v29 + 28);
    }
    else
    {
LABEL_31:
      v41 = v87;
    }
    v33 = (v41 + 1);
  }
  else
  {
    v29 = v117;
    v32 = v118;
    v33 = *((unsigned int *)v117 + 28);
    v101 = *((_DWORD *)v117 + 27);
    v102 = *((_DWORD *)v117 + 26) + 1;
  }
  v42 = 0;
  v98 = 0;
  v99 = 0;
  v88 = 0;
  v89 = 0;
  v100 = 0;
  v43 = 0;
  v93 = v29;
  v96 = 0;
  v44 = 1;
  v91 = v32;
  v45 = v29;
  while (1)
  {
    v46 = *((int *)v32 + 26);
    v47 = *((int *)v32 + 27);
    v48 = *((int *)v45 + 26) - v46;
    v49 = *((int *)v45 + 27) - v47;
    v50 = *((int *)v32 + 28);
    v51 = *((int *)v45 + 28) - v50;
    LODWORD(v46) = v102 - v46;
    LODWORD(v47) = v101 - v47;
    v52 = v33;
    LODWORD(v50) = v33 - v50;
    v116[0] = v48 | ((unint64_t)v49 << 32);
    v116[1] = v51 | 0xFFFFFFFF00000000;
    v113 = (int)v51 * (int)v47 - (int)v49 * (int)v50;
    v114 = (int)v48 * (int)v50 - (int)v51 * (int)v46;
    v115 = (int)v49 * (int)v46 - (int)v48 * (int)v47;
    *(_QWORD *)&v111 = v115 * v49 - v114 * v51;
    *((_QWORD *)&v111 + 1) = v113 * v51 - v115 * v48;
    v112 = v114 * v48 - v113 * v49;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v53 = (uint64_t)sub_1B2202F70((uint64_t)a1, 0, (uint64_t)v32, v116, &v113, &v111, (uint64_t)&v108);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v54 = (uint64_t)sub_1B2202F70((uint64_t)a1, 1, (uint64_t)v45, v116, &v113, &v111, (uint64_t)&v105);
    if (!(v53 | v54))
    {
      v78 = (uint64_t *)sub_1B2201F74(a1, (uint64_t)v32, (uint64_t)v45);
      *v78 = (uint64_t)v78;
      v78[1] = (uint64_t)v78;
      v32[2] = v78;
      v79 = (_QWORD *)v78[2];
      *v79 = v79;
      v79[1] = v79;
      v45[2] = (uint64_t)v79;
      return;
    }
    v55 = v54;
    if (v53)
      v56 = -1;
    else
      v56 = 1;
    if (v53 && v54)
      v56 = sub_1B2201C58((uint64_t)&v108, (uint64_t)&v105);
    if ((v44 & 1) != 0)
      goto LABEL_42;
    if ((v56 & 0x80000000) == 0)
    {
      if ((v107 & 0x80000000) == 0 || v106)
      {
LABEL_42:
        v57 = v43;
        v58 = (uint64_t *)sub_1B2201F74(a1, (uint64_t)v32, (uint64_t)v45);
        v59 = v58;
        v60 = (uint64_t **)v58;
        if (v42)
        {
          v42[1] = (uint64_t)v58;
          v60 = v57;
        }
        *v58 = (uint64_t)v42;
        v61 = (uint64_t *)v58[2];
        v62 = v61;
        if (v100)
        {
          *v100 = (uint64_t)v61;
          v62 = v99;
        }
        v61[1] = (uint64_t)v100;
        v63 = v62;
      }
      else
      {
        v60 = v43;
        v59 = v42;
        v63 = v99;
        v61 = v100;
      }
      v103 = v55;
      v104 = v53;
      v64 = v55;
      if (v56)
      {
        if (v56 < 0)
          goto LABEL_61;
      }
      else
      {
        v65 = v60;
        sub_1B220312C((uint64_t)a1, (int *)v118, (int *)v117, &v104, &v103, 0, 0);
        v60 = v65;
        v64 = v103;
      }
      if (!v64)
      {
LABEL_61:
        v100 = v61;
LABEL_69:
        v69 = v91;
        goto LABEL_70;
      }
      if (v98)
      {
        v66 = v60;
        v67 = *v98;
        if (*v98 != (uint64_t *)v55)
        {
          do
          {
            v68 = (uint64_t *)*v67;
            sub_1B2203B1C((uint64_t)a1, v67);
            v67 = v68;
          }
          while (v68 != (uint64_t *)v55);
        }
        v60 = v66;
        if (!v61)
        {
          v55 = v89;
LABEL_68:
          v102 = *((_DWORD *)v117 + 26);
          v52 = *((unsigned int *)v117 + 28);
          v100 = 0;
          v101 = *((_DWORD *)v117 + 27);
          v98 = *(uint64_t ***)(v64 + 16);
          v117 = *(uint64_t **)(v64 + 24);
          v89 = v55;
          goto LABEL_69;
        }
      }
      else
      {
        if (!v61)
          goto LABEL_68;
        v98 = *(uint64_t ***)(v55 + 8);
        v89 = (uint64_t)v63;
      }
      *v98 = v63;
      v63[1] = (uint64_t)v98;
      v63 = 0;
      *v61 = v55;
      *(_QWORD *)(v55 + 8) = v61;
      v55 = v89;
      v64 = v103;
      goto LABEL_68;
    }
    if ((v110 & 0x80000000) == 0 || v109)
      goto LABEL_42;
    v104 = v53;
    v60 = v43;
    v59 = v42;
    v69 = v91;
    v63 = v99;
LABEL_70:
    if (v56 > 0 || (v70 = v104) == 0)
    {
      v32 = v118;
      v75 = v93;
      v33 = v52;
      goto LABEL_84;
    }
    if (v96)
    {
      v71 = v60;
      v73 = (uint64_t ***)(v96 + 8);
      v72 = *(_QWORD **)(v96 + 8);
      if (v72 != (_QWORD *)v53)
      {
        do
        {
          v74 = (_QWORD *)v72[1];
          sub_1B2203B1C((uint64_t)a1, v72);
          v72 = v74;
        }
        while (v74 != (_QWORD *)v53);
      }
      if (!v59)
      {
        v75 = v93;
        v60 = v71;
        goto LABEL_83;
      }
      v60 = v71;
      *v71 = (uint64_t *)v96;
    }
    else
    {
      if (!v59)
      {
        v88 = (_QWORD *)v53;
        goto LABEL_81;
      }
      v76 = *(uint64_t **)v53;
      *v60 = *(uint64_t **)v53;
      v73 = (uint64_t ***)(v76 + 1);
      v88 = v60;
    }
    *v73 = v60;
    *(_QWORD *)v53 = v59;
    v59[1] = v53;
    v70 = v104;
    v60 = 0;
LABEL_81:
    v75 = v93;
LABEL_83:
    v59 = 0;
    v102 = *((_DWORD *)v118 + 26);
    v33 = *((unsigned int *)v118 + 28);
    v101 = *((_DWORD *)v118 + 27);
    v32 = *(uint64_t ***)(v70 + 24);
    v96 = *(_QWORD *)(v70 + 16);
    v118 = v32;
LABEL_84:
    v45 = v117;
    v77 = v32 == v69 && v117 == v75;
    if (v77)
      break;
    v99 = v63;
    v44 = 0;
    v42 = v59;
    v43 = v60;
  }
  if (v96)
  {
    v80 = v60;
    v81 = *(_QWORD **)(v96 + 8);
    v82 = v100;
    if (v81 != v88)
    {
      do
      {
        v83 = (_QWORD *)v81[1];
        sub_1B2203B1C((uint64_t)a1, v81);
        v81 = v83;
      }
      while (v83 != v88);
    }
    v84 = (uint64_t *)v89;
    if (v59)
    {
      *v80 = (uint64_t *)v96;
      *(_QWORD *)(v96 + 8) = v80;
      *v88 = v59;
      v59[1] = (uint64_t)v88;
    }
  }
  else
  {
    *v60 = v59;
    v59[1] = (uint64_t)v60;
    v118[2] = v59;
    v84 = (uint64_t *)v89;
    v82 = v100;
  }
  if (v98)
  {
    v85 = *v98;
    if (*v98 != v84)
    {
      do
      {
        v86 = (uint64_t *)*v85;
        sub_1B2203B1C((uint64_t)a1, v85);
        v85 = v86;
      }
      while (v86 != v84);
    }
    if (v82)
    {
      *v98 = v63;
      v63[1] = (uint64_t)v98;
      *v82 = v84;
      v84[1] = (uint64_t)v82;
    }
  }
  else
  {
    *v82 = v63;
    v63[1] = (uint64_t)v82;
    v117[2] = (uint64_t)v82;
  }
}

uint64_t sub_1B2202E9C(_QWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;

  v4 = a1[1];
  if (*a1 != a2)
    return v4 == a2;
  if (v4 != a2)
    return 2;
  v7 = a3[1];
  v6 = a3[2];
  v9 = a4[1];
  v8 = a4[2];
  v10 = v6 * v9 - v7 * v8;
  v11 = *a3 * v8 - *a4 * v6;
  v12 = *a4 * v7 - *a3 * v9;
  v13 = (_DWORD *)a1[3];
  v14 = *(_DWORD **)(a2 + 24);
  v15 = *(_DWORD **)(*(_QWORD *)(a2 + 16) + 24);
  v16 = v15[26];
  v17 = v15[27];
  LODWORD(v15) = v15[28];
  if (((v14[28] - (int)v15) * (v13[27] - v17) - (v14[27] - v17) * (v13[28] - (int)v15)) * (uint64_t)v10
     + ((v14[27] - v17) * (v13[26] - v16) - (v14[26] - v16) * (v13[27] - v17)) * (uint64_t)v12
     + ((v14[26] - v16) * (v13[28] - (int)v15) - (v14[28] - (int)v15) * (v13[26] - v16)) * (uint64_t)v11 <= 0)
    return 1;
  else
    return 2;
}

_QWORD *sub_1B2202F70(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  __int128 v27;
  int v28;
  _QWORD v29[2];

  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 16);
    while (*(_DWORD *)(v16 + 40) <= *(_DWORD *)(a1 + 160))
    {
LABEL_19:
      v16 = *(_QWORD *)v16;
      if (v16 == v7)
        return v15;
    }
    v17 = *(int **)(v16 + 24);
    v18 = v17[26] - (uint64_t)*(int *)(a3 + 104);
    v19 = v17[27] - (uint64_t)*(int *)(a3 + 108);
    v20 = v17[28] - (uint64_t)*(int *)(a3 + 112);
    v29[0] = v18 | ((unint64_t)v19 << 32);
    v29[1] = v20 | 0xFFFFFFFF00000000;
    v21 = *a6 * v18 + a6[1] * v19 + a6[2] * v20;
    if (v21 < 1)
    {
      if (v21 < 0)
      {
        v22 = 0;
        v28 = -1;
        v21 = -v21;
        v23 = 1;
      }
      else
      {
        v21 = 0;
        v23 = 0;
        v28 = 0;
        v22 = 1;
      }
    }
    else
    {
      v22 = 0;
      v28 = 1;
      v23 = -1;
    }
    v24 = *a5 * v18 + a5[1] * v19 + a5[2] * v20;
    *(_QWORD *)&v27 = v21;
    if (v24 <= 0)
    {
      if ((v24 & 0x8000000000000000) == 0)
      {
        *((_QWORD *)&v27 + 1) = 0;
        if ((v22 & 1) != 0)
        {
LABEL_18:
          v7 = *(_QWORD *)(a3 + 16);
          goto LABEL_19;
        }
LABEL_11:
        if (!v15 || (v25 = sub_1B2201C58((uint64_t)&v27, a7), v25 < 0))
        {
          *(_OWORD *)a7 = v27;
          *(_DWORD *)(a7 + 16) = v28;
          v15 = (_QWORD *)v16;
        }
        else if (!v25 && (sub_1B2202E9C(v15, v16, a4, v29) != 2) != a2)
        {
          v15 = (_QWORD *)v16;
        }
        goto LABEL_18;
      }
      v28 = v23;
      v24 = -v24;
    }
    *((_QWORD *)&v27 + 1) = v24;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1B220312C(uint64_t a1, int *a2, int *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int **v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int **v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int *v93;
  int v94;
  uint64_t v95;
  unsigned int *v97;
  int *v98;
  int v99;
  unsigned int *v101;
  uint64_t v102;
  int *v103;
  int v104;
  int v105;
  signed int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int v111;
  signed int v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  _DWORD *v140;
  unsigned int *v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  signed int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  int v169;

  v9 = *a5;
  v10 = (unsigned int *)a2;
  if (*a4)
    v10 = *(unsigned int **)(*a4 + 24);
  v147 = *a4;
  v11 = v10[26];
  v12 = v10[27];
  v13 = v10[28];
  v14 = (unsigned int *)a3;
  if (v9)
    v14 = *(unsigned int **)(v9 + 24);
  v15 = v14[26];
  v16 = v14[27];
  v17 = v14[28];
  v18 = a2[26];
  v19 = a2[27];
  v20 = a3[26] - v18;
  v21 = a3[27] - v19;
  v22 = a2[28];
  v23 = a3[28] - v22;
  if (v147)
    v24 = *a4;
  else
    v24 = v9;
  v25 = *(_DWORD **)(v24 + 24);
  v26 = v25[26] - v18;
  v27 = v25[27] - v19;
  LODWORD(v25) = v25[28] - v22;
  v28 = v27 * (int)v23 - (int)v25 * (int)v21;
  v29 = (int)v25 * (int)v20 - v26 * (int)v23;
  v30 = v26 * (int)v21 - v27 * (int)v20;
  v31 = (int)v22 * v30 + (int)v18 * v28 + (int)v19 * v29;
  v32 = v30 * v21 - v29 * v23;
  v33 = v28 * v23 - v30 * v20;
  v34 = v29 * v20 - v28 * v21;
  v35 = v32 * (int)v11 + v33 * (int)v12 + v34 * (int)v13;
  v156 = v34;
  v146 = a5;
  if (!v147 || *(unsigned int **)(v147 + 24) == a6)
  {
    v42 = v9;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v147 + 16) + 8);
    v38 = *(int **)(v36 + 24);
    v37 = (unsigned int **)(v36 + 24);
    v39 = v38[26];
    v40 = v38[27];
    v41 = v38[28];
    if ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31)
    {
      v94 = *(_DWORD *)(a1 + 160);
      do
      {
        v95 = v32 * v39 + v33 * v40 + v34 * v41;
        if (*(_DWORD *)(v36 + 40) == v94 || v95 <= v35)
          break;
        v35 = v95;
        *a4 = v36;
        v97 = *v37;
        v11 = v97[26];
        v12 = v97[27];
        v13 = v97[28];
        if (v97 == a6)
          break;
        v36 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8);
        v37 = (unsigned int **)(v36 + 24);
        v98 = *(int **)(v36 + 24);
        v39 = v98[26];
        v40 = v98[27];
        v41 = v98[28];
      }
      while ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31);
    }
    v42 = *a5;
    v34 = v29 * v20 - v28 * v21;
  }
  v43 = v32 * (int)v15 + v33 * v16 + v34 * (int)v17;
  if (v42)
  {
    if (*(unsigned int **)(v42 + 24) == a7
      || (v44 = **(_QWORD **)(v42 + 16),
          v46 = *(int **)(v44 + 24),
          v45 = (unsigned int **)(v44 + 24),
          v47 = v46[26],
          v48 = v46[27],
          v49 = v46[28],
          (int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 < v31))
    {
LABEL_16:
      result = v42;
    }
    else
    {
      v99 = *(_DWORD *)(a1 + 160);
      do
      {
        result = v42;
        v42 = v44;
        if (*(_DWORD *)(v44 + 40) == v99 || v32 * v47 + v33 * v48 + v34 * v49 <= v43)
          break;
        v43 = v32 * v47 + v33 * v48 + v34 * v49;
        *v146 = v44;
        v101 = *v45;
        v15 = v101[26];
        v16 = v101[27];
        v17 = v101[28];
        if (v101 == a7)
          goto LABEL_16;
        v44 = **(_QWORD **)(v44 + 16);
        v102 = **(_QWORD **)(v42 + 16);
        v103 = *(int **)(v102 + 24);
        v45 = (unsigned int **)(v102 + 24);
        v47 = v103[26];
        v48 = v103[27];
        v49 = v103[28];
        result = v42;
      }
      while ((int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 >= v31);
    }
  }
  else
  {
    result = 0;
  }
  v51 = v43 - v35;
  v152 = v21;
  v153 = v20;
  v150 = v30 * v21 - v29 * v23;
  v151 = v23;
  v144 = v29;
  v145 = v28;
  v143 = v30;
  v149 = v28 * v23 - v30 * v20;
  if (v43 - v35 < 1)
  {
    if ((v51 & 0x8000000000000000) == 0)
      return result;
    v104 = v15;
    v105 = v17;
    v106 = v16;
    v107 = v43 - v35;
    v142 = v9;
LABEL_97:
    v158 = v105;
    v160 = v104;
    v155 = v106;
    while (1)
    {
      v108 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
      if (result)
      {
        if (*(unsigned int **)(result + 24) != a7)
        {
          v109 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
          if (*(_DWORD *)(v109 + 40) > *(_DWORD *)(a1 + 160))
          {
            v110 = *(_DWORD **)(v109 + 24);
            v111 = v110[26];
            v112 = v110[27];
            v113 = v110[28];
            v114 = v32 * (v111 - v104) + v33 * (v112 - v106) + v34 * (v113 - v105);
            v115 = (v111 - v104) * (int)v20 + (v112 - v106) * (int)v21 + (v113 - v105) * (int)v23;
            if (v114)
            {
              if (v114 < 0)
              {
                v116 = (int)v115 <= 0;
                if ((v115 & 0x80000000) != 0)
                  v117 = -(uint64_t)v115;
                else
                  v117 = 0;
                v118 = (v115 >> 31) & 1;
                if ((int)v115 <= 0)
                  v115 = v117;
                if (v116)
                  v119 = v118;
                else
                  v119 = -1;
                v169 = v119;
                v167 = v115;
                v168 = -v114;
                v148 = v111;
                if ((int)v108 < 1)
                {
                  if ((v108 & 0x80000000) != 0)
                  {
                    v166 = -1;
                    v121 = -v108;
                    v120 = 1;
                  }
                  else
                  {
                    v121 = 0;
                    v120 = 0;
                    v166 = 0;
                  }
                }
                else
                {
                  v166 = 1;
                  v120 = -1;
                  v121 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
                }
                v122 = result;
                v164 = v121;
                v123 = v107;
                if (v107 <= 0)
                {
                  if (v107 < 0)
                  {
                    v166 = v120;
                    v123 = -v107;
                  }
                  else
                  {
                    v123 = 0;
                  }
                }
                v165 = v123;
                v65 = (int)sub_1B2201C58((uint64_t)&v167, (uint64_t)&v164) < 1;
                LODWORD(v21) = v152;
                LODWORD(v20) = v153;
                v32 = v150;
                LODWORD(v23) = v151;
                v33 = v149;
                v34 = v156;
                v105 = v158;
                v104 = v160;
                v106 = v155;
                result = v122;
                v111 = v148;
                if (v65)
                {
LABEL_151:
                  v107 = v32 * (v111 - (int)v11) + v33 * (v112 - (int)v12) + v34 * (v113 - (int)v13);
                  if (result == v142)
                    result = 0;
                  else
                    result = v109;
                  *v146 = result;
                  v104 = v111;
                  v106 = v112;
                  v105 = v113;
                  goto LABEL_97;
                }
              }
            }
            else if ((int)v115 > 0)
            {
              goto LABEL_151;
            }
          }
        }
      }
      v124 = *a4;
      if (!*a4)
        return result;
      if (*(unsigned int **)(v124 + 24) == a6)
        return result;
      v125 = *(_QWORD *)(*(_QWORD *)(v124 + 16) + 8);
      if (*(_DWORD *)(v125 + 40) <= *(_DWORD *)(a1 + 160))
        return result;
      v126 = *(_DWORD **)(v125 + 24);
      v127 = v126[26];
      v128 = v126[27];
      v129 = v127 - v11;
      v130 = v128 - v12;
      v131 = v126[28];
      if (v145 * (uint64_t)(v127 - (int)v11) + v144 * (uint64_t)(v128 - (int)v12) + v143 * (uint64_t)(v131 - (int)v13))
        return result;
      v132 = v32 * (v104 - v127) + v33 * (v106 - v128) + v34 * (v105 - v131);
      if ((v132 & 0x8000000000000000) == 0)
        return result;
      v133 = v32 * v129 + v33 * v130 + v34 * (v131 - (int)v13);
      v134 = v129 * (int)v20 + v130 * (int)v21 + (v131 - (int)v13) * (int)v23;
      if (v133)
      {
        if ((v133 & 0x8000000000000000) == 0)
          return result;
        v135 = (int)v134 <= 0;
        if ((v134 & 0x80000000) != 0)
          v136 = -(uint64_t)v134;
        else
          v136 = 0;
        v137 = (v134 >> 31) & 1;
        if ((int)v134 <= 0)
          v134 = v136;
        if (v135)
          v138 = v137;
        else
          v138 = -1;
        v169 = v138;
        v167 = v134;
        v168 = -v133;
        if ((int)v108 < 1)
        {
          if ((v108 & 0x80000000) != 0)
          {
            v166 = -1;
            v108 = -v108;
            v139 = 1;
          }
          else
          {
            v108 = 0;
            v139 = 0;
            v166 = 0;
          }
        }
        else
        {
          v166 = 1;
          v139 = -1;
        }
        v164 = v108;
        if (v107 <= 0)
        {
          if (v107 < 0)
          {
            v166 = v139;
            v107 = -v107;
          }
          else
          {
            v107 = 0;
          }
        }
        v165 = v107;
        result = sub_1B2201C58((uint64_t)&v167, (uint64_t)&v164);
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        v32 = v150;
        LODWORD(v23) = v151;
        v33 = v149;
        v34 = v156;
        v105 = v158;
        v104 = v160;
        v106 = v155;
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if ((int)v134 <= 0)
      {
        return result;
      }
      *a4 = v125;
      v140 = *(_DWORD **)(v125 + 24);
      LODWORD(v11) = v140[26];
      LODWORD(v12) = v140[27];
      LODWORD(v13) = v140[28];
      result = *v146;
      v107 = v132;
    }
  }
  v141 = a7;
  v52 = v15;
  v53 = v17;
  v54 = v16;
  v55 = (_QWORD *)v147;
  while (1)
  {
    v56 = (_QWORD *)*a4;
    v154 = v54;
    while (1)
    {
      v57 = (int)((v52 - v11) * v20 + (v54 - v12) * v21 + (v53 - v13) * v23);
      if (!v56)
        break;
      if ((unsigned int *)v56[3] == a6)
        break;
      v58 = *(_QWORD *)(*v56 + 16);
      if (*(_DWORD *)(v58 + 40) <= *(_DWORD *)(a1 + 160))
        break;
      v59 = *(unsigned int **)(v58 + 24);
      v60 = v59[26];
      v61 = v59[27];
      v62 = v59[28];
      v63 = v32 * ((int)v60 - (int)v11) + v33 * ((int)v61 - (int)v12) + v34 * ((int)v62 - (int)v13);
      v64 = ((int)v60 - (int)v11) * (int)v20 + ((int)v61 - (int)v12) * (int)v21 + ((int)v62 - (int)v13) * (int)v23;
      if (v63)
      {
        if ((v63 & 0x8000000000000000) == 0)
          break;
        v157 = v12;
        v159 = v13;
        v65 = (int)v64 <= 0;
        if ((v64 & 0x80000000) != 0)
          v66 = -(uint64_t)v64;
        else
          v66 = 0;
        v67 = (v64 >> 31) & 1;
        if ((int)v64 <= 0)
          v64 = v66;
        if (v65)
          v68 = v67;
        else
          v68 = -1;
        v169 = v68;
        v167 = v64;
        v168 = -v63;
        v69 = v11;
        if ((int)v57 < 1)
        {
          if ((v57 & 0x80000000) != 0)
          {
            v166 = -1;
            v71 = -v57;
            v70 = 1;
          }
          else
          {
            v71 = 0;
            v70 = 0;
            v166 = 0;
          }
        }
        else
        {
          v166 = 1;
          v70 = -1;
          v71 = v57;
        }
        v72 = v53;
        v73 = v52;
        v164 = v71;
        v74 = v51;
        if (v51 <= 0)
        {
          if (v51 < 0)
          {
            v166 = v70;
            v74 = -v51;
          }
          else
          {
            v74 = 0;
          }
        }
        v165 = v74;
        v75 = v51;
        v76 = sub_1B2201C58((uint64_t)&v167, (uint64_t)&v164);
        v51 = v75;
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        v32 = v150;
        LODWORD(v23) = v151;
        v52 = v73;
        v11 = v69;
        v34 = v156;
        v12 = v157;
        v13 = v159;
        v54 = v154;
        v53 = v72;
        v55 = (_QWORD *)v147;
        v33 = v149;
        if (v76 < 0)
          break;
      }
      else if ((v64 & 0x80000000) == 0)
      {
        break;
      }
      v51 = v32 * ((int)v52 - (int)v60) + v33 * (int)(v54 - v61) + v34 * ((int)v53 - (int)v62);
      if (v56 == v55)
        v56 = 0;
      else
        v56 = (_QWORD *)v58;
      *a4 = (uint64_t)v56;
      v11 = v60;
      v12 = v61;
      v13 = v62;
    }
    result = v51;
    v77 = *v146;
    if (!*v146)
      return result;
    if (*(unsigned int **)(v77 + 24) == v141)
      return result;
    v78 = **(_QWORD **)(v77 + 16);
    if (*(_DWORD *)(v78 + 40) <= *(_DWORD *)(a1 + 160))
      return result;
    v79 = *(_DWORD **)(v78 + 24);
    v80 = v79[26];
    v81 = v79[27];
    v82 = v80 - v52;
    v83 = v81 - v54;
    v84 = v79[28];
    if (v145 * (uint64_t)v82 + v144 * (uint64_t)(int)(v81 - v54) + v143 * (uint64_t)(v84 - (int)v53))
      return result;
    v85 = v32 * (v80 - (int)v11) + v33 * (v81 - (int)v12) + v34 * (v84 - (int)v13);
    if (v85 < 1)
      return result;
    v86 = v32 * v82 + v33 * v83 + v34 * (v84 - (int)v53);
    v87 = v82 * (int)v20 + v83 * (int)v21 + (v84 - (int)v53) * (int)v23;
    if (!v86)
    {
      if ((v87 & 0x80000000) != 0)
        goto LABEL_77;
      return result;
    }
    if ((v86 & 0x8000000000000000) == 0)
      return result;
    v88 = (int)v87 <= 0;
    if ((v87 & 0x80000000) != 0)
      v89 = -(uint64_t)v87;
    else
      v89 = 0;
    v90 = (v87 >> 31) & 1;
    if ((int)v87 <= 0)
      v87 = v89;
    if (v88)
      v91 = v90;
    else
      v91 = -1;
    v169 = v91;
    v167 = v87;
    v168 = -v86;
    if ((int)v57 < 1)
    {
      if ((v57 & 0x80000000) != 0)
      {
        v166 = -1;
        v57 = -v57;
        v92 = 1;
      }
      else
      {
        v57 = 0;
        v92 = 0;
        v166 = 0;
      }
    }
    else
    {
      v166 = 1;
      v92 = -1;
    }
    v164 = v57;
    if (v51 <= 0)
    {
      if (v51 < 0)
      {
        v166 = v92;
        result = -v51;
      }
      else
      {
        result = 0;
      }
    }
    v165 = result;
    result = sub_1B2201C58((uint64_t)&v167, (uint64_t)&v164);
    LODWORD(v21) = v152;
    LODWORD(v20) = v153;
    v32 = v150;
    LODWORD(v23) = v151;
    v33 = v149;
    v34 = v156;
    if ((int)result <= 0)
      return result;
LABEL_77:
    *v146 = v78;
    v93 = *(unsigned int **)(v78 + 24);
    v52 = v93[26];
    v54 = v93[27];
    v53 = v93[28];
    v51 = v85;
  }
}

double sub_1B2203B1C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  double result;

  v2 = (_QWORD *)*a2;
  v3 = (uint64_t *)a2[2];
  if ((_QWORD *)*a2 == a2)
  {
    v2 = 0;
  }
  else
  {
    v2[1] = a2[1];
    *(_QWORD *)a2[1] = v2;
  }
  *(_QWORD *)(v3[3] + 16) = v2;
  v4 = (uint64_t *)*v3;
  if ((uint64_t *)*v3 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4[1] = v3[1];
    *(_QWORD *)v3[1] = v4;
  }
  *(_QWORD *)(a2[3] + 16) = v4;
  result = 0.0;
  a2[4] = 0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *a2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  v3[4] = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  --*(_DWORD *)(a1 + 176);
  return result;
}

void sub_1B2203BB4(uint64_t a1, uint64_t a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  float32x4_t v15;
  float32x4_t v16;
  unint64_t *v17;
  int v18;
  float32x4_t v19;
  __int32 *v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  int v26;
  unsigned __int32 v27;
  int v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  _DWORD *v41;
  unsigned int v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  _DWORD *v49;
  float32x4_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  _BYTE v61[4];
  uint64_t v62;
  uint64_t v63;
  char v64;

  if ((a3 & 1) != 0)
  {
    if (a5 >= 1)
    {
      v15 = (float32x4_t)xmmword_1B22CA6E0;
      v16 = (float32x4_t)xmmword_1B22CA6D0;
      v17 = (unint64_t *)(a2 + 16);
      v18 = a5;
      do
      {
        *(float32x2_t *)v19.f32 = vcvt_f32_f64(*((float64x2_t *)v17 - 1));
        a9.i64[0] = *v17;
        *(float *)a9.i32 = *(double *)v17;
        v19.i64[1] = a9.u32[0];
        v16 = vminq_f32(v16, v19);
        v15 = vmaxq_f32(v15, v19);
        v17 = (unint64_t *)((char *)v17 + a4);
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
  }
  else if (a5 >= 1)
  {
    v15 = (float32x4_t)xmmword_1B22CA6E0;
    v16 = (float32x4_t)xmmword_1B22CA6D0;
    v20 = (__int32 *)(a2 + 8);
    v21 = a5;
    do
    {
      v22.i64[0] = *((_QWORD *)v20 - 1);
      v22.i32[2] = *v20;
      v20 = (__int32 *)((char *)v20 + a4);
      v22.i64[1] = v22.u32[2];
      v16 = vminq_f32(v16, v22);
      v15 = vmaxq_f32(v15, v22);
      --v21;
    }
    while (v21);
    goto LABEL_11;
  }
  v16 = (float32x4_t)xmmword_1B22CA6D0;
  v15 = (float32x4_t)xmmword_1B22CA6E0;
LABEL_11:
  v23 = vsubq_f32(v15, v16);
  v24 = v23.f32[1];
  if (v23.f32[0] >= v23.f32[1])
    v25 = v23.f32[0];
  else
    v25 = v23.f32[1];
  if (v23.f32[0] < v23.f32[1])
    v24 = v23.f32[0];
  v23.i32[3] = 0;
  v26 = v23.f32[0] >= v23.f32[1];
  v27 = v23.f32[0] < v23.f32[1];
  if (v25 < v23.f32[2])
    v27 = 2;
  if (v24 >= v23.f32[2])
    v26 = 2;
  if (v27 + 1 < 3)
    v28 = v27 + 1;
  else
    v28 = v27 - 2;
  if (v26 == v27)
    v26 = v28;
  *(_DWORD *)(a1 + 164) = v26;
  *(_DWORD *)(a1 + 168) = 3 - (v26 + v27);
  *(_DWORD *)(a1 + 172) = v27;
  a9.i32[0] = (int)(4 - (v26 + v27)) % 3;
  a10.i32[0] = v27;
  v29 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a9, a10), 0), (int8x16_t)vdupq_n_s32(0x38CD47F8u), (int8x16_t)vdupq_n_s32(0xB8CD47F8)), v23);
  *(float32x4_t *)a1 = v29;
  v23.i32[0] = 0;
  v30 = (int8x16_t)v29;
  *(float *)v30.i32 = 1.0 / v29.f32[0];
  v31 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v29, v23)), 0), v30, (int8x16_t)v29);
  if (v31.f32[1] != 0.0)
    v31.f32[1] = 1.0 / v31.f32[1];
  if (v31.f32[2] != 0.0)
    v31.f32[2] = 1.0 / v31.f32[2];
  v32 = vaddq_f32(v16, v15);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  v34 = vmulq_f32(v32, v33);
  v34.i32[3] = 0;
  *(float32x4_t *)(a1 + 16) = v34;
  v64 = 1;
  v63 = 0;
  HIDWORD(v62) = 0;
  if (a5 < 0)
  {
    v35 = 0;
  }
  else
  {
    if (!a5)
    {
      LODWORD(v62) = 0;
      goto LABEL_44;
    }
    v59 = v31;
    v35 = sub_1B21FF5F0(16 * a5, 16);
    v31 = v59;
    v64 = 1;
    v63 = v35;
    HIDWORD(v62) = a5;
  }
  LODWORD(v62) = a5;
  if ((a3 & 1) != 0)
  {
    if (a5 < 1)
      goto LABEL_44;
    v36 = 0;
    v38 = *(int *)(a1 + 168);
    v37 = *(int *)(a1 + 172);
    v39 = *(int *)(a1 + 164);
    v40 = (double *)(a2 + 16);
    v41 = (_DWORD *)(v35 + 8);
    do
    {
      *(float *)&v42 = *v40;
      *(float32x2_t *)v60.f32 = vcvt_f32_f64(*(float64x2_t *)(v40 - 2));
      v60.i64[1] = v42;
      v43 = vsubq_f32(v60, *(float32x4_t *)(a1 + 16));
      v43.i32[3] = 0;
      v60 = vmulq_f32(v31, v43);
      *(v41 - 2) = (int)v60.f32[v38];
      *(v41 - 1) = (int)v60.f32[v37];
      *v41 = (int)v60.f32[v39];
      v41[1] = v36;
      v41 += 4;
      ++v36;
      v40 = (double *)((char *)v40 + a4);
    }
    while (a5 != v36);
  }
  else
  {
    if (a5 < 1)
      goto LABEL_44;
    v44 = 0;
    v46 = *(int *)(a1 + 168);
    v45 = *(int *)(a1 + 172);
    v47 = *(int *)(a1 + 164);
    v48 = (unsigned int *)(a2 + 8);
    v49 = (_DWORD *)(v35 + 8);
    do
    {
      v60.i64[0] = *((_QWORD *)v48 - 1);
      v60.i64[1] = *v48;
      v50 = vsubq_f32(v60, *(float32x4_t *)(a1 + 16));
      v50.i32[3] = 0;
      v60 = vmulq_f32(v31, v50);
      *(v49 - 2) = (int)v60.f32[v46];
      *(v49 - 1) = (int)v60.f32[v45];
      *v49 = (int)v60.f32[v47];
      v49[1] = v44;
      v49 += 4;
      ++v44;
      v48 = (unsigned int *)((char *)v48 + a4);
    }
    while (a5 != v44);
  }
  if (a5 >= 2)
    sub_1B2206A58((uint64_t)v61, (uint64_t)&v60, 0, a5 - 1);
LABEL_44:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a5;
  v51 = *(_DWORD *)(a1 + 132);
  if (v51 < a5)
  {
    v52 = v51;
    if (*(_DWORD *)(a1 + 136) < a5)
    {
      if (a5)
      {
        v53 = sub_1B21FF5F0(8 * a5, 16);
        v51 = *(_DWORD *)(a1 + 132);
      }
      else
      {
        v53 = 0;
      }
      if (v51 >= 1)
      {
        v54 = 0;
        v55 = 8 * v51;
        do
        {
          *(_QWORD *)(v53 + v54) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + v54);
          v54 += 8;
        }
        while (v55 != v54);
      }
      v56 = *(_QWORD *)(a1 + 144);
      if (v56 && *(_BYTE *)(a1 + 152))
        sub_1B21FF5FC(v56);
      *(_BYTE *)(a1 + 152) = 1;
      *(_QWORD *)(a1 + 144) = v53;
      *(_DWORD *)(a1 + 136) = a5;
    }
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v52++) = 0;
    while (a5 != v52);
  }
  *(_DWORD *)(a1 + 132) = a5;
  if (a5 >= 1)
  {
    v57 = 0;
    do
    {
      sub_1B22040BC(a1 + 32);
      *(_QWORD *)(v58 + 16) = 0;
      *(_OWORD *)(v58 + 104) = *(_OWORD *)(v63 + 16 * v57);
      *(_DWORD *)(v58 + 120) = -1;
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v57++) = v58;
    }
    while (v57 != a5);
  }
  if (v63 && v64)
    sub_1B21FF5FC(v63);
  v64 = 1;
  v63 = 0;
  v62 = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 6 * a5;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = -3;
  memset(&v60, 0, 32);
  sub_1B2202510(a1, 0, a5, (uint64_t)&v60);
  *(_QWORD *)(a1 + 184) = v60.i64[0];
  if (v63)
  {
    if (v64)
      sub_1B21FF5FC(v63);
  }
}

double sub_1B22040BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v3 = sub_1B21FF5F0(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      v2 = sub_1B21FF5F0(v4 << 7, 16);
      *(_QWORD *)v3 = v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = (_QWORD *)(v2 + 128);
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B2244C80)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 16) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 16;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 32;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v2;
  result = 0.0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 120) = -1;
  return result;
}

float32x4_t sub_1B22041E4@<Q0>(float32x4_t *a1@<X0>, int *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t result;
  float32x4_t v16;

  v3 = a2[11];
  v5 = a1[10].i32[1];
  v4 = a1[10].i32[2];
  v16.f32[v4] = (float)a2[10];
  v6 = a1[10].i32[3];
  v16.f32[v6] = (float)v3;
  v16.f32[v5] = (float)a2[12];
  v7 = *a1;
  v8 = vmulq_f32(*a1, v16);
  v9 = a2[15];
  v16.f32[v4] = (float)a2[14];
  v16.f32[v6] = (float)v9;
  v16.f32[v5] = (float)a2[16];
  v10 = vmulq_f32(v16, v7);
  v11.i64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL).u64[0];
  v11.i64[1] = v8.i64[0];
  v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
  v12.i64[1] = v10.i64[0];
  v13 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v11)), v8, v12);
  v8.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v8.i64[1] = v13.u32[0];
  v14 = (int8x16_t)vmulq_f32(v8, v8);
  result = vmulq_n_f32(v8, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]));
  *a3 = result;
  return result;
}

void sub_1B220429C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B2204BAC((unint64_t *)(a1 + 40));
    sub_1B2204BAC((unint64_t *)(a1 + 88));
  }
}

void sub_1B22042EC(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B2204BAC((unint64_t *)(a1 + 56));
    sub_1B2204BAC((unint64_t *)(a1 + 88));
  }
}

void sub_1B220433C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B2204BAC((unint64_t *)(a1 + 72));
    sub_1B2204BAC((unint64_t *)(a1 + 88));
  }
}

float sub_1B220438C(float32x4_t *a1, float a2, float a3)
{
  uint64_t v3;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  int **v59;
  int v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  int **v70;
  int *v71;
  float v72;
  float32x4_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int **v80;
  int *v81;
  char v82;
  BOOL v83;
  float32x4_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  _BYTE v104[4];
  int v105;
  int v106;
  uint64_t v107;
  char v108;
  float32x4_t v109;
  float32x4_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119[4];
  unint64_t v120;
  uint64_t *v121;
  char v122;
  float32x4_t v123;

  v3 = a1[11].i64[1];
  if (!v3)
    return 0.0;
  v7 = a1[10].i32[0] - 1;
  a1[10].i32[0] = v7;
  v122 = 1;
  v120 = 0;
  *(_DWORD *)(v3 + 120) = v7;
  v8 = (uint64_t *)sub_1B21FF5F0(8, 16);
  v9 = 1;
  v10 = 0;
  v87 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v99 = 0;
  v100 = 0;
  v102 = 0;
  v15 = 0;
  v16 = 0;
  v121 = v8;
  *v8 = a1[11].i64[1];
  v17 = (_DWORD *)a1[11].i64[1];
  v18 = v17[26];
  v19 = v17[27];
  v20 = v17[28];
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  v85 = a1;
  v86 = (uint64_t)&a1[6];
  v111 = 0;
  v112 = 0;
  v97 = 1;
  do
  {
    v21 = v121[--v9];
    v22 = *(uint64_t **)(v21 + 16);
    if (v22)
    {
      v23 = v10;
      while (1)
      {
        v24 = v22[3];
        if (*(_DWORD *)(v24 + 120) == v7)
          goto LABEL_23;
        *(_DWORD *)(v24 + 120) = v7;
        LODWORD(v24) = v97;
        if (v9 == v97)
        {
          v25 = v97 ? 2 * v97 : 1;
          LODWORD(v24) = v97;
          if (v97 < v25)
            break;
        }
        v25 = v24;
LABEL_22:
        v121[v9++] = v22[3];
        v97 = v25;
LABEL_23:
        if (*((_DWORD *)v22 + 10) != v7)
        {
          v91 = v23;
          v94 = v15;
          v89 = v9;
          v96 = v11;
          v32 = sub_1B2204A10(v86);
          sub_1B2204B30((uint64_t)v32, v22[3], *(_DWORD **)(*(_QWORD *)(v22[2] + 8) + 24), (_DWORD *)v21);
          v33 = v96;
          if (v96 == v87)
          {
            v34 = 2 * v96;
            if (!v96)
              v34 = 1;
            v15 = v94;
            v35 = v91;
            if (v96 >= v34)
            {
              v87 = v96;
              v10 = v91;
            }
            else
            {
              v87 = v34;
              if (v34)
              {
                v36 = sub_1B21FF5F0(8 * v34, 16);
                v33 = v96;
                v10 = v36;
                v35 = v91;
              }
              else
              {
                v10 = 0;
              }
              if (v33 < 1)
              {
                if (v35)
                  goto LABEL_39;
              }
              else
              {
                v37 = v33;
                v38 = (_QWORD *)v10;
                v39 = (uint64_t *)v35;
                do
                {
                  v40 = *v39++;
                  *v38++ = v40;
                  --v37;
                }
                while (v37);
LABEL_39:
                v92 = v10;
                sub_1B21FF5FC(v35);
                v10 = v92;
                v33 = v96;
              }
LABEL_40:
              v15 = v94;
            }
            v41 = 0;
            v42 = 0;
            *(_QWORD *)(v10 + 8 * v33) = v32;
            v43 = v22;
            do
            {
              if (v41 && v42)
              {
                v44 = v41[26];
                v45 = v41[27];
                v46 = v41[28];
                v47 = v42[26];
                v48 = v42[27];
                v49 = v42[28];
                v50 = *(_DWORD *)(v21 + 104);
                v51 = *(_DWORD *)(v21 + 108);
                v52 = *(_DWORD *)(v21 + 112);
                v53 = ((v49 - v20) * (v45 - v19) - (v48 - v19) * (v46 - v20)) * (uint64_t)(v50 - v18)
                    + ((v48 - v19) * (v44 - v18) - (v47 - v18) * (v45 - v19)) * (uint64_t)(v52 - v20)
                    + ((v47 - v18) * (v46 - v20) - (v49 - v20) * (v44 - v18)) * (uint64_t)(v51 - v19);
                v13 = (v53 * (v50 + v18 + v44 + v47) + __PAIR128__(v13, v12)) >> 64;
                v12 += v53 * (v50 + v18 + v44 + v47);
                v54 = v53 * (v51 + v19 + v45 + v48);
                v55 = __CFADD__(v14, v54);
                v14 += v54;
                v56 = v99 + v55 + (v54 >> 63);
                v57 = v53 * (v52 + v20 + v46 + v49);
                v55 = __CFADD__(v100, v57);
                v99 = v56;
                v100 += v57;
                v102 += v55 + (v57 >> 63);
                v16 = (__PAIR128__(v16, v15) + v53) >> 64;
                v15 += v53;
              }
              *((_DWORD *)v43 + 10) = v7;
              v43[4] = (uint64_t)v32;
              v41 = v42;
              v42 = (_DWORD *)v43[3];
              v43 = *(uint64_t **)(v43[2] + 8);
            }
            while (v43 != v22);
            v11 = v33 + 1;
            v23 = v10;
            v9 = v89;
            goto LABEL_47;
          }
          v10 = v91;
          goto LABEL_40;
        }
        v10 = v23;
LABEL_47:
        v22 = (uint64_t *)*v22;
        if (v22 == *(uint64_t **)(v21 + 16))
          goto LABEL_48;
      }
      v95 = v11;
      v88 = v9;
      v93 = v15;
      v90 = v23;
      if (v25)
      {
        v26 = sub_1B21FF5F0(8 * v25, 16);
        LODWORD(v24) = v97;
        v27 = v26;
      }
      else
      {
        v27 = 0;
      }
      v28 = (uint64_t)v121;
      if ((int)v24 < 1)
      {
        if (!v121)
        {
LABEL_21:
          v121 = (uint64_t *)v27;
          v11 = v95;
          v9 = v88;
          v15 = v93;
          v23 = v90;
          goto LABEL_22;
        }
      }
      else
      {
        v24 = v24;
        v29 = (_QWORD *)v27;
        v30 = v121;
        do
        {
          v31 = *v30++;
          *v29++ = v31;
          --v24;
        }
        while (v24);
      }
      v98 = v27;
      sub_1B21FF5FC(v28);
      v27 = v98;
      goto LABEL_21;
    }
LABEL_48:
    ;
  }
  while (v9 > 0);
  v120 = __PAIR64__(v97, v9);
  v122 = 1;
  v117 = v12;
  v118 = v13;
  v115 = v14;
  v116 = v99;
  v113 = v100;
  v114 = v102;
  v58 = 0.0;
  v111 = v15;
  v112 = v16;
  if ((v16 & 0x8000000000000000) == 0 && v16 | v15)
  {
    v59 = (int **)v10;
    v60 = v11;
    v110.f32[v85[10].i32[2]] = sub_1B2204BAC(&v117);
    v110.f32[v85[10].i32[3]] = sub_1B2204BAC(&v115);
    v110.f32[v85[10].i32[1]] = sub_1B2204BAC(&v113);
    v61 = sub_1B2204BAC(&v111);
    v62 = *v85;
    v63 = vmulq_f32(vmulq_n_f32(v110, 0.25 / v61), *v85);
    v110 = v63;
    if (a3 <= 0.0)
    {
      v64 = v60;
      v10 = (uint64_t)v59;
    }
    else
    {
      v64 = v60;
      if (v60 < 1)
      {
        v69 = 3.4028e38;
        v10 = (uint64_t)v59;
      }
      else
      {
        v66 = v85[10].i32[2];
        v65 = v85[10].i32[3];
        v67 = v85[10].i32[1];
        v68 = v60;
        v69 = 3.4028e38;
        v101 = vnegq_f32(v63);
        v103 = v62;
        v70 = v59;
        do
        {
          sub_1B22041E4(v85, *v70, &v109);
          v71 = *v70++;
          v72 = (float)v71[7];
          v123.f32[v66] = (float)v71[6];
          v123.f32[v65] = v72;
          v123.f32[v67] = (float)v71[8];
          v73 = vmlaq_f32(v101, v103, v123);
          v73.i32[3] = 0;
          v74 = (int8x16_t)vmulq_f32(v109, v73);
          v69 = fminf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)).f32[0], v69);
          --v68;
        }
        while (v68);
        v58 = 0.0;
        v64 = v60;
        v10 = (uint64_t)v59;
        if (v69 <= 0.0)
          goto LABEL_76;
      }
      a2 = fminf(v69 * a3, a2);
    }
    if ((int)v64 < 1)
    {
      v58 = a2;
    }
    else
    {
      v75 = v64;
      v76 = 243703;
      v77 = v64;
      v78 = (uint64_t *)v10;
      do
      {
        v79 = *v78;
        *v78++ = *(_QWORD *)(v10 + 8 * (int)(v76 % v64));
        *(_QWORD *)(v10 + 8 * (int)(v76 % v64)) = v79;
        v76 = 1664525 * v76 + 1013904223;
        --v77;
      }
      while (v77);
      v80 = (int **)v10;
      while (1)
      {
        v81 = *v80;
        sub_1B1813528((uint64_t)v104, (uint64_t)v119);
        v82 = sub_1B2204C0C(v85, v81, (uint64_t)v104, a2);
        if (v107)
          v83 = v108 == 0;
        else
          v83 = 1;
        if (!v83)
          sub_1B21FF5FC(v107);
        v108 = 1;
        v107 = 0;
        v105 = 0;
        v106 = 0;
        if ((v82 & 1) == 0)
          break;
        ++v80;
        if (!--v75)
        {
          v58 = a2;
          goto LABEL_75;
        }
      }
      v58 = -a2;
LABEL_75:
      v10 = (uint64_t)v59;
    }
  }
LABEL_76:
  if (v10)
    sub_1B21FF5FC(v10);
  if (v121 && v122)
    sub_1B21FF5FC((uint64_t)v121);
  return v58;
}

_QWORD *sub_1B2204A10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64x2_t v7;
  int32x2_t v8;
  _QWORD *v9;
  int32x2_t v10;
  int32x2_t v11;
  _QWORD *v12;
  _QWORD *v13;

  result = *(_QWORD **)(a1 + 16);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v3 + 16);
      result = *(_QWORD **)v3;
    }
    else
    {
      v3 = sub_1B21FF5F0(24, 16);
      v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(_QWORD *)(v3 + 16) = 0;
      result = (_QWORD *)sub_1B21FF5F0(72 * v4, 16);
      *(_QWORD *)v3 = result;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
      *(_QWORD *)a1 = v3;
    }
    v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      v8 = (int32x2_t)0x100000000;
      v9 = result + 9;
      do
      {
        v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B2244C80)));
        v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if ((v10.i8[0] & 1) != 0)
        {
          if (v11.i32[0] >= (int)v5)
            v12 = 0;
          else
            v12 = v9;
          *(v9 - 9) = v12;
        }
        if ((v10.i8[4] & 1) != 0)
        {
          v13 = v9 + 9;
          if (v11.i32[1] >= (int)v5)
            v13 = 0;
          *v9 = v13;
        }
        v6 += 2;
        v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 18;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *result;
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t sub_1B2204B30(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(result + 8) = a2;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 104);
  v4 = (a3[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(_QWORD *)(result + 40) = (a3[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a3[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(_QWORD *)(result + 48) = v4;
  v5 = (a4[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(_QWORD *)(result + 56) = (a4[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a4[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(_QWORD *)(result + 64) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
    v7 = (_QWORD *)(v6 + 16);
  else
    v7 = (_QWORD *)(a2 + 24);
  *v7 = result;
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

float sub_1B2204BAC(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  _QWORD v4[2];

  v1 = a1[1];
  if ((v1 & 0x8000000000000000) == 0)
    return (float)*a1 + (float)((float)v1 * 1.8447e19);
  if (*a1)
    v3 = ~v1;
  else
    v3 = -(uint64_t)v1;
  v4[0] = -(uint64_t)*a1;
  v4[1] = v3;
  return -sub_1B2204BAC(v4);
}

uint64_t sub_1B2204C0C(float32x4_t *a1, int *a2, uint64_t a3, float a4)
{
  int *v7;
  float32x4_t v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  _QWORD *v30;
  int v31;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  _QWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  float v140;
  float v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  _QWORD *v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t i;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  int *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unsigned __int128 v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  int v271;
  _QWORD *v272;
  int v273;
  float32x4_t v274;
  _BYTE v275[21];
  float32x4_t v276;
  _BYTE v277[21];
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  float32x4_t v281;

  v7 = a2;
  sub_1B22041E4(a1, a2, &v276);
  v8 = vmulq_n_f32(v276, -a4);
  v8.i32[3] = 0;
  v281 = v8;
  if (a1->f32[0] != 0.0)
    v281.f32[0] = v8.f32[0] / a1->f32[0];
  v9 = a1->f32[1];
  if (v9 != 0.0)
    v281.f32[1] = v8.f32[1] / v9;
  v10 = a1->f32[2];
  if (v10 != 0.0)
    v281.f32[2] = v8.f32[2] / v10;
  v11 = (int)v281.f32[a1[10].i32[2]];
  v12 = (int)v281.f32[a1[10].i32[3]];
  v13 = (int)v281.f32[a1[10].i32[1]];
  if (v11)
    v14 = 0;
  else
    v14 = v12 == 0;
  if (v14 && v13 == 0)
    return 1;
  v17 = v7[15];
  v16 = v7[16];
  v19 = v7[11];
  v18 = v7[12];
  v20 = v7[14];
  v21 = v7[10];
  v278 = v16 * v19 - v17 * v18;
  v279 = v20 * v18 - v21 * v16;
  v280 = v21 * v17 - v20 * v19;
  v22 = v7[6];
  v23 = v7[7];
  v24 = v7[8];
  v259 = v22 + v11;
  v260 = v24 + v13;
  v261 = v23 + v12;
  v25 = v259 * v278 + v261 * v279 + v260 * v280;
  if (v25 >= (int)v22 * v278 + (int)v23 * v279 + (int)v24 * v280)
    return 0;
  v26 = *((_QWORD *)v7 + 1);
  v27 = *(_QWORD **)(v26 + 16);
  sub_1B2205FE4(v26, &v278, (uint64_t)&v276);
  v28 = sub_1B2201DEC((uint64_t)&v276, v25);
  if ((v28 & 0x80000000) == 0)
  {
    v29 = v28;
    v30 = v27;
    while (1)
    {
      sub_1B2205FE4(v27[3], &v278, (uint64_t)&v274);
      if ((sub_1B2201CEC((uint64_t)&v274, (uint64_t)&v276) & 0x80000000) != 0)
      {
        v31 = sub_1B2201DEC((uint64_t)&v274, v25);
        *(_QWORD *)&v277[13] = *(_QWORD *)&v275[13];
        v276 = v274;
        *(_OWORD *)v277 = *(_OWORD *)v275;
        v27 = (_QWORD *)v27[2];
        if (v31 < 0)
        {
          if (v27)
          {
            if (!v29)
              goto LABEL_186;
            goto LABEL_32;
          }
          return 0;
        }
        v29 = v31;
        v30 = v27;
      }
      v27 = (_QWORD *)v27[1];
      if (v27 == v30)
        return 0;
    }
  }
  v33 = v27;
  while (1)
  {
    sub_1B2205FE4(v27[3], &v278, (uint64_t)&v274);
    if ((int)sub_1B2201CEC((uint64_t)&v274, (uint64_t)&v276) >= 1)
      break;
LABEL_26:
    v27 = (_QWORD *)v27[1];
    if (v27 == v33)
      return 1;
  }
  v34 = sub_1B2201DEC((uint64_t)&v274, v25);
  if (v34 < 0)
  {
    *(_QWORD *)&v277[13] = *(_QWORD *)&v275[13];
    v276 = v274;
    *(_OWORD *)v277 = *(_OWORD *)v275;
    v27 = (_QWORD *)v27[2];
    v33 = v27;
    goto LABEL_26;
  }
  v29 = v34;
  if (!v34)
  {
LABEL_186:
    v183 = *(_QWORD **)v27[2];
    while (1)
    {
      sub_1B2205FE4(v183[3], &v278, (uint64_t)&v274);
      if ((int)sub_1B2201DEC((uint64_t)&v274, v25) > 0)
        break;
      v183 = (_QWORD *)*v183;
      if (v183 == (_QWORD *)v27[2])
        return 1;
    }
  }
LABEL_32:
  v35 = 0;
  v36 = 0;
  v257 = 0;
  v258 = v7;
  v236 = v25;
  while (2)
  {
    v37 = v36;
    v272 = v36;
    v271 = v29;
    if (v29
      || (v38 = *(_QWORD **)v27[2],
          sub_1B2205FE4(v38[3], &v278, (uint64_t)&v274),
          (sub_1B2201DEC((uint64_t)&v274, v25) & 0x80000000) == 0))
    {
LABEL_39:
      v42 = v27;
      v43 = v29;
      if (v257)
      {
        if (v27 == v257)
        {
          if (v29 < 1)
          {
            v186 = *(_DWORD *)(a3 + 4);
            if (v35 != (_QWORD *)v37[2])
            {
              v187 = *(_DWORD *)(a3 + 8);
              if (v186 == v187)
              {
                if (v186)
                  v187 = 2 * v186;
                else
                  v187 = 1;
                if (v186 >= v187)
                {
                  v187 = *(_DWORD *)(a3 + 4);
                }
                else
                {
                  if (v187)
                  {
                    v188 = sub_1B21FF5F0(8 * v187, 16);
                    v186 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    v188 = 0;
                  }
                  if (v186 >= 1)
                  {
                    v189 = 0;
                    do
                    {
                      *(_QWORD *)(v188 + v189) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v189);
                      v189 += 8;
                    }
                    while (8 * v186 != v189);
                  }
                  v190 = *(_QWORD *)(a3 + 16);
                  if (v190 && *(_BYTE *)(a3 + 24))
                  {
                    sub_1B21FF5FC(v190);
                    v186 = *(_DWORD *)(a3 + 4);
                  }
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = v188;
                  *(_DWORD *)(a3 + 8) = v187;
                  v37 = v36;
                }
              }
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v186) = v37[3];
              v191 = v186 + 1;
              *(_DWORD *)(a3 + 4) = v186 + 1;
              v192 = (_QWORD *)*v35;
              if (*v35 != v37[2])
              {
                do
                {
                  v193 = v192[3];
                  sub_1B2203B1C((uint64_t)a1, v192);
                  v194 = *(_DWORD *)(a3 + 4);
                  v195 = *(_DWORD *)(a3 + 8);
                  if (v194 == v195)
                  {
                    if (v194)
                      v195 = 2 * v194;
                    else
                      v195 = 1;
                    if (v194 >= v195)
                    {
                      v195 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v195)
                      {
                        v196 = sub_1B21FF5F0(8 * v195, 16);
                        v194 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v196 = 0;
                      }
                      if (v194 >= 1)
                      {
                        v197 = 0;
                        do
                        {
                          *(_QWORD *)(v196 + v197) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v197);
                          v197 += 8;
                        }
                        while (8 * v194 != v197);
                      }
                      v198 = *(_QWORD *)(a3 + 16);
                      if (v198 && *(_BYTE *)(a3 + 24))
                      {
                        sub_1B21FF5FC(v198);
                        v194 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v196;
                      *(_DWORD *)(a3 + 8) = v195;
                      v37 = v36;
                    }
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v194) = v193;
                  v191 = v194 + 1;
                  *(_DWORD *)(a3 + 4) = v191;
                  v192 = (_QWORD *)*v35;
                }
                while (*v35 != v37[2]);
                v187 = v195;
              }
              if (v191 == v187)
              {
                if (v187)
                  v199 = 2 * v187;
                else
                  v199 = 1;
                if (v187 < v199)
                {
                  if (v199)
                  {
                    v200 = sub_1B21FF5F0(8 * v199, 16);
                    v187 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    v200 = 0;
                  }
                  if (v187 >= 1)
                  {
                    v201 = 0;
                    do
                    {
                      *(_QWORD *)(v200 + v201) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v201);
                      v201 += 8;
                    }
                    while (8 * v187 != v201);
                  }
                  v202 = *(_QWORD *)(a3 + 16);
                  if (v202 && *(_BYTE *)(a3 + 24))
                  {
                    sub_1B21FF5FC(v202);
                    v187 = *(_DWORD *)(a3 + 4);
                  }
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = v200;
                  *(_DWORD *)(a3 + 8) = v199;
                }
                v191 = v187;
              }
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v191) = 0;
              v186 = v191 + 1;
              *(_DWORD *)(a3 + 4) = v191 + 1;
            }
          }
          else
          {
            *(_QWORD *)(v35[2] + 24) = v37[3];
            v184 = (_QWORD *)v257[2];
            *v184 = v35;
            v35[1] = v184;
            v185 = v37[2];
            *v35 = v185;
            *(_QWORD *)(v185 + 8) = v35;
            v186 = *(_DWORD *)(a3 + 4);
          }
          a1[11].i64[1] = **(_QWORD **)(a3 + 16);
          if (v186 >= 1)
          {
            LODWORD(v203) = 0;
            do
            {
              v273 = v186;
              do
              {
                v204 = (uint64_t *)(*(_QWORD *)(a3 + 16) + 8 * (int)v203);
                LODWORD(v203) = v203 + 2;
                v205 = (_QWORD *)v204[1];
                if (v205)
                {
                  v206 = 0;
                  v207 = *v204;
                  v208 = *v204 + 24;
                  v203 = (int)v203;
LABEL_250:
                  v209 = v203;
                  do
                  {
                    v210 = v205 + 3;
                    v211 = *(_QWORD *)(v207 + 32);
                    if (v211)
                      v212 = (_QWORD *)(v211 + 16);
                    else
                      v212 = (_QWORD *)v208;
                    *v212 = v205[3];
                    v213 = v205[4];
                    if (v213)
                      *(_QWORD *)(v207 + 32) = v213;
                    for (i = *v210; i; i = *(_QWORD *)(i + 16))
                      *(_QWORD *)(i + 8) = v207;
                    *v210 = 0;
                    v205[4] = 0;
                    v215 = v205[2];
                    if (v215)
                    {
                      if ((v206 & 1) == 0)
                      {
                        v217 = *(_DWORD *)(a3 + 4);
                        if (v217 == *(_DWORD *)(a3 + 8))
                        {
                          v218 = v217 ? 2 * v217 : 1;
                          if (v217 < v218)
                          {
                            if (v218)
                            {
                              v219 = sub_1B21FF5F0(8 * v218, 16);
                              v217 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              v219 = 0;
                            }
                            if (v217 >= 1)
                            {
                              v220 = 0;
                              do
                              {
                                *(_QWORD *)(v219 + v220) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v220);
                                v220 += 8;
                              }
                              while (8 * v217 != v220);
                            }
                            v221 = *(_QWORD *)(a3 + 16);
                            if (v221 && *(_BYTE *)(a3 + 24))
                            {
                              sub_1B21FF5FC(v221);
                              v217 = *(_DWORD *)(a3 + 4);
                            }
                            *(_BYTE *)(a3 + 24) = 1;
                            *(_QWORD *)(a3 + 16) = v219;
                            *(_DWORD *)(a3 + 8) = v218;
                          }
                        }
                        *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v217) = v207;
                        *(_DWORD *)(a3 + 4) = v217 + 1;
                        v215 = v205[2];
                      }
                      do
                      {
                        v222 = *(_DWORD *)(a3 + 4);
                        if (v222 == *(_DWORD *)(a3 + 8))
                        {
                          v223 = v222 ? 2 * v222 : 1;
                          if (v222 < v223)
                          {
                            if (v223)
                            {
                              v224 = sub_1B21FF5F0(8 * v223, 16);
                              v222 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              v224 = 0;
                            }
                            if (v222 >= 1)
                            {
                              v225 = 0;
                              do
                              {
                                *(_QWORD *)(v224 + v225) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v225);
                                v225 += 8;
                              }
                              while (8 * v222 != v225);
                            }
                            v226 = *(_QWORD *)(a3 + 16);
                            if (v226 && *(_BYTE *)(a3 + 24))
                            {
                              sub_1B21FF5FC(v226);
                              v222 = *(_DWORD *)(a3 + 4);
                            }
                            *(_BYTE *)(a3 + 24) = 1;
                            *(_QWORD *)(a3 + 16) = v224;
                            *(_DWORD *)(a3 + 8) = v223;
                          }
                        }
                        *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v222) = *(_QWORD *)(v215 + 24);
                        *(_DWORD *)(a3 + 4) = v222 + 1;
                        sub_1B2203B1C((uint64_t)a1, (_QWORD *)v205[2]);
                        v215 = v205[2];
                      }
                      while (v215);
                      v203 = v209 + 1;
                      v216 = *(_QWORD *)(a3 + 16);
                      v205 = *(_QWORD **)(v216 + 8 * v209);
                      v206 = 1;
                      if (!v205)
                      {
                        v186 = v273;
                        goto LABEL_297;
                      }
                      goto LABEL_250;
                    }
                    LODWORD(v203) = v209 + 1;
                    v216 = *(_QWORD *)(a3 + 16);
                    v205 = *(_QWORD **)(v216 + 8 * v209++);
                  }
                  while (v205);
                  v186 = v273;
                  if ((v206 & 1) == 0)
                    continue;
LABEL_297:
                  v227 = *(_DWORD *)(a3 + 4);
                  if (v227 == *(_DWORD *)(a3 + 8))
                  {
                    v228 = v227 ? 2 * v227 : 1;
                    if (v227 < v228)
                    {
                      if (v228)
                      {
                        v216 = sub_1B21FF5F0(8 * v228, 16);
                        v227 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v216 = 0;
                      }
                      if (v227 >= 1)
                      {
                        v229 = 0;
                        do
                        {
                          *(_QWORD *)(v216 + v229) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v229);
                          v229 += 8;
                        }
                        while (8 * v227 != v229);
                      }
                      v230 = *(_QWORD *)(a3 + 16);
                      if (v230 && *(_BYTE *)(a3 + 24))
                      {
                        sub_1B21FF5FC(v230);
                        v227 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v216;
                      *(_DWORD *)(a3 + 8) = v228;
                    }
                  }
                  *(_QWORD *)(v216 + 8 * v227) = 0;
                  *(_DWORD *)(a3 + 4) = v227 + 1;
                }
              }
              while ((int)v203 < v186);
              v186 = *(_DWORD *)(a3 + 4);
            }
            while ((int)v203 < v186);
            v231 = v258;
            v233 = v261 << 32;
            v232 = v260 | 0xFFFFFFFF00000000;
            if (v186 <= 0)
            {
LABEL_319:
              if (v186 < 0)
              {
                if ((*(_DWORD *)(a3 + 8) & 0x80000000) != 0)
                {
                  v234 = *(_QWORD *)(a3 + 16);
                  if (v234 && *(_BYTE *)(a3 + 24))
                    sub_1B21FF5FC(v234);
                  *(_BYTE *)(a3 + 24) = 1;
                  *(_QWORD *)(a3 + 16) = 0;
                  *(_DWORD *)(a3 + 8) = 0;
                }
                v235 = v186;
                do
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v235++) = 0;
                while ((_DWORD)v235);
              }
            }
            *(_DWORD *)(a3 + 4) = 0;
            *((_QWORD *)v231 + 3) = v233 | v259;
            *((_QWORD *)v231 + 4) = v232;
            return 1;
          }
          v231 = v258;
          v233 = v261 << 32;
          v232 = v260 | 0xFFFFFFFF00000000;
          goto LABEL_319;
        }
        v42 = v257;
      }
      v257 = v42;
      v270 = v27;
      v27 = (_QWORD *)v27[2];
      do
      {
        v27 = *(_QWORD **)(v27[2] + 8);
        sub_1B2205FE4(v27[3], &v278, (uint64_t)&v274);
        v44 = sub_1B2201DEC((uint64_t)&v274, v25);
      }
      while (v44 < 0);
      v29 = v44;
      if (!v44)
      {
LABEL_115:
        v158 = v27[3];
        if (!(v29 | v43))
        {
          v36 = *(_QWORD **)v270[2];
          if (v36[3] == v158)
          {
LABEL_126:
            if (v37)
            {
              v165 = (_QWORD *)v37[2];
              if (v43 < 1)
              {
                if (v36 != v165)
                {
                  v166 = *(_DWORD *)(a3 + 4);
                  v167 = *(_DWORD *)(a3 + 8);
                  if (v166 == v167)
                  {
                    if (v166)
                      v167 = 2 * v166;
                    else
                      v167 = 1;
                    if (v166 >= v167)
                    {
                      v167 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v167)
                      {
                        v168 = sub_1B21FF5F0(8 * v167, 16);
                        v166 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v168 = 0;
                      }
                      if (v166 >= 1)
                      {
                        v169 = 0;
                        do
                        {
                          *(_QWORD *)(v168 + v169) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v169);
                          v169 += 8;
                        }
                        while (8 * v166 != v169);
                      }
                      v170 = *(_QWORD *)(a3 + 16);
                      if (v170 && *(_BYTE *)(a3 + 24))
                      {
                        sub_1B21FF5FC(v170);
                        v166 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v168;
                      *(_DWORD *)(a3 + 8) = v167;
                      v37 = v272;
                    }
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v166) = v37[3];
                  v171 = v166 + 1;
                  *(_DWORD *)(a3 + 4) = v171;
                  v172 = (_QWORD *)*v36;
                  if (*v36 != v37[2])
                  {
                    do
                    {
                      v173 = v172[3];
                      sub_1B2203B1C((uint64_t)a1, v172);
                      v174 = *(_DWORD *)(a3 + 4);
                      v175 = *(_DWORD *)(a3 + 8);
                      if (v174 == v175)
                      {
                        if (v174)
                          v175 = 2 * v174;
                        else
                          v175 = 1;
                        if (v174 >= v175)
                        {
                          v175 = *(_DWORD *)(a3 + 4);
                        }
                        else
                        {
                          if (v175)
                          {
                            v176 = sub_1B21FF5F0(8 * v175, 16);
                            v174 = *(_DWORD *)(a3 + 4);
                          }
                          else
                          {
                            v176 = 0;
                          }
                          if (v174 >= 1)
                          {
                            v177 = 0;
                            do
                            {
                              *(_QWORD *)(v176 + v177) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v177);
                              v177 += 8;
                            }
                            while (8 * v174 != v177);
                          }
                          v178 = *(_QWORD *)(a3 + 16);
                          if (v178 && *(_BYTE *)(a3 + 24))
                          {
                            sub_1B21FF5FC(v178);
                            v174 = *(_DWORD *)(a3 + 4);
                          }
                          *(_BYTE *)(a3 + 24) = 1;
                          *(_QWORD *)(a3 + 16) = v176;
                          *(_DWORD *)(a3 + 8) = v175;
                          v37 = v272;
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v174) = v173;
                      v171 = v174 + 1;
                      *(_DWORD *)(a3 + 4) = v171;
                      v172 = (_QWORD *)*v36;
                    }
                    while (*v36 != v37[2]);
                    v167 = v175;
                    v7 = v258;
                  }
                  if (v171 == v167)
                  {
                    if (v167)
                      v179 = 2 * v167;
                    else
                      v179 = 1;
                    if (v167 >= v179)
                    {
                      v171 = v167;
                    }
                    else
                    {
                      if (v179)
                      {
                        v180 = sub_1B21FF5F0(8 * v179, 16);
                        v167 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        v180 = 0;
                      }
                      if (v167 >= 1)
                      {
                        v181 = 0;
                        do
                        {
                          *(_QWORD *)(v180 + v181) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v181);
                          v181 += 8;
                        }
                        while (8 * v167 != v181);
                      }
                      v182 = *(_QWORD *)(a3 + 16);
                      if (v182 && *(_BYTE *)(a3 + 24))
                      {
                        sub_1B21FF5FC(v182);
                        v167 = *(_DWORD *)(a3 + 4);
                      }
                      *(_BYTE *)(a3 + 24) = 1;
                      *(_QWORD *)(a3 + 16) = v180;
                      v171 = v167;
                      *(_DWORD *)(a3 + 8) = v179;
                    }
                    v7 = v258;
                  }
                  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v171) = 0;
                  *(_DWORD *)(a3 + 4) = v171 + 1;
                }
              }
              else
              {
                *v36 = v165;
                v165[1] = v36;
              }
            }
            v36[4] = v7;
            *(_QWORD *)(v36[2] + 32) = v27[4];
            if (!v35)
              v35 = v36;
            continue;
          }
        }
        v159 = (_QWORD *)sub_1B2201F74(a1, v270[3], v158);
        if (v43)
        {
          v36 = v159;
          if (!v37)
          {
LABEL_122:
            if (v29)
            {
              v162 = (_QWORD *)v36[2];
              v163 = v27[2];
            }
            else
            {
              v163 = v27[2];
              v164 = *(_QWORD **)(v163 + 8);
              v162 = (_QWORD *)v36[2];
              *v164 = v162;
              v162[1] = v164;
            }
            *v162 = v163;
            *(_QWORD *)(v163 + 8) = v162;
            goto LABEL_126;
          }
          v160 = (uint64_t *)v270[2];
        }
        else
        {
          v160 = (uint64_t *)v270[2];
          v161 = *v160;
          *v159 = *v160;
          *(_QWORD *)(v161 + 8) = v159;
          v36 = v159;
        }
        *v160 = (uint64_t)v36;
        v36[1] = v160;
        goto LABEL_122;
      }
      v46 = (_QWORD *)v27[2];
      v45 = v27[3];
      v47 = (_QWORD *)v46[1];
      v238 = v35;
      if (v47 == v46)
      {
        v47 = 0;
      }
      else
      {
        v48 = *v46;
        *v47 = *v46;
        *(_QWORD *)(v48 + 8) = v47;
        *v46 = v46;
        v46[1] = v46;
      }
      v237 = v45;
      *(_QWORD *)(v45 + 16) = v47;
      v49 = (int *)v27[4];
      v51 = v49[15];
      v50 = v49[16];
      v53 = v49[11];
      v52 = v49[12];
      v54 = v49[14];
      v55 = v49[10];
      v56 = v50 * v53 - v51 * v52;
      v57 = v54 * v52 - v55 * v50;
      v58 = v55 * v51 - v54 * v53;
      v59 = (int *)v46[4];
      v60 = v59[15];
      v61 = v59[16];
      v254 = v46;
      v62 = v59[10];
      v63 = v59[11];
      v64 = v59[12];
      v65 = v59[14];
      v66 = v61 * v63 - v60 * v64;
      v67 = v65 * v64 - v62 * v61;
      v68 = v62 * v60 - v65 * v63;
      v69 = v7[10];
      v70 = v7[11];
      v71 = v7[12];
      v72 = v7[14];
      v73 = v7[15];
      v74 = v7[16];
      v75 = v72 * v56 + v73 * v57 + v74 * v58;
      v265 = v75;
      v76 = v69 * v66 + v70 * v67 + v71 * v68;
      v267 = v76;
      v268 = v69 * v56 + v70 * v57 + v71 * v58;
      v262 = (v49[6] - (uint64_t)(int)v259) * v56
           + (v49[7] - (uint64_t)(int)v261) * v57
           + (v49[8] - (uint64_t)(int)v260) * v58;
      v263 = (v59[6] - (uint64_t)(int)v259) * v66
           + (v59[7] - (uint64_t)(int)v261) * v67
           + (v59[8] - (uint64_t)(int)v260) * v68;
      v77 = v72 * v66 + v73 * v67 + v74 * v68;
      v255 = v77;
      v78 = sub_1B2201BE4(v268, v77);
      v80 = v79;
      v81 = sub_1B2201BE4(v75, v76);
      v83 = v80 + ~v82;
      if (!v81)
        v83 = v80 - v82;
      v253 = v78 - v81;
      if (v78 - v81 < v78)
        ++v83;
      v274.i64[0] = v78 - v81;
      v274.i64[1] = v83;
      sub_1B22040BC((uint64_t)&a1[2]);
      v252 = v84;
      *(_QWORD *)(v84 + 116) = -1;
      v85 = v7[10];
      v248 = sub_1B2201BE4(v262 * v85, v77);
      v250 = v86;
      v87 = sub_1B2201BE4(v263 * v85, v265);
      v88 = v7;
      v90 = v89;
      v246 = ~v89;
      v91 = v248 - v87;
      v92 = v88[14];
      v93 = sub_1B2201BE4(v263 * v92, v268);
      v241 = v94;
      v243 = v93;
      v95 = sub_1B2201BE4(v262 * v92, v267);
      v97 = v96;
      v98 = sub_1B2201B30((uint64_t *)&v274, v259);
      v100 = v250 - v90;
      if (v87)
        v100 = v250 + v246;
      v101 = v100 + v241;
      v102 = v101 - v97;
      v103 = v101 + ~v97;
      if (v91 < v248)
        v103 = v102;
      v249 = (__PAIR128__((__PAIR128__(v103 + v99, v243) + __PAIR128__(v95 == 0, v91)) >> 64, v98)
            + __PAIR128__(v243 + v91 >= v95, v243 + v91 - v95)) >> 64;
      v251 = v98 + v243 + v91 - v95;
      v104 = v258[11];
      v244 = sub_1B2201BE4(v262 * v104, v255);
      v247 = v105;
      v106 = sub_1B2201BE4(v263 * v104, v265);
      v108 = v107;
      v240 = ~v107;
      v242 = v244 - v106;
      v109 = v258[15];
      v110 = sub_1B2201BE4(v263 * v109, v268);
      v239 = v111;
      v112 = sub_1B2201BE4(v262 * v109, v267);
      v114 = v113;
      v115 = sub_1B2201B30((uint64_t *)&v274, v261);
      v117 = v247 - v108;
      if (v106)
        v117 = v247 + v240;
      v118 = v117 + v239;
      v119 = v118 - v114;
      v120 = v118 + ~v114;
      if (v242 < v244)
        v120 = v119;
      v245 = __PAIR128__((__PAIR128__(v120 + v116, v110) + __PAIR128__(v112 == 0, v242)) >> 64, v115)
           + __PAIR128__(v110 + v242 >= v112, v110 + v242 - v112);
      v121 = v258[12];
      v122 = sub_1B2201BE4(v262 * v121, v255);
      v256 = v123;
      v124 = sub_1B2201BE4(v263 * v121, v265);
      v126 = v125;
      v266 = ~v125;
      v127 = v258[16];
      v269 = sub_1B2201BE4(v263 * v127, v268);
      v264 = v128;
      v129 = sub_1B2201BE4(v262 * v127, v267);
      v131 = v130;
      v132 = sub_1B2201B30((uint64_t *)&v274, v260);
      v134 = v256 - v126;
      if (v124)
        v134 = v256 + v266;
      v135 = v134 + v264;
      v136 = v135 - v131;
      v137 = v135 + ~v131;
      if (v122 - v124 < v122)
        v137 = v136;
      v138 = v274.i64[1];
      *(_QWORD *)(v252 + 40) = v251;
      *(_QWORD *)(v252 + 48) = v249;
      *(_QWORD *)(v252 + 56) = v245;
      *(_QWORD *)(v252 + 72) = v132 + v269 + v122 - v124 - v129;
      *(_QWORD *)(v252 + 64) = *((_QWORD *)&v245 + 1);
      *(_QWORD *)(v252 + 80) = (__PAIR128__((__PAIR128__(v129 == 0, v269) + __PAIR128__(v137 + v133, v122 - v124)) >> 64, v132)+ __PAIR128__(v269 + v122 - v124 >= v129, v269 + v122 - v124 - v129)) >> 64;
      *(_QWORD *)(v252 + 88) = v253;
      *(_QWORD *)(v252 + 96) = v138;
      v139 = sub_1B2204BAC((unint64_t *)(v252 + 40));
      *(_DWORD *)(v252 + 104) = (int)(float)(v139 / sub_1B2204BAC((unint64_t *)(v252 + 88)));
      v140 = sub_1B2204BAC((unint64_t *)(v252 + 56));
      *(_DWORD *)(v252 + 108) = (int)(float)(v140 / sub_1B2204BAC((unint64_t *)(v252 + 88)));
      v141 = sub_1B2204BAC((unint64_t *)(v252 + 72));
      *(_DWORD *)(v252 + 112) = (int)(float)(v141 / sub_1B2204BAC((unint64_t *)(v252 + 88)));
      v27[3] = v252;
      *(_QWORD *)(v252 + 16) = v254;
      v142 = *(_DWORD *)(a3 + 4);
      v143 = *(_DWORD *)(a3 + 8);
      if (v142 == v143)
      {
        if (v142)
          v143 = 2 * v142;
        else
          v143 = 1;
        if (v142 < v143)
        {
          v144 = v237;
          v35 = v238;
          v25 = v236;
          if (v143)
          {
            v145 = sub_1B21FF5F0(8 * v143, 16);
            v142 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v145 = 0;
          }
          if (v142 >= 1)
          {
            v146 = 0;
            do
            {
              *(_QWORD *)(v145 + v146) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v146);
              v146 += 8;
            }
            while (8 * v142 != v146);
          }
          v147 = *(_QWORD *)(a3 + 16);
          if (v147 && *(_BYTE *)(a3 + 24))
          {
            sub_1B21FF5FC(v147);
            v142 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v145;
          *(_DWORD *)(a3 + 8) = v143;
          goto LABEL_81;
        }
        v143 = *(_DWORD *)(a3 + 4);
      }
      v144 = v237;
      v35 = v238;
      v25 = v236;
LABEL_81:
      v37 = v272;
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v142) = v252;
      v148 = v142 + 1;
      *(_DWORD *)(a3 + 4) = v148;
      if (v148 == v143)
      {
        if (v143)
          v149 = 2 * v143;
        else
          v149 = 1;
        if (v143 >= v149)
        {
          v149 = v143;
          v148 = v143;
        }
        else
        {
          if (v149)
          {
            v150 = sub_1B21FF5F0(8 * v149, 16);
            v143 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v150 = 0;
          }
          if (v143 >= 1)
          {
            v151 = 0;
            do
            {
              *(_QWORD *)(v150 + v151) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v151);
              v151 += 8;
            }
            while (8 * v143 != v151);
          }
          v152 = *(_QWORD *)(a3 + 16);
          if (v152 && *(_BYTE *)(a3 + 24))
          {
            sub_1B21FF5FC(v152);
            v143 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v150;
          v148 = v143;
          *(_DWORD *)(a3 + 8) = v149;
          v37 = v272;
        }
      }
      else
      {
        v149 = v143;
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v148) = v144;
      v153 = v148 + 1;
      *(_DWORD *)(a3 + 4) = v153;
      if (v153 == v149)
      {
        if (v149)
          v154 = 2 * v149;
        else
          v154 = 1;
        if (v149 >= v154)
        {
          v153 = v149;
        }
        else
        {
          if (v154)
          {
            v155 = sub_1B21FF5F0(8 * v154, 16);
            v149 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            v155 = 0;
          }
          if (v149 >= 1)
          {
            v156 = 0;
            do
            {
              *(_QWORD *)(v155 + v156) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v156);
              v156 += 8;
            }
            while (8 * v149 != v156);
          }
          v157 = *(_QWORD *)(a3 + 16);
          if (v157 && *(_BYTE *)(a3 + 24))
          {
            sub_1B21FF5FC(v157);
            v149 = *(_DWORD *)(a3 + 4);
          }
          *(_BYTE *)(a3 + 24) = 1;
          *(_QWORD *)(a3 + 16) = v155;
          v153 = v149;
          *(_DWORD *)(a3 + 8) = v154;
          v37 = v272;
        }
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v153) = 0;
      *(_DWORD *)(a3 + 4) = v153 + 1;
      v7 = v258;
      v43 = v271;
      goto LABEL_115;
    }
    break;
  }
  v39 = v38;
  while (1)
  {
    v40 = (_QWORD *)*v39;
    if ((_QWORD *)*v39 == v38)
      return 1;
    v27 = (_QWORD *)v39[2];
    sub_1B2205FE4(v40[3], &v278, (uint64_t)&v274);
    v41 = sub_1B2201DEC((uint64_t)&v274, v25);
    v39 = v40;
    if ((v41 & 0x80000000) == 0)
    {
      v37 = v36;
      goto LABEL_39;
    }
  }
}

void sub_1B2205FE4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;

  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    v6 = sub_1B2201B30((uint64_t *)(a1 + 40), *a2);
    v8 = v7;
    v9 = sub_1B2201B30((uint64_t *)(a1 + 56), a2[1]);
    v11 = __CFADD__(v9, v6);
    v12 = v9 + v6;
    v13 = v11;
    v14 = v10 + v8;
    v15 = sub_1B2201B30((uint64_t *)(a1 + 72), a2[2]);
    v17 = __PAIR128__(v14 + v16, v15) + __PAIR128__(v13, v12);
    sub_1B2206980(a3, &v17, (_OWORD *)(a1 + 88));
  }
  else
  {
    sub_1B2206928(a3, *a2 * *(int *)(a1 + 104) + a2[1] * *(int *)(a1 + 108) + a2[2] * *(int *)(a1 + 112));
  }
}

float sub_1B22060B8(uint64_t a1, uint64_t a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  int *v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  _BYTE v96[4];
  int v97;
  int v98;
  uint64_t v99;
  char v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t *v103[3];
  int v104;
  uint64_t *v105[3];
  int v106;
  uint64_t *v107[3];
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  char v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  float32x4_t v117;

  if (a5 > 0)
  {
    v11 = *(float *)&a7;
    v12 = *(float *)&a6;
    memset(v103, 0, sizeof(v103));
    v104 = 256;
    v112 = 1;
    memset(v105, 0, sizeof(v105));
    v106 = 256;
    memset(v107, 0, sizeof(v107));
    v111 = 0;
    v109 = 0;
    v110 = 0;
    v108 = 256;
    sub_1B2203BB4((uint64_t)&v101, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v13 = 0.0;
    if (v12 > 0.0)
    {
      v13 = sub_1B220438C(&v101, v12, v11);
      if (v13 < 0.0)
      {
        v14 = *(_QWORD *)(a1 + 16);
        if (v14 && *(_BYTE *)(a1 + 24))
          sub_1B21FF5FC(v14);
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 4) = 0;
        *(_DWORD *)(a1 + 8) = 0;
        v15 = *(_QWORD *)(a1 + 48);
        if (v15 && *(_BYTE *)(a1 + 56))
          sub_1B21FF5FC(v15);
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 36) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        v16 = *(_QWORD *)(a1 + 80);
        if (v16 && *(_BYTE *)(a1 + 88))
          sub_1B21FF5FC(v16);
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 68) = 0;
        *(_DWORD *)(a1 + 72) = 0;
        goto LABEL_131;
      }
    }
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      v17 = *(_QWORD *)(a1 + 16);
      if (v17 && *(_BYTE *)(a1 + 24))
        sub_1B21FF5FC(v17);
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 4) = 0;
    v18 = *(int *)(a1 + 36);
    if ((v18 & 0x80000000) != 0)
    {
      if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
      {
        v19 = *(_QWORD *)(a1 + 48);
        if (v19 && *(_BYTE *)(a1 + 56))
          sub_1B21FF5FC(v19);
        *(_BYTE *)(a1 + 56) = 1;
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 40) = 0;
      }
      v20 = 12 * v18;
      v21 = v18 + 1;
      do
      {
        v22 = *(_QWORD *)(a1 + 48) + v20;
        *(_DWORD *)(v22 + 8) = 0;
        *(_QWORD *)v22 = 0;
        v20 += 12;
        LODWORD(v22) = v21++;
      }
      while ((_DWORD)v22);
    }
    *(_DWORD *)(a1 + 36) = 0;
    v23 = *(int *)(a1 + 68);
    if ((v23 & 0x80000000) != 0)
    {
      if ((*(_DWORD *)(a1 + 72) & 0x80000000) != 0)
      {
        v24 = *(_QWORD *)(a1 + 80);
        if (v24 && *(_BYTE *)(a1 + 88))
          sub_1B21FF5FC(v24);
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      bzero((void *)(*(_QWORD *)(a1 + 80) + 4 * v23), 4 * ~(_DWORD)v23 + 4);
    }
    *(_DWORD *)(a1 + 68) = 0;
    v100 = 1;
    v99 = 0;
    v97 = 0;
    v98 = 0;
    sub_1B2206838(v116, (uint64_t)v96);
    v25 = v97;
    if (v97 <= 0)
    {
      v74 = v99;
      if (!v99)
        goto LABEL_131;
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(v99 + 8 * v26);
        sub_1B220429C(v27);
        v117.i32[v114] = v28;
        sub_1B22042EC(v27);
        v117.i32[v115] = v29;
        sub_1B220433C(v27);
        v117.i32[v113] = v30;
        v31 = v117;
        v33 = v101;
        v32 = v102;
        v34 = *(_DWORD *)(a1 + 4);
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v35 = v34 ? 2 * v34 : 1;
          if (v34 < v35)
          {
            v93 = v102;
            v94 = v101;
            v95 = v117;
            if (v35)
            {
              v36 = sub_1B21FF5F0(16 * v35, 16);
              v33 = v94;
              v31 = v95;
              v37 = v36;
              v34 = *(_DWORD *)(a1 + 4);
            }
            else
            {
              v37 = 0;
            }
            if (v34 >= 1)
            {
              v38 = 0;
              v39 = 16 * v34;
              do
              {
                *(_OWORD *)(v37 + v38) = *(_OWORD *)(*(_QWORD *)(a1 + 16) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
            v40 = *(_QWORD *)(a1 + 16);
            if (v40 && *(_BYTE *)(a1 + 24))
            {
              sub_1B21FF5FC(v40);
              v33 = v94;
              v31 = v95;
            }
            *(_BYTE *)(a1 + 24) = 1;
            *(_QWORD *)(a1 + 16) = v37;
            *(_DWORD *)(a1 + 8) = v35;
            v34 = *(_DWORD *)(a1 + 4);
            v32 = v93;
          }
        }
        *(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v34) = vmlaq_f32(v32, v31, v33);
        ++*(_DWORD *)(a1 + 4);
        v41 = *(uint64_t **)(v27 + 16);
        if (v41)
        {
          v42 = 0xFFFFFFFFLL;
          v43 = -1;
          v44 = *(uint64_t **)(v27 + 16);
          do
          {
            if ((v44[5] & 0x80000000) != 0)
            {
              v45 = *(_DWORD *)(a1 + 36);
              v46 = v45;
              if (v45 == *(_DWORD *)(a1 + 40))
              {
                v47 = v45 ? 2 * v45 : 1;
                v46 = *(_DWORD *)(a1 + 36);
                if (v45 < v47)
                {
                  if (v47)
                    v48 = sub_1B21FF5F0(12 * v47, 16);
                  else
                    v48 = 0;
                  v49 = *(_DWORD *)(a1 + 36);
                  if (v49 >= 1)
                  {
                    v50 = 0;
                    v51 = 12 * v49;
                    do
                    {
                      v52 = v48 + v50;
                      v53 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v50);
                      v54 = *v53;
                      *(_DWORD *)(v52 + 8) = *((_DWORD *)v53 + 2);
                      *(_QWORD *)v52 = v54;
                      v50 += 12;
                    }
                    while (v51 != v50);
                  }
                  v55 = *(_QWORD *)(a1 + 48);
                  if (v55 && *(_BYTE *)(a1 + 56))
                    sub_1B21FF5FC(v55);
                  *(_BYTE *)(a1 + 56) = 1;
                  *(_QWORD *)(a1 + 48) = v48;
                  *(_DWORD *)(a1 + 40) = v47;
                  v46 = *(_DWORD *)(a1 + 36);
                }
              }
              v56 = *(_QWORD *)(a1 + 48) + 12 * v46;
              *(_DWORD *)(v56 + 8) = 0;
              *(_QWORD *)v56 = 0;
              v57 = *(_DWORD *)(a1 + 40);
              v58 = *(_DWORD *)(a1 + 36) + 1;
              *(_DWORD *)(a1 + 36) = v58;
              if (v58 == v57)
              {
                v59 = v58 ? 2 * v58 : 1;
                if (v58 < v59)
                {
                  if (v59)
                  {
                    v60 = sub_1B21FF5F0(12 * v59, 16);
                    v58 = *(_DWORD *)(a1 + 36);
                  }
                  else
                  {
                    v60 = 0;
                  }
                  if (v58 >= 1)
                  {
                    v61 = 0;
                    v62 = 12 * v58;
                    do
                    {
                      v63 = v60 + v61;
                      v64 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v61);
                      v65 = *v64;
                      *(_DWORD *)(v63 + 8) = *((_DWORD *)v64 + 2);
                      *(_QWORD *)v63 = v65;
                      v61 += 12;
                    }
                    while (v62 != v61);
                  }
                  v66 = *(_QWORD *)(a1 + 48);
                  if (v66 && *(_BYTE *)(a1 + 56))
                    sub_1B21FF5FC(v66);
                  *(_BYTE *)(a1 + 56) = 1;
                  *(_QWORD *)(a1 + 48) = v60;
                  *(_DWORD *)(a1 + 40) = v59;
                  v58 = *(_DWORD *)(a1 + 36);
                }
              }
              v67 = *(_QWORD *)(a1 + 48) + 12 * v58;
              *(_DWORD *)(v67 + 8) = 0;
              *(_QWORD *)v67 = 0;
              ++*(_DWORD *)(a1 + 36);
              v68 = *(_QWORD *)(a1 + 48);
              v69 = v45 + 1;
              *((_DWORD *)v44 + 10) = v45;
              *(_DWORD *)(v44[2] + 40) = v45 + 1;
              v70 = v68 + 12 * v45;
              *(_DWORD *)(v70 + 4) = 1;
              v71 = v68 + 12 * v69;
              *(_DWORD *)(v71 + 4) = -1;
              *(_DWORD *)(v70 + 8) = sub_1B2206838(v44[3], (uint64_t)v96);
              *(_DWORD *)(v71 + 8) = v26;
            }
            v72 = *((_DWORD *)v44 + 10);
            v73 = v72;
            if ((v43 & 0x80000000) == 0)
            {
              *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * (int)v72) = v43 - v72;
              v73 = v42;
            }
            v44 = (uint64_t *)*v44;
            v42 = v73;
            v43 = v72;
          }
          while (v44 != v41);
          *(_DWORD *)(*(_QWORD *)(a1 + 48) + 12 * (int)v73) = v72 - v73;
          v25 = v97;
        }
        ++v26;
      }
      while (v26 < v25);
      v74 = v99;
      v75 = v26;
      if ((_DWORD)v26)
      {
        v76 = 0;
        while (1)
        {
          v77 = *(_QWORD *)(v74 + 8 * v76);
          v78 = *(uint64_t **)(v77 + 16);
          if (v78)
            break;
LABEL_115:
          if (++v76 == v75)
            goto LABEL_116;
        }
        v79 = *(uint64_t **)(v77 + 16);
        while (1)
        {
          v80 = *((_DWORD *)v79 + 10);
          if ((v80 & 0x80000000) == 0)
            break;
LABEL_114:
          v79 = (uint64_t *)*v79;
          if (v79 == v78)
            goto LABEL_115;
        }
        LODWORD(v81) = *(_DWORD *)(a1 + 68);
        if ((_DWORD)v81 != *(_DWORD *)(a1 + 72) || (!(_DWORD)v81 ? (v82 = 1) : (v82 = 2 * v81), (int)v81 >= v82))
        {
LABEL_112:
          *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * (int)v81) = v80;
          ++*(_DWORD *)(a1 + 68);
          v88 = v79;
          do
          {
            *((_DWORD *)v88 + 10) = -1;
            v88 = *(uint64_t **)(v88[2] + 8);
          }
          while (v88 != v79);
          goto LABEL_114;
        }
        if (v82)
        {
          v83 = sub_1B21FF5F0(4 * v82, 16);
          LODWORD(v81) = *(_DWORD *)(a1 + 68);
        }
        else
        {
          v83 = 0;
        }
        v84 = *(_QWORD *)(a1 + 80);
        if ((int)v81 < 1)
        {
          if (!v84)
          {
LABEL_111:
            *(_BYTE *)(a1 + 88) = 1;
            *(_QWORD *)(a1 + 80) = v83;
            *(_DWORD *)(a1 + 72) = v82;
            LODWORD(v81) = *(_DWORD *)(a1 + 68);
            v80 = *((_DWORD *)v79 + 10);
            goto LABEL_112;
          }
        }
        else
        {
          v81 = v81;
          v85 = (_DWORD *)v83;
          v86 = *(int **)(a1 + 80);
          do
          {
            v87 = *v86++;
            *v85++ = v87;
            --v81;
          }
          while (v81);
        }
        if (*(_BYTE *)(a1 + 88))
          sub_1B21FF5FC(v84);
        goto LABEL_111;
      }
LABEL_116:
      if (!v74)
      {
LABEL_131:
        if (v111 && v112)
          sub_1B21FF5FC(v111);
        v112 = 1;
        v111 = 0;
        v109 = 0;
        v110 = 0;
        sub_1B2206A10(v107);
        sub_1B2206A10(v105);
        sub_1B2206A10(v103);
        return v13;
      }
    }
    if (v100)
      sub_1B21FF5FC(v74);
    goto LABEL_131;
  }
  v89 = *(_QWORD *)(a1 + 16);
  if (v89 && *(_BYTE *)(a1 + 24))
    sub_1B21FF5FC(v89);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v90 = *(_QWORD *)(a1 + 48);
  if (v90 && *(_BYTE *)(a1 + 56))
    sub_1B21FF5FC(v90);
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v91 = *(_QWORD *)(a1 + 80);
  if (v91 && *(_BYTE *)(a1 + 88))
    sub_1B21FF5FC(v91);
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return 0.0;
}

uint64_t sub_1B2206838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(unsigned int *)(a1 + 120);
  if ((v2 & 0x80000000) != 0)
  {
    v2 = *(unsigned int *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 120) = v2;
    v6 = v2;
    if ((_DWORD)v2 == v5)
    {
      v7 = (_DWORD)v2 ? 2 * v2 : 1;
      v6 = v2;
      if ((int)v2 < v7)
      {
        if (v7)
        {
          v8 = sub_1B21FF5F0(8 * v7, 16);
          v6 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          v8 = 0;
          v6 = v2;
        }
        if (v6 >= 1)
        {
          v9 = 0;
          do
          {
            *(_QWORD *)(v8 + v9) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v9);
            v9 += 8;
          }
          while (8 * v6 != v9);
        }
        v10 = *(_QWORD *)(a2 + 16);
        if (v10)
          v11 = *(_BYTE *)(a2 + 24) == 0;
        else
          v11 = 1;
        if (!v11)
        {
          sub_1B21FF5FC(v10);
          v6 = *(_DWORD *)(a2 + 4);
        }
        *(_BYTE *)(a2 + 24) = 1;
        *(_QWORD *)(a2 + 16) = v8;
        *(_DWORD *)(a2 + 8) = v7;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6) = a1;
    *(_DWORD *)(a2 + 4) = v6 + 1;
  }
  return v2;
}

double sub_1B2206928(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 < 1)
  {
    if (a2 < 0)
    {
      *(_DWORD *)(a1 + 32) = -1;
      *(_QWORD *)a1 = -a2;
      *(_QWORD *)(a1 + 8) = a2 > 0;
    }
    else
    {
      *(_DWORD *)(a1 + 32) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 1;
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = (unint64_t)a2 >> 63;
  }
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B2246910;
  *(_BYTE *)(a1 + 36) = 1;
  return result;
}

uint64_t sub_1B2206980(uint64_t result, _QWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 0)
  {
    v4 = -1;
    *(_DWORD *)(result + 32) = -1;
    v5 = a2[1];
    if (*a2)
      v6 = ~v5;
    else
      v6 = -v5;
    *(_QWORD *)result = -*a2;
    *(_QWORD *)(result + 8) = v6;
  }
  else
  {
    if (v3)
      v4 = 1;
    else
      v4 = *(_QWORD *)result != 0;
    *(_DWORD *)(result + 32) = v4;
    *(_OWORD *)result = *(_OWORD *)a2;
  }
  v7 = *(_QWORD *)(result + 24);
  if (v7 < 0)
  {
    *(_DWORD *)(result + 32) = -v4;
    v8 = *(_QWORD *)(result + 16);
    v9 = -v8;
    if (v8)
      v10 = ~v7;
    else
      v10 = -v7;
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = v10;
  }
  else
  {
    *(_OWORD *)(result + 16) = *a3;
  }
  *(_BYTE *)(result + 36) = 0;
  return result;
}

uint64_t **sub_1B2206A10(uint64_t **a1)
{
  uint64_t *i;

  for (i = *a1; *a1; i = *a1)
  {
    *a1 = (uint64_t *)i[2];
    sub_1B21FF5FC(*i);
    sub_1B21FF5FC((uint64_t)i);
  }
  return a1;
}

uint64_t sub_1B2206A58(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *i;
  int v17;
  uint64_t j;
  int v19;
  int v20;
  __int128 v21;

  v7 = result;
  do
  {
    v8 = a3;
    v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4))
      ++v9;
    v10 = (int *)(*(_QWORD *)(v7 + 16) + 16 * (v9 >> 1));
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = a4;
    do
    {
      v15 = *(_QWORD *)(v7 + 16);
      for (i = (_DWORD *)(v15 + 16 * a3); ; i += 4)
      {
        v17 = i[1];
        if (v17 >= v12 && (v17 != v12 || *i >= v11 && (*i != v11 || i[2] >= v13)))
          break;
        ++a3;
      }
      for (j = 16 * v14; ; j -= 16)
      {
        v19 = *(_DWORD *)(v15 + j + 4);
        if (v12 >= v19)
        {
          if (v12 != v19)
            break;
          v20 = *(_DWORD *)(v15 + j);
          if (v11 >= v20 && (v11 != v20 || v13 >= *(_DWORD *)(v15 + j + 8)))
            break;
        }
        --v14;
      }
      if (a3 <= v14)
      {
        v21 = *(_OWORD *)i;
        *(_OWORD *)i = *(_OWORD *)(v15 + j);
        *(_OWORD *)(*(_QWORD *)(v7 + 16) + j) = v21;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8)
      result = sub_1B2206A58(v7, a2);
  }
  while (a3 < a4);
  return result;
}

void sub_1B2206B84(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x8_t v11;
  float32x4_t v12;
  int8x8_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float v18;
  char v19;
  float32x4_t v20;
  char v21;
  int8x16_t v22;
  float v23;
  float32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int8x16_t v28;
  int8x16_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  float v34;
  int8x16_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v45 = 2;
    v44 = 1;
    do
    {
      v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = v44;
        v47 = v45;
        do
        {
          v46 = v7 + 1;
          if ((int)v2 > (int)v7 + 1)
          {
            v48 = *(_QWORD *)(a1 + 16);
            v8 = v47;
            do
            {
              v9 = *(float32x4_t *)(v6 + 16 * v5);
              v10 = vsubq_f32(*(float32x4_t *)(v48 + 16 * v7), v9);
              v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
              v10.i32[3] = 0;
              v12 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v8), v9);
              v13 = (int8x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
              v12.i32[3] = 0;
              *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
              v14.i64[1] = v10.i64[0];
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v12.f32, v13, 4uLL);
              v15.i64[1] = v12.i64[0];
              v16 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v14, v12)), v10, v15);
              v17.i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
              v17.i64[1] = v16.u32[0];
              v18 = 1.0;
              v19 = 1;
              v49 = v17;
              do
              {
                v20 = vmulq_n_f32(v17, v18);
                v20.i32[3] = 0;
                v21 = v19;
                v22 = (int8x16_t)vmulq_f32(v20, v20);
                v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0];
                if (v23 > 0.0001)
                {
                  v24 = vmulq_n_f32(v20, 1.0 / sqrtf(v23));
                  v25 = *(unsigned int *)(a2 + 4);
                  if ((int)v25 < 1)
                    goto LABEL_14;
                  v26 = 0;
                  v27 = 0;
                  do
                  {
                    v28 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v26), v24);
                    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] > 0.999)break;
                    v27 = ++v26 >= v25;
                  }
                  while (v25 != v26);
                  if (v27)
                  {
LABEL_14:
                    v29 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v5), v24);
                    v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8)).f32[0];
                    v24.f32[3] = -v30;
                    v31 = *(unsigned int *)(a1 + 4);
                    if ((int)v31 < 1)
                      goto LABEL_23;
                    v32 = 0;
                    v33 = 0;
                    v34 = -0.01 - v30;
                    do
                    {
                      v35 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + 16 * v32), v24);
                      if ((float)(v34
                                 + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]) > 0.0)break;
                      v33 = ++v32 >= v31;
                    }
                    while (v31 != v32);
                    if (v33)
                    {
LABEL_23:
                      if ((_DWORD)v25 == *(_DWORD *)(a2 + 8))
                      {
                        v36 = (_DWORD)v25 ? 2 * v25 : 1;
                        if ((int)v25 < v36)
                        {
                          v50 = v24;
                          if (v36)
                          {
                            v37 = sub_1B21FF5F0(16 * v36, 16);
                            v17 = v49;
                            v24 = v50;
                            v38 = v37;
                            LODWORD(v25) = *(_DWORD *)(a2 + 4);
                          }
                          else
                          {
                            v38 = 0;
                          }
                          if ((int)v25 >= 1)
                          {
                            v39 = 0;
                            v40 = 16 * v25;
                            do
                            {
                              *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v39);
                              v39 += 16;
                            }
                            while (v40 != v39);
                          }
                          v41 = *(_QWORD *)(a2 + 16);
                          if (v41)
                            v42 = *(_BYTE *)(a2 + 24) == 0;
                          else
                            v42 = 1;
                          if (!v42)
                          {
                            sub_1B21FF5FC(v41);
                            v17 = v49;
                            v24 = v50;
                          }
                          *(_BYTE *)(a2 + 24) = 1;
                          *(_QWORD *)(a2 + 16) = v38;
                          *(_DWORD *)(a2 + 8) = v36;
                          LODWORD(v25) = *(_DWORD *)(a2 + 4);
                        }
                      }
                      *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * (int)v25) = v24;
                      ++*(_DWORD *)(a2 + 4);
                    }
                  }
                }
                v19 = 0;
                v18 = -1.0;
              }
              while ((v21 & 1) != 0);
              ++v8;
            }
            while ((int)v2 > (int)v8);
          }
          ++v47;
          ++v7;
        }
        while (v46 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

void sub_1B2206EA8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float v29;
  float32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  int8x16_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float32x4_t v48;

  v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v45 = 2;
    v44 = 1;
    do
    {
      v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v8 = v44;
        v7 = v45;
        do
        {
          v9 = v8 + 1;
          if ((int)v2 > (int)v8 + 1)
          {
            v10 = *(_QWORD *)(a1 + 16);
            v11 = v7;
            do
            {
              v12 = *(_QWORD *)(a1 + 16);
              v13 = *(float32x4_t *)(v10 + 16 * v8);
              v14 = *(float32x4_t *)(v12 + 16 * v11);
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), 4uLL);
              v15.i64[1] = *(_QWORD *)(v10 + 16 * v8);
              *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), 4uLL);
              v16.i64[1] = *(_QWORD *)(v12 + 16 * v11);
              v17 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v15, v14)), v13, v16);
              v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
              v18.i64[1] = v17.u32[0];
              v19 = (int8x16_t)vmulq_f32(v18, v18);
              if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0] > 0.0001)
              {
                v20 = *(float32x4_t *)(v6 + 16 * v5);
                *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
                v21.i64[1] = *(_QWORD *)(v6 + 16 * v5);
                v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v16, v20)), v14, v21);
                v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
                v23.i64[1] = v22.u32[0];
                v24 = (int8x16_t)vmulq_f32(v23, v23);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > 0.0001)
                {
                  v25 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v21, v13)), v20, v15);
                  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
                  v26.i64[1] = v25.u32[0];
                  v27 = (int8x16_t)vmulq_f32(v26, v26);
                  if (vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0] > 0.0001)
                  {
                    v28 = (int8x16_t)vmulq_f32(v20, v18);
                    LODWORD(v29) = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u32[0];
                    if (fabsf(v29) > 0.000001)
                    {
                      v30 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v20, 3), v23, v13, 3), v26, v14, 3), -1.0 / v29);
                      v31 = *(unsigned int *)(a1 + 4);
                      if ((int)v31 < 1)
                        goto LABEL_16;
                      v32 = 0;
                      v33 = 0;
                      do
                      {
                        v34 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v12 + 16 * v32), v30);
                        if ((float)((float)(COERCE_FLOAT(HIDWORD(*(_OWORD *)(v12 + 16 * v32))) + -0.01)
                                   + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]) > 0.0)break;
                        v33 = ++v32 >= v31;
                      }
                      while (v31 != v32);
                      if (v33)
                      {
LABEL_16:
                        v35 = *(_DWORD *)(a2 + 4);
                        if (v35 == *(_DWORD *)(a2 + 8))
                        {
                          v36 = 2 * v35;
                          if (!v35)
                            v36 = 1;
                          if (v35 < v36)
                          {
                            v46 = v36;
                            v47 = v9;
                            v48 = v30;
                            if (v36)
                            {
                              v37 = sub_1B21FF5F0(16 * v36, 16);
                              v30 = v48;
                              v38 = v37;
                              v35 = *(_DWORD *)(a2 + 4);
                            }
                            else
                            {
                              v38 = 0;
                            }
                            if (v35 >= 1)
                            {
                              v39 = 0;
                              v40 = 16 * v35;
                              do
                              {
                                *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v39);
                                v39 += 16;
                              }
                              while (v40 != v39);
                            }
                            v41 = *(_QWORD *)(a2 + 16);
                            if (v41)
                              v42 = *(_BYTE *)(a2 + 24) == 0;
                            else
                              v42 = 1;
                            if (!v42)
                            {
                              sub_1B21FF5FC(v41);
                              v30 = v48;
                            }
                            *(_BYTE *)(a2 + 24) = 1;
                            *(_QWORD *)(a2 + 16) = v38;
                            v9 = v47;
                            *(_DWORD *)(a2 + 8) = v46;
                            v35 = *(_DWORD *)(a2 + 4);
                          }
                        }
                        *(float32x4_t *)(*(_QWORD *)(a2 + 16) + 16 * v35) = v30;
                        ++*(_DWORD *)(a2 + 4);
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while ((int)v2 > (int)v11);
          }
          ++v7;
          v8 = v9;
        }
        while (v9 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

uint64_t sub_1B22071AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)();
  size_t v10;
  int v11;

  if ((byte_1EEFD4C90 & 1) == 0)
  {
    v11 = 0;
    v10 = 4;
    if (!sysctlbyname("hw.optional.neon_hpfp", &v11, &v10, 0, 0) && v11)
      dword_1EEFD4C8C |= 0x2000u;
    byte_1EEFD4C90 = 1;
  }
  if (dword_1EEFD4C8C >= 0x2000)
    v8 = (uint64_t (*)())sub_1B220727C;
  else
    v8 = (uint64_t (*)())sub_1B22074C8;
  off_1ED4AD5B0 = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

float sub_1B220727C(__int128 *a1, int32x4_t *a2, unint64_t a3, _DWORD *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  unint64_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  unint64_t v31;
  int32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  __int128 v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  unint64_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x2_t v54;
  int32x4_t v55;
  int8x16_t v56;
  float32x2_t v57;
  int8x8_t v58;
  float32x2_t v59;
  int32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float result;

  v4 = *(float32x4_t *)a2;
  v5 = (float32x4_t)vdupq_lane_s64(a2->i64[0], 0);
  v6 = (float32x4_t)vdupq_laneq_s32(*a2, 2);
  if (a3 >= 8)
  {
    v8 = (int32x4_t)xmmword_1B2240BB0;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v11 = 8;
    v12.i64[0] = 0x400000004;
    v12.i64[1] = 0x400000004;
    v13.i64[0] = 0x800000008;
    v13.i64[1] = 0x800000008;
    do
    {
      v14 = (int32x4_t)a1[1];
      v15.i64[0] = *(_QWORD *)a1;
      v16 = (int32x4_t)a1[3];
      v15.i64[1] = *((_QWORD *)a1 + 2);
      v17.i64[0] = *((_QWORD *)a1 + 4);
      v17.i64[1] = *((_QWORD *)a1 + 6);
      v14.i32[0] = *((_QWORD *)a1 + 1);
      v16.i32[0] = *((_QWORD *)a1 + 5);
      v18 = (int32x4_t)vmulq_f32(v15, v5);
      v19 = (int32x4_t)vmulq_f32(v17, v5);
      v20 = (float32x4_t)vuzp1q_s32(v14, v16);
      v21 = (int32x4_t)a1[5];
      v17.i64[0] = *((_QWORD *)a1 + 8);
      v17.i64[1] = *((_QWORD *)a1 + 10);
      v21.i32[0] = *((_QWORD *)a1 + 9);
      v22 = (int32x4_t)a1[7];
      v23.i64[0] = *((_QWORD *)a1 + 12);
      v23.i64[1] = *((_QWORD *)a1 + 14);
      v22.i32[0] = *((_QWORD *)a1 + 13);
      v24 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v18, v19), (float32x4_t)vuzp2q_s32(v18, v19)), v6, v20);
      v25 = (int8x16_t)vcgtq_f32(v24, v10);
      a1 += 8;
      v26 = (int32x4_t)vmulq_f32(v17, v5);
      v27 = (int32x4_t)vmulq_f32(v23, v5);
      v28 = (float32x4_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v10);
      v29 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v26, v27), (float32x4_t)vuzp2q_s32(v26, v27)), v6, (float32x4_t)vuzp1q_s32(v21, v22));
      v30 = (int8x16_t)vcgtq_f32(v29, v28);
      v10 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)v28);
      v9 = vbslq_s8(v30, (int8x16_t)vaddq_s32(v8, v12), vbslq_s8(v25, (int8x16_t)v8, v9));
      v8 = vaddq_s32(v8, v13);
      v11 += 8;
    }
    while (v11 <= a3);
    v7 = v11 - 8;
  }
  else
  {
    v7 = 0;
    v8 = (int32x4_t)xmmword_1B2240BB0;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
  }
  v31 = v7 | 4;
  if (v31 <= a3)
  {
    v32.i64[0] = 0x400000004;
    v32.i64[1] = 0x400000004;
    do
    {
      v33 = *a1;
      v34 = (int32x4_t)a1[1];
      v35 = a1[2];
      v36 = (int32x4_t)a1[3];
      v37.i64[0] = *(_QWORD *)a1;
      v37.i64[1] = *((_QWORD *)a1 + 2);
      v38.i64[0] = *((_QWORD *)a1 + 4);
      v38.i64[1] = *((_QWORD *)a1 + 6);
      a1 += 4;
      v34.i32[0] = DWORD2(v33);
      v36.i32[0] = DWORD2(v35);
      v39 = (int32x4_t)vmulq_f32(v37, v5);
      v40 = (int32x4_t)vmulq_f32(v38, v5);
      v41 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v39, v40), (float32x4_t)vuzp2q_s32(v39, v40)), v6, (float32x4_t)vuzp1q_s32(v34, v36));
      v42 = (int8x16_t)vcgtq_f32(v41, v10);
      v10 = (float32x4_t)vbslq_s8(v42, (int8x16_t)v41, (int8x16_t)v10);
      v9 = vbslq_s8(v42, (int8x16_t)v8, v9);
      v8 = vaddq_s32(v8, v32);
      v31 += 4;
    }
    while (v31 <= a3);
  }
  v43 = a3 & 3;
  switch(v43)
  {
    case 1uLL:
      v51 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      v52 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), (float32x4_t)vdupq_laneq_s32(v51, 2));
LABEL_15:
      v56 = (int8x16_t)vcgtq_f32(v52, v10);
      v10 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v52, (int8x16_t)v10);
      v9 = vbslq_s8(v56, (int8x16_t)v8, v9);
      break;
    case 2uLL:
      v53 = (float32x4_t)*a1;
      v54 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
      v53.i64[1] = *((_QWORD *)a1 + 2);
      v55 = (int32x4_t)vmulq_f32(v53, v5);
      *(int32x2_t *)v53.f32 = vzip1_s32(v54, (int32x2_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL));
      v53.i64[1] = v53.i64[0];
      v52 = vaddq_f32(vmlaq_f32((float32x4_t)vuzp2q_s32(v55, v55), v6, v53), (float32x4_t)vuzp1q_s32(v55, v55));
      goto LABEL_15;
    case 3uLL:
      v44 = (int32x4_t)a1[1];
      v45 = (float32x4_t)a1[2];
      v46.i64[0] = *(_QWORD *)a1;
      v46.i64[1] = *((_QWORD *)a1 + 2);
      v44.i32[0] = *((_QWORD *)a1 + 1);
      v47 = (int32x4_t)vmulq_f32(v46, v5);
      v48 = (int32x4_t)vdupq_lane_s64(vmulq_f32(v45, v4).i64[0], 0);
      v49 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v47, v48), (float32x4_t)vuzp2q_s32(v47, v48)), v6, (float32x4_t)vuzp1q_s32(v44, vdupq_laneq_s32((int32x4_t)v45, 2)));
      v50 = (int8x16_t)vcgtq_f32(v49, v10);
      v10 = (float32x4_t)vbslq_s8(v50, (int8x16_t)v49, (int8x16_t)v10);
      v9 = vbslq_s8(v50, (int8x16_t)v8, v9);
      break;
  }
  v57 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v58 = (int8x8_t)vcgt_f32(v57, *(float32x2_t *)v10.f32);
  v59 = (float32x2_t)vbsl_s8(v58, (int8x8_t)v57, *(int8x8_t *)v10.f32);
  v60 = (int32x2_t)vbsl_s8(v58, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int8x8_t *)v9.i8);
  v61 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1);
  v62 = (int8x8_t)vcgt_f32(v61, v59);
  LODWORD(result) = vbsl_s8(v62, (int8x8_t)vdup_lane_s32(v60, 1), (int8x8_t)v60).u32[0];
  *a4 = vbsl_s8(v62, (int8x8_t)v61, (int8x8_t)v59).u32[0];
  return result;
}

float sub_1B22074C8(int8x16_t *a1, int32x4_t *a2, unint64_t a3, _DWORD *a4)
{
  float32x4_t v4;
  float32x2_t v5;
  unint64_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  int8x8_t v11;
  float32x2_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x8_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  unint64_t i;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  unint64_t v38;
  int8x16_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int8x8_t v45;
  int32x4_t v46;
  int8x8_t v47;
  float32x2_t v48;
  int8x8_t v49;
  int8x8_t v50;
  float32x2_t v51;
  int32x2_t v52;
  float32x2_t v53;
  int8x8_t v54;
  float result;

  v4 = *(float32x4_t *)a2;
  v5 = (float32x2_t)vdup_laneq_s32(*a2, 2);
  if (a3 >= 8)
  {
    v11 = (int8x8_t)-1;
    v8 = (int32x2_t)0x300000002;
    v7 = (int32x2_t)0x100000000;
    v12 = (float32x2_t)0x7F0000007FLL;
    v13 = 8;
    v10 = (float32x2_t)0x7F0000007FLL;
    v9 = (int8x8_t)-1;
    do
    {
      v14 = a1[1];
      v15 = a1[2];
      v16 = a1[3];
      v17 = vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v4.f32);
      v18 = vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v4.f32);
      v19 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      *(float32x2_t *)v15.i8 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32), v17), v5, v19);
      *(float32x2_t *)v16.i8 = vmla_f32(vpadd_f32(v18, vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v14.i8);
      v20 = (int8x8_t)vcgt_f32(*(float32x2_t *)v15.i8, v12);
      *(int32x2_t *)v14.i8 = vcgt_f32(*(float32x2_t *)v16.i8, v10);
      v21 = (float32x2_t)vbsl_s8(v20, *(int8x8_t *)v15.i8, (int8x8_t)v12);
      v22 = (float32x2_t)vbsl_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v16.i8, (int8x8_t)v10);
      v23 = a1[4];
      v24 = a1[5];
      v25 = a1[6];
      v26 = a1[7];
      a1 += 8;
      v27 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v4.f32);
      v28 = vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v4.f32);
      v29 = vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v4.f32);
      *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      *(int32x2_t *)v24.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      *(float32x2_t *)v25.i8 = vmla_f32(vpadd_f32(v27, v28), v5, *(float32x2_t *)v23.i8);
      *(float32x2_t *)v26.i8 = vmla_f32(vpadd_f32(v29, vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v24.i8);
      *(int32x2_t *)v23.i8 = vcgt_f32(*(float32x2_t *)v25.i8, v21);
      *(int32x2_t *)v24.i8 = vcgt_f32(*(float32x2_t *)v26.i8, v22);
      v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v25.i8, (int8x8_t)v21);
      v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)v26.i8, (int8x8_t)v22);
      v11 = vbsl_s8(*(int8x8_t *)v23.i8, (int8x8_t)vadd_s32(v7, (int32x2_t)0x400000004), vbsl_s8(v20, (int8x8_t)v7, v11));
      v9 = vbsl_s8(*(int8x8_t *)v24.i8, (int8x8_t)vadd_s32(v8, (int32x2_t)0x400000004), vbsl_s8(*(int8x8_t *)v14.i8, (int8x8_t)v8, v9));
      v7 = vadd_s32(v7, (int32x2_t)0x800000008);
      v8 = vadd_s32(v8, (int32x2_t)0x800000008);
      v13 += 8;
    }
    while (v13 <= a3);
    v6 = v13 - 8;
  }
  else
  {
    v6 = 0;
    v7 = (int32x2_t)0x100000000;
    v8 = (int32x2_t)0x300000002;
    v9 = (int8x8_t)-1;
    v10 = (float32x2_t)0x7F0000007FLL;
    v11 = (int8x8_t)-1;
    v12 = (float32x2_t)0x7F0000007FLL;
  }
  for (i = v6 | 4; i <= a3; i += 4)
  {
    v31 = *a1;
    v32 = a1[1];
    v33 = a1[2];
    v34 = a1[3];
    a1 += 4;
    v35 = vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v4.f32);
    v36 = vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v4.f32);
    v37 = vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v4.f32);
    *(int32x2_t *)v31.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    *(int32x2_t *)v32.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    *(float32x2_t *)v33.i8 = vmla_f32(vpadd_f32(v35, v36), v5, *(float32x2_t *)v31.i8);
    *(float32x2_t *)v34.i8 = vmla_f32(vpadd_f32(v37, vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v32.i8);
    *(int32x2_t *)v31.i8 = vcgt_f32(*(float32x2_t *)v33.i8, v12);
    *(int32x2_t *)v32.i8 = vcgt_f32(*(float32x2_t *)v34.i8, v10);
    v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v31.i8, *(int8x8_t *)v33.i8, (int8x8_t)v12);
    v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v34.i8, (int8x8_t)v10);
    v11 = vbsl_s8(*(int8x8_t *)v31.i8, (int8x8_t)v7, v11);
    v9 = vbsl_s8(*(int8x8_t *)v32.i8, (int8x8_t)v8, v9);
    v7 = vadd_s32(v7, (int32x2_t)0x400000004);
    v8 = vadd_s32(v8, (int32x2_t)0x400000004);
  }
  v38 = a3 & 3;
  switch(v38)
  {
    case 1uLL:
      v46 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)vdup_laneq_s32(v46, 2), vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8));
      v47 = (int8x8_t)vcgt_f32(*(float32x2_t *)v46.i8, v12);
      v12 = (float32x2_t)vbsl_s8(v47, *(int8x8_t *)v46.i8, (int8x8_t)v12);
      v11 = vbsl_s8(v47, (int8x8_t)v7, v11);
      break;
    case 2uLL:
      v48 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32), vmul_f32(*(float32x2_t *)a1[1].i8, *(float32x2_t *)v4.f32)), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a1[1], a1[1], 8uLL)));
      v49 = (int8x8_t)vcgt_f32(v48, v12);
      v12 = (float32x2_t)vbsl_s8(v49, (int8x8_t)v48, (int8x8_t)v12);
      v11 = vbsl_s8(v49, (int8x8_t)v7, v11);
      break;
    case 3uLL:
      v39 = a1[1];
      v40 = vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32);
      v41 = vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v4.f32);
      v42 = (int32x4_t)vmulq_f32((float32x4_t)a1[2], v4);
      v43 = vmla_f32(vpadd_f32(v40, v41), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
      v44 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_laneq_s32(v42, 2));
      *(int32x2_t *)v42.i8 = vcgt_f32(v43, v12);
      v45 = (int8x8_t)vcgt_f32(v44, v10);
      v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v43, (int8x8_t)v12);
      v10 = (float32x2_t)vbsl_s8(v45, (int8x8_t)v44, (int8x8_t)v10);
      v11 = vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v7, v11);
      v9 = vbsl_s8(v45, (int8x8_t)v8, v9);
      break;
  }
  v50 = (int8x8_t)vcgt_f32(v10, v12);
  v51 = (float32x2_t)vbsl_s8(v50, (int8x8_t)v10, (int8x8_t)v12);
  v52 = (int32x2_t)vbsl_s8(v50, v9, v11);
  v53 = (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1);
  v54 = (int8x8_t)vcgt_f32(v53, v51);
  LODWORD(result) = vbsl_s8(v54, (int8x8_t)vdup_lane_s32(v52, 1), (int8x8_t)v52).u32[0];
  *a4 = vbsl_s8(v54, (int8x8_t)v53, (int8x8_t)v51).u32[0];
  return result;
}

double sub_1B2207764(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFE00 | 0x14;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

_QWORD *sub_1B22077C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_1B2207864(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 8) = *a2;
  return result;
}

void sub_1B2207870(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;
  char v8;

  sub_1B17F8190((uint64_t)(a1 + 3), (int)((uint64_t)(*(_QWORD *)(*a1 + 56) - *(_QWORD *)(*a1 + 48)) >> 2));
  v2 = a1[6];
  v8 = 0;
  v3 = *a1;
  v4 = *(int *)(*a1 + 4);
  v5 = a1[7] - v2;
  if (v4 <= v5)
  {
    if (v4 < v5)
      a1[7] = v2 + v4;
  }
  else
  {
    sub_1B2208D68(a1 + 6, v4 - v5, &v8);
    v3 = *a1;
  }
  sub_1B18261FC((uint64_t)(a1 + 9), *(int *)(v3 + 8));
  sub_1B17F8190((uint64_t)(a1 + 12), *(int *)(*a1 + 8));
  v6 = (int)((uint64_t)(*(_QWORD *)(*a1 + 296) - *(_QWORD *)(*a1 + 288)) >> 2);
  v7 = 0;
  sub_1B2207928((uint64_t)(a1 + 15), v6, &v7);
}

void sub_1B2207928(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1B2208E7C((void **)a1, a2 - v3, a3);
  }
}

void sub_1B2207958(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = a2;
  sub_1B17F8190(a1 + 144, a2);
  v6 = 0;
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5)
      *(_QWORD *)(a1 + 176) = v4 + v3;
  }
  else
  {
    sub_1B2208D68((_QWORD *)(a1 + 168), v3 - v5, &v6);
  }
  if (!*(_BYTE *)(a1 + 13))
    sub_1B22079D0(a1 + 192, v3);
}

void sub_1B22079D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1B2208F80((void **)a1, a2 - v2);
  }
}

uint64_t sub_1B2207A00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void sub_1B2207A08(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  uint64_t v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  __int32 *v69;
  uint64_t v70;
  int v71;
  _WORD *v72;
  __int32 v73;
  __int32 *v74;
  __int32 *v75;
  __int32 *v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  _WORD *v80;
  __int16 *v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  int *v99;
  unsigned __int16 *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  __int16 v105;
  char v106;
  char v108;
  unsigned __int16 *v109;
  int v110;
  int v111;
  int v112;
  _BYTE *v113;
  char v114;
  uint64_t v115;
  int v116;
  _BOOL4 v117;
  unsigned int v118;
  BOOL v119;
  int v120;
  unsigned int v121;
  int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  BOOL v129;
  _BOOL4 v130;
  unsigned int v131;
  _QWORD *v132;
  int v134;
  __int16 *v135;
  char v136;
  int v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  int v143;
  int v144;
  _BYTE v145[160];
  void *__p;
  __int16 *v147;
  int v148;
  int v149;
  _BYTE v150[32];
  void *v151;
  __int32 *__s;
  int v153;
  int v154;
  _BYTE v155[64];
  void *v156;
  __int32 *v157;
  int v158;
  int v159;
  uint64_t v160;
  __int32 *v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = v3 >> 2;
  v5 = (v3 >> 2) & 7;
  if (v5)
    v6 = (v3 & 3) != 2;
  else
    v6 = 0;
  v130 = v6;
  *(_BYTE *)(a1 + 12) = v5 == 5;
  v134 = v5;
  v131 = v5 - 3;
  v7 = v5 == 3;
  *(_BYTE *)(a1 + 13) = (v4 & 6) == 4;
  *(_BYTE *)(a1 + 14) = (v4 & 6) == 2;
  v8 = *(_QWORD *)a1;
  v9 = *(int *)(*(_QWORD *)a1 + 8);
  v140 = 0;
  v141 = 0;
  if ((v4 & 6) == 4)
    v7 = 1;
  v129 = v7;
  v139 = 0;
  if ((_DWORD)v9)
  {
    sub_1B220907C(&v139, v9);
    v10 = (char *)v140;
    bzero(v140, 2 * v9);
    v140 = &v10[2 * v9];
    v8 = *(_QWORD *)a1;
  }
  v11 = (int)((uint64_t)(*(_QWORD *)(v8 + 296) - *(_QWORD *)(v8 + 288)) >> 2);
  LOWORD(v142) = 0;
  v132 = (_QWORD *)(a1 + 120);
  sub_1B2207928(a1 + 120, v11, &v142);
  v12 = *(_QWORD *)a1;
  v13 = *(unsigned int *)(*(_QWORD *)a1 + 20);
  v157 = (__int32 *)&v160;
  v158 = v13;
  v159 = 16;
  v161 = 0;
  if (v13 <= 0x10)
  {
    v14 = (__int32 *)v155;
    v151 = 0;
    __s = (__int32 *)v155;
    v153 = v13;
    v154 = 16;
    v156 = 0;
    v135 = (__int16 *)v150;
    __p = 0;
    v147 = (__int16 *)v150;
    v148 = v13;
    v149 = 16;
    v142 = v145;
    v143 = v13;
    v144 = 16;
  }
  else
  {
    v161 = (__int32 *)operator new(4 * v13);
    v157 = v161;
    v159 = v13;
    __s = (__int32 *)v155;
    v153 = v13;
    v154 = 16;
    v156 = 0;
    v156 = operator new(4 * v13);
    v151 = 0;
    __s = (__int32 *)v156;
    v154 = v13;
    v147 = (__int16 *)v150;
    v148 = v13;
    v149 = 16;
    v151 = operator new(2 * v13);
    __p = 0;
    v147 = (__int16 *)v151;
    v149 = v13;
    v142 = v145;
    v143 = v13;
    v144 = 16;
    __p = operator new(10 * v13);
    v142 = __p;
    v144 = v13;
    v14 = __s;
    v135 = v147;
    v12 = *(_QWORD *)a1;
  }
  if (*(int *)(v12 + 8) >= 1)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = (2 * v15) | 1;
      v18 = *(_QWORD *)(v12 + 264);
      v19 = *(unsigned int *)(v18 + 8 * v15);
      v20 = v157;
      if ((int)v19 >= 1)
      {
        v21 = *(int *)(v18 + 4 * v17);
        v22 = (int *)(*(_QWORD *)(v12 + 288) + 4 * v21);
        v23 = (unsigned __int16 *)(*(_QWORD *)(v12 + 312) + 2 * v21);
        v24 = *(_QWORD *)(v12 + 24);
        v25 = *(_QWORD *)(a1 + 24);
        v26 = v19;
        v27 = v157;
        do
        {
          v28 = *v22++;
          v29 = *(_DWORD *)(v24 + 8 * v28 + 4);
          LODWORD(v28) = *v23++;
          *v27++ = *(_DWORD *)(v25 + 4 * (v29 + (int)v28));
          --v26;
        }
        while (v26);
      }
      v30 = *(_QWORD *)(v12 + 336);
      v31 = *(int *)(v30 + 4 * v17);
      v32 = (int *)(*(_QWORD *)(v12 + 360) + 4 * v31);
      v33 = *(unsigned int *)(v30 + 8 * v15);
      v34 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 432) + 2 * v15);
      if ((v34 & 1) != 0)
      {
        if ((int)v19 >= 1 && (int)v33 >= 1)
        {
          v43 = 0;
          v44 = *(_QWORD *)(v12 + 384) + 2 * v31;
          do
          {
            v45 = v32[v43];
            v46 = *(_QWORD **)a1;
            v47 = *(_QWORD *)(*(_QWORD *)a1 + 144);
            v48 = *(unsigned int *)(v47 + 8 * (_DWORD)v45);
            if ((int)v48 >= 2)
            {
              v49 = 0;
              v50 = 0;
              v51 = *(int *)(v47 + 8 * v45 + 4);
              v52 = (int *)(v46[15] + 8 * (_DWORD)v45);
              while (v48 != v49)
              {
                v53 = *(int *)(v46[21] + 4 * v51 + 4 * v49);
                v54 = 2 * v53;
                v55 = v46[3];
                v56 = *(int *)(v55 + 8 * v53 + 4);
                v57 = v46[6] + 4 * v56;
                v58 = *(_DWORD *)(v55 + 4 * v54);
                v59 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                v60 = *(_QWORD *)(a1 + 24) + 4 * v56;
                v61 = *v52;
                if (*(_WORD *)(v44 + 2 * v43) == ((_DWORD)v61 != *(_DWORD *)(v57 + 4 * v59)))
                  v62 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                else
                  v62 = v59 + 1;
                if (v62 == v58)
                  v63 = 0;
                else
                  v63 = v62;
                v64 = *(_DWORD *)(v60 + 4 * v63);
                if (v49)
                {
                  ++v49;
                  if (v64 != v50)
                  {
                    v65 = v139;
                    *((_WORD *)v139 + v61) = 1;
                    v65[v52[1]] = 1;
                    v66 = *(_QWORD *)(a1 + 48);
                    v67 = *(_BYTE *)(v66 + v45) & 0xFD | (2 * (v15 == v61));
                    *(_BYTE *)(v66 + v45) = v67;
                    v68 = v67 & 0xFB | (4 * (v15 == v52[1])) | 1;
                    *(_BYTE *)(v66 + v45) = v68;
                    *(_BYTE *)(v66 + v45) = v68 & 0xF7 | (8 * *(_BYTE *)(a1 + 13));
                    break;
                  }
                }
                else
                {
                  v49 = 1;
                  v50 = v64;
                }
              }
            }
            ++v43;
          }
          while (v43 != v33);
        }
      }
      else if ((int)v19 > (v34 & 4) >> 2)
      {
        v35 = (v34 >> 2) & 1;
        do
        {
          if (v35)
            v36 = v35;
          else
            v36 = v19;
          if (v20[v35] != v20[v36 - 1])
          {
            v37 = v32[v35];
            v38 = *(_QWORD *)(*(_QWORD *)a1 + 120) + 8 * v37;
            v39 = *(unsigned int *)v38;
            v40 = v139;
            *((_WORD *)v139 + (int)v39) = 1;
            v40[*(int *)(v38 + 4)] = 1;
            v41 = *(_QWORD *)(a1 + 48);
            LOBYTE(v39) = *(_BYTE *)(v41 + v37) & 0xFD | (2 * (v15 == v39));
            *(_BYTE *)(v41 + v37) = v39;
            LOBYTE(v38) = v39 & 0xFB | (4 * (v15 == *(_DWORD *)(v38 + 4))) | 1;
            *(_BYTE *)(v41 + v37) = v38;
            *(_BYTE *)(v41 + v37) = v38 & 0xF7 | (8 * *(_BYTE *)(a1 + 13));
          }
          ++v35;
        }
        while (v19 != v35);
      }
      v137 = v16;
      v136 = v34;
      if ((v34 & 4) != 0 && !*((_WORD *)v139 + v15))
      {
        if (*(_BYTE *)(a1 + 13))
        {
          if ((int)v19 < 1)
            goto LABEL_72;
          *((_WORD *)v139 + v15) = 1;
          if ((v34 & 1) != 0)
          {
            if ((int)v33 >= 1)
            {
              do
              {
                v84 = *v32++;
                v83 = v84;
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 240) + v84) & 2) != 0)
                  *(_BYTE *)(*(_QWORD *)(a1 + 48) + v83) |= 8u;
                --v33;
              }
              while (v33);
            }
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + *v32) |= 8u;
            v78 = v32[(int)v33 - 1];
            *(_BYTE *)(*(_QWORD *)(a1 + 48) + v78) |= 8u;
          }
        }
        else
        {
          v79 = v130;
          if ((_DWORD)v19 != 1)
            v79 = 0;
          if (v79)
          {
            *((_WORD *)v139 + v15) = 1;
LABEL_72:
            *v14 = *v20;
            *v135 = 0;
            goto LABEL_73;
          }
        }
      }
      *v14 = *v20;
      *v135 = 0;
      if ((int)v19 > 1)
      {
        v69 = v20 + 1;
        v70 = v19 - 1;
        v71 = 1;
        v72 = v135 + 1;
        while (1)
        {
          v73 = *v69;
          if (*v69 == *(v69 - 1))
          {
            *v72 = *(v72 - 1);
          }
          else
          {
            *v72 = v71;
            if (v71 == 2)
            {
              if (*v14 == v73)
              {
LABEL_55:
                v74 = &v14[v71];
                v75 = wmemchr(v14, v73, v71);
                if (v75)
                  v76 = v75;
                else
                  v76 = &v14[v71];
                v77 = (char *)v76 - (char *)v14;
                if (v71 == v77 >> 2)
                {
                  ++v71;
                  *v74 = *v69;
                }
                else
                {
                  *v72 = (unint64_t)v77 >> 2;
                }
                goto LABEL_62;
              }
              v14[2] = v73;
              v71 = 3;
            }
            else
            {
              if (v71 != 1)
                goto LABEL_55;
              v14[1] = v73;
              v71 = 2;
            }
          }
LABEL_62:
          ++v72;
          ++v69;
          if (!--v70)
            goto LABEL_74;
        }
      }
LABEL_73:
      v71 = 1;
LABEL_74:
      if ((v136 & 1) != 0 && !*((_WORD *)v139 + v15))
        *((_WORD *)v139 + v15) = v71 > 1;
      *(_WORD *)(*(_QWORD *)(a1 + 72) + 2 * v15) = v71;
      *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v15) = v137;
      v12 = *(_QWORD *)a1;
      if (v71 >= 2 && (int)v19 >= 1)
      {
        v80 = (_WORD *)(*v132 + 2 * *(int *)(*(_QWORD *)(v12 + 264) + 4 * ((2 * v15) | 1)));
        v81 = v135;
        do
        {
          v82 = *v81++;
          *v80++ = v82;
          --v19;
        }
        while (v19);
      }
      v16 = v71 + v137;
      if (++v15 >= *(int *)(v12 + 8))
        goto LABEL_89;
    }
  }
  v16 = 0;
LABEL_89:
  sub_1B2207958(a1, v16);
  v85 = *(_QWORD **)a1;
  if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
  {
    for (i = 0; i < *(int *)(*(_QWORD *)a1 + 8); ++i)
    {
      v87 = (2 * i) | 1;
      v88 = v85[33];
      v89 = *(int *)(v88 + 4 * v87);
      v90 = v85[36];
      v91 = *(unsigned int *)(v88 + 8 * i);
      v92 = v85[39];
      if ((int)v91 < 1)
        v93 = 0;
      else
        v93 = *(_DWORD *)(*(_QWORD *)(a1 + 24)
                        + 4
                        * (*(_DWORD *)(v85[3] + 8 * *(int *)(v90 + 4 * v89) + 4) + *(unsigned __int16 *)(v92 + 2 * v89)));
      v94 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * i);
      v95 = *(_QWORD *)(a1 + 96);
      v96 = (_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(int *)(v95 + 4 * i));
      *v96 = v93;
      if (!*((_WORD *)v139 + i))
        goto LABEL_168;
      if (v94 >= 2 && (int)v91 >= 2)
      {
        v97 = *(int *)(v88 + 4 * v87);
        v98 = (unsigned __int16 *)(v92 + 2 * v89 + 2);
        v99 = (int *)(v90 + 4 * v89 + 4);
        v100 = (unsigned __int16 *)(*v132 + 2 * v97 + 2);
        v101 = v91 - 1;
        v102 = 1;
        do
        {
          v103 = *v100++;
          if (v102 == v103)
            v96[v102++] = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(v85[3] + 8 * *v99 + 4) + *v98));
          ++v98;
          ++v99;
          --v101;
        }
        while (v101);
      }
      v138 = *(int *)(v95 + 4 * i);
      v104 = *(_QWORD *)(a1 + 168);
      v105 = *(_WORD *)(v85[54] + 2 * i);
      v106 = 1;
      if (!*(_BYTE *)(a1 + 13) && (v105 & 0x10) == 0 && (v105 & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 14))
        {
          v106 = v94 > 2;
          v108 = !v129;
          if (v94 > 2)
            v108 = 1;
          if ((v108 & 1) != 0)
            goto LABEL_116;
          if ((_DWORD)v94 != 1)
          {
            v106 = 0;
            goto LABEL_116;
          }
        }
        else
        {
          v106 = 0;
          if (v131 > 2 || (_DWORD)v94 != 1)
            goto LABEL_116;
        }
        v106 = (v105 & 4) == 0;
      }
LABEL_116:
      v109 = (unsigned __int16 *)v142;
      bzero(v142, 10 * v94);
      sub_1B2208538((_QWORD *)a1, i, (uint64_t)v109);
      if ((v106 & 1) == 0 && (_DWORD)v94 == 2 && *(_BYTE *)(a1 + 14))
      {
        v110 = a2;
        v106 = v109[4] || v109[9] || v109[2] || v109[7] != 0;
        if (v134 == 3)
        {
          v111 = *v109;
          if (v111 != 1)
            LOBYTE(v111) = v109[5] == 1;
          v106 |= v111;
        }
        v112 = (v109[3] != 0) ^ (v109[8] != 0);
LABEL_130:
        v113 = (_BYTE *)(v104 + v138);
        if (v112)
          v114 = 48;
        else
          v114 = 8;
        v115 = 2;
        while (2)
        {
          *v113 = 1;
          if (v109[2])
          {
            *v113 = 5;
            goto LABEL_136;
          }
          if ((v106 & 1) != 0 || v109[4])
          {
            v116 = *v109;
            v117 = v116 == 1;
            if (v116 == v110)
              v118 = 1;
            else
              v118 = 3;
            v119 = 1;
            goto LABEL_144;
          }
          v119 = v134 != 0;
          v122 = *v109;
          v117 = v122 == 1;
          if (v122 != 1)
            v119 = 0;
          v120 = 3;
          if (v122 == v110)
            v118 = 1;
          else
            v118 = 3;
          if (v119)
LABEL_144:
            v120 = 1;
          if (v117)
            v118 = v120;
          *v113 = v118;
          v121 = v118 | ((v109[4] != 0) << 6);
          *v113 = v121;
          if (v109[4])
          {
            LOBYTE(v121) = v121 | ((*v109 - v109[4] > 1) << 7);
            *v113 = v121;
            if (!v119)
              goto LABEL_160;
          }
          else if (v119)
          {
            *v113 = v121 | ((*v109 > 1u) << 7);
          }
          else
          {
            v121 = v121 & 0xFFFFFF7F | (((v118 >> 1) & 1) << 7);
            *v113 = v121;
LABEL_160:
            if (v109[3] | v105 & 0x20)
              v123 = 16;
            else
              v123 = v114;
            *v113 = v121 | v123;
            if (!*(_BYTE *)(a1 + 13))
            {
              v124 = *(int *)(*(_QWORD *)(a1 + 96) + 4 * i);
              v125 = *(_QWORD *)(a1 + 192);
              v126 = v125 + 4 * v124;
              v127 = v109[1];
              *(_WORD *)(v126 + v115 - 2) = v127;
              v128 = *v109;
              if (v115 == 2 && v127)
                *(_WORD *)(v125 + 4 * v124 + 2) = v127 + ~(_WORD)v91 + v128;
              else
                *(_WORD *)(v126 + v115) = v127 + v128 - 1;
            }
          }
LABEL_136:
          v115 += 4;
          v109 += 5;
          ++v113;
          if (!--v94)
            goto LABEL_168;
          continue;
        }
      }
      v110 = a2;
      if ((_DWORD)v94)
      {
        v112 = 0;
        goto LABEL_130;
      }
LABEL_168:
      v85 = *(_QWORD **)a1;
    }
  }
  operator delete(__p);
  operator delete(v151);
  operator delete(v156);
  operator delete(v161);
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
}

_QWORD *sub_1B2208538(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;

  v3 = (_QWORD *)*result;
  v4 = *(unsigned __int16 *)(result[9] + 2 * a2);
  if ((*(_WORD *)(*(_QWORD *)(*result + 432) + 2 * a2) & 1) != 0)
  {
    if (*(_WORD *)(result[9] + 2 * a2))
    {
      v19 = (_WORD *)(a3 + 4);
      do
      {
        *(v19 - 2) = 0;
        *v19 = 1;
        v19 += 5;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v5 = v3[45];
    v6 = v3[42];
    v7 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    v8 = *(int *)(v6 + v7);
    v9 = 8 * a2;
    v10 = *(unsigned int *)(v6 + v9);
    v11 = (int *)(v5 + 4 * v8);
    v12 = v3[33];
    v13 = *(unsigned int *)(v12 + v9);
    if ((_DWORD)v4 != 1 || (int)v10 > (int)v13)
    {
      v15 = result[15] + 2 * *(int *)(v12 + v7);
      *(_DWORD *)a3 = 1;
      if ((int)v10 > (int)v13 || *(_WORD *)(v15 + 2 * ((int)v13 - 1)))
        goto LABEL_33;
      v16 = *v11;
      if ((*(_BYTE *)(result[6] + v16) & 1) != 0)
      {
        v18 = (_WORD *)(a3 + 4);
      }
      else
      {
        v17 = *(_BYTE *)(v3[30] + v16);
        if ((v17 & 4) != 0)
        {
          v18 = (_WORD *)(a3 + 8);
        }
        else
        {
          if ((v17 & 8) == 0)
          {
LABEL_33:
            if ((int)v13 >= 2)
            {
              v25 = 0;
              v26 = v5 + 4 * v8 + 4;
              do
              {
                v27 = (unsigned __int16 *)(v15 + 2 * v25);
                v28 = v27[1];
                if (v28 == *v27)
                {
                  v29 = *(int *)(v26 + 4 * v25);
                  if ((*(_BYTE *)(result[6] + v29) & 1) != 0)
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                  }
                  else
                  {
                    v30 = *(_BYTE *)(v3[30] + v29);
                    if ((v30 & 4) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 8);
                    }
                    else if ((v30 & 8) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 6);
                    }
                  }
                }
                else
                {
                  if (*(_WORD *)(a3 + 10 * v27[1]))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                    v28 = v27[1];
                  }
                  *(_WORD *)(a3 + 10 * v28 + 2) = v25 + 1;
                }
                ++*(_WORD *)(a3 + 10 * v27[1]);
                ++v25;
              }
              while (v13 - 1 != v25);
            }
            if (!*(_WORD *)(v15 + 2 * ((int)v13 - 1)) && (int)v10 <= (int)v13)
              --*(_WORD *)(a3 + 4);
            return result;
          }
          v18 = (_WORD *)(a3 + 6);
        }
      }
      ++*v18;
      goto LABEL_33;
    }
    *(_DWORD *)a3 = 0;
    if ((int)v10 > 0)
    {
      v20 = 0;
      v21 = 0;
      v22 = result[6];
      do
      {
        v23 = v11[v21];
        if ((*(_BYTE *)(v22 + v23) & 1) != 0)
        {
          if (v20)
          {
            *(_WORD *)(a3 + 4) = 1;
            break;
          }
          *(_WORD *)a3 = v13;
          *(_WORD *)(a3 + 2) = v21;
          v20 = (unsigned __int16)v13;
        }
        else
        {
          v24 = *(_BYTE *)(v3[30] + v23);
          if ((v24 & 4) != 0)
          {
            ++*(_WORD *)(a3 + 8);
          }
          else if ((v24 & 8) != 0)
          {
            ++*(_WORD *)(a3 + 6);
          }
        }
        ++v21;
      }
      while (v10 != v21);
    }
    *(_WORD *)a3 = v13;
  }
  return result;
}

_QWORD *sub_1B22087A4(_QWORD *result, int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = *(int *)(*(_QWORD *)(*result + 264) + 8 * a2 + 4);
  v5 = *(_QWORD *)(*result + 288) + 4 * v4;
  v6 = *(_QWORD *)(*result + 312) + 2 * v4;
  v7 = (unsigned __int16 *)(result[24] + 4 * *(int *)(result[12] + 4 * a2) + 4 * a3);
  v8 = *v7;
  v9 = *(int *)(v5 + 4 * v8);
  v10 = v7[1];
  v11 = *(_QWORD *)(*result + 24);
  v12 = *(_DWORD *)(v11 + 8 * v9);
  v13 = *(int *)(v11 + 4 * (int)((2 * v9) | 1));
  v14 = result[3];
  v15 = *(int *)(v5 + 4 * v10);
  v16 = *(_DWORD *)(v11 + 8 * v15);
  v17 = v14 + 4 * *(int *)(v11 + 4 * (int)((2 * v15) | 1));
  v18 = *(unsigned __int16 *)(v6 + 2 * v8);
  v19 = *(unsigned __int16 *)(v6 + 2 * v10);
  if (!v19)
    v19 = v16;
  if (v12 - 1 == v18)
    v20 = 0;
  else
    v20 = v18 + 1;
  *a4 = *(_DWORD *)(v14 + 4 * v13 + 4 * v20);
  a4[1] = *(_DWORD *)(v17 + 4 * (v19 - 1));
  return result;
}

void *sub_1B2208850(void **a1)
{
  return memcpy(a1[3], *((const void **)*a1 + 6), ((uint64_t)((*((_QWORD *)*a1 + 7) - *((_QWORD *)*a1 + 6)) << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL);
}

_QWORD *sub_1B220886C(_QWORD *result)
{
  uint64_t v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v19;

  v1 = *result;
  v2 = *(int **)(*result + 48);
  v3 = *(_QWORD *)(*result + 56) - (_QWORD)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    v4 = result[12];
    v5 = (_DWORD *)result[3];
    v6 = (v3 >> 2);
    do
    {
      v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = result[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        v11 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v9);
        v12 = *v11;
        if ((int)v12 >= 1)
        {
          v13 = (int)v11[1];
          v14 = (int *)(*(_QWORD *)(v1 + 288) + 4 * v13);
          v15 = (unsigned __int16 *)(*(_QWORD *)(v1 + 312) + 2 * v13);
          v16 = (unsigned __int16 *)(result[15] + 2 * v13);
          do
          {
            v18 = *v16++;
            v17 = v18;
            if (v18)
            {
              v19 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(result[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return result;
}

_QWORD *sub_1B2208948(_QWORD *result, int a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *result;
  v5 = (int *)(*(_QWORD *)(*result + 120) + 8 * a2);
  v6 = *v5;
  if (*(unsigned __int16 *)(result[9] + 2 * v5[1]) + *(unsigned __int16 *)(result[9] + 2 * v6) < 3)
  {
    if (*(int *)(v4 + 12) < 1)
    {
      v19 = result[12];
      v20 = result[18];
      *a4 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v6));
      v18 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v5[1]));
    }
    else
    {
      v17 = result[12];
      *a4 = *(_DWORD *)(v17 + 4 * v6);
      v18 = *(_DWORD *)(v17 + 4 * v5[1]);
    }
    a4[1] = v18;
  }
  else
  {
    v7 = *(int *)(*(_QWORD *)(v4 + 144) + ((8 * a2) | 4));
    v8 = *(int *)(*(_QWORD *)(v4 + 168) + 4 * v7 + 4 * a3);
    v9 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 192) + 2 * v7 + 2 * a3);
    v10 = *(_QWORD *)(v4 + 24);
    v11 = *(_DWORD *)(v10 + 8 * v8);
    v12 = (2 * v8) | 1;
    v13 = result[3] + 4 * *(int *)(v10 + 4 * v12);
    v14 = *(_DWORD *)(v13 + 4 * v9);
    *a4 = v14;
    if ((int)v9 + 1 < v11)
      v15 = v9 + 1;
    else
      v15 = 0;
    v16 = *(_DWORD *)(v13 + 4 * v15);
    a4[1] = v16;
    if (*v5 != *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * *(int *)(v10 + 4 * v12) + 4 * v9))
    {
      *a4 = v16;
      a4[1] = v14;
    }
  }
  return result;
}

_QWORD *sub_1B2208A48(_QWORD *result, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;

  v3 = *result;
  v4 = *(_QWORD *)(*result + 336);
  v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 >= 1)
  {
    v6 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    v7 = *(int *)(v4 + v6);
    v8 = (int *)(*(_QWORD *)(v3 + 360) + 4 * v7);
    v9 = (unsigned __int16 *)(*(_QWORD *)(v3 + 384) + 2 * v7);
    v10 = *(int *)(*(_QWORD *)(v3 + 264) + v6);
    v11 = *(_QWORD *)(v3 + 288) + 4 * v10;
    v12 = *(_QWORD *)(v3 + 312) + 2 * v10;
    v13 = *(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * a2);
    v14 = *(_DWORD *)(v3 + 12);
    v15 = *(_QWORD *)(v3 + 120);
    v16 = (v5 - 1);
    v17 = v16 - 1;
    v18 = result[9];
    v19 = (int *)v11;
    v20 = (unsigned __int16 *)v12;
    v21 = v16;
    v22 = a3;
    do
    {
      v24 = *v8++;
      v23 = v24;
      v25 = v15 + 8 * v24;
      LODWORD(v24) = *v9++;
      v26 = *(int *)(v25 + 4 * ((_DWORD)v24 == 0));
      if (*(_WORD *)(v18 + 2 * v26) == 1)
      {
        v27 = (int *)(result[12] + 4 * v26);
        if (!v14)
          v27 = (int *)(result[18] + 4 * *v27);
        v28 = *v27;
      }
      else if ((v13 & 1) != 0)
      {
        v34 = *(int *)(*(_QWORD *)(v3 + 144) + 4 * ((2 * v23) | 1));
        v35 = *(int *)(*(_QWORD *)(v3 + 168) + 4 * v34);
        v36 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 192) + 2 * v34);
        v37 = *(_QWORD *)(v3 + 24);
        v38 = *(int *)(v37 + 8 * v35 + 4);
        v39 = *(_QWORD *)(v3 + 48) + 4 * v38;
        v40 = result[3] + 4 * v38;
        if ((_DWORD)v26 == *(_DWORD *)(v39 + 4 * v36))
        {
          v28 = *(_DWORD *)(v40 + 4 * v36);
        }
        else
        {
          if (*(_DWORD *)(v37 + 8 * (_DWORD)v35) - 1 == (_DWORD)v36)
            v47 = 0;
          else
            v47 = v36 + 1;
          v28 = *(_DWORD *)(v40 + 4 * v47);
        }
      }
      else
      {
        if ((v13 & 4) != 0 && !v21)
        {
          v29 = *(int *)(v11 + 4 * v17);
          v30 = *(_QWORD *)(v3 + 24);
          v31 = *(_DWORD *)(v30 + 8 * v29);
          v32 = result[3] + 4 * *(int *)(v30 + 4 * (int)((2 * v29) | 1));
          v33 = *(unsigned __int16 *)(v12 + 2 * v17);
          if (!*(_WORD *)(v12 + 2 * v17))
            v33 = v31;
          a3[v16] = *(_DWORD *)(v32 + 4 * (v33 - 1));
          goto LABEL_24;
        }
        v41 = *v19;
        v42 = *(_QWORD *)(v3 + 24);
        v43 = *(_DWORD *)(v42 + 8 * v41);
        v44 = result[3] + 4 * *(int *)(v42 + 4 * (int)((2 * v41) | 1));
        v45 = *v20;
        if (v43 - 1 == v45)
          v46 = 0;
        else
          v46 = v45 + 1;
        v28 = *(_DWORD *)(v44 + 4 * v46);
      }
      *v22 = v28;
LABEL_24:
      ++v22;
      --v21;
      ++v20;
      ++v19;
      --v5;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_1B2208C3C(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;

  v3 = *(_QWORD *)(*result + 24);
  v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(int *)(v3 + 8 * a2 + 4);
    v7 = result[3] + 4 * v6;
    v8 = *(_QWORD *)(*result + 48) + 4 * v6;
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v5);
      if (*(int *)(*result + 12) <= 0)
      {
        v10 = *(int *)(result[12] + 4 * *(int *)(v8 + 4 * v5));
        v9 = v10 - 1;
        v11 = (int *)(result[18] + 4 * v10);
        do
        {
          v12 = *v11++;
          ++v9;
        }
        while (v12 != *(_DWORD *)(v7 + 4 * v5));
      }
      *(_BYTE *)(a3 + v5++) = *(_BYTE *)(result[21] + v9);
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t sub_1B2208CCC(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 < 1)
    return 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = *(int *)(v3 + 8 * a2 + 4);
  v8 = a1[3] + 4 * v7;
  v9 = *(_QWORD *)(v2 + 48) + 4 * v7;
  v10 = *(_DWORD *)(v2 + 12);
  do
  {
    v11 = *(_DWORD *)(v8 + 4 * v5);
    if (v10 <= 0)
    {
      v12 = *(int *)(a1[12] + 4 * *(int *)(v9 + 4 * v5));
      v11 = v12 - 1;
      v13 = (int *)(a1[18] + 4 * v12);
      do
      {
        v14 = *v13++;
        ++v11;
      }
      while (v14 != *(_DWORD *)(v8 + 4 * v5));
    }
    v6 = *(unsigned __int8 *)(a1[21] + v11) | v6;
    ++v5;
  }
  while (v5 != v4);
  return v6;
}

void sub_1B2208D68(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      abort();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_1B2208E7C(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  __int16 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 1)
  {
    if (a2)
    {
      v16 = 2 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 1);
    if (v11 < 0)
      abort();
    v12 = v10 >> 1;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 > v11)
      v11 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1B1827A64(v6, v14);
    else
      v15 = 0;
    v18 = &v15[2 * v12];
    v19 = &v18[2 * a2];
    v20 = 2 * a2;
    v21 = v18;
    do
    {
      *(_WORD *)v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    v22 = &v15[2 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 2)
    {
      v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1B2208F80(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      abort();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1B17F7E58(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

char *sub_1B220907C(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = (char *)sub_1B1827A64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void sub_1B22090B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEFD4CE0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EEFD4CE0))
    {
      qword_1EEFD4C98 = (uint64_t)"bilinear";
      unk_1EEFD4CA0 = xmmword_1B22CA6F0;
      qword_1EEFD4CB0 = (uint64_t)"catmark";
      xmmword_1EEFD4CB8 = xmmword_1B22CA700;
      qword_1EEFD4CC8 = (uint64_t)"loop";
      *(_OWORD *)algn_1EEFD4CD0 = xmmword_1B22CA710;
      __cxa_guard_release(&qword_1EEFD4CE0);
    }
  }
}

uint64_t sub_1B2209144(unsigned int a1)
{
  sub_1B22090B4();
  return LODWORD(qword_1EEFD4C98[3 * a1 + 1]);
}

uint64_t sub_1B2209178(unsigned int a1)
{
  sub_1B22090B4();
  return HIDWORD(qword_1EEFD4C98[3 * a1 + 1]);
}

uint64_t sub_1B22091AC(unsigned int a1)
{
  sub_1B22090B4();
  return LODWORD(qword_1EEFD4C98[3 * a1 + 2]);
}

uint64_t sub_1B22091E0(unsigned int a1)
{
  sub_1B22090B4();
  return HIDWORD(qword_1EEFD4C98[3 * a1 + 2]);
}

id *sub_1B2209214(id *a1)
{

  return a1;
}

uint64_t sub_1B2209250(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  v5 = a1[13];
  v6 = a1[14];
  if (v5 != v6)
  {
    sub_1B2209348(v5, v6 - v5, a2);
    *(_QWORD *)(v4 + 8) = objc_claimAutoreleasedReturnValue();
  }
  v7 = a1[10];
  v8 = a1[11];
  if (v7 != v8)
  {
    sub_1B2209348(v7, v8 - v7, a2);
    *(_QWORD *)(v4 + 16) = objc_claimAutoreleasedReturnValue();
  }
  *(_QWORD *)(v4 + 24) = 0;
  if ((int)sub_1B220EB78((uint64_t)a1) >= 1)
  {
    v9 = 0;
    while (1)
    {
      sub_1B220EB60((uint64_t)a1, v9, &v11);
      if (v11 == 7)
        break;
      if (++v9 >= (int)sub_1B220EB78((uint64_t)a1))
        return v4;
    }
    *(_DWORD *)(v4 + 28) = 4 * sub_1B220EB94((uint64_t)a1, v9);
  }
  return v4;
}

id sub_1B2209348(uint64_t a1, uint64_t a2, void **a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (void *)MEMORY[0x1B5E23520]();
  objc_msgSend_commandBuffer(a3[1], v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_blitCommandEncoder(v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend_newBufferWithBytes_length_options_(*a3, v15, a1, a2, 0);
  v18 = (void *)objc_msgSend_newBufferWithLength_options_(*a3, v17, a2, 32);
  objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(v14, v19, (uint64_t)v16, 0, v18, 0, a2);
  objc_msgSend_endEncoding(v14, v20, v21, v22);
  objc_msgSend_commit(v10, v23, v24, v25);
  objc_msgSend_waitUntilCompleted(v10, v26, v27, v28);

  objc_autoreleasePoolPop(v6);
  return v18;
}

void sub_1B2209418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1B220944C(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, int a7, unint64_t a8)
{
  *(_QWORD *)a1 = &off_1E63CDED8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_1B22094EC(a2, a7, a8, a3, (_QWORD *)(a1 + 40), a4, a1 + 16, a5, (_QWORD *)(a1 + 64), a6, (_QWORD *)(a1 + 88), 0, 0, 0, 0, 0, 0, 0, 0,
    0,
    0);
  return a1;
}

void sub_1B22094EC(int a1, int a2, unint64_t a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21)
{
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v33;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v39;

  v33 = a2;
  if (a2)
    v24 = 0;
  else
    v24 = a3;
  sub_1B17F8190((uint64_t)a5, (a4[1] - *a4) >> 2);
  v35 = a6;
  v39 = (_QWORD *)a7;
  sub_1B17F8190(a7, (uint64_t)(a6[1] - *a6) >> 2);
  v36 = a8;
  sub_1B17F8190((uint64_t)a9, (uint64_t)(a8[1] - *a8) >> 2);
  sub_1B17F8160((uint64_t)a11, (uint64_t)(a10[1] - *a10) >> 2);
  if (a13)
    sub_1B17F8160((uint64_t)a13, (uint64_t)(a12[1] - *a12) >> 2);
  if (a15)
    sub_1B17F8160((uint64_t)a15, (uint64_t)(a14[1] - *a14) >> 2);
  if (a17)
    sub_1B17F8160((uint64_t)a17, (uint64_t)(a16[1] - *a16) >> 2);
  if (a19)
    sub_1B17F8160((uint64_t)a19, (uint64_t)(a18[1] - *a18) >> 2);
  if (a21)
    sub_1B17F8160((uint64_t)a21, (uint64_t)(a20[1] - *a20) >> 2);
  v25 = *a4;
  if (v24 >= (a4[1] - *a4) >> 2)
  {
    v27 = 0;
    v26 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      if ((((_DWORD)v24 == a1) & v33) != 0)
        v29 = a3;
      else
        v29 = v24;
      v30 = *(int *)(*v35 + 4 * v29);
      v31 = *(int *)(v25 + 4 * v29);
      *(_DWORD *)(*a5 + 4 * v27) = v28;
      *(_DWORD *)(*v39 + 4 * v27) = v30;
      memcpy((void *)(*a9 + 4 * v28), (const void *)(*v36 + 4 * v31), 4 * v30);
      memcpy((void *)(*a11 + 4 * v28), (const void *)(*a10 + 4 * v31), 4 * v30);
      if (a13 && *a13 != a13[1])
        memcpy((void *)(*a13 + 4 * v28), (const void *)(*a12 + 4 * v31), 4 * v30);
      if (a15 && *a15 != a15[1])
        memcpy((void *)(*a15 + 4 * v28), (const void *)(*a14 + 4 * v31), 4 * v30);
      if (a17 && *a17 != a17[1])
        memcpy((void *)(*a17 + 4 * v28), (const void *)(*a16 + 4 * v31), 4 * v30);
      if (a19 && *a19 != a19[1])
        memcpy((void *)(*a19 + 4 * v28), (const void *)(*a18 + 4 * v31), 4 * v30);
      if (a21 && *a21 != a21[1])
        memcpy((void *)(*a21 + 4 * v28), (const void *)(*a20 + 4 * v31), 4 * v30);
      v28 += v30;
      ++v27;
      v26 += v30;
      v24 = v29 + 1;
      v25 = *a4;
    }
    while (v29 + 1 < (a4[1] - *a4) >> 2);
  }
  sub_1B17F8190((uint64_t)a5, v27);
  sub_1B17F8190((uint64_t)v39, v27);
  sub_1B17F8190((uint64_t)a9, v26);
  if (a13 && *a13 != a13[1])
    sub_1B17F8160((uint64_t)a13, v26);
  if (a15 && *a15 != a15[1])
    sub_1B17F8160((uint64_t)a15, v26);
  if (a17 && *a17 != a17[1])
    sub_1B17F8160((uint64_t)a17, v26);
  if (a19 && *a19 != a19[1])
    sub_1B17F8160((uint64_t)a19, v26);
  if (a21)
  {
    if (*a21 != a21[1])
      sub_1B17F8160((uint64_t)a21, v26);
  }
}

void sub_1B2209914(_QWORD *a1)
{
  sub_1B2209938(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B2209938(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E63CDED8;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t *sub_1B22099A4(uint64_t *a1, int a2, int a3, char a4)
{
  uint64_t v8;

  v8 = operator new();
  *a1 = sub_1B2209C2C(v8, a2, a3, a4);
  return a1;
}

uint64_t *sub_1B2209A04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = sub_1B2209D90(v2);
    MEMORY[0x1B5E22E18](v3, 0x1090C40B2129F33);
  }
  return a1;
}

uint64_t sub_1B2209A48(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 216);
  if (((*(_QWORD *)(*(_QWORD *)a1 + 224) - v2) >> 2) - 1 >= a2)
    return *(unsigned int *)(v2 + 4 * a2);
  else
    return 0;
}

uint64_t sub_1B2209A74(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 248) = a2;
  return result;
}

uint64_t sub_1B2209A80(_QWORD *a1)
{
  return *a1 + 192;
}

uint64_t sub_1B2209A8C(_QWORD *a1)
{
  return *a1 + 216;
}

uint64_t sub_1B2209A98(_QWORD *a1)
{
  return *a1 + 24;
}

uint64_t sub_1B2209AA4(_QWORD *a1)
{
  return *a1 + 48;
}

void sub_1B2209AB0(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 != 0.0)
    sub_1B2209AD4(**(_QWORD **)a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a1 + 8), **(_QWORD **)a1, a3);
}

void sub_1B2209AD4(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 248) <= a2)
  {
    v9 = *(int *)(*(_QWORD *)(a1 + 216) + 4 * a2);
    if ((int)v9 >= 1)
    {
      v10 = *(int *)(*(_QWORD *)(a1 + 192) + 4 * a2);
      v11 = v10 + v9;
      do
      {
        sub_1B2209E50(a1, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v10), a3, *(_DWORD *)(a1 + 244), *(_DWORD *)(a1 + 240), a4, *(float *)(*(_QWORD *)(a4 + 48) + 4 * v10), a5);
        ++v10;
      }
      while (v10 < v11);
    }
  }
  else
  {
    sub_1B2209E50(a1, a2, a3, *(_DWORD *)(a1 + 244), *(_DWORD *)(a1 + 240), a4, a5, 1.0);
  }
}

void sub_1B2209BA4(uint64_t a1, unsigned int **a2, float a3)
{
  uint64_t v3;
  int *v6;
  float *v7;

  if (a3 != 0.0)
  {
    v3 = **a2;
    if ((int)v3 >= 1)
    {
      v6 = (int *)a2[1];
      v7 = (float *)a2[2];
      do
      {
        if (*v7 != 0.0)
          sub_1B2209AD4(**(_QWORD **)a1, *v6, *(_DWORD *)(a1 + 8), **(_QWORD **)a1, *v7 * a3);
        ++v6;
        ++v7;
        --v3;
      }
      while (v3);
    }
  }
}

uint64_t sub_1B2209C2C(uint64_t a1, int a2, int a3, char a4)
{
  void **v7;
  uint64_t v8;
  int v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;

  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 192) = 0u;
  v8 = a1 + 192;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v9 = 2 * a2;
  if (a2 >= 2621440)
    v9 = 5242880;
  v10 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 128) = 0uLL;
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_OWORD *)(a1 + 96) = 0uLL;
  *(_OWORD *)(a1 + 112) = 0uLL;
  *(_OWORD *)(a1 + 64) = 0uLL;
  *(_OWORD *)(a1 + 80) = 0uLL;
  *(_OWORD *)(a1 + 16) = 0uLL;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)a1 = 0uLL;
  *(_DWORD *)(a1 + 248) = a2;
  if (v9 <= a2)
    v9 = a2;
  v11 = v9;
  *(_BYTE *)(a1 + 252) = a4;
  sub_1B17F7530((void **)a1, v9);
  sub_1B17F7530(v10, v11);
  sub_1B1927690(v7, v11);
  if (a3)
  {
    sub_1B17F8190((uint64_t)v10, a2);
    sub_1B17F8160((uint64_t)v7, a2);
    sub_1B17F8190(a1, a2);
    sub_1B17F8190(v8, a2);
    sub_1B17F8190(a1 + 216, a2);
    v12 = *(_QWORD *)(a1 + 24);
    if (a2 >= 1)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 192);
      v15 = *(_QWORD *)(a1 + 216);
      v16 = *(_DWORD **)a1;
      v17 = *(_QWORD *)(a1 + 48);
      do
      {
        *(_DWORD *)(v14 + 4 * v13) = v13;
        *(_DWORD *)(v15 + 4 * v13) = 1;
        v16[v13] = v13;
        *(_DWORD *)(v12 + 4 * v13) = v13;
        *(_DWORD *)(v17 + 4 * v13++) = 1065353216;
      }
      while (a2 != v13);
    }
    v18 = (unint64_t)(*(_QWORD *)(a1 + 32) - v12) >> 2;
    *(_DWORD *)(a1 + 240) = v18;
    *(_DWORD *)(a1 + 244) = v18 - 1;
  }
  return a1;
}

uint64_t sub_1B2209D90(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 120);
  if (v6)
  {
    *(_QWORD *)(a1 + 128) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = v10;
    operator delete(v10);
  }
  v11 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v11;
    operator delete(v11);
  }
  return a1;
}

float sub_1B2209E50(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, float a7, float a8)
{
  BOOL v8;
  uint64_t v9;
  float result;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 252)
    && *(_QWORD *)a1 != *(_QWORD *)(a1 + 8)
    && (*(_DWORD *)(*(_QWORD *)a1 + 4 * a4) == a3 ? (v8 = a4 < a5) : (v8 = 0), v8))
  {
    v9 = a4;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v9) != a2)
    {
      if (a5 == ++v9)
        goto LABEL_11;
    }
    v11 = *(_QWORD *)(a6 + 48);
    result = (float)(a7 * a8) + *(float *)(v11 + 4 * v9);
    *(float *)(v11 + 4 * v9) = result;
  }
  else
  {
LABEL_11:
    sub_1B2209EBC(a1, a2, a3, a6, a7 * a8);
  }
  return result;
}

void sub_1B2209EBC(uint64_t a1, int a2, int a3, uint64_t a4, float a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;

  v40 = a4;
  v9 = *(int **)(a1 + 8);
  if (*(int **)a1 == v9 || *(v9 - 1) != a3)
  {
    v13 = *(_QWORD *)(a1 + 192);
    v12 = a1 + 192;
    if ((int)((unint64_t)(*(_QWORD *)(a1 + 200) - v13) >> 2) <= a3)
    {
      v14 = a3 + 1;
      sub_1B17F8190(v12, v14);
      sub_1B17F8190(a1 + 216, v14);
      v13 = *(_QWORD *)(a1 + 192);
      v9 = *(int **)(a1 + 8);
    }
    v15 = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
    v11 = a3;
    *(_DWORD *)(v13 + 4 * a3) = v15;
    v10 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)(v10 + 4 * a3) = 0;
    *(_DWORD *)(a1 + 244) = v15;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 216);
    v11 = a3;
  }
  v16 = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 240);
  ++*(_DWORD *)(v10 + 4 * v11);
  if ((unint64_t)v9 >= v16)
  {
    v18 = *(int **)a1;
    v19 = ((uint64_t)v9 - *(_QWORD *)a1) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      goto LABEL_40;
    v21 = v16 - (_QWORD)v18;
    v22 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
    if (v22 > v20)
      v20 = v22;
    if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v20;
    if (v23)
    {
      v24 = (char *)sub_1B17F7E58(a1 + 16, v23);
      v18 = *(int **)a1;
      v9 = *(int **)(a1 + 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = (int *)&v24[4 * v19];
    v26 = &v24[4 * v23];
    *v25 = a3;
    v17 = v25 + 1;
    while (v9 != v18)
    {
      v27 = *--v9;
      *--v25 = v27;
    }
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v26;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = a3;
    v17 = v9 + 1;
  }
  v28 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v17;
  v29 = *(char **)(a1 + 32);
  if ((unint64_t)v29 < v28)
  {
    *(_DWORD *)v29 = a2;
    v30 = v29 + 4;
    goto LABEL_39;
  }
  v31 = *(char **)(a1 + 24);
  v32 = (v29 - v31) >> 2;
  v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 62)
LABEL_40:
    abort();
  v34 = v28 - (_QWORD)v31;
  if (v34 >> 1 > v33)
    v33 = v34 >> 1;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
    v35 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (v35)
  {
    v36 = (char *)sub_1B17F7E58(a1 + 40, v35);
    v31 = *(char **)(a1 + 24);
    v29 = *(char **)(a1 + 32);
  }
  else
  {
    v36 = 0;
  }
  v37 = &v36[4 * v32];
  v38 = &v36[4 * v35];
  *(_DWORD *)v37 = a2;
  v30 = v37 + 4;
  while (v29 != v31)
  {
    v39 = *((_DWORD *)v29 - 1);
    v29 -= 4;
    *((_DWORD *)v37 - 1) = v39;
    v37 -= 4;
  }
  *(_QWORD *)(a1 + 24) = v37;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v38;
  if (v31)
    operator delete(v31);
LABEL_39:
  *(_QWORD *)(a1 + 32) = v30;
  sub_1B220A100((uint64_t)&v40, a5);
}

void sub_1B220A100(uint64_t a1, float a2)
{
  _QWORD *v3;
  float *v4;
  _QWORD *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  float *v13;
  char *v14;
  int v15;

  v3 = *(_QWORD **)a1;
  v4 = *(float **)(*(_QWORD *)a1 + 56);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 64);
  if ((unint64_t)v4 >= *v5)
  {
    v7 = (float *)v3[6];
    v8 = v4 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      abort();
    v10 = *v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_1B17F7E58((uint64_t)v5, v11);
      v7 = (float *)v3[6];
      v4 = (float *)v3[7];
    }
    else
    {
      v12 = 0;
    }
    v13 = (float *)&v12[4 * v8];
    v14 = &v12[4 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    while (v4 != v7)
    {
      v15 = *((_DWORD *)v4-- - 1);
      *((_DWORD *)v13-- - 1) = v15;
    }
    v3[6] = v13;
    v3[7] = v6;
    v3[8] = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  v3[7] = v6;
}

uint64_t sub_1B220A1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  sub_1B220FC54((_QWORD *)(a1 + 32), a2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 24) = 1;
  if ((*(_BYTE *)(a1 + 9) & 0x10) != 0)
  {
    v5 = (char *)(a1 + 144);
    v6 = *(int *)(a1 + 12);
    if ((_DWORD)v6 == -1)
    {
      sub_1B17F8190((uint64_t)v5, (int)((uint64_t)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 464)- *(_QWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 40) + 456)) >> 3));
      v7 = *(_QWORD *)(a1 + 144);
      v8 = *(_QWORD *)(a1 + 152) - v7;
      if ((int)(v8 >> 2) >= 1)
      {
        v9 = 0;
        v10 = (v8 >> 2);
        do
        {
          *(_DWORD *)(v7 + 4 * v9) = v9;
          ++v9;
        }
        while (v10 != v9);
      }
    }
    else
    {
      sub_1B220D6E8(v5, *(char **)(a1 + 16), *(_QWORD *)(a1 + 16) + 4 * v6, v6);
    }
  }
  return a1;
}

uint64_t sub_1B220A2A4(_QWORD *a1, _DWORD *a2, int *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = a3[1];
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8 * v6);
  if ((a4 & 0x80000000) != 0)
  {
    v8 = *(_DWORD *)(a1[12] + 4 * v6);
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1[15] + 24 * a4) + 4 * v6);
    v9 = *(_DWORD *)(a1[18] + 4 * a4);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = (int *)sub_1B2211A58(v7, *a3, v9);
      goto LABEL_6;
    }
  }
  v12 = *a3;
  v13 = *(_QWORD *)(v7 + 24);
  v10 = (int *)(*(_QWORD *)(v7 + 48) + 4 * *(int *)(v13 + 8 * v12 + 4));
  v11 = *(unsigned int *)(v13 + 8 * (_DWORD)v12);
LABEL_6:
  if ((int)v11 >= 1)
  {
    v14 = v11;
    do
    {
      v15 = *v10++;
      *a2++ = v15 + v8;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t sub_1B220A354(_QWORD *a1, uint64_t a2, int *a3, int a4, unsigned int a5)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int32x4_t v21;
  _DWORD v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a3[1];
  v8 = *(_QWORD **)(*(_QWORD *)(*a1 + 40) + 8 * v7);
  if ((a5 & 0x80000000) != 0)
  {
    v9 = a1 + 12;
    v10 = -1;
  }
  else
  {
    v9 = (_QWORD *)(a1[15] + 24 * a5);
    v10 = *(_DWORD *)(a1[18] + 4 * a5);
  }
  v11 = *(_DWORD *)(*v9 + 4 * v7);
  if (!a4)
    goto LABEL_8;
  v12 = dword_1B22CA9CC[a4];
  v13 = dword_1B22CAA0C[a4];
  switch(v12)
  {
    case 2:
      v14 = (char *)&unk_1B22CA888 + 64 * v13;
      sub_1B2211F10(v8, *a3, v22, v13, v10);
      goto LABEL_11;
    case 1:
      v14 = (char *)&unk_1B22CA788 + 64 * v13;
      sub_1B2211D30(v8, *a3, v22, v13, v10);
LABEL_11:
      v15 = 0;
      v16 = v22[0];
      do
      {
        v17 = *(unsigned int *)&v14[v15];
        v18 = v16;
        if ((v17 & 0x80000000) == 0)
          v18 = v22[v17];
        *(_DWORD *)(a2 + v15) = v18 + v11;
        v15 += 4;
      }
      while (v15 != 64);
      return 16;
    case 0:
LABEL_8:
      sub_1B2211B90(v8, *a3, v22, 0, v10);
      v14 = (char *)&unk_1B22CA748;
      goto LABEL_11;
  }
  if (v11)
  {
    v20 = 0;
    v21 = vdupq_n_s32(v11);
    do
    {
      *(int32x4_t *)(a2 + v20 * 4) = vaddq_s32(*(int32x4_t *)&v22[v20], v21);
      v20 += 4;
    }
    while (v20 != 16);
  }
  return 16;
}

BOOL sub_1B220A4CC(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  int *v8[2];

  v3 = *a1;
  v4 = *(_QWORD **)(*(_QWORD *)(*a1 + 40) + 8 * a2);
  if ((*(_BYTE *)(v4[12] + a3) & 1) != 0
    || ((*(unsigned __int8 *)(v3 + 8) >> 2) & 0xF) > a2
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 408) + a3) & 1) != 0)
  {
    return 0;
  }
  v5 = v4[3];
  v6 = (int *)*(unsigned int *)(v5 + 8 * a3);
  v8[0] = (int *)(v4[6] + 4 * *(int *)(v5 + 8 * a3 + 4));
  v8[1] = v6;
  return (sub_1B221160C((uint64_t)v4, v8) & 0x800) == 0;
}

BOOL sub_1B220A560(uint64_t a1, int a2, int a3, unsigned int a4)
{
  _QWORD *v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int16x4_t v12;
  uint8x8_t v13;
  int v14;
  int v15;
  int v16;
  int v19;
  int8x8_t v20[2];

  v20[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0
    || sub_1B2211404(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2), a3, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4)))
  {
    v9 = -1;
  }
  else
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4);
  }
  if (*(_DWORD *)(v7[3] + 8 * a3) != 4)
    return 0;
  sub_1B2211428(v7, a3, v20, v9);
  v10 = (*(_WORD *)(a1 + 8) & 8) != 0 ? 6016 : 1924;
  v11 = (*(_WORD *)(a1 + 8) & 8) != 0 ? 4608 : 516;
  v12 = (int16x4_t)vand_s8((int8x8_t)vceq_s16((int16x4_t)vand_s8(v20[0], (int8x8_t)vdup_n_s16(v10)), vdup_n_s16(v11)), (int8x8_t)0x8000400020001);
  v12.i32[0] = vaddv_s16(v12) & 0xF;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = (v20[0].u16[0] >> 1) & 1;
  v15 = (v20[0].u16[1] >> 1) & 1;
  v16 = (v20[0].u16[2] >> 1) & 1;
  if (v13.i32[0] != 3 || v15 + v14 + v16 + ((v20[0].u16[3] >> 1) & 1) != 1)
    return 0;
  if (a2 > 1)
    return 1;
  if (v14)
  {
    v19 = v20[0].i16[2] & 0x780;
  }
  else if (v15)
  {
    v19 = v20[0].i16[3] & 0x780;
  }
  else if (v16)
  {
    v19 = v20[0].i16[0] & 0x780;
  }
  else
  {
    v19 = v20[0].i16[1] & 0x780;
  }
  return v19 == 128;
}

BOOL sub_1B220A708(uint64_t a1, int a2, int a3, unsigned int a4)
{
  int v5;
  _QWORD *v7;
  unsigned int v9;
  __int16 v10;
  char v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int16x8_t v18;
  unsigned __int32 v19;
  _BOOL8 result;
  char v22;
  int v24;
  int v25;
  __int16 v26;
  int8x8_t v27[2];

  v5 = a2;
  v27[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0 || sub_1B2211404((uint64_t)v7, a3, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4)))
    v9 = -1;
  else
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4);
  v10 = sub_1B2211648(v7, a3, v9);
  v11 = v10;
  v12 = (v10 & 2) == 0;
  v13 = v12 | v10;
  if ((*(_WORD *)(a1 + 8) & 8) == 0 || (v10 & 0x1010) == 0)
    goto LABEL_25;
  v14 = (v10 & 0x4001) != 0x4000;
  if ((v10 & 0x5001) == 0x5000)
  {
    v24 = v5;
    sub_1B2211428(v7, a3, v27, v9);
    v15 = 0;
    v26 = 0;
    v25 = 0;
    while (1)
    {
      v16 = v27[0].i16[v15];
      if ((v16 & 0x4000) != 0)
      {
        sub_1B220A940(v7, a3, v15, 7, (uint64_t)&v25, v9);
        v17 = (v16 & 0x2000) != 0 ? 2 : 1;
        if (v17 != (unsigned __int16)v25)
          break;
      }
      if (++v15 == 4)
      {
        v14 = 1;
        goto LABEL_17;
      }
    }
    v14 = 0;
LABEL_17:
    v5 = v24;
  }
  v13 = v14 != 0;
  if (v5 <= 1 && (v11 & 2) != 0)
  {
    sub_1B2211428(v7, a3, v27, v9);
    v18 = vdupq_n_s16(v14);
    v19 = vmovn_s16(v18).u32[0];
    *(int8x8_t *)v18.i8 = vbic_s8(*(int8x8_t *)v18.i8, (int8x8_t)vceq_s16((int16x4_t)vand_s8(v27[0], (int8x8_t)vdup_n_s16(0x782u)), (int16x4_t)0x82008200820082));
    if (vmovn_s16(v18).u32[0] == v19 && v14 != 0)
      return 1;
  }
  else
  {
LABEL_25:
    if ((v13 & 1) != 0)
      return 1;
  }
  result = 0;
  if (*(_BYTE *)(a1 + 24))
    v22 = v12;
  else
    v22 = 1;
  if ((v22 & 1) == 0 && (v11 & 4) != 0 && (v11 & 1) == 0)
    return sub_1B220A560(a1, v5, a3, v9);
  return result;
}

uint64_t sub_1B220A940(_QWORD *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  int v22;

  if ((a6 & 0x80000000) != 0)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1[57] + 8 * a6);
  v7 = 1;
  v8 = *(int *)(a1[3] + 4 * ((2 * a2) | 1));
  v9 = *(int *)(a1[6] + 4 * v8 + 4 * a3);
  v10 = 2 * v9;
  v11 = a1[42];
  v12 = a1[45] + 4 * *(int *)(v11 + 8 * v9 + 4);
  v13 = *(unsigned int *)(v11 + 4 * v10);
  if ((int)v13 < 1)
  {
LABEL_8:
    LODWORD(v14) = -1;
  }
  else
  {
    v14 = 0;
    v15 = *(_DWORD *)(a1[9] + 4 * v8 + 4 * a3);
    while (*(_DWORD *)(v12 + 4 * v14) != v15)
    {
      if (v13 == ++v14)
        goto LABEL_8;
    }
  }
  v16 = ((int)v14 + 1) % (int)v13;
  *(_DWORD *)(a5 + 2) = 0;
  *(_WORD *)a5 = 1;
  v17 = a1[30];
  v18 = v14;
  while (1)
  {
    result = *(int *)(v12 + 4 * v18);
    v20 = *(unsigned __int8 *)(v17 + result);
    if (v6)
    {
      result = *(unsigned __int8 *)(*(_QWORD *)(v6 + 48) + result);
      if ((result & 1) != 0)
        v20 |= 6u;
    }
    if ((v20 & a4) != 0)
      break;
    *(_WORD *)a5 = ++v7;
    v18 = ((int)v13 - 1 + v18) % (int)v13;
    if (v18 == v16)
    {
      v18 = ((int)v14 + 1) % (int)v13;
      goto LABEL_16;
    }
  }
  do
  {
LABEL_16:
    v21 = *(int *)(v12 + 4 * v16);
    v22 = *(unsigned __int8 *)(v17 + v21);
    if (v6)
    {
      result = v22 | 6u;
      if ((*(_BYTE *)(*(_QWORD *)(v6 + 48) + v21) & 1) != 0)
        v22 |= 6u;
    }
    if ((v22 & a4) != 0)
      break;
    *(_WORD *)a5 = ++v7;
    v16 = (v16 + 1) % (int)v13;
  }
  while (v16 != (_DWORD)v14);
  *(_WORD *)(a5 + 2) = v18;
  return result;
}

uint64_t sub_1B220AA74(uint64_t a1, int a2, int a3, unsigned int a4)
{
  _QWORD *v6;
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  int8x8_t v11;
  int8x16_t v13;
  int v14;
  int8x8_t v15[2];

  v15[1] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0 || sub_1B2211404((uint64_t)v6, a3, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4)))
    v8 = -1;
  else
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a4);
  sub_1B2211428(v6, a3, v15, v8);
  v9 = sub_1B22115DC((unsigned __int16 *)v15, 4);
  if ((v9 & 0x1000) == 0)
    goto LABEL_8;
  if ((*(_WORD *)(a1 + 8) & 8) != 0)
  {
    v11 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)v15[0], (uint16x4_t)0xFFF7FFF6FFF5FFF4), (int8x8_t)0x8000400020001);
    LOWORD(v10) = v11.i16[0] | v11.i16[2] | ((v11.i32[0] | v11.i32[1]) >> 16);
  }
  else
  {
    if ((v9 & 4) == 0)
    {
LABEL_8:
      LOWORD(v10) = 0;
      goto LABEL_11;
    }
    v10 = (v15[0].u16[1] >> 1) & 2 | (v15[0].u16[0] >> 2) & 1 | v15[0].i8[4] & 4 | (8 * ((v15[0].u16[3] >> 2) & 1));
  }
LABEL_11:
  v10 = (unsigned __int16)v10;
  if ((v9 & 1) != 0)
  {
    v13 = vbicq_s8(vbslq_s8((int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v15[0], (int8x8_t)0x10001000100010))), (int8x16_t)xmmword_1B2245E50, (int8x16_t)xmmword_1B22CA730), (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v15[0], (int8x8_t)0x1000100010001))));
    *(int8x8_t *)v13.i8 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v10 = v13.i32[0] | (unsigned __int16)v10 | v13.i32[1];
    switch((__int16)v10)
    {
      case 1:
      case 4:
        v14 = 10;
        break;
      case 2:
      case 8:
        v14 = 5;
        break;
      default:
        goto LABEL_12;
    }
    v10 |= v14;
  }
  else
  {
LABEL_12:
    if (!v10)
      return 0;
  }
  return dword_1B22CA988[v10];
}

uint64_t sub_1B220AC4C(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE v40[4];
  _WORD v41[4];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * a2);
  if ((a5 & 0x80000000) != 0 || sub_1B2211404((uint64_t)v8, a3, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * a5)))
  {
    LODWORD(v10) = -1;
    result = (uint64_t)sub_1B2211428(v8, a3, v41, 0xFFFFFFFF);
  }
  else
  {
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * a5);
    result = (uint64_t)sub_1B2211428(v8, a3, v41, v10);
    if ((v10 & 0x80000000) == 0)
      result = (uint64_t)sub_1B2208C3C(*(_QWORD **)(v8[57] + 8 * v10), a3, (uint64_t)v40);
  }
  v12 = v8[3];
  v13 = *(unsigned int *)(v12 + 8 * a3);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v39 = (2 * a3) | 1;
    v15 = v8[6] + 4 * *(int *)(v12 + 4 * v39);
    v16 = 7;
    if ((*(_WORD *)(a1 + 8) & 8) == 0)
      v16 = 3;
    v37 = v15;
    v38 = v16;
    do
    {
      v17 = (v10 & 0x80000000) != 0 || (v40[v14] & 1) == 0;
      if ((*(_WORD *)(a1 + 8) & 8) != 0
        && ((v41[v14] & 0x1000) != 0 ? (v18 = (v41[v14] & 0x780) != 256) : (v18 = 0), v18)
        || !v17)
      {
        v20 = v41[v14];
        v21 = a4 + 6 * v14;
        if ((v20 & 1) != 0)
        {
          v22 = *(int *)(v8[6] + 4 * *(int *)(v8[3] + 4 * v39) + 4 * v14);
          v23 = v8[36];
          v24 = v8[33];
          v25 = *(int *)(v24 + 8 * v22 + 4);
          v26 = *(unsigned int *)(v24 + 8 * (_DWORD)v22);
          v27 = v8[39];
          *(_WORD *)(v21 + 4) = 0;
          *(_DWORD *)v21 = 0;
          if ((int)v26 < 1)
          {
LABEL_29:
            if ((v20 & 8) == 0)
              goto LABEL_30;
          }
          else
          {
            v28 = 0;
            v29 = v23 + 4 * v25;
            v30 = v27 + 2 * v25;
            while (*(_DWORD *)(v29 + 4 * v28) != a3 || v14 != *(unsigned __int16 *)(v30 + 2 * v28))
            {
              if (v26 == ++v28)
                goto LABEL_29;
            }
            v33 = a4 + 6 * v14;
            *(_WORD *)(v33 + 2) = v28;
            *(_WORD *)v21 = 1;
            *(_BYTE *)(v33 + 4) = 2;
            if ((v20 & 8) == 0)
            {
LABEL_30:
              if ((*(_WORD *)(a1 + 8) & 8) != 0)
              {
                v32 = a4 + 6 * v14;
                v31 = *(_BYTE *)(v32 + 4) & 0xFD | (2 * ((v20 & 0x4780) == 17408));
                *(_BYTE *)(v32 + 4) = v31;
              }
              else
              {
                v31 = *(_BYTE *)(a4 + 6 * v14 + 4);
              }
              goto LABEL_35;
            }
          }
        }
        else
        {
          result = sub_1B220A940(v8, a3, v14, v38, v21, v10);
          if ((v20 & 8) == 0)
            goto LABEL_30;
        }
      }
      else
      {
        v19 = a4 + 6 * v14;
        *(_WORD *)(v19 + 4) = 0;
        *(_DWORD *)v19 = 0;
        v20 = v41[v14];
        if ((v20 & 8) == 0)
          goto LABEL_30;
      }
      v34 = a4 + 6 * v14;
      v31 = *(_BYTE *)(v34 + 4) | 2;
      *(_BYTE *)(v34 + 4) = v31;
LABEL_35:
      if ((v31 & 2) == 0 && (v20 & 7) == 6 && *(_BYTE *)(a1 + 24))
      {
        v35 = (unsigned __int16 *)(a4 + 6 * v14);
        v36 = *v35;
        if (!*v35)
          v36 = *(_DWORD *)(v8[33] + 8 * *(int *)(v37 + 4 * v14));
        *((_BYTE *)v35 + 4) = v31 & 0xFD | (2 * (v36 == 1));
      }
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

void sub_1B220AF6C(_WORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if ((int)sub_1B220EB78(a2) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v5 += sub_1B220EB94(a2, v4);
      v6 += sub_1B220EBB8(a2, v4++);
    }
    while (v4 < (int)sub_1B220EB78(a2));
    if (v6 && v5)
    {
      sub_1B17F8190(a2 + 32, v6);
      sub_1B17F8000(a2 + 56, v5);
      if ((*(_BYTE *)(*(_QWORD *)a1 + 8) & 1) == 0)
      {
        v7 = 3;
        sub_1B220E804(a2, &v7, v5);
      }
      if ((a1[4] & 4) != 0)
        sub_1B220B058(a2 + 224, v5, &dword_1B22CA9C8);
    }
  }
}

void sub_1B220B058(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1B220D7EC((void **)a1, a2 - v3, a3);
  }
}

void sub_1B220B088(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;

  v4 = *a1;
  v5 = sub_1B220EBA8(a2);
  sub_1B220E840(a2, (unint64_t)(a1[19] - a1[18]) >> 2);
  v6 = a1[18];
  if ((int)((unint64_t)(a1[19] - v6) >> 2) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (sub_1B22138E4(**(_QWORD **)(v4 + 40), *(_DWORD *)(v6 + 4 * v7)) >> 2) & 7;
      sub_1B220E95C(a2, v8, v7);
      v9 = *((unsigned __int16 *)a1 + 4);
      if ((*(_BYTE *)(v4 + 8) & 1) != 0)
      {
        if ((v9 & 2) != 0)
          v13 = 4;
        else
          v13 = 3;
        v15 = v13;
        v12 = &v15;
      }
      else
      {
        v10 = (v9 >> 13) & 1;
        if (v8 == 5)
          v10 = 1;
        if ((v9 & 0x700) == 0x300)
          v11 = 9;
        else
          v11 = 6;
        if (v10)
          v11 = 3;
        v14 = v11;
        v12 = &v14;
      }
      sub_1B220E8E4(a2, v12, v5, v7++);
      v6 = a1[18];
    }
    while (v7 < (int)((unint64_t)(a1[19] - v6) >> 2));
  }
}

unint64_t sub_1B220B1AC(_QWORD *a1, int a2, uint64_t a3, char a4, unsigned __int8 a5)
{
  char v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  uint64_t v30;
  int v31;

  v7 = a2;
  v8 = *a1;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 24 * a2) + 24) + 8 * (_DWORD)a3) != 4;
  if (a2 < 1)
  {
    v12 = 0;
    LOWORD(v11) = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 64);
    v14 = *(_QWORD *)(v8 + 40);
    v15 = 1;
    v16 = a2;
    v17 = a2;
    do
    {
      v18 = *(_QWORD **)(v13 + 8 * --v16);
      v19 = a3;
      a3 = *(int *)(v18[33] + 4 * (int)a3);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8 * v16) + 24) + 8 * a3) == 4)
      {
        v10 = (*(unsigned __int8 *)(v18[42] + v19) >> 3) & 3;
        v20 = v15 + v12;
        if (v10 == 1)
          v21 = v15 + v12;
        else
          v21 = v12;
        if (v10 == 2)
        {
          v22 = v15 + v11;
        }
        else
        {
          v20 = v21;
          v22 = v11;
        }
        if (v10 == 3)
        {
          v11 += v15;
        }
        else
        {
          v12 = v20;
          v11 = v22;
        }
        v15 = 2 * (v15 & 0x7FFF);
      }
      else
      {
        v23 = v18[11];
        v24 = *(unsigned int *)(v23 + 8 * a3);
        if ((int)v24 < 1)
        {
LABEL_18:
          v9 = 1;
        }
        else
        {
          v25 = 0;
          v26 = v18[15] + 4 * *(int *)(v23 + 4 * (int)((2 * a3) | 1));
          while (*(_DWORD *)(v26 + 4 * v25) != v19)
          {
            if (v24 == ++v25)
              goto LABEL_18;
          }
          v9 = 1;
          v10 = v25;
        }
      }
    }
    while (v17-- > 1);
  }
  v28 = sub_1B220FCBC(a1 + 4, a3);
  if (v9)
    v29 = v10;
  else
    v29 = 0;
  v30 = (v28 + v29) & 0xFFFFFFF | (a5 << 28);
  if (v9)
    v31 = 16;
  else
    v31 = 0;
  return v30 | ((unint64_t)(v7 & 0xF | ((a4 & 0xF) << 8) | (v12 << 22) | ((v11 & 0x3FF) << 12) | v31) << 32);
}

uint64_t sub_1B220B34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return sub_1B220B35C(a1, a2, a3);
  else
    return sub_1B220B9D0(a1, a2, a3);
}

uint64_t sub_1B220B35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unsigned int *v42;
  uint64_t v43;
  int *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t *v54;
  uint64_t v55;
  _DWORD **v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  int v74;
  int v75;
  uint64_t v76[4];
  _BYTE v77[40];
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void **v85[2];

  v4 = a1;
  v85[1] = *(void ***)MEMORY[0x1E0C80C00];
  sub_1B220A1D8((uint64_t)v76, a1, a2, a3);
  v5 = *(_DWORD *)v4;
  v6 = (a2 & (2 * (*(_DWORD *)v4 < 2u)));
  v7 = *(_DWORD *)(v4 + 36);
  v8 = ((unint64_t)*(unsigned __int8 *)(v4 + 8) >> 2) & 0xF;
  v66 = a2;
  if ((a2 & 1) != 0)
    v9 = 1;
  else
    v9 = v8;
  v10 = v8 + 1;
  v68 = v9;
  v11 = v8 + 1 - v9;
  v70 = v6;
  if (v6)
  {
    v12 = 4;
  }
  else if (v5 > 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = dword_1B22CAA4C[v5];
  }
  v13 = operator new();
  sub_1B220E5B4(v13, v7);
  v63 = v77;
  *(_DWORD *)(v13 + 4) = sub_1B220FCB0((uint64_t)v77);
  sub_1B220E744(v13, v11);
  LODWORD(v85[0]) = 0;
  v75 = 0;
  v72 = v8;
  if (v68 <= v8)
  {
    v14 = v68;
    do
    {
      v15 = *(unsigned int **)(*(_QWORD *)(v4 + 88) + 24 * v14);
      v16 = *v15;
      if ((*(_BYTE *)(v4 + 8) & 2) != 0 && (int)v16 >= 1)
      {
        v17 = *((_QWORD *)v15 + 12);
        v18 = v16 + 1;
        do
          LODWORD(v16) = v16 - (*(_BYTE *)(v17 + (v18-- - 2)) & 1);
        while (v18 > 1);
      }
      v74 = v12;
      sub_1B220E970((_QWORD *)v13, &v74, (_DWORD)v16 << (v70 >> 1), &v75, (int *)v85, 0);
      ++v14;
    }
    while (v14 != v10);
  }
  sub_1B220AF6C(v76, v13);
  v19 = v83;
  v64 = v13;
  if (v83 == v84)
  {
    v31 = 0;
    v28 = 0;
    v23 = *(_DWORD **)(v13 + 32);
    v24 = *(unint64_t **)(v13 + 56);
    v35 = *(_QWORD *)(v4 + 88);
    v67 = (_QWORD *)(v4 + 88);
    v26 = *(_DWORD *)(*(_QWORD *)v35 + 8);
    v22 = v83;
  }
  else
  {
    sub_1B220B088(v76, v13);
    v19 = v83;
    v22 = v84;
    v23 = *(_DWORD **)(v13 + 32);
    v24 = *(unint64_t **)(v13 + 56);
    v25 = *(_QWORD *)(v4 + 88);
    v67 = (_QWORD *)(v4 + 88);
    v26 = *(_DWORD *)(*(_QWORD *)v25 + 8);
    if (v83 == v84)
    {
      v31 = 0;
      v28 = 0;
      v19 = v84;
    }
    else
    {
      MEMORY[0x1E0C80A78](v20, v21);
      v28 = (char *)&v63 - v27;
      bzero((char *)&v63 - v27, v22 - v19);
      MEMORY[0x1E0C80A78](v29, 2 * (v22 - v19));
      v31 = (char *)&v63 - v30;
      bzero((char *)&v63 - v30, v32);
      if ((int)((unint64_t)(v22 - v19) >> 2) >= 1)
      {
        v73 = v24;
        v33 = 0;
        v34 = v64;
        do
        {
          *(_QWORD *)&v31[8 * v33] = sub_1B220EF24(v34, v33);
          ++v33;
          v19 = v83;
          v22 = v84;
        }
        while (v33 < (int)((unint64_t)(v84 - v83) >> 2));
        v24 = v73;
      }
    }
  }
  if ((_DWORD)v72)
  {
    v73 = v24;
    v65 = v10;
    v36 = 1;
    v37 = v67;
    v69 = v4;
    do
    {
      v71 = v36;
      if (v36 < v68 || (v38 = (uint64_t *)(*v37 + 24 * v36), v72 = *(unsigned int *)*v38, (int)v72 < 1))
      {
        v40 = v73;
      }
      else
      {
        v39 = 0;
        v40 = v73;
        do
        {
          v41 = (_QWORD *)*v38;
          if ((*(_BYTE *)(v4 + 8) & 2) == 0 || (*(_BYTE *)(v41[12] + v39) & 1) == 0)
          {
            v42 = (unsigned int *)(v41[3] + 8 * v39);
            v43 = *v42;
            if ((int)v43 >= 1)
            {
              v44 = (int *)(v41[6] + 4 * (int)v42[1]);
              do
              {
                v45 = *v44++;
                *v23++ = v45 + v26;
                --v43;
              }
              while (v43);
            }
            v46 = sub_1B220B1AC(v76, v71, v39, 0, 0);
            v73 = v40;
            *v40++ = v46;
            v19 = v83;
            v22 = v84;
            if (v83 == v84)
            {
              v22 = v83;
            }
            else if ((int)((unint64_t)(v84 - v83) >> 2) >= 1)
            {
              v47 = 0;
              do
              {
                v48 = sub_1B2211A58(*v38, v39, *(_DWORD *)&v19[4 * v47]);
                if (v49 <= 0)
                {
                  v52 = *(_QWORD *)&v31[8 * v47];
                }
                else
                {
                  v50 = 0;
                  v51 = *(_DWORD *)&v28[4 * v47];
                  v52 = *(_QWORD *)&v31[8 * v47];
                  do
                  {
                    *(_DWORD *)(v52 + v50) = *(_DWORD *)(v48 + v50) + v51;
                    v50 += 4;
                  }
                  while (4 * v49 != v50);
                }
                *(_QWORD *)&v31[8 * v47++] = v52 + 4 * v49;
                v19 = v83;
                v22 = v84;
              }
              while (v47 < (int)((unint64_t)(v84 - v83) >> 2));
              v4 = v69;
            }
            if (v70)
            {
              v53 = *(v23 - 2);
              *v23 = *(v23 - 4);
              v23[1] = v53;
              v23 += 2;
              v54 = v73;
              v73[1] = *v73;
              v40 = v54 + 2;
              v19 = v83;
              v22 = v84;
              if (v83 == v84)
              {
                v22 = v83;
              }
              else if ((int)((unint64_t)(v84 - v83) >> 2) >= 1)
              {
                v55 = ((unint64_t)(v84 - v83) >> 2);
                v56 = (_DWORD **)v31;
                do
                {
                  v57 = *v56;
                  v58 = *(*v56 - 2);
                  *v57 = *(*v56 - 4);
                  v57[1] = v58;
                  *v56++ = v57 + 2;
                  --v55;
                }
                while (v55);
              }
            }
          }
          ++v39;
        }
        while (v39 != v72);
      }
      v73 = v40;
      if ((v66 & 1) != 0)
      {
        v37 = v67;
        v59 = v71;
        v26 += *(_DWORD *)(*(_QWORD *)(*v67 + 24 * v71) + 8);
        if ((int)((unint64_t)(v22 - v19) >> 2) >= 1)
        {
          v60 = 0;
          do
          {
            *(_DWORD *)&v28[4 * v60] += sub_1B22138D4(*(_QWORD *)(*v37 + 24 * v59), *(_DWORD *)&v19[4 * v60]);
            ++v60;
            v19 = v83;
            v22 = v84;
          }
          while (v60 < (int)((unint64_t)(v84 - v83) >> 2));
          v4 = v69;
        }
      }
      else
      {
        v37 = v67;
        v59 = v71;
      }
      v36 = v59 + 1;
    }
    while (v36 != v65);
  }
  if (v19)
  {
    v84 = v19;
    operator delete(v19);
  }
  v85[0] = (void **)&v82;
  sub_1B17F7664(v85);
  v61 = v64;
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  sub_1B220FC80((uint64_t)v63);
  return v61;
}

uint64_t sub_1B220B9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7[4];
  _BYTE v8[40];
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  void *v15;
  void **v16;

  sub_1B220A1D8((uint64_t)v7, a1, a2, a3);
  sub_1B220BAAC(v7);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = operator new();
  sub_1B220E5B4(v5, v4);
  *(_DWORD *)(v5 + 4) = sub_1B220FCB0((uint64_t)v8);
  sub_1B220C024((uint64_t)v7, (_QWORD *)v5);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v16 = (void **)&v13;
  sub_1B17F7664(&v16);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  sub_1B220FC80((uint64_t)v8);
  return v5;
}

void sub_1B220BAAC(uint64_t *a1)
{
  unint64_t v2;
  char *v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD **v18;
  unint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  int v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  int v49;
  int v50;
  _DWORD *v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  unint64_t v63;
  int *v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  unsigned int v77;
  _DWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  v80 = a1 + 9;
  v81 = *a1;
  sub_1B220D370((void **)a1 + 9, *(int *)(*a1 + 28));
  v2 = a1[14];
  v79 = (uint64_t)(a1 + 14);
  v3 = (char *)a1[13];
  if ((unint64_t)v3 >= v2)
  {
    v5 = (char *)a1[12];
    v6 = (v3 - v5) >> 2;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 62)
LABEL_97:
      abort();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 1 > v7)
      v7 = v8 >> 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      v10 = (char *)sub_1B17F7E58(v79, v9);
      v5 = (char *)a1[12];
      v3 = (char *)a1[13];
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[4 * v6];
    v12 = &v10[4 * v9];
    *(_DWORD *)v11 = 0;
    v4 = v11 + 4;
    while (v3 != v5)
    {
      v13 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *((_DWORD *)v11 - 1) = v13;
      v11 -= 4;
    }
    a1[12] = (uint64_t)v11;
    a1[13] = (uint64_t)v4;
    a1[14] = (uint64_t)v12;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_DWORD *)v3 = 0;
    v4 = v3 + 4;
  }
  a1[13] = (uint64_t)v4;
  v14 = a1 + 15;
  sub_1B17F749C(a1 + 15, (a1[19] - a1[18]) >> 2);
  if ((int)((unint64_t)(a1[19] - a1[18]) >> 2) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *v14 + 24 * v15;
      v18 = (_DWORD **)(v16 + 8);
      v17 = *(_DWORD **)(v16 + 8);
      v20 = (_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 16);
      if ((unint64_t)v17 >= v19)
      {
        v22 = *(_DWORD **)v16;
        v23 = ((uint64_t)v17 - *(_QWORD *)v16) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          goto LABEL_97;
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_1B17F7E58((uint64_t)v20, v26);
          v17 = *v18;
          v22 = *(_DWORD **)v16;
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[4 * v23];
        *(_DWORD *)v28 = 0;
        v21 = v28 + 4;
        while (v17 != v22)
        {
          v29 = *--v17;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        *(_QWORD *)v16 = v28;
        *v18 = v21;
        *v20 = &v27[4 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v17 = 0;
        v21 = v17 + 1;
      }
      *v18 = v21;
      ++v15;
    }
    while (v15 < (int)((unint64_t)(a1[19] - a1[18]) >> 2));
  }
  v30 = v81;
  if ((int)(-1431655765 * ((*(_QWORD *)(v81 + 96) - *(_QWORD *)(v81 + 88)) >> 3)) >= 1)
  {
    v31 = 0;
    while (1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v30 + 40) + 8 * v31);
      v34 = (int *)a1[13];
      v33 = a1[14];
      v35 = *(_DWORD *)(v32 + 8) + *(v34 - 1);
      if ((unint64_t)v34 >= v33)
      {
        v37 = (int *)a1[12];
        v38 = v34 - v37;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          goto LABEL_97;
        v40 = v33 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_1B17F7E58(v79, v41);
          v37 = (int *)a1[12];
          v34 = (int *)a1[13];
        }
        else
        {
          v42 = 0;
        }
        v43 = (int *)&v42[4 * v38];
        *v43 = v35;
        v36 = v43 + 1;
        while (v34 != v37)
        {
          v44 = *--v34;
          *--v43 = v44;
        }
        a1[12] = (uint64_t)v43;
        a1[13] = (uint64_t)v36;
        a1[14] = (uint64_t)&v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v34 = v35;
        v36 = v34 + 1;
      }
      a1[13] = (uint64_t)v36;
      v45 = a1[18];
      if ((int)((unint64_t)(a1[19] - v45) >> 2) >= 1)
      {
        v46 = 0;
        do
        {
          v47 = *v14 + 24 * v46;
          v48 = (_DWORD **)(v47 + 8);
          v49 = *(_DWORD *)(*(_QWORD *)(v47 + 8) - 4);
          v50 = sub_1B22138D4(v32, *(_DWORD *)(v45 + 4 * v46)) + v49;
          v51 = *(_DWORD **)(v47 + 8);
          v52 = *(_QWORD *)(v47 + 16);
          if ((unint64_t)v51 >= v52)
          {
            v54 = *(_DWORD **)v47;
            v55 = ((uint64_t)v51 - *(_QWORD *)v47) >> 2;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 62)
              goto LABEL_97;
            v57 = v52 - (_QWORD)v54;
            if (v57 >> 1 > v56)
              v56 = v57 >> 1;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
              v58 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v58 = v56;
            if (v58)
            {
              v59 = (char *)sub_1B17F7E58(v47 + 16, v58);
              v51 = *v48;
              v54 = *(_DWORD **)v47;
            }
            else
            {
              v59 = 0;
            }
            v60 = &v59[4 * v55];
            *(_DWORD *)v60 = v50;
            v53 = v60 + 4;
            while (v51 != v54)
            {
              v61 = *--v51;
              *((_DWORD *)v60 - 1) = v61;
              v60 -= 4;
            }
            *(_QWORD *)v47 = v60;
            *v48 = v53;
            *(_QWORD *)(v47 + 16) = &v59[4 * v58];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v51 = v50;
            v53 = v51 + 1;
          }
          *v48 = v53;
          ++v46;
          v45 = a1[18];
        }
        while (v46 < (int)((unint64_t)(a1[19] - v45) >> 2));
      }
      if (*(int *)v32 >= 1)
        break;
LABEL_95:
      ++v31;
      v30 = v81;
      if (v31 >= (int)(-1431655765 * ((*(_QWORD *)(v81 + 96) - *(_QWORD *)(v81 + 88)) >> 3)))
        return;
    }
    v62 = 0;
    while (1)
    {
      if (sub_1B220A4CC(a1, v31, v62))
      {
        v64 = (int *)a1[10];
        v63 = a1[11];
        if ((unint64_t)v64 >= v63)
        {
          v66 = ((uint64_t)v64 - *v80) >> 3;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 61)
            goto LABEL_97;
          v68 = v63 - *v80;
          if (v68 >> 2 > v67)
            v67 = v68 >> 2;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
            v69 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          v71 = (char *)sub_1B17F812C((uint64_t)(a1 + 11), v69);
          v72 = (int *)&v71[8 * v66];
          *v72 = v62;
          v72[1] = v31;
          v73 = (char *)a1[9];
          v74 = (char *)a1[10];
          v75 = v72;
          while (v74 != v73)
          {
            v76 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v75 - 1) = v76;
            v75 -= 2;
          }
          v65 = v72 + 2;
          a1[9] = (uint64_t)v75;
          a1[10] = (uint64_t)(v72 + 2);
          a1[11] = (uint64_t)&v71[8 * v70];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *v64 = v62;
          v64[1] = v31;
          v65 = v64 + 2;
        }
        a1[10] = (uint64_t)v65;
        if (sub_1B220A708((uint64_t)a1, v31, v62, 0xFFFFFFFF))
        {
          v77 = 1;
          v78 = a1 + 7;
LABEL_93:
          *v78 += v77;
          goto LABEL_94;
        }
        ++*((_DWORD *)a1 + 15);
        if ((a1[1] & 0x700) == 0x400)
        {
          v77 = (sub_1B2211648((_QWORD *)v32, v62, 0xFFFFFFFF) >> 2) & 1;
          v78 = a1 + 8;
          goto LABEL_93;
        }
      }
LABEL_94:
      if (++v62 >= *(_DWORD *)v32)
        goto LABEL_95;
    }
  }
}

void sub_1B220C024(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  int *v32;
  _DWORD *v33;
  unsigned int v34;
  void **v35;
  void *v36;
  void **v37;
  int *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  _DWORD *v43;
  unsigned int v44;
  void **v45;
  void *v46;
  void **v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  _QWORD *v79;
  __int16 v80;
  _BOOL4 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  float v86;
  float v87;
  int v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  int v93;
  int *v94;
  unint64_t v95;
  unint64_t *v96;
  float *v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  float *v106;
  int v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  int v115;
  int v116;
  __int16 *v117;
  uint64_t v118;
  BOOL v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  int v125;
  _QWORD *v126;
  _QWORD *v127;
  int *v128;
  unint64_t v129;
  int v130;
  _DWORD *v131;
  uint64_t v132;
  int v133;
  int *v134;
  unint64_t v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  int v139;
  int v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  unsigned int v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  int *v156;
  unint64_t v157;
  int v158;
  _DWORD *v159;
  uint64_t v160;
  int v161;
  int v162;
  _QWORD *v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  unsigned int v167;
  _QWORD *v168;
  void *v169;
  uint64_t v170;
  char *v171;
  _DWORD **v172;
  int *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t *v179;
  int *v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  __int16 v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  BOOL v189;
  int v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[3];
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  void *__p;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  int v211;
  int v212;
  uint64_t v213[37];

  v4 = 0;
  v213[35] = *MEMORY[0x1E0C80C00];
  v182 = *(_QWORD *)a1;
  do
  {
    v5 = (char *)&v211 + v4 * 8;
    *(_DWORD *)v5 = 6;
    *(_QWORD *)(v5 + 4) = 0;
    *(_QWORD *)(v5 + 20) = 0;
    *(_QWORD *)(v5 + 12) = 0;
    *((_DWORD *)v5 + 7) = 0;
    *((_QWORD *)v5 + 4) = &v213[v4 + 5];
    *((_QWORD *)v5 + 5) = 0x100000000;
    *((_QWORD *)v5 + 7) = 0;
    *((_QWORD *)v5 + 8) = &v213[v4 + 9];
    *((_QWORD *)v5 + 9) = 0x100000000;
    v4 += 12;
    *((_QWORD *)v5 + 11) = 0;
  }
  while (v4 != 36);
  v6 = *(_DWORD *)(a1 + 56);
  v211 = 6;
  v212 = v6;
  v7 = v6 > 0;
  v8 = *(_BYTE *)(a1 + 9) & 7;
  switch(v8)
  {
    case 4:
      v11 = &v211 + 24 * (v6 > 0);
      v12 = *(_DWORD *)(a1 + 60);
      v13 = *(_DWORD *)(a1 + 64);
      v14 = __OFSUB__(v12, v13);
      v15 = v12 - v13;
      *v11 = 7;
      v11[1] = v15;
      v186 = v7;
      if ((v15 < 0) ^ v14 | (v15 == 0))
        v16 = v7;
      else
        v16 = v7 + 1;
      v17 = &v211 + 24 * v16;
      *v17 = 8;
      v17[1] = v13;
      v183 = v16;
      if (v13 <= 0)
        v10 = v16;
      else
        v10 = v16 + 1;
      break;
    case 3:
      v18 = &v211 + 24 * (v6 > 0);
      v19 = *(_DWORD *)(a1 + 60);
      v20 = v18[1];
      v14 = __OFADD__(v20, v19);
      v21 = v20 + v19;
      *v18 = 9;
      v18[1] = v21;
      if ((v21 < 0) ^ v14 | (v21 == 0))
        v10 = v7;
      else
        v10 = v7 + 1;
      v186 = v7;
      v183 = v7;
      break;
    case 2:
      v183 = 0;
      v186 = 0;
      v9 = *(_DWORD *)(a1 + 60);
      v212 = v9 + v6;
      if ((v212 < 0) ^ __OFADD__(v9, v6) | (v212 == 0))
        v10 = 0;
      else
        v10 = 1;
      break;
    default:
      v183 = 2;
      v10 = v6 > 0;
      v186 = 1;
      break;
  }
  sub_1B220E744((uint64_t)a2, v10);
  v194 = 0;
  v193 = 0;
  if (v10)
  {
    v22 = v10;
    v23 = &v212;
    do
    {
      v24 = *v23;
      v192 = *(v23 - 1);
      sub_1B220E970(a2, &v192, v24, (int *)&v194 + 1, (int *)&v194, &v193);
      v23 += 24;
      --v22;
    }
    while (v22);
  }
  v185 = *(_WORD *)(a1 + 8);
  sub_1B220AF6C((_WORD *)a1, (uint64_t)a2);
  if (*(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 152))
    sub_1B220B088((uint64_t *)a1, (uint64_t)a2);
  if (v10)
  {
    v25 = 0;
    v188 = v10;
    do
    {
      v26 = &v211 + 24 * v25;
      *((_QWORD *)v26 + 1) = sub_1B220EBF0((uint64_t)a2, v25);
      *((_QWORD *)v26 + 2) = sub_1B220EC98((uint64_t)a2, v25);
      if ((v185 & 4) != 0)
        v213[12 * v25 + 2] = sub_1B220EB44((uint64_t)a2, v25);
      v27 = *(_QWORD *)(a1 + 144);
      v28 = *(_QWORD *)(a1 + 152);
      if (v27 != v28)
      {
        v29 = &v213[12 * v25 + 3];
        v30 = v28 - v27;
        v31 = (unint64_t)(v28 - v27) >> 2;
        if ((_DWORD)v31)
        {
          v32 = &v211 + 24 * v25;
          v34 = v32[11];
          v33 = v32 + 11;
          if (v34 < v31)
          {
            v35 = (void **)(&v211 + 24 * v25);
            operator delete(v35[7]);
            *v29 = (uint64_t)(v35 + 6);
            *v33 = 1;
            v36 = operator new((2 * v30) & 0x7FFFFFFF8);
            v35[7] = v36;
            *v29 = (uint64_t)v36;
            *v33 = v31;
          }
        }
        else
        {
          v37 = (void **)(&v211 + 24 * v25);
          operator delete(v37[7]);
          *v29 = (uint64_t)(v37 + 6);
          *((_DWORD *)v37 + 11) = 1;
        }
        v38 = &v211 + 24 * v25;
        v38[10] = v31;
        v39 = v38 + 16;
        v40 = *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144);
        v41 = v40 >> 2;
        if ((v40 >> 2))
        {
          v42 = &v211 + 24 * v25;
          v44 = v42[19];
          v43 = v42 + 19;
          if (v44 < v41)
          {
            v45 = (void **)(&v211 + 24 * v25);
            operator delete(v45[11]);
            *v39 = v45 + 10;
            *v43 = 1;
            v46 = operator new((2 * v40) & 0x7FFFFFFF8);
            v45[11] = v46;
            *v39 = v46;
            *v43 = v41;
          }
        }
        else
        {
          v47 = (void **)(&v211 + 24 * v25);
          operator delete(v47[11]);
          *v39 = v47 + 10;
          *((_DWORD *)v47 + 19) = 1;
        }
        LODWORD(v213[12 * v25 + 8]) = v41;
        if ((int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2) >= 1)
        {
          v48 = 0;
          do
          {
            sub_1B220EF0C((uint64_t)a2, v48, &v207);
            v49 = sub_1B220EB2C((uint64_t)a2, v25, 0);
            v50 = v49;
            if (((_DWORD)v207 - 1) > 8)
              v51 = -1;
            else
              v51 = dword_1B22CAA58[(int)v207 - 1];
            *(_QWORD *)(*v29 + 8 * v48) = sub_1B220EF24((uint64_t)a2, v48) + 4 * v51 * v49;
            *(_QWORD *)(*v39 + 8 * v48) = sub_1B220EFD0((uint64_t)a2, v48) + 8 * v50;
            ++v48;
          }
          while (v48 < (int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2));
        }
      }
      ++v25;
    }
    while (v25 != v188);
  }
  v52 = &v209;
  v208 = 0x100000000;
  v210 = 0;
  v53 = &v205;
  __p = 0;
  v203 = &v205;
  v204 = 0x100000000;
  v206 = 0;
  v207 = &v209;
  v54 = &v201;
  v199 = &v201;
  v200 = 0x100000000;
  v55 = *(_BYTE *)(a1 + 9) & 7;
  if (v55 == 2)
  {
    v56 = operator new();
    *(_QWORD *)v56 = &off_1E63CDED8;
    *(_DWORD *)(v56 + 8) = 0;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    *(_OWORD *)(v56 + 48) = 0u;
    *(_OWORD *)(v56 + 64) = 0u;
    *(_OWORD *)(v56 + 80) = 0u;
    *(_OWORD *)(v56 + 96) = 0u;
    v57 = operator new();
    *(_QWORD *)v57 = &off_1E63CDED8;
    *(_DWORD *)(v57 + 8) = 0;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(_OWORD *)(v57 + 64) = 0u;
    *(_OWORD *)(v57 + 80) = 0u;
    *(_OWORD *)(v57 + 96) = 0u;
    v176 = operator new();
    sub_1B221E41C(v176, v182, v56, v57);
    v178 = 0;
LABEL_51:
    v177 = 0;
    goto LABEL_52;
  }
  if (v55 == 3)
  {
    v56 = operator new();
    *(_QWORD *)v56 = &off_1E63CDED8;
    *(_DWORD *)(v56 + 8) = 0;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    *(_OWORD *)(v56 + 48) = 0u;
    *(_OWORD *)(v56 + 64) = 0u;
    *(_OWORD *)(v56 + 80) = 0u;
    *(_OWORD *)(v56 + 96) = 0u;
    v57 = operator new();
    *(_QWORD *)v57 = &off_1E63CDED8;
    *(_DWORD *)(v57 + 8) = 0;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(_OWORD *)(v57 + 64) = 0u;
    *(_OWORD *)(v57 + 80) = 0u;
    *(_OWORD *)(v57 + 96) = 0u;
    v178 = (_QWORD *)operator new();
    sub_1B2220A28(v178, v182, v56, v57, (*(unsigned __int16 *)(a1 + 8) >> 11) & 1);
    v176 = 0;
    goto LABEL_51;
  }
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v56 = 0;
  v57 = 0;
  if (v55 == 4)
  {
    v177 = (_QWORD *)operator new();
    sub_1B2223928((uint64_t)v177, v182);
    v176 = 0;
    v178 = 0;
    v56 = 0;
    v57 = 0;
  }
LABEL_52:
  v58 = *(_QWORD *)(a1 + 144);
  v59 = *(_QWORD *)(a1 + 152);
  if (v58 == v59)
    goto LABEL_76;
  v60 = v59 - v58;
  v61 = (unint64_t)(v59 - v58) >> 2;
  if ((_DWORD)v61)
  {
    if (HIDWORD(v208) >= v61)
      goto LABEL_58;
    operator delete(v210);
    v207 = &v209;
    HIDWORD(v208) = 1;
    v52 = (uint64_t *)operator new((2 * v60) & 0x7FFFFFFF8);
    v210 = v52;
    v62 = v61;
  }
  else
  {
    operator delete(v210);
    v62 = 1;
  }
  v207 = v52;
  HIDWORD(v208) = v62;
LABEL_58:
  LODWORD(v208) = v61;
  v63 = *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144);
  if ((v63 >> 2))
  {
    if (HIDWORD(v204) >= (v63 >> 2))
      goto LABEL_63;
    operator delete(v206);
    v203 = &v205;
    HIDWORD(v204) = 1;
    v53 = (uint64_t *)operator new((2 * v63) & 0x7FFFFFFF8);
    v206 = v53;
    v64 = v63 >> 2;
  }
  else
  {
    operator delete(v206);
    v64 = 1;
  }
  v203 = v53;
  HIDWORD(v204) = v64;
LABEL_63:
  LODWORD(v204) = v63 >> 2;
  v65 = *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144);
  if ((v65 >> 2))
  {
    if (HIDWORD(v200) >= (v65 >> 2))
      goto LABEL_68;
    operator delete(__p);
    v199 = &v201;
    HIDWORD(v200) = 1;
    v54 = (uint64_t *)operator new((2 * v65) & 0x7FFFFFFF8);
    __p = v54;
    v66 = v65 >> 2;
  }
  else
  {
    operator delete(__p);
    v66 = 1;
  }
  v199 = v54;
  HIDWORD(v200) = v66;
LABEL_68:
  LODWORD(v200) = v65 >> 2;
  if ((int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2) >= 1)
  {
    v67 = 0;
    while (1)
    {
      v68 = *(_BYTE *)(a1 + 9) & 7;
      if (v68 == 2)
        break;
      if (v68 == 3)
      {
        v69 = operator new();
        *(_QWORD *)v69 = &off_1E63CDED8;
        *(_DWORD *)(v69 + 8) = 0;
        *(_OWORD *)(v69 + 16) = 0u;
        *(_OWORD *)(v69 + 32) = 0u;
        *(_OWORD *)(v69 + 48) = 0u;
        *(_OWORD *)(v69 + 64) = 0u;
        *(_OWORD *)(v69 + 80) = 0u;
        *(_OWORD *)(v69 + 96) = 0u;
        v199[v67] = v69;
        v70 = operator new();
        v71 = sub_1B2220A28(v70, v182, v199[v67], 0, (*(unsigned __int16 *)(a1 + 8) >> 11) & 1);
        v72 = &v203;
LABEL_74:
        (*v72)[v67] = v71;
      }
      if (++v67 >= (int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2))
        goto LABEL_76;
    }
    v73 = operator new();
    *(_QWORD *)v73 = &off_1E63CDED8;
    *(_DWORD *)(v73 + 8) = 0;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(_OWORD *)(v73 + 64) = 0u;
    *(_OWORD *)(v73 + 80) = 0u;
    *(_OWORD *)(v73 + 96) = 0u;
    v199[v67] = v73;
    v74 = operator new();
    v71 = sub_1B221E41C(v74, v182, v199[v67], 0);
    v72 = &v207;
    goto LABEL_74;
  }
LABEL_76:
  v174 = (_QWORD *)v57;
  v175 = (_QWORD *)v56;
  v75 = *(_QWORD *)(a1 + 72);
  if ((int)((unint64_t)(*(_QWORD *)(a1 + 80) - v75) >> 3) >= 1)
  {
    v76 = 0;
    v173 = &v211 + 24 * v183;
    v172 = (_DWORD **)(v173 + 2);
    v179 = &v213[12 * v186];
    v180 = &v211 + 24 * v186;
    v181 = a2 + 33;
    do
    {
      v77 = (int *)(v75 + 8 * v76);
      v78 = v77 + 1;
      v79 = *(_QWORD **)(*(_QWORD *)(v182 + 40) + 8 * v77[1]);
      v80 = sub_1B2211648(v79, *v77, 0xFFFFFFFF);
      memset(v198, 0, sizeof(v198));
      v81 = sub_1B220A708(a1, v77[1], *v77, 0xFFFFFFFF);
      v82 = v77[1];
      v83 = *v77;
      v189 = v81;
      v184 = v76;
      if (v81)
      {
        v84 = sub_1B220AA74(a1, v82, v83, 0xFFFFFFFF);
        v85 = v84;
        v187 = 0;
        v86 = 0.0;
        if ((v185 & 4) == 0 || v84)
        {
          v88 = v84;
        }
        else
        {
          if ((v80 & 0x1040) == 0)
            goto LABEL_92;
          LODWORD(v195) = 0;
          LODWORD(v191) = 0;
          if (!sub_1B2212080(v79, *v77, &v195, &v191))
            goto LABEL_92;
          v87 = (float)((*(_WORD *)(a1 + 8) >> 4) - *v78);
          if (*(float *)&v195 <= v87)
            v87 = *(float *)&v195;
          if (v87 > 0.0)
          {
            v85 = 0;
            v187 = 1;
            v88 = 1 << v191;
            v86 = v87;
          }
          else
          {
LABEL_92:
            v85 = 0;
            v88 = 0;
            v187 = 0;
          }
        }
        sub_1B220A354((_QWORD *)a1, v213[0], v77, v85, 0xFFFFFFFF);
        v213[0] += 64;
        v92 = *v78;
        if ((_DWORD)v92 == ((*(unsigned __int8 *)(*(_QWORD *)a1 + 8) >> 2) & 0xF))
          LOBYTE(v93) = 0;
        else
          v93 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * v92) + 408)
                                    + *v77) >> 1) & 0xF;
        v94 = &v211;
      }
      else
      {
        sub_1B220AC4C(a1, v82, v83, (uint64_t)v198, 0xFFFFFFFF);
        v89 = *(_BYTE *)(a1 + 9) & 7;
        v86 = 0.0;
        if (v89 == 2)
        {
          v90 = v179;
          v91 = sub_1B220D490((_QWORD *)a1, v176, (_DWORD *)*v179, v77, (__int16 *)v198, 0xFFFFFFFF);
          goto LABEL_100;
        }
        if (v89 != 4)
        {
          if (v89 == 3)
          {
            v90 = v179;
            v91 = sub_1B220D3FC((_QWORD *)a1, (uint64_t)v178, (_DWORD *)*v179, v77, (uint64_t)v198, 0xFFFFFFFF);
            goto LABEL_100;
          }
          v187 = 0;
          v88 = 0;
          LOBYTE(v93) = 0;
          goto LABEL_102;
        }
        if ((v80 & 4) == 0)
        {
          v90 = v179;
          v91 = sub_1B220D524((_QWORD *)a1, v177, (_DWORD *)*v179, v77, (uint64_t)v198, 0xFFFFFFFF);
LABEL_100:
          v187 = 0;
          v88 = 0;
          LOBYTE(v93) = 0;
          *v90 += 4 * v91;
LABEL_102:
          v94 = v180;
          goto LABEL_103;
        }
        v125 = sub_1B220D524((_QWORD *)a1, v177, *v172, v77, (uint64_t)v198, 0xFFFFFFFF);
        v187 = 0;
        v88 = 0;
        LOBYTE(v93) = 0;
        *v172 += v125;
        v94 = v173;
      }
LABEL_103:
      v95 = sub_1B220B1AC((_QWORD *)a1, *v78, *v77, v88, v93);
      v96 = (unint64_t *)*((_QWORD *)v94 + 2);
      *((_QWORD *)v94 + 2) = v96 + 1;
      *v96 = v95;
      if ((v185 & 4) != 0)
      {
        v97 = (float *)a2[31];
        v98 = (float *)a2[32];
        v99 = v98 - v97;
        if ((int)v99 < 1)
        {
LABEL_108:
          if ((unint64_t)v98 >= *v181)
          {
            v102 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62)
              abort();
            v103 = *v181 - (_QWORD)v97;
            if (v103 >> 1 > v102)
              v102 = v103 >> 1;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
              v104 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v104 = v102;
            if (v104)
            {
              v105 = (char *)sub_1B17F7E58((uint64_t)v181, v104);
              v97 = (float *)a2[31];
              v98 = (float *)a2[32];
            }
            else
            {
              v105 = 0;
            }
            v106 = (float *)&v105[4 * v99];
            *v106 = v86;
            v101 = v106 + 1;
            while (v98 != v97)
            {
              v107 = *((_DWORD *)v98-- - 1);
              *((_DWORD *)v106-- - 1) = v107;
            }
            a2[31] = v106;
            a2[32] = v101;
            a2[33] = &v105[4 * v104];
            if (v97)
            {
              operator delete(v97);
              v97 = (float *)a2[31];
            }
            else
            {
              v97 = v106;
            }
          }
          else
          {
            *v98 = v86;
            v101 = v98 + 1;
          }
          a2[32] = v101;
          LODWORD(v100) = ((unint64_t)((char *)v101 - (char *)v97) >> 2) - 1;
        }
        else
        {
          v100 = 0;
          while (v97[v100] != v86)
          {
            if (((unint64_t)((char *)v98 - (char *)v97) >> 2) == ++v100)
              goto LABEL_108;
          }
        }
        v108 = (_DWORD *)*((_QWORD *)v94 + 3);
        *v108 = v100;
        *((_QWORD *)v94 + 3) = v108 + 1;
      }
      v109 = *(_QWORD *)(a1 + 144);
      v110 = *(_QWORD *)(a1 + 152);
      if (v109 != v110 && (int)((unint64_t)(v110 - v109) >> 2) >= 1)
      {
        v111 = v88;
        v112 = 0;
        while (1)
        {
          v191 = *(_QWORD *)v77;
          sub_1B220EF0C((uint64_t)a2, v112, &v190);
          if (v190 != 3)
            break;
          *(_QWORD *)(*((_QWORD *)v94 + 4) + 8 * v112) += 4
                                                        * (int)sub_1B220A2A4((_QWORD *)a1, *(_DWORD **)(*((_QWORD *)v94 + 4) + 8 * v112), (int *)&v191, v112);
          v113 = *((_QWORD *)v94 + 8);
          v114 = *(unint64_t **)(v113 + 8 * v112);
          *(_QWORD *)(v113 + 8 * v112) = v114 + 1;
          *v114 = v95;
LABEL_156:
          if (++v112 >= (int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2))
            goto LABEL_157;
        }
        if (sub_1B2211404(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8 * *v78), *v77, *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v112)))
        {
          if (v189)
          {
            v115 = v111;
            if (v187)
            {
              sub_1B220A354((_QWORD *)a1, *(_QWORD *)(*((_QWORD *)v94 + 4) + 8 * v112), (int *)&v191, 0, v112);
              v116 = 1;
              LOBYTE(v115) = v111;
LABEL_146:
              if ((v190 - 1) > 8)
                v118 = -1;
              else
                v118 = qword_1B22CAA80[v190 - 1];
              *(_QWORD *)(*((_QWORD *)v94 + 4) + 8 * v112) += 4 * v118;
              v119 = v116 == 0;
              if (v116)
                v120 = (unint64_t)(v115 & 0xF) << 40;
              else
                v120 = 0;
              v121 = 0x2000000000;
              if (v119)
                v121 = 0;
              v122 = v95 & 0xFFFFF01FFFFFFFFFLL | v121 | v120;
              v123 = *((_QWORD *)v94 + 8);
              v124 = *(unint64_t **)(v123 + 8 * v112);
              *(_QWORD *)(v123 + 8 * v112) = v124 + 1;
              *v124 = v122;
              goto LABEL_156;
            }
LABEL_138:
            sub_1B220A354((_QWORD *)a1, *(_QWORD *)(*((_QWORD *)v94 + 4) + 8 * v112), (int *)&v191, v115, v112);
            v116 = 1;
            goto LABEL_146;
          }
          v195 = 0;
          v196 = 0;
          v117 = (__int16 *)v198;
          v197 = 0;
        }
        else
        {
          if (sub_1B220A708(a1, *v78, *v77, v112))
          {
            v115 = sub_1B220AA74(a1, *v78, *v77, v112);
            goto LABEL_138;
          }
          v195 = 0;
          v196 = 0;
          v197 = 0;
          v117 = (__int16 *)&v195;
          sub_1B220AC4C(a1, *v78, *v77, (uint64_t)&v195, v112);
        }
        if (v190 == 9)
        {
          sub_1B220D3FC((_QWORD *)a1, v203[v112], *(_DWORD **)(*((_QWORD *)v94 + 4) + 8 * v112), (int *)&v191, (uint64_t)v117, v112);
        }
        else if (v190 == 6)
        {
          sub_1B220D490((_QWORD *)a1, v207[v112], *(_DWORD **)(*((_QWORD *)v94 + 4) + 8 * v112), (int *)&v191, v117, v112);
        }
        v116 = 0;
        LOBYTE(v115) = 0;
        goto LABEL_146;
      }
LABEL_157:
      v76 = v184 + 1;
      v75 = *(_QWORD *)(a1 + 72);
    }
    while (v184 + 1 < (int)((unint64_t)(*(_QWORD *)(a1 + 80) - v75) >> 3));
  }
  sub_1B220ED28((uint64_t)a2);
  v126 = v175;
  if (v175)
  {
    v127 = v174;
    if ((int)((v175[3] - v175[2]) >> 2) < 1)
    {
      (*(void (**)(_QWORD *))(*v175 + 8))(v175);
      v126 = 0;
      if (!v174)
        goto LABEL_176;
      goto LABEL_168;
    }
    sub_1B220D5B8(v175);
    sub_1B17F8190((uint64_t)(v175 + 5), (int)((uint64_t)(v175[3] - v175[2]) >> 2));
    v128 = (int *)v175[2];
    v129 = v175[3] - (_QWORD)v128;
    if ((int)(v129 >> 2) >= 1)
    {
      v130 = 0;
      v131 = (_DWORD *)v175[5];
      v132 = (v129 >> 2);
      do
      {
        *v131++ = v130;
        v133 = *v128++;
        v130 += v133;
        --v132;
      }
      while (v132);
    }
  }
  else
  {
    v127 = v174;
  }
  if (!v127)
    goto LABEL_176;
LABEL_168:
  if ((int)((v127[3] - v127[2]) >> 2) < 1)
  {
    (*(void (**)(_QWORD *))(*v127 + 8))(v127);
    v127 = 0;
  }
  else
  {
    sub_1B220D5B8(v127);
    sub_1B17F8190((uint64_t)(v127 + 5), (int)((uint64_t)(v127[3] - v127[2]) >> 2));
    v134 = (int *)v127[2];
    v135 = v127[3] - (_QWORD)v134;
    if ((int)(v135 >> 2) >= 1)
    {
      v136 = 0;
      v137 = (_DWORD *)v127[5];
      v138 = (v135 >> 2);
      do
      {
        *v137++ = v136;
        v139 = *v134++;
        v136 += v139;
        --v138;
      }
      while (v138);
    }
  }
LABEL_176:
  v140 = *(_BYTE *)(a1 + 9) & 7;
  switch(v140)
  {
    case 2:
      a2[16] = v126;
      a2[17] = v127;
      if (v176)
      {
        v150 = *(void **)(v176 + 32);
        if (v150)
        {
          *(_QWORD *)(v176 + 40) = v150;
          operator delete(v150);
        }
        v143 = (_QWORD *)v176;
        v144 = 1232653951;
        goto LABEL_199;
      }
      break;
    case 4:
      sub_1B2223D18(v177, *(_DWORD *)a2, a2 + 10, a2 + 13, -1);
      if (v177)
      {
        v145 = (void *)v177[10];
        if (v145)
        {
          v177[11] = v145;
          operator delete(v145);
        }
        v146 = (void *)v177[7];
        if (v146)
        {
          v177[8] = v146;
          operator delete(v146);
        }
        v147 = (void *)v177[4];
        if (v147)
        {
          v177[5] = v147;
          operator delete(v147);
        }
        v148 = (void *)v177[1];
        if (v148)
        {
          v177[2] = v148;
          operator delete(v148);
        }
        v143 = v177;
        v149 = 0x70C40F9997B92;
        goto LABEL_200;
      }
      break;
    case 3:
      a2[16] = v126;
      a2[17] = v127;
      if (v178)
      {
        v141 = (void *)v178[8];
        if (v141)
        {
          v178[9] = v141;
          operator delete(v141);
        }
        v142 = (void *)v178[5];
        if (v142)
        {
          v178[6] = v142;
          operator delete(v142);
        }
        v143 = v178;
        v144 = 537674454;
LABEL_199:
        v149 = v144 | 0x1070C4000000000;
LABEL_200:
        MEMORY[0x1B5E22E18](v143, v149);
      }
      break;
  }
  v151 = *(_QWORD *)(a1 + 144);
  v152 = *(_QWORD *)(a1 + 152);
  if (v151 != v152)
  {
    v153 = a2 + 25;
    sub_1B17F8000((uint64_t)v153, (v152 - v151) >> 2);
    if ((int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2) >= 1)
    {
      v154 = 0;
      while (1)
      {
        v155 = (_QWORD *)v199[v154];
        if ((int)((v155[3] - v155[2]) >> 2) < 1)
        {
          (*(void (**)(uint64_t))(*v155 + 8))(v199[v154]);
          v199[v154] = 0;
        }
        else
        {
          sub_1B220D5B8((_QWORD *)v199[v154]);
          sub_1B17F8190((uint64_t)(v155 + 5), (int)((uint64_t)(v155[3] - v155[2]) >> 2));
          v156 = (int *)v155[2];
          v157 = v155[3] - (_QWORD)v156;
          if ((int)(v157 >> 2) >= 1)
          {
            v158 = 0;
            v159 = (_DWORD *)v155[5];
            v160 = (v157 >> 2);
            do
            {
              *v159++ = v158;
              v161 = *v156++;
              v158 += v161;
              --v160;
            }
            while (v160);
          }
        }
        v162 = *(_BYTE *)(a1 + 9) & 7;
        if (v162 != 2)
          break;
        v168 = (_QWORD *)v207[v154];
        if (v168)
        {
          v169 = (void *)v168[4];
          if (v169)
          {
            v168[5] = v169;
            operator delete(v169);
          }
          v166 = v168;
          v167 = 1232653951;
LABEL_222:
          MEMORY[0x1B5E22E18](v166, v167 | 0x1070C4000000000);
        }
LABEL_223:
        *(_QWORD *)(*v153 + 8 * v154) = v199[v154];
        if (++v154 >= (int)((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 2))
          goto LABEL_224;
      }
      if (v162 != 3)
        goto LABEL_223;
      v163 = (_QWORD *)v203[v154];
      if (!v163)
        goto LABEL_223;
      v164 = (void *)v163[8];
      if (v164)
      {
        v163[9] = v164;
        operator delete(v164);
      }
      v165 = (void *)v163[5];
      if (v165)
      {
        v163[6] = v165;
        operator delete(v165);
      }
      v166 = v163;
      v167 = 537674454;
      goto LABEL_222;
    }
  }
LABEL_224:
  operator delete(__p);
  operator delete(v206);
  operator delete(v210);
  v170 = 36;
  do
  {
    v171 = (char *)&v211 + v170 * 8;
    operator delete((&v210)[v170]);
    *((_QWORD *)v171 - 4) = v171 - 16;
    *((_DWORD *)v171 - 5) = 1;
    operator delete((&v206)[v170]);
    *((_QWORD *)v171 - 8) = v171 - 48;
    *((_DWORD *)v171 - 13) = 1;
    v170 -= 12;
  }
  while (v170 * 8);
}

void sub_1B220D370(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F812C(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1B220D3FC(_QWORD *a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  v10 = (int *)sub_1B2220C88(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(unsigned int *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *v10++;
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1B220D490(_QWORD *a1, uint64_t a2, _DWORD *a3, int *a4, __int16 *a5, unsigned int a6)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  v10 = sub_1B221E420(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(_DWORD *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *(_DWORD *)v10;
      v10 = (_QWORD *)((char *)v10 + 4);
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1B220D524(_QWORD *a1, _QWORD *a2, _DWORD *a3, int *a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  if ((a6 & 0x80000000) != 0)
  {
    v7 = a1 + 12;
    v8 = -1;
  }
  else
  {
    v7 = (_QWORD *)(a1[15] + 24 * a6);
    v8 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  v10 = (int *)sub_1B222394C(a2, *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8 * a4[1]), *a4, a5, *(_DWORD *)(*v7 + 4 * a4[1]), v8);
  result = v9;
  if ((int)v9 >= 1)
  {
    v12 = v9;
    do
    {
      v13 = *v10++;
      *a3++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1B220D5B8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  sub_1B220D684(&v11, (uint64_t)(a1 + 2));
  v2 = (void *)a1[2];
  *((_OWORD *)a1 + 1) = v11;
  v3 = v12;
  v4 = a1[4];
  *(_QWORD *)&v11 = v2;
  v12 = v4;
  a1[4] = v3;
  if (v2)
  {
    *((_QWORD *)&v11 + 1) = v2;
    operator delete(v2);
  }
  sub_1B220D684(&v11, (uint64_t)(a1 + 8));
  v5 = (void *)a1[8];
  *((_OWORD *)a1 + 4) = v11;
  v6 = v12;
  v7 = a1[10];
  *(_QWORD *)&v11 = v5;
  v12 = v7;
  a1[10] = v6;
  if (v5)
  {
    *((_QWORD *)&v11 + 1) = v5;
    operator delete(v5);
  }
  sub_1B220D684(&v11, (uint64_t)(a1 + 11));
  v8 = (void *)a1[11];
  *(_OWORD *)(a1 + 11) = v11;
  v9 = v12;
  v10 = a1[13];
  *(_QWORD *)&v11 = v8;
  v12 = v10;
  a1[13] = v9;
  if (v8)
  {
    *((_QWORD *)&v11 + 1) = v8;
    operator delete(v8);
  }
}

_QWORD *sub_1B220D684(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_1B183C0A8(a1, v5 >> 2);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_1B220D6E8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1B183C0A8(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1B220D7EC(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1B17F7E58(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *sub_1B220D8F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  int i;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  int v68;
  char **v69;
  unint64_t v70;
  char **v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  unint64_t v95;
  char **v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  _QWORD *v112;
  int v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  int v128;
  char **v130;
  int v131;
  void **v132;
  void **v133;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  int v138;
  char **v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;

  v2 = (_QWORD *)a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v139 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  v132 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v136 = (uint64_t *)(a1 + 144);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v133 = (void **)(a1 + 24);
  v130 = (char **)(a1 + 72);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = sub_1B220EB78(a2);
  if (v3 < 1)
  {
    v9 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    for (i = 0; i != v3; ++i)
    {
      v7 = sub_1B220EB94((uint64_t)v2, i);
      sub_1B220EB60((uint64_t)v2, i, &v144);
      if ((v144 - 1) > 8)
        v8 = -1;
      else
        v8 = dword_1B22CAAC8[v144 - 1];
      v4 += v7;
      v5 += v8 * v7;
    }
    v9 = v5;
  }
  v137 = (_QWORD *)(a1 + 120);
  v10 = (_QWORD *)(a1 + 168);
  v11 = v3;
  sub_1B195E8F4((char **)a1, v3);
  sub_1B17F7530(v133, v9);
  sub_1B195E8F4(v130, v3);
  sub_1B220ECB8((uint64_t)v2, &v144);
  v131 = v3;
  if ((v144 - 1) > 8)
    v12 = -1;
  else
    v12 = dword_1B22CAAC8[v144 - 1];
  sub_1B17F7530(v132, v12 * v4);
  v13 = sub_1B220EEF0((uint64_t)v2);
  sub_1B17F749C(v137, v13);
  v14 = sub_1B220EEF0((uint64_t)v2);
  sub_1B17F749C(v136, v14);
  v15 = sub_1B220EEF0((uint64_t)v2);
  sub_1B17F749C(v10, v15);
  v140 = v4;
  v16 = v4;
  if ((int)sub_1B220EEF0((uint64_t)v2) >= 1)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      sub_1B195E8F4((char **)(*v137 + v17), v11);
      v19 = *v136;
      sub_1B220EF0C((uint64_t)v2, v18, &v144);
      if ((v144 - 1) > 8)
        v20 = -1;
      else
        v20 = dword_1B22CAAC8[v144 - 1];
      sub_1B17F7530((void **)(v19 + v17), v20 * v140);
      sub_1B220E250((char **)(*v10 + v17), v16);
      ++v18;
      v17 += 24;
    }
    while (v18 < (int)sub_1B220EEF0((uint64_t)v2));
  }
  sub_1B220E250(v139, v16);
  v21 = (_QWORD *)a1;
  if (v131 >= 1)
  {
    v22 = 0;
    v135 = (uint64_t)v2;
    do
    {
      sub_1B220EB60((uint64_t)v2, v22, &v143);
      v138 = v22;
      v23 = sub_1B220EB94((uint64_t)v2, v22);
      v24 = a1;
      v25 = v23;
      v26 = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
      v27 = -1431655765 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
      v28 = v143;
      v29 = *(_DWORD **)(a1 + 8);
      v30 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v29 >= v30)
      {
        v33 = ((uint64_t)v29 - *(_QWORD *)a1) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          goto LABEL_109;
        v35 = v30 - *(_QWORD *)a1;
        if (v35 >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = (char *)sub_1B17F7824(a1 + 16, v36);
        v39 = &v37[16 * v33];
        *(_DWORD *)v39 = v28;
        *((_DWORD *)v39 + 1) = v25;
        *((_DWORD *)v39 + 2) = v26;
        *((_DWORD *)v39 + 3) = v27;
        v41 = *(char **)a1;
        v40 = *(char **)(a1 + 8);
        v24 = a1;
        v42 = v39;
        if (v40 == *(char **)a1)
        {
          v32 = v138;
        }
        else
        {
          v32 = v138;
          do
          {
            v43 = *((_DWORD *)v40 - 4);
            v40 -= 16;
            *((_DWORD *)v42 - 4) = v43;
            v42 -= 16;
            v44 = *(_QWORD *)(v40 + 4);
            *((_DWORD *)v42 + 3) = *((_DWORD *)v40 + 3);
            *(_QWORD *)(v42 + 4) = v44;
          }
          while (v40 != v41);
          v40 = *(char **)a1;
        }
        v31 = v39 + 16;
        *(_QWORD *)a1 = v42;
        *(_QWORD *)(a1 + 8) = v39 + 16;
        *(_QWORD *)(a1 + 16) = &v37[16 * v38];
        if (v40)
        {
          operator delete(v40);
          v24 = a1;
        }
      }
      else
      {
        *v29 = v143;
        v29[1] = v23;
        v31 = v29 + 4;
        v29[2] = v26;
        v29[3] = v27;
        v32 = v138;
      }
      *(_QWORD *)(v24 + 8) = v31;
      v45 = (char *)sub_1B220EBF0((uint64_t)v2, v32);
      sub_1B220E320((uint64_t)v133, *(_QWORD *)(a1 + 32), v45, &v45[4 * v46], v46);
      sub_1B220ECB8((uint64_t)v2, &v142);
      v47 = a1;
      v48 = v142;
      v49 = *(_QWORD *)(a1 + 80);
      v50 = *(_QWORD *)(a1 + 88);
      if (v49 >= v50)
      {
        v52 = (uint64_t)(v49 - (_QWORD)*v130) >> 4;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60)
LABEL_109:
          abort();
        v54 = v50 - (_QWORD)*v130;
        if (v54 >> 3 > v53)
          v53 = v54 >> 3;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
          v55 = 0xFFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        v56 = (char *)sub_1B17F7824(a1 + 88, v55);
        v58 = &v56[16 * v52];
        *(_DWORD *)v58 = v48;
        *((_DWORD *)v58 + 1) = v140;
        *((_QWORD *)v58 + 1) = 0;
        v47 = a1;
        v60 = *(char **)(a1 + 72);
        v59 = *(char **)(a1 + 80);
        v61 = v58;
        if (v59 != v60)
        {
          do
          {
            v62 = *((_DWORD *)v59 - 4);
            v59 -= 16;
            *((_DWORD *)v61 - 4) = v62;
            v61 -= 16;
            v63 = *(_QWORD *)(v59 + 4);
            *((_DWORD *)v61 + 3) = *((_DWORD *)v59 + 3);
            *(_QWORD *)(v61 + 4) = v63;
          }
          while (v59 != v60);
          v59 = *v130;
        }
        v51 = v58 + 16;
        *(_QWORD *)(a1 + 72) = v61;
        *(_QWORD *)(a1 + 80) = v58 + 16;
        *(_QWORD *)(a1 + 88) = &v56[16 * v57];
        if (v59)
        {
          operator delete(v59);
          v47 = a1;
        }
      }
      else
      {
        *(_DWORD *)v49 = v142;
        *(_DWORD *)(v49 + 4) = v140;
        v51 = (char *)(v49 + 16);
        *(_QWORD *)(v49 + 8) = 0;
      }
      *(_QWORD *)(v47 + 80) = v51;
      v64 = v47;
      v65 = (char *)sub_1B220ECC4((uint64_t)v2, v32);
      sub_1B220E320((uint64_t)v132, *(_QWORD *)(v64 + 104), v65, &v65[4 * v66], v66);
      if ((int)sub_1B220EEF0((uint64_t)v2) >= 1)
      {
        v67 = 0;
        do
        {
          sub_1B220EF0C((uint64_t)v2, v67, &v141);
          v68 = v141;
          v69 = (char **)(*v137 + 24 * v67);
          v71 = v69 + 1;
          v70 = (unint64_t)v69[1];
          v73 = v69 + 2;
          v72 = (unint64_t)v69[2];
          if (v70 >= v72)
          {
            v76 = (uint64_t)(v70 - (_QWORD)*v69) >> 4;
            v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 60)
              goto LABEL_109;
            v78 = v72 - (_QWORD)*v69;
            if (v78 >> 3 > v77)
              v77 = v78 >> 3;
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
              v79 = 0xFFFFFFFFFFFFFFFLL;
            else
              v79 = v77;
            v80 = (char *)sub_1B17F7824((uint64_t)v73, v79);
            v82 = &v80[16 * v76];
            *(_DWORD *)v82 = v68;
            *((_DWORD *)v82 + 1) = v140;
            *((_QWORD *)v82 + 1) = 0;
            v83 = *v71;
            v84 = *v69;
            v85 = v82;
            if (*v71 != *v69)
            {
              do
              {
                v86 = *((_DWORD *)v83 - 4);
                v83 -= 16;
                *((_DWORD *)v85 - 4) = v86;
                v85 -= 16;
                v87 = *(_QWORD *)(v83 + 4);
                *((_DWORD *)v85 + 3) = *((_DWORD *)v83 + 3);
                *(_QWORD *)(v85 + 4) = v87;
              }
              while (v83 != v84);
              v83 = *v69;
            }
            *v69 = v85;
            v75 = v82 + 16;
            *v71 = v82 + 16;
            *v73 = &v80[16 * v81];
            if (v83)
              operator delete(v83);
            v74 = v140;
          }
          else
          {
            *(_DWORD *)v70 = v141;
            v74 = v140;
            *(_DWORD *)(v70 + 4) = v140;
            v75 = (char *)(v70 + 16);
            *(_QWORD *)(v70 + 8) = 0;
          }
          *v71 = v75;
          v88 = (char *)sub_1B220EF40((uint64_t)v2, v138, v67);
          sub_1B220E320(*v136 + 24 * v67, *(_QWORD *)(*v136 + 24 * v67 + 8), v88, &v88[4 * v89], v89);
          v90 = sub_1B220EFA4((uint64_t)v2, v138, v67);
          if (v74 >= 1)
          {
            v91 = v90;
            v92 = 0;
            do
            {
              v93 = *(_QWORD *)(v91 + 8 * v92);
              v94 = (char **)(*v10 + 24 * v67);
              v96 = v94 + 1;
              v95 = (unint64_t)v94[1];
              v98 = v94 + 2;
              v97 = (unint64_t)v94[2];
              if (v95 >= v97)
              {
                v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (_QWORD)*v94) >> 2);
                v101 = v100 + 1;
                if (v100 + 1 > 0x1555555555555555)
                  goto LABEL_109;
                v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)*v94) >> 2);
                if (2 * v102 > v101)
                  v101 = 2 * v102;
                if (v102 >= 0xAAAAAAAAAAAAAAALL)
                  v103 = 0x1555555555555555;
                else
                  v103 = v101;
                if (v103)
                  v104 = (char *)sub_1B191CD0C((uint64_t)v98, v103);
                else
                  v104 = 0;
                v105 = &v104[12 * v100];
                *(_QWORD *)v105 = v93;
                *((_DWORD *)v105 + 2) = 0;
                v106 = *v96;
                v107 = *v94;
                v108 = v105;
                if (*v96 != *v94)
                {
                  do
                  {
                    v109 = *(_QWORD *)(v106 - 12);
                    v106 -= 12;
                    v110 = *((_DWORD *)v106 + 2);
                    *(_QWORD *)(v108 - 12) = v109;
                    v108 -= 12;
                    *((_DWORD *)v108 + 2) = v110;
                  }
                  while (v106 != v107);
                  v106 = *v94;
                }
                *v94 = v108;
                v99 = v105 + 12;
                *v96 = v105 + 12;
                *v98 = &v104[12 * v103];
                if (v106)
                  operator delete(v106);
              }
              else
              {
                *(_QWORD *)v95 = v93;
                *(_DWORD *)(v95 + 8) = 0;
                v99 = (char *)(v95 + 12);
              }
              *v96 = v99;
              ++v92;
            }
            while (v92 != v140);
          }
          ++v67;
          v2 = (_QWORD *)v135;
        }
        while (v67 < (int)sub_1B220EEF0(v135));
      }
      v111 = sub_1B220EB94((uint64_t)v2, v138);
      v112 = (_QWORD *)(a1 + 64);
      v21 = (_QWORD *)a1;
      if (v111 >= 1)
      {
        v113 = 0;
        v114 = *(char **)(a1 + 56);
        do
        {
          v115 = 0xAAAAAAAAAAAAAAABLL * ((v114 - *v139) >> 2);
          v116 = v2[28];
          v117 = 0;
          if ((int)v115 < (int)((unint64_t)(v2[29] - v116) >> 2))
          {
            v118 = *(unsigned int *)(v116 + 4 * (int)v115);
            if ((v118 & 0x80000000) == 0)
              v117 = *(_DWORD *)(v2[31] + 4 * v118);
          }
          v119 = *(_QWORD *)(v2[7] + 8 * (int)v115);
          if ((unint64_t)v114 >= *v112)
          {
            if (v115 + 1 > 0x1555555555555555)
              goto LABEL_109;
            v120 = 0x5555555555555556 * ((uint64_t)(*v112 - (_QWORD)*v139) >> 2);
            if (v120 <= v115 + 1)
              v120 = v115 + 1;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v112 - (_QWORD)*v139) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v121 = 0x1555555555555555;
            else
              v121 = v120;
            if (v121)
            {
              v122 = (char *)sub_1B191CD0C((uint64_t)v112, v121);
              v21 = (_QWORD *)a1;
            }
            else
            {
              v122 = 0;
            }
            v123 = &v122[12 * v115];
            *(_QWORD *)v123 = v119;
            *((_DWORD *)v123 + 2) = v117;
            v125 = (char *)v21[6];
            v124 = (char *)v21[7];
            v126 = v123;
            if (v124 != v125)
            {
              do
              {
                v127 = *(_QWORD *)(v124 - 12);
                v124 -= 12;
                v128 = *((_DWORD *)v124 + 2);
                *(_QWORD *)(v126 - 12) = v127;
                v126 -= 12;
                *((_DWORD *)v126 + 2) = v128;
              }
              while (v124 != v125);
              v124 = *v139;
            }
            v114 = v123 + 12;
            v21[6] = v126;
            v21[7] = v123 + 12;
            v21[8] = &v122[12 * v121];
            if (v124)
            {
              operator delete(v124);
              v21 = (_QWORD *)a1;
            }
            v112 = (_QWORD *)(a1 + 64);
          }
          else
          {
            *(_QWORD *)v114 = v119;
            *((_DWORD *)v114 + 2) = v117;
            v114 += 12;
          }
          v21[7] = v114;
          ++v113;
        }
        while (v113 != v111);
      }
      v22 = v138 + 1;
    }
    while (v138 + 1 != v131);
  }
  return v21;
}

void sub_1B220E250(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      abort();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)sub_1B191CD0C(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *sub_1B220E320(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      abort();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1B17F7E58(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = sub_1B220E4F0((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

char *sub_1B220E4F0(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

double sub_1B220E5B4(uint64_t a1, int a2)
{
  double result;

  *(_DWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 3;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  return result;
}

uint64_t sub_1B220E60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void **v18;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  if ((int)((unint64_t)(v4 - v5) >> 3) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *(_QWORD *)(a1 + 200);
        v4 = *(_QWORD *)(a1 + 208);
      }
      ++v6;
    }
    while (v6 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
  }
  v18 = (void **)(a1 + 176);
  sub_1B220EFEC(&v18);
  v11 = *(void **)(a1 + 152);
  if (v11)
  {
    *(_QWORD *)(a1 + 160) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 56);
  if (v14)
  {
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 32);
  if (v15)
  {
    *(_QWORD *)(a1 + 40) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 8);
  if (v16)
  {
    *(_QWORD *)(a1 + 16) = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_1B220E744(uint64_t a1, int a2)
{
  sub_1B220E750((char **)(a1 + 8), a2);
}

void sub_1B220E750(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      abort();
    v5 = a1[1] - *a1;
    v6 = (char *)sub_1B220F0B4(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[20 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 5);
        v10 -= 20;
        *((_DWORD *)v12 - 5) = v13;
        v12 -= 20;
        *(_OWORD *)(v12 + 4) = *(_OWORD *)(v10 + 4);
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B220E804(uint64_t a1, _DWORD *a2, int a3)
{
  unsigned int v3;
  int v4;

  *(_DWORD *)(a1 + 144) = *a2;
  v3 = *a2 - 1;
  if (v3 > 8)
    v4 = -1;
  else
    v4 = dword_1B22CAAF8[v3];
  sub_1B17F8190(a1 + 152, v4 * a3);
}

void sub_1B220E840(uint64_t a1, int a2)
{
  sub_1B220E84C((uint64_t *)(a1 + 176), a2);
}

void sub_1B220E84C(uint64_t *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B220F0F8(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v3 -= 7;
      sub_1B220F070((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void sub_1B220E8E4(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 176);
  *(_DWORD *)(v5 + 56 * a4 + 4) = *a2;
  v6 = *a2 - 1;
  if (v6 > 8)
    v7 = -1;
  else
    v7 = dword_1B22CAAF8[v6];
  v8 = v5 + 56 * a4;
  sub_1B17F8190(v8 + 8, v7 * a3);
  sub_1B17F8000(v8 + 32, a3);
}

uint64_t sub_1B220E95C(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 176) + 56 * a3) = a2;
  return result;
}

void sub_1B220E970(_QWORD *a1, int *a2, int a3, int *a4, int *a5, int *a6)
{
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;

  if (a3 >= 1)
  {
    if (a6)
      v12 = *a6;
    else
      v12 = 0;
    v13 = *a2;
    v14 = *a4;
    v15 = *a5;
    v16 = (uint64_t)(a1 + 3);
    v17 = a1[3];
    v18 = (_DWORD *)a1[2];
    if ((unint64_t)v18 >= v17)
    {
      v35 = v12;
      v20 = a1[1];
      v21 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v18 - v20) >> 2);
      v22 = v21 + 1;
      if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL)
        abort();
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v20) >> 2);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x666666666666666)
        v24 = 0xCCCCCCCCCCCCCCCLL;
      else
        v24 = v22;
      v25 = (char *)sub_1B220F0B4(v16, v24);
      v26 = &v25[20 * v21];
      v28 = &v25[20 * v27];
      *(_DWORD *)v26 = v13;
      *((_DWORD *)v26 + 1) = a3;
      *((_DWORD *)v26 + 2) = v14;
      *((_DWORD *)v26 + 3) = v15;
      *((_DWORD *)v26 + 4) = v35;
      v19 = v26 + 20;
      v30 = a1[1];
      v29 = a1[2];
      if (v29 != v30)
      {
        do
        {
          v31 = *(_DWORD *)(v29 - 20);
          v29 -= 20;
          *((_DWORD *)v26 - 5) = v31;
          v26 -= 20;
          *(_OWORD *)(v26 + 4) = *(_OWORD *)(v29 + 4);
        }
        while (v29 != v30);
        v29 = a1[1];
      }
      a1[1] = v26;
      a1[2] = v19;
      a1[3] = v28;
      if (v29)
        operator delete((void *)v29);
    }
    else
    {
      *v18 = v13;
      v18[1] = a3;
      v18[2] = v14;
      v18[3] = v15;
      v19 = v18 + 5;
      v18[4] = v12;
    }
    a1[2] = v19;
    v32 = *a2 - 1;
    if (v32 > 8)
      v33 = -1;
    else
      v33 = dword_1B22CAAF8[v32];
    v34 = v33 * a3;
    *a4 += v34;
    *a5 += a3;
    if (a6)
    {
      if (*a2 != 7)
        v34 = 0;
      *a6 += v34;
    }
  }
}

uint64_t sub_1B220EB2C(uint64_t a1, int a2, int a3)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12) + a3);
}

uint64_t sub_1B220EB44(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 224) + 4 * *(int *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12);
}

uint64_t sub_1B220EB60@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = *(_DWORD *)(*(_QWORD *)(result + 8) + 20 * a2);
  return result;
}

uint64_t sub_1B220EB78(uint64_t a1)
{
  return -858993459 * ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
}

uint64_t sub_1B220EB94(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 4);
}

uint64_t sub_1B220EBA8(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
}

uint64_t sub_1B220EBB8(uint64_t a1, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20 * a2) - 1;
  if (v2 > 8)
    v3 = -1;
  else
    v3 = dword_1B22CAAF8[v2];
  return (v3 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 4));
}

uint64_t sub_1B220EBF0(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 32) + 4 * *(int *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 8);
}

uint64_t sub_1B220EC44(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 20 * a2) - 1;
  if (v4 > 8)
    v5 = -1;
  else
    v5 = dword_1B22CAAF8[v4];
  return *(_QWORD *)(a1 + 32) + 4 * (*(_DWORD *)(v3 + 20 * a2 + 8) + v5 * a3);
}

uint64_t sub_1B220EC98(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 56) + 8 * *(int *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12);
}

uint64_t sub_1B220ECB8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 144);
  return result;
}

uint64_t sub_1B220ECC4(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 152);
  if (v2 == *(_QWORD *)(a1 + 160))
    return 0;
  v3 = *(_DWORD *)(a1 + 144) - 1;
  if (v3 > 8)
    v4 = -1;
  else
    v4 = dword_1B22CAAF8[v3];
  return v2 + 4 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12) * v4;
}

uint64_t sub_1B220ED28(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;

  v1 = result;
  v2 = *(_DWORD *)(result + 144) - 1;
  if (v2 > 8)
    v3 = -1;
  else
    v3 = dword_1B22CAAF8[v2];
  v4 = *(_QWORD *)(result + 8);
  if ((int)(-858993459 * ((*(_QWORD *)(result + 16) - v4) >> 2)) >= 1)
  {
    v5 = 0;
    v6 = -858993459 * ((*(_QWORD *)(result + 16) - v4) >> 2);
    do
    {
      v7 = v4 + 20 * v5;
      v9 = *(_DWORD *)(v7 + 4);
      v8 = (int *)(v7 + 4);
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = *(_DWORD *)(v4 + 20 * v5);
        do
        {
          result = sub_1B220EC44(v1, v5, v10);
          v12 = (v10 + *(_DWORD *)(v4 + 20 * v5 + 12)) * (uint64_t)v3;
          switch(v11)
          {
            case 3:
              v13 = *(_QWORD *)(v1 + 152);
              v14 = (_DWORD *)(v13 + 4 * (int)v12);
              *v14 = *(_DWORD *)result;
              v14[1] = *(_DWORD *)(result + 4);
              v15 = 3;
              v16 = 2;
              v17 = 2;
              v18 = 3;
              goto LABEL_13;
            case 4:
              v13 = *(_QWORD *)(v1 + 152);
              *(_DWORD *)(v13 + 4 * (int)v12) = *(_DWORD *)result;
              v15 = 2;
              v16 = 1;
              v17 = 1;
              v18 = 2;
              goto LABEL_13;
            case 6:
              v13 = *(_QWORD *)(v1 + 152);
              v19 = (_DWORD *)(v13 + 4 * (int)v12);
              *v19 = *(_DWORD *)(result + 20);
              v19[1] = *(_DWORD *)(result + 24);
              v18 = 3;
              v17 = 2;
              v16 = 10;
              v15 = 9;
              goto LABEL_13;
            case 9:
              v13 = *(_QWORD *)(v1 + 152);
              v20 = (_DWORD *)(v13 + 4 * v12);
              *v20 = *(_DWORD *)result;
              v20[1] = *(_DWORD *)(result + 20);
              v18 = 3;
              v17 = 2;
              v16 = 10;
              v15 = 15;
LABEL_13:
              *(_DWORD *)(v13 + 4 * ((int)v12 + v17)) = *(_DWORD *)(result + 4 * v16);
              *(_DWORD *)(v13 + 4 * ((int)v12 + v18)) = *(_DWORD *)(result + 4 * v15);
              break;
            default:
              break;
          }
          ++v10;
        }
        while (v10 < *v8);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t sub_1B220EEF0(uint64_t a1)
{
  return -1227133513 * ((*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3);
}

uint64_t sub_1B220EF0C@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = *(_DWORD *)(*(_QWORD *)(result + 176) + 56 * a2 + 4);
  return result;
}

uint64_t sub_1B220EF24(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 56 * a2 + 8);
}

uint64_t sub_1B220EF40(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_DWORD *)(v3 + 56 * a3 + 4) - 1;
  if (v4 > 8)
    v5 = -1;
  else
    v5 = dword_1B22CAAF8[v4];
  return *(_QWORD *)(v3 + 56 * a3 + 8) + 4 * *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12) * v5;
}

uint64_t sub_1B220EFA4(uint64_t a1, int a2, int a3)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 56 * a3 + 32) + 8 * *(int *)(*(_QWORD *)(a1 + 8) + 20 * a2 + 12);
}

uint64_t sub_1B220EFD0(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 56 * a2 + 32);
}

void sub_1B220EFEC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        sub_1B220F070((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B220F070(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

void *sub_1B220F0B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_1B179C4A8();
  return operator new(20 * a2);
}

void sub_1B220F0F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      abort();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1B19603B4(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[56 * v8];
    v18 = &v12[56 * v11];
    v14 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1B220F284(a1, &v15);
    sub_1B220F374(&v15);
  }
}

void sub_1B220F284(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1B220F2F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_1B220F2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 56) = *(_QWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 56;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void **sub_1B220F374(void **a1)
{
  sub_1B220F3A4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1B220F3A4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_1B220F070(v4, (_QWORD *)(i - 56));
  }
}

uint64_t sub_1B220F3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  int *v9;
  int v10;
  int v11;
  const char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;

  v8 = *(uint64_t **)(a1 + 40);
  v9 = (int *)*v8;
  v10 = *(_DWORD *)(*v8 + 8);
  if (!v10)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.";
LABEL_12:
    sub_1B221BA4C(4, (uint64_t)v12, a3, a4, a5, a6, a7, a8, v25);
    return 0;
  }
  v11 = *v9;
  if (!*v9)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.";
    goto LABEL_12;
  }
  if (v9[5] >= 0x10000)
  {
    sub_1B221BA4C(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.", a3, a4, a5, a6, a7, a8, v9[5]);
    return 0;
  }
  v13 = (int *)(*((_QWORD *)v9 + 3) + 4 * (2 * v11 - 2));
  v15 = *v13;
  v14 = v13[1];
  v16 = v14 + v15;
  if (!((_DWORD)v14 + (_DWORD)v15))
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.";
    goto LABEL_12;
  }
  if (*(_DWORD *)a1 == 2 && (_DWORD)v16 != 3 * v11)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.";
    goto LABEL_12;
  }
  sub_1B17F8190((uint64_t)(v9 + 12), v16);
  v18 = v9[1];
  if (v18 >= 1)
  {
    sub_1B17F8190((uint64_t)(v9 + 18), (int)((uint64_t)(*((_QWORD *)v9 + 7) - *((_QWORD *)v9 + 6)) >> 2));
    sub_1B17F8190((uint64_t)(v9 + 30), 2 * v9[1]);
    v19 = (int *)(*((_QWORD *)v9 + 18) + 4 * (2 * v18 - 2));
    v20 = v19[1] + (uint64_t)*v19;
    sub_1B17F8190((uint64_t)(v9 + 42), v20);
    sub_1B18261FC((uint64_t)(v9 + 48), v20);
    v21 = 2 * v10 - 2;
    v22 = (8 * ((unint64_t)v21 >> 1)) | 4;
    v23 = *(int *)(*((_QWORD *)v9 + 33) + v22) + (uint64_t)*(int *)(*((_QWORD *)v9 + 33) + 4 * v21);
    sub_1B17F8190((uint64_t)(v9 + 72), v23);
    sub_1B18261FC((uint64_t)(v9 + 78), v23);
    v24 = *(int *)(*((_QWORD *)v9 + 42) + v22) + (uint64_t)*(int *)(*((_QWORD *)v9 + 42) + 4 * v21);
    sub_1B17F8190((uint64_t)(v9 + 90), v24);
    sub_1B18261FC((uint64_t)(v9 + 96), v24);
  }
  return 1;
}

uint64_t sub_1B220F58C(uint64_t a1, int a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int **v12;
  unsigned int *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;

  v12 = *(int ***)(a1 + 40);
  v13 = (unsigned int *)*v12;
  v14 = (*v12)[1];
  if (v14)
  {
    if (!v13[5])
    {
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.";
LABEL_12:
      sub_1B221BA4C(4, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8, v23);
      return 0;
    }
LABEL_5:
    if (!a2 || sub_1B22109C8(v13, a3, a4))
    {
      sub_1B2222B30(a1);
      return 1;
    }
    if (v14)
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.";
    else
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.";
    goto LABEL_12;
  }
  if (sub_1B22122B0(*v12))
    goto LABEL_5;
  sub_1B221BA4C(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.", v16, v17, v18, v19, v20, v21, v13[5]);
  return 0;
}

uint64_t sub_1B220F660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  int v10;
  float v12;
  char v13;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  __int16 v35;
  float v36;
  __int16 v38;
  char v39;
  __int16 v40;
  __int16 v41;
  int v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  float v47;
  int v48;
  int v49;
  __int16 v50;
  unsigned int v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  int v57;
  int *v58;
  int v59;
  int v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  v2 = **(_QWORD **)(a1 + 40);
  v64 = *(_DWORD *)(a1 + 4);
  v57 = v64 & 3;
  v61 = (v64 & 3) == 0 && (int)sub_1B22091E0(*(_DWORD *)a1) > 0;
  if (*(int *)(v2 + 4) >= 1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 240);
      v6 = *(_QWORD *)(v2 + 216);
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 144) + v3) < 2;
      v8 = *(_BYTE *)(v5 + v4);
      v9 = v8 & 0xFD | (2 * v7);
      *(_BYTE *)(v5 + v4) = v9;
      v10 = v8 & 1;
      if (!v7 && v10 == 0)
      {
        v12 = *(float *)(v6 + 4 * v4);
      }
      else
      {
        *(_DWORD *)(v6 + 4 * v4) = 1092616192;
        v9 = *(_BYTE *)(v5 + v4);
        v12 = 10.0;
      }
      v13 = v9 & 0xFB | (4 * (v12 >= 10.0));
      *(_BYTE *)(v5 + v4) = v13;
      if (v12 < 10.0 && *(float *)(v6 + 4 * v4) > 0.0)
        v15 = 8;
      else
        v15 = 0;
      *(_BYTE *)(v5 + v4++) = v15 | v13 & 0xF7;
      v3 += 8;
    }
    while (v4 < *(int *)(v2 + 4));
  }
  v16 = sub_1B22091AC(*(_DWORD *)a1);
  if (v16 >= 0)
    v17 = v16;
  else
    v17 = v16 + 1;
  if (*(int *)(v2 + 8) >= 1)
  {
    v18 = 0;
    v59 = v17 >> 1;
    v60 = v16;
    while (1)
    {
      v19 = *(_QWORD *)(v2 + 336);
      v20 = (8 * v18) | 4;
      v21 = (int *)(*(_QWORD *)(v2 + 360) + 4 * *(int *)(v19 + v20));
      v22 = *(unsigned int *)(v19 + 8 * v18);
      v58 = v21;
      if ((int)v22 < 1)
      {
        v26 = 0;
        v25 = 0;
        v24 = 0;
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = v22;
        do
        {
          v28 = *v21++;
          v29 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 240) + v28);
          v26 += (v29 >> 1) & 1;
          v25 += (v29 >> 2) & 1;
          v24 += (v29 >> 3) & 1;
          v23 += v29 & 1;
          --v27;
        }
        while (v27);
      }
      v30 = *(_QWORD *)(v2 + 432);
      v31 = *(_QWORD *)(v2 + 408);
      v32 = *(_QWORD *)(v2 + 264);
      v33 = *(unsigned int *)(v32 + 8 * v18);
      v62 = *(int *)(v32 + v20);
      v63 = *(_QWORD *)(v2 + 288);
      if ((_DWORD)v33 != 1)
        break;
      v34 = (_DWORD)v22 == 2;
      if (v57 != 2 || (_DWORD)v22 != 2)
        goto LABEL_34;
      v34 = 1;
LABEL_38:
      *(_DWORD *)(v31 + 4 * v18) = 1092616192;
LABEL_39:
      v35 = *(_WORD *)(v30 + 2 * v18) & 0xFFEF | (16 * (*(float *)(v31 + 4 * v18) >= 10.0));
      *(_WORD *)(v30 + 2 * v18) = v35;
      v36 = *(float *)(v31 + 4 * v18);
      if (v36 < 10.0 && v36 > 0.0)
        v38 = 32;
      else
        v38 = 0;
      *(_WORD *)(v30 + 2 * v18) = v35 & 0xFF9F | ((v24 != 0) << 6) | v38;
      v39 = sub_1B2210460(*(float *)(v31 + 4 * v18), (uint64_t)&v64, v24 + v25);
      v40 = *(_WORD *)(v30 + 2 * v18);
      v41 = v40 & 0xF871;
      v42 = *(_DWORD *)&v34 & ((v40 & 0x10) >> 4);
      if (v42)
        v43 = 8;
      else
        v43 = 0;
      v44 = (v41 | (4 * (v26 != 0))) & 0xF87F | ((v39 & 0xF) << 7) | v43;
      v45 = v44 | (2 * ((_DWORD)v33 != v60));
      if (v26)
        v45 = v44 | (2 * ((_DWORD)v33 != v59));
      if ((v42 & 1) != 0)
        v46 = v44;
      else
        v46 = v45;
      *(_WORD *)(v30 + 2 * v18) = v46 & 0x87FF | ((v25 != 0) << 12) | (((v25 | v46 & 0x10) != 0) << 14);
      if (!v25)
        goto LABEL_68;
      v47 = *(float *)(v31 + 4 * v18);
      if ((v46 & 0x10) == 0)
        v47 = 0.0;
      v48 = sub_1B2210460(v47, (uint64_t)&v64, v25);
      if (v48 == 8)
      {
        if (v25 != (_DWORD)v22)
          goto LABEL_68;
        v50 = *(_WORD *)(v30 + 2 * v18);
        if ((int)v22 <= 2 && (v50 & 0x10) == 0)
          goto LABEL_68;
LABEL_66:
        LOWORD(v51) = v50 & 0xBFFF;
        goto LABEL_67;
      }
      if (v48 != 4)
        goto LABEL_68;
      v49 = *(unsigned __int16 *)(v30 + 2 * v18);
      v50 = v49 | 0x2000;
      *(_WORD *)(v30 + 2 * v18) = v49 | 0x2000;
      if ((v49 & 3) != 0)
        goto LABEL_68;
      if ((v49 & 4) != 0)
        goto LABEL_66;
      if (v60 == 6)
      {
        v54 = *(_QWORD *)(v2 + 240);
        if (((*(unsigned __int8 *)(v54 + v58[3]) ^ *(unsigned __int8 *)(v54 + *v58)) & 4) != 0
          || ((*(unsigned __int8 *)(v54 + v58[4]) ^ *(unsigned __int8 *)(v54 + v58[1])) & 4) != 0)
        {
          v55 = 0x4000;
        }
        else
        {
          v55 = 0;
        }
        LOWORD(v51) = v55 | v50 & 0xBFFF;
      }
      else
      {
        if (v60 != 4)
          goto LABEL_68;
        v51 = v49 & 0xFFFF9FFF | 0x2000 | ((((*(unsigned __int8 *)(*(_QWORD *)(v2 + 240) + v58[2]) ^ *(unsigned __int8 *)(*(_QWORD *)(v2 + 240) + *v58)) >> 2) & 1) << 14);
      }
LABEL_67:
      *(_WORD *)(v30 + 2 * v18) = v51;
LABEL_68:
      if (v61 && (*(_WORD *)(v30 + 2 * v18) & 4) != 0 && (int)v33 >= 1)
      {
        v52 = (int *)(v63 + 4 * v62);
        do
        {
          v53 = *v52++;
          *(_BYTE *)(*(_QWORD *)(v2 + 96) + v53) |= 1u;
          *(_BYTE *)(a1 + 8) |= 2u;
          --v33;
        }
        while (v33);
      }
      if (++v18 >= *(int *)(v2 + 8))
        return 1;
    }
    v34 = 0;
LABEL_34:
    if ((*(_WORD *)(v30 + 2 * v18) & 1) == 0 || v23 == 2 && !v26 && (int)v33 > (int)v22)
      goto LABEL_39;
    goto LABEL_38;
  }
  return 1;
}

uint64_t sub_1B220FAF0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = **(_QWORD **)(a1 + 40);
  v3 = sub_1B22091AC(*(_DWORD *)a1);
  if (v3 >= 0)
    v4 = v3;
  else
    v4 = v3 + 1;
  if ((int)((*(_QWORD *)(**(_QWORD **)(a1 + 40) + 464) - *(_QWORD *)(**(_QWORD **)(a1 + 40) + 456)) >> 3) < 1)
    return 1;
  v5 = 0;
  v6 = v4 >> 1;
  while (sub_1B22138D4(v2, v5))
  {
    sub_1B22138F4(v2, v5++, v6);
    if (v5 >= (int)((*(_QWORD *)(**(_QWORD **)(a1 + 40) + 464) - *(_QWORD *)(**(_QWORD **)(a1 + 40) + 456)) >> 3))
      return 1;
  }
  sub_1B221BA4C(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.", v7, v8, v9, v10, v11, v12, v5);
  return 0;
}

void sub_1B220FBB8(_QWORD *a1, uint64_t a2)
{
  int v4;
  unsigned int **v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;

  v4 = sub_1B2209178(*(_DWORD *)a2);
  v5 = *(unsigned int ***)(a2 + 40);
  v6 = *v5;
  v7 = (int)**v5;
  v8 = **v5;
  sub_1B17F8190((uint64_t)a1, v7 + 1);
  v9 = (_DWORD *)*a1;
  if ((int)v7 < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = (int *)*((_QWORD *)v6 + 3);
    v12 = v8;
    v13 = (_DWORD *)*a1;
    do
    {
      *v13++ = v10;
      v15 = *v11;
      v11 += 2;
      v14 = v15;
      if (v15 == v4)
        v14 = 1;
      v10 += v14;
      --v12;
    }
    while (v12);
  }
  v9[(int)v8] = v10;
}

_QWORD *sub_1B220FC54(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1B220FBB8(a1, a2);
  return a1;
}

uint64_t sub_1B220FC80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1B220FCB0(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4);
}

uint64_t sub_1B220FCBC(_QWORD *a1, int a2)
{
  return *(unsigned int *)(*a1 + 4 * a2);
}

uint64_t sub_1B220FCC8(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 120);
  sub_1B2210108(&v5);
  v5 = (void **)(a1 + 96);
  sub_1B2210108(&v5);
  v5 = (void **)(a1 + 72);
  sub_1B17F7664(&v5);

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }

  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B220FD5C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  if ((sub_1B220FDEC((_QWORD *)v4, a1, a2) & 1) == 0)
  {
    v5 = sub_1B220FCC8(v4);
    MEMORY[0x1B5E22E18](v5, 0xA0C4074858A82);
    return 0;
  }
  return v4;
}

uint64_t sub_1B220FDEC(_QWORD *a1, uint64_t a2, void **a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  __int128 *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  sub_1B220E31C(&v45, a2);
  v5 = v46 - v45;
  v7 = v47;
  v6 = v48;
  v9 = v49;
  v8 = v50;
  sub_1B2210174(a1, v45, v46, v5);
  if (v6 == v7)
    v11 = 0;
  else
    v11 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v10, v47, v6 - v7, 0);
  v12 = (void *)a1[3];
  a1[3] = v11;

  v15 = (void *)a1[3];
  if (!v15)
    goto LABEL_29;
  objc_msgSend_setLabel_(v15, v13, (uint64_t)CFSTR("OSD PatchIndexBuffer"), v14);
  v17 = v8 == v9 ? 0 : objc_msgSend_newBufferWithBytes_length_options_(*a3, v16, v49, v8 - v9, 0);
  v18 = (void *)a1[4];
  a1[4] = v17;

  v21 = (void *)a1[4];
  if (!v21
    || ((objc_msgSend_setLabel_(v21, v19, (uint64_t)CFSTR("OSD PatchParamBuffer"), v20), v51 != v52)
      ? (v22 = v51)
      : (v22 = 0),
        (sub_1B2210174(a1 + 5, v22, &v22[v5], v5), v54 == v53)
      ? (v24 = 0)
      : (v24 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v23, v53, v54 - v53, 0)),
        (v25 = (void *)a1[8], a1[8] = v24, v25, !a1[8]) && v54 != v53))
  {
LABEL_29:
    v43 = 0;
    goto LABEL_30;
  }
  v26 = -1431655765 * ((v56 - v55) >> 3);
  v27 = a1 + 9;
  sub_1B17F749C(a1 + 9, v26);
  v28 = a1 + 12;
  sub_1B2210094((uint64_t)(a1 + 12), v26);
  v29 = a1 + 15;
  sub_1B2210094((uint64_t)v29, v26);
  if (v26 >= 1)
  {
    v30 = 0;
    v31 = 8 * v26;
    v32 = 8;
    do
    {
      sub_1B2210174((_QWORD *)(*v27 + v32 - 8), *(__int128 **)(v55 + v32 - 8), (__int128 *)(*(_QWORD *)(v55 + v32 - 8) + 16 * v5), v5);
      v34 = *(_QWORD *)(v57 + v32 - 8);
      v35 = *(_QWORD *)(v57 + v32);
      v36 = v35 == v34 ? 0 : objc_msgSend_newBufferWithBytes_length_options_(*a3, v33, v34, v35 - v34, 0);
      v37 = *(void **)(*v28 + v30);
      *(_QWORD *)(*v28 + v30) = v36;

      if (!*(_QWORD *)(*v28 + v30))
        goto LABEL_29;
      v39 = *(_QWORD *)(v58 + v32 - 8);
      v40 = *(_QWORD *)(v58 + v32);
      v41 = v40 == v39 ? 0 : objc_msgSend_newBufferWithBytes_length_options_(*a3, v38, v39, v40 - v39, 0);
      v42 = *(void **)(*v29 + v30);
      *(_QWORD *)(*v29 + v30) = v41;

      if (!*(_QWORD *)(*v29 + v30))
        goto LABEL_29;
      v32 += 24;
      v30 += 8;
    }
    while (v31 != v30);
  }
  v43 = 1;
LABEL_30:
  sub_1B1936A0C((uint64_t)&v45);
  return v43;
}

void sub_1B2210078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1936A0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B2210094(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != v5)
      {
        v6 = *(void **)(v3 - 8);
        v3 -= 8;

      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_1B22102F0((char **)a1, a2 - v4);
  }
}

void sub_1B2210108(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_1B2210174(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  int64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_1B193A518(a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_DWORD *)v14 = *(_DWORD *)v6;
        v15 = *(_QWORD *)((char *)v6 + 4);
        *((_DWORD *)v14 + 3) = *((_DWORD *)v6 + 3);
        *(_QWORD *)((char *)v14++ + 4) = v15;
        ++v6;
      }
      while (v6 != a3);
    }
LABEL_26:
    v25 = (char *)v14 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v16 = v17;
  v18 = v17 - result;
  if (v18 >= a4)
  {
    v14 = result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        v27 = *v6++;
        *v26++ = v27;
        ++v14;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[v18];
  if (v16 != result)
  {
    v20 = 16 * v18;
    do
    {
      v21 = *v6++;
      *result++ = v21;
      v20 -= 16;
    }
    while (v20);
    result = *v12;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      *(_DWORD *)v23 = *(_DWORD *)v19;
      v24 = *(_QWORD *)((char *)v19 + 4);
      *((_DWORD *)v23 + 3) = *((_DWORD *)v19 + 3);
      *(_QWORD *)((char *)v23 + 4) = v24;
      v22 += 16;
      ++v19;
      ++v23;
    }
    while (v19 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_27:
  *v12 = (_OWORD *)((char *)result + v25);
  return result;
}

void sub_1B22102F0(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)sub_1B17F812C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    v24 = v15;
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    sub_1B2210410((uint64_t)&v22);
  }
}

uint64_t sub_1B2210410(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B2210460(float a1, uint64_t a2, int a3)
{
  if (a3 <= 2 && a1 <= 0.0)
    return (1 << a3);
  else
    return 8;
}

uint64_t sub_1B2210480(float a1, uint64_t a2, int a3, float *a4)
{
  unsigned int v5;
  uint64_t v6;
  float v7;

  if (a1 > 0.0)
    return 8;
  if (a3 < 1)
    return 1;
  v5 = 0;
  v6 = a3;
  do
  {
    v7 = *a4++;
    if (v7 > 0.0)
      ++v5;
    --v6;
  }
  while (v6);
  if (v5 <= 2)
    return (1 << v5);
  else
    return 8;
}

float sub_1B22104D4(_WORD *a1, int a2, float *a3, float *a4, float a5, float a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float result;

  v6 = a5 > 0.0 && a6 <= 0.0;
  if (a5 <= 0.0 || a6 > 0.0)
    a5 = 0.0;
  if (a4 && (*a1 & 0x60) != 0)
  {
    if (a2 >= 1)
    {
      v7 = a2;
      do
      {
        if (*a3 > 0.0 && *a4 <= 0.0)
        {
          a5 = a5 + *a3;
          ++v6;
        }
        ++a4;
        ++a3;
        --v7;
      }
      while (v7);
    }
  }
  else if (a2 >= 1)
  {
    v8 = a2;
    do
    {
      v9 = *a3++;
      v10 = v9;
      v6 += v9 > 0.0 && v9 <= 1.0;
      if (v9 <= 0.0 || v9 > 1.0)
        v10 = -0.0;
      a5 = a5 + v10;
      --v8;
    }
    while (v8);
  }
  if (!v6)
    return 0.0;
  result = a5 / (float)v6;
  if (result > 1.0)
    return 1.0;
  return result;
}

float sub_1B22105A4(_WORD *a1, int a2, float *a3, float a4)
{
  float v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2 >= 2 && (*a1 & 0x60) != 0)
  {
    v4 = 0.0;
    if (a4 > 0.0)
    {
      v4 = 10.0;
      if (a4 < 10.0)
      {
        v5 = 0;
        v6 = a2;
        v7 = 0.0;
        do
        {
          v8 = *a3++;
          v9 = v8;
          v10 = v8 > 0.0 && v8 < 10.0;
          if (v8 <= 0.0 || v8 >= 10.0)
            v9 = -0.0;
          v7 = v7 + v9;
          v5 += v10;
          --v6;
        }
        while (v6);
        v11 = v5 != 0;
        v12 = v5 - 1;
        if (v12 != 0 && v11)
          a4 = (float)((float)((float)(v7 - a4) / (float)v12) * 0.25) + (float)(a4 * 0.75);
        return fmaxf(a4 + -1.0, 0.0);
      }
    }
  }
  else
  {
    v4 = 0.0;
    if (a4 > 0.0)
    {
      v4 = 10.0;
      if (a4 < 10.0)
      {
        v4 = 0.0;
        if (a4 > 1.0)
          return a4 + -1.0;
      }
    }
  }
  return v4;
}

_WORD *sub_1B2210680(_WORD *result, int a2, float *a3, float *a4)
{
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;

  if (a2 > 1 && (*result & 0x60) != 0)
  {
    if ((*result & 0x60) == 0x20)
    {
      v4 = 0;
      v5 = a2;
      v6 = 0.0;
      v7 = a2;
      v8 = a3;
      do
      {
        v9 = *v8++;
        v10 = v9;
        v4 += v9 > 0.0 && v9 < 10.0;
        if (v9 <= 0.0 || v9 >= 10.0)
          v10 = -0.0;
        v6 = v6 + v10;
        --v7;
      }
      while (v7);
      if (v4)
      {
        while (1)
        {
          v11 = *a3;
          v12 = 0.0;
          if (*a3 <= 0.0)
            goto LABEL_16;
          v12 = 10.0;
          if (v11 >= 10.0)
            goto LABEL_16;
          if (v4 == 1)
            break;
          v13 = (float)((float)((float)((float)(v6 - v11) / (float)(v4 - 1)) * 0.25) + (float)(v11 * 0.75)) + -1.0;
          v12 = 0.0;
          if (v13 <= 0.0)
            goto LABEL_16;
LABEL_17:
          *a4++ = v13;
          ++a3;
          if (!--v5)
            return result;
        }
        v12 = v11 + -1.0;
        if (v11 <= 1.0)
          v12 = 0.0;
LABEL_16:
        v13 = v12;
        goto LABEL_17;
      }
      do
      {
        v14 = *a3++;
        *a4++ = v14;
        --v5;
      }
      while (v5);
    }
  }
  else if (a2 >= 1)
  {
    v15 = a2;
    do
    {
      v16 = *a3;
      v17 = 0.0;
      if (*a3 > 0.0)
      {
        v17 = 10.0;
        if (v16 < 10.0)
        {
          v17 = 0.0;
          if (v16 > 1.0)
            v17 = v16 + -1.0;
        }
      }
      *a4++ = v17;
      ++a3;
      --v15;
    }
    while (v15);
  }
  return result;
}

double sub_1B22107D8(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *sub_1B221081C(_QWORD *a1)
{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v4 = a1 + 57;
  v2 = (_QWORD **)a1[57];
  v3 = v4[1];
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        v6 = sub_1B2207860(v2[v5]);
        MEMORY[0x1B5E22E18](v6, 0x1070C408374ED18);
        v2 = (_QWORD **)a1[57];
        v3 = a1[58];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    a1[58] = v2;
    operator delete(v2);
  }
  v7 = (void *)a1[54];
  if (v7)
  {
    a1[55] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[51];
  if (v8)
  {
    a1[52] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[45];
  if (v10)
  {
    a1[46] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[42];
  if (v11)
  {
    a1[43] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[39];
  if (v12)
  {
    a1[40] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[36];
  if (v13)
  {
    a1[37] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[33];
  if (v14)
  {
    a1[34] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[30];
  if (v15)
  {
    a1[31] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[27];
  if (v16)
  {
    a1[28] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[24];
  if (v17)
  {
    a1[25] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[21];
  if (v18)
  {
    a1[22] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[18];
  if (v19)
  {
    a1[19] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[15];
  if (v20)
  {
    a1[16] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[12];
  if (v21)
  {
    a1[13] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[9];
  if (v22)
  {
    a1[10] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[6];
  if (v23)
  {
    a1[7] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[3];
  if (v24)
  {
    a1[4] = v24;
    operator delete(v24);
  }
  return a1;
}

BOOL sub_1B22109C8(unsigned int *a1, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unsigned __int16 *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  BOOL v62;
  _BOOL4 v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *__p;
  char __str[1024];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 6);
  if (((*((_QWORD *)a1 + 7) - v6) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing face-verts", "MISSING_FACE_VERTS");
    a2(3, __str, a3);
    v60 = 1;
LABEL_65:
    v62 = 0;
    if (v60 && ((*((_QWORD *)a1 + 37) - *((_QWORD *)a1 + 36)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-faces", "MISSING_VERT_FACES");
      v61 = 4;
      goto LABEL_68;
    }
    return v62;
  }
  v7 = *((_QWORD *)a1 + 36);
  if (((*((_QWORD *)a1 + 37) - v7) & 0x3FFFFFFFCLL) == 0)
  {
    v60 = a2 != 0;
    goto LABEL_65;
  }
  v8 = *a1;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v9);
      v11 = *v10;
      if ((int)v11 >= 1)
        break;
LABEL_14:
      if (++v9 == v8)
        goto LABEL_15;
    }
    v12 = 0;
    v13 = v6 + 4 * (int)v10[1];
    v14 = *((_QWORD *)a1 + 33);
    while (1)
    {
      v15 = *(int *)(v13 + 4 * v12);
      v16 = *(unsigned int *)(v14 + 8 * (_DWORD)v15);
      if ((int)v16 < 1)
        break;
      v17 = *(int *)(v14 + 8 * v15 + 4);
      v18 = (int *)(v7 + 4 * v17);
      v19 = (unsigned __int16 *)(*((_QWORD *)a1 + 39) + 2 * v17);
      while (1)
      {
        v20 = *v18++;
        if (v9 == v20 && v12 == *v19)
          break;
        ++v19;
        if (!--v16)
          goto LABEL_61;
      }
      if (++v12 == v11)
        goto LABEL_14;
    }
LABEL_61:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - face %d correlation of vert %d failed");
    goto LABEL_63;
  }
LABEL_15:
  v21 = *((_QWORD *)a1 + 21);
  if (((*((_QWORD *)a1 + 22) - v21) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-faces", "MISSING_EDGE_FACES");
    a2(0, __str, a3);
    v64 = 1;
LABEL_76:
    v62 = 0;
    if (v64 && ((*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing face-edges", "MISSING_FACE_EDGES");
      v61 = 2;
      goto LABEL_68;
    }
    return v62;
  }
  v22 = *((_QWORD *)a1 + 9);
  if (((*((_QWORD *)a1 + 10) - v22) & 0x3FFFFFFFCLL) == 0)
  {
    v64 = a2 != 0;
    goto LABEL_76;
  }
  if ((int)v8 >= 1)
  {
    v23 = 0;
    while (1)
    {
      v24 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v23);
      v25 = *v24;
      if ((int)v25 >= 1)
        break;
LABEL_28:
      if (++v23 == v8)
        goto LABEL_29;
    }
    v26 = 0;
    v27 = v22 + 4 * (int)v24[1];
    v28 = *((_QWORD *)a1 + 18);
    while (1)
    {
      v29 = *(int *)(v27 + 4 * v26);
      v30 = *(unsigned int *)(v28 + 8 * (_DWORD)v29);
      if ((int)v30 < 1)
        break;
      v31 = *(int *)(v28 + 8 * v29 + 4);
      v32 = (int *)(v21 + 4 * v31);
      v33 = (unsigned __int16 *)(*((_QWORD *)a1 + 24) + 2 * v31);
      while (1)
      {
        v34 = *v32++;
        if (v23 == v34 && v26 == *v33)
          break;
        ++v33;
        if (!--v30)
          goto LABEL_73;
      }
      if (++v26 == v25)
        goto LABEL_28;
    }
LABEL_73:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - face %d correlation of edge %d failed", "FAILED_CORRELATION_FACE_EDGE", v23, v26);
    v61 = 8;
    goto LABEL_68;
  }
LABEL_29:
  v35 = *((_QWORD *)a1 + 15);
  if (((*((_QWORD *)a1 + 16) - v35) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - missing edge-verts", "MISSING_EDGE_VERTS");
    v65 = 1;
    a2(1, __str, a3);
LABEL_84:
    v62 = 0;
    if (v65 && ((*((_QWORD *)a1 + 46) - *((_QWORD *)a1 + 45)) & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-edges", "MISSING_VERT_EDGES");
      v61 = 5;
      goto LABEL_68;
    }
    return v62;
  }
  v36 = *((_QWORD *)a1 + 45);
  if (((*((_QWORD *)a1 + 46) - v36) & 0x3FFFFFFFCLL) == 0)
  {
    v65 = a2 != 0;
    goto LABEL_84;
  }
  v37 = a1[1];
  if ((int)v37 >= 1)
  {
    v38 = 0;
    v39 = *((_QWORD *)a1 + 42);
LABEL_33:
    v40 = 0;
    v41 = 1;
    while (1)
    {
      v42 = v41;
      v43 = *(int *)(v35 + 8 * v38 + 4 * v40);
      v44 = *(unsigned int *)(v39 + 8 * (_DWORD)v43);
      if ((int)v44 < 1)
        break;
      v45 = *(int *)(v39 + 8 * v43 + 4);
      v46 = (int *)(v36 + 4 * v45);
      v47 = (unsigned __int16 *)(*((_QWORD *)a1 + 48) + 2 * v45);
      while (1)
      {
        v48 = *v46++;
        if (v38 == v48 && v40 == *v47)
          break;
        ++v47;
        if (!--v44)
          goto LABEL_81;
      }
      v41 = 0;
      v40 = 1;
      if ((v42 & 1) == 0)
      {
        if (++v38 != v37)
          goto LABEL_33;
        goto LABEL_42;
      }
    }
LABEL_81:
    if (!a2)
      return 0;
    snprintf(__str, 0x400uLL, "%s - edge %d correlation of vert %d failed");
LABEL_63:
    v61 = 7;
LABEL_68:
    a2(v61, __str, a3);
    return 0;
  }
LABEL_42:
  v49 = 2 * a1[5];
  v74 = &v75;
  __p = 0;
  if (v49 >= 0x21)
  {
    __p = operator new(4 * v49);
    v74 = (uint64_t *)__p;
  }
  if ((int)a1[2] < 1)
  {
LABEL_87:
    v66 = a1[1];
    if ((int)v66 < 1)
    {
      v62 = 1;
    }
    else
    {
      v67 = 0;
      v62 = 0;
      v68 = 4;
      while (1)
      {
        if ((*(_BYTE *)(*((_QWORD *)a1 + 30) + v67) & 1) == 0)
        {
          if (*(_DWORD *)(*((_QWORD *)a1 + 15) + v68 - 4) == *(_DWORD *)(*((_QWORD *)a1 + 15) + v68))
          {
            if (!a2)
              goto LABEL_106;
            snprintf(__str, 0x400uLL, "%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold", "DEGENERATE_EDGE", v67);
            v71 = 12;
            goto LABEL_105;
          }
          v69 = *(_DWORD *)(*((_QWORD *)a1 + 18) + v68 - 4);
          if ((v69 - 3) <= 0xFFFFFFFD)
            break;
        }
        v62 = ++v67 >= v66;
        v68 += 8;
        if (v66 == v67)
          goto LABEL_106;
      }
      if (!a2)
        goto LABEL_106;
      snprintf(__str, 0x400uLL, "%s - edge %d with %d incident faces not tagged non-manifold", "NON_MANIFOLD_EDGE", v67, v69);
      v71 = 13;
LABEL_105:
      a2(v71, __str, a3);
    }
  }
  else
  {
    v50 = 0;
    while (1)
    {
      if ((*(_WORD *)(*((_QWORD *)a1 + 54) + 2 * v50) & 0x801) == 0)
      {
        v51 = *((_QWORD *)a1 + 33);
        v52 = (8 * v50) | 4;
        v53 = *(int *)(v51 + v52);
        v54 = *((_QWORD *)a1 + 36);
        v55 = *(int *)(v51 + 8 * v50);
        v56 = *((_QWORD *)a1 + 42);
        v72 = *(int *)(v56 + v52);
        v73 = *((_QWORD *)a1 + 45);
        v57 = *(unsigned int *)(v56 + 8 * v50);
        if (!sub_1B2211144(a1, v50, v74, (int *)v74 + v55))
        {
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d cannot orient incident faces and edges", "FAILED_ORIENTATION_INCIDENT_FACES_EDGES", v50);
            v70 = 11;
            goto LABEL_98;
          }
          goto LABEL_99;
        }
        if ((int)v55 >= 1)
        {
          v58 = 0;
          while (*(_DWORD *)(v54 + 4 * v53 + 4 * v58) == *((_DWORD *)v74 + v58))
          {
            if (v55 == ++v58)
              goto LABEL_54;
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident face %d", "FAILED_ORIENTATION_INCIDENT_FACE", v50, v58);
            v70 = 10;
LABEL_98:
            a2(v70, __str, a3);
            goto LABEL_99;
          }
          goto LABEL_99;
        }
LABEL_54:
        if ((int)v57 >= 1)
          break;
      }
LABEL_47:
      if (++v50 >= (int)a1[2])
        goto LABEL_87;
    }
    v59 = 0;
    while (*(_DWORD *)(v73 + 4 * v72 + 4 * v59) == *((_DWORD *)v74 + v55 + v59))
    {
      if (v57 == ++v59)
        goto LABEL_47;
    }
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident edge %d", "FAILED_ORIENTATION_INCIDENT_EDGE", v50, v59);
      v70 = 9;
      goto LABEL_98;
    }
LABEL_99:
    v62 = 0;
  }
LABEL_106:
  operator delete(__p);
  return v62;
}

uint64_t sub_1B2211144(_QWORD *a1, __int32 __c, _DWORD *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int32 *v19;
  size_t v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int32 *v32;
  size_t v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  int v37;
  __int32 *v38;
  uint64_t v39;
  int v40;
  __int32 v41;
  unint64_t v42;
  int v43;
  __int32 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  __int32 *v53;
  size_t v54;
  __int32 *v55;
  __int32 *v56;
  __int32 *v57;
  uint64_t v58;
  int v60;

  v5 = a1[42];
  v6 = 8 * __c;
  v7 = *(unsigned int *)(v5 + v6);
  v8 = a1[33];
  v9 = *(_DWORD *)(v8 + v6);
  if (v9)
    v10 = (int)v7 < 2;
  else
    v10 = 1;
  if (!v10 && (int)v7 - v9 <= 1)
  {
    v15 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
    v60 = v9;
    v58 = v7;
    if ((_DWORD)v7 == v9)
    {
      v16 = *(int *)(a1[36] + 4 * *(int *)(v8 + v15));
      v17 = (2 * v16) | 1;
      v18 = a1[3];
      v19 = (__int32 *)(a1[6] + 4 * *(int *)(v18 + 4 * v17));
      v20 = *(int *)(v18 + 8 * v16);
      v21 = &v19[v20];
      v22 = wmemchr(v19, __c, v20);
      if (v22)
        v23 = v22;
      else
        v23 = v21;
      v24 = (unint64_t)((char *)v23 - (char *)v19) >> 2;
      v25 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v17) + 4 * (int)v24);
    }
    else
    {
      LODWORD(v24) = 0;
      v26 = (int *)(a1[45] + 4 * *(int *)(v5 + v15));
      LODWORD(v16) = -1;
      v25 = -1;
      do
      {
        v28 = *v26++;
        v27 = v28;
        v29 = a1[18];
        if (*(_DWORD *)(v29 + 8 * v28) == 1)
        {
          v16 = *(int *)(a1[21] + 4 * *(int *)(v29 + 4 * ((2 * v27) | 1)));
          v30 = (2 * v16) | 1;
          v31 = a1[3];
          v32 = (__int32 *)(a1[6] + 4 * *(int *)(v31 + 4 * v30));
          v33 = *(int *)(v31 + 8 * v16);
          v34 = &v32[v33];
          v35 = wmemchr(v32, __c, v33);
          v36 = v35 ? v35 : v34;
          v24 = (unint64_t)((char *)v36 - (char *)v32) >> 2;
          v37 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v30) + 4 * (int)v24);
          v25 = v27;
          if (v27 == v37)
            break;
        }
        --v7;
      }
      while (v7);
    }
    *a3 = v16;
    *a4 = v25;
    v38 = a4 + 1;
    v39 = v58 - 1;
    v40 = 1;
    v41 = v25;
    LODWORD(v42) = v24;
    v43 = v60;
    while (1)
    {
      v44 = v41;
      v45 = a1[3];
      v46 = *(_DWORD *)(v45 + 8 * (int)v16);
      v47 = a1[9];
      if ((_DWORD)v42)
        v46 = v42;
      v41 = *(_DWORD *)(v47 + 4 * *(int *)(v45 + 8 * (_DWORD)v16 + 4) + 4 * (v46 - 1));
      if (v41 == v44 || v41 == v25)
        break;
      *v38 = v41;
      if (v40 < v43)
      {
        v49 = a1[18];
        v50 = (int *)(a1[21] + 4 * *(int *)(v49 + 4 * ((2 * v41) | 1)));
        v51 = *(_DWORD *)(v49 + 8 * v41);
        if (v51 == 1)
        {
          v52 = *v50;
          if (*v50 == (_DWORD)v16)
            return 0;
        }
        else
        {
          if (!v51)
            return 0;
          v52 = *v50;
        }
        v16 = v50[v52 == (_DWORD)v16];
        v53 = (__int32 *)(v47 + 4 * *(int *)(v45 + 4 * (int)((2 * v16) | 1)));
        v54 = *(int *)(v45 + 8 * v16);
        v55 = &v53[v54];
        v56 = wmemchr(v53, v41, v54);
        v43 = v60;
        if (v56)
          v57 = v56;
        else
          v57 = v55;
        v42 = (unint64_t)((char *)v57 - (char *)v53) >> 2;
        a3[v40++] = v16;
      }
      ++v38;
      if (!--v39)
        return 1;
    }
  }
  return 0;
}

BOOL sub_1B2211404(uint64_t a1, int a2, int a3)
{
  return (sub_1B2208CCC(*(_QWORD **)(*(_QWORD *)(a1 + 456) + 8 * a3), a2) & 1) == 0;
}

_QWORD *sub_1B2211428(_QWORD *result, int a2, _WORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  v4 = (2 * a2) | 1;
  v5 = result[3];
  v6 = (int *)(result[6] + 4 * *(int *)(v5 + 4 * v4));
  v7 = *(unsigned int *)(v5 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v7 >= 1)
    {
      do
      {
        v21 = *v6++;
        *a3++ = *(_WORD *)(result[54] + 2 * v21);
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD **)(result[57] + 8 * a4);
    v10 = v9[3] + 4 * *(int *)(*(_QWORD *)(*v9 + 24) + 4 * v4);
    do
    {
      v11 = v6[v8];
      v12 = *(_DWORD *)(v10 + 4 * v8);
      if (*(int *)(*v9 + 12) <= 0)
      {
        v13 = *(int *)(v9[12] + 4 * v11);
        v12 = v13 - 1;
        v14 = (int *)(v9[18] + 4 * v13);
        do
        {
          v15 = *v14++;
          ++v12;
        }
        while (v15 != *(_DWORD *)(v10 + 4 * v8));
      }
      v16 = *(unsigned __int8 *)(v9[21] + v12);
      LOWORD(v11) = *(_WORD *)(result[54] + 2 * v11);
      if ((v16 & 1) != 0)
      {
        v17 = v11 & 0xD867;
        v18 = v17 | 0x2200;
        if ((v16 & 0x80u) == 0)
          v19 = ~(v16 >> 3) & 8;
        else
          LOWORD(v19) = 0;
        v20 = v17 | 0x410 | v19;
        if ((v16 & 8) != 0)
          v20 = v18;
        LODWORD(v11) = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      a3[v8++] = v11;
    }
    while (v8 != v7);
  }
  return result;
}

_QWORD *sub_1B2211558(_QWORD *result, int a2, _BYTE *a3, unsigned int a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = result[3];
  v5 = (int *)(result[9] + 4 * *(int *)(v4 + 8 * a2 + 4));
  v6 = *(unsigned int *)(v4 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        v10 = *v5++;
        *a3++ = *(_BYTE *)(result[30] + v10);
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(_QWORD *)(result[57] + 8 * a4);
    do
    {
      v8 = *v5++;
      v9 = *(_BYTE *)(result[30] + v8);
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 48) + v8) & 1) != 0)
        v9 |= 6u;
      *a3++ = v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1B22115DC(unsigned __int16 *a1, int a2)
{
  uint64_t result;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;

  result = *a1;
  if (a2 >= 2)
  {
    v4 = a1 + 1;
    v5 = a2 - 1;
    do
    {
      v6 = *v4++;
      result = v6 | result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B221160C(uint64_t a1, int **a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 432);
  result = *(unsigned __int16 *)(v2 + 2 * **a2);
  v4 = *((unsigned int *)a2 + 2);
  if ((int)v4 >= 2)
  {
    v5 = *a2 + 1;
    v6 = v4 - 1;
    do
    {
      v7 = *v5++;
      result = *(unsigned __int16 *)(v2 + 2 * v7) | result;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1B2211648(_QWORD *a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  unsigned __int8 *v16;
  int *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  __int16 v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  size_t v27;
  int *v28;
  uint64_t v29;
  unsigned __int8 *v31;
  _BYTE v32[64];
  void *__p;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1[3];
  v6 = *(int *)(v5 + 8 * a2 + 4);
  v7 = a1[6];
  v8 = *(unsigned int *)(v5 + 8 * a2);
  if ((a3 & 0x80000000) != 0)
  {
    v26 = a1[54];
    v12 = *(unsigned __int16 *)(v26 + 2 * *(int *)(v7 + 4 * v6));
    if ((int)v8 >= 2)
    {
      v27 = v8 - 1;
      v28 = (int *)(v7 + 4 * v6 + 4);
      do
      {
        v29 = *v28++;
        v12 = *(unsigned __int16 *)(v26 + 2 * v29) | v12;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    v9 = *(_QWORD **)(a1[57] + 8 * a3);
    v10 = v32;
    v31 = v32;
    __p = 0;
    if (v8 >= 0x41)
    {
      v10 = operator new(v8);
      __p = v10;
      v31 = v10;
    }
    sub_1B2208C3C(v9, a2, (uint64_t)v10);
    v11 = a1[54];
    v12 = *(unsigned __int16 *)(v11 + 2 * *(int *)(v7 + 4 * v6));
    v13 = *v31;
    if ((v13 & 1) != 0)
    {
      if ((v13 & 0x80u) == 0)
        v14 = ~(v13 >> 3) & 8;
      else
        LOWORD(v14) = 0;
      v15 = v12 & 0xD867 | v14 | 0x410;
      if ((v13 & 8) != 0)
        v15 = v12 & 0xD867 | 0x2200;
      v12 = v15 & 0xAFF8 | (((v13 >> 7) & 1) << 14) | v13 & 2 | (v13 >> 2) & 1 | 0x1004;
    }
    if ((int)v8 >= 2)
    {
      v16 = v31 + 1;
      v17 = (int *)(v7 + 4 * v6 + 4);
      v18 = v8 - 1;
      do
      {
        v19 = *v17++;
        v20 = *(unsigned __int16 *)(v11 + 2 * v19);
        LODWORD(v19) = *v16++;
        v21 = v19;
        if ((v19 & 1) != 0)
        {
          v22 = v20 & 0xD867;
          v23 = v22 | 0x2200;
          if ((v21 & 0x80u) == 0)
            v24 = ~(v21 >> 3) & 8;
          else
            LOWORD(v24) = 0;
          v25 = v22 | v24 | 0x410;
          if ((v21 & 8) != 0)
            v25 = v23;
          v20 = v25 & 0xAFF8 | (((v21 >> 7) & 1) << 14) | v21 & 2 | (v21 >> 2) & 1 | 0x1004;
        }
        v12 = v20 | v12;
        --v18;
      }
      while (v18);
    }
    operator delete(__p);
  }
  return v12;
}

uint64_t sub_1B2211858(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  __int16 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  __int16 v20;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 456) + 8 * a3);
  v4 = *(int *)(v3[12] + 4 * a2);
  v5 = v3[21];
  v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 432) + 2 * a2);
  v7 = *(unsigned __int8 *)(v5 + v4);
  if ((v7 & 1) == 0)
    return *(unsigned __int16 *)(*(_QWORD *)(a1 + 432) + 2 * a2);
  v9 = *(unsigned __int16 *)(v3[9] + 2 * a2);
  v10 = v6 & 0xD867;
  v11 = ~(v7 >> 3) & 8;
  if ((v7 & 0x80u) != 0)
    LOWORD(v11) = 0;
  v12 = v10 | 0x410 | v11;
  if ((v7 & 8) != 0)
    v13 = v6 & 0xD867 | 0x2200;
  else
    v13 = v12;
  result = v13 & 0xAFF8 | (((v7 >> 7) & 1) << 14) | v7 & 2 | (v7 >> 2) & 1 | 0x1004;
  if (v9 >= 2)
  {
    v14 = (unsigned __int8 *)(v4 + v5 + 1);
    v15 = v9 - 1;
    do
    {
      v17 = *v14++;
      v16 = v17;
      v18 = v6;
      if ((v17 & 1) != 0)
      {
        if ((v16 & 0x80u) == 0)
          v19 = ~(v16 >> 3) & 8;
        else
          LOWORD(v19) = 0;
        v20 = v10 | v19 | 0x410;
        if ((v16 & 8) != 0)
          v20 = v6 & 0xD867 | 0x2200;
        v18 = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      result = v18 | result;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_1B221194C(_QWORD *a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  __int16 v20;
  _DWORD *v21;
  uint64_t v22;

  v4 = a1[33];
  v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 < 1)
    return 0;
  v6 = 0;
  v7 = *(int *)(v4 + 8 * a2 + 4);
  v8 = (int *)(a1[36] + 4 * v7);
  v9 = (__int16 *)(a1[39] + 2 * v7);
  v10 = *(_DWORD *)(a1[42] + 8 * a2);
  v11 = (v5 - 1);
  v12 = v5;
  do
  {
    v14 = *v8++;
    v13 = v14;
    if ((a4 & 0x80000000) != 0)
    {
      v18 = (int *)(a1[3] + 4 * ((2 * v13) | 1));
      v16 = a1 + 6;
    }
    else
    {
      v15 = *(uint64_t **)(a1[57] + 8 * a4);
      v17 = *v15;
      v16 = v15 + 3;
      v18 = (int *)(*(_QWORD *)(v17 + 24) + 4 * ((2 * v13) | 1));
    }
    v19 = *v16 + 4 * *v18;
    v20 = *v9;
    v21 = (_DWORD *)(a3 + 4 * v6);
    *v21 = *(_DWORD *)(v19 + 4 * ((*v9 + 1) & 3));
    v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v10 > (int)v5 && !v11)
    {
      *(_DWORD *)(a3 + 4 * v22) = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      v22 = (v6 + 3);
    }
    --v11;
    ++v9;
    v6 = v22;
    --v12;
  }
  while (v12);
  return v22;
}

uint64_t sub_1B2211A58(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 456) + 8 * a3);
  return v3[3] + 4 * *(int *)(*(_QWORD *)(*v3 + 24) + 8 * a2 + 4);
}

uint64_t sub_1B2211A88(_QWORD *a1, int a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  __int16 v20;
  _DWORD *v21;
  uint64_t v22;

  v5 = *a3;
  if (!*a3)
    return 0;
  v6 = 0;
  v7 = a1[33];
  v8 = *(int *)(v7 + 8 * a2 + 4);
  v9 = a1[36] + 4 * v8;
  v10 = *(_DWORD *)(v7 + 8 * a2);
  v11 = a1[39] + 2 * v8;
  v12 = a3[1];
  do
  {
    v13 = (v12 % v10);
    v14 = *(_DWORD *)(v9 + 4 * v13);
    if ((a5 & 0x80000000) != 0)
    {
      v18 = (int *)(a1[3] + 4 * ((2 * v14) | 1));
      v16 = a1 + 6;
    }
    else
    {
      v15 = *(uint64_t **)(a1[57] + 8 * a5);
      v17 = *v15;
      v16 = v15 + 3;
      v18 = (int *)(*(_QWORD *)(v17 + 24) + 4 * ((2 * v14) | 1));
    }
    v19 = *v16 + 4 * *v18;
    v20 = *(_WORD *)(v11 + 2 * v13);
    v21 = (_DWORD *)(a4 + 4 * v6);
    *v21 = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 1) & 3));
    v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v5 == 1 && (a3[2] & 1) == 0)
    {
      *(_DWORD *)(a4 + 4 * v22) = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      v22 = (v6 + 3);
    }
    ++v12;
    v6 = v22;
    --v5;
  }
  while (v5);
  return v22;
}

uint64_t sub_1B2211B90(_QWORD *a1, int a2, _DWORD *a3, int a4, unsigned int a5)
{
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;

  v5 = (int *)((char *)&unk_1B22CAB24 + 4 * a4);
  v6 = (2 * a2) | 1;
  v7 = a1[3];
  v8 = a1[6];
  v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  if ((a5 & 0x80000000) != 0)
  {
    v11 = a5;
    v13 = v9;
  }
  else
  {
    v10 = v6;
    v11 = a5;
    v12 = *(_QWORD **)(a1[57] + 8 * a5);
    v13 = v12[3] + 4 * *(int *)(*(_QWORD *)(*v12 + 24) + 4 * v10);
  }
  v14 = 0;
  *a3 = *(_DWORD *)(v13 + 4 * *v5);
  a3[1] = *(_DWORD *)(v13 + 4 * v5[1]);
  a3[2] = *(_DWORD *)(v13 + 4 * v5[2]);
  a3[3] = *(_DWORD *)(v13 + 4 * v5[3]);
  v15 = a1[36];
  v16 = a1[33];
  v17 = a1[39];
  v18 = a3 + 6;
  do
  {
    v19 = *(int *)(v16 + 8 * *(int *)(v9 + 4 * v5[v14]) + 4);
    v20 = (_DWORD *)(v15 + 4 * v19);
    if (*v20 == a2)
    {
      v21 = 0;
    }
    else if (v20[1] == a2)
    {
      v21 = 1;
    }
    else if (v20[2] == a2)
    {
      v21 = 2;
    }
    else if (v20[3] == a2)
    {
      v21 = 3;
    }
    else
    {
      v21 = -1;
    }
    v22 = (v21 + 2) & 3;
    v23 = v20[v22];
    if ((a5 & 0x80000000) != 0)
    {
      v25 = v8 + 4 * *(int *)(v7 + 4 * ((2 * v23) | 1));
    }
    else
    {
      v24 = *(_QWORD **)(a1[57] + 8 * v11);
      v25 = v24[3] + 4 * *(int *)(*(_QWORD *)(*v24 + 24) + 4 * ((2 * v23) | 1));
    }
    v26 = *(_WORD *)(v17 + 2 * v19 + 2 * v22);
    ++v14;
    *(v18 - 2) = *(_DWORD *)(v25 + 4 * ((v26 + 1) & 3));
    *(v18 - 1) = *(_DWORD *)(v25 + 4 * ((v26 + 2) & 3));
    *v18 = *(_DWORD *)(v25 + 4 * ((v26 - 1) & 3));
    v18 += 3;
  }
  while (v14 != 4);
  return 16;
}

uint64_t sub_1B2211D30(_QWORD *a1, int a2, _DWORD *a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v5 = 0;
  v6 = (2 * a2) | 1;
  v7 = a1[3];
  v8 = a1[6];
  v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  v10 = a1[36];
  v11 = a1[33];
  v12 = *(int *)(v11 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 + 2) & 3)) + 4);
  v13 = v10 + 4 * v12;
  v14 = *(int *)(v11 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 - 1) & 3)) + 4);
  v15 = v10 + 4 * v14;
  v16 = a1[39];
  v17 = v16 + 2 * v12;
  v18 = -1;
  v19 = -1;
  do
  {
    if (*(_DWORD *)(v13 + 4 * v5) == a2)
      v18 = v5;
    if (*(_DWORD *)(v15 + 4 * v5) == a2)
      v19 = v5;
    ++v5;
  }
  while (v5 != 4);
  v20 = (v18 + 2) & 3;
  v21 = (v19 + 2) & 3;
  v22 = (v19 - 1) & 3;
  v23 = *(int *)(v13 + 4 * ((v18 + 1) & 3));
  v24 = *(int *)(v13 + 4 * ((v18 + 2) & 3));
  v25 = *(_WORD *)(v17 + 2 * ((v18 + 1) & 3));
  v26 = *(_WORD *)(v17 + 2 * v20);
  v27 = v16 + 2 * v14;
  v28 = *(_WORD *)(v27 + 2 * v21);
  v29 = *(_WORD *)(v27 + 2 * v22);
  if ((a5 & 0x80000000) == 0)
  {
    v30 = *(_QWORD **)(a1[57] + 8 * a5);
    v7 = *(_QWORD *)(*v30 + 24);
    v8 = v30[3];
    v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  }
  v31 = *(int *)(v7 + 8 * v23 + 4);
  v32 = *(int *)(v7 + 8 * v24 + 4);
  v33 = *(int *)(v7 + 8 * *(int *)(v15 + 4 * v21) + 4);
  v34 = *(int *)(v7 + 8 * *(int *)(v15 + 4 * v22) + 4);
  *a3 = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[1] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[2] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 - 1) & 3));
  a3[3] = *(_DWORD *)(v9 + 4 * a4);
  v35 = v8 + 4 * v32;
  a3[4] = *(_DWORD *)(v8 + 4 * v31 + 4 * (((_BYTE)v25 + 2) & 3));
  a3[5] = *(_DWORD *)(v35 + 4 * (((_BYTE)v26 + 1) & 3));
  a3[6] = *(_DWORD *)(v35 + 4 * (((_BYTE)v26 + 2) & 3));
  v36 = *(_DWORD *)(v35 + 4 * (((_BYTE)v26 - 1) & 3));
  v37 = v8 + 4 * v33;
  a3[7] = v36;
  a3[8] = *(_DWORD *)(v37 + 4 * (((_BYTE)v28 + 1) & 3));
  a3[9] = *(_DWORD *)(v37 + 4 * (((_BYTE)v28 + 2) & 3));
  a3[10] = *(_DWORD *)(v37 + 4 * (((_BYTE)v28 - 1) & 3));
  a3[11] = *(_DWORD *)(v8 + 4 * v34 + 4 * (((_BYTE)v29 + 2) & 3));
  return 12;
}

uint64_t sub_1B2211F10(_QWORD *a1, int a2, _DWORD *a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (2 * a2) | 1;
  v6 = a1[3];
  v7 = a1[6];
  v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  v9 = *(int *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  v10 = 2 * v9;
  v11 = a1[33];
  v12 = *(int *)(v11 + 8 * v9 + 4);
  v13 = a1[36] + 4 * v12;
  v14 = *(unsigned int *)(v11 + 4 * v10);
  v15 = a1[39] + 2 * v12;
  if ((int)v14 < 1)
  {
LABEL_5:
    LOBYTE(v16) = -1;
  }
  else
  {
    v16 = 0;
    while (*(_DWORD *)(v13 + 4 * v16) != a2)
    {
      if (v14 == ++v16)
        goto LABEL_5;
    }
  }
  v17 = ((_BYTE)v16 - 1) & 3;
  v18 = *(int *)(v13 + 4 * (((_BYTE)v16 + 1) & 3));
  v19 = *(int *)(v13 + 4 * (((_BYTE)v16 + 2) & 3));
  v20 = *(int *)(v13 + 4 * (((_BYTE)v16 - 1) & 3));
  v21 = *(_WORD *)(v15 + 2 * (((_BYTE)v16 + 1) & 3));
  v22 = *(_WORD *)(v15 + 2 * (((_BYTE)v16 + 2) & 3));
  v23 = *(_WORD *)(v15 + 2 * v17);
  if ((a5 & 0x80000000) == 0)
  {
    v24 = *(_QWORD **)(a1[57] + 8 * a5);
    v6 = *(_QWORD *)(*v24 + 24);
    v7 = v24[3];
    v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  }
  v25 = *(int *)(v6 + 8 * v18 + 4);
  v26 = *(int *)(v6 + 8 * v19 + 4);
  v27 = *(int *)(v6 + 8 * v20 + 4);
  *a3 = *(_DWORD *)(v8 + 4 * a4);
  a3[1] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[2] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[3] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 - 1) & 3));
  v28 = v7 + 4 * v26;
  a3[4] = *(_DWORD *)(v7 + 4 * v25 + 4 * (((_BYTE)v21 + 2) & 3));
  a3[5] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 + 1) & 3));
  a3[6] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 + 2) & 3));
  a3[7] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 - 1) & 3));
  a3[8] = *(_DWORD *)(v7 + 4 * v27 + 4 * (((_BYTE)v23 + 2) & 3));
  return 9;
}

uint64_t sub_1B2212080(_QWORD *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;

  v4 = a1[3];
  v5 = *(int *)(v4 + 8 * a2 + 4);
  v6 = *(unsigned int *)(v4 + 8 * a2);
  v7 = (int *)(a1[6] + 4 * v5);
  v8 = a1[54];
  if ((int)v6 < 2)
  {
    v11 = *(_WORD *)(v8 + 2 * *v7);
  }
  else
  {
    v9 = v6 - 1;
    v10 = v7 + 1;
    v11 = *(_WORD *)(v8 + 2 * *v7);
    do
    {
      v12 = *v10++;
      v11 |= *(_WORD *)(v8 + 2 * v12);
      --v9;
    }
    while (v9);
  }
  if ((v11 & 0x707) != 0x200)
    return 0;
  v13 = ((*(_WORD *)(v8 + 2 * *v7) & 0x780) == 512) | (2 * ((*(_WORD *)(v8 + 2 * v7[1]) & 0x780) == 512)) | (4 * ((*(_WORD *)(v8 + 2 * v7[2]) & 0x780) == 512)) | (8 * ((*(_WORD *)(v8 + 2 * v7[3]) & 0x780) == 512));
  if (((0xEDB7uLL >> v13) & 1) != 0)
    return 0;
  v14 = dword_1B22CAB40[v13];
  v15 = a1[45];
  v16 = a1[42];
  v17 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[v14] + 4));
  v18 = a1[27];
  if (*(float *)(v18 + 4 * *v17) != *(float *)(v18 + 4 * v17[2]))
    return 0;
  if (*(float *)(v18 + 4 * v17[1]) != *(float *)(v18 + 4 * v17[3]))
    return 0;
  v19 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[((_BYTE)v14 + 1) & 3] + 4));
  if (*(float *)(v18 + 4 * *v19) != *(float *)(v18 + 4 * v19[2])
    || *(float *)(v18 + 4 * v19[1]) != *(float *)(v18 + 4 * v19[3]))
  {
    return 0;
  }
  if (a3)
    *a3 = *(_DWORD *)(v18 + 4 * *(int *)(a1[9] + 4 * v5 + 4 * v14));
  if (a4)
    *a4 = v14;
  return 1;
}

uint64_t sub_1B221221C(_QWORD *a1, int a2, int a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v3 = a1[42];
  v4 = (int *)(a1[45] + 4 * *(int *)(v3 + 8 * a2 + 4));
  v5 = *(unsigned int *)(v3 + 8 * a2);
  if (a2 == a3)
  {
    if ((int)v5 >= 1)
    {
      v6 = a1[15];
      while (1)
      {
        v8 = *v4++;
        result = v8;
        if (*(_DWORD *)(v6 + 8 * v8) == *(_DWORD *)(v6 + 8 * v8 + 4))
          break;
        if (!--v5)
          return 0xFFFFFFFFLL;
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 < 1)
    return 0xFFFFFFFFLL;
  v9 = a1[15];
  while (1)
  {
    v10 = *v4++;
    result = v10;
    v11 = (_DWORD *)(v9 + 8 * v10);
    if (*v11 == a3 || v11[1] == a3)
      break;
    if (!--v5)
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL sub_1B22122B0(int *a1)
{
  int v2;
  unint64_t v3;
  int *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  void **v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t **v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  unint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  char *v58;
  int v59;
  char *v60;
  int *v61;
  int *v62;
  int *v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  int *v70;
  int v71;
  _DWORD *v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  int *v79;
  int v80;
  int *v81;
  int *v82;
  unint64_t v83;
  _DWORD *v84;
  int *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  int *v93;
  int v94;
  int *v95;
  unint64_t v96;
  _DWORD *v97;
  int *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  int v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  int *v152;
  uint64_t v154;
  int **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *__p;
  char *v160;
  char *v161;
  int v162;
  int v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t *v166;
  _QWORD *v167[2];
  int v168;
  int v169;
  int *v170;
  int *v171;
  _QWORD **v172;
  _QWORD *v173[2];
  int v174;
  int v175;
  int *v176;
  _QWORD *v177;
  uint64_t *v178;
  _QWORD *v179[2];
  int v180;
  _DWORD *v181[2];

  v2 = a1[2];
  v3 = *a1;
  v4 = a1 + 66;
  sub_1B17F8190((uint64_t)(a1 + 66), 2 * v2);
  sub_1B17F8190((uint64_t)(a1 + 84), 2 * v2);
  sub_1B17F8160((uint64_t)(a1 + 102), v2);
  sub_1B2213904((uint64_t)(a1 + 108), v2);
  bzero(*((void **)a1 + 54), 2 * a1[2]);
  *a1 = v3;
  sub_1B17F8190((uint64_t)(a1 + 6), 2 * v3);
  v5 = (char *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 13) - (_QWORD)v5;
  if (v3 <= v6)
  {
    if (v3 < v6)
      *((_QWORD *)a1 + 13) = &v5[v3];
  }
  else
  {
    sub_1B2213A14((void **)a1 + 12, v3 - v6);
    v5 = (char *)*((_QWORD *)a1 + 12);
  }
  bzero(v5, *a1);
  a1[1] = 0;
  sub_1B17F8190((uint64_t)(a1 + 36), 0);
  sub_1B17F8160((uint64_t)(a1 + 54), 0);
  v7 = *((_QWORD *)a1 + 30);
  if (*((_QWORD *)a1 + 31) != v7)
    *((_QWORD *)a1 + 31) = v7;
  sub_1B17F8190((uint64_t)(a1 + 18), (int)((uint64_t)(*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 2));
  v8 = 4 * v2;
  v9 = 4 * v2;
  sub_1B17F7530((void **)a1 + 15, v8);
  sub_1B17F7530((void **)a1 + 21, v9);
  sub_1B17F7530((void **)a1 + 18, v9);
  v10 = 2;
  v176 = a1 + 36;
  v177 = a1 + 42;
  v179[0] = 0;
  v179[1] = 0;
  v178 = (uint64_t *)v179;
  v11 = *((_QWORD *)a1 + 18);
  v12 = (unint64_t)(*((_QWORD *)a1 + 19) - v11) >> 2;
  if ((v12 & 0x80000000) == 0)
    v13 = (unint64_t)(*((_QWORD *)a1 + 19) - v11) >> 2;
  else
    v13 = v12 + 1;
  v14 = v13 >> 1;
  v174 = v14;
  v175 = 2;
  if ((int)v12 >= 2)
  {
    v15 = 0;
    v16 = (_DWORD *)(v11 + 4);
    do
    {
      *(v16 - 1) = 0;
      *v16 = v175 * v15;
      v16 += 2;
      ++v15;
      v14 = v174;
    }
    while (v15 < v174);
    v10 = v175;
  }
  sub_1B17F8190((uint64_t)(a1 + 42), v14 * v10);
  v17 = 6;
  v170 = v4;
  v171 = a1 + 72;
  v173[0] = 0;
  v173[1] = 0;
  v172 = v173;
  v18 = *((_QWORD *)a1 + 33);
  v19 = (unint64_t)(*((_QWORD *)a1 + 34) - v18) >> 2;
  if ((v19 & 0x80000000) == 0)
    v20 = (unint64_t)(*((_QWORD *)a1 + 34) - v18) >> 2;
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v168 = v21;
  v169 = 6;
  if ((int)v19 < 2)
  {
    v24 = 6;
  }
  else
  {
    v22 = 0;
    v23 = (_DWORD *)(v18 + 4);
    do
    {
      *(v23 - 1) = 0;
      *v23 = v169 * v22;
      v23 += 2;
      ++v22;
      v21 = v168;
    }
    while (v22 < v168);
    v24 = v169;
  }
  sub_1B17F8190((uint64_t)(a1 + 72), v21 * v24);
  v164 = a1 + 84;
  v165 = a1 + 90;
  v167[0] = 0;
  v167[1] = 0;
  v166 = (uint64_t *)v167;
  v25 = *((_QWORD *)a1 + 42);
  v26 = (unint64_t)(*((_QWORD *)a1 + 43) - v25) >> 2;
  if ((v26 & 0x80000000) == 0)
    v27 = (unint64_t)(*((_QWORD *)a1 + 43) - v25) >> 2;
  else
    v27 = v26 + 1;
  v28 = v27 >> 1;
  v162 = v28;
  v163 = 6;
  if ((int)v26 > 1)
  {
    v29 = 0;
    v30 = (_DWORD *)(v25 + 4);
    do
    {
      *(v30 - 1) = 0;
      *v30 = v163 * v29;
      v30 += 2;
      ++v29;
      v28 = v162;
    }
    while (v29 < v162);
    v17 = v163;
  }
  v31 = (void **)(a1 + 30);
  sub_1B17F8190((uint64_t)(a1 + 90), v28 * v17);
  __p = 0;
  v160 = 0;
  v161 = 0;
  if ((int)v3 >= 1)
  {
    v32 = 0;
    v155 = (int **)(a1 + 34);
    v154 = v3;
    while (1)
    {
      v33 = (unsigned int *)(*((_QWORD *)a1 + 3) + 8 * v32);
      v34 = *v33;
      if ((int)v34 >= 1)
        break;
LABEL_197:
      if (++v32 == v154)
        goto LABEL_198;
    }
    v35 = 0;
    v36 = (int)v33[1];
    v157 = *((_QWORD *)a1 + 9) + 4 * v36;
    v158 = *((_QWORD *)a1 + 6) + 4 * v36;
    v156 = v34;
    while (1)
    {
      v37 = *(_DWORD *)(v158 + 4 * v35);
      v38 = v35 + 1;
      v39 = (v35 + 1);
      if (v35 + 1 == v34)
        v39 = 0;
      v40 = *(_DWORD *)(v158 + 4 * v39);
      if (v37 == v40)
      {
        v41 = v160;
        if (v160 < v161)
        {
          *(_DWORD *)v160 = a1[1];
          v42 = v160 + 4;
LABEL_64:
          v160 = v42;
LABEL_65:
          LODWORD(v52) = a1[1];
          a1[1] = v52 + 1;
          v62 = (int *)*((_QWORD *)a1 + 16);
          v61 = (int *)*((_QWORD *)a1 + 17);
          if (v62 >= v61)
          {
            v64 = (int *)*v31;
            v65 = ((char *)v62 - (_BYTE *)*v31) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              goto LABEL_217;
            v67 = (char *)v61 - (char *)v64;
            if (v67 >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)sub_1B17F7E58((uint64_t)v155, v68);
              v64 = (int *)*((_QWORD *)a1 + 15);
              v62 = (int *)*((_QWORD *)a1 + 16);
            }
            else
            {
              v69 = 0;
            }
            v70 = (int *)&v69[4 * v65];
            *v70 = v37;
            v63 = v70 + 1;
            while (v62 != v64)
            {
              v71 = *--v62;
              *--v70 = v71;
            }
            v61 = (int *)&v69[4 * v68];
            *((_QWORD *)a1 + 15) = v70;
            *((_QWORD *)a1 + 16) = v63;
            *((_QWORD *)a1 + 17) = v61;
            if (v64)
            {
              operator delete(v64);
              v61 = *v155;
            }
          }
          else
          {
            *v62 = v37;
            v63 = v62 + 1;
          }
          *((_QWORD *)a1 + 16) = v63;
          if (v63 >= v61)
          {
            v73 = (int *)*v31;
            v74 = ((char *)v63 - (_BYTE *)*v31) >> 2;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62)
              goto LABEL_217;
            v76 = (char *)v61 - (char *)v73;
            if (v76 >> 1 > v75)
              v75 = v76 >> 1;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
              v77 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)sub_1B17F7E58((uint64_t)v155, v77);
              v73 = (int *)*((_QWORD *)a1 + 15);
              v63 = (int *)*((_QWORD *)a1 + 16);
            }
            else
            {
              v78 = 0;
            }
            v79 = (int *)&v78[4 * v74];
            *v79 = v40;
            v72 = v79 + 1;
            while (v63 != v73)
            {
              v80 = *--v63;
              *--v79 = v80;
            }
            *((_QWORD *)a1 + 15) = v79;
            *((_QWORD *)a1 + 16) = v72;
            *((_QWORD *)a1 + 17) = &v78[4 * v77];
            if (v73)
              operator delete(v73);
          }
          else
          {
            *v63 = v40;
            v72 = v63 + 1;
          }
          *((_QWORD *)a1 + 16) = v72;
          v81 = v176;
          v82 = (int *)*((_QWORD *)v176 + 1);
          v83 = *((_QWORD *)v176 + 2);
          if ((unint64_t)v82 >= v83)
          {
            v85 = *(int **)v176;
            v86 = ((uint64_t)v82 - *(_QWORD *)v176) >> 2;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 62)
              goto LABEL_217;
            v88 = v83 - (_QWORD)v85;
            if (v88 >> 1 > v87)
              v87 = v88 >> 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v89 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              v90 = (char *)sub_1B17F7E58((uint64_t)(v176 + 4), v89);
              v85 = *(int **)v81;
              v82 = (int *)*((_QWORD *)v81 + 1);
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[4 * v86];
            *(_DWORD *)v91 = 0;
            v84 = v91 + 4;
            while (v82 != v85)
            {
              v92 = *--v82;
              *((_DWORD *)v91 - 1) = v92;
              v91 -= 4;
            }
            *(_QWORD *)v81 = v91;
            *((_QWORD *)v81 + 1) = v84;
            *((_QWORD *)v81 + 2) = &v90[4 * v89];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *v82 = 0;
            v84 = v82 + 1;
          }
          *((_QWORD *)v81 + 1) = v84;
          v93 = v176;
          v94 = v175 * v174;
          v95 = (int *)*((_QWORD *)v176 + 1);
          v96 = *((_QWORD *)v176 + 2);
          if ((unint64_t)v95 >= v96)
          {
            v98 = *(int **)v176;
            v99 = ((uint64_t)v95 - *(_QWORD *)v176) >> 2;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62)
              goto LABEL_217;
            v101 = v96 - (_QWORD)v98;
            if (v101 >> 1 > v100)
              v100 = v101 >> 1;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              v103 = (char *)sub_1B17F7E58((uint64_t)(v176 + 4), v102);
              v98 = *(int **)v93;
              v95 = (int *)*((_QWORD *)v93 + 1);
            }
            else
            {
              v103 = 0;
            }
            v104 = (int *)&v103[4 * v99];
            *v104 = v94;
            v97 = v104 + 1;
            while (v95 != v98)
            {
              v105 = *--v95;
              *--v104 = v105;
            }
            *(_QWORD *)v93 = v104;
            *((_QWORD *)v93 + 1) = v97;
            *((_QWORD *)v93 + 2) = &v103[4 * v102];
            if (v98)
              operator delete(v98);
          }
          else
          {
            *v95 = v94;
            v97 = v95 + 1;
          }
          *((_QWORD *)v93 + 1) = v97;
          v106 = ++v174;
          sub_1B17F8190((uint64_t)v177, v175 * v106);
          sub_1B2212F38((uint64_t)&v162, v37, v52);
          sub_1B2212F38((uint64_t)&v162, v40, v52);
          v31 = (void **)(a1 + 30);
          v34 = v156;
          goto LABEL_130;
        }
        v46 = __p;
        v47 = (v160 - __p) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          goto LABEL_217;
        v49 = v161 - __p;
        if ((v161 - __p) >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_1B17F7E58((uint64_t)&v161, v50);
          v46 = __p;
          v41 = v160;
        }
        else
        {
          v51 = 0;
        }
        v58 = &v51[4 * v47];
        *(_DWORD *)v58 = a1[1];
        v42 = v58 + 4;
        while (v41 != v46)
        {
          v59 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v58 - 1) = v59;
          v58 -= 4;
        }
        v60 = &v51[4 * v50];
        __p = v58;
        goto LABEL_62;
      }
      v180 = *(_DWORD *)(v158 + 4 * v35);
      v43 = *(unsigned int *)(*v164 + 8 * v37);
      if ((int)v43 <= v163)
      {
        v45 = (char *)(*v165 + 4 * *(int *)(*v164 + 4 * ((2 * v37) | 1)));
      }
      else
      {
        v181[0] = &v180;
        v44 = sub_1B2213B08(&v166, &v180, (uint64_t)&unk_1B22458B0, v181);
        v45 = (char *)v44[5];
        v43 = ((unint64_t)((char *)v44[6] - v45) >> 2);
      }
      if ((int)v43 < 1)
        goto LABEL_65;
      while (1)
      {
        v53 = *(int *)v45;
        v45 += 4;
        v52 = v53;
        v54 = (char *)*v31 + 8 * v53;
        if (*v54 == v40 || v54[1] == v40)
          break;
        if (!--v43)
          goto LABEL_65;
      }
      if ((_DWORD)v52 == -1)
        goto LABEL_65;
      v180 = v52;
      LODWORD(v55) = *(_DWORD *)(*(_QWORD *)v176 + 8 * v52);
      if ((int)v55 <= v175)
      {
        v57 = *v177 + 4 * *(int *)(*(_QWORD *)v176 + 4 * (int)((2 * v52) | 1));
      }
      else
      {
        v181[0] = &v180;
        v56 = sub_1B2213B08(&v178, &v180, (uint64_t)&unk_1B22458B0, v181);
        v57 = (uint64_t)v56[5];
        v55 = ((unint64_t)v56[6] - v57) >> 2;
      }
      if (v32 == *(_DWORD *)(v57 + 4 * ((int)v55 - 1)))
      {
        v108 = v160;
        v107 = v161;
        if (v160 >= v161)
        {
          v117 = __p;
          v118 = (v160 - __p) >> 2;
          v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) >> 62)
            goto LABEL_217;
          v120 = v161 - __p;
          if ((v161 - __p) >> 1 > v119)
            v119 = v120 >> 1;
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v119;
          if (v121)
          {
            v122 = (char *)sub_1B17F7E58((uint64_t)&v161, v121);
            v117 = __p;
            v108 = v160;
          }
          else
          {
            v122 = 0;
          }
          v124 = &v122[4 * v118];
          *(_DWORD *)v124 = v52;
          v109 = v124 + 4;
          while (v108 != v117)
          {
            v125 = *((_DWORD *)v108 - 1);
            v108 -= 4;
            *((_DWORD *)v124 - 1) = v125;
            v124 -= 4;
          }
          v107 = &v122[4 * v121];
          __p = v124;
          v161 = v107;
          if (v117)
          {
            operator delete(v117);
            v107 = v161;
          }
        }
        else
        {
          *(_DWORD *)v160 = v52;
          v109 = v160 + 4;
        }
        if (v109 < v107)
        {
          *(_DWORD *)v109 = a1[1];
          v42 = v109 + 4;
          goto LABEL_64;
        }
        v46 = __p;
        v126 = (v109 - __p) >> 2;
        v127 = v126 + 1;
        if ((unint64_t)(v126 + 1) >> 62)
          goto LABEL_217;
        v128 = v107 - __p;
        if (v128 >> 1 > v127)
          v127 = v128 >> 1;
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
          v129 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v129 = v127;
        if (v129)
        {
          v130 = (char *)sub_1B17F7E58((uint64_t)&v161, v129);
          v46 = __p;
        }
        else
        {
          v130 = 0;
        }
        v131 = &v130[4 * v126];
        *(_DWORD *)v131 = a1[1];
        v42 = v131 + 4;
        while (v109 != v46)
        {
          v132 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v131 - 1) = v132;
          v131 -= 4;
        }
        v60 = &v130[4 * v129];
        __p = v131;
LABEL_62:
        v161 = v60;
        if (v46)
          operator delete(v46);
        goto LABEL_64;
      }
      if ((int)v55 >= 2)
        break;
      if (v37 == *((_DWORD *)*v31 + 2 * v52))
      {
        v110 = v160;
        if (v160 < v161)
        {
LABEL_156:
          *(_DWORD *)v110 = v52;
          v123 = v110 + 4;
LABEL_196:
          v160 = v123;
          goto LABEL_130;
        }
        v111 = __p;
        v133 = (v160 - __p) >> 2;
        v134 = v133 + 1;
        if ((unint64_t)(v133 + 1) >> 62)
LABEL_217:
          abort();
        v135 = v161 - __p;
        if ((v161 - __p) >> 1 > v134)
          v134 = v135 >> 1;
        if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v134;
        if (v115)
        {
          v116 = (char *)sub_1B17F7E58((uint64_t)&v161, v115);
          v111 = __p;
          v110 = v160;
        }
        else
        {
          v116 = 0;
        }
        v136 = &v116[4 * v133];
        *(_DWORD *)v136 = v52;
        v123 = v136 + 4;
        while (v110 != v111)
        {
          v138 = *((_DWORD *)v110 - 1);
          v110 -= 4;
          *((_DWORD *)v136 - 1) = v138;
          v136 -= 4;
        }
LABEL_194:
        __p = v136;
        v161 = &v116[4 * v115];
        if (v111)
          operator delete(v111);
        goto LABEL_196;
      }
LABEL_130:
      sub_1B2212F38((uint64_t)&v174, v52, v32);
      sub_1B2212F38((uint64_t)&v168, v37, v32);
      *(_DWORD *)(v157 + 4 * v35++) = v52;
      if (v38 == v34)
        goto LABEL_197;
    }
    v110 = v160;
    if (v160 < v161)
      goto LABEL_156;
    v111 = __p;
    v112 = (v160 - __p) >> 2;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 62)
      goto LABEL_217;
    v114 = v161 - __p;
    if ((v161 - __p) >> 1 > v113)
      v113 = v114 >> 1;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
      v115 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    if (v115)
    {
      v116 = (char *)sub_1B17F7E58((uint64_t)&v161, v115);
      v111 = __p;
      v110 = v160;
    }
    else
    {
      v116 = 0;
    }
    v136 = &v116[4 * v112];
    *(_DWORD *)v136 = v52;
    v123 = v136 + 4;
    while (v110 != v111)
    {
      v137 = *((_DWORD *)v110 - 1);
      v110 -= 4;
      *((_DWORD *)v136 - 1) = v137;
      v136 -= 4;
    }
    goto LABEL_194;
  }
LABEL_198:
  v139 = sub_1B22130E8(&v174);
  v140 = sub_1B22130E8(&v168);
  v141 = sub_1B22130E8(&v162);
  v142 = a1[5];
  if (v140 > v142)
    v142 = v140;
  if (v141 <= v142)
    v143 = v142;
  else
    v143 = v141;
  a1[4] = v139;
  a1[5] = v143;
  if (v143 < 0x10000)
  {
    v144 = a1[1];
    sub_1B17F8190((uint64_t)(a1 + 36), 2 * v144);
    sub_1B17F8160((uint64_t)(a1 + 54), v144);
    v145 = *((_QWORD *)a1 + 30);
    v146 = *((_QWORD *)a1 + 31) - v145;
    if (v144 <= v146)
    {
      v147 = a1 + 60;
      v148 = a1 + 108;
      if (v144 < v146)
        *((_QWORD *)a1 + 31) = v145 + v144;
    }
    else
    {
      v147 = a1 + 60;
      sub_1B2213A14((void **)a1 + 30, v144 - v146);
      v148 = a1 + 108;
    }
    if ((int)v144 >= 1)
      bzero(*((void **)a1 + 30), a1[1]);
    v149 = __p;
    if ((int)((unint64_t)(v160 - __p) >> 2) >= 1)
    {
      v150 = 0;
      do
      {
        v151 = *(int *)&v149[4 * v150];
        *(_BYTE *)(*v147 + v151) |= 1u;
        v152 = (int *)((char *)*v31 + 8 * v151);
        *(_WORD *)(*v148 + 2 * *v152) |= 1u;
        *(_WORD *)(*v148 + 2 * v152[1]) |= 1u;
        ++v150;
        v149 = __p;
      }
      while (v150 < (int)((unint64_t)(v160 - __p) >> 2));
    }
    sub_1B2213354((uint64_t)a1);
    sub_1B22133BC((uint64_t)a1);
  }
  if (__p)
    operator delete(__p);
  sub_1B2213BCC((uint64_t)&v166, v167[0]);
  sub_1B2213BCC((uint64_t)&v172, v173[0]);
  sub_1B2213BCC((uint64_t)&v178, v179[0]);
  return v143 < 0x10000;
}

void sub_1B2212F38(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t **v8;
  void **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  int v24;
  int v25;
  int *v26;

  v25 = a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 8 * a2);
  v7 = *(int *)(v5 + 8 * a2 + 4);
  if (v6 >= *(_DWORD *)(a1 + 4))
  {
    v26 = &v25;
    v8 = sub_1B2213B08((uint64_t **)(a1 + 24), &v25, (uint64_t)&unk_1B22458B0, &v26);
    v9 = (void **)(v8 + 5);
    v10 = *(int *)(a1 + 4);
    if (v6 <= (int)v10)
    {
      sub_1B17F8190((uint64_t)(v8 + 5), v10 + 1);
      memcpy(*v9, (const void *)(**(_QWORD **)(a1 + 16) + 4 * v7), 4 * *(int *)(a1 + 4));
      *((_DWORD *)*v9 + *(int *)(a1 + 4)) = a3;
    }
    else
    {
      v11 = v8;
      v12 = (uint64_t)(v8 + 7);
      v13 = v8[7];
      v14 = (char *)v8[6];
      if (v14 >= (char *)v13)
      {
        v16 = (char *)*v9;
        v17 = (v14 - (_BYTE *)*v9) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          abort();
        v19 = (char *)v13 - v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_1B17F7E58(v12, v20);
          v16 = (char *)v11[5];
          v14 = (char *)v11[6];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        v23 = (uint64_t *)&v21[4 * v20];
        *(_DWORD *)v22 = a3;
        v15 = (uint64_t *)(v22 + 4);
        while (v14 != v16)
        {
          v24 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        v11[5] = (uint64_t *)v22;
        v11[6] = v15;
        v11[7] = v23;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v14 = a3;
        v15 = (uint64_t *)(v14 + 4);
      }
      v11[6] = v15;
    }
  }
  else
  {
    *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * ((int)v7 + v6)) = a3;
  }
  ++*(_DWORD *)(**(_QWORD **)(a1 + 8) + 8 * v25);
}

uint64_t sub_1B22130E8(int *a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void **p_p;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v25;
  void *__p;
  void *v27;
  uint64_t v28;
  int *v29;

  v2 = (int *)**((_QWORD **)a1 + 1);
  v3 = *v2;
  LODWORD(v4) = *a1;
  if (*((_QWORD *)a1 + 5))
  {
    if ((int)v4 < 2)
    {
      v5 = 0;
      v8 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = v2 + 3;
      v7 = 1;
      do
      {
        *v6 = v3;
        v8 = a1[1];
        v4 = *a1;
        v5 |= v3 > (int)v8 * (int)v7;
        v3 += *(v6 - 1);
        ++v7;
        v6 += 2;
      }
      while (v7 < v4);
    }
    v12 = v5 | (v3 > (int)v8 * (int)v4);
    __p = 0;
    v27 = 0;
    v28 = 0;
    if (v5 & 1 | (v3 > (int)v8 * (int)v4))
    {
      p_p = &__p;
      sub_1B17F8190((uint64_t)&__p, v3);
      LODWORD(v4) = *a1;
      v8 = a1[1];
    }
    else
    {
      p_p = (void **)*((_QWORD *)a1 + 2);
    }
    v25 = 0;
    if ((int)v4 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = **((_QWORD **)a1 + 1);
        v16 = *(int *)(v15 + 8 * v14);
        v17 = *(int *)(v15 + 8 * v14 + 4);
        v18 = (char *)*p_p;
        v19 = a1[1];
        if ((int)v16 <= v19)
        {
          v20 = (uint64_t *)(**((_QWORD **)a1 + 2) + 4 * v19 * v14);
        }
        else
        {
          v29 = &v25;
          v20 = sub_1B2213B08((uint64_t **)a1 + 3, &v25, (uint64_t)&unk_1B22458B0, &v29)[5];
          if ((int)v8 <= (int)v16)
            v8 = v16;
          else
            v8 = v8;
        }
        memmove(&v18[4 * v17], v20, 4 * v16);
        v14 = v25 + 1;
        v25 = v14;
      }
      while (v14 < *a1);
    }
    v21 = *((_QWORD *)a1 + 2);
    if ((v12 & 1) != 0)
    {
      v22 = *(void **)v21;
      *(_QWORD *)v21 = __p;
      *(_QWORD *)(v21 + 8) = v27;
      v23 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v28;
      __p = v22;
      v28 = v23;
      if (!v22)
        return v8;
      goto LABEL_29;
    }
    sub_1B17F8190(*((_QWORD *)a1 + 2), v3);
    v22 = __p;
    if (__p)
    {
LABEL_29:
      v27 = v22;
      operator delete(v22);
    }
  }
  else
  {
    if ((int)v4 < 2)
    {
      v8 = *v2;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      LODWORD(v8) = *v2;
      do
      {
        v11 = v2[v9 + 2];
        memmove((void *)(**((_QWORD **)a1 + 2) + 4 * v3), (const void *)(**((_QWORD **)a1 + 2) + 4 * v2[v9 + 3]), 4 * v11);
        v2 = (int *)**((_QWORD **)a1 + 1);
        v2[v9 + 3] = v3;
        v3 += v11;
        if ((int)v8 <= (int)v11)
          v8 = v11;
        else
          v8 = v8;
        ++v10;
        v9 += 2;
      }
      while (v10 < *a1);
    }
    sub_1B17F8190(*((_QWORD *)a1 + 2), v3);
  }
  return v8;
}

uint64_t sub_1B2213354(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = (_QWORD *)result;
    for (i = 0; i != v1; ++i)
    {
      v4 = v2[54];
      if ((*(_WORD *)(v4 + 2 * i) & 1) == 0)
      {
        result = sub_1B2213678(v2, i);
        if ((result & 1) == 0)
          *(_WORD *)(v4 + 2 * i) |= 1u;
      }
    }
  }
  return result;
}

void sub_1B22133BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  __int32 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  __int16 v35;
  uint64_t j;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int32 *v47;
  uint64_t v48;
  __int32 *v49;
  int v50;
  int v51;
  uint64_t v52;

  v2 = *(unsigned int *)(a1 + 8);
  v52 = *(unsigned int *)(a1 + 4);
  sub_1B18261FC(a1 + 312, (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 2);
  sub_1B18261FC(a1 + 384, (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 2);
  sub_1B18261FC(a1 + 192, (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 2);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (unsigned int *)(*(_QWORD *)(a1 + 264) + 8 * i);
      v5 = *v4;
      if ((int)v5 >= 1)
      {
        v6 = (int)v4[1];
        v7 = (int *)(*(_QWORD *)(a1 + 288) + 4 * v6);
        v8 = (_WORD *)(*(_QWORD *)(a1 + 312) + 2 * v6);
        v9 = -1;
        do
        {
          v10 = *v7;
          if ((_DWORD)v10 == v9)
            v11 = (unsigned __int16)*(v8 - 1) + 1;
          else
            v11 = 0;
          v12 = *(_QWORD *)(a1 + 24);
          v13 = *(_QWORD *)(a1 + 48) + 4 * *(int *)(v12 + 4 * (int)((2 * v10) | 1));
          v14 = (__int32 *)(v13 + 4 * v11);
          v15 = v13 + 4 * *(int *)(v12 + 8 * v10);
          v16 = wmemchr(v14, i, (v15 - (uint64_t)v14) >> 2);
          if (v16)
            v17 = (int)v16;
          else
            v17 = v15;
          *v8++ = (v14 + ((v17 - (_DWORD)v14) & 0x3FFFC) - v13) >> 2;
          v18 = *v7++;
          v9 = v18;
          --v5;
        }
        while (v5);
      }
    }
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 360);
    v21 = *(_QWORD *)(a1 + 336);
    v22 = *(_QWORD *)(a1 + 384);
    while (1)
    {
      v23 = (unsigned int *)(v21 + 8 * v19);
      v24 = *v23;
      if ((int)v24 >= 1)
        break;
LABEL_26:
      if (*(_DWORD *)(a1 + 20) > (int)v24)
        LODWORD(v24) = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 20) = v24;
      if (++v19 == v2)
        goto LABEL_29;
    }
    v25 = 0;
    v26 = (int)v23[1];
    v27 = v20 + 4 * v26;
    v28 = v22 + 2 * v26;
    v29 = *(_QWORD *)(a1 + 120);
    while (1)
    {
      v30 = *(int *)(v27 + 4 * v25);
      v31 = (int *)(v29 + 8 * v30);
      v33 = *v31;
      v32 = v31[1];
      if (v33 != (_DWORD)v32)
        break;
      if (v25)
      {
        v34 = (_DWORD)v30 == *(_DWORD *)(v27 + 4 * v25 - 4);
        goto LABEL_20;
      }
      v35 = 0;
LABEL_23:
      *(_WORD *)(v28 + 2 * v25++) = v35;
      if (v24 == v25)
        goto LABEL_26;
    }
    v34 = v19 == v32;
LABEL_20:
    v35 = v34;
    goto LABEL_23;
  }
LABEL_29:
  if ((int)v52 >= 1)
  {
    for (j = 0; j != v52; ++j)
    {
      v37 = (unsigned int *)(*(_QWORD *)(a1 + 144) + 8 * j);
      v38 = *v37;
      if ((int)v38 >= 1)
      {
        v39 = (int)v37[1];
        v40 = (int *)(*(_QWORD *)(a1 + 168) + 4 * v39);
        v41 = (_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v39);
        v42 = -1;
        do
        {
          v43 = *v40;
          if ((_DWORD)v43 == v42)
            v44 = (unsigned __int16)*(v41 - 1) + 1;
          else
            v44 = 0;
          v45 = *(_QWORD *)(a1 + 24);
          v46 = *(_QWORD *)(a1 + 72) + 4 * *(int *)(v45 + 4 * (int)((2 * v43) | 1));
          v47 = (__int32 *)(v46 + 4 * v44);
          v48 = v46 + 4 * *(int *)(v45 + 8 * v43);
          v49 = wmemchr(v47, j, (v48 - (uint64_t)v47) >> 2);
          if (v49)
            v50 = (int)v49;
          else
            v50 = v48;
          *v41++ = (v47 + ((v50 - (_DWORD)v47) & 0x3FFFC) - v46) >> 2;
          v51 = *v40++;
          v42 = v51;
          --v38;
        }
        while (v38);
      }
    }
  }
}

uint64_t sub_1B2213678(_QWORD *a1, __int32 __c)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  void *__p;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a1[36];
  v5 = a1[33];
  v6 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
  v7 = *(int *)(v5 + v6);
  v8 = 8 * __c;
  v9 = *(int *)(v5 + v8);
  v10 = a1[42];
  v11 = *(int *)(v10 + v6);
  v12 = a1[45];
  v13 = *(int *)(v10 + v8);
  v14 = &v17;
  __p = 0;
  if ((v13 + v9) >= 0x21)
  {
    v14 = (uint64_t *)operator new(4 * (v13 + v9));
    __p = v14;
  }
  v15 = sub_1B2211144(a1, __c, v14, (int *)v14 + v9);
  if ((_DWORD)v15)
  {
    memcpy((void *)(v4 + 4 * v7), v14, 4 * v9);
    memcpy((void *)(v12 + 4 * v11), (char *)v14 + 4 * v9, 4 * v13);
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_1B22137B0(_QWORD *a1, int a2, _WORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = (_QWORD *)operator new();
  sub_1B2207764((uint64_t)v6, (uint64_t)a1);
  sub_1B2207864(v7, a3);
  sub_1B2207A00((uint64_t)v6, a2);
  sub_1B2207870(v6);
  v9 = (_QWORD *)a1[58];
  v8 = a1[59];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a1[57];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_1B17F812C((uint64_t)(a1 + 59), v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v6;
    v10 = v17 + 8;
    v20 = (char *)a1[57];
    v19 = (char *)a1[58];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)a1[57];
    }
    a1[57] = v17;
    a1[58] = v10;
    a1[59] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[58] = v10;
  return (((unint64_t)v10 - a1[57]) >> 3) - 1;
}

uint64_t sub_1B22138D4(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * a2) + 16);
}

uint64_t sub_1B22138E4(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * a2) + 8);
}

void sub_1B22138F4(uint64_t a1, int a2, int a3)
{
  sub_1B2207A08(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * a2), a3);
}

void sub_1B2213904(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1B2213934((char **)a1, a2 - v2);
  }
}

void sub_1B2213934(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 1)
  {
    a1[1] = &v6[2 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 1);
    if (v9 < 0)
      abort();
    v10 = v8 >> 1;
    v11 = v5 - v7;
    if (v11 > v9)
      v9 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)sub_1B1827A64(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v10];
    v15 = &v13[2 * v12];
    v16 = &v14[2 * a2];
    if (v6 != v7)
    {
      do
      {
        v17 = *((_WORD *)v6 - 1);
        v6 -= 2;
        *((_WORD *)v14 - 1) = v17;
        v14 -= 2;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

void sub_1B2213A14(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (v4 - v5 >= a2)
  {
    a1[1] = &v5[a2];
  }
  else
  {
    v6 = (unint64_t)*a1;
    v7 = (char *)(v5 - (_BYTE *)*a1);
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v10];
    v13 = &v7[(_QWORD)v11 + a2];
    if (v5 == (char *)v6)
    {
      v11 = &v7[(_QWORD)v11];
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (v5)
      operator delete(v5);
  }
}

uint64_t **sub_1B2213B08(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_1B181D728(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1B2213BCC(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1B2213BCC(a1, *a2);
    sub_1B2213BCC(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1B2213C1C(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24) - v5;
  *(_DWORD *)(a1 + 48) = v6 >> 2;
  if ((int)(v6 >> 2) < 1)
  {
    v27 = *(void **)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;

    v28 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

    v29 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
  else
  {
    v8 = objc_msgSend_newBufferWithBytes_length_options_(*a3, (const char *)a2, v5, v6, 0);
    v9 = *(void **)a1;
    *(_QWORD *)a1 = v8;

    v11 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v10, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40), 0);
    v12 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;

    v14 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v13, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64), 0);
    v15 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;

    v17 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v16, *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88), 0);
    v18 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v17;

    objc_msgSend_setLabel_(*(void **)a1, v19, (uint64_t)CFSTR("StencilTable Sizes"), v20);
    objc_msgSend_setLabel_(*(void **)(a1 + 8), v21, (uint64_t)CFSTR("StencilTable Offsets"), v22);
    objc_msgSend_setLabel_(*(void **)(a1 + 16), v23, (uint64_t)CFSTR("StencilTable Indices"), v24);
    objc_msgSend_setLabel_(*(void **)(a1 + 24), v25, (uint64_t)CFSTR("StencilTable Weights"), v26);
  }
  v30 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v31 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  return a1;
}

void sub_1B2213D68(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id *sub_1B2213DA8(id *a1)
{

  return a1;
}

uint64_t sub_1B2213DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v10;
  id *v11;

  v10 = operator new();
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 24) = 32;
  if (!sub_1B2213EAC(v10, a1, a2, a3, a4, a5))
  {
    v11 = sub_1B2209214((id *)v10);
    MEMORY[0x1B5E22E18](v11, 0x1080C40AA79BA9DLL);
    return 0;
  }
  return v10;
}

BOOL sub_1B2213EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  id v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  _BOOL8 v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  id v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  id v62;
  id v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  id v74;
  uint64_t *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  id v100;
  id v101;
  id v102;
  void *__p[2];
  unsigned __int8 v104;
  _QWORD v105[2];
  _QWORD v106[11];
  char v107;
  uint64_t v108;
  _QWORD v109[21];
  _QWORD v110[23];

  v110[21] = *MEMORY[0x1E0C80C00];
  v12 = objc_alloc_init(MEMORY[0x1E0CC6A68]);
  v13 = sub_1B195DDD4();
  objc_msgSend_setLanguageVersion_(v12, v14, v13, v15);
  objc_msgSend_setPreprocessorMacros_(v12, v16, 0, v17);
  objc_msgSend_setAdditionalCompilerArguments_(v12, v18, (uint64_t)CFSTR(" -w "), v19);
  v23 = *(int *)(a4 + 4) > 0 || *(_DWORD *)(a5 + 4) > 0;
  if (v23)
    printf("Using OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES");
  v109[0] = CFSTR("LENGTH");
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v20, *(unsigned int *)(a2 + 4), v21);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v110[0] = v24;
  v109[1] = CFSTR("SRC_STRIDE");
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a2 + 8), v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v110[1] = v27;
  v109[2] = CFSTR("DST_STRIDE");
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v28, *(unsigned int *)(a3 + 8), v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v110[2] = v30;
  v109[3] = CFSTR("WORK_GROUP_SIZE");
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 24), v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v110[3] = v33;
  v109[4] = CFSTR("OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v34, v23, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v109[5] = CFSTR("PARAMETER_BUFFER_INDEX");
  v109[6] = CFSTR("SIZES_BUFFER_INDEX");
  v110[6] = &unk_1E6478640;
  v110[7] = &unk_1E6478658;
  v109[7] = CFSTR("OFFSETS_BUFFER_INDEX");
  v109[8] = CFSTR("INDICES_BUFFER_INDEX");
  v110[8] = &unk_1E6478670;
  v110[9] = &unk_1E6478688;
  v109[9] = CFSTR("WEIGHTS_BUFFER_INDEX");
  v109[10] = CFSTR("SRC_VERTEX_BUFFER_INDEX");
  v110[10] = &unk_1E64786A0;
  v110[11] = &unk_1E64786B8;
  v109[11] = CFSTR("DST_VERTEX_BUFFER_INDEX");
  v109[12] = CFSTR("DU_WEIGHTS_BUFFER_INDEX");
  v110[12] = &unk_1E64786D0;
  v110[13] = &unk_1E64786E8;
  v109[13] = CFSTR("DV_WEIGHTS_BUFFER_INDEX");
  v109[14] = CFSTR("DU_DERIVATIVE_BUFFER_INDEX");
  v110[14] = &unk_1E6478700;
  v110[15] = &unk_1E6478718;
  v109[15] = CFSTR("DV_DERIVATIVE_BUFFER_INDEX");
  v109[16] = CFSTR("PATCH_ARRAYS_BUFFER_INDEX");
  v110[16] = &unk_1E6478730;
  v110[17] = &unk_1E6478748;
  v109[17] = CFSTR("PATCH_COORDS_BUFFER_INDEX");
  v109[18] = CFSTR("PATCH_INDICES_BUFFER_INDEX");
  v110[18] = &unk_1E6478760;
  v110[19] = &unk_1E6478778;
  v110[4] = v36;
  v110[5] = &unk_1E6478628;
  v109[19] = CFSTR("PATCH_PARAMS_BUFFER_INDEX");
  v109[20] = CFSTR("CFX_OPTIMIZE_OPENSUBDIV_STORAGE");
  v110[20] = &unk_1E6478628;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v37, (uint64_t)v110, (uint64_t)v109, 21);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_setPreprocessorMacros_(v12, v39, (uint64_t)v38, v40);
  sub_1B195B954((uint64_t)v105);
  sub_1B221E018();
  if ((v104 & 0x80u) == 0)
    v41 = __p;
  else
    v41 = (void **)__p[0];
  if ((v104 & 0x80u) == 0)
    v42 = v104;
  else
    v42 = (uint64_t)__p[1];
  sub_1B1960B04(v106, (uint64_t)v41, v42);
  if ((char)v104 < 0)
    operator delete(__p[0]);
  sub_1B1960B04(v106, (uint64_t)aLine0OsdMtlcom, 9645);
  v43 = objc_alloc(MEMORY[0x1E0CB3940]);
  std::stringbuf::str();
  if ((v104 & 0x80u) == 0)
    v46 = objc_msgSend_initWithUTF8String_(v43, v44, (uint64_t)__p, v45);
  else
    v46 = objc_msgSend_initWithUTF8String_(v43, v44, (uint64_t)__p[0], v45);
  v48 = (void *)v46;
  if ((char)v104 < 0)
    operator delete(__p[0]);
  v49 = *a6;
  v102 = 0;
  v50 = (id)objc_msgSend_newLibraryWithSource_options_error_(v49, v47, (uint64_t)v48, (uint64_t)v12, &v102);
  v51 = v102;
  v52 = *(void **)a1;
  *(_QWORD *)a1 = v50;

  if (!*(_QWORD *)a1)
  {
    if (v51)
    {
      objc_msgSend_localizedDescription(v51, v53, v54, v55);
      v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      LOBYTE(v93) = objc_msgSend_UTF8String(v50, v90, v91, v92);
    }
    else
    {
      v93 = "";
    }
    sub_1B221BA4C(4, (uint64_t)"Error compiling MTL Shader: %s\n", v54, v55, v56, v57, v58, v59, (char)v93);
    v85 = 0;
    if (!v51)
      goto LABEL_44;
    goto LABEL_43;
  }
  v50 = (id)objc_msgSend_newFunctionWithName_(*(void **)a1, v53, (uint64_t)CFSTR("eval_stencils"), v55);
  v60 = *a6;
  v101 = v51;
  v62 = (id)objc_msgSend_newComputePipelineStateWithFunction_error_(v60, v61, (uint64_t)v50, (uint64_t)&v101);
  v63 = v101;

  v64 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v62;

  if (*(_QWORD *)(a1 + 8))
  {
    v62 = (id)objc_msgSend_newFunctionWithName_(*(void **)a1, v65, (uint64_t)CFSTR("eval_patches"), v67);
    v72 = *a6;
    v100 = v63;
    v74 = (id)objc_msgSend_newComputePipelineStateWithFunction_error_(v72, v73, (uint64_t)v62, (uint64_t)&v100);
    v51 = v100;

    v76 = *(void **)(a1 + 16);
    v75 = (uint64_t *)(a1 + 16);
    *v75 = (uint64_t)v74;

    v84 = *v75;
    v85 = *v75 != 0;
    if (!v84)
    {
      if (v51)
      {
        objc_msgSend_localizedDescription(v51, v77, v78, v79);
        v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        LOBYTE(v89) = objc_msgSend_UTF8String(v74, v86, v87, v88);
      }
      else
      {
        v89 = "";
      }
      sub_1B221BA4C(4, (uint64_t)"Error compiling MTL Pipeline eval_patches:  %s\n", v78, v79, v80, v81, v82, v83, (char)v89);
      if (v51)

      v85 = 0;
    }
    goto LABEL_42;
  }
  if (v63)
  {
    objc_msgSend_localizedDescription(v63, v65, v66, v67);
    v62 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    LOBYTE(v97) = objc_msgSend_UTF8String(v62, v94, v95, v96);
  }
  else
  {
    v97 = "";
  }
  sub_1B221BA4C(4, (uint64_t)"Error compiling MTL Pipeline eval_stencils: %s\n", v66, v67, v68, v69, v70, v71, (char)v97);
  v85 = 0;
  if (v63)
  {
    v51 = v63;
LABEL_42:

    goto LABEL_43;
  }
  v51 = 0;
LABEL_43:

LABEL_44:
  v105[0] = *MEMORY[0x1E0DE4F50];
  v98 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v105 + *(_QWORD *)(v105[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v106[0] = v98;
  v106[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v107 < 0)
    operator delete((void *)v106[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E22DDC](&v108);

  return v85;
}

void sub_1B22144E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  sub_1B195BA80((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_1B221460C(uint64_t a1, void *a2, _DWORD *a3, void *a4, int *a5, void *a6, uint64_t a7, void *a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, int a16, int a17, uint64_t a18)
{
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  id v63;
  uint64_t v64;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  int64x2_t v77;
  _DWORD v78[4];
  __int128 v79;
  __int128 v80;

  v70 = a2;
  v22 = a4;
  v69 = a6;
  v68 = a8;
  v73 = a10;
  v23 = a11;
  v71 = a12;
  v72 = a13;
  v24 = a14;
  v25 = a15;
  v26 = *(_QWORD *)(a1 + 8);
  if (v26 && a17 - a16 >= 1)
  {
    v27 = a1;
    v64 = (uint64_t)v23;
    v63 = *(id *)a18;
    v28 = *(id *)(a18 + 8);
    v78[0] = a16;
    v78[1] = a17;
    v32 = *a5;
    v78[2] = *a3;
    v78[3] = v32;
    *(_QWORD *)&v33 = *(_QWORD *)a7;
    DWORD2(v33) = *(_DWORD *)(a7 + 8);
    *(_QWORD *)&v34 = *(_QWORD *)a9;
    DWORD2(v34) = *(_DWORD *)(a9 + 8);
    v79 = v33;
    v80 = v34;
    v35 = *(void **)(a18 + 16);
    v36 = *(_QWORD *)(a18 + 24);
    if (v36)
    {
      v37 = v28;
      v38 = v35;
      v39 = *(id *)(a18 + 24);
      v40 = 0;
      objc_msgSend_setBytes_length_atIndex_(v39, v41, (uint64_t)v78, 48, 0);
    }
    else
    {
      v40 = v35 == 0;
      v37 = v28;
      if (v35)
      {
        v38 = v35;
      }
      else
      {
        objc_msgSend_commandBuffer(v28, v29, v30, v31);
        v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend_computeCommandEncoder(v38, v43, v44, v45);
      v39 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setBytes_length_atIndex_(v39, v46, (uint64_t)v78, 48, 0);
    }
    objc_msgSend_setBuffer_offset_atIndex_(v39, v42, (uint64_t)v73, 0, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v47, (uint64_t)v72, 0, 4);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v48, v64, 0, 2);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v49, (uint64_t)v71, 0, 3);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v50, (uint64_t)v70, 0, 6);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v51, (uint64_t)v22, 0, 5);
    if (v24 && v25)
    {
      objc_msgSend_setBuffer_offset_atIndex_(v39, v52, (uint64_t)v24, 0, 7);
      objc_msgSend_setBuffer_offset_atIndex_(v39, v53, (uint64_t)v25, 0, 8);
    }
    objc_msgSend_setBuffer_offset_atIndex_(v39, v52, (uint64_t)v69, 0, 9);
    objc_msgSend_setBuffer_offset_atIndex_(v39, v54, (uint64_t)v68, 0, 10);
    objc_msgSend_setComputePipelineState_(v39, v55, *(_QWORD *)(v27 + 8), v56);
    v57 = *(int *)(v27 + 24);
    v76 = (a17 - a16 + (int)v57 - 1) / (int)v57;
    v77 = vdupq_n_s64(1uLL);
    v74 = v57;
    v75 = v77;
    objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v39, v58, (uint64_t)&v76, (uint64_t)&v74);
    if (!v36)
      objc_msgSend_endEncoding(v39, v59, v60, v61);
    if (v40)
      objc_msgSend_commit(v38, v59, v60, v61);

    v23 = (id)v64;
  }

  return v26 != 0;
}

void sub_1B221494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_1B22149C8(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  int *v29;
  uint64_t v30;

  v3 = (unsigned __int16)a2;
  v4 = HIDWORD(a2);
  v5 = a2 & 3;
  v6 = **(_QWORD **)(a1 + 88);
  if (v5 == 2)
    v7 = sub_1B22138D4(v6, SHIDWORD(a2));
  else
    v7 = *(unsigned int *)(v6 + 8);
  v8 = (v3 >> 6) & 0xF;
  v9 = *(unsigned __int8 *)(a1 + 8);
  if (((v9 >> 2) & 0xF) >= v8)
    v10 = (v3 >> 6) & 0xF;
  else
    v10 = (v9 >> 2) & 0xF;
  if (!(v3 & 8 | v10))
  {
    v11 = operator new();
    *(_QWORD *)v11 = &off_1E63CDED8;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_DWORD *)(v11 + 8) = v7;
    return v11;
  }
  sub_1B22099A4(&v30, v7, 1, 1);
  v29 = (int *)a1;
  v27 = &v30;
  v28 = 0;
  v25 = &v30;
  v26 = v7;
  if (v10)
  {
    v12 = 0;
    if (((v9 >> 2) & 0xF) < v8)
      v8 = (v9 >> 2) & 0xF;
    v13 = 24;
    while (1)
    {
      v14 = v12 + 1;
      if (v5 == 1)
        break;
      if (!v5)
      {
        sub_1B2214C08((uint64_t *)&v29, v14, (uint64_t)&v27, (uint64_t)&v25);
        if ((v3 & 0x20) == 0)
          goto LABEL_21;
        goto LABEL_20;
      }
      sub_1B221504C(&v29, v14, (uint64_t *)&v27, (uint64_t *)&v25, v4);
      if ((v3 & 0x20) != 0)
        goto LABEL_20;
LABEL_21:
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + v13);
      if (v5 == 2)
        v16 = sub_1B22138D4(v15, v4);
      else
        v16 = *(_DWORD *)(v15 + 8);
      v17 = v26 + v16;
      v26 += v16;
      if ((v3 & 0x20) == 0)
        sub_1B2209A74((uint64_t)&v30, v17);
      ++v12;
      v13 += 24;
      if (v8 == v12)
      {
        v18 = v28;
        goto LABEL_29;
      }
    }
    sub_1B2214E44((uint64_t)&v29, v14, (uint64_t *)&v27, (uint64_t *)&v25);
    if ((v3 & 0x20) == 0)
      goto LABEL_21;
LABEL_20:
    v27 = v25;
    v28 = v26;
    goto LABEL_21;
  }
  v18 = 0;
LABEL_29:
  if ((v3 & 0x10) != 0)
    v18 = v7;
  v19 = v18;
  v11 = operator new();
  v20 = sub_1B2209A80(&v30);
  v21 = sub_1B2209A8C(&v30);
  v22 = sub_1B2209A98(&v30);
  v23 = sub_1B2209AA4(&v30);
  sub_1B220990C(v11, v7, v20, v21, v22, v23, (v3 >> 3) & 1, v19);
  sub_1B2209A44(&v30);
  return v11;
}

void sub_1B2214C08(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  void *__p;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)*a1;
  if (v8)
  {
    if (v8 == 2)
    {
      sub_1B221559C((uint64_t)a1, a2, a3, a4);
      sub_1B2215CD8(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
      sub_1B2215FA4(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    }
    else if (v8 == 1)
    {
      sub_1B221559C((uint64_t)a1, a2, a3, a4);
      sub_1B221573C(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
      sub_1B2215A08(a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    }
  }
  else
  {
    sub_1B221559C((uint64_t)a1, a2, a3, a4);
    sub_1B2216274((uint64_t)a1, a2, (uint64_t *)a3, (uint64_t *)a4);
    v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * (a2 - 1));
    v11 = *(_QWORD *)(v10 + 8);
    v12 = 2 * *(_DWORD *)(v11 + 20);
    v20 = &v23;
    v21 = v12;
    v22 = 32;
    __p = 0;
    if (v12 >= 0x21)
    {
      v9 = operator new(4 * v12);
      __p = v9;
      v20 = (uint64_t *)v9;
      v22 = v12;
    }
    v13 = *(_DWORD *)(v11 + 8);
    if (v13 >= 1)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v10 + 240) + 4 * i);
        if (v15 != -1)
        {
          v16 = *(_DWORD *)(a4 + 8);
          v19[0] = *(_QWORD *)a4;
          v19[1] = (v16 + v15);
          v17 = (i + *(_DWORD *)(a3 + 8));
          v18[0] = *(_QWORD *)a3;
          v18[1] = v17;
          sub_1B2209AB0((uint64_t)v19, (uint64_t)v18, 1.0);
          v13 = *(_DWORD *)(v11 + 8);
        }
      }
      v9 = __p;
    }
    operator delete(v9);
  }
}

void sub_1B2214E44(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  int *v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t j;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v7 = *(_QWORD *)(v6 + 8);
  if (*(int *)(v6 + 52) >= 1)
  {
    v8 = *(_DWORD *)v7;
    if (*(int *)v7 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(_DWORD *)(*(_QWORD *)(v6 + 168) + 4 * v9);
        if (v10 != -1)
        {
          v11 = (unsigned int *)(*(_QWORD *)(v7 + 24) + 8 * v9);
          v12 = *v11;
          if ((int)v12 >= 1)
          {
            v13 = (int *)(*(_QWORD *)(v7 + 48) + 4 * (int)v11[1]);
            v14 = 1.0 / (float)(int)v12;
            do
            {
              v15 = (*((_DWORD *)a4 + 2) + v10);
              v34 = *a4;
              v35 = v15;
              v16 = *v13++;
              v17 = (*((_DWORD *)a3 + 2) + v16);
              v32 = *a3;
              v33 = v17;
              sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, v14);
              --v12;
            }
            while (v12);
            v8 = *(_DWORD *)v7;
          }
        }
        ++v9;
      }
      while (v9 < v8);
    }
  }
  v18 = *(_DWORD *)(v7 + 4);
  if (v18 >= 1)
  {
    v19 = 0;
    for (i = 0; i < v18; ++i)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(v6 + 216) + 4 * i);
      if (v21 != -1)
      {
        v22 = (_DWORD *)(*(_QWORD *)(v7 + 120) + v19);
        v23 = (*((_DWORD *)a4 + 2) + v21);
        v34 = *a4;
        v35 = v23;
        v24 = (*((_DWORD *)a3 + 2) + *v22);
        v32 = *a3;
        v33 = v24;
        sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
        v25 = (*((_DWORD *)a4 + 2) + v21);
        v34 = *a4;
        v35 = v25;
        v26 = (*((_DWORD *)a3 + 2) + v22[1]);
        v32 = *a3;
        v33 = v26;
        sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
        v18 = *(_DWORD *)(v7 + 4);
      }
      v19 += 8;
    }
  }
  v27 = *(_DWORD *)(v7 + 8);
  if (v27 >= 1)
  {
    for (j = 0; j < v27; ++j)
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v6 + 240) + 4 * j);
      if (v29 != -1)
      {
        v30 = *((_DWORD *)a4 + 2);
        v34 = *a4;
        v35 = (v30 + v29);
        v31 = (j + *((_DWORD *)a3 + 2));
        v32 = *a3;
        v33 = v31;
        sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 1.0);
        v27 = *(_DWORD *)(v7 + 8);
      }
    }
  }
}

void sub_1B221504C(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B22163E4((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
      sub_1B2216FD0((uint64_t)a1, a2, a3, a4, a5);
      sub_1B221740C((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B22163E4((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
      sub_1B22165AC((uint64_t)a1, a2, a3, a4, a5);
      sub_1B22169E8((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    }
  }
  else
  {
    sub_1B22163E4((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, a5);
    sub_1B22179F4((uint64_t)a1, a2, a3, a4, a5);
    sub_1B2217C74((uint64_t)a1, a2, a3, a4, a5);
  }
}

uint64_t sub_1B22151AC(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  return sub_1B22151B8(a1, a2, a3, -1, a4);
}

uint64_t sub_1B22151B8(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int *v61[3];
  uint64_t *v62;
  int v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;

  v5 = 0;
  if (!a2 || !a3)
    return v5;
  if (((a3[3] - a3[2]) & 0x3FFFFFFFCLL) == 0)
    return 0;
  v11 = **(_QWORD **)(a1 + 88);
  if (a4 < 0)
    v12 = *(_DWORD *)(v11 + 8);
  else
    v12 = sub_1B22138D4(v11, a4);
  v13 = *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  if (a4 < 0)
    v16 = *(_DWORD *)(a1 + 20);
  else
    v16 = sub_1B2222DB0(a1, a4);
  v59 = v13 >> 2;
  if (v16 != v59)
  {
    v17 = v12;
    if (v16 - v12 == (v13 >> 2))
      goto LABEL_13;
    return 0;
  }
  v17 = 0;
LABEL_13:
  v57 = v14 - v15;
  v58 = v13;
  v54 = (unint64_t)(v14 - v15) >> 2;
  v18 = (a3[3] - a3[2]) >> 2;
  v56 = v12;
  sub_1B22099A4(&v66, v12, 0, a5);
  v64 = &v66;
  v65 = 0;
  v62 = &v66;
  v19 = v18;
  v63 = 0;
  v55 = v18;
  if ((int)v18 < 1)
  {
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v60 = v19;
    do
    {
      v22 = *(int *)(a3[5] + 4 * v20);
      v23 = a3[2];
      v24 = a3[8];
      v25 = a3[11];
      v64 = &v66;
      v65 = v20;
      if (*(int *)(v23 + 4 * v20) >= 1)
      {
        v26 = 0;
        v27 = v24 + 4 * v22;
        v28 = v25 + 4 * v22;
        do
        {
          v29 = *(float *)(v28 + 4 * v26);
          if (v29 != 0.0)
          {
            v30 = *(_DWORD *)(v27 + 4 * v26);
            if (a5)
            {
              v31 = v30 - v17;
              v32 = *(int *)(*(_QWORD *)(a2 + 40) + 4 * v31);
              v33 = (unsigned int *)(*(_QWORD *)(a2 + 64) + 4 * v32);
              v34 = (unsigned int *)(*(_QWORD *)(a2 + 88) + 4 * v32);
              v61[0] = (unsigned int *)(*(_QWORD *)(a2 + 16) + 4 * v31);
              v61[1] = v33;
              v61[2] = v34;
              sub_1B2209BA4((uint64_t)&v64, v61, v29);
            }
            else
            {
              v62 = &v66;
              v63 = v30 + v17;
              sub_1B2209AB0((uint64_t)&v64, (uint64_t)&v62, v29);
            }
          }
          ++v26;
        }
        while (v26 < *(int *)(v23 + 4 * v20));
      }
      v21 += sub_1B2209A48((uint64_t)&v66, v20++);
      v19 = v60;
    }
    while (v20 != v60);
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E63CDED8;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 8) = v56;
  sub_1B17F8190(v5 + 16, v55 + v59);
  sub_1B17F8190(v5 + 64, v21 + (int)v54);
  sub_1B17F8160(v5 + 88, v21 + (int)v54);
  v35 = *(char **)(v5 + 16);
  v36 = *(char **)(v5 + 64);
  v37 = *(char **)(v5 + 88);
  v38 = (int)(v58 >> 2);
  memcpy(v35, *(const void **)(a2 + 16), 4 * v38);
  memcpy(v36, *(const void **)(a2 + 64), v57 << 30 >> 30);
  memcpy(v37, *(const void **)(a2 + 88), v57 << 30 >> 30);
  if (v55 >= 1)
  {
    v39 = 0;
    v40 = &v37[v57 << 30 >> 30];
    v41 = &v36[v57 << 30 >> 30];
    v42 = (int *)&v35[4 * v38];
    do
    {
      v43 = sub_1B2209A48((uint64_t)&v66, v39);
      v44 = (_QWORD *)sub_1B2209A80(&v66);
      if (v43 >= 1)
      {
        v45 = v43;
        v46 = 4 * *(int *)(*v44 + 4 * v39);
        do
        {
          *(_DWORD *)v41 = *(_DWORD *)(*(_QWORD *)sub_1B2209A98(&v66) + v46);
          v41 += 4;
          *(_DWORD *)v40 = *(_DWORD *)(*(_QWORD *)sub_1B2209AA4(&v66) + v46);
          v40 += 4;
          v46 += 4;
          --v45;
        }
        while (v45);
      }
      *v42++ = v43;
      ++v39;
    }
    while (v39 != v19);
  }
  sub_1B17F8190(v5 + 40, (int)((uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 2));
  v47 = *(int **)(v5 + 16);
  v48 = *(_QWORD *)(v5 + 24) - (_QWORD)v47;
  if ((int)(v48 >> 2) >= 1)
  {
    v49 = 0;
    v50 = *(_DWORD **)(v5 + 40);
    v51 = (v48 >> 2);
    do
    {
      *v50++ = v49;
      v52 = *v47++;
      v49 += v52;
      --v51;
    }
    while (v51);
  }
  sub_1B2209A44(&v66);
  return v5;
}

void sub_1B221559C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];
  float *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    v7 = 0;
    v8 = *(_QWORD *)(v4 + 8);
    v9 = *(unsigned int *)(v8 + 20);
    v24 = (float *)&v27;
    v25 = v9;
    v26 = 16;
    __p = 0;
    if (v9 >= 0x11)
    {
      v7 = operator new(4 * v9);
      __p = v7;
      v24 = (float *)v7;
      v26 = v9;
    }
    v10 = *(_DWORD *)v8;
    if (*(int *)v8 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v4 + 168) + 4 * v11);
        if (v12 != -1)
        {
          v13 = (unsigned int *)(*(_QWORD *)(v8 + 24) + 8 * v11);
          v14 = *v13;
          if ((int)v14 >= 1)
          {
            v15 = *(_QWORD *)(v8 + 48) + 4 * (int)v13[1];
            v16 = v24;
            v17 = v14;
            do
            {
              *v16++ = 1.0 / (float)(int)v14;
              --v17;
            }
            while (v17);
            v18 = 0;
            v19 = 4 * v14;
            do
            {
              v20 = (*(_DWORD *)(a4 + 8) + v12);
              v23[0] = *(_QWORD *)a4;
              v23[1] = v20;
              v21 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)(v15 + v18));
              v22[0] = *(_QWORD *)a3;
              v22[1] = v21;
              sub_1B2209AB0((uint64_t)v23, (uint64_t)v22, v24[v18 / 4]);
              v18 += 4;
            }
            while (v19 != v18);
            v10 = *(_DWORD *)v8;
          }
        }
        ++v11;
      }
      while (v11 < v10);
      v7 = __p;
    }
    operator delete(v7);
  }
}

void sub_1B221573C(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;
  int v45;
  int v46;
  float *v47;
  int v48;
  int v49;
  uint64_t v50;
  void *__p;
  float v52[2];
  uint64_t v53;

  v7 = 0;
  v53 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = v9[1];
  v38 = v9[2];
  v46 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v47 = (float *)&v50;
  v48 = v11;
  v49 = 8;
  v44 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v47 = (float *)v7;
    v49 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(v9[27] + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v43[0] = v52;
        v43[1] = 0;
        v43[2] = v47;
        memset(&v43[3], 0, 13);
        v45 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        sub_1B192B4F4(&v46, (int *)&v44, (uint64_t)v43, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v21 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v21;
        v22 = (*((_DWORD *)a3 + 2) + *v15);
        v39 = *a3;
        v40 = v22;
        sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v52[0]);
        v23 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v23;
        v24 = (*((_DWORD *)a3 + 2) + v15[1]);
        v39 = *a3;
        v40 = v24;
        sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v52[1]);
        if (SLODWORD(v43[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            v27 = *(int *)(v26 + 4 * v25);
            if (BYTE4(v43[4]))
            {
              v28 = *(_DWORD *)(v9[21] + 4 * v27);
              v29 = *a4;
              v30 = *((_DWORD *)a4 + 2);
              v41 = *a4;
              v42 = (v30 + v14);
            }
            else
            {
              v31 = 0;
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * (_DWORD)v27 + 4);
              v34 = *(_DWORD *)(v32 + 8 * v27);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v31++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v31 + 1 < v34)
                v34 = 0;
              v28 = *(_DWORD *)(v36 + 4 * ((int)v31 - v34 + 1));
              v37 = (*((_DWORD *)a4 + 2) + v14);
              v41 = *a4;
              v42 = v37;
              v29 = *a3;
              v30 = *((_DWORD *)a3 + 2);
            }
            v39 = v29;
            v40 = (v30 + v28);
            sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v47[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void sub_1B2215A08(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  float v46;
  _QWORD v47[2];
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  void *__p;
  uint64_t v58;

  v7 = 0;
  v58 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v52 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v53 = &v56;
  v54 = v12;
  v55 = 32;
  v47[0] = v11;
  v47[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v53 = (uint64_t *)v7;
    v55 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v39 = *(_QWORD *)(v11 + 360);
        v16 = *(_QWORD *)(v11 + 336);
        v17 = (8 * i) | 4;
        v38 = *(int *)(v16 + v17);
        v18 = *(int *)(v16 + 8 * i);
        v19 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v19 + v17);
        v20 = *(unsigned int *)(v19 + 8 * i);
        v46 = 0.0;
        v21 = v53;
        v40 = v18;
        v22 = (_DWORD *)v53 + v18;
        v45[0] = &v46;
        v45[1] = v53;
        v45[2] = v22;
        memset(&v45[3], 0, 13);
        v48 = i;
        v49 = v15;
        v50 = *(_DWORD *)(*(_QWORD *)(v47[0] + 336) + 8 * i);
        v51 = *(_DWORD *)(*(_QWORD *)(v47[0] + 264) + 8 * i);
        v23 = *(_QWORD *)(v11 + 288);
        sub_1B192B8C0(&v52, (uint64_t)v47, (uint64_t)v45, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        if (SLODWORD(v45[4]) >= 1 && (int)v20 >= 1)
        {
          v24 = (int *)(v23 + 4 * v37);
          do
          {
            v25 = *v24++;
            v26 = *(_DWORD *)(v9[21] + 4 * v25);
            v27 = *((_DWORD *)a4 + 2);
            v43 = *a4;
            v44 = (v27 + v15);
            v41 = v43;
            v42 = (v27 + v26);
            LODWORD(v25) = *v22++;
            sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, *(float *)&v25);
            --v20;
          }
          while (v20);
        }
        if (SHIDWORD(v45[3]) >= 1)
        {
          v28 = v40;
          if (v40 >= 1)
          {
            v29 = (int *)(v39 + 4 * v38);
            do
            {
              v30 = *v29++;
              v31 = *(_DWORD *)(*(_QWORD *)(v11 + 120)
                              + 8 * v30
                              + 4 * (i == *(_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v30)));
              v32 = (*((_DWORD *)a4 + 2) + v15);
              v43 = *a4;
              v44 = v32;
              v33 = (*((_DWORD *)a3 + 2) + v31);
              v41 = *a3;
              v42 = v33;
              LODWORD(v30) = *(_DWORD *)v21;
              v21 = (uint64_t *)((char *)v21 + 4);
              sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, *(float *)&v30);
              --v28;
            }
            while (v28);
          }
        }
        v34 = (*((_DWORD *)a4 + 2) + v15);
        v43 = *a4;
        v44 = v34;
        v35 = (*((_DWORD *)a3 + 2) + i);
        v41 = *a3;
        v42 = v35;
        sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, v46);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void sub_1B2215CD8(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;
  int v45;
  int v46;
  float *v47;
  int v48;
  int v49;
  uint64_t v50;
  void *__p;
  float v52[2];
  uint64_t v53;

  v7 = 0;
  v53 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = v9[1];
  v38 = v9[2];
  v46 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v47 = (float *)&v50;
  v48 = v11;
  v49 = 8;
  v44 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v47 = (float *)v7;
    v49 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(v9[27] + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v43[0] = v52;
        v43[1] = 0;
        v43[2] = v47;
        memset(&v43[3], 0, 13);
        v45 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        sub_1B192BFA0(&v46, (int *)&v44, (uint64_t)v43, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v21 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v21;
        v22 = (*((_DWORD *)a3 + 2) + *v15);
        v39 = *a3;
        v40 = v22;
        sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v52[0]);
        v23 = (*((_DWORD *)a4 + 2) + v14);
        v41 = *a4;
        v42 = v23;
        v24 = (*((_DWORD *)a3 + 2) + v15[1]);
        v39 = *a3;
        v40 = v24;
        sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v52[1]);
        if (SLODWORD(v43[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            v27 = *(int *)(v26 + 4 * v25);
            if (BYTE4(v43[4]))
            {
              v28 = *(_DWORD *)(v9[21] + 4 * v27);
              v29 = *a4;
              v30 = *((_DWORD *)a4 + 2);
              v41 = *a4;
              v42 = (v30 + v14);
            }
            else
            {
              v31 = 0;
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * (_DWORD)v27 + 4);
              v34 = *(_DWORD *)(v32 + 8 * v27);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v31++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v31 + 1 < v34)
                v34 = 0;
              v28 = *(_DWORD *)(v36 + 4 * ((int)v31 - v34 + 1));
              v37 = (*((_DWORD *)a4 + 2) + v14);
              v41 = *a4;
              v42 = v37;
              v29 = *a3;
              v30 = *((_DWORD *)a3 + 2);
            }
            v39 = v29;
            v40 = (v30 + v28);
            sub_1B2209AB0((uint64_t)&v41, (uint64_t)&v39, v47[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void sub_1B2215FA4(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  float v46;
  _QWORD v47[2];
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  void *__p;
  uint64_t v58;

  v7 = 0;
  v58 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v52 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v53 = &v56;
  v54 = v12;
  v55 = 32;
  v47[0] = v11;
  v47[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v53 = (uint64_t *)v7;
    v55 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v39 = *(_QWORD *)(v11 + 360);
        v16 = *(_QWORD *)(v11 + 336);
        v17 = (8 * i) | 4;
        v38 = *(int *)(v16 + v17);
        v18 = *(int *)(v16 + 8 * i);
        v19 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v19 + v17);
        v20 = *(unsigned int *)(v19 + 8 * i);
        v46 = 0.0;
        v21 = v53;
        v40 = v18;
        v22 = (_DWORD *)v53 + v18;
        v45[0] = &v46;
        v45[1] = v53;
        v45[2] = v22;
        memset(&v45[3], 0, 13);
        v48 = i;
        v49 = v15;
        v50 = *(_DWORD *)(*(_QWORD *)(v47[0] + 336) + 8 * i);
        v51 = *(_DWORD *)(*(_QWORD *)(v47[0] + 264) + 8 * i);
        v23 = *(_QWORD *)(v11 + 288);
        sub_1B192C184(&v52, (uint64_t)v47, (uint64_t)v45, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        if (SLODWORD(v45[4]) >= 1 && (int)v20 >= 1)
        {
          v24 = (int *)(v23 + 4 * v37);
          do
          {
            v25 = *v24++;
            v26 = *(_DWORD *)(v9[21] + 4 * v25);
            v27 = *((_DWORD *)a4 + 2);
            v43 = *a4;
            v44 = (v27 + v15);
            v41 = v43;
            v42 = (v27 + v26);
            LODWORD(v25) = *v22++;
            sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, *(float *)&v25);
            --v20;
          }
          while (v20);
        }
        if (SHIDWORD(v45[3]) >= 1)
        {
          v28 = v40;
          if (v40 >= 1)
          {
            v29 = (int *)(v39 + 4 * v38);
            do
            {
              v30 = *v29++;
              v31 = *(_DWORD *)(*(_QWORD *)(v11 + 120)
                              + 8 * v30
                              + 4 * (i == *(_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v30)));
              v32 = (*((_DWORD *)a4 + 2) + v15);
              v43 = *a4;
              v44 = v32;
              v33 = (*((_DWORD *)a3 + 2) + v31);
              v41 = *a3;
              v42 = v33;
              LODWORD(v30) = *(_DWORD *)v21;
              v21 = (uint64_t *)((char *)v21 + 4);
              sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, *(float *)&v30);
              --v28;
            }
            while (v28);
          }
        }
        v34 = (*((_DWORD *)a4 + 2) + v15);
        v43 = *a4;
        v44 = v34;
        v35 = (*((_DWORD *)a3 + 2) + i);
        v41 = *a3;
        v42 = v35;
        sub_1B2209AB0((uint64_t)&v43, (uint64_t)&v41, v46);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void sub_1B2216274(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;

  v7 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(unsigned int *)(v9 + 16);
  v24 = &v27;
  v25 = v10;
  v26 = 8;
  __p = 0;
  if (v10 >= 9)
  {
    v7 = operator new(4 * v10);
    __p = v7;
    v24 = (uint64_t *)v7;
    v26 = v10;
  }
  v11 = *(_DWORD *)(v9 + 4);
  if (v11 >= 1)
  {
    v12 = 0;
    for (i = 0; i < v11; ++i)
    {
      v14 = *(_DWORD *)(*(_QWORD *)(v8 + 216) + 4 * i);
      if (v14 != -1)
      {
        v15 = (_DWORD *)(*(_QWORD *)(v9 + 120) + v12);
        v16 = (*((_DWORD *)a4 + 2) + v14);
        v22 = *a4;
        v23 = v16;
        v17 = (*((_DWORD *)a3 + 2) + *v15);
        v20 = *a3;
        v21 = v17;
        sub_1B2209AB0((uint64_t)&v22, (uint64_t)&v20, 0.5);
        v18 = (*((_DWORD *)a4 + 2) + v14);
        v22 = *a4;
        v23 = v18;
        v19 = (*((_DWORD *)a3 + 2) + v15[1]);
        v20 = *a3;
        v21 = v19;
        sub_1B2209AB0((uint64_t)&v22, (uint64_t)&v20, 0.5);
        v11 = *(_DWORD *)(v9 + 4);
      }
      v12 += 8;
    }
    v7 = __p;
  }
  operator delete(v7);
}

void sub_1B22163E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD v27[2];
  _QWORD v28[2];
  float *v29;
  int v30;
  int v31;
  uint64_t v32;
  void *__p;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    v8 = 0;
    v9 = *(_QWORD *)(v5 + 8);
    v10 = *(_QWORD **)(*(_QWORD *)(v9 + 456) + 8 * a5);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 456) + 8 * a5);
    v26 = (int *)v9;
    v12 = *(unsigned int *)(v9 + 20);
    v29 = (float *)&v32;
    v30 = v12;
    v31 = 16;
    __p = 0;
    if (v12 >= 0x11)
    {
      v8 = operator new(4 * v12);
      __p = v8;
      v29 = (float *)v8;
      v31 = v12;
    }
    v13 = *v26;
    if (*v26 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = *(int *)(*(_QWORD *)(v5 + 168) + 4 * v14);
        if ((_DWORD)v15 != -1)
        {
          v16 = (unsigned int *)(*(_QWORD *)(*v10 + 24) + 8 * v14);
          v17 = *v16;
          if ((int)v17 >= 1)
          {
            v18 = *(_DWORD *)(*(_QWORD *)(v11 + 96) + 4 * v15);
            v19 = v10[3] + 4 * (int)v16[1];
            v20 = v29;
            v21 = *v16;
            do
            {
              *v20++ = 1.0 / (float)(int)v17;
              --v21;
            }
            while (v21);
            v22 = 0;
            v23 = 4 * v17;
            do
            {
              v24 = (*(_DWORD *)(a4 + 8) + v18);
              v28[0] = *(_QWORD *)a4;
              v28[1] = v24;
              v25 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)(v19 + v22));
              v27[0] = *(_QWORD *)a3;
              v27[1] = v25;
              sub_1B2209AB0((uint64_t)v28, (uint64_t)v27, v29[v22 / 4]);
              v22 += 4;
            }
            while (v23 != v22);
            v13 = *v26;
          }
        }
        ++v14;
      }
      while (v14 < v13);
      v8 = __p;
    }
    operator delete(v8);
  }
}

void sub_1B22165AC(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD v59[5];
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  _BYTE v66[32];
  void *__p;
  _QWORD v68[3];

  v68[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v60 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v48 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v51 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v66;
  v63 = v66;
  v64 = v13;
  v65 = 8;
  __p = 0;
  if (v13 < 9)
  {
    v15 = 0;
  }
  else
  {
    v15 = operator new(4 * v13);
    __p = v15;
    v63 = v15;
    v65 = v13;
    v14 = v15;
  }
  v59[0] = v68;
  v59[1] = 0;
  v59[2] = v14;
  memset(&v59[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v59[3]) = 2;
    LODWORD(v59[4]) = 0;
    v68[0] = 0x3F0000003F000000;
    v49 = 1;
  }
  else
  {
    v49 = 0;
  }
  v57 = v51;
  if (*(int *)(v51 + 4) >= 1)
  {
    v52 = v12;
    v16 = 0;
    v50 = v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v52[18] + 4 * *(int *)(v52[12] + 4 * v17));
        if ((*(_BYTE *)(v52[21] + *v18) & 1) != 0)
        {
          v40 = v52[9];
          v41 = *(unsigned __int16 *)(v40 + 2 * v17);
          if (*(_WORD *)(v40 + 2 * v17))
          {
            v42 = 0;
            do
            {
              sub_1B2208948((_QWORD *)v11, v16, *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)+ 2 * (v42 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17))), &v61);
              v43 = v18[v42];
              v44 = (*((_DWORD *)a4 + 2) + v43);
              v55 = *a4;
              v56 = v44;
              v45 = (*((_DWORD *)a3 + 2) + v61);
              v53 = *a3;
              v54 = v45;
              sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, 0.5);
              v46 = (*((_DWORD *)a4 + 2) + v43);
              v55 = *a4;
              v56 = v46;
              v47 = (*((_DWORD *)a3 + 2) + v62);
              v53 = *a3;
              v54 = v47;
              sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, 0.5);
              ++v42;
            }
            while (v41 != v42);
          }
        }
        else
        {
          if ((v49 & 1) == 0)
          {
            v58 = v16;
            if (*(float *)(*(_QWORD *)(v51 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            sub_1B192B4F4(&v60, (int *)&v57, (uint64_t)v59, v19, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B2208948((_QWORD *)v11, v16, 0, &v61);
          v20 = *v18;
          v21 = (*((_DWORD *)a4 + 2) + v20);
          v55 = *a4;
          v56 = v21;
          v22 = (*((_DWORD *)a3 + 2) + v61);
          v53 = *a3;
          v54 = v22;
          sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *(float *)v68);
          v23 = (*((_DWORD *)a4 + 2) + v20);
          v55 = *a4;
          v56 = v23;
          v24 = (*((_DWORD *)a3 + 2) + v62);
          v53 = *a3;
          v54 = v24;
          sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *((float *)v68 + 1));
          if (SLODWORD(v59[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v51 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v51 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v59[4]))
                {
                  v30 = *(_DWORD *)(v52[12] + 4 * *(int *)(v50[21] + 4 * v29));
                  v31 = *a4;
                  v32 = *((_DWORD *)a4 + 2);
                  v55 = *a4;
                  v56 = (v32 + v20);
                }
                else
                {
                  v33 = 0;
                  v34 = (2 * (int)v29) | 1;
                  v35 = *(_QWORD *)(v51 + 24);
                  v36 = *(_QWORD *)(v51 + 72) + 4 * *(int *)(v35 + 4 * v34);
                  v37 = *(_DWORD *)(v35 + 8 * v29);
                  do
                    v38 = *(unsigned int *)(v36 + 4 * v33++);
                  while (v16 != v38);
                  if ((int)v33 + 1 < v37)
                    v37 = 0;
                  v30 = *(_DWORD *)(*(_QWORD *)(v11 + 24)
                                  + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v34)
                                  + 4 * ((int)v33 - v37 + 1));
                  v39 = (*((_DWORD *)a4 + 2) + v20);
                  v55 = *a4;
                  v56 = v39;
                  v31 = *a3;
                  v32 = *((_DWORD *)a3 + 2);
                }
                v53 = v31;
                v54 = (v32 + v30);
                sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *(float *)&v63[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
      v8 = v50;
    }
    while (v16 < *(int *)(v51 + 4));
    v15 = __p;
  }
  operator delete(v15);
}

void sub_1B22169E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t v22;
  float **v23;
  float **v24;
  float v25;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  _QWORD *v51;
  int v52;
  unsigned int v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _BOOL4 v73;
  float *v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD v77[5];
  float v78;
  float *v79;
  uint64_t v80;
  _QWORD v81[2];
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  float *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  void *__p;
  uint64_t *v94;
  int v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)a1;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v86 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v65 = v8[1];
  v61 = v8[2];
  v66 = *(_QWORD *)(*(_QWORD *)(v65 + 456) + 8 * a5);
  if (*(_BYTE *)(v66 + 12))
    v9 = 1;
  else
    v9 = *v7 == 0;
  v73 = v9;
  v72 = *(_QWORD **)(v8[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v61 + 456) + 8 * a5);
  v11 = *(_DWORD *)(v65 + 20);
  v94 = &v97;
  v95 = 2 * v11;
  v96 = 32;
  v98 = 0;
  if (2 * v11 >= 0x21)
  {
    v98 = operator new(8 * v11);
    v94 = (uint64_t *)v98;
    v96 = 2 * v11;
    v11 = *(_DWORD *)(v65 + 20);
  }
  v12 = 0;
  v89 = &v92;
  v90 = v11;
  v91 = 16;
  __p = 0;
  if (v11 >= 0x11)
  {
    v12 = operator new(4 * v11);
    __p = v12;
    v89 = (uint64_t *)v12;
    v91 = v11;
  }
  v81[0] = v65;
  v81[1] = v61;
  if (*(int *)(v65 + 8) >= 1)
  {
    v62 = v10;
    v13 = 0;
    v64 = v8;
    while (1)
    {
      v69 = *(_DWORD *)(v8[30] + 4 * v13);
      if (v69 != -1)
      {
        v14 = *(int *)(*(_QWORD *)(v66 + 96) + 4 * v13);
        v15 = (_DWORD *)(*(_QWORD *)(v66 + 144) + 4 * v14);
        v16 = *(int *)(v62[12] + 4 * v69);
        v17 = (int *)(v62[18] + 4 * v16);
        v18 = *v17;
        v19 = v62[21];
        v20 = v73;
        if ((*(_BYTE *)(v19 + v18) & 1) != 0)
          v20 = 0;
        if (v20)
        {
          v21 = (v18 + *(_DWORD *)(a4 + 8));
          v74 = *(float **)a4;
          v75 = v21;
          v22 = (*(_DWORD *)(a3 + 8) + *v15);
          v79 = *(float **)a3;
          v80 = v22;
          v23 = &v74;
          v24 = &v79;
          v25 = 1.0;
        }
        else
        {
          if ((*(_BYTE *)(v19 + v18) & 1) != 0)
          {
            v71 = *(unsigned __int16 *)(v62[9] + 2 * v69);
            if (*(_WORD *)(v62[9] + 2 * v69))
            {
              v41 = 0;
              v63 = *(_QWORD *)(v66 + 168) + v14;
              v68 = v19 + v16;
              do
              {
                v42 = *(unsigned __int16 *)(v72[5] + 2 * (v41 + *(int *)(*(_QWORD *)(v72[4] + 96) + 4 * v69)));
                v43 = v15;
                v44 = v15[v42];
                v45 = v17[v41];
                v46 = *(_DWORD *)(a4 + 8);
                if (!v73 && (*(_BYTE *)(v68 + v41) & 8) != 0)
                {
                  sub_1B22087A4((_QWORD *)v66, v13, *(unsigned __int16 *)(v72[5] + 2 * (v41 + *(int *)(*(_QWORD *)(v72[4] + 96) + 4 * v69))), &v87);
                  if ((*(_BYTE *)(v63 + v42) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v63 + v42) & 0x20) != 0)
                    {
                      v53 = v42 == 0;
                      v51 = v72;
                      v52 = v13;
                    }
                    else
                    {
                      v51 = v72;
                      v52 = v13;
                      v53 = v42;
                    }
                    v54 = sub_1B221C7C8(v51, v52, v53, v69);
                    v50 = v54 + (float)((float)(1.0 - v54) * 0.75);
                    v49 = (float)(1.0 - v54) * 0.125;
                  }
                  else
                  {
                    v49 = 0.125;
                    v50 = 0.75;
                  }
                  v55 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v55;
                  v56 = (*(_DWORD *)(a3 + 8) + (_DWORD)v87);
                  v79 = *(float **)a3;
                  v80 = v56;
                  sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v49);
                  v57 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v57;
                  v58 = (*(_DWORD *)(a3 + 8) + HIDWORD(v87));
                  v79 = *(float **)a3;
                  v80 = v58;
                  sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v49);
                  v59 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v59;
                  v60 = (*(_DWORD *)(a3 + 8) + v44);
                  v79 = *(float **)a3;
                  v80 = v60;
                  v48 = v50;
                }
                else
                {
                  v74 = *(float **)a4;
                  v75 = (v46 + v45);
                  v47 = (*(_DWORD *)(a3 + 8) + v44);
                  v79 = *(float **)a3;
                  v80 = v47;
                  v48 = 1.0;
                }
                sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v48);
                ++v41;
                v15 = v43;
              }
              while (v71 != v41);
            }
            goto LABEL_26;
          }
          v26 = *(int *)(*(_QWORD *)(v65 + 336) + 8 * v13);
          v78 = 0.0;
          v27 = v94;
          v67 = v26;
          v28 = (_DWORD *)v94 + v26;
          v74 = &v78;
          v75 = (unint64_t)v94;
          v76 = v28;
          memset(v77, 0, 13);
          v82 = v13;
          v83 = v69;
          v84 = *(_DWORD *)(*(_QWORD *)(v81[0] + 336) + 8 * v13);
          v85 = *(_DWORD *)(*(_QWORD *)(v81[0] + 264) + 8 * v13);
          sub_1B192B8C0(&v86, (uint64_t)v81, (uint64_t)&v74, (*(unsigned __int16 *)(*(_QWORD *)(v65 + 432) + 2 * v13) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v61 + 432) + 2 * v69) >> 7) & 0xF);
          v70 = *v15;
          v29 = *v17;
          if (v77[2] >= 1)
          {
            v30 = *(_QWORD *)(v65 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v13);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v65 + 288) + 4 * *(int *)(v30 + ((8 * v13) | 4)));
              do
              {
                v33 = *v32++;
                v34 = *(_DWORD *)(v62[12] + 4 * *(int *)(v64[21] + 4 * v33));
                v35 = *(_DWORD *)(a4 + 8);
                v79 = *(float **)a4;
                v80 = (v35 + v29);
                v87 = v79;
                v88 = (v35 + v34);
                LODWORD(v33) = *v28++;
                sub_1B2209AB0((uint64_t)&v79, (uint64_t)&v87, *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          if (v77[1] >= 1)
          {
            sub_1B2208A48((_QWORD *)v66, v13, v89);
            if (v67 >= 1)
            {
              v36 = 0;
              do
              {
                v37 = (*(_DWORD *)(a4 + 8) + v29);
                v79 = *(float **)a4;
                v80 = v37;
                v38 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)((char *)v89 + v36));
                v87 = *(float **)a3;
                v88 = v38;
                sub_1B2209AB0((uint64_t)&v79, (uint64_t)&v87, *(float *)((char *)v27 + v36));
                v36 += 4;
              }
              while (4 * v67 != v36);
            }
          }
          v39 = (*(_DWORD *)(a4 + 8) + v29);
          v79 = *(float **)a4;
          v80 = v39;
          v40 = (*(_DWORD *)(a3 + 8) + v70);
          v87 = *(float **)a3;
          v88 = v40;
          v25 = v78;
          v23 = &v79;
          v24 = &v87;
        }
        sub_1B2209AB0((uint64_t)v23, (uint64_t)v24, v25);
      }
LABEL_26:
      ++v13;
      v8 = v64;
      if (v13 >= *(int *)(v65 + 8))
      {
        v12 = __p;
        break;
      }
    }
  }
  operator delete(v12);
  operator delete(v98);
}

void sub_1B2216FD0(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD v59[5];
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  _BYTE v66[32];
  void *__p;
  _QWORD v68[3];

  v68[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v60 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v48 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v51 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v66;
  v63 = v66;
  v64 = v13;
  v65 = 8;
  __p = 0;
  if (v13 < 9)
  {
    v15 = 0;
  }
  else
  {
    v15 = operator new(4 * v13);
    __p = v15;
    v63 = v15;
    v65 = v13;
    v14 = v15;
  }
  v59[0] = v68;
  v59[1] = 0;
  v59[2] = v14;
  memset(&v59[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v59[3]) = 2;
    LODWORD(v59[4]) = 0;
    v68[0] = 0x3F0000003F000000;
    v49 = 1;
  }
  else
  {
    v49 = 0;
  }
  v57 = v51;
  if (*(int *)(v51 + 4) >= 1)
  {
    v52 = v12;
    v16 = 0;
    v50 = v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v52[18] + 4 * *(int *)(v52[12] + 4 * v17));
        if ((*(_BYTE *)(v52[21] + *v18) & 1) != 0)
        {
          v40 = v52[9];
          v41 = *(unsigned __int16 *)(v40 + 2 * v17);
          if (*(_WORD *)(v40 + 2 * v17))
          {
            v42 = 0;
            do
            {
              sub_1B2208948((_QWORD *)v11, v16, *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)+ 2 * (v42 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17))), &v61);
              v43 = v18[v42];
              v44 = (*((_DWORD *)a4 + 2) + v43);
              v55 = *a4;
              v56 = v44;
              v45 = (*((_DWORD *)a3 + 2) + v61);
              v53 = *a3;
              v54 = v45;
              sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, 0.5);
              v46 = (*((_DWORD *)a4 + 2) + v43);
              v55 = *a4;
              v56 = v46;
              v47 = (*((_DWORD *)a3 + 2) + v62);
              v53 = *a3;
              v54 = v47;
              sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, 0.5);
              ++v42;
            }
            while (v41 != v42);
          }
        }
        else
        {
          if ((v49 & 1) == 0)
          {
            v58 = v16;
            if (*(float *)(*(_QWORD *)(v51 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            sub_1B192BFA0(&v60, (int *)&v57, (uint64_t)v59, v19, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B2208948((_QWORD *)v11, v16, 0, &v61);
          v20 = *v18;
          v21 = (*((_DWORD *)a4 + 2) + v20);
          v55 = *a4;
          v56 = v21;
          v22 = (*((_DWORD *)a3 + 2) + v61);
          v53 = *a3;
          v54 = v22;
          sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *(float *)v68);
          v23 = (*((_DWORD *)a4 + 2) + v20);
          v55 = *a4;
          v56 = v23;
          v24 = (*((_DWORD *)a3 + 2) + v62);
          v53 = *a3;
          v54 = v24;
          sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *((float *)v68 + 1));
          if (SLODWORD(v59[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v51 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v51 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v59[4]))
                {
                  v30 = *(_DWORD *)(v52[12] + 4 * *(int *)(v50[21] + 4 * v29));
                  v31 = *a4;
                  v32 = *((_DWORD *)a4 + 2);
                  v55 = *a4;
                  v56 = (v32 + v20);
                }
                else
                {
                  v33 = 0;
                  v34 = (2 * (int)v29) | 1;
                  v35 = *(_QWORD *)(v51 + 24);
                  v36 = *(_QWORD *)(v51 + 72) + 4 * *(int *)(v35 + 4 * v34);
                  v37 = *(_DWORD *)(v35 + 8 * v29);
                  do
                    v38 = *(unsigned int *)(v36 + 4 * v33++);
                  while (v16 != v38);
                  if ((int)v33 + 1 < v37)
                    v37 = 0;
                  v30 = *(_DWORD *)(*(_QWORD *)(v11 + 24)
                                  + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v34)
                                  + 4 * ((int)v33 - v37 + 1));
                  v39 = (*((_DWORD *)a4 + 2) + v20);
                  v55 = *a4;
                  v56 = v39;
                  v31 = *a3;
                  v32 = *((_DWORD *)a3 + 2);
                }
                v53 = v31;
                v54 = (v32 + v30);
                sub_1B2209AB0((uint64_t)&v55, (uint64_t)&v53, *(float *)&v63[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
      v8 = v50;
    }
    while (v16 < *(int *)(v51 + 4));
    v15 = __p;
  }
  operator delete(v15);
}

void sub_1B221740C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t v22;
  float **v23;
  float **v24;
  float v25;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  _QWORD *v51;
  int v52;
  unsigned int v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  _BOOL4 v73;
  float *v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD v77[5];
  float v78;
  float *v79;
  uint64_t v80;
  _QWORD v81[2];
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  float *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  void *__p;
  uint64_t *v94;
  int v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)a1;
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v86 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v65 = v8[1];
  v61 = v8[2];
  v66 = *(_QWORD *)(*(_QWORD *)(v65 + 456) + 8 * a5);
  if (*(_BYTE *)(v66 + 12))
    v9 = 1;
  else
    v9 = *v7 == 0;
  v73 = v9;
  v72 = *(_QWORD **)(v8[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v61 + 456) + 8 * a5);
  v11 = *(_DWORD *)(v65 + 20);
  v94 = &v97;
  v95 = 2 * v11;
  v96 = 32;
  v98 = 0;
  if (2 * v11 >= 0x21)
  {
    v98 = operator new(8 * v11);
    v94 = (uint64_t *)v98;
    v96 = 2 * v11;
    v11 = *(_DWORD *)(v65 + 20);
  }
  v12 = 0;
  v89 = &v92;
  v90 = v11;
  v91 = 16;
  __p = 0;
  if (v11 >= 0x11)
  {
    v12 = operator new(4 * v11);
    __p = v12;
    v89 = (uint64_t *)v12;
    v91 = v11;
  }
  v81[0] = v65;
  v81[1] = v61;
  if (*(int *)(v65 + 8) >= 1)
  {
    v62 = v10;
    v13 = 0;
    v64 = v8;
    while (1)
    {
      v69 = *(_DWORD *)(v8[30] + 4 * v13);
      if (v69 != -1)
      {
        v14 = *(int *)(*(_QWORD *)(v66 + 96) + 4 * v13);
        v15 = (_DWORD *)(*(_QWORD *)(v66 + 144) + 4 * v14);
        v16 = *(int *)(v62[12] + 4 * v69);
        v17 = (int *)(v62[18] + 4 * v16);
        v18 = *v17;
        v19 = v62[21];
        v20 = v73;
        if ((*(_BYTE *)(v19 + v18) & 1) != 0)
          v20 = 0;
        if (v20)
        {
          v21 = (v18 + *(_DWORD *)(a4 + 8));
          v74 = *(float **)a4;
          v75 = v21;
          v22 = (*(_DWORD *)(a3 + 8) + *v15);
          v79 = *(float **)a3;
          v80 = v22;
          v23 = &v74;
          v24 = &v79;
          v25 = 1.0;
        }
        else
        {
          if ((*(_BYTE *)(v19 + v18) & 1) != 0)
          {
            v71 = *(unsigned __int16 *)(v62[9] + 2 * v69);
            if (*(_WORD *)(v62[9] + 2 * v69))
            {
              v41 = 0;
              v63 = *(_QWORD *)(v66 + 168) + v14;
              v68 = v19 + v16;
              do
              {
                v42 = *(unsigned __int16 *)(v72[5] + 2 * (v41 + *(int *)(*(_QWORD *)(v72[4] + 96) + 4 * v69)));
                v43 = v15;
                v44 = v15[v42];
                v45 = v17[v41];
                v46 = *(_DWORD *)(a4 + 8);
                if (!v73 && (*(_BYTE *)(v68 + v41) & 8) != 0)
                {
                  sub_1B22087A4((_QWORD *)v66, v13, *(unsigned __int16 *)(v72[5] + 2 * (v41 + *(int *)(*(_QWORD *)(v72[4] + 96) + 4 * v69))), &v87);
                  if ((*(_BYTE *)(v63 + v42) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v63 + v42) & 0x20) != 0)
                    {
                      v53 = v42 == 0;
                      v51 = v72;
                      v52 = v13;
                    }
                    else
                    {
                      v51 = v72;
                      v52 = v13;
                      v53 = v42;
                    }
                    v54 = sub_1B221C7C8(v51, v52, v53, v69);
                    v50 = v54 + (float)((float)(1.0 - v54) * 0.75);
                    v49 = (float)(1.0 - v54) * 0.125;
                  }
                  else
                  {
                    v49 = 0.125;
                    v50 = 0.75;
                  }
                  v55 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v55;
                  v56 = (*(_DWORD *)(a3 + 8) + (_DWORD)v87);
                  v79 = *(float **)a3;
                  v80 = v56;
                  sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v49);
                  v57 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v57;
                  v58 = (*(_DWORD *)(a3 + 8) + HIDWORD(v87));
                  v79 = *(float **)a3;
                  v80 = v58;
                  sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v49);
                  v59 = (*(_DWORD *)(a4 + 8) + v45);
                  v74 = *(float **)a4;
                  v75 = v59;
                  v60 = (*(_DWORD *)(a3 + 8) + v44);
                  v79 = *(float **)a3;
                  v80 = v60;
                  v48 = v50;
                }
                else
                {
                  v74 = *(float **)a4;
                  v75 = (v46 + v45);
                  v47 = (*(_DWORD *)(a3 + 8) + v44);
                  v79 = *(float **)a3;
                  v80 = v47;
                  v48 = 1.0;
                }
                sub_1B2209AB0((uint64_t)&v74, (uint64_t)&v79, v48);
                ++v41;
                v15 = v43;
              }
              while (v71 != v41);
            }
            goto LABEL_26;
          }
          v26 = *(int *)(*(_QWORD *)(v65 + 336) + 8 * v13);
          v78 = 0.0;
          v27 = v94;
          v67 = v26;
          v28 = (_DWORD *)v94 + v26;
          v74 = &v78;
          v75 = (unint64_t)v94;
          v76 = v28;
          memset(v77, 0, 13);
          v82 = v13;
          v83 = v69;
          v84 = *(_DWORD *)(*(_QWORD *)(v81[0] + 336) + 8 * v13);
          v85 = *(_DWORD *)(*(_QWORD *)(v81[0] + 264) + 8 * v13);
          sub_1B192C184(&v86, (uint64_t)v81, (uint64_t)&v74, (*(unsigned __int16 *)(*(_QWORD *)(v65 + 432) + 2 * v13) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v61 + 432) + 2 * v69) >> 7) & 0xF);
          v70 = *v15;
          v29 = *v17;
          if (v77[2] >= 1)
          {
            v30 = *(_QWORD *)(v65 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v13);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v65 + 288) + 4 * *(int *)(v30 + ((8 * v13) | 4)));
              do
              {
                v33 = *v32++;
                v34 = *(_DWORD *)(v62[12] + 4 * *(int *)(v64[21] + 4 * v33));
                v35 = *(_DWORD *)(a4 + 8);
                v79 = *(float **)a4;
                v80 = (v35 + v29);
                v87 = v79;
                v88 = (v35 + v34);
                LODWORD(v33) = *v28++;
                sub_1B2209AB0((uint64_t)&v79, (uint64_t)&v87, *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          if (v77[1] >= 1)
          {
            sub_1B2208A48((_QWORD *)v66, v13, v89);
            if (v67 >= 1)
            {
              v36 = 0;
              do
              {
                v37 = (*(_DWORD *)(a4 + 8) + v29);
                v79 = *(float **)a4;
                v80 = v37;
                v38 = (*(_DWORD *)(a3 + 8) + *(_DWORD *)((char *)v89 + v36));
                v87 = *(float **)a3;
                v88 = v38;
                sub_1B2209AB0((uint64_t)&v79, (uint64_t)&v87, *(float *)((char *)v27 + v36));
                v36 += 4;
              }
              while (4 * v67 != v36);
            }
          }
          v39 = (*(_DWORD *)(a4 + 8) + v29);
          v79 = *(float **)a4;
          v80 = v39;
          v40 = (*(_DWORD *)(a3 + 8) + v70);
          v87 = *(float **)a3;
          v88 = v40;
          v25 = v78;
          v23 = &v79;
          v24 = &v87;
        }
        sub_1B2209AB0((uint64_t)v23, (uint64_t)v24, v25);
      }
LABEL_26:
      ++v13;
      v8 = v64;
      if (v13 >= *(int *)(v65 + 8))
      {
        v12 = __p;
        break;
      }
    }
  }
  operator delete(v12);
  operator delete(v98);
}

void sub_1B22179F4(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  void *__p;
  uint64_t v43;

  v8 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  v30 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v31 = v30[1];
  v9 = *(_QWORD *)(v30[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v31 + 456) + 8 * a5);
  v11 = *(_QWORD **)(*(_QWORD *)(v30[2] + 456) + 8 * a5);
  v12 = *(unsigned int *)(v31 + 16);
  v38 = &v41;
  v39 = v12;
  v40 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    v8 = operator new(4 * v12);
    __p = v8;
    v38 = (uint64_t *)v8;
    v40 = v12;
  }
  if (*(int *)(v31 + 4) >= 1)
  {
    v29 = v11;
    v13 = 0;
    do
    {
      v14 = *(int *)(v30[27] + 4 * v13);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(v29[18] + 4 * *(int *)(v29[12] + 4 * v14));
        if ((*(_BYTE *)(v29[21] + *v15) & 1) != 0)
        {
          v21 = v29[9];
          v22 = *(unsigned __int16 *)(v21 + 2 * v14);
          if (*(_WORD *)(v21 + 2 * v14))
          {
            v23 = 0;
            do
            {
              sub_1B2208948(v10, v13, *(unsigned __int16 *)(*(_QWORD *)(v9 + 40)+ 2 * (v23 + *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) + 4 * v14))), &v36);
              v24 = v15[v23];
              v25 = (*((_DWORD *)a4 + 2) + v24);
              v34 = *a4;
              v35 = v25;
              v26 = (*((_DWORD *)a3 + 2) + v36);
              v32 = *a3;
              v33 = v26;
              sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
              v27 = (*((_DWORD *)a4 + 2) + v24);
              v34 = *a4;
              v35 = v27;
              v28 = (*((_DWORD *)a3 + 2) + v37);
              v32 = *a3;
              v33 = v28;
              sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
              ++v23;
            }
            while (v22 != v23);
          }
        }
        else
        {
          sub_1B2208948(v10, v13, 0, &v36);
          v16 = *v15;
          v17 = (*((_DWORD *)a4 + 2) + *v15);
          v34 = *a4;
          v35 = v17;
          v18 = (*((_DWORD *)a3 + 2) + v36);
          v32 = *a3;
          v33 = v18;
          sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
          v19 = (*((_DWORD *)a4 + 2) + v16);
          v34 = *a4;
          v35 = v19;
          v20 = (*((_DWORD *)a3 + 2) + v37);
          v32 = *a3;
          v33 = v20;
          sub_1B2209AB0((uint64_t)&v34, (uint64_t)&v32, 0.5);
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v31 + 4));
    v8 = __p;
  }
  operator delete(v8);
}

void sub_1B2217C74(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  _QWORD *v37;
  int v38;
  unsigned int v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD v60[2];
  uint64_t *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  void *__p;
  uint64_t *v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  v8 = v7[2];
  v49 = v7;
  v50 = v7[1];
  v9 = v7[60];
  v10 = *(_QWORD *)(v8 + 456);
  v51 = *(_QWORD *)(*(_QWORD *)(v50 + 456) + 8 * a5);
  if (*(_BYTE *)(v51 + 12))
    v11 = 1;
  else
    v11 = **(_DWORD **)a1 == 0;
  v55 = v11;
  v54 = *(_QWORD **)(v9 + 8 * a5);
  v47 = *(_QWORD **)(v10 + 8 * a5);
  v12 = *(_DWORD *)(v50 + 20);
  v66 = &v69;
  v67 = 2 * v12;
  v68 = 32;
  v70 = 0;
  if (2 * v12 >= 0x21)
  {
    v70 = operator new(8 * v12);
    v66 = (uint64_t *)v70;
    v68 = 2 * v12;
    v12 = *(_DWORD *)(v50 + 20);
  }
  v13 = 0;
  v61 = &v64;
  v62 = v12;
  v63 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    v13 = operator new(4 * v12);
    __p = v13;
    v61 = (uint64_t *)v13;
    v63 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    v14 = 0;
    while (1)
    {
      v15 = *(int *)(v49[30] + 4 * v14);
      if ((_DWORD)v15 != -1)
      {
        v16 = *(int *)(*(_QWORD *)(v51 + 96) + 4 * v14);
        v17 = (_DWORD *)(*(_QWORD *)(v51 + 144) + 4 * v16);
        v18 = *(int *)(v47[12] + 4 * v15);
        v19 = (int *)(v47[18] + 4 * v18);
        v20 = *v19;
        v21 = v47[21];
        v22 = v55;
        if ((*(_BYTE *)(v21 + v20) & 1) != 0)
          v22 = 0;
        if (v22)
        {
          v23 = (v20 + *((_DWORD *)a4 + 2));
          v58 = *a4;
          v59 = v23;
          v24 = *v17;
        }
        else
        {
          if ((*(_BYTE *)(v21 + v20) & 1) != 0)
          {
            v53 = *(unsigned __int16 *)(v47[9] + 2 * v15);
            if (*(_WORD *)(v47[9] + 2 * v15))
            {
              v27 = 0;
              v48 = *(_QWORD *)(v51 + 168) + v16;
              v52 = v21 + v18;
              do
              {
                v28 = *(unsigned __int16 *)(v54[5] + 2 * (v27 + *(int *)(*(_QWORD *)(v54[4] + 96) + 4 * v15)));
                v29 = v17;
                v30 = v17[v28];
                v31 = v19[v27];
                v32 = *((_DWORD *)a4 + 2);
                if (!v55 && (*(_BYTE *)(v52 + v27) & 8) != 0)
                {
                  sub_1B22087A4((_QWORD *)v51, v14, *(unsigned __int16 *)(v54[5] + 2 * (v27 + *(int *)(*(_QWORD *)(v54[4] + 96) + 4 * v15))), v60);
                  if ((*(_BYTE *)(v48 + v28) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v48 + v28) & 0x20) != 0)
                    {
                      v39 = v28 == 0;
                      v37 = v54;
                      v38 = v14;
                    }
                    else
                    {
                      v37 = v54;
                      v38 = v14;
                      v39 = v28;
                    }
                    v40 = sub_1B221C7C8(v37, v38, v39, v15);
                    v36 = v40 + (float)((float)(1.0 - v40) * 0.75);
                    v35 = (float)(1.0 - v40) * 0.125;
                  }
                  else
                  {
                    v35 = 0.125;
                    v36 = 0.75;
                  }
                  v41 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v41;
                  v42 = (*((_DWORD *)a3 + 2) + v60[0]);
                  v56 = *a3;
                  v57 = v42;
                  sub_1B2209AB0((uint64_t)&v58, (uint64_t)&v56, v35);
                  v43 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v43;
                  v44 = (*((_DWORD *)a3 + 2) + v60[1]);
                  v56 = *a3;
                  v57 = v44;
                  sub_1B2209AB0((uint64_t)&v58, (uint64_t)&v56, v35);
                  v45 = (*((_DWORD *)a4 + 2) + v31);
                  v58 = *a4;
                  v59 = v45;
                  v46 = (*((_DWORD *)a3 + 2) + v30);
                  v56 = *a3;
                  v57 = v46;
                  v34 = v36;
                }
                else
                {
                  v58 = *a4;
                  v59 = (v32 + v31);
                  v33 = (*((_DWORD *)a3 + 2) + v30);
                  v56 = *a3;
                  v57 = v33;
                  v34 = 1.0;
                }
                sub_1B2209AB0((uint64_t)&v58, (uint64_t)&v56, v34);
                ++v27;
                v17 = v29;
              }
              while (v53 != v27);
            }
            goto LABEL_18;
          }
          v24 = *v17;
          v25 = (*((_DWORD *)a4 + 2) + v20);
          v58 = *a4;
          v59 = v25;
        }
        v26 = (*((_DWORD *)a3 + 2) + v24);
        v56 = *a3;
        v57 = v26;
        sub_1B2209AB0((uint64_t)&v58, (uint64_t)&v56, 1.0);
      }
LABEL_18:
      if (++v14 >= *(int *)(v50 + 8))
      {
        v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v70);
}

uint64_t sub_1B2218088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  signed int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned __int16 *v30;
  int v31;
  uint64_t *v32;
  int v33;
  char v34;
  int v35;
  int v36;
  float v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void **v51;
  uint64_t j;
  void **v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  float v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int **v77;
  int v78;
  int v79;
  int *v80;
  float v81;
  float v82;
  __float2 v83;
  float v84;
  float v85;
  int *v86;
  unint64_t v87;
  int v88;
  float v89;
  float v90;
  float v91;
  int *v92;
  int v93;
  uint64_t v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int *v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  int v106;
  __float2 v107;
  int *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char v112;
  int v113;
  float v114;
  float v115;
  float v116;
  __float2 v117;
  __float2 v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int *v126;
  int *v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  int v135;
  int *v136;
  int *v137;
  float v138;
  float v139;
  uint64_t v140;
  float v141;
  int *v142;
  int *v143;
  float v144;
  float v145;
  int *v146;
  uint64_t v147;
  int *v148;
  int v149;
  uint64_t k;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  _DWORD *v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  _DWORD *v160;
  unint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  uint64_t *v185;
  int *v186;
  int v187;
  uint64_t v188;
  int *v189;
  _QWORD *v190;
  int v191;
  uint64_t v192;
  _BYTE v193[4];
  _BYTE *v194;
  unsigned int v195;
  int v196;
  _BYTE v197[14080];
  void *v198;
  _BYTE *v199;
  unsigned int v200;
  int v201;
  _BYTE v202[3520];
  void *v203[361];
  _BYTE *v204;
  unsigned int v205;
  unsigned int v206;
  _BYTE v207[160];
  void *v208;
  _BYTE *v209;
  unsigned int v210;
  unsigned int v211;
  _BYTE v212[160];
  void *v213;
  _BYTE *v214;
  unsigned int v215;
  unsigned int v216;
  _BYTE v217[160];
  void *v218;
  _BYTE *v219;
  unsigned int v220;
  unsigned int v221;
  _BYTE v222[160];
  void *v223;
  uint64_t v224;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v177 = v9;
  v10 = v3;
  v11 = v2;
  v12 = 0;
  v224 = *MEMORY[0x1E0C80C00];
  do
  {
    v13 = v2 + v12;
    *(_DWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = v2 + v12 + 24;
    *(_QWORD *)(v13 + 344) = 0;
    *(_QWORD *)(v13 + 16) = 0x2800000028;
    v12 += 352;
  }
  while (v12 != 1408);
  do
  {
    v14 = v2 + v12;
    *(_DWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = v2 + v12 + 24;
    *(_QWORD *)(v14 + 344) = 0;
    *(_QWORD *)(v14 + 16) = 0x2800000028;
    v12 += 352;
  }
  while (v14 + 352 != v2 + 2816);
  v15 = 2816;
  do
  {
    v16 = v2 + v15;
    *(_DWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = v2 + v15 + 24;
    *(_QWORD *)(v16 + 344) = 0;
    *(_QWORD *)(v16 + 16) = 0x2800000028;
    v15 += 352;
  }
  while (v16 + 352 != v2 + 4224);
  v17 = 4224;
  do
  {
    v18 = v2 + v17;
    *(_DWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = v2 + v17 + 24;
    *(_QWORD *)(v18 + 344) = 0;
    *(_QWORD *)(v18 + 16) = 0x2800000028;
    v17 += 352;
  }
  while (v18 + 352 != v2 + 5632);
  v19 = 5632;
  do
  {
    v20 = v2 + v19;
    *(_DWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = v2 + v19 + 24;
    *(_QWORD *)(v20 + 344) = 0;
    *(_QWORD *)(v20 + 16) = 0x2800000028;
    v19 += 352;
  }
  while (v20 + 352 != v2 + 7040);
  v21 = *(_QWORD *)(v3 + 48) + 4 * *(int *)(*(_QWORD *)(v3 + 24) + 4 * ((2 * v4) | 1));
  v181 = v21;
  if ((v5 & 0x80000000) == 0)
    v181 = sub_1B2211A58(v3, v4, v5);
  v176 = v8;
  v22 = 0;
  v190 = (_QWORD *)v10;
  v23 = *(int *)(v10 + 20);
  do
  {
    v24 = &(&v204)[v22];
    *v24 = &v207[v22 * 8];
    v24[1] = 0x2800000000;
    v24[22] = 0;
    v22 += 23;
  }
  while (v22 != 92);
  v25 = v6;
  v26 = v23 + (v6 >= 0);
  v27 = 2 * v26;
  v178 = v11;
  v174 = v26;
  v175 = (int *)(v11 + 2816);
  if ((_DWORD)v26)
  {
    if (v206 < v27)
    {
      operator delete(v208);
      v204 = v207;
      v206 = 40;
      v208 = operator new(4 * v27);
      v204 = v208;
      v206 = v27;
    }
    v205 = v27;
    if (v211 < v27)
    {
      operator delete(v213);
      v209 = v212;
      v211 = 40;
      v213 = operator new(4 * v27);
      v209 = v213;
      v211 = v27;
    }
    v210 = v27;
    if (v216 < v27)
    {
      operator delete(v218);
      v214 = v217;
      v216 = 40;
      v218 = operator new(4 * v27);
      v214 = v218;
      v216 = v27;
    }
    v215 = v27;
    if (v221 < v27)
    {
      operator delete(v223);
      v219 = v222;
      v221 = 40;
      v223 = operator new(4 * v27);
      v219 = v223;
      v221 = v27;
    }
  }
  else
  {
    operator delete(v208);
    v204 = v207;
    v205 = v27;
    v206 = 40;
    operator delete(v213);
    v209 = v212;
    v210 = v27;
    v211 = 40;
    operator delete(v218);
    v214 = v217;
    v216 = 40;
    v215 = v27;
    operator delete(v223);
    v219 = v222;
    v221 = 40;
  }
  v28 = 0;
  v220 = v27;
  v29 = 4;
  do
  {
    *(_DWORD *)(v11 + 4 * v28 + 7040) = *(_DWORD *)(v21 + 4 * v28) + v176;
    v30 = (unsigned __int16 *)(v177 + 6 * v28);
    v31 = *(_DWORD *)(v21 + 4 * v28);
    v32 = (uint64_t *)&(&v204)[23 * v28];
    if (*v30)
    {
      v33 = sub_1B2211A88(v190, v31, v30, *v32, v25);
      if ((v33 & 1) == 0)
        goto LABEL_27;
    }
    else
    {
      v33 = sub_1B221194C(v190, v31, *v32, v25);
      if ((v33 & 1) == 0)
      {
LABEL_27:
        v34 = 0;
        if (v33 >= 0)
          v35 = v33;
        else
          v35 = v33 + 1;
        v36 = v35 >> 1;
        v37 = 6.2832 / (float)v36;
        v38 = v36;
        goto LABEL_36;
      }
    }
    v39 = v33 - 1;
    if ((int)v39 >= 0)
      v40 = v33 - 1;
    else
      v40 = v33;
    v36 = v40 >> 1;
    v38 = v36 + 1;
    v37 = 3.1416 / (float)v36;
    *(_DWORD *)(*v32 + 4 * v33) = *(_DWORD *)(*v32 + 4 * v39);
    v34 = 1;
LABEL_36:
    v193[v28] = v34;
    *((_DWORD *)&v203[357] + v28) = v36;
    *((_DWORD *)&v203[359] + v28) = v38;
    *((float *)&v203[353] + v28) = v37;
    v41 = v28 + 1;
    v42 = *(_DWORD *)(v181 + 4 * ((v28 + 1) & 3));
    v43 = *(_DWORD *)(v181 + 4 * (((_BYTE)v28 - 1) & 3));
    *((_DWORD *)&v203[355] + v28) = -1;
    if (v38 >= 1)
    {
      v44 = 0;
      v45 = 0;
      v46 = *v32;
      v47 = 2 * v38;
      while (1)
      {
        v48 = v44 + 2;
        if (*(_DWORD *)(v46 + 4 * v44) == v42)
        {
          v49 = v47 - 2 == v44 ? 0 : v44 + 2;
          if (*(_DWORD *)(v46 + 4 * v49) == v43)
            break;
        }
        ++v45;
        v44 = v48;
        if (v47 == v48)
          goto LABEL_46;
      }
      *((_DWORD *)&v203[355] + v28) = v45;
    }
LABEL_46:
    v29 = v29 + v33 - 3;
    ++v28;
  }
  while (v41 != 4);
  for (i = 0; i != 176; i += 44)
  {
    v51 = &v203[i + 177];
    *(_DWORD *)v51 = 0;
    v51[1] = &v203[i + 180];
    v51[43] = 0;
    v51[2] = (void *)0x2800000028;
  }
  v180 = v29;
  for (j = 0; j != 176; j += 44)
  {
    v53 = &v203[j + 1];
    *(_DWORD *)v53 = 0;
    v53[1] = &v203[j + 4];
    v53[43] = 0;
    v53[2] = (void *)0x2800000028;
  }
  v54 = v202;
  v199 = v202;
  v200 = v174;
  v201 = 10;
  v203[0] = 0;
  LODWORD(v55) = v174;
  if (v174 >= 0xB)
  {
    v54 = operator new(352 * v174);
    v203[0] = v54;
    v199 = v54;
    v201 = v174;
    LODWORD(v55) = v200;
  }
  if ((_DWORD)v55)
  {
    v55 = v55;
    do
    {
      *(_DWORD *)v54 = 0;
      v54[1] = v54 + 3;
      v54[43] = 0;
      v54[2] = 0x2800000028;
      v54 += 44;
      --v55;
    }
    while (v55);
  }
  v56 = 4 * v174;
  v57 = v197;
  v194 = v197;
  v195 = 4 * v174;
  v196 = 40;
  v198 = 0;
  if ((4 * v174) >= 0x29)
  {
    v57 = operator new(352 * v56);
    v198 = v57;
    v194 = v57;
    v196 = 4 * v174;
    v56 = v195;
  }
  if (v56)
  {
    v58 = v56;
    do
    {
      *(_DWORD *)v57 = 0;
      v57[1] = v57 + 3;
      v57[43] = 0;
      v57[2] = 0x2800000028;
      v57 += 44;
      --v58;
    }
    while (v58);
  }
  v59 = 0;
  v60 = 0;
  do
  {
    v187 = *(_DWORD *)(v181 + 4 * v60);
    v182 = v60;
    v61 = *((_DWORD *)&v203[359] + v60);
    v179 = v61;
    v188 = v59;
    v191 = v61;
    if (v61 >= 1)
    {
      v62 = 0;
      v63 = 1.0 / (float)((float)v61 + 5.0);
      v183 = 352 * v61;
      v185 = (uint64_t *)&(&v204)[23 * v60];
      v64 = -1;
      v65 = 2;
      v66 = 4;
      do
      {
        v67 = (v61 + v64) % v61;
        v68 = *v185;
        v69 = (int *)(*v185 + v66);
        v70 = *(v69 - 1);
        v71 = *v69;
        if (v183 - 352 == v62)
          v72 = 0;
        else
          v72 = v65;
        v73 = *(_DWORD *)(v68 + 4 * v72);
        v74 = *(_DWORD *)(v68 + 8 * v67);
        v75 = *(_DWORD *)(v68 + 8 * v67 + 4);
        sub_1B2219630((uint64_t)&v199[v62], 4u);
        sub_1B22196BC((int *)&v199[v62], v187, v63 * (float)(int)v179);
        sub_1B22196BC((int *)&v199[v62], v73, v63 + v63);
        sub_1B22196BC((int *)&v199[v62], v70, v63 + v63);
        sub_1B22196BC((int *)&v199[v62], v71, v63);
        sub_1B2219630((uint64_t)&v194[v188 + v62], 4u);
        sub_1B22196BC((int *)&v194[v188 + v62], v73, 0.33333);
        v76 = v74;
        v61 = v191;
        sub_1B22196BC((int *)&v194[v188 + v62], v76, -0.33333);
        sub_1B22196BC((int *)&v194[v188 + v62], v71, 0.16667);
        sub_1B22196BC((int *)&v194[v188 + v62], v75, -0.16667);
        v62 += 352;
        v66 += 8;
        ++v64;
        v65 += 2;
      }
      while (v183 != v62);
    }
    if ((*(_BYTE *)(v177 + 6 * v182 + 4) & 2) != 0)
    {
      sub_1B2219630(v178 + 352 * v182, v180);
      sub_1B22196BC((int *)(v178 + 352 * v182), v187, 1.0);
      sub_1B2219630((uint64_t)&v203[44 * v182 + 177], v180);
      sub_1B22196BC((int *)&v203[44 * v182 + 177], *(_DWORD *)(v181 + 4 * v182), 0.66667);
      sub_1B22196BC((int *)&v203[44 * v182 + 177], *(_DWORD *)(v181 + 4 * (((_BYTE)v182 + 1) & 3)), 0.33333);
      sub_1B2219630((uint64_t)&v203[44 * v182 + 1], v180);
      sub_1B22196BC((int *)&v203[44 * v182 + 1], *(_DWORD *)(v181 + 4 * v182), 0.66667);
      sub_1B22196BC((int *)&v203[44 * v182 + 1], *(_DWORD *)(v181 + 4 * (((_BYTE)v182 - 1) & 3)), 0.33333);
    }
    else if (v193[v182])
    {
      v77 = (int **)&(&v204)[23 * v182];
      v78 = **v77;
      v79 = (*v77)[2 * (int)v179 - 1];
      v80 = (int *)(v178 + 352 * v182);
      sub_1B2219630((uint64_t)v80, v180);
      sub_1B22196BC(v80, v78, 0.16667);
      sub_1B22196BC(v80, v79, 0.16667);
      sub_1B22196BC(v80, v187, 0.66667);
      v81 = (float)*((int *)&v203[357] + v182);
      v82 = *((float *)&v203[353] + v182);
      v83 = __sincosf_stret(v82);
      v84 = 1.0 / (float)(v83.__cosval + (float)(v81 * 3.0));
      LODWORD(v80) = (*v77)[1];
      v85 = (float)(v84 * (float)-(float)((float)((float)(v83.__cosval * 2.0) + 1.0) * sqrtf(v83.__cosval + 1.0)))
          / sqrtf(1.0 - v83.__cosval);
      sub_1B2219630((uint64_t)&v203[44 * v182 + 177], v180);
      sub_1B22196BC((int *)&v203[44 * v182 + 177], v78, 0.16667);
      sub_1B22196BC((int *)&v203[44 * v182 + 177], v79, -0.16667);
      v86 = (int *)&v203[44 * v182 + 1];
      sub_1B2219630((uint64_t)v86, v180);
      sub_1B22196BC(v86, v187, (float)(v83.__sinval * -4.0) * v84);
      sub_1B22196BC(v86, v78, v85);
      sub_1B22196BC(v86, (int)v80, v83.__sinval * v84);
      sub_1B22196BC(v86, v79, v85);
      if (v191 >= 3)
      {
        v87 = 0;
        v88 = 1;
        do
        {
          v89 = sinf(v82 * (float)v88);
          v90 = v84 * (float)(v89 * 4.0);
          v91 = v84 * (float)(v89 + sinf(v82 * (float)++v88));
          v92 = &(*v77)[v87 / 4];
          v93 = v92[3];
          sub_1B22196BC(v86, v92[2], v90);
          sub_1B22196BC(v86, v93, v91);
          v87 += 8;
        }
        while (8 * (v179 - 1) - 8 != v87);
      }
      v94 = *v86;
      if ((int)v94 >= 1)
      {
        v95 = (float *)((char *)v203[44 * v182 + 2] + 4);
        do
        {
          *v95 = *v95 * 0.33333;
          v95 += 2;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      v96 = *((float *)&v203[353] + v182);
      v97 = (float)v61;
      if (v61 > 29)
      {
        v99 = cosf(6.2832 / v97);
        v98 = 1.0
            / (float)((float)((float)((float)(v99 + 5.0) + sqrtf((float)(v99 + 9.0) * (float)(v99 + 1.0))) * v97)
                    * 0.0625);
      }
      else
      {
        v98 = flt_1EEF65324[v179];
      }
      sub_1B2219630(v178 + 352 * v182, v180);
      v100 = (int *)&v203[44 * v182 + 177];
      sub_1B2219630((uint64_t)v100, v180);
      v101 = (int *)&v203[44 * v182 + 1];
      sub_1B2219630((uint64_t)v101, v180);
      if (v61 >= 1)
      {
        v102 = 0;
        v103 = 0;
        v104 = v98 * 0.5;
        v105 = 1.0 / v97;
        do
        {
          v106 = v179 - 1 + v103 - ((int)v179 - 1 + (int)v103) / v61 * v191;
          sub_1B2219718((int *)(v178 + 352 * v182), (int *)&v199[v102], v105);
          v107 = __sincosf_stret(v96 * (float)(int)v103);
          sub_1B2219718(v100, (int *)&v199[v102], v104 * v107.__cosval);
          sub_1B2219718(v100, (int *)&v199[352 * v106], v104 * v107.__cosval);
          sub_1B2219718(v101, (int *)&v199[v102], v104 * v107.__sinval);
          v108 = (int *)&v199[352 * v106];
          v61 = v191;
          sub_1B2219718(v101, v108, v104 * v107.__sinval);
          ++v103;
          v102 += 352;
        }
        while (v179 != v103);
      }
    }
    v60 = v182 + 1;
    v59 = v188 + 352 * v174;
  }
  while (v182 != 3);
  v109 = 0;
  v110 = 0;
  v111 = (char *)(v177 + 4);
  do
  {
    v112 = *v111;
    v111 += 6;
    if ((v112 & 2) != 0)
    {
      sub_1B2219790((int *)(v178 + v109 + 1408), (int *)&v203[v109 / 8 + 177]);
      sub_1B2219790((int *)(v178 + v109 + 2816), (int *)&v203[v109 / 8 + 1]);
    }
    else
    {
      v113 = *((_DWORD *)&v203[355] + v110);
      v114 = *((float *)&v203[353] + v110);
      v115 = v114 * (float)v113;
      v116 = v114 * (float)((v113 + 1) % *((_DWORD *)&v203[359] + v110));
      if (v193[v110] && *((int *)&v203[357] + v110) < 2)
      {
        sub_1B2219630(v178 + v109 + 1408, v180);
        sub_1B22196BC((int *)(v178 + v109 + 1408), *(_DWORD *)(v181 + 4 * v110), 0.66667);
        sub_1B22196BC((int *)(v178 + v109 + 1408), *(_DWORD *)(v181 + 4 * (((_BYTE)v110 + 1) & 3)), 0.33333);
        sub_1B2219630(v178 + v109 + 2816, v180);
        sub_1B22196BC((int *)(v178 + v109 + 2816), *(_DWORD *)(v181 + 4 * v110), 0.66667);
        sub_1B22196BC((int *)(v178 + v109 + 2816), *(_DWORD *)(v181 + 4 * (((_BYTE)v110 - 1) & 3)), 0.33333);
      }
      else
      {
        sub_1B2219790((int *)(v178 + v109 + 1408), (int *)(v178 + v109));
        v117 = __sincosf_stret(v115);
        sub_1B2219718((int *)(v178 + v109 + 1408), (int *)&v203[v109 / 8 + 177], v117.__cosval);
        sub_1B2219718((int *)(v178 + v109 + 1408), (int *)&v203[v109 / 8 + 1], v117.__sinval);
        sub_1B2219790((int *)(v178 + v109 + 2816), (int *)(v178 + v109));
        v118 = __sincosf_stret(v116);
        sub_1B2219718((int *)(v178 + v109 + 2816), (int *)&v203[v109 / 8 + 177], v118.__cosval);
        sub_1B2219718((int *)(v178 + v109 + 2816), (int *)&v203[v109 / 8 + 1], v118.__sinval);
      }
    }
    ++v110;
    v109 += 352;
  }
  while (v110 != 4);
  v119 = 0;
  v120 = 0;
  v121 = -2.0;
  v122 = v175;
  while (2)
  {
    v192 = v120 + 1;
    v123 = (v120 + 1) & 3;
    v124 = ((_BYTE)v120 - 1) & 3;
    v125 = *((_DWORD *)&v203[355] + v120);
    v126 = (int *)&v194[352 * v125 + v119];
    v127 = (int *)&v194[352 * ((v125 + 1) % *((_DWORD *)&v203[359] + v120)) + v119];
    v128 = cosf(*((float *)&v203[353] + v120));
    v129 = cosf(*((float *)&v203[353] + v124));
    v130 = cosf(*((float *)&v203[353] + v123));
    v131 = (float)(v128 * v121) + 3.0;
    v132 = v131 - v130;
    v133 = v128 + v128;
    v134 = v131 - v129;
    v189 = v127;
    if (!v193[v120])
    {
      sub_1B2219630((uint64_t)(v122 + 352), v180);
      sub_1B2219718(v122 + 352, v122 - 704, v130 / 3.0);
      sub_1B2219718(v122 + 352, v122 - 352, v132 / 3.0);
      v140 = v178;
      sub_1B2219718(v122 + 352, (int *)(v178 + 352 * v123 + 2816), v133 / 3.0);
      sub_1B2219718(v122 + 352, v126, 0.33333);
      sub_1B2219630((uint64_t)(v122 + 704), v180);
      sub_1B2219718(v122 + 704, v122 - 704, v129 / 3.0);
      sub_1B2219718(v122 + 704, v122, v134 / 3.0);
      sub_1B2219718(v122 + 704, (int *)(v178 + 352 * (((_BYTE)v120 - 1) & 3) + 1408), v133 / 3.0);
      sub_1B2219718(v122 + 704, v189, -0.33333);
      goto LABEL_101;
    }
    v135 = *((_DWORD *)&v203[357] + v120);
    v136 = v122 + 352;
    sub_1B2219630((uint64_t)(v122 + 352), v180);
    if (v135 < 2)
    {
      sub_1B22196BC(v122 + 352, *(_DWORD *)(v181 + 4 * v120), 0.44444);
      sub_1B22196BC(v122 + 352, *(_DWORD *)(v181 + 4 * (((_BYTE)v120 + 2) & 3)), 0.11111);
      sub_1B22196BC(v122 + 352, *(_DWORD *)(v181 + 4 * v123), 0.22222);
      sub_1B22196BC(v122 + 352, *(_DWORD *)(v181 + 4 * v124), 0.22222);
      sub_1B2219790(v122 + 704, v122 + 352);
      v140 = v178;
LABEL_101:
      v146 = v122;
LABEL_102:
      v147 = v192;
      goto LABEL_103;
    }
    v137 = v122 - 704;
    v138 = v130 / 3.0;
    sub_1B2219718(v122 + 352, v122 - 704, v130 / 3.0);
    v139 = v132 / 3.0;
    v186 = v122 - 352;
    sub_1B2219718(v122 + 352, v122 - 352, v132 / 3.0);
    v140 = v178;
    v141 = v133 / 3.0;
    v184 = (int *)(v178 + 352 * v123 + 2816);
    sub_1B2219718(v122 + 352, v184, v133 / 3.0);
    sub_1B2219718(v122 + 352, v126, 0.33333);
    v142 = v122;
    v143 = v122 + 704;
    sub_1B2219630((uint64_t)v143, v180);
    v144 = v129 / 3.0;
    sub_1B2219718(v143, v137, v144);
    v145 = v134 / 3.0;
    sub_1B2219718(v143, v142, v145);
    sub_1B2219718(v143, (int *)(v178 + 352 * v124 + 1408), v133 / 3.0);
    sub_1B2219718(v143, v189, -0.33333);
    if (v193[v124])
    {
      sub_1B2219630((uint64_t)v136, v180);
      sub_1B2219718(v136, v137, v138);
      sub_1B2219718(v136, v186, v139);
      sub_1B2219718(v136, v184, v141);
      sub_1B2219718(v136, v126, 0.33333);
      sub_1B2219790(v143, v136);
      v146 = v142;
      v121 = -2.0;
      goto LABEL_102;
    }
    v148 = (int *)(v178 + 352 * v124 + 1408);
    v149 = v193[v123];
    v146 = v142;
    v121 = -2.0;
    v147 = v192;
    if (v149)
    {
      sub_1B2219630((uint64_t)v143, v180);
      sub_1B2219718(v143, v137, v144);
      sub_1B2219718(v143, v142, v145);
      sub_1B2219718(v143, v148, v141);
      sub_1B2219718(v143, v189, -0.33333);
      sub_1B2219790(v136, v143);
    }
LABEL_103:
    v119 += 352 * v174;
    v122 = v146 + 88;
    v120 = v147;
    if (v147 != 4)
      continue;
    break;
  }
  for (k = 0; k != 4; ++k)
  {
    v151 = *(unsigned int *)(v140 + 352 * k);
    if ((int)v151 >= 1)
    {
      v152 = *(_DWORD **)(v140 + 352 * k + 8);
      do
      {
        *v152 += v176;
        v152 += 2;
        --v151;
      }
      while (v151);
    }
    v153 = *(unsigned int *)(v140 + 352 * k + 1408);
    if ((int)v153 >= 1)
    {
      v154 = *(_DWORD **)(v140 + 352 * k + 1416);
      do
      {
        *v154 += v176;
        v154 += 2;
        --v153;
      }
      while (v153);
    }
    v155 = *(unsigned int *)(v140 + 352 * k + 2816);
    if ((int)v155 >= 1)
    {
      v156 = *(_DWORD **)(v140 + 352 * k + 2824);
      do
      {
        *v156 += v176;
        v156 += 2;
        --v155;
      }
      while (v155);
    }
    v157 = *(unsigned int *)(v140 + 352 * k + 4224);
    if ((int)v157 >= 1)
    {
      v158 = *(_DWORD **)(v140 + 352 * k + 4232);
      do
      {
        *v158 += v176;
        v158 += 2;
        --v157;
      }
      while (v157);
    }
    v159 = *(unsigned int *)(v140 + 352 * k + 5632);
    if ((int)v159 >= 1)
    {
      v160 = *(_DWORD **)(v140 + 352 * k + 5640);
      do
      {
        *v160 += v176;
        v160 += 2;
        --v159;
      }
      while (v159);
    }
  }
  if (v195)
  {
    v161 = 0;
    v162 = 344;
    do
    {
      v163 = &v194[v162];
      v164 = &v194[v162 - 336];
      operator delete(*(void **)&v194[v162]);
      *v164 = v163 - 320;
      *((_DWORD *)v163 - 81) = 40;
      ++v161;
      v162 += 352;
    }
    while (v161 < v195);
  }
  operator delete(v198);
  if (v200)
  {
    v165 = 0;
    v166 = 344;
    do
    {
      v167 = &v199[v166];
      v168 = &v199[v166 - 336];
      operator delete(*(void **)&v199[v166]);
      *v168 = v167 - 320;
      *((_DWORD *)v167 - 81) = 40;
      ++v165;
      v166 += 352;
    }
    while (v165 < v200);
  }
  operator delete(v203[0]);
  v169 = 1408;
  do
  {
    operator delete(v203[v169 / 8]);
    *(_QWORD *)&v202[v169 + 3184] = &v202[v169 + 3200];
    *(_DWORD *)&v202[v169 + 3196] = 40;
    v169 -= 352;
  }
  while (v169);
  v170 = 176;
  do
  {
    operator delete(v203[v170 + 176]);
    v203[v170 + 134] = &v203[v170 + 136];
    HIDWORD(v203[v170 + 135]) = 40;
    v170 -= 44;
  }
  while (v170 * 8);
  v171 = 92;
  do
  {
    v172 = (char *)&(&v204)[v171];
    operator delete(v203[v171 + 360]);
    *((_QWORD *)v172 - 23) = v172 - 168;
    *((_DWORD *)v172 - 43) = 40;
    v171 -= 23;
  }
  while (v171 * 8);
  return v178;
}

void sub_1B2219630(uint64_t a1, unsigned int a2)
{
  void *v4;

  *(_DWORD *)a1 = 0;
  if (*(_DWORD *)(a1 + 16) < (signed int)a2)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 20) < a2)
      {
        operator delete(*(void **)(a1 + 344));
        *(_QWORD *)(a1 + 8) = a1 + 24;
        *(_DWORD *)(a1 + 20) = 40;
        v4 = operator new(8 * a2);
        *(_QWORD *)(a1 + 344) = v4;
        *(_QWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 20) = a2;
      }
    }
    else
    {
      operator delete(*(void **)(a1 + 344));
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_DWORD *)(a1 + 20) = 40;
    }
    *(_DWORD *)(a1 + 16) = a2;
  }
}

float sub_1B22196BC(int *a1, int a2, float result)
{
  int v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  if (*a1 < 1)
  {
LABEL_5:
    v7 = v4 + 8 * v3;
    *(_DWORD *)v7 = a2;
    *(float *)(v7 + 4) = result;
    *a1 = v3 + 1;
  }
  else
  {
    v5 = (float *)(v4 + 4);
    v6 = *a1;
    while (*((_DWORD *)v5 - 1) != a2)
    {
      v5 += 2;
      if (!--v6)
        goto LABEL_5;
    }
    result = *v5 + result;
    *v5 = result;
  }
  return result;
}

void sub_1B2219718(int *a1, int *a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*a2 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      sub_1B22196BC(a1, *(_DWORD *)(*((_QWORD *)a2 + 1) + v6), *(float *)(*((_QWORD *)a2 + 1) + v6 + 4) * a3);
      ++v7;
      v6 += 8;
    }
    while (v7 < *a2);
  }
}

int *sub_1B2219790(int *a1, int *a2)
{
  int v4;
  uint64_t v5;

  sub_1B2219630((uint64_t)a1, a2[4]);
  v4 = *a2;
  *a1 = *a2;
  if (v4 >= 1)
  {
    v5 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v5) = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v5);
      ++v5;
    }
    while (v5 < *a1);
  }
  return a1;
}

double sub_1B22197F4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  double result;

  *(_QWORD *)a1 = off_1E63CDF80;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_WORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12) + 1;
  return result;
}

_QWORD *sub_1B221988C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  *a1 = off_1E63CDF80;
  v4 = a1 + 60;
  v2 = (_QWORD *)a1[60];
  v3 = v4[1];
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        v6 = sub_1B221BBEC(v2[v5]);
        MEMORY[0x1B5E22E18](v6, 0x70C4089CF00AFLL);
        v2 = (_QWORD *)a1[60];
        v3 = a1[61];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    a1[61] = v2;
    operator delete(v2);
  }
  v7 = (void *)a1[57];
  if (v7)
  {
    a1[58] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[54];
  if (v8)
  {
    a1[55] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[51];
  if (v9)
  {
    a1[52] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[48];
  if (v10)
  {
    a1[49] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[45];
  if (v11)
  {
    a1[46] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[42];
  if (v12)
  {
    a1[43] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[39];
  if (v13)
  {
    a1[40] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[36];
  if (v14)
  {
    a1[37] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[33];
  if (v15)
  {
    a1[34] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[30];
  if (v16)
  {
    a1[31] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[27];
  if (v17)
  {
    a1[28] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[24];
  if (v18)
  {
    a1[25] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[21];
  if (v19)
  {
    a1[22] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[18];
  if (v20)
  {
    a1[19] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[15];
  if (v21)
  {
    a1[16] = v21;
    operator delete(v21);
  }
  return a1;
}

void sub_1B2219A18(_QWORD *a1)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = (int *)a1[1];
  v3 = *v2;
  v4 = a1[51];
  v5 = a1[52] - v4;
  if (v3 <= v5)
  {
    if (v3 < v5)
      a1[52] = v4 + v3;
  }
  else
  {
    sub_1B221B810(a1 + 51, v3 - v5);
    v2 = (int *)a1[1];
  }
  v6 = v2[1];
  v7 = a1[54];
  v8 = a1[55] - v7;
  if (v6 <= v8)
  {
    if (v6 < v8)
      a1[55] = v7 + v6;
  }
  else
  {
    sub_1B221B810(a1 + 54, v6 - v8);
    v2 = (int *)a1[1];
  }
  v9 = v2[2];
  v10 = a1[57];
  v11 = a1[58] - v10;
  if (v9 <= v11)
  {
    if (v9 < v11)
      a1[58] = v10 + v9;
  }
  else
  {
    sub_1B221B810(a1 + 57, v9 - v11);
  }
}

void sub_1B2219AC8(uint64_t a1, char a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  char v10;
  char v11[4];

  *(_BYTE *)(a1 + 36) = (a2 & 1) == 0;
  *(_BYTE *)(a1 + 37) = (a2 & 2) != 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 464) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 456)) >> 3;
  sub_1B2219BE0(a1);
  v5 = *(_DWORD **)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 44);
  *v5 = *(_DWORD *)(a1 + 40);
  v5[1] = v7;
  v5[2] = *(_DWORD *)(a1 + 56) + v6 + *(_DWORD *)(a1 + 60);
  sub_1B2219C1C(a1, v8, v9);
  sub_1B221AD4C(a1);
  sub_1B221ADA0(a1);
  sub_1B221AE20(a1);
  if ((a2 & 4) != 0)
    v10 = 1;
  else
    v10 = -1;
  v11[0] = v10;
  if ((int)v4 < 1)
  {
    sub_1B2219CC8(a1, v11);
    sub_1B221B0BC(a1);
    sub_1B221B2E4(a1);
    sub_1B221B3D0(a1);
  }
  else
  {
    v11[0] = v10 | 0x10;
    sub_1B2219CC8(a1, v11);
    sub_1B221B0BC(a1);
    sub_1B221B2E4(a1);
    sub_1B221B3D0(a1);
    sub_1B2219DB8((_QWORD *)a1);
  }
}

uint64_t sub_1B2219BE0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!*(_BYTE *)(a1 + 36))
    sub_1B2219FD4((_QWORD *)a1);
  return sub_1B221A040(a1);
}

uint64_t sub_1B2219C1C(uint64_t a1, uint8x8_t a2, uint8x8_t a3)
{
  int16x8_t v4;
  int16x8_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  a3.i32[0] = HIDWORD(v7[0]);
  a2.i32[0] = v7[0];
  v4 = (int16x8_t)vmovl_u8(a2);
  *(int8x8_t *)v4.i8 = vorr_s8((int8x8_t)(v4.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x18001000080000);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)(v5.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x19001100090001);
  v4.i32[1] = vmovn_s16(v5).u32[0];
  v7[0] = v4.i64[0];
  sub_1B221A524(a1, v7);
  sub_1B221A590(a1, v7);
  return sub_1B221A608(a1, v7);
}

uint64_t sub_1B2219CC8(uint64_t result, char *a2)
{
  uint64_t v3;
  char v4;
  int v5;

  v3 = result;
  v4 = *a2;
  if ((*a2 & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v4 = *a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_18:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  if ((*a2 & 0x20) != 0)
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
LABEL_8:
  if (*(_DWORD *)(v3 + 28))
    v5 = 6;
  else
    v5 = 4;
  if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 20) > v5)
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 20);
  *(_DWORD *)(*(_QWORD *)(v3 + 16) + 20) = v5;
  return result;
}

void sub_1B2219DB8(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(a1[1] + 464) - *(_QWORD *)(a1[1] + 456);
  if ((int)(v1 >> 3) >= 1)
  {
    v3 = 0;
    v4 = (uint64_t)(a1 + 62);
    v5 = (v1 >> 3);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1[1] + 456) + 8 * v3);
      v7 = operator new();
      sub_1B2207764(v7, a1[2]);
      v8 = (_QWORD *)operator new();
      v9 = sub_1B221BBCC(v8, (uint64_t)a1, v6, v7);
      sub_1B221BC1C(v9);
      v10 = (_QWORD *)a1[2];
      v12 = (uint64_t *)v10[58];
      v11 = v10[59];
      if ((unint64_t)v12 >= v11)
      {
        v14 = v10[57];
        v15 = ((uint64_t)v12 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          goto LABEL_37;
        v16 = v11 - v14;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)sub_1B17F812C((uint64_t)(v10 + 59), v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        *v20 = v7;
        v13 = v20 + 1;
        v22 = (char *)v10[57];
        v21 = (char *)v10[58];
        if (v21 != v22)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = (char *)v10[57];
        }
        v10[57] = v20;
        v10[58] = v13;
        v10[59] = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v12 = v7;
        v13 = v12 + 1;
      }
      v10[58] = v13;
      v25 = (_QWORD *)a1[61];
      v24 = a1[62];
      if ((unint64_t)v25 >= v24)
      {
        v27 = a1[60];
        v28 = ((uint64_t)v25 - v27) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
LABEL_37:
          abort();
        v29 = v24 - v27;
        v30 = v29 >> 2;
        if (v29 >> 2 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)sub_1B17F812C(v4, v31);
        else
          v32 = 0;
        v33 = &v32[8 * v28];
        *(_QWORD *)v33 = v8;
        v26 = v33 + 8;
        v35 = (char *)a1[60];
        v34 = (char *)a1[61];
        if (v34 != v35)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != v35);
          v34 = (char *)a1[60];
        }
        a1[60] = v33;
        a1[61] = v26;
        a1[62] = &v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v25 = v8;
        v26 = v25 + 1;
      }
      a1[61] = v26;
      ++v3;
    }
    while (v3 != v5);
  }
}

uint64_t sub_1B2219FD4(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a1[57];
    do
    {
      if ((*(_BYTE *)(v5 + v4) & 1) != 0)
      {
        *(_DWORD *)(a1[30] + 4 * v4) = 2;
        v3 = *(_DWORD *)(v2 + 8);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  sub_1B221B6D8(a1);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
}

uint64_t sub_1B221A040(uint64_t result)
{
  int v1;
  int *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  _DWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int *v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;

  v1 = *(unsigned __int8 *)(result + 36);
  *(_DWORD *)(result + 64) = 0;
  v2 = *(int **)(result + 120);
  v3 = *(_QWORD *)(result + 128) - (_QWORD)v2;
  v4 = v3 >> 2;
  if (v1)
  {
    if ((int)v4 >= 1)
    {
      v5 = 0;
      do
      {
        v2[v5] = v5;
        ++v5;
      }
      while ((v3 >> 2) != v5);
    }
    *(_DWORD *)(result + 40) = v4;
    *(_DWORD *)(result + 68) = 0;
    v6 = *(_QWORD *)(result + 144);
    v7 = *(_QWORD *)(result + 152) - v6;
    v8 = v7 >> 2;
    if ((int)(v7 >> 2) >= 1)
    {
      v9 = 0;
      v10 = (v7 >> 2);
      do
      {
        *(_DWORD *)(v6 + 4 * v9) = v9;
        ++v9;
      }
      while (v10 != v9);
    }
    *(_DWORD *)(result + 44) = v8;
    *(_DWORD *)(result + 72) = v8;
    v11 = *(_DWORD **)(result + 192);
    v12 = *(_QWORD *)(result + 200) - (_QWORD)v11;
    v13 = v12 >> 2;
    if ((int)(v12 >> 2) >= 1)
    {
      v14 = (v12 >> 2);
      do
      {
        *v11++ = v8;
        LODWORD(v8) = v8 + 1;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(result + 48) = v13;
    if (*(_BYTE *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      v15 = *(_QWORD *)(result + 168);
      v16 = *(_QWORD *)(result + 176) - v15;
      v17 = v16 >> 2;
      if ((int)(v16 >> 2) < 1)
      {
        v20 = 0;
      }
      else
      {
        v18 = 0;
        v19 = (v16 >> 2);
        do
        {
          *(_DWORD *)(v15 + 4 * v18) = v18;
          ++v18;
        }
        while (v19 != v18);
        v20 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v17;
      v30 = v20 + v17;
      *(_DWORD *)(result + 80) = v30;
      v31 = *(_DWORD **)(result + 216);
      v32 = *(_QWORD *)(result + 224) - (_QWORD)v31;
      v33 = v32 >> 2;
      if ((int)(v32 >> 2) >= 1)
      {
        v34 = (v32 >> 2);
        do
        {
          *v31++ = v30++;
          --v34;
        }
        while (v34);
        v30 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v33;
      v35 = v30 + v33;
      *(_DWORD *)(result + 84) = v30 + v33;
      v36 = *(_DWORD **)(result + 240);
      v37 = *(_QWORD *)(result + 248) - (_QWORD)v36;
      v38 = v37 >> 2;
      if ((int)(v37 >> 2) >= 1)
      {
        v39 = (v37 >> 2);
        do
        {
          *v36++ = v35++;
          --v39;
        }
        while (v39);
      }
      *(_DWORD *)(result + 60) = v38;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      v24 = *(_QWORD *)(result + 240);
      v25 = *(_QWORD *)(result + 248) - v24;
      v26 = v25 >> 2;
      if ((int)(v25 >> 2) < 1)
      {
        v29 = 0;
      }
      else
      {
        v27 = 0;
        v28 = (v25 >> 2);
        do
        {
          *(_DWORD *)(v24 + 4 * v27) = v27;
          ++v27;
        }
        while (v28 != v27);
        v29 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 60) = v26;
      v63 = v29 + v26;
      *(_DWORD *)(result + 76) = v63;
      v64 = *(_DWORD **)(result + 168);
      v65 = *(_QWORD *)(result + 176) - (_QWORD)v64;
      v66 = v65 >> 2;
      if ((int)(v65 >> 2) >= 1)
      {
        v67 = (v65 >> 2);
        do
        {
          *v64++ = v63++;
          --v67;
        }
        while (v67);
        v63 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v66;
      v68 = v63 + v66;
      *(_DWORD *)(result + 80) = v63 + v66;
      v69 = *(_DWORD **)(result + 216);
      v70 = *(_QWORD *)(result + 224) - (_QWORD)v69;
      v71 = v70 >> 2;
      if ((int)(v70 >> 2) >= 1)
      {
        v72 = (v70 >> 2);
        do
        {
          *v69++ = v68++;
          --v72;
        }
        while (v72);
      }
      *(_DWORD *)(result + 56) = v71;
    }
  }
  else
  {
    if ((int)v4 < 1)
    {
      v23 = 0;
    }
    else
    {
      v21 = 0;
      v22 = (v3 >> 2);
      do
      {
        if (*v2)
          v23 = v21 + 1;
        else
          v23 = v21;
        if (!*v2)
          v21 = -1;
        *v2++ = v21;
        v21 = v23;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(result + 40) = v23;
    *(_DWORD *)(result + 68) = 0;
    v40 = *(int **)(result + 144);
    v41 = *(_QWORD *)(result + 152) - (_QWORD)v40;
    if ((int)(v41 >> 2) < 1)
    {
      v44 = 0;
    }
    else
    {
      v42 = 0;
      v43 = (v41 >> 2);
      do
      {
        if (*v40)
          v44 = v42 + 1;
        else
          v44 = v42;
        if (!*v40)
          v42 = -1;
        *v40++ = v42;
        v42 = v44;
        --v43;
      }
      while (v43);
    }
    *(_DWORD *)(result + 44) = v44;
    *(_DWORD *)(result + 72) = v44;
    v45 = *(int **)(result + 192);
    v46 = *(_QWORD *)(result + 200) - (_QWORD)v45;
    if ((int)(v46 >> 2) < 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      v48 = (v46 >> 2);
      do
      {
        v49 = v47 + v44;
        if (*v45)
        {
          ++v47;
          v50 = v49;
        }
        else
        {
          v50 = -1;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
    }
    *(_DWORD *)(result + 48) = v47;
    if (*(_BYTE *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      v51 = *(int **)(result + 168);
      v52 = *(_QWORD *)(result + 176) - (_QWORD)v51;
      if ((int)(v52 >> 2) < 1)
      {
        v56 = 0;
        v53 = 0;
      }
      else
      {
        v53 = 0;
        v54 = (v52 >> 2);
        do
        {
          if (*v51)
            v55 = v53;
          else
            v55 = -1;
          if (*v51)
            ++v53;
          *v51++ = v55;
          --v54;
        }
        while (v54);
        v56 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v53;
      v73 = v56 + v53;
      *(_DWORD *)(result + 80) = v73;
      v74 = *(int **)(result + 216);
      v75 = *(_QWORD *)(result + 224) - (_QWORD)v74;
      if ((int)(v75 >> 2) < 1)
      {
        v76 = 0;
      }
      else
      {
        v76 = 0;
        v77 = (v75 >> 2);
        do
        {
          v78 = v76 + v73;
          if (*v74)
          {
            ++v76;
            v79 = v78;
          }
          else
          {
            v79 = -1;
          }
          *v74++ = v79;
          --v77;
        }
        while (v77);
        v73 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v76;
      v80 = v73 + v76;
      *(_DWORD *)(result + 84) = v80;
      v81 = *(int **)(result + 240);
      v82 = *(_QWORD *)(result + 248) - (_QWORD)v81;
      if ((int)(v82 >> 2) < 1)
      {
        v83 = 0;
      }
      else
      {
        v83 = 0;
        v84 = (v82 >> 2);
        do
        {
          v85 = v83 + v80;
          if (*v81)
          {
            ++v83;
            v86 = v85;
          }
          else
          {
            v86 = -1;
          }
          *v81++ = v86;
          --v84;
        }
        while (v84);
      }
      *(_DWORD *)(result + 60) = v83;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      v57 = *(int **)(result + 240);
      v58 = *(_QWORD *)(result + 248) - (_QWORD)v57;
      if ((int)(v58 >> 2) < 1)
      {
        v62 = 0;
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v60 = (v58 >> 2);
        do
        {
          if (*v57)
            v61 = v59;
          else
            v61 = -1;
          if (*v57)
            ++v59;
          *v57++ = v61;
          --v60;
        }
        while (v60);
        v62 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 60) = v59;
      v87 = v62 + v59;
      *(_DWORD *)(result + 76) = v87;
      v88 = *(int **)(result + 168);
      v89 = *(_QWORD *)(result + 176) - (_QWORD)v88;
      if ((int)(v89 >> 2) < 1)
      {
        v90 = 0;
      }
      else
      {
        v90 = 0;
        v91 = (v89 >> 2);
        do
        {
          v92 = v90 + v87;
          if (*v88)
          {
            ++v90;
            v93 = v92;
          }
          else
          {
            v93 = -1;
          }
          *v88++ = v93;
          --v91;
        }
        while (v91);
        v87 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v90;
      v94 = v87 + v90;
      *(_DWORD *)(result + 80) = v94;
      v95 = *(int **)(result + 216);
      v96 = *(_QWORD *)(result + 224) - (_QWORD)v95;
      if ((int)(v96 >> 2) < 1)
      {
        v97 = 0;
      }
      else
      {
        v97 = 0;
        v98 = (v96 >> 2);
        do
        {
          v99 = v97 + v94;
          if (*v95)
          {
            ++v97;
            v100 = v99;
          }
          else
          {
            v100 = -1;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
      }
      *(_DWORD *)(result + 56) = v97;
    }
  }
  return result;
}

uint64_t sub_1B221A524(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  v4 = **(int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 336);
  v6 = *(_QWORD *)(a1 + 344) - v5;
  v7 = v4 >= v6;
  v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_1B2213A14((void **)(a1 + 336), v8);
    v4 = **(int **)(a1 + 16);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 344) = v5 + v4;
  }
  sub_1B17F8190(a1 + 264, v4);
  return sub_1B221A6A0(a1, a2);
}

uint64_t sub_1B221A590(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  v4 = *(int *)(*(_QWORD *)(a1 + 16) + 4);
  v5 = *(_QWORD *)(a1 + 360);
  v6 = *(_QWORD *)(a1 + 368) - v5;
  v7 = v4 >= v6;
  v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_1B2213A14((void **)(a1 + 360), v8);
    v4 = *(int *)(*(_QWORD *)(a1 + 16) + 4);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 368) = v5 + v4;
  }
  sub_1B17F8190(a1 + 288, v4);
  sub_1B221A890(a1, a2);
  return sub_1B221AA80(a1, a2);
}

uint64_t sub_1B221A608(uint64_t a1, _BYTE *a2)
{
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;

  v4 = *(unsigned __int8 *)(a1 + 36);
  v5 = (_QWORD *)(a1 + 384);
  v6 = *(int *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = *(_QWORD *)(a1 + 384);
  v8 = *(_QWORD *)(a1 + 392) - v7;
  if (v4)
  {
    if (v6 > v8)
    {
      v9 = a2;
LABEL_6:
      sub_1B2208D68(v5, v6 - v8, v9);
      goto LABEL_9;
    }
  }
  else if (v6 > v8)
  {
    v9 = a2 + 4;
    goto LABEL_6;
  }
  if (v6 < v8)
    *(_QWORD *)(a1 + 392) = v7 + v6;
LABEL_9:
  sub_1B17F8190(a1 + 312, *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B221AB90(a1, a2);
  sub_1B221AC2C(a1, a2);
  return sub_1B221ACBC(a1, a2);
}

uint64_t sub_1B221A6A0(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 64);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 88) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 336) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 264);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 88) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 120) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 336) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 264);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_1B221A890(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 68);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 288);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 104) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 144) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_1B221AA80(uint64_t result, _BYTE *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(int *)(result + 72);
      do
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4 + 1) = a2[1];
        v5 = (_DWORD *)(*(_QWORD *)(result + 288) + 4 * v4);
        *v5 = v3;
        v5[1] = v3++;
        v4 += 2;
      }
      while (v3 < *(_DWORD *)(*(_QWORD *)(result + 8) + 4));
    }
  }
  else if (v2 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int *)(*(_QWORD *)(result + 192) + 8 * v6);
      if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v7) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v7[1]) = a2[1];
        v12 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v12 + 4 * *v7) = v6;
        *(_DWORD *)(v12 + 4 * v7[1]) = v6;
      }
      else
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = v9;
          v11 = v7[v8];
          if ((_DWORD)v11 != -1)
          {
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v8 + 4];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v7[v8]) = v6;
          }
          v9 = 0;
          v8 = 1;
        }
        while ((v10 & 1) != 0);
      }
      ++v6;
    }
    while (v6 < *(int *)(*(_QWORD *)(result + 8) + 4));
  }
  return result;
}

uint64_t sub_1B221AB90(uint64_t result, _BYTE *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  if (*(_DWORD *)(result + 52))
  {
    v2 = *(int **)(result + 8);
    v3 = *v2;
    if (*(_BYTE *)(result + 36))
    {
      if (v3 >= 1)
      {
        v4 = 0;
        v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 76);
        do
        {
          *(_DWORD *)(v5 + 4 * v4) = v4;
          ++v4;
        }
        while ((int)v4 < *v2);
      }
    }
    else if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        v7 = *(int *)(*(_QWORD *)(result + 168) + 4 * i);
        if ((_DWORD)v7 != -1)
        {
          if ((*(_BYTE *)(*(_QWORD *)(result + 408) + i) & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
            v2 = *(int **)(result + 8);
          }
          *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = i;
          v3 = *v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B221AC2C(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 80);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 4));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 216) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 4));
  }
  return result;
}

uint64_t sub_1B221ACBC(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 84);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 8));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 240) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 456) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 8));
  }
  return result;
}

uint64_t sub_1B221AD4C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(int **)(a1 + 16);
  v3 = *((_QWORD *)v2 + 12);
  v4 = *v2;
  v5 = *((_QWORD *)v2 + 13) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)v2 + 13) = v3 + v4;
  }
  else
  {
    sub_1B2213A14((void **)v2 + 12, v4 - v5);
  }
  return sub_1B221AEB0(a1);
}

uint64_t sub_1B221ADA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 240);
  v4 = *(int *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 248) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 248) = v3 + v4;
  }
  else
  {
    sub_1B2213A14((void **)(v2 + 240), v4 - v5);
  }
  v6 = *(int *)(a1 + 44);
  if ((int)v6 >= 1)
  {
    v7 = *(int *)(a1 + 68);
    v8 = v7 + v6;
    do
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 240) + v7++) = 0;
    while (v7 < v8);
  }
  return sub_1B221AEF0(a1);
}

uint64_t sub_1B221AE20(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  sub_1B2213904(*(_QWORD *)(a1 + 16) + 432, *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B221AF30(a1);
  sub_1B221AFDC((_QWORD *)a1);
  result = sub_1B221B07C(a1);
  if (!*(_BYTE *)(a1 + 36))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (*(int *)(v3 + 8) >= 1)
    {
      v4 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 384) + v4) & 1) != 0)
        {
          *(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * v4) |= 0x800u;
          v3 = *(_QWORD *)(a1 + 16);
        }
        ++v4;
      }
      while (v4 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t sub_1B221AEB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 40);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 64);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 96) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                           + 96)
                                                                               + *(int *)(*(_QWORD *)(result + 264)
                                                                                        + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1B221AEF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 48);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 72);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 240) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                            + 240)
                                                                                + *(int *)(*(_QWORD *)(result + 288)
                                                                                         + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1B221AF30(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 52);
  if ((_DWORD)v1)
  {
    v2 = *(int *)(result + 76);
    v3 = v2 + v1;
    if (*(int *)(*(_QWORD *)(result + 8) + 12) <= 0)
    {
      if ((int)v1 >= 1)
      {
        do
        {
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) = 128;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24)
                         + 8 * *(int *)(*(_QWORD *)(result + 312) + 4 * v2)) != *(_DWORD *)(result + 32))
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) |= 2u;
          ++v2;
        }
        while (v2 < v3);
      }
    }
    else if ((int)v1 >= 1)
    {
      do
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2++) = 128;
      while (v2 < (int)v3);
    }
  }
  return result;
}

_QWORD *sub_1B221AFDC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(int *)(result[27] + 4 * v2);
      if ((_DWORD)v4 != -1)
      {
        v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 240) + v2);
        v6 = v3 & 0xFFFF883A | v5 & 1 | (4 * ((v5 >> 1) & 1)) & 0xFFFFFFBF | (((v5 >> 3) & 1) << 6);
        v7 = v5 >> 2;
        v8 = (~v5 & 5) == 0;
        if ((v5 & 0xC) != 0)
          v9 = 512;
        else
          v9 = 128;
        v3 = v6 & 0xFFFFCFFF | (v8 << 14) | ((v7 & 1) << 12) & 0xDFFF | ((v7 & 1) << 13) | v9;
        *(_WORD *)(*(_QWORD *)(result[2] + 432) + 2 * v4) = v3;
        v1 = result[1];
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

uint64_t sub_1B221B07C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 60);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 84);
    v3 = v1 + v2;
    do
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                                + 432)
                                                                                    + 2
                                                                                    * *(int *)(*(_QWORD *)(result + 312)
                                                                                             + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

void sub_1B221B0BC(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float *v20;
  int *v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  int v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *(_DWORD *)(a1 + 24);
  v2 = v26;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 216);
  v3 += 216;
  *(_QWORD *)(v3 + 8) = v4;
  sub_1B221B6A8(v3, *(int *)(v3 - 212), &dword_1B22CAB1C);
  v27 = (float *)&v29;
  v28 = 0x1000000000;
  __p = 0;
  if ((v2 & 0x60) != 0 && (v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20), v5 >= 0x11))
  {
    operator delete(0);
    v6 = operator new(4 * v5);
    __p = v6;
    v27 = (float *)v6;
    HIDWORD(v28) = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(int *)(a1 + 48);
  if ((int)v7 >= 1)
  {
    v8 = *(int *)(a1 + 72);
    v9 = v7 + v8;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(v10 + 216);
      v12 = *(_QWORD *)(v10 + 240);
      if ((*(_BYTE *)(v12 + v8) & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v8) = 1092616192;
      }
      else if ((*(_BYTE *)(v12 + v8) & 8) != 0)
      {
        v13 = *(int *)(*(_QWORD *)(a1 + 288) + 4 * v8);
        v14 = *(_QWORD **)(a1 + 8);
        v15 = v14[27];
        v16 = *(float *)(v15 + 4 * v13);
        if ((v26 & 0x60) != 0)
        {
          v17 = *(int *)(v14[15]
                       + 8 * v13
                       + 4 * (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 360) + v8) >> 3) & 3));
          v18 = v14[42];
          v19 = *(_DWORD *)(v18 + 8 * (_DWORD)v17);
          v20 = v27;
          if (v19 >= 1)
          {
            v21 = (int *)(v14[45] + 4 * *(int *)(v18 + 8 * v17 + 4));
            v22 = *(unsigned int *)(v18 + 8 * (_DWORD)v17);
            v23 = v27;
            do
            {
              v24 = *v21++;
              *v23++ = *(float *)(v15 + 4 * v24);
              --v22;
            }
            while (v22);
          }
          v25 = sub_1B22105A4(&v26, v19, v20, v16);
          goto LABEL_14;
        }
        if (v16 <= 0.0)
          goto LABEL_21;
        v25 = 10.0;
        if (v16 >= 10.0)
        {
LABEL_14:
          *(float *)(v11 + 4 * v8) = v25;
          if (v25 > 0.0)
            goto LABEL_23;
        }
        else
        {
          if (v16 > 1.0)
          {
            v25 = v16 + -1.0;
            goto LABEL_14;
          }
LABEL_21:
          *(_DWORD *)(v11 + 4 * v8) = 0;
        }
        *(_BYTE *)(v12 + v8) &= ~8u;
      }
LABEL_23:
      if (++v8 >= v9)
      {
        v6 = __p;
        break;
      }
    }
  }
  operator delete(v6);
}

void sub_1B221B2E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  float v10;
  float v11;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 416) = *(_QWORD *)(v2 + 408);
  sub_1B221B6A8(v2 + 408, *(int *)(v2 + 8), &dword_1B22CAB1C);
  v3 = *(int *)(a1 + 60);
  if ((int)v3 >= 1)
  {
    v4 = *(int *)(a1 + 84);
    v5 = v3 + v4;
    do
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(v6 + 408);
      v8 = *(_QWORD *)(v6 + 432);
      v9 = *(_WORD *)(v8 + 2 * v4);
      if ((v9 & 0x10) != 0)
      {
        *(_DWORD *)(v7 + 4 * v4) = 1092616192;
      }
      else if ((v9 & 0x20) != 0)
      {
        v10 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 408) + 4 * *(int *)(*(_QWORD *)(a1 + 312) + 4 * v4));
        if (v10 <= 0.0)
          goto LABEL_12;
        v11 = 10.0;
        if (v10 >= 10.0)
        {
LABEL_9:
          *(float *)(v7 + 4 * v4) = v11;
          if (v11 > 0.0)
            goto LABEL_14;
        }
        else
        {
          if (v10 > 1.0)
          {
            v11 = v10 + -1.0;
            goto LABEL_9;
          }
LABEL_12:
          *(_DWORD *)(v7 + 4 * v4) = 0;
        }
        *(_WORD *)(v8 + 2 * v4) &= ~0x20u;
      }
LABEL_14:
      ++v4;
    }
    while (v4 < v5);
  }
}

uint64_t sub_1B221B3D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  __int16 v40;
  __int32 v41;
  int v42;

  v1 = result;
  v42 = *(_DWORD *)(result + 24);
  v2 = *(int *)(result + 56);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(result + 80);
    v4 = v2 + v3;
    do
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *(_QWORD *)(v5 + 432);
      v7 = *(_WORD *)(v6 + 2 * v3);
      if ((v7 & 0x40) != 0)
      {
        v8 = (int *)(*(_QWORD *)(v1 + 192) + 8 * *(int *)(*(_QWORD *)(v1 + 312) + 4 * v3));
        if ((*(_BYTE *)(*(_QWORD *)(v1 + 384) + v3) & 1) != 0)
        {
          v11 = *v8;
          if ((_DWORD)v11 != -1 && (*(_BYTE *)(*(_QWORD *)(v5 + 240) + v11) & 8) != 0)
          {
            v13 = v7 & 0xF83F | 0x40;
            v14 = 512;
          }
          else
          {
            v12 = v8[1];
            if ((_DWORD)v12 == -1)
            {
              v13 = v7 & 0xF83F;
              v14 = 128;
            }
            else
            {
              v13 = v7 & 0xF83F;
              if ((*(_BYTE *)(*(_QWORD *)(v5 + 240) + v12) & 8) != 0)
              {
                v13 |= 0x40u;
                v14 = 512;
              }
              else
              {
                v14 = 128;
              }
            }
          }
          v10 = v14 | v13;
        }
        else
        {
          v9 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + v8[1]) >> 3) & 1)
             + ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + *v8) >> 3) & 1);
          *(_WORD *)(v6 + 2 * v3) = v7 & 0xFFBF | ((v9 != 0) << 6);
          result = sub_1B2210460(0.0, (uint64_t)&v42, v9);
          v10 = *(_WORD *)(v6 + 2 * v3) & 0xF87F | ((result & 0xF) << 7);
        }
        *(_WORD *)(v6 + 2 * v3) = v10;
      }
      ++v3;
    }
    while (v3 < v4);
  }
  v15 = *(int *)(v1 + 60);
  if ((int)v15 >= 1)
  {
    v16 = *(int *)(v1 + 84);
    v17 = v15 + v16;
    do
    {
      v18 = *(int *)(*(_QWORD *)(v1 + 312) + 4 * v16);
      v19 = *(_QWORD **)(v1 + 8);
      v20 = *(unsigned __int16 *)(v19[54] + 2 * v18);
      if ((v20 & 0x60) == 0)
        goto LABEL_34;
      v21 = *(_QWORD **)(v1 + 16);
      v22 = v21[54];
      v23 = *(_WORD *)(v22 + 2 * v16);
      if ((v20 & 0x40) == 0 && (((v23 & 0x20) == 0) & (v20 >> 5)) == 0)
        goto LABEL_34;
      v24 = v21[45];
      if ((int)((unint64_t)(v21[46] - v24) >> 2) < 1)
      {
        v31 = v19[42];
        v32 = *(unsigned int *)(v31 + 8 * (_DWORD)v18);
        if ((int)v32 >= 1)
        {
          v33 = *(int *)(v31 + 8 * v18 + 4);
          v34 = (int *)(v19[45] + 4 * v33);
          v35 = (unsigned __int16 *)(v19[48] + 2 * v33);
          v28 = 0;
          v36 = v21[30];
          do
          {
            v37 = *v34++;
            v38 = *(_QWORD *)(v1 + 192) + 8 * v37;
            LODWORD(v37) = *v35++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v36 + *(int *)(v38 + 4 * v37))), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
            --v32;
          }
          while (v32);
          goto LABEL_30;
        }
      }
      else
      {
        v25 = v21[42];
        v26 = *(unsigned int *)(v25 + 8 * (int)v16);
        if ((int)v26 >= 1)
        {
          v27 = (int *)(v24 + 4 * *(int *)(v25 + 8 * (_DWORD)v16 + 4));
          v28 = 0;
          v29 = v21[30];
          do
          {
            v30 = *v27++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v29 + v30)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
            --v26;
          }
          while (v26);
LABEL_30:
          v39 = v28.i32[0];
          v40 = (v28.i32[0] > 0) << 6;
          v41 = v28.i32[1];
          goto LABEL_32;
        }
      }
      v41 = 0;
      v39 = 0;
      v40 = 0;
LABEL_32:
      *(_WORD *)(v22 + 2 * v16) = v40 | v23 & 0xFFBF;
      if ((v23 & 0x30) == 0)
      {
        result = sub_1B2210460(0.0, (uint64_t)&v42, v41 + v39);
        *(_WORD *)(v22 + 2 * v16) = ((result & 0xF) << 7) | *(_WORD *)(v22 + 2 * v16) & 0xF87F;
      }
LABEL_34:
      ++v16;
    }
    while (v16 < v17);
  }
  return result;
}

void sub_1B221B6A8(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1B221B928((void **)a1, a2 - v3, a3);
  }
}

_QWORD *sub_1B221B6D8(_QWORD *result)
{
  uint64_t v1;
  uint64_t i;
  _DWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    for (i = 0; i < *(int *)(v1 + 4); ++i)
    {
      v3 = (_DWORD *)(result[24] + 8 * i);
      v4 = result[54];
      if ((*(_BYTE *)(v4 + i) & 1) != 0)
      {
        v7 = 2;
        *v3 = 2;
      }
      else
      {
        v5 = (int *)(*(_QWORD *)(v1 + 120) + 8 * i);
        v6 = result[57];
        if ((*(_BYTE *)(v6 + *v5) & 1) != 0)
        {
          *v3 = 1;
          *(_DWORD *)(result[27] + 4 * i) = 1;
        }
        if ((*(_BYTE *)(v6 + v5[1]) & 1) == 0)
          goto LABEL_10;
        v7 = 1;
      }
      v3[1] = v7;
      *(_DWORD *)(result[27] + 4 * i) = v7;
LABEL_10:
      v8 = *(_QWORD *)(v1 + 168);
      v9 = *(_QWORD *)(v1 + 144);
      v10 = *(int *)(v9 + ((8 * i) | 4));
      v11 = *(unsigned int *)(v9 + 8 * i);
      if ((_DWORD)v11 == 2)
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1 | (2
                                         * ((*(_BYTE *)(result[51] + *(int *)(v8 + 4 * v10 + 4)) ^ *(_BYTE *)(result[51] + *(int *)(v8 + 4 * v10))) & 1));
      }
      else if ((int)v11 > 1)
      {
        v13 = (int *)(v8 + 4 * v10);
        v15 = *v13;
        v14 = v13 + 1;
        v16 = *(unsigned __int8 *)(result[51] + v15);
        v17 = *(_BYTE *)(v4 + i) & 0xE1;
        *(_BYTE *)(v4 + i) = v17;
        v18 = v11 - 1;
        while (1)
        {
          v19 = *v14++;
          if (((*(unsigned __int8 *)(result[51] + v19) ^ v16) & 1) != 0)
            break;
          if (!--v18)
            goto LABEL_20;
        }
        v12 = v17 | 2;
      }
      else
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1;
      }
      *(_BYTE *)(v4 + i) = v12;
LABEL_20:
      v1 = result[1];
    }
  }
  return result;
}

void sub_1B221B810(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  char v16;

  v2 = a2;
  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        *v5++ &= 0xE0u;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = &v5[-*a1];
    v7 = (unint64_t)&v6[a2];
    if ((uint64_t)&v6[a2] < 0)
      abort();
    v8 = v4 - *a1;
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = operator new(v9);
    else
      v10 = 0;
    v12 = &v6[(_QWORD)v10];
    v13 = &v6[(_QWORD)v10 + v2];
    v14 = &v6[(_QWORD)v10];
    do
    {
      *v14++ &= 0xE0u;
      --v2;
    }
    while (v2);
    v15 = (_BYTE *)*a1;
    if (v5 != (_BYTE *)*a1)
    {
      do
      {
        v16 = *--v5;
        *--v12 = v16;
      }
      while (v5 != v15);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (char *)v10 + v9;
    if (v5)
      operator delete(v5);
  }
}

void sub_1B221B928(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1B17F7E58(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *sub_1B221BA34(void *result)
{
  off_1EEFD4CE8 = result;
  return result;
}

void *sub_1B221BA40(void *result)
{
  off_1EEFD4CF0 = result;
  return result;
}

uint64_t sub_1B221BA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  char __str[10240];
  uint64_t v13;

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x2800uLL, v10, &a9);
  if (off_1EEFD4CE8)
    return off_1EEFD4CE8(v9, __str);
  else
    return printf("%s: %s\n", off_1E63FC7F8[v9], __str);
}

uint64_t sub_1B221BB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;
  char __str[10240];
  uint64_t v12;

  v9 = (const char *)MEMORY[0x1E0C80A78](a1, a2);
  v12 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x2800uLL, v9, &a9);
  if (off_1EEFD4CF0)
    return off_1EEFD4CF0(__str);
  else
    return fprintf((FILE *)*MEMORY[0x1E0C80C20], "Warning: %s\n", __str);
}

_QWORD *sub_1B221BBCC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = a3;
  result[3] = *(_QWORD *)(a2 + 16);
  result[4] = a4;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  return result;
}

uint64_t sub_1B221BBEC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_1B221BC1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(a1[4] + 8) = *(_WORD *)(a1[2] + 8);
  v2 = a1[2];
  v3 = a1[4];
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(v2 + 12);
  *(_WORD *)(v3 + 13) = *(_WORD *)(v2 + 13);
  sub_1B221BCC4(a1);
  sub_1B221BDCC(a1);
  sub_1B221BE30((uint64_t)a1);
  sub_1B221BEE4(a1);
  sub_1B221BF6C((int **)a1);
  v4 = a1[4];
  if (!*(_BYTE *)(v4 + 13))
  {
    sub_1B221C0BC(a1);
    sub_1B221C204(a1);
    v4 = a1[4];
  }
  if (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(a1[3] + 8))
    return sub_1B2208850((void **)v4);
  else
    return sub_1B220886C((_QWORD *)v4);
}

void sub_1B221BCC4(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 52);
  v4 = *(int *)(*a1 + 56);
  if ((int)v4 >= 1)
  {
    v5 = *(int *)(v2 + 80);
    v6 = v4 + v5;
    do
    {
      v7 = *(int *)(*(_QWORD *)(v2 + 312) + 4 * v5);
      if ((*(_BYTE *)(*(_QWORD *)(a1[2] + 48) + v7) & 1) != 0)
        v8 = *(_DWORD *)(*(_QWORD *)(a1[1] + 144) + 8 * v7);
      else
        v8 = 1;
      v3 += v8;
      ++v5;
    }
    while (v5 < v6);
  }
  v9 = *(int *)(v2 + 60);
  if ((int)v9 >= 1)
  {
    v10 = *(int *)(v2 + 84);
    v11 = v9 + v10;
    v12 = *(_QWORD *)(v2 + 312);
    do
      v3 += *(unsigned __int16 *)(*(_QWORD *)(a1[2] + 72) + 2 * *(int *)(v12 + 4 * v10++));
    while (v10 < v11);
  }
  sub_1B2207870((_QWORD *)a1[4]);
  v13 = a1[4];
  v14 = *(_QWORD *)(v13 + 168);
  v15 = *(_QWORD *)(v13 + 176) - v14;
  if (v3 <= v15)
  {
    if (v3 < v15)
      *(_QWORD *)(v13 + 176) = v14 + v3;
  }
  else
  {
    sub_1B2213A14((void **)(v13 + 168), v3 - v15);
  }
  v16 = 0;
  sub_1B2207928((uint64_t)(a1 + 5), v3, &v16);
}

_QWORD *sub_1B221BDCC(_QWORD *a1)
{
  *(_DWORD *)(a1[4] + 16) = 0;
  if (*(_BYTE *)(*a1 + 37))
  {
    sub_1B221C514(a1);
    sub_1B221C564(a1);
    return sub_1B221C6D4(a1);
  }
  else
  {
    sub_1B221C6D4(a1);
    sub_1B221C514(a1);
    return sub_1B221C564(a1);
  }
}

void sub_1B221BE30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 168);
  v4 = *(int *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 176) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 176) = v3 + v4;
  }
  else
  {
    sub_1B2213A14((void **)(v2 + 168), v4 - v5);
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (!*(_BYTE *)(v2 + 13))
  {
    sub_1B22079D0(v2 + 192, *(int *)(v2 + 16));
    v2 = *(_QWORD *)(a1 + 32);
  }
  sub_1B18261FC(a1 + 40, *(int *)(v2 + 16));
  sub_1B17F8190(*(_QWORD *)(a1 + 32) + 144, *(int *)(*(_QWORD *)(a1 + 32) + 16));
  v6 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v6 + 16) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v6 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v7 < *(int *)(v6 + 16));
  }
}

_QWORD *sub_1B221BEE4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  LODWORD(v1) = *(_DWORD *)(*result + 44);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(result[4] + 48) + v2++) = 0;
    while (v2 < *(int *)(*result + 44));
    LODWORD(v1) = *(_DWORD *)(*result + 44);
  }
  if ((int)v1 < *(_DWORD *)(result[3] + 4))
  {
    v1 = (int)v1;
    do
    {
      *(_BYTE *)(*(_QWORD *)(result[4] + 48) + v1) = *(_BYTE *)(*(_QWORD *)(result[2] + 48)
                                                                + *(int *)(*(_QWORD *)(*result + 288) + 4 * v1));
      ++v1;
    }
    while (v1 < *(int *)(result[3] + 4));
  }
  return result;
}

int **sub_1B221BF6C(int **result)
{
  int **v1;
  int *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = result;
  v2 = *result;
  v3 = (*result)[13];
  if (v3 >= 1)
  {
    v4 = v2[19];
    v5 = v3 + v4;
    v6 = *(int *)(*((_QWORD *)result[4] + 12) + 4 * v4);
    do
    {
      *(_BYTE *)(*((_QWORD *)result[4] + 21) + v6) = 0;
      ++v4;
      ++v6;
    }
    while (v4 < v5);
    v2 = *result;
  }
  v7 = v2[14];
  if ((int)v7 >= 1)
  {
    v8 = v2[20];
    v9 = v7 + v8;
    if (*((_BYTE *)result[2] + 13))
      v10 = 1;
    else
      v10 = 9;
    do
    {
      v11 = v1[4];
      v12 = *((_QWORD *)v11 + 9);
      if (*(_WORD *)(v12 + 2 * v8))
      {
        if ((*(_BYTE *)(*((_QWORD *)v1[2] + 6) + *(int *)(*((_QWORD *)*v1 + 39) + 4 * v8)) & 9) != 0)
          v13 = v10;
        else
          v13 = 0;
        result = (int **)memset((void *)(*((_QWORD *)v11 + 21) + *(int *)(*((_QWORD *)v11 + 12) + 4 * v8)), v13, *(unsigned __int16 *)(v12 + 2 * v8));
      }
      ++v8;
    }
    while (v8 < v9);
    v2 = *v1;
  }
  v14 = v2[15];
  if ((int)v14 >= 1)
  {
    v15 = v2[21];
    v16 = v14 + v15;
    do
    {
      v17 = *(int *)(*((_QWORD *)*v1 + 39) + 4 * v15);
      result = (int **)memcpy((void *)(*((_QWORD *)v1[4] + 21) + *(int *)(*((_QWORD *)v1[4] + 12) + 4 * v15++)), (const void *)(*((_QWORD *)v1[2] + 21) + *(int *)(*((_QWORD *)v1[2] + 12) + 4 * v17)), *(unsigned __int16 *)(*((_QWORD *)v1[2] + 9) + 2 * v17));
    }
    while (v15 < v16);
  }
  return result;
}

_QWORD *sub_1B221C0BC(_QWORD *result)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int16 v13;
  _WORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  char v25;

  v1 = *result;
  if (*(_DWORD *)(*result + 32) == 4)
    v2 = 2;
  else
    v2 = 3;
  v3 = *(int *)(v1 + 56);
  if ((int)v3 >= 1)
  {
    v4 = *(int *)(v1 + 80);
    v5 = v3 + v4;
    v6 = (_QWORD *)result[4];
    v7 = v6[9];
    v8 = v6[12];
    v9 = v6[21];
    do
    {
      v10 = *(int *)(v8 + 4 * v4);
      v11 = (char *)(v9 + v10);
      if ((*(_BYTE *)(v9 + v10) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v1 + 384) + v4) & 1) == 0)
      {
        v12 = *(unsigned __int16 *)(v7 + 2 * v4);
        if (*(_WORD *)(v7 + 2 * v4))
        {
          v13 = 0;
          v14 = (_WORD *)(v6[24] + 4 * v10 + 2);
          do
          {
            v15 = *v11++;
            if ((v15 & 0x18) != 0)
            {
              *(v14 - 1) = v13;
              *v14 = v2 - 1 + v13;
            }
            v13 += v2;
            v14 += 2;
            --v12;
          }
          while (v12);
        }
      }
      ++v4;
    }
    while (v4 < v5);
  }
  v16 = *(int *)(v1 + 60);
  if ((int)v16 >= 1)
  {
    v17 = *(int *)(v1 + 84);
    v18 = v16 + v17;
    do
    {
      v19 = (_QWORD *)result[4];
      v20 = *(int *)(v19[12] + 4 * v17);
      v21 = (char *)(v19[21] + v20);
      if ((*v21 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(*result + 384) + v17) & 1) == 0)
      {
        v22 = *(unsigned __int16 *)(v19[9] + 2 * v17);
        if (*(_WORD *)(v19[9] + 2 * v17))
        {
          v23 = (_DWORD *)(*(_QWORD *)(result[2] + 192)
                         + 4
                         * *(int *)(*(_QWORD *)(result[2] + 96)
                                  + 4 * *(int *)(*(_QWORD *)(*result + 312) + 4 * v17)));
          v24 = (_DWORD *)(v19[24] + 4 * v20);
          do
          {
            v25 = *v21++;
            if ((v25 & 0x18) != 0)
              *v24 = *v23;
            ++v24;
            ++v23;
            --v22;
          }
          while (v22);
        }
      }
      ++v17;
    }
    while (v17 < v18);
  }
  return result;
}

void sub_1B221C204(_QWORD *a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  void *__p;
  uint64_t v43;

  v2 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1[2] + 14);
  v4 = *(unsigned int *)(a1[3] + 20);
  v40 = &v41;
  __p = 0;
  if (v4 >= 0x11)
  {
    v2 = operator new(4 * v4);
    __p = v2;
    v40 = (uint64_t *)v2;
  }
  v5 = *(int *)(*a1 + 60);
  if ((int)v5 >= 1)
  {
    v6 = *(int *)(*a1 + 84);
    v7 = v5 + v6;
    while (1)
    {
      v8 = (_QWORD *)a1[4];
      v9 = *(int *)(v8[12] + 4 * v6);
      v10 = (char *)(v8[21] + v9);
      if ((*v10 & 1) == 0)
        goto LABEL_9;
      v11 = *a1;
      if ((*(_BYTE *)(*(_QWORD *)(*a1 + 384) + v6) & 1) != 0)
        goto LABEL_9;
      v12 = *(int *)(*(_QWORD *)(v11 + 312) + 4 * v6);
      v13 = (_QWORD *)a1[1];
      if ((*(_WORD *)(v13[54] + 2 * v12) & 0x60) == 0)
        goto LABEL_9;
      v14 = (_QWORD *)a1[3];
      v15 = *(_WORD *)(v14[54] + 2 * v6);
      if ((v15 & 0x30) != 0)
        goto LABEL_9;
      v16 = *(unsigned __int16 *)(v8[9] + 2 * v6);
      if ((v15 & 0x40) == 0)
      {
        if (*(_WORD *)(v8[9] + 2 * v6))
        {
          do
          {
            if ((*v10 & 0x10) != 0)
              *v10 = *v10 & 0xC7 | 8;
            ++v10;
            --v16;
          }
          while (v16);
        }
        goto LABEL_9;
      }
      v17 = v8[24];
      v18 = v14[45];
      if (((v14[46] - v18) & 0x3FFFFFFFCLL) != 0)
      {
        v20 = v14[42];
        v19 = (uint64_t *)(v18 + 4 * *(int *)(v20 + 8 * (_DWORD)v6 + 4));
        LODWORD(v20) = *(_DWORD *)(v20 + 8 * (int)v6);
      }
      else
      {
        v21 = v13[42];
        v20 = *(unsigned int *)(v21 + 8 * (_DWORD)v12);
        v19 = v40;
        if ((int)v20 >= 1)
        {
          v22 = 0;
          v23 = *(int *)(v21 + 8 * v12 + 4);
          v24 = v13[45] + 4 * v23;
          v25 = v13[48] + 2 * v23;
          v26 = *(_QWORD *)(v11 + 192);
          do
          {
            *((_DWORD *)v40 + v22) = *(_DWORD *)(v26
                                               + 8 * *(int *)(v24 + 4 * v22)
                                               + 4 * *(unsigned __int16 *)(v25 + 2 * v22));
            ++v22;
          }
          while (v20 != v22);
        }
      }
      if ((_DWORD)v16)
        break;
LABEL_9:
      if (++v6 >= v7)
      {
        v2 = __p;
        goto LABEL_51;
      }
    }
    v27 = 0;
    v28 = v17 + 4 * v9;
    while (1)
    {
      v29 = v10[v27];
      if ((v29 & 0x30) == 0x10)
      {
        v30 = (unsigned __int16 *)(v28 + 4 * v27);
        v31 = *v30;
        v32 = v30[1];
        if (v32 <= v31)
        {
          if (v31 <= v32)
            goto LABEL_41;
          if ((int)v31 + 1 < (int)v20)
          {
            do
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v31 + 1));
              if ((v36 & 8) != 0)
                break;
              v37 = v31 + 2;
              ++v31;
            }
            while (v37 < (int)v20);
            if ((v36 & 8) != 0)
              goto LABEL_42;
          }
          v38 = 0;
          do
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v38));
            if ((v34 & 8) != 0)
              break;
            v35 = v38++ >= v32;
          }
          while (!v35);
        }
        else
        {
          v33 = v31 + 1;
          do
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a1[3] + 240) + *((int *)v19 + v33));
            if ((v34 & 8) != 0)
              break;
            v35 = v33++ >= v32;
          }
          while (!v35);
        }
        if ((v34 & 8) == 0)
LABEL_41:
          v10[v27] = v29 & 0xC7 | 8;
      }
LABEL_42:
      if (++v27 == v16)
      {
        if (v3 && (_DWORD)v16 == 2)
        {
          v39 = *v10;
          if ((*v10 & 0x20) != 0 && (v10[1] & 0x10) == 0)
          {
LABEL_50:
            *v10 = v39 & 0xDF;
          }
          else if ((*v10 & 0x10) == 0 && (v10[1] & 0x20) != 0)
          {
            v39 = *++v10;
            goto LABEL_50;
          }
        }
        goto LABEL_9;
      }
    }
  }
LABEL_51:
  operator delete(v2);
}

_QWORD *sub_1B221C514(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(int *)(*result + 52);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(*result + 76);
    v3 = v1 + v2;
    v4 = result[4];
    v5 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 72);
    v7 = *(_DWORD *)(v4 + 16);
    do
    {
      *(_DWORD *)(v5 + 4 * v2) = v7;
      *(_WORD *)(v6 + 2 * v2) = 1;
      v7 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v7;
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

_QWORD *sub_1B221C564(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t i;

  v1 = *result;
  v2 = *(int *)(*result + 56);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(v1 + 80);
    v4 = v2 + v3;
    v5 = *(_QWORD *)(v1 + 312);
    v6 = result[4];
    v7 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(result[2] + 48);
    v9 = *(_DWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 72);
    do
    {
      v11 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v9;
      if ((*(_BYTE *)(v8 + v11) & 1) != 0)
      {
        v13 = result[1];
        v14 = *(_QWORD *)(v13 + 144);
        v12 = *(unsigned int *)(v14 + 8 * (_DWORD)v11);
        if ((_DWORD)v12 != 1)
        {
          v15 = *(_QWORD *)(v13 + 168);
          v16 = *(int *)(v14 + 8 * v11 + 4);
          if ((int)v12 >= 1)
          {
            v17 = 0;
            v18 = result[5] + 2 * v9;
            do
            {
              *(_WORD *)(v18 + 2 * v17) = v17;
              ++v17;
            }
            while (v12 != v17);
          }
          v19 = *(_QWORD *)(*(_QWORD *)v6 + 264);
          v20 = *(unsigned int *)(v19 + 8 * (int)v3);
          if ((int)v20 >= 1)
          {
            v21 = 0;
            v22 = v15 + 4 * v16;
            v23 = (8 * ((unint64_t)(2 * (int)v3) >> 1)) | 4;
            v24 = *(_QWORD *)(result[3] + 288) + 4 * *(int *)(*(_QWORD *)(result[3] + 264) + v23);
            v25 = *(_QWORD *)(v6 + 120) + 2 * *(int *)(v19 + v23);
            v26 = *(_QWORD *)(v1 + 264);
            do
            {
              v27 = *(_DWORD *)(v26 + 4 * *(int *)(v24 + 4 * v21));
              if ((_DWORD)v12 == 2)
              {
                if (v27 == *(_DWORD *)(v22 + 4))
                  *(_WORD *)(v25 + 2 * v21) = 1;
              }
              else if ((int)v12 >= 1)
              {
                for (i = 0; i != v12; ++i)
                {
                  if (v27 == *(_DWORD *)(v22 + 4 * i))
                    *(_WORD *)(v25 + 2 * v21) = i;
                }
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
      }
      else
      {
        LODWORD(v12) = 1;
      }
      *(_WORD *)(v10 + 2 * v3) = v12;
      v9 = *(_DWORD *)(v6 + 16) + v12;
      *(_DWORD *)(v6 + 16) = v9;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

_QWORD *sub_1B221C6D4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  _WORD *v20;
  __int16 v21;

  v1 = *result;
  v2 = *(int *)(*result + 60);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(v1 + 84);
    v4 = v2 + v3;
    v5 = *(_QWORD *)(v1 + 312);
    v6 = result[4];
    v7 = *(_QWORD *)(v6 + 96);
    v8 = (_QWORD *)result[2];
    v9 = v8[12];
    v10 = v8[21];
    v11 = *(_DWORD *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      v13 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v11;
      if ((*(_BYTE *)(v10 + *(int *)(v9 + 4 * v13)) & 1) != 0)
      {
        v14 = *(unsigned __int16 *)(v8[9] + 2 * v13);
        if (v14 >= 2)
        {
          v15 = result[5] + 2 * v11;
          for (i = 1; i != v14; ++i)
            *(_WORD *)(v15 + 2 * i) = i;
          v17 = *(_QWORD *)(*(_QWORD *)v6 + 264);
          v18 = *(unsigned int *)(v17 + 8 * (_DWORD)v3);
          if ((int)v18 >= 1)
          {
            v19 = (__int16 *)(v8[15] + 2 * *(int *)(*(_QWORD *)(*v8 + 264) + 4 * (int)((2 * v13) | 1)));
            v20 = (_WORD *)(*(_QWORD *)(v6 + 120) + 2 * *(int *)(v17 + 8 * (int)v3 + 4));
            do
            {
              v21 = *v19++;
              *v20++ = v21;
              --v18;
            }
            while (v18);
          }
        }
      }
      else
      {
        LODWORD(v14) = 1;
      }
      *(_WORD *)(v12 + 2 * v3) = v14;
      v11 = *(_DWORD *)(v6 + 16) + v14;
      *(_DWORD *)(v6 + 16) = v11;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

float sub_1B221C7C8(_QWORD *a1, int a2, unsigned int a3, int a4)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  float *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v54;
  int v56;
  float *v57;
  int v58;
  int v59;
  _BYTE v60[128];
  float *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE v64[64];
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = (int *)v64;
  v62 = v64;
  v63 = 0x1000000000;
  v65 = 0;
  v7 = a1[1];
  v8 = *(_QWORD *)(v7 + 360);
  v9 = a2;
  v10 = (2 * a2) | 1;
  v11 = *(_QWORD *)(v7 + 336);
  v12 = *(int *)(v11 + 4 * v10);
  v13 = (int *)(v8 + 4 * v12);
  v14 = *(unsigned int *)(v11 + 8 * a2);
  v15 = (_QWORD *)a1[3];
  v16 = v15[45];
  if (((v15[46] - v16) & 0x3FFFFFFFCLL) != 0)
  {
    v6 = (int *)(v16 + 4 * *(int *)(v15[42] + 8 * a4 + 4));
    goto LABEL_11;
  }
  if (!(_DWORD)v14)
  {
    v18 = a2;
    operator delete(0);
    v9 = v18;
    v63 = 0x1000000000;
    v19 = (float *)v60;
    v57 = (float *)v60;
    v58 = 0;
    v59 = 32;
    v61 = 0;
    v62 = v64;
    goto LABEL_13;
  }
  if (v14 <= 0x10)
  {
    LODWORD(v63) = v14;
    v17 = *(_QWORD *)(a1[1] + 384) + 2 * *(int *)(*(_QWORD *)(a1[1] + 336) + 4 * v10);
  }
  else
  {
    v54 = a2;
    operator delete(0);
    v6 = (int *)operator new(4 * v14);
    v65 = v6;
    v62 = v6;
    LODWORD(v63) = v14;
    HIDWORD(v63) = v14;
    if ((int)v14 < 1)
    {
      v9 = v54;
      goto LABEL_11;
    }
    v17 = *(_QWORD *)(a1[1] + 384) + 2 * *(int *)(*(_QWORD *)(a1[1] + 336) + 4 * v10);
    v9 = v54;
  }
  v20 = 0;
  v21 = *(_QWORD *)(*a1 + 192);
  do
  {
    v6[v20] = *(_DWORD *)(v21 + 8 * v13[v20] + 4 * *(unsigned __int16 *)(v17 + 2 * v20));
    ++v20;
  }
  while (v14 != v20);
LABEL_11:
  v19 = (float *)v60;
  v57 = (float *)v60;
  v58 = 2 * v14;
  v59 = 32;
  v61 = 0;
  if ((2 * v14) >= 0x21)
  {
    v22 = a3;
    v23 = v9;
    v24 = (float *)operator new(4 * (2 * v14));
    v9 = v23;
    a3 = v22;
    v19 = v24;
    v61 = v24;
    v57 = v24;
    v59 = 2 * v14;
  }
LABEL_13:
  v25 = (unsigned __int16 *)(*(_QWORD *)(a1[2] + 192) + 4 * *(int *)(*(_QWORD *)(a1[2] + 96) + 4 * v9) + 4 * a3);
  v26 = *v25;
  v27 = v25[1];
  v28 = (v27 - v26);
  if (v27 <= v26)
  {
    v29 = a1[1];
    if (v26 <= v27)
    {
      LODWORD(v28) = 0;
      v31 = a1[3];
    }
    else
    {
      v39 = *(_QWORD *)(v29 + 216);
      v31 = a1[3];
      v40 = *(_QWORD *)(v31 + 216);
      if ((int)v26 + 1 >= (int)v14)
      {
        v41 = 0;
      }
      else
      {
        v41 = (v14 + ~(_DWORD)v26);
        v42 = (int *)(4 * v12 + 4 * v26 + v8 + 4);
        v43 = &v6[v26 + 1];
        v44 = v41;
        v45 = v19;
        do
        {
          v46 = *v42++;
          *v45 = *(float *)(v39 + 4 * v46);
          v47 = *v43++;
          v45[(int)v14] = *(float *)(v40 + 4 * v47);
          ++v45;
          --v44;
        }
        while (v44);
      }
      v48 = v27 + 1;
      v49 = &v19[v41];
      LODWORD(v28) = v27 + v41 + 1;
      do
      {
        v50 = *v13++;
        *v49 = *(float *)(v39 + 4 * v50);
        v51 = *v6++;
        v49[(int)v14] = *(float *)(v40 + 4 * v51);
        ++v49;
        --v48;
      }
      while (v48);
    }
  }
  else
  {
    v29 = a1[1];
    v30 = *(_QWORD *)(v29 + 216);
    v31 = a1[3];
    v32 = *(_QWORD *)(v31 + 216);
    v33 = &v6[v26 + 1];
    v34 = (int *)(4 * v12 + 4 * v26 + v8 + 4);
    v35 = v28;
    v36 = v19;
    do
    {
      v37 = *v34++;
      *v36 = *(float *)(v30 + 4 * v37);
      v38 = *v33++;
      v36[(int)v14] = *(float *)(v32 + 4 * v38);
      ++v36;
      --v35;
    }
    while (v35);
  }
  v56 = *(_DWORD *)(*a1 + 24);
  v52 = sub_1B22104D4(&v56, v28, v19, &v19[(int)v14], *(float *)(*(_QWORD *)(v29 + 408) + 4 * v9), *(float *)(*(_QWORD *)(v31 + 408) + 4 * a4));
  operator delete(v61);
  operator delete(v65);
  return v52;
}

double sub_1B221CB70(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v4;
  double result;

  sub_1B22197F4(a1, a2, a3, a4);
  *v4 = &off_1E63CDFE0;
  v4[65] = 0;
  v4[63] = 0;
  v4[64] = 0;
  *(_QWORD *)&result = 0x300000001;
  *(_QWORD *)((char *)v4 + 28) = 0x300000001;
  return result;
}

_QWORD *sub_1B221CBA4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CDFE0;
  v2 = (void *)a1[63];
  if (v2)
  {
    a1[64] = v2;
    operator delete(v2);
  }
  return sub_1B221988C(a1);
}

void sub_1B221CBE4(_QWORD *a1)
{
  sub_1B221CBA4(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B221CC08(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;

  v2 = *(int **)(a1 + 8);
  v4 = *((_QWORD *)v2 + 9);
  v3 = *((_QWORD *)v2 + 10);
  v6 = *((_QWORD *)v2 + 15);
  v5 = *((_QWORD *)v2 + 16);
  v8 = *v2;
  v7 = v2[1];
  v9 = v2[2];
  v19 = 4;
  sub_1B220B058(a1 + 504, 2 * v8, &v19);
  v10 = *(int **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 504);
  if (*v10 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = (_DWORD *)(v11 + 4);
    do
    {
      *v14 = v12;
      v14 += 2;
      ++v13;
      v12 += 4;
    }
    while (v13 < *v10);
  }
  v15 = (unint64_t)(*(_QWORD *)(a1 + 512) - v11) >> 2;
  *(_QWORD *)(a1 + 88) = v11;
  *(_DWORD *)(a1 + 96) = v15;
  v16 = *((_QWORD *)v10 + 3);
  v17 = (unint64_t)(*((_QWORD *)v10 + 4) - v16) >> 2;
  *(_QWORD *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 112) = v17;
  v18 = 0;
  sub_1B220B058(a1 + 120, 4 * v8, &v18);
  sub_1B220B058(a1 + 144, (int)((v3 - v4) >> 2), &v18);
  sub_1B220B058(a1 + 192, (int)((v5 - v6) >> 2), &v18);
  sub_1B220B058(a1 + 168, 0, &v18);
  sub_1B220B058(a1 + 216, v7, &v18);
  sub_1B220B058(a1 + 240, v9, &v18);
}

_QWORD *sub_1B221CD3C(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_1B221CD84((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_1B17F8190((uint64_t)(v2 + 12), 3 * *v2);
  return sub_1B221CDFC(a1);
}

void sub_1B221CD84(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v2 = *(int **)(a1 + 16);
  v3 = *v2;
  v8 = 3;
  sub_1B220B058((uint64_t)(v2 + 6), 2 * v3, &v8);
  v4 = *(int **)(a1 + 16);
  if (*v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(*((_QWORD *)v4 + 3) + 4);
    do
    {
      *v7 = v5;
      v7 += 2;
      ++v6;
      v5 += 3;
    }
    while (v6 < *v4);
  }
}

_QWORD *sub_1B221CDFC(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 6);
    v4 = *((_QWORD *)v1 + 9);
    v5 = result[15];
    v6 = result[27];
    v7 = (int *)(result[11] + 4);
    v8 = (int *)(*((_QWORD *)v1 + 3) + 4);
    do
    {
      v9 = *v8;
      v8 += 2;
      v10 = (int *)(v3 + 4 * v9);
      v11 = (int *)(v4 + 4 * v9);
      v12 = *v7;
      v7 += 2;
      v13 = *(_DWORD *)(v6 + 4 * *v11);
      v14 = *(_DWORD *)(v6 + 4 * v11[1]);
      v15 = (_DWORD *)(v5 + 4 * v12);
      v16 = *(_DWORD *)(v6 + 4 * v11[2]);
      if (*v15 != -1)
      {
        v17 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * *v15) | 1)));
        *v17 = *(_DWORD *)(result[30] + 4 * *v10);
        v17[1] = v13;
        v17[2] = v16;
      }
      v18 = v15[1];
      if (v18 != -1)
      {
        v19 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v18) | 1)));
        *v19 = v13;
        v19[1] = *(_DWORD *)(result[30] + 4 * v10[1]);
        v19[2] = v14;
      }
      v20 = v15[2];
      if (v20 != -1)
      {
        v21 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v20) | 1)));
        *v21 = v16;
        v21[1] = v14;
        v21[2] = *(_DWORD *)(result[30] + 4 * v10[2]);
      }
      v22 = v15[3];
      if (v22 != -1)
      {
        v23 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v22) | 1)));
        *v23 = v14;
        v23[1] = v16;
        v23[2] = v13;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_1B221CF44(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_1B221CD84((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_1B17F8190((uint64_t)(v2 + 18), 3 * *v2);
  return sub_1B221CF8C(a1);
}

_QWORD *sub_1B221CF8C(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 3);
    v4 = *((_QWORD *)v1 + 6);
    v5 = *((_QWORD *)v1 + 9);
    v6 = result[11];
    v7 = result[15];
    v8 = result[13];
    v9 = result[18];
    v10 = result[24];
    v11 = *((_QWORD *)v1 + 15);
    do
    {
      v12 = (8 * v2) | 4;
      v13 = *(int *)(v3 + v12);
      v14 = (_DWORD *)(v4 + 4 * v13);
      v15 = (int *)(v5 + 4 * v13);
      v16 = *(int *)(v6 + v12);
      v17 = *(int *)(v8 + v12);
      for (i = 4; i != 28; i += 8)
      {
        v20 = *v15++;
        v19 = v20;
        v21 = (_DWORD *)(v11 + 8 * v20);
        v22 = *v21 != v21[1] && *v14 != *v21;
        v23 = v10 + 8 * v19;
        v24 = *(_DWORD *)(v23 + 4 * v22);
        v25 = (int *)((char *)&v36 + i);
        LODWORD(v23) = *(_DWORD *)(v23 + 4 * !v22);
        *(v25 - 1) = v24;
        *v25 = v23;
        ++v14;
      }
      v26 = (_DWORD *)(v7 + 4 * v16);
      v27 = (_DWORD *)(v9 + 4 * v17);
      if (*v26 != -1)
      {
        v28 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * *v26) | 1)));
        v29 = v39;
        *v28 = v36;
        v28[1] = *v27;
        v28[2] = v29;
      }
      v30 = v26[1];
      if (v30 != -1)
      {
        v31 = *(_QWORD *)(result[2] + 72) + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v30) | 1));
        *(_QWORD *)v31 = v37;
        *(_DWORD *)(v31 + 8) = v27[1];
      }
      v32 = v26[2];
      if (v32 != -1)
      {
        v33 = *(_QWORD *)(result[2] + 72) + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v32) | 1));
        *(_DWORD *)v33 = v27[2];
        *(_QWORD *)(v33 + 4) = v38;
      }
      v34 = v26[3];
      if (v34 != -1)
      {
        v35 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v34) | 1)));
        *v35 = v27[2];
        v35[1] = *v27;
        v35[2] = v27[1];
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_1B221D18C(_QWORD *a1)
{
  sub_1B17F8190(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_1B221D1C8(a1);
  return sub_1B221D284(a1);
}

_QWORD *sub_1B221D1C8(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 9);
    v4 = result[18];
    v5 = result[27];
    v6 = (int *)(result[13] + 4);
    v7 = (int *)(*((_QWORD *)v1 + 3) + 4);
    do
    {
      v8 = *v7;
      v7 += 2;
      v9 = (int *)(v3 + 4 * v8);
      v10 = *v6;
      v6 += 2;
      v11 = *(_DWORD *)(v5 + 4 * *v9);
      v12 = *(_DWORD *)(v5 + 4 * v9[1]);
      v13 = (int *)(v4 + 4 * v10);
      v14 = *(_DWORD *)(v5 + 4 * v9[2]);
      v15 = *v13;
      if ((_DWORD)v15 != -1)
      {
        v16 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v15);
        *v16 = v11;
        v16[1] = v14;
      }
      v17 = v13[1];
      if ((_DWORD)v17 != -1)
      {
        v18 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v17);
        *v18 = v12;
        v18[1] = v11;
      }
      v19 = v13[2];
      if ((_DWORD)v19 != -1)
      {
        v20 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v19);
        *v20 = v14;
        v20[1] = v12;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_1B221D284(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = (int *)(result[24] + 4);
    v4 = (int *)(*(_QWORD *)(v1 + 120) + 4);
    do
    {
      v5 = *(v3 - 1);
      if ((_DWORD)v5 != -1)
      {
        v6 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v5);
        *v6 = *(_DWORD *)(result[27] + 4 * v2);
        v6[1] = *(_DWORD *)(result[30] + 4 * *(v4 - 1));
      }
      v7 = *v3;
      if ((_DWORD)v7 != -1)
      {
        v8 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v7);
        *v8 = *(_DWORD *)(result[27] + 4 * v2);
        v8[1] = *(_DWORD *)(result[30] + 4 * *v4);
      }
      ++v2;
      v3 += 2;
      v4 += 2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_1B221D32C(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = 2 * (((*(_QWORD *)(a1[1] + 176) - *(_QWORD *)(a1[1] + 168)) >> 2) + ((a1[19] - a1[18]) >> 2));
  sub_1B17F8190(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_1B17F8190(a1[2] + 168, v2);
  sub_1B18261FC(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_1B221D3F4(a1);
  sub_1B221D528(a1);
  v3 = a1[2];
  v4 = (int *)(*(_QWORD *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_1B17F8190(v3 + 168, v5);
  sub_1B18261FC(a1[2] + 192, v5);
}

_QWORD *sub_1B221D3F4(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _WORD *v25;
  uint64_t v26;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[11];
    v5 = result[15];
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v6 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = (8 * v3) | 4;
        v10 = (_DWORD *)(v5 + 4 * *(int *)(v4 + v9));
        v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        v12 = v10[3];
        v13 = 1;
        do
        {
          v15 = *v11++;
          v14 = v15;
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v14);
            *v18 = 2;
            if ((_DWORD)v14)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v20 = v13 % 3;
            v21 = 2 * v14;
            v18[1] = v19;
            v22 = *(_DWORD *)(v16 + 16);
            if (v22 <= 2)
              v22 = 2;
            *(_DWORD *)(v16 + 16) = v22;
            v23 = *(int *)(v17 + 4 * (v21 | 1));
            v24 = (_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v23);
            v25 = (_WORD *)(*(_QWORD *)(v16 + 192) + 2 * v23);
            if (*v10 == -1)
            {
              v26 = 0;
            }
            else
            {
              *v24 = *v10;
              *v25 = v20;
              v26 = 1;
            }
            if (v12 != -1)
            {
              v24[v26] = v12;
              v25[v26] = v20;
              LODWORD(v26) = v26 + 1;
            }
            *v18 = v26;
          }
          ++v13;
          ++v10;
          --v8;
        }
        while (v8);
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B221D528(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[24];
    do
    {
      v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v1 + 144);
        v8 = *(int *)(v7 + ((8 * v3) | 4));
        v9 = *(unsigned int *)(v7 + 8 * v3);
        v10 = *(_QWORD *)(v1 + 168) + 4 * v8;
        v11 = *(_QWORD *)(v1 + 192) + 2 * v8;
        v12 = (_DWORD *)(*(_QWORD *)(v1 + 120) + 8 * v3);
        v13 = 1;
        do
        {
          v14 = v13;
          v15 = (int)v5[v6];
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v15);
            *v18 = v9;
            if ((_DWORD)v15)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v18[1] = v19;
            v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9)
              v20 = v9;
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              v23 = *(_QWORD *)(v16 + 168) + 4 * v22;
              v24 = *(_QWORD *)(v16 + 192) + 2 * v22;
              v25 = *(_QWORD *)(v1 + 24);
              v26 = result[11];
              v27 = result[15];
              v28 = v9;
              v29 = (int *)v10;
              v30 = (unsigned __int16 *)v11;
              do
              {
                v32 = *v29++;
                v31 = v32;
                LODWORD(v32) = *v30++;
                v33 = v32;
                v34 = (2 * v31) | 1;
                v35 = v6;
                if (*v12 != v12[1])
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                v36 = v27 + 4 * *(int *)(v26 + 4 * v34);
                v37 = v35 + v33;
                if (v37 == *(_DWORD *)(v25 + 8 * (_DWORD)v31))
                  v38 = 0;
                else
                  v38 = v37;
                v39 = *(_DWORD *)(v36 + 4 * v38);
                if (v39 != -1)
                {
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *v18 = v21;
          }
          v13 = 0;
          v6 = 1;
        }
        while ((v14 & 1) != 0);
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_1B221D6E8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 296) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 288)) >> 2)
     + 3 * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168)) >> 2);
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 264, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 288, v2);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 312, v2);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_1B221D8A4((_QWORD *)a1);
    sub_1B221D7C0((_QWORD *)a1);
  }
  else
  {
    sub_1B221D7C0((_QWORD *)a1);
    sub_1B221D8A4((_QWORD *)a1);
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (int *)(*(_QWORD *)(v3 + 264) + 4 * (2 * *(_DWORD *)(v3 + 8) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_1B17F8190(v3 + 288, v5);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 312, v5);
}

_QWORD *sub_1B221D7C0(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 288);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 312);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v24;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B221D8A4(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 192);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = 2 * v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = v22 + 1 - 3 * ((1431655766 * (unint64_t)(v22 + 1)) >> 32);
            v25 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            v26 = *(_DWORD *)(v25 + 4 * v24);
            if (v26 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v26;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            v27 = *(_DWORD *)(v25 + 12);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              *(_WORD *)(v18 + 2 * v14++) = v23
                                            + 2
                                            - 3 * ((1431655766 * (unint64_t)(v23 + 2)) >> 32);
            }
            v28 = *(_DWORD *)(v25 + 4 * v23);
            if (v28 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v28;
              *(_WORD *)(v18 + 2 * v14++) = v24;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_1B221D9F4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((*(_QWORD *)(v2 + 368) - *(_QWORD *)(v2 + 360)) >> 2)
     + 2 * (*(_DWORD *)(v2 + 4) + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2));
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 336, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 360, v3);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_1B221DBC8((_QWORD *)a1);
    sub_1B221DAD0((_QWORD *)a1);
  }
  else
  {
    sub_1B221DAD0((_QWORD *)a1);
    sub_1B221DBC8((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_1B17F8190(v4 + 360, v6);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 384, v6);
}

_QWORD *sub_1B221DAD0(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 360);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 336) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 384);
        v11 = result[2];
        v12 = *(_QWORD *)(v11 + 336);
        v13 = (_DWORD *)(v12 + 8 * v5);
        *v13 = v8;
        if ((_DWORD)v5)
          v14 = *(v13 - 1) + *(v13 - 2);
        else
          v14 = 0;
        v13[1] = v14;
        v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8)
          v15 = v8;
        *(_DWORD *)(v11 + 20) = v15;
        if ((int)v8 < 1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = (int *)(v6 + 4 * v9);
          v18 = (unsigned __int16 *)(v10 + 2 * v9);
          v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          v20 = *(_QWORD *)(v11 + 360) + 4 * v19;
          v21 = *(_QWORD *)(v11 + 384) + 2 * v19;
          v22 = result[24];
          do
          {
            v23 = *v17++;
            v24 = v22 + 8 * v23;
            LODWORD(v23) = *v18++;
            v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *v13 = v16;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B221DBC8(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = result[24];
        v12 = result[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (_DWORD *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        if ((int)v7 < 1)
        {
          v19 = 0;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = v6 + 4 * v8;
          v21 = v9 + 2 * v8;
          v22 = (_DWORD *)(v10 + 8 * v3);
          v23 = v11 + 8 * v3;
          v24 = *(int *)(v14 + 4 * (int)((2 * v5) | 1));
          v25 = *(_QWORD *)(v12 + 360) + 4 * v24;
          v26 = *(_QWORD *)(v12 + 384) + 2 * v24;
          v27 = result[13];
          v28 = result[18];
          v29 = -1;
          do
          {
            v30 = *(unsigned __int16 *)(v21 + 2 * v17);
            v31 = (2 * *(int *)(v20 + 4 * v17)) | 1;
            v32 = v28 + 4 * *(int *)(v27 + 4 * v31);
            if (v17)
            {
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * v30);
            }
            else
            {
              if (*v22 != v22[1])
                v18 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30) != *v22;
              v35 = *(_DWORD *)(v23 + 4 * !v18);
              v29 = *(_DWORD *)(v23 + 4 * v18);
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * v30);
              if (v35 != -1)
              {
                *(_DWORD *)(v25 + 4 * v19) = v35;
                *(_WORD *)(v26 + 2 * v19++) = 0;
              }
            }
            if (v33 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v33;
              *(_WORD *)(v26 + 2 * v19++) = 1;
            }
            if (v34 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v34;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            if (!v17 && v29 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v29;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            ++v17;
          }
          while (v7 != v17);
        }
        *v15 = v19;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B221DDD0(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = 4;
    *(_QWORD *)&v4 = 0x200000002;
    *((_QWORD *)&v4 + 1) = 0x200000002;
    do
    {
      v5 = result[15] + 4 * *(int *)(result[11] + v3);
      v6 = result[18] + 4 * *(int *)(result[13] + v3);
      v7 = result[51];
      if ((*(_BYTE *)(v7 + v2) & 1) != 0)
      {
        *(_OWORD *)v5 = v4;
        *(_DWORD *)v6 = 2;
        *(_QWORD *)(v6 + 4) = 0x200000002;
        *(_BYTE *)(v7 + v2) &= 0xE1u;
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)v1 + 3) + v3);
        v9 = (int *)(*((_QWORD *)v1 + 6) + 4 * v8);
        if ((*(_BYTE *)(result[57] + v9[1]) & 1)
           + (*(_BYTE *)(result[57] + *v9) & 1)
           + (*(_BYTE *)(result[57] + v9[2]) & 1))
        {
          v10 = *(_BYTE *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 4)) & 0xE | (*(unsigned __int8 *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8)) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 8))) & 0xC;
          *(_BYTE *)(v7 + v2) = *(_BYTE *)(v7 + v2) & 0xE1 | (2 * v10);
          if (v10)
          {
            *(_DWORD *)(v5 + 12) = 1;
            *(_DWORD *)v6 = 1;
            *(_QWORD *)(v6 + 4) = 0x100000001;
          }
          v11 = result[57];
          if ((*(_BYTE *)(v11 + *v9) & 1) != 0)
          {
            *(_DWORD *)v5 = 1;
            *(_DWORD *)v6 = 1;
          }
          if ((*(_BYTE *)(v11 + v9[1]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 4) = 1;
            *(_DWORD *)(v6 + 4) = 1;
          }
          if ((*(_BYTE *)(v11 + v9[2]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 8) = 1;
            *(_DWORD *)(v6 + 8) = 1;
          }
        }
      }
      ++v2;
      v1 = (int *)result[1];
      v3 += 8;
    }
    while (v2 < *v1);
  }
  return result;
}

void sub_1B221DF34(uint64_t a1@<X8>)
{
  void **v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  void *__p[2];
  unsigned __int8 v7;
  std::string v8;

  sub_1B1970F28(&v8, "#define OSD_METAL_IOS 1\n");
  sub_1B1970F28(__p, aLine0OsdMtlpat);
  if ((v7 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v3 = v7;
  else
    v3 = (std::string::size_type)__p[1];
  v4 = std::string::append(&v8, (const std::string::value_type *)v2, v3);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B197137C((_BYTE *)a1, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v5;
  }
  if ((char)v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1B221DFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B221E018()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  unsigned __int8 v5;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  sub_1B195B954((uint64_t)v6);
  sub_1B1960B04(v7, (uint64_t)"#define OSD_PATCH_BASIS_METAL 1\n", 32);
  sub_1B1970F28(__p, aCopyright2016P);
  if ((v5 & 0x80u) == 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v1 = v5;
  else
    v1 = (uint64_t)__p[1];
  sub_1B1960B04(v7, (uint64_t)v0, v1);
  if ((char)v5 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v2;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E22DDC](&v9);
}

void sub_1B221E11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1B195BA80((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B221E14C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 2) > 7)
    v2 = "";
  else
    v2 = off_1E63FC820[a1 - 2];
  return sub_1B1970F28(a2, v2);
}

uint64_t sub_1B221E17C(int a1)
{
  void *p_p;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  sub_1B195B954((uint64_t)v14);
  sub_1B221E14C(a1, &__p);
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v13 & 0x80u) == 0)
    v3 = v13;
  else
    v3 = v12;
  sub_1B1960B04(v15, (uint64_t)p_p, v3);
  if ((char)v13 < 0)
    operator delete(__p);
  sub_1B221DF34((uint64_t)&__p);
  if ((v13 & 0x80u) == 0)
    v4 = &__p;
  else
    v4 = __p;
  if ((v13 & 0x80u) == 0)
    v5 = v13;
  else
    v5 = v12;
  sub_1B1960B04(v15, (uint64_t)v4, v5);
  if ((char)v13 < 0)
    operator delete(__p);
  if ((a1 - 6) > 3)
    v6 = "";
  else
    v6 = (&off_1E63FC860)[a1 - 6];
  sub_1B1970F28(&__p, v6);
  if ((v13 & 0x80u) == 0)
    v7 = &__p;
  else
    v7 = __p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v12;
  sub_1B1960B04(v15, (uint64_t)v7, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v9;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E22DDC](&v17);
}

void sub_1B221E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1B195BA80((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1B221E350(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  void **v10;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = **(int **)(*(_QWORD *)(a2 + 88) + 24 * (((unint64_t)*(unsigned __int8 *)(a2 + 8) >> 2) & 0xF));
  v7 = 7 * v6;
  v8 = 112 * v6;
  if (v8 >= 104857600)
    v9 = 104857600;
  else
    v9 = v8;
  sub_1B17F7530(a3 + 2, v7);
  sub_1B17F7530(a3 + 8, v9);
  sub_1B1927690(a3 + 11, v9);
  v10 = *(void ***)(a1 + 8);
  if (v10)
  {
    sub_1B17F7530(v10 + 2, v7);
    sub_1B17F7530(v10 + 8, v7);
    sub_1B1927690(v10 + 11, v7);
  }
  return a1;
}

_QWORD *sub_1B221E420(uint64_t a1, uint64_t a2, int a3, __int16 *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v8;
  int32x4_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int16 v14;
  __int16 v15;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (int32x4_t *)(*(_QWORD *)(a2 + 48) + 4 * *(int *)(v8 + 8 * a3 + 4));
  v10 = *(unsigned int *)(v8 + 8 * a3);
  if ((a6 & 0x80000000) == 0)
    return (_QWORD *)sub_1B221E4B0(a1, a2);
  v11 = 0;
  v12 = -1;
  do
  {
    v14 = *(_WORD *)(*(_QWORD *)(a2 + 432) + 2 * v9->i32[v11]);
    if ((v14 & 0x780) != 0x80 || (v15 = *a4) != 0)
      LOBYTE(v15) = 1;
    if ((v14 & 2) != 0)
    {
      if (v12 < 0)
        v12 = v11;
      else
        LOBYTE(v15) = 1;
    }
    if (v11 > 2)
      break;
    ++v11;
    a4 += 3;
  }
  while ((v15 & 1) == 0);
  if ((v15 & 1) == 0)
    return sub_1B221EBE0((_QWORD **)a1, a2, a3, v12, v9, v10, a5, a6);
  else
    return (_QWORD *)sub_1B221E4B0(a1, a2);
}

uint64_t sub_1B221E4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t i;
  float v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t k;
  int v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t m;
  _BYTE *v87;
  uint64_t n;
  _BYTE *v89;
  uint64_t ii;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  int v96;
  uint64_t v97;
  _BYTE v98[16];
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[352];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[352];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[1776];
  int v115[86];
  void *__p;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _QWORD v121[18];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v97 = v6;
  v7 = v2;
  v121[16] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(v2 + 16);
  if (v3 < 0)
    v9 = *(_DWORD *)(v8 + 20);
  else
    v9 = sub_1B2222DB0(v8, v3);
  v96 = v5;
  v10 = 0;
  v11 = (_QWORD *)(v7 + 48);
  v12 = *(_DWORD *)(v7 + 24);
  v13 = *(char **)(v7 + 40);
  do
  {
    v14 = v12 + v9;
    if ((unint64_t)v13 >= *v11)
    {
      v16 = *(char **)(v7 + 32);
      v17 = (v13 - v16) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
LABEL_105:
        abort();
      v19 = *v11 - (_QWORD)v16;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)sub_1B17F7E58(v7 + 48, v20);
        v16 = *(char **)(v7 + 32);
        v13 = *(char **)(v7 + 40);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      *(_DWORD *)v22 = v14;
      v15 = v22 + 4;
      while (v13 != v16)
      {
        v23 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *(_QWORD *)(v7 + 32) = v22;
      *(_QWORD *)(v7 + 40) = v15;
      *(_QWORD *)(v7 + 48) = &v21[4 * v20];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v13 = v14;
      v15 = v13 + 4;
    }
    *(_QWORD *)(v7 + 40) = v15;
    v12 = *(_DWORD *)(v7 + 24) + 1;
    *(_DWORD *)(v7 + 24) = v12;
    ++v10;
    v13 = v15;
  }
  while (v10 != 16);
  sub_1B22197F0(v98);
  v121[0] = v98;
  v121[1] = &v103;
  v121[2] = &v108;
  v121[3] = &v100;
  v121[4] = &v107;
  v121[5] = &v111;
  v121[6] = &v112;
  v121[7] = &v104;
  v121[8] = &v106;
  v121[9] = v114;
  v121[10] = &v113;
  v121[11] = &v109;
  v121[12] = v102;
  v121[13] = v110;
  v121[14] = &v105;
  v121[15] = &v101;
  v24 = v99;
  v25 = &v117;
  v117 = &v119;
  v118 = 0x1000000010;
  v26 = 16;
  v120 = 0;
  do
  {
    *((_DWORD *)v25 + 4) = 0;
    v25[3] = (uint64_t *)(v25 + 5);
    v25[45] = 0;
    v25[4] = (uint64_t *)0x2800000028;
    v25 += 44;
    --v26;
  }
  while (v26);
  v27 = 0;
  v28 = (char *)&unk_1B22CABE0;
  do
  {
    v29 = 0;
    v30 = 4 * v27;
    v31 = v121;
    do
    {
      sub_1B2219630((uint64_t)&v117[44 * v29 + 44 * v30], v24);
      for (i = 0; i != 16; i += 4)
      {
        v33 = *(float *)&v28[i];
        if (v33 != 0.0)
          sub_1B2219718((int *)&v117[44 * v29 + 44 * v30], (int *)v31[i], v33);
      }
      ++v29;
      ++v31;
    }
    while (v29 != 4);
    ++v27;
    v28 += 16;
  }
  while (v27 != 4);
  v34 = 0;
  for (j = 0; j != 4; ++j)
  {
    v36 = 0;
    v37 = (char *)&unk_1B22CABE0;
    do
    {
      sub_1B22208B8((uint64_t)v115, v24);
      v38 = 0;
      v39 = v34;
      do
      {
        v40 = *(float *)&v37[v38];
        if (v40 != 0.0)
          sub_1B2219718(v115, (int *)((char *)v117 + v39), v40);
        v39 += 352;
        v38 += 4;
      }
      while (v38 != 16);
      sub_1B221FF28((unsigned int *)v115, *(_QWORD **)v7);
      operator delete(__p);
      ++v36;
      v37 += 16;
    }
    while (v36 != 4);
    v34 += 1408;
  }
  if (*(_QWORD *)(v7 + 8))
  {
    for (k = 0; k != 16; ++k)
    {
      v42 = *(_DWORD *)(v97 + 4 * dword_1B22CAC20[k]);
      v43 = *(_QWORD **)(v7 + 8);
      v44 = (char *)v43[3];
      v45 = v43[4];
      if ((unint64_t)v44 >= v45)
      {
        v47 = (char *)v43[2];
        v48 = (v44 - v47) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          goto LABEL_105;
        v50 = v45 - (_QWORD)v47;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)sub_1B17F7E58((uint64_t)(v43 + 4), v51);
          v47 = (char *)v43[2];
          v44 = (char *)v43[3];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[4 * v48];
        *(_DWORD *)v53 = 1;
        v46 = v53 + 4;
        while (v44 != v47)
        {
          v54 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v53 - 1) = v54;
          v53 -= 4;
        }
        v43[2] = v53;
        v43[3] = v46;
        v43[4] = &v52[4 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_DWORD *)v44 = 1;
        v46 = v44 + 4;
      }
      v55 = v42 + v96;
      v43[3] = v46;
      v56 = *(_QWORD **)(v7 + 8);
      v57 = (char *)v56[9];
      v58 = v56[10];
      if ((unint64_t)v57 >= v58)
      {
        v60 = (char *)v56[8];
        v61 = (v57 - v60) >> 2;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 62)
          goto LABEL_105;
        v63 = v58 - (_QWORD)v60;
        if (v63 >> 1 > v62)
          v62 = v63 >> 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
          v64 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)sub_1B17F7E58((uint64_t)(v56 + 10), v64);
          v60 = (char *)v56[8];
          v57 = (char *)v56[9];
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[4 * v61];
        *(_DWORD *)v66 = v55;
        v59 = v66 + 4;
        while (v57 != v60)
        {
          v67 = *((_DWORD *)v57 - 1);
          v57 -= 4;
          *((_DWORD *)v66 - 1) = v67;
          v66 -= 4;
        }
        v56[8] = v66;
        v56[9] = v59;
        v56[10] = &v65[4 * v64];
        if (v60)
          operator delete(v60);
      }
      else
      {
        *(_DWORD *)v57 = v55;
        v59 = v57 + 4;
      }
      v56[9] = v59;
      v68 = *(_QWORD **)(v7 + 8);
      v69 = (char *)v68[12];
      v70 = v68[13];
      if ((unint64_t)v69 >= v70)
      {
        v72 = (char *)v68[11];
        v73 = (v69 - v72) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          goto LABEL_105;
        v75 = v70 - (_QWORD)v72;
        if (v75 >> 1 > v74)
          v74 = v75 >> 1;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v76 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          v77 = (char *)sub_1B17F7E58((uint64_t)(v68 + 13), v76);
          v72 = (char *)v68[11];
          v69 = (char *)v68[12];
        }
        else
        {
          v77 = 0;
        }
        v78 = &v77[4 * v73];
        *(_DWORD *)v78 = 1065353216;
        v71 = v78 + 4;
        while (v69 != v72)
        {
          v79 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *((_DWORD *)v78 - 1) = v79;
          v78 -= 4;
        }
        v68[11] = v78;
        v68[12] = v71;
        v68[13] = &v77[4 * v76];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *(_DWORD *)v69 = 1065353216;
        v71 = v69 + 4;
      }
      v68[12] = v71;
    }
  }
  v80 = *(int *)(v7 + 28);
  *(_DWORD *)(v7 + 28) = v80 + 1;
  v81 = *(_QWORD *)(v7 + 32);
  if ((_DWORD)v118)
  {
    v82 = 0;
    v83 = 43;
    do
    {
      v84 = &v117[v83];
      v85 = &v117[v83 - 42];
      operator delete((void *)v117[v83]);
      *v85 = (uint64_t)(v84 - 40);
      *((_DWORD *)v84 - 81) = 40;
      ++v82;
      v83 += 44;
    }
    while (v82 < v118);
  }
  operator delete(v120);
  for (m = 0; m != -1408; m -= 352)
  {
    v87 = &v98[m];
    operator delete(*(void **)&v114[m + 1752]);
    *((_QWORD *)v87 + 837) = &v114[m + 1432];
    *((_DWORD *)v87 + 1677) = 40;
  }
  for (n = 0; n != -1408; n -= 352)
  {
    v89 = &v98[n];
    operator delete(*(void **)&v114[n + 344]);
    *((_QWORD *)v89 + 661) = &v114[n + 24];
    *((_DWORD *)v89 + 1325) = 40;
  }
  for (ii = 0; ii != -1408; ii -= 352)
  {
    v91 = &v98[ii];
    operator delete(*(void **)&v110[ii + 344]);
    *((_QWORD *)v91 + 485) = v91 + 3896;
    *((_DWORD *)v91 + 973) = 40;
  }
  v92 = 1408;
  do
  {
    v93 = &v98[v92];
    operator delete(*(void **)&v102[v92 + 344]);
    *((_QWORD *)v93 + 133) = v93 + 1080;
    *((_DWORD *)v93 + 269) = 40;
    v92 -= 352;
  }
  while (v92);
  v94 = 1408;
  do
  {
    operator delete(*(void **)&v98[v94 - 8]);
    *(_QWORD *)&v98[v94 - 344] = &v98[v94 - 328];
    *(_DWORD *)&v98[v94 - 332] = 40;
    v94 -= 352;
  }
  while (v94);
  return v81 + (v80 << 6);
}

_QWORD *sub_1B221EBE0(_QWORD **a1, uint64_t a2, int a3, int a4, int32x4_t *a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  float *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  float *v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  float *v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  float *v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  float *v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  float *v78;
  _DWORD *v79;
  uint64_t v80;
  float *v81;
  _DWORD *v82;
  uint64_t v83;
  float *v84;
  _DWORD *v85;
  uint64_t v86;
  float *v87;
  _DWORD *v88;
  uint64_t v89;
  float *v90;
  _DWORD *v91;
  int v92;
  int v93;
  uint64_t v94;
  float *v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  float *v99;
  _DWORD *v100;
  int v101;
  uint64_t v102;
  float *v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  float *v107;
  _DWORD *v108;
  uint64_t v109;
  float *v110;
  _DWORD *v111;
  uint64_t v112;
  float *v113;
  _DWORD *v114;
  int v115;
  uint64_t v116;
  float *v117;
  _DWORD *v118;
  int v119;
  uint64_t v120;
  float *v121;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  float *v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  float *v129;
  _DWORD *v130;
  uint64_t v131;
  float *v132;
  _DWORD *v133;
  uint64_t v134;
  float *v135;
  _DWORD *v136;
  uint64_t v137;
  float *v138;
  _DWORD *v139;
  uint64_t v140;
  float *v141;
  _DWORD *v142;
  int v143;
  int v144;
  uint64_t v145;
  float *v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  float *v150;
  _DWORD *v151;
  int v152;
  uint64_t v153;
  float *v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  float *v158;
  _DWORD *v159;
  uint64_t v160;
  float *v161;
  _DWORD *v162;
  int v163;
  unsigned int v164;
  float *v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  _QWORD *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  _QWORD *v181;
  int v182;
  _QWORD *v183;
  int v184;
  int v185;
  _QWORD *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  _QWORD *v191;
  int v192;
  _QWORD *v193;
  int v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  _DWORD *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v212;
  int32x4_t *v213;
  int v214;
  __int32 v215;
  unsigned int v216;
  uint64_t v217;
  void *__p;
  unsigned int v219;
  uint64_t v220;
  void *v221;
  unsigned int v222;
  uint64_t v223;
  void *v224;
  unsigned int v225;
  uint64_t v226;
  void *v227;
  unsigned int v228;
  uint64_t v229;
  void *v230;
  unsigned int v231;
  uint64_t v232;
  void *v233;
  unsigned int v234;
  uint64_t v235;
  void *v236;
  _OWORD v237[4];
  unsigned int v238;
  _DWORD *v239;
  void *v240;
  unsigned int v241;
  _DWORD *v242;
  void *v243;
  unsigned int v244;
  _DWORD *v245;
  void *v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v16 = 2 * *(_DWORD *)(a2 + 20) + 16;
  sub_1B22208B8((uint64_t)&v244, v16);
  sub_1B22208B8((uint64_t)&v241, v16);
  v17 = sub_1B22208B8((uint64_t)&v238, v16);
  sub_1B222019C(v17, a2, (uint64_t)a5, a6, a4, a8, (int *)&v244, (int *)&v241, (int *)&v238);
  v18 = v244;
  if ((int)v244 >= 1)
  {
    v19 = v245;
    do
    {
      *v19 += a7;
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  v20 = v241;
  if ((int)v241 >= 1)
  {
    v21 = v242;
    do
    {
      *v21 += a7;
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  v22 = v238;
  if ((int)v238 >= 1)
  {
    v23 = v239;
    do
    {
      *v23 += a7;
      v23 += 2;
      --v22;
    }
    while (v22);
  }
  v24 = 0;
  v237[0] = vaddq_s32(*a5, vdupq_n_s32(a7));
  v25 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(a2 + 48);
  v27 = v26 + 4 * *(int *)(v25 + 4 * ((2 * a3) | 1));
  v28 = *(_QWORD *)(a2 + 288);
  v29 = *(_QWORD *)(a2 + 264);
  v30 = *(_QWORD *)(a2 + 312);
  v31 = 4;
  do
  {
    v32 = *(int *)(v27 + 4 * v24);
    v33 = *(int *)(v29 + 8 * v32 + 4);
    v34 = (_DWORD *)(v28 + 4 * v33);
    v35 = v30 + 2 * v33;
    if (v24 == a4)
    {
      v36 = *(unsigned int *)(v29 + 8 * (_DWORD)v32);
      if ((int)v36 < 1)
      {
LABEL_16:
        LODWORD(v37) = -1;
      }
      else
      {
        v37 = 0;
        while (v34[v37] != a3)
        {
          if (v36 == ++v37)
            goto LABEL_16;
        }
      }
      *((_DWORD *)v237 + v31) = *(_DWORD *)(v26
                                          + 4 * *(int *)(v25 + 8 * (int)v34[((int)v37 + 1) % (int)v36] + 4)
                                          + 4
                                          * ((*(_WORD *)(v35 + 2 * (((int)v37 + 1) % (int)v36)) - 1) & 3))
                              + a7;
      v38 = (_DWORD *)(v26
                     + 4 * *(int *)(v25 + 8 * (int)v34[((int)v36 + (int)v37 - 1) % (int)v36] + 4)
                     + 4 * ((*(_WORD *)(v35 + 2 * (((int)v36 + (int)v37 - 1) % (int)v36)) + 1) & 3));
    }
    else
    {
      if (*v34 == a3)
      {
        v39 = 0;
      }
      else if (v34[1] == a3)
      {
        v39 = 1;
      }
      else if (v34[2] == a3)
      {
        v39 = 2;
      }
      else if (v34[3] == a3)
      {
        v39 = 3;
      }
      else
      {
        v39 = -1;
      }
      v40 = (v39 + 2) & 3;
      v41 = *(_WORD *)(v35 + 2 * v40);
      v42 = v26 + 4 * *(int *)(v25 + 8 * (int)v34[v40] + 4);
      v43 = (_DWORD *)v237 + v31;
      v44 = *(_DWORD *)(v42 + 4 * ((v41 + 2) & 3)) + a7;
      *v43 = *(_DWORD *)(v42 + 4 * ((v41 + 1) & 3)) + a7;
      v43[1] = v44;
      v38 = (_DWORD *)(v42 + 4 * ((v41 - 1) & 3));
    }
    *((_DWORD *)v237 + v31 + 2) = *v38 + a7;
    v31 += 3;
    ++v24;
  }
  while (v24 != 4);
  sub_1B22208B8((uint64_t)&v234, v16);
  sub_1B22208B8((uint64_t)&v231, v16);
  sub_1B22208B8((uint64_t)&v228, v16);
  sub_1B22208B8((uint64_t)&v225, v16);
  sub_1B22208B8((uint64_t)&v222, v16);
  sub_1B22208B8((uint64_t)&v219, v16);
  sub_1B22208B8((uint64_t)&v216, v16);
  sub_1B2219718((int *)&v231, (int *)&v241, 12.0);
  v45 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4]);
  v46 = v231;
  v47 = v232;
  if ((int)v231 < 1)
  {
LABEL_33:
    v50 = (_DWORD *)(v232 + 8 * (int)v231);
    *v50 = v45;
    v50[1] = -1062557013;
    v231 = ++v46;
  }
  else
  {
    v48 = (float *)(v232 + 4);
    v49 = v231;
    while (*((_DWORD *)v48 - 1) != v45)
    {
      v48 += 2;
      if (!--v49)
        goto LABEL_33;
    }
    *v48 = *v48 + -5.3333;
  }
  v51 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 1]);
  if (v46 < 1)
  {
LABEL_39:
    v54 = (_DWORD *)(v47 + 8 * v46);
    *v54 = v51;
    v54[1] = -1070945621;
    v231 = ++v46;
  }
  else
  {
    v52 = v46;
    v53 = (float *)(v47 + 4);
    while (*((_DWORD *)v53 - 1) != v51)
    {
      v53 += 2;
      if (!--v52)
        goto LABEL_39;
    }
    *v53 = *v53 + -2.6667;
  }
  v55 = dword_1B22CAC60[16 * (uint64_t)a4 + 2];
  v56 = *((_DWORD *)v237 + v55);
  v214 = a8;
  if (v46 < 1)
  {
LABEL_45:
    v59 = (_DWORD *)(v47 + 8 * v46);
    *v59 = v56;
    v59[1] = -1087722837;
    v231 = ++v46;
  }
  else
  {
    v57 = v46;
    v58 = (float *)(v47 + 4);
    while (*((_DWORD *)v58 - 1) != v56)
    {
      v58 += 2;
      if (!--v57)
        goto LABEL_45;
    }
    *v58 = *v58 + -0.66667;
  }
  v60 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 3]);
  if (v46 < 1)
  {
LABEL_51:
    v63 = (_DWORD *)(v47 + 8 * v46);
    *v63 = v60;
    v63[1] = -1079334229;
    v231 = ++v46;
  }
  else
  {
    v61 = v46;
    v62 = (float *)(v47 + 4);
    while (*((_DWORD *)v62 - 1) != v60)
    {
      v62 += 2;
      if (!--v61)
        goto LABEL_51;
    }
    *v62 = *v62 + -1.3333;
  }
  v64 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 6]);
  v213 = a5;
  if (v46 < 1)
  {
LABEL_57:
    v67 = (_DWORD *)(v47 + 8 * v46);
    *v67 = v64;
    v67[1] = -1096111445;
    v231 = ++v46;
  }
  else
  {
    v65 = v46;
    v66 = (float *)(v47 + 4);
    while (*((_DWORD *)v66 - 1) != v64)
    {
      v66 += 2;
      if (!--v65)
        goto LABEL_57;
    }
    *v66 = *v66 + -0.33333;
  }
  v68 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 7]);
  v212 = v55;
  if (v46 < 1)
  {
LABEL_63:
    v71 = (_DWORD *)(v47 + 8 * v46);
    *v71 = v68;
    v71[1] = -1087722837;
    v231 = v46 + 1;
  }
  else
  {
    v69 = v46;
    v70 = (float *)(v47 + 4);
    while (*((_DWORD *)v70 - 1) != v68)
    {
      v70 += 2;
      if (!--v69)
        goto LABEL_63;
    }
    *v70 = *v70 + -0.66667;
  }
  sub_1B2219718((int *)&v228, (int *)&v241, -6.0);
  v72 = v228;
  v73 = v229;
  if ((int)v228 < 1)
  {
LABEL_69:
    v76 = (_DWORD *)(v229 + 8 * (int)v228);
    *v76 = v45;
    v76[1] = 1076538027;
    v228 = ++v72;
  }
  else
  {
    v74 = (float *)(v229 + 4);
    v75 = v228;
    while (*((_DWORD *)v74 - 1) != v45)
    {
      v74 += 2;
      if (!--v75)
        goto LABEL_69;
    }
    *v74 = *v74 + 2.6667;
  }
  if (v72 < 1)
  {
LABEL_75:
    v79 = (_DWORD *)(v73 + 8 * v72);
    *v79 = v51;
    v79[1] = 1068149419;
    v228 = ++v72;
  }
  else
  {
    v77 = v72;
    v78 = (float *)(v73 + 4);
    while (*((_DWORD *)v78 - 1) != v51)
    {
      v78 += 2;
      if (!--v77)
        goto LABEL_75;
    }
    *v78 = *v78 + 1.3333;
  }
  if (v72 < 1)
  {
LABEL_81:
    v82 = (_DWORD *)(v73 + 8 * v72);
    *v82 = v56;
    v82[1] = 1051372203;
    v228 = ++v72;
  }
  else
  {
    v80 = v72;
    v81 = (float *)(v73 + 4);
    while (*((_DWORD *)v81 - 1) != v56)
    {
      v81 += 2;
      if (!--v80)
        goto LABEL_81;
    }
    *v81 = *v81 + 0.33333;
  }
  if (v72 < 1)
  {
LABEL_87:
    v85 = (_DWORD *)(v73 + 8 * v72);
    *v85 = v60;
    v85[1] = 1059760811;
    v228 = ++v72;
  }
  else
  {
    v83 = v72;
    v84 = (float *)(v73 + 4);
    while (*((_DWORD *)v84 - 1) != v60)
    {
      v84 += 2;
      if (!--v83)
        goto LABEL_87;
    }
    *v84 = *v84 + 0.66667;
  }
  if (v72 < 1)
  {
LABEL_93:
    v88 = (_DWORD *)(v73 + 8 * v72);
    *v88 = v64;
    v88[1] = 1059760811;
    v228 = ++v72;
  }
  else
  {
    v86 = v72;
    v87 = (float *)(v73 + 4);
    while (*((_DWORD *)v87 - 1) != v64)
    {
      v87 += 2;
      if (!--v86)
        goto LABEL_93;
    }
    *v87 = *v87 + 0.66667;
  }
  if (v72 < 1)
  {
LABEL_99:
    v91 = (_DWORD *)(v73 + 8 * v72);
    *v91 = v68;
    v91[1] = 1068149419;
    v228 = v72 + 1;
  }
  else
  {
    v89 = v72;
    v90 = (float *)(v73 + 4);
    while (*((_DWORD *)v90 - 1) != v68)
    {
      v90 += 2;
      if (!--v89)
        goto LABEL_99;
    }
    *v90 = *v90 + 1.3333;
  }
  sub_1B2219790((int *)&v225, (int *)&v231);
  v92 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 8]);
  v93 = v225;
  v94 = v226;
  if ((int)v225 < 1)
  {
LABEL_105:
    v97 = (_DWORD *)(v226 + 8 * (int)v225);
    *v97 = v92;
    v97[1] = 1065353216;
    v225 = ++v93;
  }
  else
  {
    v95 = (float *)(v226 + 4);
    v96 = v225;
    while (*((_DWORD *)v95 - 1) != v92)
    {
      v95 += 2;
      if (!--v96)
        goto LABEL_105;
    }
    *v95 = *v95 + 1.0;
  }
  if (v93 < 1)
  {
LABEL_111:
    v100 = (_DWORD *)(v94 + 8 * v93);
    *v100 = v64;
    v100[1] = -1082130432;
    v225 = v93 + 1;
  }
  else
  {
    v98 = v93;
    v99 = (float *)(v94 + 4);
    while (*((_DWORD *)v99 - 1) != v64)
    {
      v99 += 2;
      if (!--v98)
        goto LABEL_111;
    }
    *v99 = *v99 + -1.0;
  }
  sub_1B2219718((int *)&v222, (int *)&v238, 12.0);
  v101 = v222;
  v102 = v223;
  if ((int)v222 < 1)
  {
LABEL_117:
    v105 = (_DWORD *)(v223 + 8 * (int)v222);
    *v105 = v45;
    v105[1] = -1062557013;
    v222 = ++v101;
  }
  else
  {
    v103 = (float *)(v223 + 4);
    v104 = v222;
    while (*((_DWORD *)v103 - 1) != v45)
    {
      v103 += 2;
      if (!--v104)
        goto LABEL_117;
    }
    *v103 = *v103 + -5.3333;
  }
  if (v101 < 1)
  {
LABEL_123:
    v108 = (_DWORD *)(v102 + 8 * v101);
    *v108 = v51;
    v108[1] = -1079334229;
    v222 = ++v101;
  }
  else
  {
    v106 = v101;
    v107 = (float *)(v102 + 4);
    while (*((_DWORD *)v107 - 1) != v51)
    {
      v107 += 2;
      if (!--v106)
        goto LABEL_123;
    }
    *v107 = *v107 + -1.3333;
  }
  if (v101 < 1)
  {
LABEL_129:
    v111 = (_DWORD *)(v102 + 8 * v101);
    *v111 = v56;
    v111[1] = -1087722837;
    v222 = ++v101;
  }
  else
  {
    v109 = v101;
    v110 = (float *)(v102 + 4);
    while (*((_DWORD *)v110 - 1) != v56)
    {
      v110 += 2;
      if (!--v109)
        goto LABEL_129;
    }
    *v110 = *v110 + -0.66667;
  }
  if (v101 < 1)
  {
LABEL_135:
    v114 = (_DWORD *)(v102 + 8 * v101);
    *v114 = v60;
    v114[1] = -1070945621;
    v222 = ++v101;
  }
  else
  {
    v112 = v101;
    v113 = (float *)(v102 + 4);
    while (*((_DWORD *)v113 - 1) != v60)
    {
      v113 += 2;
      if (!--v112)
        goto LABEL_135;
    }
    *v113 = *v113 + -2.6667;
  }
  v115 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 4]);
  if (v101 < 1)
  {
LABEL_141:
    v118 = (_DWORD *)(v102 + 8 * v101);
    *v118 = v115;
    v118[1] = -1096111445;
    v222 = ++v101;
  }
  else
  {
    v116 = v101;
    v117 = (float *)(v102 + 4);
    while (*((_DWORD *)v117 - 1) != v115)
    {
      v117 += 2;
      if (!--v116)
        goto LABEL_141;
    }
    *v117 = *v117 + -0.33333;
  }
  v119 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 15]);
  if (v101 < 1)
  {
LABEL_147:
    v122 = (_DWORD *)(v102 + 8 * v101);
    *v122 = v119;
    v122[1] = -1087722837;
    v222 = v101 + 1;
  }
  else
  {
    v120 = v101;
    v121 = (float *)(v102 + 4);
    while (*((_DWORD *)v121 - 1) != v119)
    {
      v121 += 2;
      if (!--v120)
        goto LABEL_147;
    }
    *v121 = *v121 + -0.66667;
  }
  sub_1B2219718((int *)&v219, (int *)&v238, -6.0);
  v123 = v219;
  v124 = v220;
  if ((int)v219 < 1)
  {
LABEL_153:
    v127 = (_DWORD *)(v220 + 8 * (int)v219);
    *v127 = v45;
    v127[1] = 1076538027;
    v219 = ++v123;
  }
  else
  {
    v125 = (float *)(v220 + 4);
    v126 = v219;
    while (*((_DWORD *)v125 - 1) != v45)
    {
      v125 += 2;
      if (!--v126)
        goto LABEL_153;
    }
    *v125 = *v125 + 2.6667;
  }
  if (v123 < 1)
  {
LABEL_159:
    v130 = (_DWORD *)(v124 + 8 * v123);
    *v130 = v51;
    v130[1] = 1059760811;
    v219 = ++v123;
  }
  else
  {
    v128 = v123;
    v129 = (float *)(v124 + 4);
    while (*((_DWORD *)v129 - 1) != v51)
    {
      v129 += 2;
      if (!--v128)
        goto LABEL_159;
    }
    *v129 = *v129 + 0.66667;
  }
  if (v123 < 1)
  {
LABEL_165:
    v133 = (_DWORD *)(v124 + 8 * v123);
    *v133 = v56;
    v133[1] = 1051372203;
    v219 = ++v123;
  }
  else
  {
    v131 = v123;
    v132 = (float *)(v124 + 4);
    while (*((_DWORD *)v132 - 1) != v56)
    {
      v132 += 2;
      if (!--v131)
        goto LABEL_165;
    }
    *v132 = *v132 + 0.33333;
  }
  if (v123 < 1)
  {
LABEL_171:
    v136 = (_DWORD *)(v124 + 8 * v123);
    *v136 = v60;
    v136[1] = 1068149419;
    v219 = ++v123;
  }
  else
  {
    v134 = v123;
    v135 = (float *)(v124 + 4);
    while (*((_DWORD *)v135 - 1) != v60)
    {
      v135 += 2;
      if (!--v134)
        goto LABEL_171;
    }
    *v135 = *v135 + 1.3333;
  }
  if (v123 < 1)
  {
LABEL_177:
    v139 = (_DWORD *)(v124 + 8 * v123);
    *v139 = v115;
    v139[1] = 1059760811;
    v219 = ++v123;
  }
  else
  {
    v137 = v123;
    v138 = (float *)(v124 + 4);
    while (*((_DWORD *)v138 - 1) != v115)
    {
      v138 += 2;
      if (!--v137)
        goto LABEL_177;
    }
    *v138 = *v138 + 0.66667;
  }
  if (v123 < 1)
  {
LABEL_183:
    v142 = (_DWORD *)(v124 + 8 * v123);
    *v142 = v119;
    v142[1] = 1068149419;
    v219 = v123 + 1;
  }
  else
  {
    v140 = v123;
    v141 = (float *)(v124 + 4);
    while (*((_DWORD *)v141 - 1) != v119)
    {
      v141 += 2;
      if (!--v140)
        goto LABEL_183;
    }
    *v141 = *v141 + 1.3333;
  }
  sub_1B2219790((int *)&v216, (int *)&v222);
  v143 = *((_DWORD *)v237 + dword_1B22CAC60[16 * (uint64_t)a4 + 14]);
  v144 = v216;
  v145 = v217;
  if ((int)v216 < 1)
  {
LABEL_189:
    v148 = (_DWORD *)(v217 + 8 * (int)v216);
    *v148 = v143;
    v148[1] = 1065353216;
    v216 = ++v144;
  }
  else
  {
    v146 = (float *)(v217 + 4);
    v147 = v216;
    while (*((_DWORD *)v146 - 1) != v143)
    {
      v146 += 2;
      if (!--v147)
        goto LABEL_189;
    }
    *v146 = *v146 + 1.0;
  }
  if (v144 < 1)
  {
LABEL_195:
    v151 = (_DWORD *)(v145 + 8 * v144);
    *v151 = v115;
    v151[1] = -1082130432;
    v216 = v144 + 1;
  }
  else
  {
    v149 = v144;
    v150 = (float *)(v145 + 4);
    while (*((_DWORD *)v150 - 1) != v115)
    {
      v150 += 2;
      if (!--v149)
        goto LABEL_195;
    }
    *v150 = *v150 + -1.0;
  }
  sub_1B2219718((int *)&v234, (int *)&v244, 36.0);
  v152 = v234;
  v153 = v235;
  if ((int)v234 < 1)
  {
LABEL_201:
    v156 = (_DWORD *)(v235 + 8 * (int)v234);
    *v156 = v45;
    v156[1] = -1048576000;
    v234 = ++v152;
  }
  else
  {
    v154 = (float *)(v235 + 4);
    v155 = v234;
    while (*((_DWORD *)v154 - 1) != v45)
    {
      v154 += 2;
      if (!--v155)
        goto LABEL_201;
    }
    *v154 = *v154 + -16.0;
  }
  if (v152 < 1)
  {
LABEL_207:
    v159 = (_DWORD *)(v153 + 8 * v152);
    *v159 = v51;
    v159[1] = -1065353216;
    v234 = ++v152;
  }
  else
  {
    v157 = v152;
    v158 = (float *)(v153 + 4);
    while (*((_DWORD *)v158 - 1) != v51)
    {
      v158 += 2;
      if (!--v157)
        goto LABEL_207;
    }
    *v158 = *v158 + -4.0;
  }
  if (v152 < 1)
  {
LABEL_213:
    v162 = (_DWORD *)(v153 + 8 * v152);
    *v162 = v60;
    v162[1] = -1065353216;
    v234 = v152 + 1;
  }
  else
  {
    v160 = v152;
    v161 = (float *)(v153 + 4);
    while (*((_DWORD *)v161 - 1) != v60)
    {
      v161 += 2;
      if (!--v160)
        goto LABEL_213;
    }
    *v161 = *v161 + -4.0;
  }
  sub_1B2219718((int *)&v234, (int *)&v222, -4.0);
  sub_1B2219718((int *)&v234, (int *)&v231, -4.0);
  v163 = *((_DWORD *)v237 + v212);
  v164 = v234;
  if ((int)v234 < 1)
  {
LABEL_219:
    v167 = (_DWORD *)(v235 + 8 * (int)v234);
    *v167 = v163;
    v167[1] = -1082130432;
    v234 = v164 + 1;
  }
  else
  {
    v165 = (float *)(v235 + 4);
    v166 = v234;
    while (*((_DWORD *)v165 - 1) != v163)
    {
      v165 += 2;
      if (!--v166)
        goto LABEL_219;
    }
    *v165 = *v165 + -1.0;
  }
  sub_1B2219718((int *)&v234, (int *)&v228, -1.0);
  sub_1B2219718((int *)&v234, (int *)&v219, -1.0);
  v168 = (uint64_t)a1[2];
  if (v214 < 0)
    v169 = *(_DWORD *)(v168 + 20);
  else
    v169 = sub_1B2222DB0(v168, v214);
  v170 = v213->i32[a4] + a7;
  v171 = a4 + 1;
  v172 = v213->i32[(a4 + 1) & 3] + a7;
  v173 = a4 + 3;
  v215 = v213->i32[(a4 + 3) & 3];
  v174 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v174 + 1;
  v175 = 3 * a4;
  *((_DWORD *)&v237[1] + 3 * a4 + 2) = v174 + v169;
  sub_1B221FF28(&v231, *a1);
  v176 = a1[1];
  if (v176)
    sub_1B2220678(v170, v176);
  v177 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v177 + 1;
  v178 = v177 + v169;
  if (v171 <= 0)
    v179 = -(-v171 & 3);
  else
    v179 = (a4 + 1) & 3;
  v180 = 3 * v179;
  *((_DWORD *)&v237[1] + 3 * v179) = v178;
  sub_1B221FF28(&v228, *a1);
  v181 = a1[1];
  if (v181)
    sub_1B2220678(v172, v181);
  v182 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v182 + 1;
  *((_DWORD *)&v237[1] + v180 + 1) = v182 + v169;
  sub_1B221FF28(&v225, *a1);
  v183 = a1[1];
  if (v183)
    sub_1B2220678(v172, v183);
  v184 = v215 + a7;
  v185 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v185 + 1;
  *((_DWORD *)&v237[1] + v175) = v185 + v169;
  sub_1B221FF28(&v222, *a1);
  v186 = a1[1];
  if (v186)
    sub_1B2220678(v170, v186);
  v187 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v187 + 1;
  v188 = v187 + v169;
  if (v173 <= 0)
    v189 = -(-v173 & 3);
  else
    v189 = v173 & 3;
  v190 = 3 * v189;
  *((_DWORD *)&v237[1] + 3 * v189 + 2) = v188;
  sub_1B221FF28(&v219, *a1);
  v191 = a1[1];
  if (v191)
    sub_1B2220678(v184, v191);
  v192 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v192 + 1;
  *((_DWORD *)&v237[1] + v190 + 1) = v192 + v169;
  sub_1B221FF28(&v216, *a1);
  v193 = a1[1];
  if (v193)
    sub_1B2220678(v184, v193);
  v194 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v194 + 1;
  *((_DWORD *)&v237[1] + v175 + 1) = v194 + v169;
  sub_1B221FF28(&v234, *a1);
  v195 = a1[1];
  if (v195)
    sub_1B2220678(v170, v195);
  v196 = 0;
  v197 = a1 + 6;
  v198 = (char *)a1[5];
  do
  {
    v199 = dword_1B22CAD60[v196];
    if ((unint64_t)v198 >= *v197)
    {
      v201 = (char *)a1[4];
      v202 = (v198 - v201) >> 2;
      v203 = v202 + 1;
      if ((unint64_t)(v202 + 1) >> 62)
        abort();
      v204 = *v197 - (_QWORD)v201;
      if (v204 >> 1 > v203)
        v203 = v204 >> 1;
      if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
        v205 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v205 = v203;
      if (v205)
      {
        v206 = (char *)sub_1B17F7E58((uint64_t)(a1 + 6), v205);
        v201 = (char *)a1[4];
        v198 = (char *)a1[5];
      }
      else
      {
        v206 = 0;
      }
      v207 = &v206[4 * v202];
      *(_DWORD *)v207 = *((_DWORD *)v237 + v199);
      v200 = v207 + 4;
      while (v198 != v201)
      {
        v208 = *((_DWORD *)v198 - 1);
        v198 -= 4;
        *((_DWORD *)v207 - 1) = v208;
        v207 -= 4;
      }
      a1[4] = v207;
      a1[5] = v200;
      a1[6] = &v206[4 * v205];
      if (v201)
        operator delete(v201);
    }
    else
    {
      *(_DWORD *)v198 = *((_DWORD *)v237 + v199);
      v200 = v198 + 4;
    }
    a1[5] = v200;
    ++v196;
    v198 = (char *)v200;
  }
  while (v196 != 16);
  v209 = *((int *)a1 + 7);
  *((_DWORD *)a1 + 7) = v209 + 1;
  v210 = a1[4];
  operator delete(__p);
  operator delete(v221);
  operator delete(v224);
  operator delete(v227);
  operator delete(v230);
  operator delete(v233);
  operator delete(v236);
  operator delete(v240);
  operator delete(v243);
  operator delete(v246);
  return &v210[8 * v209];
}

void sub_1B221FF28(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t i;
  int v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;

  v4 = *a1;
  v5 = (uint64_t)(a2 + 4);
  v6 = a2[4];
  v7 = (char *)a2[3];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)a2[2];
    v10 = (v7 - v9) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
LABEL_53:
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)sub_1B17F7E58(v5, v13);
      v9 = (char *)a2[2];
      v7 = (char *)a2[3];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = v4;
    v8 = v15 + 4;
    while (v7 != v9)
    {
      v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    a2[2] = v15;
    a2[3] = v8;
    a2[4] = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v7 = v4;
    v8 = v7 + 4;
  }
  a2[3] = v8;
  if ((int)v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      v19 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 8 * i);
      v21 = (char *)a2[9];
      v20 = a2[10];
      if ((unint64_t)v21 >= v20)
      {
        v23 = (char *)a2[8];
        v24 = (v21 - v23) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          goto LABEL_53;
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_1B17F7E58((uint64_t)(a2 + 10), v27);
          v23 = (char *)a2[8];
          v21 = (char *)a2[9];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v19;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        a2[8] = v29;
        a2[9] = v22;
        a2[10] = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v21 = v19;
        v22 = v21 + 4;
      }
      a2[9] = v22;
      v31 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 8 * i + 4);
      v33 = (char *)a2[12];
      v32 = a2[13];
      if ((unint64_t)v33 >= v32)
      {
        v35 = (char *)a2[11];
        v36 = (v33 - v35) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          goto LABEL_53;
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)sub_1B17F7E58((uint64_t)(a2 + 13), v39);
          v35 = (char *)a2[11];
          v33 = (char *)a2[12];
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[4 * v36];
        *(_DWORD *)v41 = v31;
        v34 = v41 + 4;
        while (v33 != v35)
        {
          v42 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        a2[11] = v41;
        a2[12] = v34;
        a2[13] = &v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v33 = v31;
        v34 = v33 + 4;
      }
      a2[12] = v34;
    }
  }
}

void sub_1B222019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int *a7, int *a8, int *a9)
{
  int v14;
  _BYTE *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  int v42;
  float v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  __float2 v50;
  __float2 v51;
  __float2 v52;
  __float2 v53;
  float v54;
  float v55;
  float v57;
  int v58;
  int *v59;
  uint64_t v60;
  int v61;
  float v62[79];
  void *__p;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int *v74;
  uint64_t v75;
  _BYTE v76[160];
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)(a2 + 20);
  v15 = v76;
  v74 = (int *)v76;
  v75 = 0x2800000000;
  v77 = 0;
  v16 = 2 * v14;
  if (v14)
  {
    if (v16 < 0x29)
      goto LABEL_6;
    operator delete(0);
    v74 = (int *)v76;
    HIDWORD(v75) = 40;
    v15 = operator new(4 * v16);
    v77 = v15;
    v17 = v16;
  }
  else
  {
    operator delete(0);
    v17 = 40;
  }
  v74 = (int *)v15;
  HIDWORD(v75) = v17;
LABEL_6:
  LODWORD(v75) = v16;
  v18 = sub_1B221194C((_QWORD *)a2, *(_DWORD *)(a3 + 4 * a5), (uint64_t)v15, a6);
  v19 = v18;
  if (v18 >= 0)
    v20 = v18;
  else
    v20 = v18 + 1;
  v21 = (v20 >> 1);
  v22 = v18 + 1;
  if (v18 < 2)
  {
    v54 = -6.2832;
    v55 = -6.2832;
  }
  else
  {
    v23 = 0;
    if (a5 + 3 <= 0)
      v24 = -(-(a5 + 3) & 3);
    else
      v24 = (a5 + 3) & 3;
    if (a5 + 1 <= 0)
      v25 = -(-(a5 + 1) & 3);
    else
      v25 = (a5 + 1) & 3;
    v26 = v74;
    v27 = *(_DWORD *)(a3 + 4 * v25);
    v28 = *(_DWORD *)(a3 + 4 * v24);
    v29 = -1;
    v30 = -1;
    do
    {
      v32 = *v26;
      v26 += 2;
      v31 = v32;
      if (v32 == v27)
        v29 = v23;
      if (v31 == v28)
        v30 = v23;
      ++v23;
    }
    while (v21 != v23);
    v54 = (float)v29 * 6.2832;
    v55 = (float)v30 * 6.2832;
  }
  v69 = 0;
  v70 = &v72;
  v73 = 0;
  v71 = 0x2800000028;
  v64 = 0;
  v65 = &v67;
  v68 = 0;
  v66 = 0x2800000028;
  sub_1B2219630((uint64_t)&v69, v22);
  sub_1B2219630((uint64_t)&v64, v22);
  v33 = (float)(int)v21;
  v34 = cosf(6.2832 / (float)(int)v21);
  if (v19 >= 2)
  {
    v35 = 0;
    v36 = 1.0
        / (float)((float)((float)((float)(v34 + 5.0) + sqrtf((float)(v34 + 9.0) * (float)(v34 + 1.0))) * v33) * 0.0625);
    v37 = 2.0 / (float)(v33 + 5.0);
    v57 = 1.0 / (float)(v33 + 5.0);
    do
    {
      v38 = v35 + 1;
      if (v35 + 1 == v21)
        v39 = 0;
      else
        v39 = v35 + 1;
      v40 = &v74[2 * v35];
      v42 = *v40;
      v41 = v40[1];
      v43 = *(float *)&v74[2 * v39];
      v59 = &v61;
      __p = 0;
      v60 = 0x2800000004;
      v44 = *(_DWORD *)(a3 + 4 * a5);
      v62[0] = v33 / (float)(v33 + 5.0);
      v61 = v44;
      v58 = 1;
      if (v44 == LODWORD(v43))
      {
        v62[0] = v37 + (float)(v33 / (float)(v33 + 5.0));
        v45 = 1;
      }
      else
      {
        v62[2] = 2.0 / (float)(v33 + 5.0);
        v45 = 2;
        v62[1] = v43;
        v58 = 2;
      }
      v46 = 0;
      while (SLODWORD(v62[v46 - 1]) != v42)
      {
        v46 += 2;
        if (2 * v45 == v46)
        {
          v47 = &v62[2 * v45 - 1];
          *(_DWORD *)v47 = v42;
          v47[1] = v37;
          v58 = ++v45;
          goto LABEL_37;
        }
      }
      v62[v46] = v37 + v62[v46];
LABEL_37:
      v48 = 0;
      while (SLODWORD(v62[v48 - 1]) != v41)
      {
        v48 += 2;
        if (2 * v45 == v48)
        {
          v49 = &v62[2 * v45 - 1];
          *(_DWORD *)v49 = v41;
          v49[1] = v57;
          v58 = v45 + 1;
          goto LABEL_42;
        }
      }
      v62[v48] = v57 + v62[v48];
LABEL_42:
      sub_1B2219718(a7, &v58, 1.0 / v33);
      v50 = __sincosf_stret((float)((float)(int)v35 * 6.2832) / v33);
      v51 = __sincosf_stret((float)((float)v39 * 6.2832) / v33);
      sub_1B2219718(&v69, &v58, v36 * (float)((float)(v51.__cosval * 0.5) + (float)(v50.__cosval * 0.5)));
      sub_1B2219718(&v64, &v58, v36 * (float)((float)(v51.__sinval * 0.5) + (float)(v50.__sinval * 0.5)));
      operator delete(__p);
      ++v35;
    }
    while (v38 != v21);
  }
  sub_1B2219790(a8, a7);
  v52 = __sincosf_stret(v54 / v33);
  sub_1B2219718(a8, &v69, v52.__cosval);
  sub_1B2219718(a8, &v64, v52.__sinval);
  sub_1B2219790(a9, a7);
  v53 = __sincosf_stret(v55 / v33);
  sub_1B2219718(a9, &v69, v53.__cosval);
  sub_1B2219718(a9, &v64, v53.__sinval);
  operator delete(v68);
  operator delete(v73);
  operator delete(v77);
}

void sub_1B2220678(int a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;

  v4 = (uint64_t)(a2 + 4);
  v5 = a2[4];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a2[2];
    v9 = (v6 - v8) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      goto LABEL_50;
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_1B17F7E58(v4, v12);
      v8 = (char *)a2[2];
      v6 = (char *)a2[3];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = 1;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    a2[2] = v14;
    a2[3] = v7;
    a2[4] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = 1;
    v7 = v6 + 4;
  }
  v17 = a2[10];
  a2[3] = v7;
  v18 = (char *)a2[9];
  if ((unint64_t)v18 >= v17)
  {
    v20 = (char *)a2[8];
    v21 = (v18 - v20) >> 2;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 62)
      goto LABEL_50;
    v23 = v17 - (_QWORD)v20;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      v25 = (char *)sub_1B17F7E58((uint64_t)(a2 + 10), v24);
      v20 = (char *)a2[8];
      v18 = (char *)a2[9];
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[4 * v21];
    v27 = &v25[4 * v24];
    *(_DWORD *)v26 = a1;
    v19 = v26 + 4;
    while (v18 != v20)
    {
      v28 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    a2[8] = v26;
    a2[9] = v19;
    a2[10] = v27;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_DWORD *)v18 = a1;
    v19 = v18 + 4;
  }
  v29 = a2[13];
  a2[9] = v19;
  v30 = (char *)a2[12];
  if ((unint64_t)v30 < v29)
  {
    *(_DWORD *)v30 = 1065353216;
    v31 = v30 + 4;
    goto LABEL_49;
  }
  v32 = (char *)a2[11];
  v33 = (v30 - v32) >> 2;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 62)
LABEL_50:
    abort();
  v35 = v29 - (_QWORD)v32;
  if (v35 >> 1 > v34)
    v34 = v35 >> 1;
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
    v36 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v36 = v34;
  if (v36)
  {
    v37 = (char *)sub_1B17F7E58((uint64_t)(a2 + 13), v36);
    v32 = (char *)a2[11];
    v30 = (char *)a2[12];
  }
  else
  {
    v37 = 0;
  }
  v38 = &v37[4 * v33];
  v39 = &v37[4 * v36];
  *(_DWORD *)v38 = 1065353216;
  v31 = v38 + 4;
  while (v30 != v32)
  {
    v40 = *((_DWORD *)v30 - 1);
    v30 -= 4;
    *((_DWORD *)v38 - 1) = v40;
    v38 -= 4;
  }
  a2[11] = v38;
  a2[12] = v31;
  a2[13] = v39;
  if (v32)
    operator delete(v32);
LABEL_49:
  a2[12] = v31;
}

uint64_t sub_1B22208B8(uint64_t a1, unsigned int a2)
{
  void *v4;
  int v5;

  *(_DWORD *)a1 = 0;
  v4 = (void *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x2800000000;
  *(_QWORD *)(a1 + 344) = 0;
  if (!a2)
  {
    operator delete(0);
    v5 = 40;
    goto LABEL_5;
  }
  if (a2 >= 0x29)
  {
    operator delete(0);
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 20) = 40;
    v4 = operator new(8 * a2);
    *(_QWORD *)(a1 + 344) = v4;
    v5 = a2;
LABEL_5:
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 20) = v5;
  }
  *(_DWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_1B2220950(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  void **v11;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = **(int **)(*(_QWORD *)(a2 + 88) + 24 * (((unint64_t)*(unsigned __int8 *)(a2 + 8) >> 2) & 0xF));
  v8 = 20 * v7;
  v9 = 320 * v7;
  if (v9 >= 104857600)
    v10 = 104857600;
  else
    v10 = v9;
  sub_1B17F7530(a3 + 2, v8);
  sub_1B17F7530(a3 + 8, v10);
  sub_1B1927690(a3 + 11, v10);
  v11 = *(void ***)(a1 + 8);
  if (v11)
  {
    sub_1B17F7530(v11 + 2, v8);
    sub_1B17F7530(v11 + 8, v8);
    sub_1B1927690(v11 + 11, v8);
  }
  return a1;
}

uint64_t sub_1B2220A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t i;
  _BYTE *v17;
  uint64_t j;
  _BYTE *v19;
  uint64_t k;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE v26[7056];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = (_QWORD **)v2;
  sub_1B22197F0(v26);
  v6 = 0;
  v7 = (_BYTE *)(v4 + 2);
  v8 = 5632;
  v9 = 7040;
  v10 = 4224;
  do
  {
    if (*(v7 - 2))
    {
      sub_1B221FF28((unsigned int *)&v26[v6], *v5);
      v11 = v5[1];
      if (v11)
        sub_1B2220678(*(_DWORD *)&v26[v9], v11);
    }
    if (*(v7 - 1))
    {
      sub_1B221FF28((unsigned int *)&v26[v6 + 1408], *v5);
      v12 = v5[1];
      if (v12)
        sub_1B2220678(*(_DWORD *)&v26[v9], v12);
    }
    if (*v7)
    {
      sub_1B221FF28((unsigned int *)&v26[v6 + 2816], *v5);
      v13 = v5[1];
      if (v13)
        sub_1B2220678(*(_DWORD *)&v26[v9], v13);
    }
    if (v7[1])
    {
      sub_1B221FF28((unsigned int *)&v26[v10], *v5);
      v14 = v5[1];
      if (v14)
        sub_1B2220678(*(_DWORD *)&v26[v9], v14);
    }
    if (v7[2])
    {
      sub_1B221FF28((unsigned int *)&v26[v8], *v5);
      v15 = v5[1];
      if (v15)
        sub_1B2220678(*(_DWORD *)&v26[v9], v15);
    }
    v6 += 352;
    v7 += 5;
    v8 += 352;
    v9 += 4;
    v10 += 352;
  }
  while (v6 != 1408);
  for (i = 0; i != -1408; i -= 352)
  {
    v17 = &v26[i];
    operator delete(*(void **)&v26[i + 7032]);
    *((_QWORD *)v17 + 837) = &v26[i + 6712];
    *((_DWORD *)v17 + 1677) = 40;
  }
  for (j = 0; j != -1408; j -= 352)
  {
    v19 = &v26[j];
    operator delete(*(void **)&v26[j + 5624]);
    *((_QWORD *)v19 + 661) = &v26[j + 5304];
    *((_DWORD *)v19 + 1325) = 40;
  }
  for (k = 0; k != -1408; k -= 352)
  {
    v21 = &v26[k];
    operator delete(*(void **)&v26[k + 4216]);
    *((_QWORD *)v21 + 485) = v21 + 3896;
    *((_DWORD *)v21 + 973) = 40;
  }
  v22 = 1408;
  do
  {
    v23 = &v26[v22];
    operator delete(*(void **)&v26[v22 + 1400]);
    *((_QWORD *)v23 + 133) = v23 + 1080;
    *((_DWORD *)v23 + 269) = 40;
    v22 -= 352;
  }
  while (v22);
  v24 = 1408;
  do
  {
    operator delete(*(void **)&v26[v24 - 8]);
    *(_QWORD *)&v26[v24 - 344] = &v26[v24 - 328];
    *(_DWORD *)&v26[v24 - 332] = 40;
    v24 -= 352;
  }
  while (v24);
  return 1;
}

uint64_t sub_1B2220C88(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int *v41;
  uint64_t i;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int *v46;
  _DWORD *v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  int *v54;
  char *v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t j;
  char v61;
  int v63;
  int __key;
  _BYTE v65[20];
  uint64_t v66;

  v10 = 0;
  v66 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)(a1 + 56);
  v12 = *(char **)(a1 + 48);
  do
  {
    if ((unint64_t)v12 >= *v11)
    {
      v14 = *(char **)(a1 + 40);
      v15 = (v12 - v14) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        goto LABEL_72;
      v17 = *v11 - (_QWORD)v14;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_1B17F7E58((uint64_t)v11, v18);
        v14 = *(char **)(a1 + 40);
        v12 = *(char **)(a1 + 48);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = -1;
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = &v19[4 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v12 = -1;
      v13 = v12 + 4;
    }
    *(_QWORD *)(a1 + 48) = v13;
    ++v10;
    v12 = v13;
  }
  while (v10 != 20);
  v22 = *(_QWORD *)(a1 + 40) + 80 * *(int *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 16);
  if ((a6 & 0x80000000) != 0)
    v24 = *(_DWORD *)(v23 + 20);
  else
    v24 = sub_1B2222DB0(v23, a6);
  if (!*(_BYTE *)(a1 + 24))
    goto LABEL_64;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = *(_QWORD *)(a2 + 72) + 4 * *(int *)(*(_QWORD *)(a2 + 24) + 4 * ((2 * a3) | 1));
  sub_1B2211558((_QWORD *)a2, a3, v65, a6);
  v27 = 0;
  v63 = v25 << 28;
  v28 = dword_1B22CADA0;
  do
  {
    if ((v65[v27] & 2) != 0)
      goto LABEL_46;
    v29 = *(int *)(v26 + 4 * v27);
    v30 = *(_QWORD *)(a2 + 144);
    v31 = *(unsigned int *)(v30 + 8 * v29);
    if ((int)v31 < 1)
    {
LABEL_29:
      v34 = 0;
    }
    else
    {
      v32 = 0;
      v33 = *(_QWORD *)(a2 + 168) + 4 * *(int *)(v30 + 4 * (int)((2 * v29) | 1));
      while (*(_DWORD *)(v33 + 4 * v32) != a3)
      {
        if (v31 == ++v32)
          goto LABEL_29;
      }
      v34 = *(_DWORD *)(v33 + 4 * (((int)v32 + 1) % (int)v31));
    }
    if (v34 == -1 || v34 >= a3)
      goto LABEL_46;
    v35 = *(_BYTE **)(a1 + 64);
    v36 = *(_BYTE **)(a1 + 72);
    if (v35 == v36)
      break;
    v37 = (_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * *(int *)(*(_QWORD *)(a2 + 24) + 4 * ((2 * v34) | 1)));
    if (*v37 == (_DWORD)v29)
    {
      v38 = 0;
    }
    else if (v37[1] == (_DWORD)v29)
    {
      v38 = 1;
    }
    else if (v37[2] == (_DWORD)v29)
    {
      v38 = 2;
    }
    else
    {
      v38 = v37[3] == (_DWORD)v29 ? 3 : -1;
    }
    __key = v34 | v63;
    v39 = bsearch(&__key, v35, (v36 - v35) >> 2, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1B2221114);
    if (!v39)
      break;
    v40 = *(_QWORD *)(a1 + 40)
        + ((uint64_t)((unint64_t)(5 * (((unint64_t)v39 - *(_QWORD *)(a1 + 64)) >> 2)) << 34) >> 30);
    v41 = &dword_1B22CADA0[4 * v38];
    for (i = 3; i != -1; --i)
    {
      v43 = *v41++;
      *(_DWORD *)(v22 + 4 * v28[i]) = *(_DWORD *)(v40 + 4 * v43);
    }
LABEL_46:
    ++v27;
    v28 += 4;
  }
  while (v27 != 4);
  v44 = v63 | a3;
  v45 = *(_QWORD *)(a1 + 80);
  v46 = *(int **)(a1 + 72);
  if ((unint64_t)v46 < v45)
  {
    *v46 = v44;
    v47 = v46 + 1;
    goto LABEL_63;
  }
  v48 = *(int **)(a1 + 64);
  v49 = v46 - v48;
  v50 = v49 + 1;
  if ((unint64_t)(v49 + 1) >> 62)
LABEL_72:
    abort();
  v51 = v45 - (_QWORD)v48;
  if (v51 >> 1 > v50)
    v50 = v51 >> 1;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
    v52 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    v53 = (char *)sub_1B17F7E58(a1 + 80, v52);
    v48 = *(int **)(a1 + 64);
    v46 = *(int **)(a1 + 72);
  }
  else
  {
    v53 = 0;
  }
  v54 = (int *)&v53[4 * v49];
  v55 = &v53[4 * v52];
  *v54 = v44;
  v47 = v54 + 1;
  while (v46 != v48)
  {
    v56 = *--v46;
    *--v54 = v56;
  }
  *(_QWORD *)(a1 + 64) = v54;
  *(_QWORD *)(a1 + 72) = v47;
  *(_QWORD *)(a1 + 80) = v55;
  if (v48)
    operator delete(v48);
LABEL_63:
  *(_QWORD *)(a1 + 72) = v47;
LABEL_64:
  v57 = 0;
  v58 = v65;
  v59 = v22;
  do
  {
    for (j = 0; j != 5; ++j)
    {
      if (*(_DWORD *)(v59 + 4 * j) == -1)
      {
        *(_DWORD *)(v59 + 4 * j) = *(_DWORD *)(a1 + 28) + v24;
        ++*(_DWORD *)(a1 + 28);
        v61 = 1;
      }
      else
      {
        v61 = 0;
      }
      v58[j] = v61;
    }
    ++v57;
    v58 += 5;
    v59 += 20;
  }
  while (v57 != 4);
  sub_1B2220A2C(a1, a2);
  ++*(_DWORD *)(a1 + 32);
  return v22;
}

uint64_t sub_1B2221114(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void sub_1B2221124(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 8))
  {
    sub_1B2219A18(*(_QWORD **)a1);
    *(_BYTE *)(a1 + 8) = 1;
  }
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 408);
  if ((*(_BYTE *)(v4 + a2) & 1) == 0)
  {
    *(_BYTE *)(v4 + a2) |= 1u;
    v5 = *(_QWORD **)(*(_QWORD *)a1 + 8);
    v6 = v5[3];
    v7 = *(unsigned int *)(v6 + 8 * a2);
    if ((int)v7 >= 1)
    {
      v8 = *(int *)(v6 + 8 * a2 + 4);
      v9 = (int *)(v5[9] + 4 * v8);
      v10 = (int *)(v5[6] + 4 * v8);
      do
      {
        v11 = *v9++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 432) + v11) |= 1u;
        v12 = *v10++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 456) + v12) |= 1u;
        --v7;
      }
      while (v7);
    }
  }
}

double sub_1B22211E4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v4;
  double result;

  sub_1B22197F4(a1, a2, a3, a4);
  *v4 = &off_1E63CE040;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)((char *)v4 + 28) = 0x400000000;
  return result;
}

void sub_1B2221214(_QWORD *a1)
{
  sub_1B221988C(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B2221238(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v2 = *(int **)(a1 + 8);
  v3 = *((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6);
  v4 = *((_QWORD *)v2 + 10) - *((_QWORD *)v2 + 9);
  v5 = *((_QWORD *)v2 + 16) - *((_QWORD *)v2 + 15);
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  v13 = 0;
  v9 = *((_QWORD *)v2 + 3);
  v10 = (unint64_t)(*((_QWORD *)v2 + 4) - v9) >> 2;
  *(_QWORD *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = v10;
  v11 = *((_QWORD *)v2 + 3);
  v12 = (unint64_t)(*((_QWORD *)v2 + 4) - v11) >> 2;
  *(_QWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = v12;
  sub_1B220B058(a1 + 120, (int)(v3 >> 2), &v13);
  sub_1B220B058(a1 + 144, (int)(v4 >> 2), &v13);
  sub_1B220B058(a1 + 192, (int)(v5 >> 2), &v13);
  sub_1B220B058(a1 + 168, v6, &v13);
  sub_1B220B058(a1 + 216, v7, &v13);
  sub_1B220B058(a1 + 240, v8, &v13);
}

_QWORD *sub_1B222131C(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_1B2221364((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_1B17F8190((uint64_t)(v2 + 12), 4 * *v2);
  return sub_1B22213D0(a1);
}

void sub_1B2221364(uint64_t a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 24, 2 * **(int **)(a1 + 16));
  v2 = *(int **)(a1 + 16);
  if (*v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = (_DWORD *)(*((_QWORD *)v2 + 3) + 4);
    do
    {
      *(v5 - 1) = 4;
      *v5 = v3;
      ++v4;
      v3 += 4;
      v5 += 2;
    }
    while (v4 < *v2);
  }
}

_QWORD *sub_1B22213D0(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 72);
    v7 = result[11];
    v8 = result[15];
    do
    {
      v9 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = (8 * v3) | 4;
        v12 = *(int *)(v4 + v11);
        v13 = v5 + 4 * v12;
        v14 = v6 + 4 * v12;
        v15 = v8 + 4 * *(int *)(v7 + v11);
        do
        {
          v16 = *(_DWORD *)(v15 + 4 * v10);
          if (v16 != -1)
          {
            if (v10)
              v17 = v10;
            else
              v17 = v9;
            v18 = *(_DWORD *)(result[21] + 4 * v3);
            LODWORD(v19) = v17 - 1;
            v20 = result[27];
            v21 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * (v17 - 1)));
            v22 = *(_DWORD *)(result[30] + 4 * *(int *)(v13 + 4 * v10));
            v23 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * v10));
            v24 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                           + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v16) | 1)));
            if ((_DWORD)v9 == 4)
            {
              v19 = (int)v19;
              LODWORD(v25) = v17 - 2;
              if (!(_DWORD)v19)
                LODWORD(v25) = 3;
              v24[v10] = v22;
              if ((_DWORD)v25)
                v26 = v25 - 1;
              else
                v26 = 3;
              v24[v26] = v23;
              v25 = (int)v25;
            }
            else
            {
              *v24 = v22;
              v24[1] = v23;
              v25 = 2;
              v19 = 3;
            }
            v24[v25] = v18;
            v24[v19] = v21;
          }
          ++v10;
        }
        while (v9 != v10);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B2221508(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_1B2221364((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_1B17F8190((uint64_t)(v2 + 18), 4 * *v2);
  return sub_1B2221550(a1);
}

_QWORD *sub_1B2221550(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _BOOL4 v29;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 72);
    v7 = result[11];
    v8 = result[15];
    v9 = result[13];
    v10 = result[18];
    do
    {
      v11 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = (8 * v3) | 4;
        v14 = *(int *)(v4 + v13);
        v15 = v5 + 4 * v14;
        v16 = v6 + 4 * v14;
        v17 = v8 + 4 * *(int *)(v7 + v13);
        v18 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          v19 = *(_DWORD *)(v17 + 4 * v12);
          if (v19 != -1)
          {
            if (v12)
              v20 = v12;
            else
              v20 = v11;
            LODWORD(v21) = v20 - 1;
            v22 = *(int *)(v16 + 4 * (v20 - 1));
            v23 = *(_QWORD *)(v1 + 120);
            v24 = (_DWORD *)(v23 + 8 * v22);
            v25 = *(int *)(v16 + 4 * v12);
            v26 = *(_DWORD *)(v15 + 4 * v12);
            v27 = (_DWORD *)(v23 + 8 * v25);
            v29 = *v24 == v24[1] || *v24 != v26;
            v31 = *v27 != v27[1] && *v27 != v26;
            v32 = result[24];
            v33 = *(_DWORD *)(v32 + 8 * v22 + 4 * v29);
            v34 = *(_DWORD *)(v32 + 8 * v25 + 4 * v31);
            v35 = *(_DWORD *)(v18 + 4 * (int)v21);
            v36 = *(_DWORD *)(v18 + 4 * v12);
            v37 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                           + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v19) | 1)));
            if ((_DWORD)v11 == 4)
            {
              v21 = (int)v21;
              LODWORD(v38) = v20 - 2;
              if (!(_DWORD)v21)
                LODWORD(v38) = 3;
              v37[v12] = v34;
              if ((_DWORD)v38)
                v39 = v38 - 1;
              else
                v39 = 3;
              v37[v39] = v36;
              v38 = (int)v38;
            }
            else
            {
              *v37 = v34;
              v37[1] = v36;
              v38 = 2;
              v21 = 3;
            }
            v37[v38] = v35;
            v37[v21] = v33;
          }
          ++v12;
        }
        while (v11 != v12);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B22216D4(_QWORD *a1)
{
  sub_1B17F8190(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_1B2221710(a1);
  return sub_1B22217B0(a1);
}

_QWORD *sub_1B2221710(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 72);
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = (8 * v3) | 4;
        v10 = (int *)(v5 + 4 * *(int *)(v4 + v9));
        v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        do
        {
          v13 = *v11++;
          v12 = v13;
          if ((_DWORD)v13 != -1)
          {
            v14 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v12);
            *v14 = *(_DWORD *)(result[21] + 4 * v3);
            v14[1] = *(_DWORD *)(result[27] + 4 * *v10);
          }
          ++v10;
          --v8;
        }
        while (v8);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B22217B0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v1 + 120);
    v4 = result[24];
    do
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v6;
        v8 = *(int *)(v4 + 8 * v2 + 4 * v5);
        if ((_DWORD)v8 != -1)
        {
          v9 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v8);
          *v9 = *(_DWORD *)(result[27] + 4 * v2);
          v9[1] = *(_DWORD *)(result[30] + 4 * *(int *)(v3 + 8 * v2 + 4 * v5));
        }
        v6 = 0;
        v5 = 1;
      }
      while ((v7 & 1) != 0);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_1B2221834(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = 2
     * (((*(_QWORD *)(a1[1] + 176) - *(_QWORD *)(a1[1] + 168)) >> 2)
      + ((*(_QWORD *)(a1[1] + 56) - *(_QWORD *)(a1[1] + 48)) >> 2));
  sub_1B17F8190(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_1B17F8190(a1[2] + 168, v2);
  sub_1B18261FC(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_1B22218FC(a1);
  sub_1B2221A38(a1);
  v3 = a1[2];
  v4 = (int *)(*(_QWORD *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_1B17F8190(v3 + 168, v5);
  sub_1B18261FC(a1[2] + 192, v5);
}

_QWORD *sub_1B22218FC(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[11];
    v5 = result[15];
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = 0;
        v10 = (8 * v3) | 4;
        v11 = v5 + 4 * *(int *)(v4 + v10);
        v12 = v7 + 4 * *(int *)(v6 + v10);
        do
        {
          v13 = *(int *)(v12 + 4 * v9);
          if ((_DWORD)v13 == -1)
          {
            ++v9;
          }
          else
          {
            v14 = result[2];
            v15 = *(_QWORD *)(v14 + 144);
            v16 = (_DWORD *)(v15 + 8 * v13);
            *v16 = 2;
            if ((_DWORD)v13)
              v17 = *(v16 - 1) + *(v16 - 2);
            else
              v17 = 0;
            v18 = 2 * v13;
            v16[1] = v17;
            v19 = *(_DWORD *)(v14 + 16);
            if (v19 <= 2)
              v19 = 2;
            *(_DWORD *)(v14 + 16) = v19;
            v20 = *(int *)(v15 + 4 * (v18 | 1));
            v21 = (_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v20);
            v22 = (__int16 *)(*(_QWORD *)(v14 + 192) + 2 * v20);
            v23 = v9 + 1;
            if (v9 + 1 >= v8)
              v24 = 0;
            else
              v24 = v9 + 1;
            v25 = *(_DWORD *)(v11 + 4 * v9);
            if (v25 == -1)
            {
              v27 = 0;
            }
            else
            {
              *v21 = v25;
              if ((_DWORD)v8 == 4)
                v26 = v24;
              else
                v26 = 1;
              *v22 = v26;
              v27 = 1;
            }
            v28 = *(_DWORD *)(v11 + 4 * v24);
            if (v28 != -1)
            {
              v21[v27] = v28;
              v29 = ((_BYTE)v24 + 2) & 3;
              if ((_DWORD)v8 != 4)
                v29 = 2;
              v22[v27] = v29;
              LODWORD(v27) = v27 + 1;
            }
            *v16 = v27;
            v9 = v23;
          }
        }
        while (v9 != v8);
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B2221A38(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  __int16 v41;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[24];
    do
    {
      v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v1 + 144);
        v8 = *(int *)(v7 + ((8 * v3) | 4));
        v9 = *(unsigned int *)(v7 + 8 * v3);
        v10 = *(_QWORD *)(v1 + 168) + 4 * v8;
        v11 = *(_QWORD *)(v1 + 192) + 2 * v8;
        v12 = (_DWORD *)(*(_QWORD *)(v1 + 120) + 8 * v3);
        v13 = 1;
        do
        {
          v14 = v13;
          v15 = (int)v5[v6];
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v15);
            *v18 = v9;
            if ((_DWORD)v15)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v18[1] = v19;
            v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9)
              v20 = v9;
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              v23 = *(_QWORD *)(v16 + 168) + 4 * v22;
              v24 = *(_QWORD *)(v16 + 192) + 2 * v22;
              v25 = *(_QWORD *)(v1 + 24);
              v26 = result[11];
              v27 = result[15];
              v28 = v9;
              v29 = (int *)v10;
              v30 = (unsigned __int16 *)v11;
              do
              {
                v32 = *v29++;
                v31 = v32;
                LODWORD(v32) = *v30++;
                v33 = v32;
                v34 = (2 * v31) | 1;
                v35 = v6;
                if (*v12 != v12[1])
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                v36 = 2 * v31;
                v37 = v27 + 4 * *(int *)(v26 + 4 * v34);
                if (v35 + v33 == *(_DWORD *)(v26 + 4 * v36))
                  v38 = 0;
                else
                  v38 = v35 + v33;
                v39 = *(_DWORD *)(v37 + 4 * v38);
                if (v39 != -1)
                {
                  v40 = *(_DWORD *)(v25 + 4 * v36);
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  if (v35)
                    v41 = 3;
                  else
                    v41 = 0;
                  if (v40 != 4)
                    LOWORD(v33) = v41;
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *v18 = v21;
          }
          v13 = 0;
          v6 = 1;
        }
        while ((v14 & 1) != 0);
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_1B2221C10(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (((v2[22] - v2[21]) >> 1) & 0xFFFFFFFE) + ((v2[7] - v2[6]) >> 2) + ((v2[37] - v2[36]) >> 2);
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 264, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 288, v3);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 312, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_1B2221DFC((_QWORD *)a1);
    sub_1B2221ED8((_QWORD *)a1);
    sub_1B2221D08((_QWORD *)a1);
  }
  else
  {
    sub_1B2221D08((_QWORD *)a1);
    sub_1B2221DFC((_QWORD *)a1);
    sub_1B2221ED8((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 264) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_1B17F8190(v4 + 288, v6);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 312, v6);
}

_QWORD *sub_1B2221D08(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 288);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 312);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
              *(_DWORD *)(v17 + 4 * v14) = v24;
              if (v25 != 4)
                v23 = 0;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B2221DFC(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = (unsigned int *)(result[11] + 8 * v3);
        v7 = result[15];
        v8 = *v6;
        v9 = (int)v6[1];
        v10 = (_QWORD *)result[2];
        v11 = (_DWORD *)(v10[33] + 8 * v5);
        *v11 = v8;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v15 = v7 + 4 * v9;
          v16 = v10[36] + 4 * v12;
          v17 = v10[39] + 2 * v12;
          do
          {
            v18 = *(_DWORD *)(v15 + 4 * v13);
            if (v18 != -1)
            {
              *(_DWORD *)(v16 + 4 * v14) = v18;
              v19 = ((_BYTE)v13 + 2) & 3;
              if ((_DWORD)v8 != 4)
                v19 = 2;
              *(_WORD *)(v17 + 2 * v14++) = v19;
            }
            ++v13;
          }
          while (v8 != v13);
        }
        *v11 = v14;
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B2221ED8(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 192);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = 2 * v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
            if ((_DWORD)v22 + 1 == v25)
              v26 = 0;
            else
              v26 = v23 + 1;
            v27 = *(_DWORD *)(v24 + 4 * v26);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              if (v25 == 4)
                v28 = v23;
              else
                v28 = 3;
              *(_WORD *)(v18 + 2 * v14++) = v28;
            }
            v29 = *(_DWORD *)(v24 + 4 * v23);
            if (v29 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v29;
              if (v25 == 4)
                v30 = v26;
              else
                v30 = 1;
              *(_WORD *)(v18 + 2 * v14++) = v30;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_1B2222008(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 2)
     + 2 * *(_DWORD *)(v2 + 4)
     + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2)
     + ((*(_QWORD *)(v2 + 368) - *(_QWORD *)(v2 + 360)) >> 2);
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 336, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_1B17F8190(*(_QWORD *)(a1 + 16) + 360, v3);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_1B22221FC((_QWORD *)a1);
    sub_1B22222F4((_QWORD *)a1);
    sub_1B2222104((_QWORD *)a1);
  }
  else
  {
    sub_1B2222104((_QWORD *)a1);
    sub_1B22221FC((_QWORD *)a1);
    sub_1B22222F4((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_1B17F8190(v4 + 360, v6);
  sub_1B18261FC(*(_QWORD *)(a1 + 16) + 384, v6);
}

_QWORD *sub_1B2222104(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 360);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 336) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 384);
        v11 = result[2];
        v12 = *(_QWORD *)(v11 + 336);
        v13 = (_DWORD *)(v12 + 8 * v5);
        *v13 = v8;
        if ((_DWORD)v5)
          v14 = *(v13 - 1) + *(v13 - 2);
        else
          v14 = 0;
        v13[1] = v14;
        v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8)
          v15 = v8;
        *(_DWORD *)(v11 + 20) = v15;
        if ((int)v8 < 1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = (int *)(v6 + 4 * v9);
          v18 = (unsigned __int16 *)(v10 + 2 * v9);
          v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          v20 = *(_QWORD *)(v11 + 360) + 4 * v19;
          v21 = *(_QWORD *)(v11 + 384) + 2 * v19;
          v22 = result[24];
          do
          {
            v24 = *v17++;
            v23 = v24;
            LODWORD(v24) = *v18++;
            v25 = *(_DWORD *)(v22 + 8 * v23 + 4 * v24);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *v13 = v16;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B22221FC(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = result[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * v3);
        v7 = *(int *)(result[13] + 8 * v3 + 4);
        v8 = result[18];
        v9 = result[2];
        v10 = *(_QWORD *)(v9 + 336);
        v11 = (int *)(v10 + 8 * v5);
        *v11 = v6;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        v13 = *(_DWORD *)(v9 + 20);
        if (v13 <= v6)
          v13 = v6;
        *(_DWORD *)(v9 + 20) = v13;
        if (v6 < 1)
        {
          v15 = 0;
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = v8 + 4 * v7;
          v17 = *(int *)(v10 + 4 * (int)((2 * v5) | 1));
          v18 = *(_QWORD *)(v9 + 360) + 4 * v17;
          v19 = *(_QWORD *)(v9 + 384) + 2 * v17;
          do
          {
            if (v14)
              v20 = v14;
            else
              v20 = v6;
            v21 = *(_DWORD *)(v16 + 4 * (v20 - 1));
            if (v21 != -1)
            {
              *(_DWORD *)(v18 + 4 * v15) = v21;
              *(_WORD *)(v19 + 2 * v15++) = 0;
            }
            ++v14;
          }
          while (v6 != v14);
        }
        *v11 = v15;
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B22222F4(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  __int16 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  __int16 v37;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = result[24];
        v12 = result[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (int *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v17 = (int *)(v11 + 8 * v3);
        v18 = 2 * v5;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        v19 = *(int *)(v14 + 4 * (v18 | 1));
        v20 = (int *)(*(_QWORD *)(v12 + 360) + 4 * v19);
        v21 = (__int16 *)(*(_QWORD *)(v12 + 384) + 2 * v19);
        if (*v17 == -1)
        {
          v22 = 0;
        }
        else
        {
          *v20 = *v17;
          *v21 = 0;
          v22 = 1;
        }
        v23 = v17[1];
        if (v23 != -1)
        {
          v20[v22] = v23;
          v21[v22++] = 0;
        }
        if ((int)v7 >= 1)
        {
          v24 = 0;
          v25 = v6 + 4 * v8;
          v26 = v9 + 2 * v8;
          v27 = result[13];
          v28 = result[18];
          v29 = (_DWORD *)(v10 + 8 * v3);
          do
          {
            v30 = *(unsigned __int16 *)(v26 + 2 * v24);
            v31 = (2 * *(int *)(v25 + 4 * v24)) | 1;
            v32 = *(_DWORD *)(v28 + 4 * *(int *)(v27 + 4 * v31) + 4 * v30);
            if (v32 != -1)
            {
              v20[v22] = v32;
              v21[v22++] = 1;
              if (!v24 && v22 == 3)
              {
                if (*v29 == v29[1])
                {
                  v33 = v20[1];
                  v34 = v21[1];
                }
                else
                {
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30);
                  v33 = v20[1];
                  v34 = v21[1];
                  if (v35 == *v29)
                  {
                    v36 = *v20;
                    *v20 = v33;
                    v37 = *v21;
                    *v21 = v34;
                    v34 = v37;
                    v33 = v36;
                  }
                }
                v20[1] = v20[2];
                v20[2] = v33;
                v21[1] = v21[2];
                v21[2] = v34;
                v22 = 3;
              }
            }
            ++v24;
          }
          while (v7 != v24);
        }
        *v15 = v22;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_1B22224C0(_QWORD *result)
{
  int *v1;
  uint64_t i;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    for (i = 0; i < *v1; ++i)
    {
      v3 = (2 * i) | 1;
      v4 = (_DWORD *)(result[15] + 4 * *(int *)(result[11] + 4 * v3));
      v5 = (_DWORD *)(result[18] + 4 * *(int *)(result[13] + 4 * v3));
      v6 = *((_QWORD *)v1 + 3);
      v7 = *(unsigned int *)(v6 + 8 * i);
      v8 = result[51];
      if ((*(_BYTE *)(v8 + i) & 1) != 0)
      {
        if ((int)v7 >= 1)
        {
          do
          {
            *v4++ = 2;
            *v5++ = 2;
            --v7;
          }
          while (v7);
        }
        *(_DWORD *)(result[21] + 4 * i) = 2;
        v22 = *(_BYTE *)(v8 + i) & 0xE1;
      }
      else
      {
        if ((int)v7 < 1)
          goto LABEL_22;
        v9 = 0;
        v10 = 0;
        v11 = *((_QWORD *)v1 + 6) + 4 * *(int *)(v6 + 4 * v3);
        v12 = result[57];
        do
        {
          if ((*(_BYTE *)(v12 + *(int *)(v11 + 4 * v9)) & 1) != 0)
          {
            v10 = 1;
            v4[v9] = 1;
            if (v9)
              v13 = v9;
            else
              v13 = v7;
            v5[v9] = 1;
            v5[v13 - 1] = 1;
          }
          ++v9;
        }
        while (v7 != v9);
        if (!v10)
          goto LABEL_22;
        *(_DWORD *)(result[21] + 4 * i) = 1;
        v14 = (int *)(*((_QWORD *)v1 + 9) + 4 * *(int *)(v6 + 4 * v3));
        v15 = *(unsigned int *)(v6 + 8 * i);
        if ((_DWORD)v15 == 3)
        {
          v21 = *(_BYTE *)(result[54] + v14[1]) & 0xE | (*(unsigned __int8 *)(result[54] + *v14) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + v14[2])) & 0xC;
          v20 = *(_BYTE *)(v8 + i);
        }
        else
        {
          if ((_DWORD)v15 != 4)
          {
            v23 = *(_BYTE *)(v8 + i) & 0xE1;
            *(_BYTE *)(v8 + i) &= 0xE1u;
            if ((int)v15 >= 1)
            {
              do
              {
                v24 = *v14++;
                v23 |= *(_BYTE *)(result[54] + v24) & 0x1E;
                *(_BYTE *)(v8 + i) = v23;
                --v15;
              }
              while (v15);
            }
            goto LABEL_22;
          }
          v16 = result[54];
          v17 = *(unsigned __int8 *)(v16 + *v14);
          v18 = *(_BYTE *)(v16 + v14[1]) & 0xE;
          v19 = (2 * *(unsigned __int8 *)(v16 + v14[2])) & 0xC;
          LOBYTE(v16) = 4 * *(_BYTE *)(v16 + v14[3]);
          v20 = *(_BYTE *)(v8 + i);
          v21 = v18 | (v17 >> 1) & 0xF | v19 | v16 & 8;
        }
        v22 = v20 & 0xE1 | (2 * (v21 & 0xF));
      }
      *(_BYTE *)(v8 + i) = v22;
LABEL_22:
      v1 = (int *)result[1];
    }
  }
  return result;
}

uint64_t sub_1B22226A4(uint64_t a1, int a2, int a3)
{
  char **v4;
  _OWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xC0 | 1;
  *(_BYTE *)(a1 + 12) &= 0xC0u;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF000 | 0xF0;
  v4 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  sub_1B2222808((void **)(a1 + 40), 0xAuLL);
  v5 = (_OWORD *)operator new();
  sub_1B22107D8(v5);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD **)(a1 + 48);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v6 - (_QWORD)*v4;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1B17F812C(a1 + 56, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v5;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 40);
    v16 = *(char **)(a1 + 48);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v4;
    }
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 48) = v8;
  sub_1B2222898((void **)(a1 + 88), 0xAuLL);
  sub_1B2222970((_QWORD *)a1);
  return a1;
}

void sub_1B2222808(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F812C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B2222898(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_1B17F7D88(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B2222970(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_1B2222D74((uint64_t)(a1 + 11), (uint64_t)(a1[6] - a1[5]) >> 3);
  v2 = (_QWORD *)a1[11];
  v2[1] = 0;
  v3 = (_QWORD *)a1[5];
  *v2 = *v3;
  v2[2] = 0;
  v4 = (_QWORD *)a1[8];
  v5 = a1[9] - (_QWORD)v4;
  v6 = v5 >> 3;
  if ((v5 >> 3))
  {
    v2[2] = *v4;
    if ((int)v6 >= 2)
    {
      v7 = (v5 >> 3) - 1;
      v8 = v2 + 5;
      v9 = v3 + 1;
      v10 = v4 + 1;
      do
      {
        *(v8 - 1) = *(v10 - 1);
        v11 = *v9++;
        *(v8 - 2) = v11;
        v12 = *v10++;
        *v8 = v12;
        v8 += 3;
        --v7;
      }
      while (v7);
    }
    v13 = &v2[3 * (int)v6];
    v13[1] = *(_QWORD *)((char *)v4 + ((uint64_t)((v5 << 29) - 0x100000000) >> 29));
    *v13 = *(_QWORD *)((char *)v3 + ((uint64_t)(v5 << 29) >> 29));
    v13[2] = 0;
  }
}

uint64_t sub_1B2222A38(uint64_t a1, int a2, int a3)
{
  return sub_1B22226A4(a1, a2, a3);
}

_QWORD *sub_1B2222A40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a1[5];
  v2 = a1[6];
  if ((int)((unint64_t)(v2 - v3) >> 3) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        v6 = sub_1B22109C4(v5);
        MEMORY[0x1B5E22E18](v6, 0x10B0C4095CCE9FBLL);
        v3 = a1[5];
        v2 = a1[6];
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v2 - v3) >> 3));
  }
  v7 = (_QWORD *)a1[8];
  v8 = a1[9];
  if ((int)((unint64_t)(v8 - (_QWORD)v7) >> 3) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = v7[v9];
      if (v10)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v10 + 8))(v7[v9]);
        v7 = (_QWORD *)a1[8];
        v8 = a1[9];
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)(v8 - (_QWORD)v7) >> 3));
  }
  v11 = (void *)a1[11];
  if (v11)
  {
    a1[12] = v11;
    operator delete(v11);
    v7 = (_QWORD *)a1[8];
  }
  if (v7)
  {
    a1[9] = v7;
    operator delete(v7);
  }
  v12 = (void *)a1[5];
  if (v12)
  {
    a1[6] = v12;
    operator delete(v12);
  }
  return a1;
}

int32x2_t sub_1B2222B30(uint64_t a1)
{
  int **v1;
  int *v2;
  int32x2_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int32x2_t result;

  v1 = *(int ***)(a1 + 40);
  if (*(int ***)(a1 + 48) == v1)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = 0;
    v3 = 0;
  }
  else
  {
    v2 = *v1;
    v3 = *(int32x2_t *)(*v1 + 1);
    v4 = **v1;
    v5 = (*((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6)) >> 2;
    v6 = v2[5];
  }
  result = vrev64_s32(v3);
  *(int32x2_t *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  return result;
}

uint64_t sub_1B2222B80(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  *(int32x2_t *)(result + 20) = vadd_s32(*(int32x2_t *)(result + 20), vrev64_s32(*(int32x2_t *)(a2 + 4)));
  v2 = *(_DWORD *)(result + 32) + ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  *(_DWORD *)(result + 28) += *(_DWORD *)a2;
  *(_DWORD *)(result + 32) = v2;
  v3 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(result + 36) > v3)
    v3 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = v3;
  return result;
}

uint64_t sub_1B2222BCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[7];
  v4 = (uint64_t)(a1 + 7);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[5];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)sub_1B17F812C(v4, v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v8 = v15 + 1;
    v18 = (char *)a1[5];
    v17 = (char *)a1[6];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[5];
    }
    a1[5] = v15;
    a1[6] = v8;
    a1[7] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[6] = v8;
  return sub_1B2222B80((uint64_t)a1, a2);
}

void sub_1B2222CA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[10];
  v4 = (uint64_t)(a1 + 10);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[8];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)sub_1B17F812C(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = v15 + 8;
    v18 = (char *)a1[8];
    v17 = (char *)a1[9];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)a1[8];
    }
    a1[8] = v15;
    a1[9] = v8;
    a1[10] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[9] = v8;
}

void sub_1B2222D74(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1B22237D8((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t sub_1B2222DB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  if ((int)((unint64_t)(*(_QWORD *)(a1 + 48) - v2) >> 3) < 1)
    return 0;
  v5 = 0;
  LODWORD(v6) = 0;
  do
  {
    v6 = sub_1B22138D4(*(_QWORD *)(v2 + 8 * v5++), a2) + v6;
    v2 = *(_QWORD *)(a1 + 40);
  }
  while (v5 < (int)((unint64_t)(*(_QWORD *)(a1 + 48) - v2) >> 3));
  return v6;
}

void sub_1B2222E28(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  int v21;
  char v22;

  if (!*(_DWORD *)(**(_QWORD **)(a1 + 40) + 8))
  {
    v10 = "Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.";
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v10 = "Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.";
LABEL_5:
    sub_1B221BA4C(4, (uint64_t)v10, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  *(_BYTE *)(a1 + 12) = a2;
  v22 = a2;
  v12 = a2 & 0xF;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xC3 | (4 * (a2 & 0xF)) | 1;
  v21 = sub_1B2209144(*(_DWORD *)a1);
  if (v12)
  {
    v13 = 0;
    v14 = (a2 >> 3) & 2;
    v15 = 8 * (a2 & 0xF);
    do
    {
      if (v15 - 8 == v13 && (v22 & 0x20) == 0)
        v17 = 4;
      else
        v17 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + v13);
      v19 = (_OWORD *)operator new();
      sub_1B22107D8(v19);
      v20 = operator new();
      if (v21)
        sub_1B221CB70(v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      else
        sub_1B22211E4(v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      sub_1B2219AC8(v20, v17 | v14);
      sub_1B2222BCC((_QWORD *)a1, (uint64_t)v19);
      sub_1B2222CA4((_QWORD *)a1, v20);
      v13 += 8;
    }
    while (v15 != v13);
  }
  sub_1B2222970((_QWORD *)a1);
}

uint64_t sub_1B2222FE8(uint64_t result, _WORD *a2, unsigned int a3)
{
  _WORD *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (_WORD *)result;
  v5 = 15;
  if ((*a2 & 0x100) != 0)
  {
    result = sub_1B2209178(a3);
    v6 = result == 4;
    if ((_DWORD)result == 4)
      v5 = 11;
    else
      v5 = 15;
  }
  else
  {
    v6 = 0;
  }
  v7 = v5 | *v4 & 0xFFF0;
  *v4 = v5 | *v4 & 0xFFF0;
  if (v6 | ((unsigned __int16)(*a2 & 0x200) >> 9))
    v8 = 0;
  else
    v8 = 16;
  v9 = v8 | v7 & 0xFFFFFFEF;
  *v4 = v9;
  v10 = (v9 & 0xFFFFFC1F | ((unsigned __int16)*a2 >> 4) & 0x20) ^ 0x3E0;
  *v4 = v10;
  *v4 = v10 & 0xFBFF | *a2 & 0x400;
  return result;
}

void sub_1B22230A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  int v35;
  int v36;

  v36 = a2;
  if (!*(_DWORD *)(**(_QWORD **)(a1 + 40) + 8))
  {
    v11 = "Failure in TopologyRefiner::RefineAdaptive() -- base level is uninitialized.";
    goto LABEL_30;
  }
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v11 = "Failure in TopologyRefiner::RefineAdaptive() -- previous refinements already applied.";
LABEL_30:
    sub_1B221BA4C(4, (uint64_t)v11, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (*(_DWORD *)a1 != 1)
  {
    v11 = "Failure in TopologyRefiner::RefineAdaptive() -- currently only supported for Catmark scheme.";
    goto LABEL_30;
  }
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_WORD *)(a1 + 16) = a2;
  v12 = a2 >> 4;
  v13 = a2 & 0xF;
  sub_1B2222FE8((uint64_t)&v35, &v36, 1u);
  v34 = v35;
  v14 = v35;
  if (v13 >= v12)
    v15 = v12;
  else
    v15 = v13;
  if (v13 > v12)
  {
    v14 = v35 & 0xFFFC;
    LOWORD(v34) = v35 & 0xFFFC;
    if ((a2 & 0x200) != 0)
    {
      v14 = v35 & 0xFF0C;
      LOWORD(v34) = v35 & 0xFF0C;
    }
  }
  if ((v35 & 0x400) != 0)
  {
    v16 = *(uint64_t **)(**(_QWORD **)(a1 + 40) + 456);
    v17 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 464) - (_QWORD)v16;
    if ((int)(v17 >> 3) < 1)
      goto LABEL_17;
    v18 = 0;
    v19 = (v17 >> 3);
    do
    {
      v20 = *v16++;
      v18 |= *(_BYTE *)(v20 + 12) == 0;
      --v19;
    }
    while (v19);
    if ((v18 & 1) == 0)
    {
LABEL_17:
      LOWORD(v35) = v35 & 0xFBFF;
      LOWORD(v34) = v14 & 0xFBFF;
    }
  }
  v21 = sub_1B2209144(*(_DWORD *)a1);
  if (v13)
  {
    v22 = v21;
    v23 = 0;
    v24 = (a2 >> 10) & 2 | 1;
    v25 = a2 & 0xF;
    while (1)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v23);
      v27 = (_OWORD *)operator new();
      sub_1B22107D8(v27);
      v28 = operator new();
      if (v22)
        sub_1B221CB70(v28, v26, (uint64_t)v27, (_DWORD *)(a1 + 4));
      else
        sub_1B22211E4(v28, v26, (uint64_t)v27, (_DWORD *)(a1 + 4));
      v32 = v28;
      v33 = 0;
      v30 = v23 + 1 <= v15 ? &v35 : &v34;
      sub_1B2223374(v29, (uint64_t)&v32, v30);
      if (!v33)
        break;
      sub_1B2219AC8(v28, v24);
      sub_1B2222BCC((_QWORD *)a1, (uint64_t)v27);
      sub_1B2222CA4((_QWORD *)a1, v28);
      if (v25 == ++v23)
        goto LABEL_32;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v31 = sub_1B22109C4(v27);
    MEMORY[0x1B5E22E18](v31, 0x10B0C4095CCE9FBLL);
  }
LABEL_32:
  *(_BYTE *)(a1 + 8) = ((*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 64)) >> 1) & 0x3C | *(_BYTE *)(a1 + 8) & 0xC3;
  sub_1B2222970((_QWORD *)a1);
}

void sub_1B2223374(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  unsigned __int16 *v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    v4 = *(int **)(*(_QWORD *)a2 + 8);
    if ((*a3 & 0x400) != 0)
      v5 = (*((_QWORD *)v4 + 58) - *((_QWORD *)v4 + 57)) >> 3;
    else
      LODWORD(v5) = 0;
    if (*v4 >= 1)
    {
      v6 = 0;
      v36 = *(_DWORD *)(*(_QWORD *)a2 + 32);
      v37 = v4[3];
      do
      {
        if ((*(_BYTE *)(*((_QWORD *)v4 + 12) + v6) & 1) != 0)
          goto LABEL_70;
        v7 = *((_QWORD *)v4 + 3);
        if (!v37)
        {
          v8 = *(unsigned int *)(v7 + 8 * v6);
          if ((_DWORD)v8 != v36)
          {
            if ((int)v8 >= 1)
            {
              v25 = 0;
              v26 = *((_QWORD *)v4 + 6) + 4 * *(int *)(v7 + ((8 * v6) | 4));
              do
              {
                v27 = *(int *)(v26 + 4 * v25);
                v28 = *((_QWORD *)v4 + 33);
                v29 = *(unsigned int *)(v28 + 8 * (_DWORD)v27);
                if ((int)v29 >= 1)
                {
                  v30 = (int *)(*((_QWORD *)v4 + 36) + 4 * *(int *)(v28 + 8 * v27 + 4));
                  do
                  {
                    v31 = *v30++;
                    sub_1B2221124(a2, v31);
                    --v29;
                  }
                  while (v29);
                }
                ++v25;
              }
              while (v25 != v8);
            }
            goto LABEL_70;
          }
        }
        v9 = *(unsigned int *)(v7 + 8 * v6);
        sub_1B2211428(v4, v6, &v39, 0xFFFFFFFF);
        v10 = sub_1B22115DC(&v39, v9);
        if ((v10 & 0x800) != 0)
          goto LABEL_16;
        if ((v10 & 1) != 0 && (*(_WORD *)a3 & 0x200) != 0)
          goto LABEL_69;
        if ((v10 & 2) != 0 && (*(_WORD *)a3 & 1) != 0)
        {
          if ((v10 & 0x780) == 0x80)
            goto LABEL_69;
          if (v4[3] <= 1 && (int)v9 >= 1)
          {
            v33 = &v39;
            do
            {
              v34 = *v33++;
              if ((v34 & 0x782) == 0x82)
                goto LABEL_69;
              --v9;
            }
            while (v9);
          }
        }
        if ((v10 & 0x780) == 0x80)
        {
LABEL_16:
          LOWORD(v11) = *(_WORD *)a3;
          goto LABEL_17;
        }
        if ((v10 & 0x80) == 0)
          goto LABEL_69;
        if ((v10 & 0x60) != 0)
        {
          if ((~*(unsigned __int16 *)a3 & 0xC) == 0)
            goto LABEL_69;
          v32 = sub_1B2212080(v4, v6, 0, 0);
          LOWORD(v11) = *(_WORD *)a3;
          if (v32)
          {
            if ((v11 & 4) != 0)
              goto LABEL_69;
          }
          else if ((v11 & 8) != 0)
          {
            goto LABEL_69;
          }
        }
        else
        {
          if ((v10 & 0x1010) == 0)
            goto LABEL_16;
          if ((v10 & 0x4000) != 0)
          {
            if (((v10 >> 7) & 0xF) >= 8)
            {
              LOWORD(v11) = *(_WORD *)a3;
              if ((*(_WORD *)a3 & 0x100) != 0)
                goto LABEL_69;
            }
            else if (((v10 >> 7) & 4) != 0)
            {
              v11 = *(unsigned __int16 *)a3;
              if ((v10 & 4) != 0)
                v35 = 2;
              else
                v35 = 128;
              if ((v11 & v35) != 0)
                goto LABEL_69;
            }
            else
            {
              if (((v10 >> 7) & 2) == 0)
                goto LABEL_16;
              LOWORD(v11) = *(_WORD *)a3;
              if ((*(_WORD *)a3 & 0x40) != 0)
                goto LABEL_69;
            }
          }
          else
          {
            if ((v10 & 4) != 0)
            {
              if ((v10 & 0x400) == 0)
                goto LABEL_16;
              LOWORD(v11) = *(_WORD *)a3;
              if ((v10 & 8) != 0)
                goto LABEL_17;
            }
            else
            {
              LOWORD(v11) = *(_WORD *)a3;
              if ((v10 & 0x400) == 0)
              {
                if ((v11 & 0x10) != 0)
                  goto LABEL_69;
                goto LABEL_17;
              }
            }
            if ((v11 & 0x20) != 0)
              goto LABEL_69;
          }
        }
LABEL_17:
        if ((v11 & 0x400) != 0 && (int)v5 >= 1)
        {
          v12 = 0;
          LOBYTE(v13) = 0;
          while (1)
          {
            if (sub_1B2211404((uint64_t)v4, v6, v12))
              goto LABEL_29;
            v14 = *((_QWORD *)v4 + 3);
            v15 = *(_DWORD *)(v14 + 8 * v6);
            if (v15 >= 1)
            {
              v16 = (int *)(*((_QWORD *)v4 + 6) + 4 * *(int *)(v14 + 4 * ((2 * v6) | 1)));
              v17 = &v39;
              v18 = *(unsigned int *)(v14 + 8 * v6);
              do
              {
                v19 = *v16++;
                *v17++ = sub_1B2211858((uint64_t)v4, v19, v12);
                --v18;
              }
              while (v18);
            }
            v20 = sub_1B22115DC(&v39, v15);
            if ((v20 & 1) != 0 && (*(_WORD *)a3 & 0x200) != 0)
            {
LABEL_28:
              LOBYTE(v13) = 1;
              goto LABEL_29;
            }
            if ((v20 & 2) != 0)
            {
              LOBYTE(v13) = 1;
              if ((v20 & 0x80) == 0 || (*(_WORD *)a3 & 1) != 0)
                goto LABEL_29;
            }
            else if ((v20 & 0x80) == 0)
            {
              goto LABEL_28;
            }
            if ((v20 & 0x4000) == 0)
              break;
            if (((v20 >> 7) & 0xF) < 8)
            {
              if (((v20 >> 7) & 4) != 0)
              {
                if ((v20 & 4) != 0)
                  v24 = 2;
                else
                  v24 = 128;
                LOBYTE(v13) = (unsigned __int16)(*(_WORD *)a3 & v24) != 0;
                goto LABEL_29;
              }
              if (((v20 >> 7) & 2) != 0)
              {
                v13 = (*(unsigned __int16 *)a3 >> 6) & 1;
                goto LABEL_29;
              }
              goto LABEL_44;
            }
            v13 = HIBYTE(*(unsigned __int16 *)a3) & 1;
LABEL_29:
            if ((v13 & 1) == 0 && ++v12 < (int)v5)
              continue;
            if ((v13 & 1) == 0)
              goto LABEL_70;
LABEL_69:
            sub_1B2221124(a2, v6);
            goto LABEL_70;
          }
          if ((v20 & 4) == 0)
          {
            v21 = *(unsigned __int16 *)a3;
            v22 = (v21 >> 4) & 1;
            v23 = (v21 >> 5) & 1;
            if ((v20 & 0x400) != 0)
              LOBYTE(v13) = v23;
            else
              LOBYTE(v13) = v22;
            goto LABEL_29;
          }
          if ((v20 & 0x400) != 0)
          {
            LOBYTE(v13) = (v20 & 8) == 0 && (*(_WORD *)a3 & 0x20) != 0;
            goto LABEL_29;
          }
LABEL_44:
          LOBYTE(v13) = 0;
          goto LABEL_29;
        }
LABEL_70:
        ++v6;
      }
      while (v6 < *v4);
    }
  }
}

void sub_1B22237D8(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_1B17F7D88(v4, v11);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[24 * v8];
    v14 = &v12[24 * v11];
    v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
      operator delete(v7);
  }
}

double sub_1B2223928(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t sub_1B222394C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char **v15;
  void **v16;
  _QWORD *v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  void **v32;
  _QWORD *v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  int *v59;
  char *v60;
  int v61;
  int *v62;
  char *v63;
  int v64;
  int v66;
  int *v67[2];

  if (a6 < 0)
  {
    v12 = *(_QWORD *)(a2 + 24);
    v10 = (int *)(*(_QWORD *)(a2 + 48) + 4 * *(int *)(v12 + 8 * a3 + 4));
    v11 = (int *)*(unsigned int *)(v12 + 8 * a3);
  }
  else
  {
    v10 = (int *)sub_1B2211A58(a2, a3, a6);
  }
  v66 = a3;
  v67[0] = v10;
  v67[1] = v11;
  v13 = 0;
  if ((sub_1B221160C(a2, v67) & 4) != 0)
  {
    v15 = (char **)(a1 + 5);
    v31 = (char *)a1[5];
    v32 = (void **)(a1 + 4);
    v33 = a1 + 6;
    do
    {
      v34 = v67[0][v13] + a5;
      if ((unint64_t)v31 >= *v33)
      {
        v36 = (char *)*v32;
        v37 = (v31 - (_BYTE *)*v32) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          goto LABEL_76;
        v39 = *v33 - (_QWORD)v36;
        if (v39 >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)sub_1B17F7E58((uint64_t)(a1 + 6), v40);
          v31 = *v15;
          v36 = (char *)*v32;
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = v34;
        v35 = v42 + 4;
        while (v31 != v36)
        {
          v43 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        *v32 = v42;
        *v15 = v35;
        *v33 = &v41[4 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)v31 = v34;
        v35 = v31 + 4;
      }
      *v15 = v35;
      ++v13;
      v31 = v35;
    }
    while (v13 != 4);
    v44 = a1[12];
    v45 = (char *)a1[11];
    if ((unint64_t)v45 >= v44)
    {
      v53 = (char *)a1[10];
      v54 = (v45 - v53) >> 2;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62)
        goto LABEL_76;
      v56 = v44 - (_QWORD)v53;
      if (v56 >> 1 > v55)
        v55 = v56 >> 1;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
        v57 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        v58 = (char *)sub_1B17F7E58((uint64_t)(a1 + 12), v57);
        v53 = (char *)a1[10];
        v45 = (char *)a1[11];
      }
      else
      {
        v58 = 0;
      }
      v62 = (int *)&v58[4 * v54];
      v63 = &v58[4 * v57];
      *v62 = v66;
      v46 = v62 + 1;
      while (v45 != v53)
      {
        v64 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--v62 = v64;
      }
      a1[10] = v62;
      a1[11] = v46;
      a1[12] = v63;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_DWORD *)v45 = v66;
      v46 = v45 + 4;
    }
    a1[11] = v46;
    return (uint64_t)(*v15 - 16);
  }
  v15 = (char **)(a1 + 2);
  v14 = (char *)a1[2];
  v16 = (void **)(a1 + 1);
  v17 = a1 + 3;
  do
  {
    v18 = v67[0][v13] + a5;
    if ((unint64_t)v14 >= *v17)
    {
      v20 = (char *)*v16;
      v21 = (v14 - (_BYTE *)*v16) >> 2;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
        goto LABEL_76;
      v23 = *v17 - (_QWORD)v20;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (char *)sub_1B17F7E58((uint64_t)(a1 + 3), v24);
        v14 = *v15;
        v20 = (char *)*v16;
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[4 * v21];
      *(_DWORD *)v26 = v18;
      v19 = v26 + 4;
      while (v14 != v20)
      {
        v27 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v26 - 1) = v27;
        v26 -= 4;
      }
      *v16 = v26;
      *v15 = v19;
      *v17 = &v25[4 * v24];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v14 = v18;
      v19 = v14 + 4;
    }
    *v15 = v19;
    ++v13;
    v14 = v19;
  }
  while (v13 != 4);
  v28 = a1[9];
  v29 = (char *)a1[8];
  if ((unint64_t)v29 >= v28)
  {
    v47 = (char *)a1[7];
    v48 = (v29 - v47) >> 2;
    v49 = v48 + 1;
    if (!((unint64_t)(v48 + 1) >> 62))
    {
      v50 = v28 - (_QWORD)v47;
      if (v50 >> 1 > v49)
        v49 = v50 >> 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
      {
        v52 = (char *)sub_1B17F7E58((uint64_t)(a1 + 9), v51);
        v47 = (char *)a1[7];
        v29 = (char *)a1[8];
      }
      else
      {
        v52 = 0;
      }
      v59 = (int *)&v52[4 * v48];
      v60 = &v52[4 * v51];
      *v59 = v66;
      v30 = v59 + 1;
      while (v29 != v47)
      {
        v61 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *--v59 = v61;
      }
      a1[7] = v59;
      a1[8] = v30;
      a1[9] = v60;
      if (v47)
        operator delete(v47);
      goto LABEL_67;
    }
LABEL_76:
    abort();
  }
  *(_DWORD *)v29 = v66;
  v30 = v29 + 4;
LABEL_67:
  a1[8] = v30;
  return (uint64_t)(*v15 - 16);
}

void sub_1B2223D18(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v43;

  v8 = a1;
  v10 = a1[7];
  v9 = a1[8];
  v11 = v9 - v10;
  v37 = a1[10];
  v39 = a1[11];
  v12 = (v39 - v37) >> 2;
  v13 = v12 + ((v9 - v10) >> 2);
  v14 = *(_QWORD **)(*(_QWORD *)(*a1 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(*a1 + 8) >> 2) & 0xF));
  sub_1B17F8190((uint64_t)a3, 4 * v13);
  if (v13)
  {
    v15 = *a3;
    if (v9 != v10)
    {
      v16 = 0;
      if ((unint64_t)(v11 >> 2) <= 1)
        v17 = 1;
      else
        v17 = v11 >> 2;
      do
      {
        sub_1B2223F5C(v14, *(_DWORD *)(v8[7] + 4 * v16), v15, a5);
        v15 += 16;
        ++v16;
      }
      while (v17 != v16);
    }
    if (v39 != v37)
    {
      v18 = 0;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        sub_1B2223F5C(v14, *(_DWORD *)(v8[10] + 4 * v18), v15, a5);
        v15 += 16;
        ++v18;
      }
      while (v12 != v18);
    }
  }
  v19 = (2 * a2) | 1;
  sub_1B17F8190((uint64_t)a4, *(int *)(*v8 + 20) * v19);
  v20 = 0;
  v21 = 0;
  v22 = ((unint64_t)*(unsigned __int8 *)(*v8 + 8) >> 2) & 0xF;
  v23 = (int)v19;
  v24 = (v22 + 1);
  v25 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
  v40 = v22;
  v41 = v8;
  v38 = v24;
  do
  {
    v26 = *(_QWORD *)(*(_QWORD *)(*v8 + 40) + 8 * v20);
    v27 = *(_DWORD *)(v26 + 8);
    if (v20 == v22 && v27 >= 1)
    {
      v43 = v20;
      v28 = 0;
      v29 = v21 * (int)v23;
      v30 = 4 * v29 + 4;
      do
      {
        v31 = *a4;
        v32 = (int *)(*a4 + 4 * v29);
        *v32 = 0;
        v33 = sub_1B221194C((_QWORD *)v26, v28, (uint64_t)(v32 + 1), 0xFFFFFFFF);
        if (v33 >= 1)
        {
          v34 = v33;
          v35 = (_DWORD *)(v31 + v30);
          do
          {
            *v35++ += v21;
            --v34;
          }
          while (v34);
        }
        if ((v33 & 1) != 0)
        {
          v32[v33 + 1] = v32[v33];
          v33 = ~v33;
        }
        if (v33 >= 0)
          v36 = v33;
        else
          v36 = v33 + 1;
        *v32 = v36 >> 1;
        v29 += v23;
        ++v28;
        v27 = *(_DWORD *)(v26 + 8);
        v30 += v25;
      }
      while (v28 < v27);
      v8 = v41;
      v20 = v43;
      v24 = v38;
      v22 = v40;
    }
    v21 += v27;
    ++v20;
  }
  while (v20 != v24);
}

uint64_t sub_1B2223F5C(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a4 < 0)
    result = a1[6] + 4 * *(int *)(a1[3] + 4 * ((2 * a2) | 1));
  else
    result = sub_1B2211A58((uint64_t)a1, a2, a4);
  v8 = 0;
  v9 = a1[36];
  v10 = a1[33];
  v11 = a1[42];
  do
  {
    v12 = *(int *)(result + 4 * v8);
    v13 = 2 * v12;
    v14 = *(unsigned int *)(v10 + 8 * (_DWORD)v12);
    if ((int)v14 < 1)
    {
LABEL_9:
      LODWORD(v15) = -1;
    }
    else
    {
      v15 = 0;
      v16 = v9 + 4 * *(int *)(v10 + 8 * v12 + 4);
      while (*(_DWORD *)(v16 + 4 * v15) != a2)
      {
        if (v14 == ++v15)
          goto LABEL_9;
      }
    }
    *(_DWORD *)(a3 + 4 * v8++) = v15 | ((((int)v15 + 1) % *(_DWORD *)(v11 + 4 * v13)) << 8);
  }
  while (v8 != 4);
  return result;
}

uint64_t sub_1B222402C(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;

  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 40);
  *(_DWORD *)(v5 + 8) = v4;
  sub_1B17F8190(v5 + 264, 2 * v4);
  sub_1B17F8190(v5 + 336, 2 * v4);
  sub_1B17F8160(v5 + 408, v4);
  sub_1B2213904(v5 + 432, v4);
  bzero(*(void **)(v5 + 432), 2 * *(int *)(v5 + 8));
  v6 = a2[1];
  v7 = **(int ***)(a1 + 40);
  *v7 = v6;
  sub_1B17F8190((uint64_t)(v7 + 6), 2 * v6);
  v8 = (char *)*((_QWORD *)v7 + 12);
  v9 = *((_QWORD *)v7 + 13) - (_QWORD)v8;
  if (v6 <= v9)
  {
    if (v6 < v9)
      *((_QWORD *)v7 + 13) = &v8[v6];
  }
  else
  {
    sub_1B2213A14((void **)v7 + 12, v6 - v9);
    v8 = (char *)*((_QWORD *)v7 + 12);
  }
  bzero(v8, *v7);
  if (a2[1] >= 1)
  {
    v10 = 0;
    v11 = *((_QWORD *)a2 + 1);
    v12 = **(_QWORD **)(a1 + 40);
    v13 = *(_DWORD **)(v12 + 24);
    do
    {
      v14 = *(_DWORD *)(v11 + 4 * v10);
      *v13 = v14;
      if (v10)
        v15 = *(v13 - 1) + *(v13 - 2);
      else
        v15 = 0;
      v13[1] = v15;
      if (*(_DWORD *)(v12 + 20) > v14)
        v14 = *(_DWORD *)(v12 + 20);
      *(_DWORD *)(v12 + 20) = v14;
      ++v10;
      v13 += 2;
    }
    while (v10 < a2[1]);
  }
  return 1;
}

uint64_t sub_1B2224170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;

  if (*(int *)(a2 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = **(_QWORD **)(a1 + 40);
    v5 = *(_QWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 48);
    v7 = *(unsigned __int8 *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 16);
    do
    {
      v9 = (unsigned int *)(v5 + 8 * v2);
      v10 = *v9;
      v11 = (_DWORD *)(v6 + 4 * (int)v9[1]);
      if (v7)
      {
        *v11 = *(_DWORD *)(v8 + 4 * v3++);
        if ((int)v10 >= 2)
        {
          v12 = v10 + 1;
          v13 = (int *)(v8 + 4 * v3);
          do
          {
            v14 = *v13++;
            v11[(v12-- - 2)] = v14;
            ++v3;
          }
          while (v12 > 2);
        }
      }
      else if ((int)v10 >= 1)
      {
        v15 = (int *)(v8 + 4 * v3);
        v3 += v10;
        do
        {
          v16 = *v15++;
          *v11++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v2;
    }
    while (v2 < *(int *)(a2 + 4));
  }
  return 1;
}

uint64_t sub_1B2224224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char __str[1024];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a2 + 24) >= 1)
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      if (*(_QWORD *)(a2 + 40))
      {
        v5 = 0;
        v6 = (int *)(v4 + 4);
        do
        {
          v7 = sub_1B221221C(**(_QWORD ***)(a1 + 40), *(v6 - 1), *v6);
          if (v7 == -1)
          {
            snprintf(__str, 0x400uLL, "Edge %d specified to be sharp does not exist (%d, %d)", v5, *(v6 - 1), *v6);
            sub_1B221BB14((uint64_t)"%s", v8, v9, v10, v11, v12, v13, v14, (char)__str);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 216) + 4 * v7) = *(_DWORD *)(*(_QWORD *)(a2 + 40)
                                                                                            + 4 * v5);
          }
          ++v5;
          v6 += 2;
        }
        while (v5 < *(int *)(a2 + 24));
      }
    }
  }
  if (*(int *)(a2 + 48) >= 1 && *(_QWORD *)(a2 + 56) && *(_QWORD *)(a2 + 64))
  {
    v15 = 0;
    do
    {
      v16 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v15);
      if ((v16 & 0x80000000) != 0 || (v17 = **(_QWORD **)(a1 + 40), (int)v16 >= *(_DWORD *)(v17 + 8)))
      {
        snprintf(__str, 0x400uLL, "Vertex %d specified to be sharp does not exist", *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v15));
        sub_1B221BB14((uint64_t)"%s", v18, v19, v20, v21, v22, v23, v24, (char)__str);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v17 + 408) + 4 * v16) = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v15);
      }
      ++v15;
    }
    while (v15 < *(int *)(a2 + 48));
  }
  if (*(int *)(a2 + 72) >= 1)
  {
    v25 = 0;
    do
    {
      v26 = *(int *)(*(_QWORD *)(a2 + 80) + 4 * v25);
      v27 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 96);
      *(_BYTE *)(v27 + v26) |= 1u;
      *(_BYTE *)(a1 + 8) |= 2u;
      ++v25;
    }
    while (v25 < *(int *)(a2 + 72));
  }
  return 1;
}

uint64_t sub_1B2224420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B221BB14((uint64_t)"%s", a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_1B2224448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;

  if (*(int *)(a2 + 92) >= 1)
  {
    v4 = 0;
    v5 = (_WORD *)(a1 + 4);
    do
    {
      v6 = *(_QWORD *)(a2 + 96) + 16 * v4;
      v7 = *(_QWORD *)(v6 + 8);
      sub_1B22137B0(**(_QWORD ***)(a1 + 40), *(_DWORD *)v6, v5);
      if (*(int *)(a2 + 4) >= 1)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = (_DWORD *)sub_1B2211A58(**(_QWORD **)(a1 + 40), v9, v4);
          if (*(_BYTE *)(a2 + 88))
          {
            *v10 = *(_DWORD *)(v7 + 4 * v8++);
            if (v11 >= 2)
            {
              v12 = v11 + 1;
              v13 = (int *)(v7 + 4 * v8);
              do
              {
                v14 = *v13++;
                v10[(v12-- - 2)] = v14;
                ++v8;
              }
              while (v12 > 2);
            }
          }
          else if (v11 >= 1)
          {
            v15 = v11;
            v16 = (int *)(v7 + 4 * v8);
            v8 += v11;
            do
            {
              v17 = *v16++;
              *v10++ = v17;
              --v15;
            }
            while (v15);
          }
          ++v9;
        }
        while (v9 < *(_DWORD *)(a2 + 4));
      }
      ++v4;
    }
    while (v4 < *(int *)(a2 + 92));
  }
  return 1;
}

uint64_t sub_1B222456C(uint64_t a1)
{

  return a1;
}

BOOL sub_1B2224594(uint64_t a1, void **a2)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;

  v3 = objc_msgSend_newBufferWithLength_options_(*a2, (const char *)a2, 4 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1, 0);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;

  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(_BYTE *)(a1 + 16) = 1;
    objc_msgSend_setLabel_(v7, v5, (uint64_t)CFSTR("OSD VertexBuffer"), v6);
  }
  return v7 != 0;
}

uint64_t sub_1B22245FC(int a1, int a2, void **a3)
{
  uint64_t v6;

  v6 = operator new();
  *(_DWORD *)v6 = a1;
  *(_DWORD *)(v6 + 4) = a2;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 1;
  if (!sub_1B2224594(v6, a3))
  {

    MEMORY[0x1B5E22E18](v6, 0x1080C40E0210B95);
    return 0;
  }
  return v6;
}

void *sub_1B2224688(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void *v7;

  v4 = a4;
  *(_BYTE *)(a1 + 16) = 1;
  v7 = (void *)(objc_msgSend_contents(*(void **)(a1 + 8), a2, a3, a4) + 4 * *(_DWORD *)a1 * (int)a3);
  return memcpy(v7, a2, 4 * *(_DWORD *)a1 * v4);
}

id sub_1B22246E0(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

uint64_t sub_1B22246E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v5 = 0;
  return sub_1B2224714(a1, a2, &v5, &v4, a3);
}

uint64_t sub_1B2224714(uint64_t a1, unint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;

  if (a2 < 0x18)
    return 3;
  for (i = 0; i != 4; ++i)
  {
    *a3 = i + 1;
    *((_BYTE *)&v22 + i) = *(_BYTE *)(a1 + i);
  }
  if (v22 != 179426549)
    return 3;
  for (j = 0; j != 4; ++j)
  {
    *a3 = j + 5;
    *((_BYTE *)&v22 + j) = *(_BYTE *)(a1 + 4 + j);
  }
  v8 = 0;
  *a4 = v22;
  *a3 = 9;
  *(_BYTE *)(a5 + 8) = *(_BYTE *)(a1 + 8);
  v9 = (*a3)++;
  *(_BYTE *)(a5 + 9) = *(_BYTE *)(a1 + v9);
  v10 = *a3;
  v11 = 1;
  do
  {
    v12 = v10;
    v13 = v11;
    *a3 = ++v10;
    *((_BYTE *)&v22 + v8) = *(_BYTE *)(a1 + v12);
    v8 = 1;
    v11 = 0;
  }
  while ((v13 & 1) != 0);
  v14 = 0;
  *(_WORD *)(a5 + 10) = v22;
  do
  {
    *a3 = v10 + v14 + 1;
    *((_BYTE *)&v22 + v14) = *(_BYTE *)(a1 + v14 + v10);
    ++v14;
  }
  while (v14 != 4);
  v15 = 0;
  *(_DWORD *)a5 = v22;
  v16 = v10 + 4;
  v17 = (char *)(v10 + 4 + a1);
  v18 = v16 + 2;
  do
  {
    *a3 = v18 - 1;
    v19 = *v17++;
    *((_BYTE *)&v22 + v15++) = v19;
    ++v18;
  }
  while (v15 != 4);
  result = 0;
  *(_DWORD *)(a5 + 4) = v22;
  *a3 = v18 - 1;
  v20 = *v17;
  *a3 = v18;
  v21 = v17[1];
  *a3 = v18 + 2;
  *(_DWORD *)(a5 + 12) = v20;
  *(_DWORD *)(a5 + 16) = v21;
  return result;
}

uint64_t sub_1B2224894(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  void *v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  uint64_t v30;
  unsigned int v31;
  int v32;
  char v33;
  char v34;

  v29[0] = a2;
  v29[1] = a3;
  v30 = 0;
  v28 = 0;
  v16 = sub_1B2224714(a2, a3, &v30, &v28, (uint64_t)&v31);
  if (!(_DWORD)v16)
  {
    if (v33 == 1 && v34 == 0)
    {
      v16 = 2;
      if (a6)
      {
        if (a7)
        {
          v18 = v32;
          if (v32)
          {
            if (v31 <= a3 && (v19 = v28, v19 == sub_1B2227AA8(v29[0] + 8, v31 - 8)))
            {
              v27 = 0;
              memset(v26, 0, sizeof(v26));
              __p = 0;
              v24 = 0;
              v25 = 0;
              v16 = sub_1B2225088(a4, a5, a7, a8, a9, (int **)v26);
              if (!(_DWORD)v16)
              {
                v20 = sub_1B2225218(v26, &__p);
                v16 = v20;
                if (!(_DWORD)v20)
                  v16 = sub_1B2224A00(v20, v26, &__p, v21, a6, v18, (uint64_t)v29, a10);
              }
              if (__p)
              {
                v24 = __p;
                operator delete(__p);
              }
              sub_1B17DA70C((uint64_t)v26);
            }
            else
            {
              return 3;
            }
          }
        }
      }
    }
    else
    {
      return 4;
    }
  }
  return v16;
}

uint64_t sub_1B2224A00(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int *v45;
  int *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *__p;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  __int16 v85;
  unsigned int v86;
  uint64_t v87;

  v13 = *(_QWORD *)(a7 + 16);
  v14 = *(_DWORD *)(a7 + 8) - v13;
  v15 = *(_QWORD *)a7 + v13;
  v86 = v14;
  v87 = v15;
  sub_1B2227A0C((uint64_t)&v86);
  v16 = a2[4] - a2[3];
  v17 = v16 >> 2;
  if ((int)(v16 >> 2) < 1)
    return 2;
  v59 = a2;
  v60 = a3;
  v85 = 0x8000;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  sub_1B2224EBC((uint64_t)&v82, a5);
  sub_1B2224EBC((uint64_t)&v79, a5);
  sub_1B2224EBC((uint64_t)&v76, a5);
  sub_1B2224EBC((uint64_t)&v73, 31 * a5);
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  __p = 0;
  v65 = 0;
  v66 = 0;
  sub_1B17F8190((uint64_t)&v70, a5);
  sub_1B17F8190((uint64_t)&v67, a5);
  sub_1B17F8190((uint64_t)&__p, a5);
  if (a6 < 1)
  {
    v55 = 0;
    goto LABEL_46;
  }
  v57 = a6;
  v58 = 0;
  v61 = (v16 >> 2);
  v62 = 4 * a5;
  do
  {
    v18 = 0;
    v63 = 1;
    do
    {
      v19 = *(int *)(*a3 + 4 * v18);
      if (a5 >= 1)
        bzero(v67, v62);
      v20 = *(int *)(a2[3] + 4 * v19);
      if ((int)v20 >= 1)
      {
        v21 = 0;
        v22 = *(int *)(*a2 + 4 * v19);
        v23 = v20 + v22;
        v24 = a2[6];
        v25 = v67;
        do
        {
          v26 = *(_DWORD *)(v24 + 4 * v22);
          if (v26 < 0)
            break;
          if (v26 >= (int)v17)
          {
            v55 = 2;
            goto LABEL_46;
          }
          if (a5 >= 1)
          {
            v27 = (int *)(a8 + 4 * v26 * a5);
            v28 = a5;
            v29 = v25;
            do
            {
              v30 = *v27++;
              *v29++ += v30;
              --v28;
            }
            while (v28);
          }
          ++v21;
          ++v22;
        }
        while (v22 < v23);
        if (v21 < 2)
          goto LABEL_19;
        if (a5 < 1)
        {
          v54 = sub_1B2224EEC(&v86, &v85) != (v63 & 1);
          goto LABEL_39;
        }
        v31 = v67;
        v32 = a5;
        do
        {
          *v31 = (int)(*v31 + (v21 >> 1)) / (int)v21;
          ++v31;
          --v32;
        }
        while (v32);
      }
LABEL_19:
      v33 = sub_1B2224EEC(&v86, &v85);
      v34 = v63 & 1;
      v35 = v33 == v34;
      v36 = v33 != v34;
      if (v35)
      {
        if (a5 < 1)
        {
          v63 = 0;
          goto LABEL_40;
        }
        v63 = v36;
        v37 = 0;
        do
        {
          if (sub_1B2224EEC(&v86, (_WORD *)v76 + v37))
          {
            v38 = sub_1B2224EEC(&v86, (_WORD *)v82 + v37);
            v39 = sub_1B2224EEC(&v86, (_WORD *)v73 + (31 * v37));
            v40 = v39 + 2 * sub_1B2224EEC(&v86, (_WORD *)v73 + 31 * (int)v37 + v39 + 1);
            v41 = v40 + 4 * sub_1B2224EEC(&v86, (_WORD *)v73 + 31 * (int)v37 + v40 + 3);
            v42 = v41 + 8 * sub_1B2224EEC(&v86, (_WORD *)v73 + 31 * (int)v37 + v41 + 7);
            v43 = v42 + 16 * sub_1B2224EEC(&v86, (_WORD *)v73 + 31 * (int)v37 + v42 + 15);
            if (v43 > 30)
              v44 = sub_1B2224FDC(&v86, 6, (_WORD *)v79 + v37) + 32;
            else
              v44 = v43 + 1;
            if (!v38)
              v44 = -v44;
          }
          else
          {
            v44 = 0;
          }
          *((_DWORD *)__p + v37++) = v44;
        }
        while (v37 != a5);
        a2 = v59;
        a3 = v60;
        goto LABEL_33;
      }
      if (a5 >= 1)
      {
        v63 = v36;
        bzero(__p, v62);
LABEL_33:
        v45 = (int *)v67;
        v46 = (int *)__p;
        v47 = v70;
        v48 = 4 * (int)v19 * a5;
        v49 = a5;
        do
        {
          v51 = *v45++;
          v50 = v51;
          v52 = *v46++;
          v53 = v52 + v50;
          *v47++ = v53;
          *(_DWORD *)(a8 + v48) = v53;
          v48 += 4;
          --v49;
        }
        while (v49);
        goto LABEL_40;
      }
      v54 = 1;
LABEL_39:
      v63 = v54;
LABEL_40:
      ++v18;
    }
    while (v18 != v61);
    v55 = 0;
    a8 += 4 * (int)v17 * a5;
    ++v58;
  }
  while (v58 != v57);
LABEL_46:
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  return v55;
}

void sub_1B2224EBC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1B2226E28((char **)a1, a2 - v2);
  }
}

BOOL sub_1B2224EEC(unsigned int *a1, _WORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 v15;
  unsigned int v16;

  v2 = a1[7];
  v3 = a1[8];
  if (v2 > 0x40000000)
  {
    v10 = a1[7];
  }
  else
  {
    v4 = a1[10];
    do
    {
      v3 *= 2;
      a1[10] = --v4;
      if (!v4)
      {
        v5 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v5 + 1;
        v6 = *a1;
        if (v5 + 1 >= v6)
          v7 = 65280;
        else
          v7 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v5 + 1) << 8;
        v8 = v5 + 2;
        *((_QWORD *)a1 + 2) = v8;
        if (v8 >= v6)
          v9 = 255;
        else
          v9 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v8);
        v3 |= v7 | v9;
        v4 = 16;
        a1[10] = 16;
      }
      v10 = 2 * v2;
      v11 = v2 >= 0x20000001;
      v2 *= 2;
    }
    while (!v11);
  }
  v12 = (unsigned __int16)*a2;
  v13 = (HIWORD(v10) * v12) & 0xFFFF0000;
  v14 = v10 - v13;
  v15 = v3 >= v13;
  *a2 = *((_WORD *)a1 + ((v12 >> 7) & 0x1FE | v15) + 24) + v12;
  if (v3 < v13)
    v16 = v13;
  else
    v16 = v14;
  if (v3 < v13)
    v13 = 0;
  a1[7] = v16;
  a1[8] = v3 - v13;
  return v15;
}

uint64_t sub_1B2224FDC(unsigned int *a1, int a2, _WORD *a3)
{
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  __int16 v12;

  v6 = 0;
  if (sub_1B2224EEC(a1, a3))
  {
    v7 = a2;
    do
    {
      a2 = v7 + 1;
      v6 |= 1 << v7;
      v8 = sub_1B2224EEC(a1, a3);
      v7 = a2;
    }
    while (v8);
  }
  v9 = 0;
  if (a2)
  {
    v10 = a2 - 1;
    do
    {
      v12 = 0x8000;
      v9 |= sub_1B2224EEC(a1, &v12) << v10--;
    }
    while (v10 != -1);
  }
  return (v9 + v6);
}

uint64_t sub_1B2225088(uint64_t a1, int *a2, int a3, int a4, int a5, int **a6)
{
  uint64_t result;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  result = 2;
  if (a1 && a2 && a3 >= 1)
  {
    sub_1B22254F8((uint64_t)a6, a3);
    if (a5 >= 1)
    {
      v11 = *a6;
      v12 = a5;
      v13 = a2;
      do
      {
        v14 = *v13++;
        v11[v14 + 1] += 2;
        --v12;
      }
      while (v12);
    }
    sub_1B2225590(a6);
    if (a4 < 1)
    {
      return 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v27 = a1;
      v17 = a4;
      while (1)
      {
        v18 = *(_DWORD *)(a1 + 4 * v15);
        v19 = (v18 - 1);
        if (v18 < 1)
          break;
        if (v18 == 1)
        {
          v20 = v16;
        }
        else
        {
          v20 = (v18 + v16);
          if ((int)v20 > a5)
            return 2;
          v21 = (int)v16;
          v22 = &a2[(int)v16 + 1];
          do
          {
            v23 = *(v22 - 1);
            v24 = *v22;
            if (v23 != *v22)
            {
              sub_1B22255D0((uint64_t *)a6, *(v22 - 1), *v22);
              sub_1B22255D0((uint64_t *)a6, v24, v23);
            }
            ++v22;
            --v19;
          }
          while (v19);
          v25 = a2[v21];
          v26 = a2[(int)v20 - 1];
          if (v25 != v26)
          {
            sub_1B22255D0((uint64_t *)a6, a2[v21], a2[(int)v20 - 1]);
            sub_1B22255D0((uint64_t *)a6, v26, v25);
          }
          a1 = v27;
        }
        ++v15;
        v16 = v20;
        if (v15 == v17)
          return 0;
      }
      return 2;
    }
  }
  return result;
}

uint64_t sub_1B2225218(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  void *__p;
  unint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  void *v39;
  int v40;

  v2 = a1[4] - a1[3];
  v3 = v2 >> 2;
  if ((int)(v2 >> 2) < 1)
    return 2;
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  v6 = (v2 >> 2);
  sub_1B17F8190((uint64_t)a2, v6);
  __p = 0;
  v35 = 0;
  v36 = 0;
  sub_1B2225630((uint64_t)&__p, v6, 0);
  if (v35)
  {
    v39 = __p;
    v40 = 0;
    sub_1B22258BC(&v39, v35);
  }
  v7 = 0;
  v8 = 0;
  LODWORD(v39) = 0;
  while (1)
  {
    v9 = (unint64_t)v8 >> 6;
    v10 = *((_QWORD *)__p + v9);
    if ((v10 & (1 << v8)) != 0)
    {
      *((_QWORD *)__p + v9) = v10 & ~(1 << v8);
      *(_DWORD *)(*a2 + 4 * v7) = v8;
      sub_1B2225A18(v37, &v39);
      v11 = *((_QWORD *)&v38 + 1);
      ++v7;
      if (*((_QWORD *)&v38 + 1))
        break;
    }
LABEL_20:
    v8 = (_DWORD)v39 + 1;
    LODWORD(v39) = v8;
    if (v8 >= (int)v3)
    {
      v19 = 0;
      do
      {
        v20 = *(int *)(*a2 + 4 * v19);
        v21 = (char *)__p;
        *(_QWORD *)((char *)__p + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        v22 = *(int *)(*a1 + 4 * v20);
        v23 = *(int *)(a1[3] + 4 * v20);
        v24 = v23 + v22;
        v25 = a1[6];
        if ((int)v23 >= 1)
        {
          v26 = v22;
          do
          {
            if (((*(_QWORD *)&v21[((unint64_t)*(int *)(v25 + 4 * v26) >> 3) & 0x1FFFFFFFFFFFFFF8] >> *(_DWORD *)(v25 + 4 * v26)) & 1) == 0)
              *(_DWORD *)(v25 + 4 * v26) = -1;
            ++v26;
          }
          while (v26 < v24);
        }
        v27 = (int *)(v25 + 4 * v22);
        v28 = (int *)(v25 + 4 * v24);
        v29 = 126 - 2 * __clz(v28 - v27);
        if ((_DWORD)v23)
          v30 = v29;
        else
          v30 = 0;
        sub_1B22261BC(v27, v28, (uint64_t)&v39, v30, 1);
        ++v19;
      }
      while (v19 != v6);
      v31 = 2 * (v7 != (_DWORD)v3);
      goto LABEL_33;
    }
  }
  while (1)
  {
    v12 = *(int *)(*(_QWORD *)(*((_QWORD *)&v37[0] + 1) + (((unint64_t)v38 >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * (v38 & 0x3FF));
    *(_QWORD *)&v38 = v38 + 1;
    *((_QWORD *)&v38 + 1) = v11 - 1;
    if ((unint64_t)v38 >= 0x800)
    {
      operator delete(**((void ***)&v37[0] + 1));
      *((_QWORD *)&v37[0] + 1) += 8;
      *(_QWORD *)&v38 = v38 - 1024;
    }
    v13 = *(int *)(a1[3] + 4 * v12);
    if ((int)v13 >= 1)
      break;
LABEL_19:
    v11 = *((_QWORD *)&v38 + 1);
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_20;
  }
  v14 = *(int *)(*a1 + 4 * v12);
  v15 = v13 + v14;
  while (1)
  {
    v33 = 0;
    v16 = *(unsigned int *)(a1[6] + 4 * v14);
    v33 = v16;
    if ((v16 & 0x80000000) != 0)
      break;
    if ((int)v16 >= (int)v3 || (_DWORD)v16 == (_DWORD)v12)
      break;
    v18 = *((_QWORD *)__p + (v16 >> 6));
    if ((v18 & (1 << v16)) != 0)
    {
      *((_QWORD *)__p + (v16 >> 6)) = v18 & ~(1 << v16);
      *(_DWORD *)(*a2 + 4 * v7) = v16;
      sub_1B2225A18(v37, &v33);
      ++v7;
    }
    if (++v14 >= v15)
      goto LABEL_19;
  }
  v31 = 2;
LABEL_33:
  if (__p)
    operator delete(__p);
  sub_1B2226D48(v37);
  return v31;
}

void sub_1B22254F8(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  sub_1B17F8190(a1, a2 + 1);
  sub_1B17F8190(a1 + 24, a2);
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 >= 1)
    bzero(*(void **)a1, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32) - (_QWORD)v5;
  if (v6 >= 1)
    bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
}

void sub_1B2225590(int **a1)
{
  int *v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *a1;
  v1 = a1[1];
  v3 = (char *)v1 - (char *)*a1;
  if ((int)(v3 >> 2) >= 2)
  {
    v4 = (v3 >> 2);
    v7 = *v2;
    v5 = v2 + 1;
    v6 = v7;
    v8 = v4 - 1;
    do
    {
      v6 += *v5;
      *v5++ = v6;
      --v8;
    }
    while (v8);
  }
  sub_1B17F8190((uint64_t)(a1 + 6), *(v1 - 1));
}

uint64_t *sub_1B22255D0(uint64_t *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result[3];
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = *result;
  if (v4 <= 0)
  {
    LODWORD(v5) = *(_DWORD *)(v5 + 4 * a2);
    v6 = result[6];
LABEL_7:
    *(_DWORD *)(v3 + 4 * a2) = v4 + 1;
    *(_DWORD *)(v6 + 4 * ((int)v5 + v4)) = a3;
  }
  else
  {
    v5 = *(int *)(v5 + 4 * a2);
    v6 = result[6];
    v7 = 4 * v5;
    v8 = *(unsigned int *)(v3 + 4 * a2);
    while (*(_DWORD *)(v6 + v7) != a3)
    {
      v7 += 4;
      if (!--v8)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_1B2225630(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        abort();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      sub_1B1928BFC(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      sub_1B222578C(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1B22258BC(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        sub_1B222596C((uint64_t)&v21, v6);
      }
    }
  }
}

unint64_t *sub_1B222578C@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *sub_1B22258BC(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1B222596C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void sub_1B2225A18(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1B2225A9C(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1B2225A9C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)sub_1B17F812C(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1B2225D60(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1B2225E74((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)sub_1B17F812C((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1B17F812C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1B2225F90(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      sub_1B22260A4((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void sub_1B2225D60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_1B17F812C(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_1B2225E74(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_1B17F812C(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1B2225F90(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_1B17F812C(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1B22260A4(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_1B17F812C(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

int *sub_1B22261BC(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int *v61;
  BOOL v63;
  uint64_t v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *(a2 - 1);
        else
          v24 = v9[1];
        if (v22 >= v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        v9[1] = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 >= *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *v9;
        v27 = v9[1];
        if (v26 <= v27)
          v28 = v9[1];
        if (v26 < v27)
          v27 = v26;
        *v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = v9[2];
        else
          v31 = *v9;
        if (*v9 < v29)
          v29 = *v9;
        v9[2] = v29;
        *v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 < v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (v34 >= v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 >= v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 >= v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = v9[1];
        else
          v43 = *v9;
        if (v41 >= v42)
          v41 = v9[1];
        *v9 = v43;
        v9[1] = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *(a2 - 1);
        else
          v46 = v9[3];
        if (v44 >= v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        v9[3] = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 >= v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = v9[2];
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
          v51 = v9[3];
        if (v49 < v50)
          v50 = v49;
        v9[2] = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 < v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 >= v55)
          v56 = *v9;
        if (v58 <= v57)
          v55 = v9[2];
        if (v58 < v57)
          v57 = v58;
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 >= v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *v9 = v55;
        v9[1] = v54;
        if (v59 >= v57)
          v60 = v57;
        else
          v60 = v59;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return sub_1B2226AA8(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            sub_1B222662C(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1B222662C(v9, &v9[v13 >> 1], a2 - 1);
            sub_1B222662C(v9 + 1, v15 - 1, a2 - 2);
            sub_1B222662C(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_1B222662C(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = sub_1B22266B4(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1B2226764(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1B2226818(v9, v17);
          v9 = v17 + 1;
          result = (int *)sub_1B2226818(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (int *)sub_1B22261BC(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(int *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(int *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (int *)((char *)v9 + v68 + 4);
                    goto LABEL_123;
                  }
                }
                v69 = v9;
LABEL_123:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              do
              {
                *v61 = v71;
                v71 = *(v61 - 2);
                --v61;
              }
              while (v70 > v71);
              *v61 = v70;
            }
            v61 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_1B222662C(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *sub_1B22266B4(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *sub_1B2226764(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL sub_1B2226818(_DWORD *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (v52 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (v27 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= v41)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 4;
    if (++v12 == a2)
      return 1;
  }
}

int *sub_1B2226AA8(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1B2226C84((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          sub_1B2226C84((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 >= v23)
              v22 = v20[1];
            if (*v20 <= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 > v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B2226C84(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 >= v11)
          v10 = v8[1];
        if (*v8 > v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 >= v14)
              v10 = v8[1];
            if (*v8 <= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t sub_1B2226D48(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1B2226DDC((uint64_t)a1);
}

uint64_t sub_1B2226DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_1B2226E28(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      memset_pattern16(*(void **)(v4 - 8), &unk_1B22CADF0, 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B1827A64(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    memset_pattern16(v15, &unk_1B22CADF0, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1B2226F30(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t *a12, _DWORD *a13)
{
  uint64_t v13;
  int v14;
  void *__p;
  void *v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v13 = 2;
  if (a5 && a6 && a9)
  {
    v14 = a5;
    if (4 * a5 * a6 * a9 + 1024 >= a11 && HIDWORD(a11) == 0)
    {
      v23 = 0;
      memset(v22, 0, sizeof(v22));
      __p = 0;
      v20 = 0;
      v21 = 0;
      v13 = sub_1B2225088(a2, a3, a6, a7, a8, (int **)v22);
      if (!(_DWORD)v13)
      {
        v13 = sub_1B2225218(v22, &__p);
        if (!(_DWORD)v13)
          v13 = sub_1B222704C(a1, a4, v22, &__p, v14, a9, a10, a11, a12, a13);
      }
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
      sub_1B17DA70C((uint64_t)v22);
    }
    else
    {
      return 1;
    }
  }
  return v13;
}

uint64_t sub_1B222704C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, int a6, uint64_t a7, unint64_t a8, uint64_t *a9, _DWORD *a10)
{
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  uint64_t v16;

  v15[0] = a7;
  v15[1] = a8;
  *(_DWORD *)a7 = 179426549;
  *(_DWORD *)(a7 + 8) = 1;
  *(_DWORD *)(a7 + 16) = a6;
  *(_BYTE *)(a7 + 20) = *a10;
  *(_BYTE *)(a7 + 21) = a10[1];
  *(_WORD *)(a7 + 22) = 0;
  v16 = 24;
  result = sub_1B22270F8(a1, a2, a3, a4, a5, a6, (uint64_t)v15);
  if (!(_DWORD)result)
  {
    v12 = v16;
    *a9 = v16;
    if (v12 <= a8)
    {
      v13 = v15[0];
      *(_DWORD *)(v15[0] + 12) = v12;
      v14 = sub_1B2227AA8(v13 + 8, *a9 - 8);
      result = 0;
      *(_DWORD *)(v13 + 4) = v14;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1B22270F8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char *v50;
  _WORD *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  void *__p;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  uint64_t v86;

  v7 = a7;
  v12 = *(_QWORD *)(a7 + 16);
  v13 = *(_DWORD *)(a7 + 8) - v12;
  v14 = *(_QWORD *)a7 + v12;
  v85 = v13;
  v86 = v14;
  sub_1B22279BC((uint64_t)&v85);
  v15 = a3[4] - a3[3];
  if ((int)(v15 >> 2) < 1)
    return 2;
  v84 = 0x8000;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  sub_1B2224EBC((uint64_t)&v81, a5);
  sub_1B2224EBC((uint64_t)&v78, a5);
  sub_1B2224EBC((uint64_t)&v75, a5);
  sub_1B2224EBC((uint64_t)&v72, 31 * a5);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_1B17F8190((uint64_t)&v69, a5);
  sub_1B17F8190((uint64_t)&v66, a5);
  sub_1B17F8190((uint64_t)&__p, a5);
  if (a6 < 1)
  {
LABEL_40:
    v54 = 0;
    *(_QWORD *)(v7 + 16) += sub_1B2227844((uint64_t)&v85);
    goto LABEL_42;
  }
  v59 = (v15 >> 2);
  v60 = a3;
  v16 = a5;
  v56 = 4 * (int)((v15 >> 2) * a5);
  v58 = 0;
  v57 = v7;
  v61 = v15 >> 2;
LABEL_4:
  v17 = 0;
  v18 = 1;
  while (1)
  {
    v19 = v18;
    v20 = *(int *)(*a4 + 4 * v17);
    if (a5 >= 1)
    {
      v21 = v69;
      v22 = v66;
      v23 = (int *)(a2 + 4 * (int)v20 * a5);
      v24 = v16;
      do
      {
        v25 = *v23++;
        *v21++ = v25;
        *v22++ = 0;
        --v24;
      }
      while (v24);
    }
    v26 = *(int *)(a3[3] + 4 * v20);
    if ((int)v26 >= 1)
      break;
LABEL_20:
    if (a5 < 1)
    {
LABEL_24:
      v18 = 1;
    }
    else
    {
      v38 = (int *)v69;
      v39 = (int *)v66;
      v18 = 1;
      v40 = v16;
      v41 = __p;
      do
      {
        v43 = *v38++;
        v42 = v43;
        v44 = *v39++;
        v45 = v42 - v44;
        *v41++ = v45;
        v18 &= v45 == 0;
        --v40;
      }
      while (v40);
    }
    sub_1B2227638((uint64_t)&v85, (v19 ^ v18) & 1, &v84);
    if ((v18 & 1) == 0 && a5 >= 1)
    {
      v46 = 0;
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = *(_DWORD *)((char *)__p + v47);
        v50 = (char *)v75 + v46;
        if (v49)
        {
          sub_1B2227638((uint64_t)&v85, 1, v50);
          v51 = (char *)v81 + v46;
          if ((v49 & 0x80000000) != 0)
          {
            sub_1B2227638((uint64_t)&v85, 0, v51);
            v49 = -v49;
          }
          else
          {
            sub_1B2227638((uint64_t)&v85, 1, v51);
          }
          if (v49 > 0x1F)
          {
            sub_1B2227638((uint64_t)&v85, 1, (_WORD *)v72 + v48);
            sub_1B2227638((uint64_t)&v85, 1, (_WORD *)v72 + (v48 + 2));
            sub_1B2227638((uint64_t)&v85, 1, (_WORD *)v72 + (v48 + 6));
            sub_1B2227638((uint64_t)&v85, 1, (_WORD *)v72 + (v48 + 14));
            sub_1B2227638((uint64_t)&v85, 1, (_WORD *)v72 + (v48 + 30));
            sub_1B2227790((uint64_t)&v85, v49 - 32, 6, (char *)v78 + v46);
            goto LABEL_37;
          }
          v53 = v49 - 1;
          sub_1B2227638((uint64_t)&v85, (v49 - 1) & 1, (_WORD *)v72 + v48);
          sub_1B2227638((uint64_t)&v85, ((v49 - 1) >> 1) & 1, (_WORD *)v72 + v48 + (((_BYTE)v49 + 1) & 1) + 1);
          sub_1B2227638((uint64_t)&v85, (v53 >> 2) & 1, (_WORD *)v72 + v48 + (v53 & 3) + 3);
          sub_1B2227638((uint64_t)&v85, (v53 >> 3) & 1, (_WORD *)v72 + v48 + (v53 & 7) + 7);
          v52 = (v49 - 1) >> 4;
          v50 = (char *)v72 + 2 * v48 + 2 * ((v49 - 1) & 0xF) + 30;
        }
        else
        {
          v52 = 0;
        }
        sub_1B2227638((uint64_t)&v85, v52, v50);
LABEL_37:
        v48 += 31;
        v46 += 2;
        v47 += 4;
      }
      while (31 * a5 != v48);
    }
    ++v17;
    a3 = v60;
    v16 = a5;
    if (v17 == v59)
    {
      v7 = v57;
      a2 += v56;
      if (++v58 == a6)
        goto LABEL_40;
      goto LABEL_4;
    }
  }
  v27 = 0;
  v28 = *(int *)(*a3 + 4 * v20);
  v29 = v26 + v28;
  v30 = a3[6];
  v31 = v66;
  while (1)
  {
    v32 = *(_DWORD *)(v30 + 4 * v28);
    if (v32 < 0)
    {
LABEL_16:
      if (v27 < 2)
        goto LABEL_20;
      if (a5 >= 1)
      {
        v36 = v66;
        v37 = v16;
        do
        {
          *v36 = (int)(*v36 + (v27 >> 1)) / (int)v27;
          ++v36;
          --v37;
        }
        while (v37);
        goto LABEL_20;
      }
      goto LABEL_24;
    }
    if (v32 >= (int)v61)
      break;
    if (a5 >= 1)
    {
      v33 = 4 * v32 * a5;
      v34 = v16;
      v35 = v31;
      do
      {
        *v35++ += *(_DWORD *)(a2 + v33);
        v33 += 4;
        --v34;
      }
      while (v34);
    }
    ++v27;
    if (++v28 >= v29)
      goto LABEL_16;
  }
  v54 = 2;
LABEL_42:
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  return v54;
}

uint64_t sub_1B2227638(uint64_t result, int a2, _WORD *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  __int16 v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = (unsigned __int16)*a3;
  v4 = *(_DWORD *)(result + 28);
  v5 = (v4 * v3) >> 16;
  if (a2)
  {
    *(_DWORD *)(result + 24) += v5;
    v5 = v4 - v5;
    v6 = v3 - *(_WORD *)(result + 2 * (v3 >> 8) + 48);
  }
  else
  {
    v6 = *(_WORD *)(result + 2 * ((unsigned __int16)~(_WORD)v3 >> 8) + 48) + v3;
  }
  *(_DWORD *)(result + 28) = v5;
  *a3 = v6;
  if (v5 <= 0x4000)
  {
    v7 = *(_DWORD *)(result + 24);
    v8 = *(_DWORD *)(result + 40);
    while (1)
    {
      v7 *= 2;
      v5 *= 2;
      *(_DWORD *)(result + 24) = v7;
      *(_DWORD *)(result + 28) = v5;
      *(_DWORD *)(result + 40) = ++v8;
      if (v8 == 8)
        break;
LABEL_17:
      if (v5 > 0x4000)
        return result;
    }
    if (HIBYTE(v7))
    {
      v10 = *(_QWORD *)(result + 16) + *(_QWORD *)(result + 8);
      ++*(_BYTE *)(v10 - 1);
      v11 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(result + 44))
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = 0;
          v12 = *(_DWORD *)(result + 44);
          v11 = *(_QWORD *)(result + 16) + 1;
          *(_QWORD *)(result + 16) = v11;
          *(_DWORD *)(result + 44) = --v12;
        }
        while (v12);
      }
    }
    else
    {
      v9 = *(_DWORD *)(result + 44);
      if ((v7 + v5) >> 24)
      {
        *(_DWORD *)(result + 44) = v9 + 1;
LABEL_16:
        v8 = 0;
        v7 = (unsigned __int16)v7;
        *(_DWORD *)(result + 24) = (unsigned __int16)v7;
        *(_DWORD *)(result + 40) = 0;
        goto LABEL_17;
      }
      v11 = *(_QWORD *)(result + 16);
      if (v9)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = -1;
          v13 = *(_DWORD *)(result + 44);
          v11 = *(_QWORD *)(result + 16) + 1;
          *(_QWORD *)(result + 16) = v11;
          *(_DWORD *)(result + 44) = --v13;
        }
        while (v13);
      }
    }
    *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = *(_WORD *)(result + 26);
    ++*(_QWORD *)(result + 16);
    LOWORD(v7) = *(_WORD *)(result + 24);
    v5 = *(_DWORD *)(result + 28);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1B2227790(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  int v5;
  unsigned int v6;
  int i;
  uint64_t result;
  int v10;
  __int16 v11;

  v5 = a3;
  v6 = a2;
  for (i = 1 << a3; v6 >= 1 << v5; i = 1 << v5)
  {
    sub_1B2227638(a1, 1, a4);
    ++v5;
    v6 -= i;
  }
  result = sub_1B2227638(a1, 0, a4);
  if (v5)
  {
    v10 = v5 - 1;
    do
    {
      v11 = 0x8000;
      result = sub_1B2227638(a1, (v6 >> v10--) & 1, &v11);
    }
    while (v10 != -1);
  }
  return result;
}

uint64_t sub_1B2227844(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = 0;
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 24);
  do
  {
    if ((v3 | ((2 << v1) - 1)) > *(_DWORD *)(a1 + 28) - 1)
      break;
    ++v1;
  }
  while (v1 != 16);
  v4 = v3 | ~(-1 << v1);
  *(_DWORD *)(a1 + 24) = v4;
  if (v2 <= 7)
  {
    v5 = v2 - 8;
    do
      v4 = (2 * v4) | 1;
    while (!__CFADD__(v5++, 1));
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 40) = 8;
  }
  if (HIBYTE(v4))
  {
    v7 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8);
    ++*(_BYTE *)(v7 - 1);
    if (*(_DWORD *)(a1 + 44))
    {
      v8 = *(_QWORD *)(a1 + 16);
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + v8) = 0;
        v9 = *(_DWORD *)(a1 + 44);
        v8 = *(_QWORD *)(a1 + 16) + 1;
        *(_QWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a1 + 44) = --v9;
      }
      while (v9);
    }
  }
  else if (*(_DWORD *)(a1 + 44))
  {
    v10 = *(_QWORD *)(a1 + 16);
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v10) = -1;
      v11 = *(_DWORD *)(a1 + 44);
      v10 = *(_QWORD *)(a1 + 16) + 1;
      *(_QWORD *)(a1 + 16) = v10;
      *(_DWORD *)(a1 + 44) = --v11;
    }
    while (v11);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16)) = *(_WORD *)(a1 + 26);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(v12 + v13) = BYTE1(*(_DWORD *)(a1 + 24));
  v14 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 16) = v14;
  if (v2 >= 1)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + v14) = *(_DWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 16) = v14;
  }
  if (v14 >= 2)
  {
    v15 = *(_QWORD *)(a1 + 8) - 1;
    while (*(unsigned __int8 *)(v15 + v14) == 255)
    {
      *(_QWORD *)(a1 + 16) = --v14;
      if (v14 <= 1)
        return 1;
    }
  }
  return v14;
}

uint64_t sub_1B22279BC(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  *(_QWORD *)&v2 = 0xFFFF00000000;
  *((_QWORD *)&v2 + 1) = 0xFFFF00000000;
  *(_OWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = 0;
  v3 = 0x217u;
  do
  {
    *(_WORD *)(result + v1 * 2 + 48) = word_1B22CAE08[v1];
    *(_WORD *)(result + v3 * 2) = word_1B22CAE08[v3 - 280];
    --v3;
    ++v1;
  }
  while (v1 != 256);
  return result;
}

void *sub_1B2227A0C(uint64_t a1)
{
  __int128 v1;
  unsigned int v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)&v1 = 0xFFFF000000000000;
  *((_QWORD *)&v1 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = 16;
  v2 = *(_DWORD *)a1;
  if (*(int *)a1 < 1)
  {
    v4 = -16777216;
    goto LABEL_7;
  }
  v3 = *(unsigned __int8 **)(a1 + 8);
  v4 = *v3 << 24;
  *(_DWORD *)(a1 + 32) = v4;
  if (v2 == 1)
  {
LABEL_7:
    v5 = v4 | 0xFF0000;
    goto LABEL_8;
  }
  v5 = v4 | (v3[1] << 16);
  *(_DWORD *)(a1 + 32) = v5;
  if (v2 <= 2)
  {
LABEL_8:
    v6 = v5 | 0xFF00;
    goto LABEL_9;
  }
  v6 = v5 | (v3[2] << 8);
  *(_DWORD *)(a1 + 32) = v6;
  if (v2 == 3)
  {
LABEL_9:
    v7 = 255;
    goto LABEL_10;
  }
  v7 = v3[3];
LABEL_10:
  *(_DWORD *)(a1 + 32) = v7 | v6;
  *(_QWORD *)(a1 + 16) = 3;
  return memcpy((void *)(a1 + 48), &unk_1B22CB008, 0x400uLL);
}

uint64_t sub_1B2227AA8(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = (unsigned __int8 *)result;
  LODWORD(result) = -1;
  do
  {
    v3 = *v2++;
    result = (dword_1B22CB408[v3 ^ BYTE3(result)] ^ ((_DWORD)result << 8));
    --a2;
  }
  while (a2);
  return result;
}

void sub_1B2227AE0(uint64_t a1, uint64_t a2, id *a3)
{
  void *v6;
  void *v7;

  do
  {
    v7 = *(void **)(a1 - 8);
    a1 -= 8;
    v6 = v7;
    if (v7)

  }
  while (a1 != a2);
  if (*a3)
    sub_1B184D53C(*a3);
  else
    sub_1B184D548();
}

void sub_1B2227B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;

  do
  {
    v7 = *(void **)(a1 - 8);
    a1 -= 8;
    v6 = v7;
    if (v7)

  }
  while (a1 != a2);
  v8 = *(void **)(a3 + 560);
  if (v8)
    sub_1B184D53C(v8);
  else
    sub_1B184D548();
}

void sub_1B2227B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18774DC(a1, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
  __break(1u);
}

void sub_1B2227B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;

  do
  {
    v7 = *(void **)(a1 - 8);
    a1 -= 8;
    v6 = v7;
    if (v7)

  }
  while (a1 != a2);
  v8 = *(void **)(a3 + 480);
  if (v8)
    sub_1B184D53C(v8);
  else
    sub_1B184D548();
}

void sub_1B2227BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;

  do
  {
    v7 = *(void **)(a1 - 8);
    a1 -= 8;
    v6 = v7;
    if (v7)

  }
  while (a1 != a2);
  v8 = *(void **)(a3 + 688);
  if (v8)
    sub_1B184D53C(v8);
  else
    sub_1B184D548();
}

void sub_1B2227C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error"), a3, a4, a5, a6, a7, a8, vars0);
  __break(1u);
}

uint64_t sub_1B2227C84()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1B2227C90()
{
  return MEMORY[0x1E0CAE080]();
}

uint64_t sub_1B2227C9C()
{
  return MEMORY[0x1E0CAE088]();
}

uint64_t sub_1B2227CA8()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1B2227CB4()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1B2227CC0()
{
  return MEMORY[0x1E0CAE0C8]();
}

uint64_t sub_1B2227CCC()
{
  return MEMORY[0x1E0CAE0D0]();
}

uint64_t sub_1B2227CD8()
{
  return MEMORY[0x1E0CAE0E0]();
}

uint64_t sub_1B2227CE4()
{
  return MEMORY[0x1E0CAE108]();
}

uint64_t sub_1B2227CF0()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_1B2227CFC()
{
  return MEMORY[0x1E0CAE1B8]();
}

uint64_t sub_1B2227D08()
{
  return MEMORY[0x1E0CAE1C0]();
}

uint64_t sub_1B2227D14()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_1B2227D20()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_1B2227D2C()
{
  return MEMORY[0x1E0CAE380]();
}

uint64_t sub_1B2227D38()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t sub_1B2227D44()
{
  return MEMORY[0x1E0CAE3B8]();
}

uint64_t sub_1B2227D50()
{
  return MEMORY[0x1E0CAE418]();
}

uint64_t sub_1B2227D5C()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1B2227D68()
{
  return MEMORY[0x1E0CAE440]();
}

uint64_t sub_1B2227D74()
{
  return MEMORY[0x1E0CAE458]();
}

uint64_t sub_1B2227D80()
{
  return MEMORY[0x1E0CAE488]();
}

uint64_t sub_1B2227D8C()
{
  return MEMORY[0x1E0CAE4A0]();
}

uint64_t sub_1B2227D98()
{
  return MEMORY[0x1E0CAE4A8]();
}

uint64_t sub_1B2227DA4()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1B2227DB0()
{
  return MEMORY[0x1E0CAE528]();
}

uint64_t sub_1B2227DBC()
{
  return MEMORY[0x1E0CAE618]();
}

uint64_t sub_1B2227DC8()
{
  return MEMORY[0x1E0CAE648]();
}

uint64_t sub_1B2227DD4()
{
  return MEMORY[0x1E0CAE670]();
}

uint64_t sub_1B2227DE0()
{
  return MEMORY[0x1E0CAE678]();
}

uint64_t sub_1B2227DEC()
{
  return MEMORY[0x1E0CAE690]();
}

uint64_t sub_1B2227DF8()
{
  return MEMORY[0x1E0CAE7D0]();
}

uint64_t sub_1B2227E04()
{
  return MEMORY[0x1E0CAE808]();
}

uint64_t sub_1B2227E10()
{
  return MEMORY[0x1E0CAE838]();
}

uint64_t sub_1B2227E1C()
{
  return MEMORY[0x1E0CAE878]();
}

uint64_t sub_1B2227E28()
{
  return MEMORY[0x1E0CAE890]();
}

uint64_t sub_1B2227E34()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1B2227E40()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1B2227E4C()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1B2227E58()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1B2227E64()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1B2227E70()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1B2227E7C()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1B2227E88()
{
  return MEMORY[0x1E0CAEB20]();
}

uint64_t sub_1B2227E94()
{
  return MEMORY[0x1E0CAEB38]();
}

uint64_t sub_1B2227EA0()
{
  return MEMORY[0x1E0CAEB40]();
}

uint64_t sub_1B2227EAC()
{
  return MEMORY[0x1E0CAEB50]();
}

uint64_t sub_1B2227EB8()
{
  return MEMORY[0x1E0CAF398]();
}

uint64_t sub_1B2227EC4()
{
  return MEMORY[0x1E0CAF3D8]();
}

uint64_t sub_1B2227ED0()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_1B2227EDC()
{
  return MEMORY[0x1E0CAF5D8]();
}

uint64_t sub_1B2227EE8()
{
  return MEMORY[0x1E0CAF5E0]();
}

uint64_t sub_1B2227EF4()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_1B2227F00()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_1B2227F0C()
{
  return MEMORY[0x1E0CAF628]();
}

uint64_t sub_1B2227F18()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_1B2227F24()
{
  return MEMORY[0x1E0CAF648]();
}

uint64_t sub_1B2227F30()
{
  return MEMORY[0x1E0CAF650]();
}

uint64_t sub_1B2227F3C()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_1B2227F48()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_1B2227F54()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_1B2227F60()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_1B2227F6C()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_1B2227F78()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_1B2227F84()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t sub_1B2227F90()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_1B2227F9C()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1B2227FA8()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1B2227FB4()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1B2227FC0()
{
  return MEMORY[0x1E0CAFB50]();
}

uint64_t sub_1B2227FCC()
{
  return MEMORY[0x1E0CAFB58]();
}

uint64_t sub_1B2227FD8()
{
  return MEMORY[0x1E0CAFD30]();
}

uint64_t sub_1B2227FE4()
{
  return MEMORY[0x1E0CAFD38]();
}

uint64_t sub_1B2227FF0()
{
  return MEMORY[0x1E0CAFD40]();
}

uint64_t sub_1B2227FFC()
{
  return MEMORY[0x1E0CAFD48]();
}

uint64_t sub_1B2228008()
{
  return MEMORY[0x1E0CAFD90]();
}

uint64_t sub_1B2228014()
{
  return MEMORY[0x1E0CAFD98]();
}

uint64_t sub_1B2228020()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t sub_1B222802C()
{
  return MEMORY[0x1E0CAFDB8]();
}

uint64_t sub_1B2228038()
{
  return MEMORY[0x1E0CAFDC0]();
}

uint64_t sub_1B2228044()
{
  return MEMORY[0x1E0CAFDC8]();
}

uint64_t sub_1B2228050()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1B222805C()
{
  return MEMORY[0x1E0CAFE08]();
}

uint64_t sub_1B2228068()
{
  return MEMORY[0x1E0CAFE30]();
}

uint64_t sub_1B2228074()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1B2228080()
{
  return MEMORY[0x1E0CAFE60]();
}

uint64_t sub_1B222808C()
{
  return MEMORY[0x1E0CAFE68]();
}

uint64_t sub_1B2228098()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t sub_1B22280A4()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t sub_1B22280B0()
{
  return MEMORY[0x1E0CAFEB8]();
}

uint64_t sub_1B22280BC()
{
  return MEMORY[0x1E0CAFED8]();
}

uint64_t sub_1B22280C8()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1B22280D4()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_1B22280E0()
{
  return MEMORY[0x1E0CAFF58]();
}

uint64_t sub_1B22280EC()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_1B22280F8()
{
  return MEMORY[0x1E0CAFF98]();
}

uint64_t sub_1B2228104()
{
  return MEMORY[0x1E0CAFFD0]();
}

uint64_t sub_1B2228110()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1B222811C()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1B2228128()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_1B2228134()
{
  return MEMORY[0x1E0CB0110]();
}

uint64_t sub_1B2228140()
{
  return MEMORY[0x1E0CB0128]();
}

uint64_t sub_1B222814C()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1B2228158()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1B2228164()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1B2228170()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1B222817C()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1B2228188()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t sub_1B2228194()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_1B22281A0()
{
  return MEMORY[0x1E0CB02B0]();
}

uint64_t sub_1B22281AC()
{
  return MEMORY[0x1E0CB02B8]();
}

uint64_t sub_1B22281B8()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1B22281C4()
{
  return MEMORY[0x1E0CB02D8]();
}

uint64_t sub_1B22281D0()
{
  return MEMORY[0x1E0CB02F8]();
}

uint64_t sub_1B22281DC()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1B22281E8()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t sub_1B22281F4()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1B2228200()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1B222820C()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1B2228218()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t sub_1B2228224()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1B2228230()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_1B222823C()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1B2228248()
{
  return MEMORY[0x1E0CB0978]();
}

uint64_t sub_1B2228254()
{
  return MEMORY[0x1E0CB0980]();
}

uint64_t sub_1B2228260()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1B222826C()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1B2228278()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1B2228284()
{
  return MEMORY[0x1E0DEFCD0]();
}

uint64_t sub_1B2228290()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1B222829C()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1B22282A8()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1B22282B4()
{
  return MEMORY[0x1E0DF1E38]();
}

uint64_t sub_1B22282C0()
{
  return MEMORY[0x1E0DF1E40]();
}

uint64_t sub_1B22282CC()
{
  return MEMORY[0x1E0DF1E50]();
}

uint64_t sub_1B22282D8()
{
  return MEMORY[0x1E0DF1E60]();
}

uint64_t sub_1B22282E4()
{
  return MEMORY[0x1E0DF1EB8]();
}

uint64_t sub_1B22282F0()
{
  return MEMORY[0x1E0DF1EC0]();
}

uint64_t sub_1B22282FC()
{
  return MEMORY[0x1E0DF1EC8]();
}

uint64_t sub_1B2228308()
{
  return MEMORY[0x1E0DF1EE0]();
}

uint64_t sub_1B2228314()
{
  return MEMORY[0x1E0DF1EE8]();
}

uint64_t sub_1B2228320()
{
  return MEMORY[0x1E0DF1F08]();
}

uint64_t sub_1B222832C()
{
  return MEMORY[0x1E0DF1F10]();
}

uint64_t sub_1B2228338()
{
  return MEMORY[0x1E0DF1F18]();
}

uint64_t sub_1B2228344()
{
  return MEMORY[0x1E0DF1F28]();
}

uint64_t sub_1B2228350()
{
  return MEMORY[0x1E0DF1F48]();
}

uint64_t sub_1B222835C()
{
  return MEMORY[0x1E0DF2080]();
}

uint64_t sub_1B2228368()
{
  return MEMORY[0x1E0DF2100]();
}

uint64_t sub_1B2228374()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t sub_1B2228380()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t sub_1B222838C()
{
  return MEMORY[0x1E0DF2128]();
}

uint64_t sub_1B2228398()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t sub_1B22283A4()
{
  return MEMORY[0x1E0DF2160]();
}

uint64_t sub_1B22283B0()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t sub_1B22283BC()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t sub_1B22283C8()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t sub_1B22283D4()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t sub_1B22283E0()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t sub_1B22283EC()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t sub_1B22283F8()
{
  return MEMORY[0x1E0DF2058]();
}

uint64_t sub_1B2228404()
{
  return MEMORY[0x1E0C95CA8]();
}

uint64_t sub_1B2228410()
{
  return MEMORY[0x1E0C95DD8]();
}

uint64_t sub_1B222841C()
{
  return MEMORY[0x1E0C95DE8]();
}

uint64_t sub_1B2228428()
{
  return MEMORY[0x1E0C95F08]();
}

uint64_t sub_1B2228434()
{
  return MEMORY[0x1E0C95F20]();
}

uint64_t sub_1B2228440()
{
  return MEMORY[0x1E0C95F28]();
}

uint64_t sub_1B222844C()
{
  return MEMORY[0x1E0C96128]();
}

uint64_t sub_1B2228458()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t sub_1B2228464()
{
  return MEMORY[0x1E0C96378]();
}

uint64_t sub_1B2228470()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t sub_1B222847C()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1B2228488()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_1B2228494()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1B22284A0()
{
  return MEMORY[0x1E0DEF588]();
}

uint64_t sub_1B22284AC()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1B22284B8()
{
  return MEMORY[0x1E0DEF600]();
}

uint64_t sub_1B22284C4()
{
  return MEMORY[0x1E0DEF610]();
}

uint64_t sub_1B22284D0()
{
  return MEMORY[0x1E0DEF648]();
}

uint64_t sub_1B22284DC()
{
  return MEMORY[0x1E0DEF678]();
}

uint64_t sub_1B22284E8()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1B22284F4()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_1B2228500()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_1B222850C()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t sub_1B2228518()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1B2228524()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1B2228530()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1B222853C()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_1B2228548()
{
  return MEMORY[0x1E0DE9E58]();
}

uint64_t sub_1B2228554()
{
  return MEMORY[0x1E0DE9E60]();
}

uint64_t sub_1B2228560()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1B222856C()
{
  return MEMORY[0x1E0DE9EC0]();
}

uint64_t sub_1B2228578()
{
  return MEMORY[0x1E0DE9F38]();
}

uint64_t sub_1B2228584()
{
  return MEMORY[0x1E0DE9F78]();
}

uint64_t sub_1B2228590()
{
  return MEMORY[0x1E0DEA038]();
}

uint64_t sub_1B222859C()
{
  return MEMORY[0x1E0DEA040]();
}

uint64_t sub_1B22285A8()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1B22285B4()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1B22285C0()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1B22285CC()
{
  return MEMORY[0x1E0DEA0F0]();
}

uint64_t sub_1B22285D8()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1B22285E4()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1B22285F0()
{
  return MEMORY[0x1E0DEA280]();
}

uint64_t sub_1B22285FC()
{
  return MEMORY[0x1E0DEA2A8]();
}

uint64_t sub_1B2228608()
{
  return MEMORY[0x1E0DEA2B0]();
}

uint64_t sub_1B2228614()
{
  return MEMORY[0x1E0DEA2B8]();
}

uint64_t sub_1B2228620()
{
  return MEMORY[0x1E0DF1F70]();
}

uint64_t sub_1B222862C()
{
  return MEMORY[0x1E0DF1FA0]();
}

uint64_t sub_1B2228638()
{
  return MEMORY[0x1E0DEA350]();
}

uint64_t sub_1B2228644()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1B2228650()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t sub_1B222865C()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1B2228668()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1B2228674()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_1B2228680()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_1B222868C()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_1B2228698()
{
  return MEMORY[0x1E0DEA428]();
}

uint64_t sub_1B22286A4()
{
  return MEMORY[0x1E0DEA430]();
}

uint64_t sub_1B22286B0()
{
  return MEMORY[0x1E0DEA438]();
}

uint64_t sub_1B22286BC()
{
  return MEMORY[0x1E0DEA460]();
}

uint64_t sub_1B22286C8()
{
  return MEMORY[0x1E0DEA518]();
}

uint64_t sub_1B22286D4()
{
  return MEMORY[0x1E0DEA548]();
}

uint64_t sub_1B22286E0()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1B22286EC()
{
  return MEMORY[0x1E0DEA588]();
}

uint64_t sub_1B22286F8()
{
  return MEMORY[0x1E0DEA5B8]();
}

uint64_t sub_1B2228704()
{
  return MEMORY[0x1E0CB1840]();
}

uint64_t sub_1B2228710()
{
  return MEMORY[0x1E0CB1848]();
}

uint64_t sub_1B222871C()
{
  return MEMORY[0x1E0CB1850]();
}

uint64_t sub_1B2228728()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1B2228734()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1B2228740()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1B222874C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1B2228758()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1B2228764()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1B2228770()
{
  return MEMORY[0x1E0CB1998]();
}

uint64_t sub_1B222877C()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1B2228788()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1B2228794()
{
  return MEMORY[0x1E0CB19F0]();
}

uint64_t sub_1B22287A0()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1B22287AC()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1B22287B8()
{
  return MEMORY[0x1E0DEA610]();
}

uint64_t sub_1B22287C4()
{
  return MEMORY[0x1E0DEA618]();
}

uint64_t sub_1B22287D0()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1B22287DC()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1B22287E8()
{
  return MEMORY[0x1E0DEA668]();
}

uint64_t sub_1B22287F4()
{
  return MEMORY[0x1E0DEA680]();
}

uint64_t sub_1B2228800()
{
  return MEMORY[0x1E0DEA688]();
}

uint64_t sub_1B222880C()
{
  return MEMORY[0x1E0DEA6C0]();
}

uint64_t sub_1B2228818()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1B2228824()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1B2228830()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1B222883C()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1B2228848()
{
  return MEMORY[0x1E0DEA7C8]();
}

uint64_t sub_1B2228854()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t sub_1B2228860()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t sub_1B222886C()
{
  return MEMORY[0x1E0DEA7E0]();
}

uint64_t sub_1B2228878()
{
  return MEMORY[0x1E0DEA7F0]();
}

uint64_t sub_1B2228884()
{
  return MEMORY[0x1E0DEA7F8]();
}

uint64_t sub_1B2228890()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1B222889C()
{
  return MEMORY[0x1E0DEA820]();
}

uint64_t sub_1B22288A8()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1B22288B4()
{
  return MEMORY[0x1E0DEA830]();
}

uint64_t sub_1B22288C0()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_1B22288CC()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1B22288D8()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1B22288E4()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1B22288F0()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1B22288FC()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1B2228908()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1B2228914()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1B2228920()
{
  return MEMORY[0x1E0DEA948]();
}

uint64_t sub_1B222892C()
{
  return MEMORY[0x1E0DEA950]();
}

uint64_t sub_1B2228938()
{
  return MEMORY[0x1E0DEA958]();
}

uint64_t sub_1B2228944()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t sub_1B2228950()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1B222895C()
{
  return MEMORY[0x1E0DEAA38]();
}

uint64_t sub_1B2228968()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1B2228974()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1B2228980()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_1B222898C()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1B2228998()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t sub_1B22289A4()
{
  return MEMORY[0x1E0DEAB48]();
}

uint64_t sub_1B22289B0()
{
  return MEMORY[0x1E0DEABA0]();
}

uint64_t sub_1B22289BC()
{
  return MEMORY[0x1E0DEABB0]();
}

uint64_t sub_1B22289C8()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1B22289D4()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1B22289E0()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_1B22289EC()
{
  return MEMORY[0x1E0DEACC0]();
}

uint64_t sub_1B22289F8()
{
  return MEMORY[0x1E0DEACC8]();
}

uint64_t sub_1B2228A04()
{
  return MEMORY[0x1E0DEACE0]();
}

uint64_t sub_1B2228A10()
{
  return MEMORY[0x1E0DEACE8]();
}

uint64_t sub_1B2228A1C()
{
  return MEMORY[0x1E0DEACF0]();
}

uint64_t sub_1B2228A28()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t sub_1B2228A34()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t sub_1B2228A40()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t sub_1B2228A4C()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1B2228A58()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_1B2228A64()
{
  return MEMORY[0x1E0DEAD38]();
}

uint64_t sub_1B2228A70()
{
  return MEMORY[0x1E0DEAD40]();
}

uint64_t sub_1B2228A7C()
{
  return MEMORY[0x1E0DEAD58]();
}

uint64_t sub_1B2228A88()
{
  return MEMORY[0x1E0DEAD60]();
}

uint64_t sub_1B2228A94()
{
  return MEMORY[0x1E0DEAD68]();
}

uint64_t sub_1B2228AA0()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1B2228AAC()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1B2228AB8()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1B2228AC4()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1B2228AD0()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1B2228ADC()
{
  return MEMORY[0x1E0DEADC0]();
}

uint64_t sub_1B2228AE8()
{
  return MEMORY[0x1E0DEADD8]();
}

uint64_t sub_1B2228AF4()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1B2228B00()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1B2228B0C()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1B2228B18()
{
  return MEMORY[0x1E0DEAE30]();
}

uint64_t sub_1B2228B24()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1B2228B30()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1B2228B3C()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1B2228B48()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1B2228B54()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1B2228B60()
{
  return MEMORY[0x1E0DEAEB8]();
}

uint64_t sub_1B2228B6C()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1B2228B78()
{
  return MEMORY[0x1E0DEAEE0]();
}

uint64_t sub_1B2228B84()
{
  return MEMORY[0x1E0DEAEE8]();
}

uint64_t sub_1B2228B90()
{
  return MEMORY[0x1E0DEAEF0]();
}

uint64_t sub_1B2228B9C()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t sub_1B2228BA8()
{
  return MEMORY[0x1E0DEAF70]();
}

uint64_t sub_1B2228BB4()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t sub_1B2228BC0()
{
  return MEMORY[0x1E0CB1B28]();
}

uint64_t sub_1B2228BCC()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1B2228BD8()
{
  return MEMORY[0x1E0DF05F8]();
}

uint64_t sub_1B2228BE4()
{
  return MEMORY[0x1E0DF0600]();
}

uint64_t sub_1B2228BF0()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t sub_1B2228BFC()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1B2228C08()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1B2228C14()
{
  return MEMORY[0x1E0DF0860]();
}

uint64_t sub_1B2228C20()
{
  return MEMORY[0x1E0DF0928]();
}

uint64_t sub_1B2228C2C()
{
  return MEMORY[0x1E0DF0938]();
}

uint64_t sub_1B2228C38()
{
  return MEMORY[0x1E0DF0950]();
}

uint64_t sub_1B2228C44()
{
  return MEMORY[0x1E0DF0980]();
}

uint64_t sub_1B2228C50()
{
  return MEMORY[0x1E0DF0990]();
}

uint64_t sub_1B2228C5C()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1B2228C68()
{
  return MEMORY[0x1E0DEB120]();
}

uint64_t sub_1B2228C74()
{
  return MEMORY[0x1E0CB1B88]();
}

uint64_t sub_1B2228C80()
{
  return MEMORY[0x1E0DEB138]();
}

uint64_t sub_1B2228C8C()
{
  return MEMORY[0x1E0DEB148]();
}

uint64_t sub_1B2228C98()
{
  return MEMORY[0x1E0DEB160]();
}

uint64_t sub_1B2228CA4()
{
  return MEMORY[0x1E0DEB170]();
}

uint64_t sub_1B2228CB0()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1B2228CBC()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_1B2228CC8()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1B2228CD4()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1B2228CE0()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1B2228CEC()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_1B2228CF8()
{
  return MEMORY[0x1E0DEB408]();
}

uint64_t sub_1B2228D04()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t sub_1B2228D10()
{
  return MEMORY[0x1E0DEB500]();
}

uint64_t sub_1B2228D1C()
{
  return MEMORY[0x1E0DEB508]();
}

uint64_t sub_1B2228D28()
{
  return MEMORY[0x1E0DEB510]();
}

uint64_t sub_1B2228D34()
{
  return MEMORY[0x1E0DEB518]();
}

uint64_t sub_1B2228D40()
{
  return MEMORY[0x1E0DEB520]();
}

uint64_t sub_1B2228D4C()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1B2228D58()
{
  return MEMORY[0x1E0DF1FD0]();
}

uint64_t sub_1B2228D64()
{
  return MEMORY[0x1E0DEB540]();
}

uint64_t sub_1B2228D70()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1B2228D7C()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t sub_1B2228D88()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1B2228D94()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1B2228DA0()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t sub_1B2228DAC()
{
  return MEMORY[0x1E0DEB608]();
}

uint64_t sub_1B2228DB8()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t sub_1B2228DC4()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1B2228DD0()
{
  return MEMORY[0x1E0DEB628]();
}

uint64_t sub_1B2228DDC()
{
  return MEMORY[0x1E0DEB630]();
}

uint64_t sub_1B2228DE8()
{
  return MEMORY[0x1E0DEB648]();
}

uint64_t sub_1B2228DF4()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1B2228E00()
{
  return MEMORY[0x1E0DEB668]();
}

uint64_t sub_1B2228E0C()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t sub_1B2228E18()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_1B2228E24()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1B2228E30()
{
  return MEMORY[0x1E0DF2000]();
}

uint64_t sub_1B2228E3C()
{
  return MEMORY[0x1E0CB1C58]();
}

uint64_t sub_1B2228E48()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1B2228E54()
{
  return MEMORY[0x1E0C9B8C8]();
}

uint64_t sub_1B2228E60()
{
  return MEMORY[0x1E0DEFBD0]();
}

uint64_t sub_1B2228E6C()
{
  return MEMORY[0x1E0DEFF60]();
}

uint64_t sub_1B2228E78()
{
  return MEMORY[0x1E0C9B900]();
}

uint64_t sub_1B2228E84()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1B2228E90()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1B2228E9C()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1B2228EA8()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1B2228EB4()
{
  return MEMORY[0x1E0DF22E8]();
}

uint64_t sub_1B2228EC0()
{
  return MEMORY[0x1E0DEFDA8]();
}

uint64_t sub_1B2228ECC()
{
  return MEMORY[0x1E0DEFDB0]();
}

uint64_t sub_1B2228ED8()
{
  return MEMORY[0x1E0DEFBF0]();
}

uint64_t sub_1B2228EE4()
{
  return MEMORY[0x1E0DEFBF8]();
}

uint64_t sub_1B2228EF0()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t sub_1B2228EFC()
{
  return MEMORY[0x1E0DEF7E0]();
}

uint64_t sub_1B2228F08()
{
  return MEMORY[0x1E0DEF800]();
}

uint64_t sub_1B2228F14()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1B2228F20()
{
  return MEMORY[0x1E0DEF868]();
}

uint64_t sub_1B2228F2C()
{
  return MEMORY[0x1E0DEF8C8]();
}

uint64_t sub_1B2228F38()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1B2228F44()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1B2228F50()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1B2228F5C()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1B2228F68()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t sub_1B2228F74()
{
  return MEMORY[0x1E0DEF988]();
}

uint64_t sub_1B2228F80()
{
  return MEMORY[0x1E0DEF9F0]();
}

uint64_t sub_1B2228F8C()
{
  return MEMORY[0x1E0DEFA20]();
}

uint64_t sub_1B2228F98()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t sub_1B2228FA4()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t sub_1B2228FB0()
{
  return MEMORY[0x1E0DF22A8]();
}

uint64_t sub_1B2228FBC()
{
  return MEMORY[0x1E0DEFBD8]();
}

uint64_t sub_1B2228FC8()
{
  return MEMORY[0x1E0DEFA60]();
}

uint64_t sub_1B2228FD4()
{
  return MEMORY[0x1E0DEFA68]();
}

uint64_t sub_1B2228FE0()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1B2228FEC()
{
  return MEMORY[0x1E0DEFBE0]();
}

uint64_t sub_1B2228FF8()
{
  return MEMORY[0x1E0DEF340]();
}

uint64_t sub_1B2229004()
{
  return MEMORY[0x1E0CB1FF0]();
}

uint64_t sub_1B2229010()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1B222901C()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1B2229028()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1B2229034()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_1B2229040()
{
  return MEMORY[0x1E0CB2190]();
}

uint64_t sub_1B222904C()
{
  return MEMORY[0x1E0DEFBE8]();
}

uint64_t sub_1B2229058()
{
  return MEMORY[0x1E0CB2368]();
}

uint64_t sub_1B2229064()
{
  return MEMORY[0x1E0CB2390]();
}

uint64_t sub_1B2229070()
{
  return MEMORY[0x1E0CB23A0]();
}

uint64_t sub_1B222907C()
{
  return MEMORY[0x1E0CB23A8]();
}

uint64_t sub_1B2229088()
{
  return MEMORY[0x1E0CB23B0]();
}

uint64_t sub_1B2229094()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t sub_1B22290A0()
{
  return MEMORY[0x1E0DF22C0]();
}

uint64_t sub_1B22290AC()
{
  return MEMORY[0x1E0DF22C8]();
}

uint64_t sub_1B22290B8()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t sub_1B22290C4()
{
  return MEMORY[0x1E0DEB8C8]();
}

uint64_t sub_1B22290D0()
{
  return MEMORY[0x1E0DEB8D0]();
}

uint64_t sub_1B22290DC()
{
  return MEMORY[0x1E0DEB8D8]();
}

uint64_t sub_1B22290E8()
{
  return MEMORY[0x1E0DEB8E0]();
}

uint64_t sub_1B22290F4()
{
  return MEMORY[0x1E0DEB8E8]();
}

uint64_t sub_1B2229100()
{
  return MEMORY[0x1E0DEB8F0]();
}

uint64_t sub_1B222910C()
{
  return MEMORY[0x1E0DEB900]();
}

uint64_t sub_1B2229118()
{
  return MEMORY[0x1E0DEB908]();
}

uint64_t sub_1B2229124()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1B2229130()
{
  return MEMORY[0x1E0DEB980]();
}

uint64_t sub_1B222913C()
{
  return MEMORY[0x1E0DEB988]();
}

uint64_t sub_1B2229148()
{
  return MEMORY[0x1E0DEB998]();
}

uint64_t sub_1B2229154()
{
  return MEMORY[0x1E0DEB9F8]();
}

uint64_t sub_1B2229160()
{
  return MEMORY[0x1E0DEBA00]();
}

uint64_t sub_1B222916C()
{
  return MEMORY[0x1E0DEBA10]();
}

uint64_t sub_1B2229178()
{
  return MEMORY[0x1E0DEBA70]();
}

uint64_t sub_1B2229184()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t sub_1B2229190()
{
  return MEMORY[0x1E0DEBA88]();
}

uint64_t sub_1B222919C()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t sub_1B22291A8()
{
  return MEMORY[0x1E0DEBB48]();
}

uint64_t sub_1B22291B4()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t sub_1B22291C0()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t sub_1B22291CC()
{
  return MEMORY[0x1E0DEBB60]();
}

uint64_t sub_1B22291D8()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1B22291E4()
{
  return MEMORY[0x1E0DEBC38]();
}

uint64_t sub_1B22291F0()
{
  return MEMORY[0x1E0DEBC78]();
}

uint64_t sub_1B22291FC()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1B2229208()
{
  return MEMORY[0x1E0CB2400]();
}

uint64_t sub_1B2229214()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t sub_1B2229220()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_1B222922C()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1B2229238()
{
  return MEMORY[0x1E0CB24B8]();
}

uint64_t sub_1B2229244()
{
  return MEMORY[0x1E0CB24C8]();
}

uint64_t sub_1B2229250()
{
  return MEMORY[0x1E0CB2500]();
}

uint64_t sub_1B222925C()
{
  return MEMORY[0x1E0CB2540]();
}

uint64_t sub_1B2229268()
{
  return MEMORY[0x1E0CB2550]();
}

uint64_t sub_1B2229274()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_1B2229280()
{
  return MEMORY[0x1E0DEFF58]();
}

uint64_t sub_1B222928C()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t sub_1B2229298()
{
  return MEMORY[0x1E0DEBDA8]();
}

uint64_t sub_1B22292A4()
{
  return MEMORY[0x1E0DEBDC8]();
}

uint64_t sub_1B22292B0()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t sub_1B22292BC()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t sub_1B22292C8()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t sub_1B22292D4()
{
  return MEMORY[0x1E0DEBE30]();
}

uint64_t sub_1B22292E0()
{
  return MEMORY[0x1E0DEBE48]();
}

uint64_t sub_1B22292EC()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1B22292F8()
{
  return MEMORY[0x1E0DEBE60]();
}

uint64_t sub_1B2229304()
{
  return MEMORY[0x1E0DEBE70]();
}

uint64_t sub_1B2229310()
{
  return MEMORY[0x1E0DEBE78]();
}

uint64_t sub_1B222931C()
{
  return MEMORY[0x1E0DEBE80]();
}

uint64_t sub_1B2229328()
{
  return MEMORY[0x1E0DEBE88]();
}

uint64_t sub_1B2229334()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1B2229340()
{
  return MEMORY[0x1E0DEBFF0]();
}

uint64_t sub_1B222934C()
{
  return MEMORY[0x1E0DEBFF8]();
}

uint64_t sub_1B2229358()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1B2229364()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1B2229370()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1B222937C()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1B2229388()
{
  return MEMORY[0x1E0DEC090]();
}

uint64_t sub_1B2229394()
{
  return MEMORY[0x1E0DEC098]();
}

uint64_t sub_1B22293A0()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1B22293AC()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1B22293B8()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1B22293C4()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1B22293D0()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1B22293DC()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1B22293E8()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1B22293F4()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1B2229400()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t sub_1B222940C()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1B2229418()
{
  return MEMORY[0x1E0DEC290]();
}

uint64_t sub_1B2229424()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t sub_1B2229430()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1B222943C()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1B2229448()
{
  return MEMORY[0x1E0DEC310]();
}

uint64_t sub_1B2229454()
{
  return MEMORY[0x1E0DEC338]();
}

uint64_t sub_1B2229460()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1B222946C()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1B2229478()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1B2229484()
{
  return MEMORY[0x1E0DEC408]();
}

uint64_t sub_1B2229490()
{
  return MEMORY[0x1E0DEC430]();
}

uint64_t sub_1B222949C()
{
  return MEMORY[0x1E0DEC438]();
}

uint64_t sub_1B22294A8()
{
  return MEMORY[0x1E0DEC440]();
}

uint64_t sub_1B22294B4()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1B22294C0()
{
  return MEMORY[0x1E0DEC488]();
}

uint64_t sub_1B22294CC()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1B22294D8()
{
  return MEMORY[0x1E0DEC4B8]();
}

uint64_t sub_1B22294E4()
{
  return MEMORY[0x1E0DEC4D0]();
}

uint64_t sub_1B22294F0()
{
  return MEMORY[0x1E0DEC4E0]();
}

uint64_t sub_1B22294FC()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1B2229508()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t sub_1B2229514()
{
  return MEMORY[0x1E0DEC5A8]();
}

uint64_t sub_1B2229520()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1B222952C()
{
  return MEMORY[0x1E0DEC668]();
}

uint64_t sub_1B2229538()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1B2229544()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_1B2229550()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1B222955C()
{
  return MEMORY[0x1E0DEC698]();
}

uint64_t sub_1B2229568()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1B2229574()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1B2229580()
{
  return MEMORY[0x1E0DEC6D0]();
}

uint64_t sub_1B222958C()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_1B2229598()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_1B22295A4()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1B22295B0()
{
  return MEMORY[0x1E0DEC750]();
}

uint64_t sub_1B22295BC()
{
  return MEMORY[0x1E0DF0B20]();
}

uint64_t sub_1B22295C8()
{
  return MEMORY[0x1E0DF0B58]();
}

uint64_t sub_1B22295D4()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t sub_1B22295E0()
{
  return MEMORY[0x1E0DEC870]();
}

uint64_t sub_1B22295EC()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1B22295F8()
{
  return MEMORY[0x1E0DEC8F8]();
}

uint64_t sub_1B2229604()
{
  return MEMORY[0x1E0DEC980]();
}

uint64_t sub_1B2229610()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t sub_1B222961C()
{
  return MEMORY[0x1E0DECA48]();
}

uint64_t sub_1B2229628()
{
  return MEMORY[0x1E0DECA50]();
}

uint64_t sub_1B2229634()
{
  return MEMORY[0x1E0DECB18]();
}

uint64_t sub_1B2229640()
{
  return MEMORY[0x1E0DECB20]();
}

uint64_t sub_1B222964C()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1B2229658()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_1B2229664()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t sub_1B2229670()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1B222967C()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1B2229688()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1B2229694()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t sub_1B22296A0()
{
  return MEMORY[0x1E0DECD10]();
}

uint64_t sub_1B22296AC()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1B22296B8()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1B22296C4()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1B22296D0()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t sub_1B22296DC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1B22296E8()
{
  return MEMORY[0x1E0DECD58]();
}

uint64_t sub_1B22296F4()
{
  return MEMORY[0x1E0DECD68]();
}

uint64_t sub_1B2229700()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1B222970C()
{
  return MEMORY[0x1E0DECDF0]();
}

uint64_t sub_1B2229718()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1B2229724()
{
  return MEMORY[0x1E0DECEA0]();
}

uint64_t sub_1B2229730()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1B222973C()
{
  return MEMORY[0x1E0DF0D38]();
}

uint64_t sub_1B2229748()
{
  return MEMORY[0x1E0DECF30]();
}

uint64_t sub_1B2229754()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1B2229760()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1B222976C()
{
  return MEMORY[0x1E0DECF48]();
}

uint64_t sub_1B2229778()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1B2229784()
{
  return MEMORY[0x1E0DECF60]();
}

uint64_t sub_1B2229790()
{
  return MEMORY[0x1E0DECF68]();
}

uint64_t sub_1B222979C()
{
  return MEMORY[0x1E0DECF70]();
}

uint64_t sub_1B22297A8()
{
  return MEMORY[0x1E0DECF78]();
}

uint64_t sub_1B22297B4()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1B22297C0()
{
  return MEMORY[0x1E0DECFB8]();
}

uint64_t sub_1B22297CC()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1B22297D8()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1B22297E4()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t sub_1B22297F0()
{
  return MEMORY[0x1E0DECFD8]();
}

uint64_t sub_1B22297FC()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1B2229808()
{
  return MEMORY[0x1E0DECFE8]();
}

uint64_t sub_1B2229814()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1B2229820()
{
  return MEMORY[0x1E0DECFF8]();
}

uint64_t sub_1B222982C()
{
  return MEMORY[0x1E0DED000]();
}

uint64_t sub_1B2229838()
{
  return MEMORY[0x1E0DED008]();
}

uint64_t sub_1B2229844()
{
  return MEMORY[0x1E0DED010]();
}

uint64_t sub_1B2229850()
{
  return MEMORY[0x1E0DED018]();
}

uint64_t sub_1B222985C()
{
  return MEMORY[0x1E0DED020]();
}

uint64_t sub_1B2229868()
{
  return MEMORY[0x1E0DED028]();
}

uint64_t sub_1B2229874()
{
  return MEMORY[0x1E0DED030]();
}

uint64_t sub_1B2229880()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1B222988C()
{
  return MEMORY[0x1E0DED040]();
}

uint64_t sub_1B2229898()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1B22298A4()
{
  return MEMORY[0x1E0DED058]();
}

uint64_t sub_1B22298B0()
{
  return MEMORY[0x1E0DED068]();
}

uint64_t sub_1B22298BC()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1B22298C8()
{
  return MEMORY[0x1E0DED080]();
}

uint64_t sub_1B22298D4()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1B22298E0()
{
  return MEMORY[0x1E0DED098]();
}

uint64_t sub_1B22298EC()
{
  return MEMORY[0x1E0DED0A8]();
}

uint64_t sub_1B22298F8()
{
  return MEMORY[0x1E0DED0B0]();
}

uint64_t sub_1B2229904()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_1B2229910()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1B222991C()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1B2229928()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t sub_1B2229934()
{
  return MEMORY[0x1E0DED108]();
}

uint64_t sub_1B2229940()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1B222994C()
{
  return MEMORY[0x1E0DED118]();
}

uint64_t sub_1B2229958()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1B2229964()
{
  return MEMORY[0x1E0DED128]();
}

uint64_t sub_1B2229970()
{
  return MEMORY[0x1E0DED130]();
}

uint64_t sub_1B222997C()
{
  return MEMORY[0x1E0DED138]();
}

uint64_t sub_1B2229988()
{
  return MEMORY[0x1E0DED140]();
}

uint64_t sub_1B2229994()
{
  return MEMORY[0x1E0DED148]();
}

uint64_t sub_1B22299A0()
{
  return MEMORY[0x1E0DED150]();
}

uint64_t sub_1B22299AC()
{
  return MEMORY[0x1E0DED158]();
}

uint64_t sub_1B22299B8()
{
  return MEMORY[0x1E0DED160]();
}

uint64_t sub_1B22299C4()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1B22299D0()
{
  return MEMORY[0x1E0DED180]();
}

uint64_t sub_1B22299DC()
{
  return MEMORY[0x1E0DED1A0]();
}

uint64_t sub_1B22299E8()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1B22299F4()
{
  return MEMORY[0x1E0DED1B8]();
}

uint64_t sub_1B2229A00()
{
  return MEMORY[0x1E0DED1C0]();
}

uint64_t sub_1B2229A0C()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1B2229A18()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_1B2229A24()
{
  return MEMORY[0x1E0DED200]();
}

uint64_t sub_1B2229A30()
{
  return MEMORY[0x1E0DED220]();
}

uint64_t sub_1B2229A3C()
{
  return MEMORY[0x1E0DED228]();
}

uint64_t sub_1B2229A48()
{
  return MEMORY[0x1E0DED250]();
}

uint64_t sub_1B2229A54()
{
  return MEMORY[0x1E0DED258]();
}

uint64_t sub_1B2229A60()
{
  return MEMORY[0x1E0DED260]();
}

uint64_t sub_1B2229A6C()
{
  return MEMORY[0x1E0DED268]();
}

uint64_t sub_1B2229A78()
{
  return MEMORY[0x1E0DED270]();
}

uint64_t sub_1B2229A84()
{
  return MEMORY[0x1E0DED278]();
}

uint64_t sub_1B2229A90()
{
  return MEMORY[0x1E0DED280]();
}

uint64_t sub_1B2229A9C()
{
  return MEMORY[0x1E0DED288]();
}

uint64_t sub_1B2229AA8()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t sub_1B2229AB4()
{
  return MEMORY[0x1E0DED298]();
}

uint64_t sub_1B2229AC0()
{
  return MEMORY[0x1E0DED2B0]();
}

uint64_t sub_1B2229ACC()
{
  return MEMORY[0x1E0DED2B8]();
}

uint64_t sub_1B2229AD8()
{
  return MEMORY[0x1E0DED2C8]();
}

uint64_t sub_1B2229AE4()
{
  return MEMORY[0x1E0DED2D0]();
}

uint64_t sub_1B2229AF0()
{
  return MEMORY[0x1E0DED2D8]();
}

uint64_t sub_1B2229AFC()
{
  return MEMORY[0x1E0DED2E8]();
}

uint64_t sub_1B2229B08()
{
  return MEMORY[0x1E0DED2F0]();
}

uint64_t sub_1B2229B14()
{
  return MEMORY[0x1E0DED2F8]();
}

uint64_t sub_1B2229B20()
{
  return MEMORY[0x1E0DED318]();
}

uint64_t sub_1B2229B2C()
{
  return MEMORY[0x1E0DED340]();
}

uint64_t sub_1B2229B38()
{
  return MEMORY[0x1E0DED350]();
}

uint64_t sub_1B2229B44()
{
  return MEMORY[0x1E0DED358]();
}

uint64_t sub_1B2229B50()
{
  return MEMORY[0x1E0DED368]();
}

uint64_t sub_1B2229B5C()
{
  return MEMORY[0x1E0DED370]();
}

uint64_t sub_1B2229B68()
{
  return MEMORY[0x1E0DED3A0]();
}

uint64_t sub_1B2229B74()
{
  return MEMORY[0x1E0DED3A8]();
}

uint64_t sub_1B2229B80()
{
  return MEMORY[0x1E0DED3B0]();
}

uint64_t sub_1B2229B8C()
{
  return MEMORY[0x1E0DED3B8]();
}

uint64_t sub_1B2229B98()
{
  return MEMORY[0x1E0DED3C0]();
}

uint64_t sub_1B2229BA4()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t sub_1B2229BB0()
{
  return MEMORY[0x1E0DED3D8]();
}

uint64_t sub_1B2229BBC()
{
  return MEMORY[0x1E0DED3E0]();
}

uint64_t sub_1B2229BC8()
{
  return MEMORY[0x1E0DED3F0]();
}

uint64_t sub_1B2229BD4()
{
  return MEMORY[0x1E0DED400]();
}

uint64_t sub_1B2229BE0()
{
  return MEMORY[0x1E0DED408]();
}

uint64_t sub_1B2229BEC()
{
  return MEMORY[0x1E0DED410]();
}

uint64_t sub_1B2229BF8()
{
  return MEMORY[0x1E0DED418]();
}

uint64_t sub_1B2229C04()
{
  return MEMORY[0x1E0DED420]();
}

uint64_t sub_1B2229C10()
{
  return MEMORY[0x1E0DED428]();
}

uint64_t sub_1B2229C1C()
{
  return MEMORY[0x1E0DED430]();
}

uint64_t sub_1B2229C28()
{
  return MEMORY[0x1E0DED438]();
}

uint64_t sub_1B2229C34()
{
  return MEMORY[0x1E0DED440]();
}

uint64_t sub_1B2229C40()
{
  return MEMORY[0x1E0DED448]();
}

uint64_t sub_1B2229C4C()
{
  return MEMORY[0x1E0DED450]();
}

uint64_t sub_1B2229C58()
{
  return MEMORY[0x1E0DED458]();
}

uint64_t sub_1B2229C64()
{
  return MEMORY[0x1E0DED460]();
}

uint64_t sub_1B2229C70()
{
  return MEMORY[0x1E0DED468]();
}

uint64_t sub_1B2229C7C()
{
  return MEMORY[0x1E0DED470]();
}

uint64_t sub_1B2229C88()
{
  return MEMORY[0x1E0DED478]();
}

uint64_t sub_1B2229C94()
{
  return MEMORY[0x1E0DED480]();
}

uint64_t sub_1B2229CA0()
{
  return MEMORY[0x1E0DED488]();
}

uint64_t sub_1B2229CAC()
{
  return MEMORY[0x1E0DED490]();
}

uint64_t sub_1B2229CB8()
{
  return MEMORY[0x1E0DED498]();
}

uint64_t sub_1B2229CC4()
{
  return MEMORY[0x1E0DED4C0]();
}

uint64_t sub_1B2229CD0()
{
  return MEMORY[0x1E0DED510]();
}

uint64_t sub_1B2229CDC()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t sub_1B2229CE8()
{
  return MEMORY[0x1E0DED560]();
}

uint64_t sub_1B2229CF4()
{
  return MEMORY[0x1E0DED5A8]();
}

uint64_t sub_1B2229D00()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t sub_1B2229D0C()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1B2229D18()
{
  return MEMORY[0x1E0DED5F8]();
}

uint64_t sub_1B2229D24()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1B2229D30()
{
  return MEMORY[0x1E0DED628]();
}

uint64_t sub_1B2229D3C()
{
  return MEMORY[0x1E0DED630]();
}

uint64_t sub_1B2229D48()
{
  return MEMORY[0x1E0DED640]();
}

uint64_t sub_1B2229D54()
{
  return MEMORY[0x1E0DED648]();
}

uint64_t sub_1B2229D60()
{
  return MEMORY[0x1E0DED650]();
}

uint64_t sub_1B2229D6C()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t sub_1B2229D78()
{
  return MEMORY[0x1E0DED668]();
}

uint64_t sub_1B2229D84()
{
  return MEMORY[0x1E0DED678]();
}

uint64_t sub_1B2229D90()
{
  return MEMORY[0x1E0DED688]();
}

uint64_t sub_1B2229D9C()
{
  return MEMORY[0x1E0DED698]();
}

uint64_t sub_1B2229DA8()
{
  return MEMORY[0x1E0DED6A0]();
}

uint64_t sub_1B2229DB4()
{
  return MEMORY[0x1E0DED6C8]();
}

uint64_t sub_1B2229DC0()
{
  return MEMORY[0x1E0DED6D0]();
}

uint64_t sub_1B2229DCC()
{
  return MEMORY[0x1E0DED6E0]();
}

uint64_t sub_1B2229DD8()
{
  return MEMORY[0x1E0DED6E8]();
}

uint64_t sub_1B2229DE4()
{
  return MEMORY[0x1E0DED6F0]();
}

uint64_t sub_1B2229DF0()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t sub_1B2229DFC()
{
  return MEMORY[0x1E0DED710]();
}

uint64_t sub_1B2229E08()
{
  return MEMORY[0x1E0DED720]();
}

uint64_t sub_1B2229E14()
{
  return MEMORY[0x1E0DED738]();
}

uint64_t sub_1B2229E20()
{
  return MEMORY[0x1E0DED748]();
}

uint64_t sub_1B2229E2C()
{
  return MEMORY[0x1E0DED750]();
}

uint64_t sub_1B2229E38()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t sub_1B2229E44()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1B2229E50()
{
  return MEMORY[0x1E0DED7D0]();
}

uint64_t sub_1B2229E5C()
{
  return MEMORY[0x1E0DED7D8]();
}

uint64_t sub_1B2229E68()
{
  return MEMORY[0x1E0DED7E0]();
}

uint64_t sub_1B2229E74()
{
  return MEMORY[0x1E0DED7F0]();
}

uint64_t sub_1B2229E80()
{
  return MEMORY[0x1E0DED7F8]();
}

uint64_t sub_1B2229E8C()
{
  return MEMORY[0x1E0DED800]();
}

uint64_t sub_1B2229E98()
{
  return MEMORY[0x1E0DED820]();
}

uint64_t sub_1B2229EA4()
{
  return MEMORY[0x1E0DED848]();
}

uint64_t sub_1B2229EB0()
{
  return MEMORY[0x1E0DED858]();
}

uint64_t sub_1B2229EBC()
{
  return MEMORY[0x1E0DED860]();
}

uint64_t sub_1B2229EC8()
{
  return MEMORY[0x1E0DED8D0]();
}

uint64_t sub_1B2229ED4()
{
  return MEMORY[0x1E0DED8D8]();
}

uint64_t sub_1B2229EE0()
{
  return MEMORY[0x1E0DED8E0]();
}

uint64_t sub_1B2229EEC()
{
  return MEMORY[0x1E0DED8F0]();
}

uint64_t sub_1B2229EF8()
{
  return MEMORY[0x1E0DED8F8]();
}

uint64_t sub_1B2229F04()
{
  return MEMORY[0x1E0DED900]();
}

uint64_t sub_1B2229F10()
{
  return MEMORY[0x1E0DED920]();
}

uint64_t sub_1B2229F1C()
{
  return MEMORY[0x1E0DED930]();
}

uint64_t sub_1B2229F28()
{
  return MEMORY[0x1E0DED948]();
}

uint64_t sub_1B2229F34()
{
  return MEMORY[0x1E0DED950]();
}

uint64_t sub_1B2229F40()
{
  return MEMORY[0x1E0DED958]();
}

uint64_t sub_1B2229F4C()
{
  return MEMORY[0x1E0DED960]();
}

uint64_t sub_1B2229F58()
{
  return MEMORY[0x1E0DED968]();
}

uint64_t sub_1B2229F64()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t sub_1B2229F70()
{
  return MEMORY[0x1E0DED9C8]();
}

uint64_t sub_1B2229F7C()
{
  return MEMORY[0x1E0DED9D0]();
}

uint64_t sub_1B2229F88()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t sub_1B2229F94()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1B2229FA0()
{
  return MEMORY[0x1E0DEDAC0]();
}

uint64_t sub_1B2229FAC()
{
  return MEMORY[0x1E0DEDAD0]();
}

uint64_t sub_1B2229FB8()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1B2229FC4()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1B2229FD0()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1B2229FDC()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1B2229FE8()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1B2229FF4()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1B222A000()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1B222A00C()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1B222A018()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1B222A024()
{
  return MEMORY[0x1E0DEDD50]();
}

uint64_t sub_1B222A030()
{
  return MEMORY[0x1E0DEDDA8]();
}

uint64_t sub_1B222A03C()
{
  return MEMORY[0x1E0DEDE10]();
}

uint64_t sub_1B222A048()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t sub_1B222A054()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1B222A060()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1B222A06C()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1B222A078()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1B222A084()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1B222A090()
{
  return MEMORY[0x1E0DEDF20]();
}

uint64_t sub_1B222A09C()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1B222A0A8()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1B222A0B4()
{
  return MEMORY[0x1E0DEDF38]();
}

uint64_t sub_1B222A0C0()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1B222A0CC()
{
  return MEMORY[0x1E0DEDF48]();
}

uint64_t sub_1B222A0D8()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_1B222A0E4()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t sub_1B222A0F0()
{
  return MEMORY[0x1E0DEDFE0]();
}

uint64_t sub_1B222A0FC()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t sub_1B222A108()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t sub_1B222A114()
{
  return MEMORY[0x1E0DEE018]();
}

uint64_t sub_1B222A120()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1B222A12C()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t sub_1B222A138()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_1B222A144()
{
  return MEMORY[0x1E0DEE238]();
}

uint64_t sub_1B222A150()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1B222A15C()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t sub_1B222A168()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t sub_1B222A174()
{
  return MEMORY[0x1E0DEE268]();
}

uint64_t sub_1B222A180()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1B222A18C()
{
  return MEMORY[0x1E0DEE298]();
}

uint64_t sub_1B222A198()
{
  return MEMORY[0x1E0DEE758]();
}

uint64_t sub_1B222A1A4()
{
  return MEMORY[0x1E0DEE8B8]();
}

uint64_t sub_1B222A1B0()
{
  return MEMORY[0x1E0DEE8C8]();
}

uint64_t sub_1B222A1BC()
{
  return MEMORY[0x1E0DEE8D0]();
}

uint64_t sub_1B222A1C8()
{
  return MEMORY[0x1E0DEE8D8]();
}

uint64_t sub_1B222A1D4()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1B222A1E0()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1B222A1EC()
{
  return MEMORY[0x1E0DEE8F8]();
}

uint64_t sub_1B222A1F8()
{
  return MEMORY[0x1E0DF0F28]();
}

uint64_t sub_1B222A204()
{
  return MEMORY[0x1E0DF0F48]();
}

uint64_t sub_1B222A210()
{
  return MEMORY[0x1E0DEE978]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  return (CATransform3D *)MEMORY[0x1E0CD25F0](retstr, a, b);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2648](retstr, tx, ty, tz);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator)
{
  MEMORY[0x1E0C98158](bundle, packageType, packageCreator);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1E0C98380](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98578](theDict, key);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
  MEMORY[0x1E0C988E8](center, name, object, userInfo, options);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE8](rl, observer, mode);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1E0C98C28](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return MEMORY[0x1E0C98C58](rl);
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C60](allocator, activities, repeats, order, callout, context);
}

CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void *block)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C68](allocator, activities, repeats, order, block);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
  MEMORY[0x1E0C98C78](observer);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C88](rl, observer, mode);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

void CFRunLoopRun(void)
{
  MEMORY[0x1E0C98CA8]();
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CF0](source);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x1E0C98D90](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98DA0](allocator, capacity, theSet);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
  MEMORY[0x1E0C991F8](theString, replacement);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C99320](url);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99348](anURL);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB38](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo, releaseCallback);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return MEMORY[0x1E0C9BB48](context);
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  return MEMORY[0x1E0C9BB50](context);
}

size_t CGBitmapContextGetBitsPerPixel(CGContextRef context)
{
  return MEMORY[0x1E0C9BB58](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1E0C9BB60](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BB68](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

CGColorConversionInfoRef CGColorConversionInfoCreateFromList(CFDictionaryRef options, CGColorSpaceRef a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, ...)
{
  return (CGColorConversionInfoRef)MEMORY[0x1E0C9BC50](options, a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

uint64_t CGColorConversionInfoIterateFunctionsWithCallbacks()
{
  return MEMORY[0x1E0C9BC70]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1E0C9BC88](a1, *(_QWORD *)&intent, color, options);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB0](red, green, blue, alpha);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1E0C9BD38]();
}

uint64_t CGColorMatrixGetMatrix()
{
  return MEMORY[0x1E0C9BD40]();
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9BDC0](space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE60](plist);
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE80](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BED8](space);
}

BOOL CGColorSpaceIsWideGamutRGB(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF28](a1);
}

uint64_t CGColorTRCGetFunction()
{
  return MEMORY[0x1E0C9BF58]();
}

uint64_t CGColorTRCGetGammaID()
{
  return MEMORY[0x1E0C9BF60]();
}

uint64_t CGColorTransformConvertColor()
{
  return MEMORY[0x1E0C9BF78]();
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x1E0C9BF80]();
}

uint64_t CGColorTransformConvertData()
{
  return MEMORY[0x1E0C9BF88]();
}

uint64_t CGColorTransformCreate()
{
  return MEMORY[0x1E0C9BF90]();
}

uint64_t CGColorTransformGetColorSpace()
{
  return MEMORY[0x1E0C9BF98]();
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFlush(CGContextRef c)
{
  MEMORY[0x1E0C9C230](c);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
  MEMORY[0x1E0C9C3F8](c, components);
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  MEMORY[0x1E0C9C400](c, space);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFStringRef CGFontCopyFullName(CGFontRef font)
{
  return (CFStringRef)MEMORY[0x1E0C9C6E0](font);
}

CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font, CGGlyph glyph)
{
  return (CFStringRef)MEMORY[0x1E0C9C6E8](font, glyph);
}

void CGFontRelease(CGFontRef font)
{
  MEMORY[0x1E0C9C8E0](font);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1E0C9CC70]();
}

CFTypeID CGImageGetTypeID(void)
{
  return MEMORY[0x1E0C9CCC0]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

uint64_t CGImageProviderCopyIOSurface()
{
  return MEMORY[0x1E0C9CD10]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

CGImageSourceStatus CGImageSourceGetStatusAtIndex(CGImageSourceRef isrc, size_t index)
{
  return MEMORY[0x1E0CBC608](isrc, index);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1E0CBC618](isrc);
}

void CGPathAddArcToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
  MEMORY[0x1E0C9D288](path, m, x1, y1, x2, y2, radius);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2C8](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D4A0](path);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1E0C9EFD8](sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9F008](retstr, sbuf);
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

uint64_t CSIsNull()
{
  return MEMORY[0x1E0D19FB8]();
}

uint64_t CSRelease()
{
  return MEMORY[0x1E0D1A018]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x1E0D1A090]();
}

uint64_t CSSymbolicatorCreateWithPid()
{
  return MEMORY[0x1E0D1A228]();
}

uint64_t CSSymbolicatorForeachSymbolWithMangledNameAtTime()
{
  return MEMORY[0x1E0D1A298]();
}

uint64_t CSSymbolicatorGetTask()
{
  return MEMORY[0x1E0D1A368]();
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x1E0CA79C8](font, attributes);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x1E0CA7A60](font, glyph, matrix);
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
  MEMORY[0x1E0CA7B70](font, glyphs, positions, count, context);
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  double result;

  MEMORY[0x1E0CA7B98](font, *(_QWORD *)&orientation, glyphs, advances, count);
  return result;
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7BA0](font);
  return result;
}

CGRect CTFontGetBoundingBox(CTFontRef font)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0CA7BB0](font);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7BD8](font);
  return result;
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x1E0CA7C08](font, characters, glyphs, count);
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7C20](font);
  return result;
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
  MEMORY[0x1E0CA7DA8](frame, range.location, range.length, origins);
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x1E0CA7DB0](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1E0CA7ED8](line);
}

void CTRunGetAdvances(CTRunRef run, CFRange range, CGSize *buffer)
{
  MEMORY[0x1E0CA7FA0](run, range.location, range.length, buffer);
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA7FB0](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1E0CA7FD0](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
  MEMORY[0x1E0CA7FE0](run, range.location, range.length, buffer);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  MEMORY[0x1E0CA8A40](textureCache, options);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBB18](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBD00](buffer);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MTLDataTypeGetAlignment()
{
  return MEMORY[0x1E0CC6988]();
}

uint64_t MTLDataTypeString()
{
  return MEMORY[0x1E0CC6990]();
}

uint64_t MTLGetShaderCachePath()
{
  return MEMORY[0x1E0CC6998]();
}

uint64_t MTLPixelFormatGetInfo()
{
  return MEMORY[0x1E0CC69B8]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1E0CC69C8]();
}

uint64_t MTLPixelFormatGetName()
{
  return MEMORY[0x1E0CC69D0]();
}

uint64_t MTLValidationEnabled()
{
  return MEMORY[0x1E0CC69F8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
  MEMORY[0x1E0CB29A0](enumerator);
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  return (NSMapEnumerator *)MEMORY[0x1E0CB29B0](retstr, table);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  return MEMORY[0x1E0CB2F88](enumerator, key, value);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1E0DC32E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1E0DC4BE8]();
}

void UIGraphicsPopContext(void)
{
  MEMORY[0x1E0DC4C00]();
}

void UIGraphicsPushContext(CGContextRef context)
{
  MEMORY[0x1E0DC4C08](context);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1E0DC4C60](image);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeGetClassWithTypeID()
{
  return MEMORY[0x1E0C9A4A0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _SCNShadableConvertShaderToMetalIfNeeded()
{
  return MEMORY[0x1E0CD5BD8]();
}

uint64_t _UIApplicationIsExtension()
{
  return MEMORY[0x1E0DC5720]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4450](this, __str, __pos, __n);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

uint64_t std::stringbuf::basic_stringbuf()
{
  return MEMORY[0x1E0DE4810]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
  MEMORY[0x1E0DE4C70](this, a2);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

uint64_t operator delete[]()
{
  return off_1E636BA20();
}

void operator delete(void *__p)
{
  off_1E636BA28(__p);
}

uint64_t operator delete()
{
  return off_1E636BA30();
}

uint64_t operator new[]()
{
  return off_1E636BA38();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E636BA40(__sz);
}

uint64_t operator new()
{
  return off_1E636BA48();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __invert_d4()
{
  return MEMORY[0x1E0C80B20]();
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x1E0C80B30]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x1E0C80B38]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincospif_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

double __tanpi(double a1)
{
  double result;

  MEMORY[0x1E0C80C68](a1);
  return result;
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1E0C80E60](*(_QWORD *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1E0C80EB8]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

simd_float4 _simd_cos_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811C0]((__n128)x);
  return result;
}

simd_float4 _simd_pow_f4(simd_float4 x, simd_float4 y)
{
  simd_float4 result;

  MEMORY[0x1E0C811F8]((__n128)x, (__n128)y);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C81200]((__n128)x);
  return result;
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1E0DEE9F8]();
}

uint64_t _swift_stdlib_immortalize()
{
  return MEMORY[0x1E0DEEA38]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1E0DEEA58]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

void *__cdecl aligned_alloc(size_t __alignment, size_t __size)
{
  return (void *)MEMORY[0x1E0C81558](__alignment, __size);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

float asinf(float a1)
{
  float result;

  MEMORY[0x1E0C815A0](a1);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1E0C816B8](a1, *(_QWORD *)&a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

float cbrtf(float a1)
{
  float result;

  MEMORY[0x1E0C81858](a1);
  return result;
}

BOOL class_addProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1E0DE7A60](cls, protocol);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1E0DE7A80](cls, outCount);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1E0DE7AD0](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

uint64_t clear_mapped_memory()
{
  return MEMORY[0x1E0D1A3A8]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x1E0DE92B0](crc, buf, *(_QWORD *)&len);
}

uint64_t create_mapped_memory_cache_for_task()
{
  return MEMORY[0x1E0D1A3B8]();
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

uint64_t destroy_mapped_memory_cache()
{
  return MEMORY[0x1E0D1A3C8]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
  MEMORY[0x1E0C82F40](source, value);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

double drand48(void)
{
  double result;

  MEMORY[0x1E0C83070]();
  return result;
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1E0C837E0](mhp, segname, sectname, size);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C83B48](*(_QWORD *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry)
{
  return MEMORY[0x1E0C83C98](*(_QWORD *)&target_task, size, offset, *(_QWORD *)&permission, object_handle, *(_QWORD *)&parent_entry);
}

kern_return_t mach_memory_entry_ownership(mem_entry_name_port_t mem_entry, task_t owner, int ledger_tag, int ledger_flags)
{
  return MEMORY[0x1E0C83CA0](*(_QWORD *)&mem_entry, *(_QWORD *)&owner, *(_QWORD *)&ledger_tag, *(_QWORD *)&ledger_flags);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1E0C83DD0](*(_QWORD *)&target, address, size);
}

kern_return_t mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, BOOLean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x1E0C83DD8](*(_QWORD *)&target_task, address, size, mask, *(_QWORD *)&flags, *(_QWORD *)&object, offset, *(_QWORD *)&copy);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF0](alignment, size, type_id);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F18](size, type_id);
}

uint64_t mapped_memory_read()
{
  return MEMORY[0x1E0D1A590]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1E0DE7CD8](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1E0DE7D20])(a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_workgroup_attr_set_flags()
{
  return MEMORY[0x1E0C84A20]();
}

uint64_t os_workgroup_create()
{
  return MEMORY[0x1E0C84A48]();
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  return MEMORY[0x1E0C84AA0](wg, token_out);
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
  MEMORY[0x1E0C84AA8](wg, token);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

uint64_t proc_disable_wakemon()
{
  return MEMORY[0x1E0C84BE8]();
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8068](property);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF0](a1, *(_QWORD *)&a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E50](a1, *(_QWORD *)&a2);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1E0C84E70](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1E0C84E78](__pthread, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

uint64_t pthread_set_fixedpriority_self()
{
  return MEMORY[0x1E0C84EE8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  MEMORY[0x1E0C84F98](__base, __nel, __width, a4, __compar);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1E0C853E0](*(_QWORD *)&a1, a2, a3);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x1E0DF0F68]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x1E0DF0F70]();
}

uint64_t swift_asyncLet_get_throwing()
{
  return MEMORY[0x1E0DF0F80]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBB8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtAnyKeyPath()
{
  return MEMORY[0x1E0DEEC10]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getAtPartialKeyPath()
{
  return MEMORY[0x1E0DEEC20]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x1E0DEEC58]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x1E0DEEC60]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x1E0DEEC90]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1E0DEEC98]();
}

uint64_t swift_getFunctionTypeMetadata3()
{
  return MEMORY[0x1E0DEECA8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassFromObject()
{
  return MEMORY[0x1E0DEECD0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1E0DEED00]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getTypeByMangledNameInContext()
{
  return MEMORY[0x1E0DEED30]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_job_run()
{
  return MEMORY[0x1E0DF0FD8]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEDF8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1E0DEEE60]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEE68]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectUnownedAssign()
{
  return MEMORY[0x1E0DEEEE0]();
}

uint64_t swift_unknownObjectUnownedCopyAssign()
{
  return MEMORY[0x1E0DEEEE8]();
}

uint64_t swift_unknownObjectUnownedCopyInit()
{
  return MEMORY[0x1E0DEEEF0]();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return MEMORY[0x1E0DEEEF8]();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return MEMORY[0x1E0DEEF00]();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return MEMORY[0x1E0DEEF08]();
}

uint64_t swift_unknownObjectUnownedTakeAssign()
{
  return MEMORY[0x1E0DEEF10]();
}

uint64_t swift_unknownObjectUnownedTakeInit()
{
  return MEMORY[0x1E0DEEF18]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1E0DEEF60]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1E0DEEF68]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1E0DEEF70]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1E0DEEF88]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1E0DEEF90]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1E0DEEFB0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1E0DEEFB8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
  MEMORY[0x1E0C8BF60](__Setup, __Ir, __Ii, __Or, __Oi);
}

vDSP_DFT_Setup vDSP_DFT_zop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x1E0C8BFA0](__Previous, __Length, *(_QWORD *)&__Direction);
}

void vDSP_measqv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1F8](__A, __IA, __C, __N);
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA60](__A, __IA, __C, __IC, __N);
}

uint64_t vImageDecodeVectorHalf()
{
  return MEMORY[0x1E0C8D1F8]();
}

uint64_t vImageEncodeVectorHalf()
{
  return MEMORY[0x1E0C8D220]();
}

uint64_t vImageEncodeVectorOptionsCreate()
{
  return MEMORY[0x1E0C8D228]();
}

uint64_t vImageEncodeVectorOptionsFree()
{
  return MEMORY[0x1E0C8D230]();
}

uint64_t vImageEncodeVectorOptionsSetQuantization()
{
  return MEMORY[0x1E0C8D238]();
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1E0C85AE8](*(_QWORD *)&target_task, address, *(_QWORD *)&control, state);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

